Starting experiment #1 for 4_cora_imdb

Start learning from source dataset

Source train facts examples: 42558
Source train pos examples: 3017
Source train neg examples: 5022

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.25375166443991654;  // std dev = 0.489, 6,595.000 (wgt'ed) examples reached here.  /* #neg=3,986 #pos=2,609 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.11529179224236855;  // std dev = 4.479, 105.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=27 */
%   | | | else return 0.31078051404687906;  // std dev = 6.861, 190.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=86 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.46790503266048855;  // std dev = 4.417, 82.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=50 */
%   | | | else return 0.20814893509951235;  // std dev = 2.133, 20.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=7 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.4748156017661778;  // std dev = 3.766, 60.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=37 */
%   | | | else return 0.6142464960751212;  // std dev = 2.750, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | then return 0.045745834324316524;  // std dev = 0.390, 645.000 (wgt'ed) examples reached here.  /* #neg=524 #pos=121 */
%   | else return 0.02093963277393071;  // std dev = 0.369, 301.000 (wgt'ed) examples reached here.  /* #neg=252 #pos=49 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.2202789253000489;  // std dev = 0.489, 6,595.000 (wgt'ed) examples reached here.  /* #neg=3,986 #pos=2,609 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.0815140714063931;  // std dev = 4.479, 105.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=27 */
%   | | | else return 0.2685926717395528;  // std dev = 6.861, 190.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=86 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.40837613259448097;  // std dev = 4.389, 82.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=50 */
%   | | | else return 0.14101535675698904;  // std dev = 2.134, 20.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=7 */
%   | | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | | then return 0.7848853972746143;  // std dev = 0.022, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.44181395471449136;  // std dev = 4.632, 97.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=64 */
%   else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | then return 0.04145180608364211;  // std dev = 0.390, 645.000 (wgt'ed) examples reached here.  /* #neg=524 #pos=121 */
%   | else return 0.015443642182564108;  // std dev = 0.369, 301.000 (wgt'ed) examples reached here.  /* #neg=252 #pos=49 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.18612745546670761;  // std dev = 0.489, 6,595.000 (wgt'ed) examples reached here.  /* #neg=3,986 #pos=2,609 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.1417697000866624;  // std dev = 7.707, 263.000 (wgt'ed) examples reached here.  /* #neg=170 #pos=93 */
%   | | | else return 0.39717383827381164;  // std dev = 2.739, 32.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.3286333906661143;  // std dev = 4.362, 82.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=50 */
%   | | | else return 0.11466388020802412;  // std dev = 2.136, 20.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=7 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.33362325130600723;  // std dev = 3.742, 60.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=37 */
%   | | | else return 0.4320284206375123;  // std dev = 2.744, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | then return 0.036270579657639114;  // std dev = 0.390, 645.000 (wgt'ed) examples reached here.  /* #neg=524 #pos=121 */
%   | else return 0.013348050031270688;  // std dev = 0.369, 301.000 (wgt'ed) examples reached here.  /* #neg=252 #pos=49 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.15376240055336185;  // std dev = 0.489, 6,595.000 (wgt'ed) examples reached here.  /* #neg=3,986 #pos=2,609 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.039355388262597046;  // std dev = 4.479, 105.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=27 */
%   | | | else return 0.19026773487392346;  // std dev = 6.825, 190.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=86 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return 0.42945331874064585;  // std dev = 0.371, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.2149065296212601;  // std dev = 4.762, 94.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=51 */
%   | | | else return 0.2808667660315747;  // std dev = 4.607, 99.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=66 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( haswordauthor(M, K) )
%   | | then return 0.11327522227551755;  // std dev = 0.444, 63.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=17 */
%   | | else return 0.024083599112996193;  // std dev = 0.383, 582.000 (wgt'ed) examples reached here.  /* #neg=478 #pos=104 */
%   | else return 0.008982215589516453;  // std dev = 0.369, 301.000 (wgt'ed) examples reached here.  /* #neg=252 #pos=49 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.12466581290352849;  // std dev = 0.489, 6,595.000 (wgt'ed) examples reached here.  /* #neg=3,986 #pos=2,609 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.020088475454078554;  // std dev = 4.479, 105.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=27 */
%   | | | else return 0.15190212028896452;  // std dev = 6.822, 190.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=86 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, A) )
%   | | | then return 0.20567472435217807;  // std dev = 4.028, 71.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=44 */
%   | | | else return 0.07087719395858856;  // std dev = 2.685, 31.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=13 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.20821153028198738;  // std dev = 3.722, 60.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=37 */
%   | | | else return 0.2609087550846064;  // std dev = 2.742, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | then return 0.028413028101778967;  // std dev = 0.390, 645.000 (wgt'ed) examples reached here.  /* #neg=524 #pos=121 */
%   | else return 0.007809545790365885;  // std dev = 0.369, 301.000 (wgt'ed) examples reached here.  /* #neg=252 #pos=49 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.09945562508083261;  // std dev = 0.489, 6,595.000 (wgt'ed) examples reached here.  /* #neg=3,986 #pos=2,609 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.06050965584022756;  // std dev = 7.677, 263.000 (wgt'ed) examples reached here.  /* #neg=170 #pos=93 */
%   | | | else return 0.24305081924403288;  // std dev = 2.739, 32.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.14786283765438238;  // std dev = 4.334, 82.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=50 */
%   | | | else return 0.030668623717483003;  // std dev = 2.152, 20.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=7 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.15718716528113352;  // std dev = 3.720, 60.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=37 */
%   | | | else return 0.19606053548193156;  // std dev = 2.742, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | then return 0.025582708555081185;  // std dev = 0.390, 645.000 (wgt'ed) examples reached here.  /* #neg=524 #pos=121 */
%   | else return 0.004622508030908493;  // std dev = 0.369, 301.000 (wgt'ed) examples reached here.  /* #neg=252 #pos=49 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.07833317677971688;  // std dev = 0.489, 6,595.000 (wgt'ed) examples reached here.  /* #neg=3,986 #pos=2,609 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return -0.0022064891736643588;  // std dev = 4.479, 105.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=27 */
%   | | | else return 0.09806701314082118;  // std dev = 6.798, 190.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=86 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, A) )
%   | | | then return 0.11878485128893466;  // std dev = 4.026, 71.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=44 */
%   | | | else return 0.03769398413395367;  // std dev = 2.680, 31.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=13 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.11803621377439066;  // std dev = 3.720, 60.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=37 */
%   | | | else return 0.148523030194474;  // std dev = 2.742, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | then return 0.04385116748479105;  // std dev = 0.405, 91.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=19 */
%   | else return 0.0134002114788751;  // std dev = 0.381, 855.000 (wgt'ed) examples reached here.  /* #neg=704 #pos=151 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.06136839292531212;  // std dev = 0.489, 6,595.000 (wgt'ed) examples reached here.  /* #neg=3,986 #pos=2,609 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return -0.016594469267033164;  // std dev = 4.479, 105.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=27 */
%   | | | else return 0.07547068939781854;  // std dev = 6.797, 190.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=86 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return 0.25721140167587;  // std dev = 0.357, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.05686117244938169;  // std dev = 4.689, 94.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=51 */
%   | | | else return 0.09400108788583562;  // std dev = 4.609, 99.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=66 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( haswordauthor(M, K) )
%   | | then return 0.08803400902990298;  // std dev = 0.443, 63.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=17 */
%   | | else return 0.012575211203439905;  // std dev = 0.383, 582.000 (wgt'ed) examples reached here.  /* #neg=478 #pos=104 */
%   | else return 0.0015076097579237377;  // std dev = 0.369, 301.000 (wgt'ed) examples reached here.  /* #neg=252 #pos=49 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.04758918922239844;  // std dev = 0.489, 6,595.000 (wgt'ed) examples reached here.  /* #neg=3,986 #pos=2,609 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.019029506634912555;  // std dev = 7.660, 263.000 (wgt'ed) examples reached here.  /* #neg=170 #pos=93 */
%   | | | else return 0.14116801102103682;  // std dev = 2.739, 32.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=20 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.18891240039948792;  // std dev = 0.348, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.04408041579455102;  // std dev = 4.758, 94.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=51 */
%   | | | else return 0.07131392050227048;  // std dev = 4.548, 99.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=66 */
%   else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | then if ( haswordauthor(N, L) )
%   | | then return 0.0944385270036406;  // std dev = 0.442, 63.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=17 */
%   | | else return 0.009413446691935464;  // std dev = 0.383, 582.000 (wgt'ed) examples reached here.  /* #neg=478 #pos=104 */
%   | else return -1.2288338928434755E-4;  // std dev = 0.369, 301.000 (wgt'ed) examples reached here.  /* #neg=252 #pos=49 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.03680361606095301;  // std dev = 0.489, 6,595.000 (wgt'ed) examples reached here.  /* #neg=3,986 #pos=2,609 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return -0.022799398961743756;  // std dev = 4.479, 105.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=27 */
%   | | | else return 0.04803852179042823;  // std dev = 6.787, 190.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=86 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return 0.14674569372166904;  // std dev = 0.349, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.03332968354353025;  // std dev = 4.758, 94.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=51 */
%   | | | else return 0.05455784283721132;  // std dev = 4.549, 99.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=66 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordauthor(N, M) )
%   | | then return 0.0073671532051572475;  // std dev = 0.383, 557.000 (wgt'ed) examples reached here.  /* #neg=457 #pos=100 */
%   | | else return 0.06509181786735048;  // std dev = 0.426, 88.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=21 */
%   | else return -3.136575183647233E-4;  // std dev = 0.369, 301.000 (wgt'ed) examples reached here.  /* #neg=252 #pos=49 */


Starting fold 1

Target train facts examples: 863
Target train pos examples: 326
Target train neg examples: 10928

Target test facts examples: 215
Target test pos	 examples: 56
Target test neg examples: 3308

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995125;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.03763611458669184;  // std dev = 2.397, 39.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048763;  // std dev = 8.94e-08, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109544;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.07225547302218457;  // std dev = 2.339, 32.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839133;  // std dev = 0.000, 107.000 (wgt'ed) examples reached here.  /* #neg=107 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( movie(E, A) )
%   | | then return 0.34161393381222643;  // std dev = 0.357, 97.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=65 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.1123163781936062;  // std dev = 8.16e-08, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.47022619659845694;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return -0.011672170678580708;  // std dev = 2.375, 36.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1015963294878363;  // std dev = 2.28e-09, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.19900153125298886;  // std dev = 0.195, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.3567581963782256;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.020002692432510117;  // std dev = 2.390, 38.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926104;  // std dev = 2.79e-08, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.253270467626668;  // std dev = 0.906, 61.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=58 */
%   | else if ( movie(E, A) )
%   | | then return -0.009580400686377595;  // std dev = 0.380, 39.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=7 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839682;  // std dev = 5.05e-08, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14801189209812543;  // std dev = 0.267, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(B, E) )
%   | | then return 0.23156575192789927;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.015237185742305929;  // std dev = 2.390, 38.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109164;  // std dev = 4.83e-08, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17726170707770536;  // std dev = 0.654, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( genre(A, E) )
%   | | then return -0.07335866811317893;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.048089783432453626;  // std dev = 2.441, 47.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333707;  // std dev = 0.000, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12992288696327045;  // std dev = 0.213, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( movie(E, B) )
%   | | then return 0.08994967527971778;  // std dev = 2.575, 99.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=65 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420265;  // std dev = 4.75e-09, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15469157354842872;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( genre(A, E) )
%   | | then return -0.060683111820544;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.04094184929535955;  // std dev = 2.421, 43.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.105245
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.855 seconds
Total inference time: 2.027 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.987481
   AUC PR    = 0.920691
   CLL	      = -0.104824
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.892308
   F1        = 0.943089


Total scoring time: 1.477 seconds
Parameter learned model CLL: -0.104824


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 4, 0], 'true,false,true': [0.0, 0, 58], 'true,false,false,true': [2.397, 32, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.94e-08, 99, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 58], 'true,false,true': [0.0, 5, 0], 'true,false,false,true': [2.339, 25, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 107, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 4, 0], 'true,false,true': [0.357, 32, 65], 'true,false,false': [0.0, 0, 0], 'false,true': [8.16e-08, 101, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 58], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [2.375, 29, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.28e-09, 103, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.195, 4, 0], 'true,false,true': [0.0, 0, 58], 'true,false,false,true': [2.39, 31, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.79e-08, 90, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.906, 3, 58], 'true,false,true': [0.38, 32, 7], 'true,false,false': [0.0, 0, 0], 'false,true': [5.05e-08, 87, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.267, 7, 0], 'true,false,true': [0.0, 0, 58], 'true,false,false,true': [2.39, 31, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.83e-08, 85, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.654, 2, 58], 'true,false,true': [0.0, 5, 0], 'true,false,false,true': [2.441, 40, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 100, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.213, 4, 0], 'true,false,true': [2.575, 34, 65], 'true,false,false': [0.0, 0, 0], 'false,true': [4.75e-09, 98, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 58], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [2.421, 36, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 95, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.22938927556121883, 8.074349270001139e-17], 'true': [0.0, 0.22106493782548553], 'true,false': [-3.675221047035001e-16, 0.1472715318869167], 'true,false,false': [0.1472715318869167, nan], 'false': [8.074349270001139e-17, nan]}, {'': [0.16734335744390588, -6.22554967079527e-18], 'true': [-1.2250736823450003e-16, 0.15237209894604647], 'true,false': [0.0, 0.17089843749999997], 'true,false,false': [0.17089843749999997, nan], 'false': [-6.22554967079527e-18, nan]}, {'': [0.12996290237617728, 6.5953843047039e-17], 'true': [0.0, 0.12716169323407095], 'true,false': [0.12716169323407095, nan], 'false': [6.5953843047039e-17, nan]}, {'': [0.11486459025870596, 6.467318590049456e-18], 'true': [0.0, 0.15663580246913558], 'true,false': [nan, 0.15663580246913558], 'true,false,false': [0.15663580246913558, nan], 'false': [6.467318590049456e-18, nan]}, {'': [0.09642305719032829, 8.635067969306773e-18], 'true': [0.009487773330910089, 0.09343159825602661], 'true,false': [-1.8376105235175005e-16, 0.15027700831024915], 'true,false,false': [0.15027700831024915, nan], 'false': [8.635067969306773e-18, nan]}, {'': [0.08089290282810771, 2.9350723639515634e-17], 'true': [0.01344909501259886, 0.1442366823917032], 'true,false': [0.1442366823917032, nan], 'false': [2.9350723639515634e-17, nan]}, {'': [0.07474663070929063, 2.7429039431915633e-17], 'true': [0.010219047053288438, 0.07405163749672057], 'true,false': [-8.422381566121877e-17, 0.15027700831024918], 'true,false,false': [0.15027700831024918, nan], 'false': [2.7429039431915633e-17, nan]}, {'': [0.06993806642199754, -5.551115123125783e-18], 'true': [0.007123057985851067, 0.11462177715525536], 'true,false': [-6.938893903907229e-19, 0.12675418741512012], 'true,false,false': [0.12675418741512012, nan], 'false': [-5.551115123125783e-18, nan]}, {'': [0.06663671605317126, 2.2657612747452175e-17], 'true': [0.011308957306135424, 0.0669947463490788], 'true,false': [0.0669947463490788, nan], 'false': [2.2657612747452175e-17, nan]}, {'': [0.06689024012143978, -1.460819769243627e-17], 'true': [0.0, 0.13320104492069282], 'true,false': [0.0, 0.13628988642509487], 'true,false,false': [0.13628988642509487, nan], 'false': [-1.460819769243627e-17, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995125;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.14185106490048774;  // std dev = 2.36e-08, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   else return -0.14185106490048763;  // std dev = 8.69e-08, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109542;  // std dev = 7.30e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return 0.696003466357084;  // std dev = 0.139, 36.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=35 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.7194734122109543;  // std dev = 2.11e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   else return -0.1254446385283914;  // std dev = 0.000, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.16786807258892242;  // std dev = 0.079, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( director(B), actor(A) )
%   | | then return 0.5584829197463258;  // std dev = 0.023, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | | else return -0.11231637819360639;  // std dev = 7.45e-09, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else return -0.1123163781936062;  // std dev = 8.30e-08, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.41675586338472465;  // std dev = 3.65e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return 0.40530160985690045;  // std dev = 0.102, 36.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=35 */
%   | else if ( actor(B) )
%   | | then return -0.10114547341096644;  // std dev = 0.008, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | else return 0.4167558633847247;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.10159632948783621;  // std dev = 5.27e-08, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.0881601560532361;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.32481412247616487;  // std dev = 0.028, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else if ( actor(B) )
%   | | | then return -0.09272919997015495;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | | else return 0.3201981946875901;  // std dev = 1.83e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.09269127618926108;  // std dev = 0.000, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.0848278136651322;  // std dev = 0.006, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | else return 0.2576338177286432;  // std dev = 0.026, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   else return -0.08518475138839682;  // std dev = 5.37e-08, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07520897511714406;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.2117932270604908;  // std dev = 0.022, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.20904473437067472;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.08824581824793543;  // std dev = 0.213, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   else return -0.07877675473109162;  // std dev = 4.94e-08, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17858943052676624;  // std dev = 0.019, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( genre(A, E) )
%   | | then return -0.0701422565416286;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( actor(B) )
%   | | | then return -0.07265790174127605;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | | else return 0.17657338294711056;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.07324622576333707;  // std dev = 0.000, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.1537116773294165;  // std dev = 0.017, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else if ( actor(A) )
%   | | then return -0.06791175900070415;  // std dev = 9.13e-09, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else return -0.1690121787566968;  // std dev = 0.283, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.06842697784420265;  // std dev = 4.28e-08, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1349104263472023;  // std dev = 0.015, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( genre(A, E) )
%   | | then return -0.05605891147533066;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( actor(B) )
%   | | | then return -0.06373706746702855;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | | else return 0.13353906849510888;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.06419184008202626;  // std dev = 0.000, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063471
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.415 seconds
Total inference time: 1.481 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.066446
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.688 seconds
Refined model CLL: -0.066446


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063471
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 7.435 seconds
Total inference time: 1.481 seconds
AUC ROC: 1.0
Total revision time: 7.435
Best scored revision CLL: -0.066446


Dataset: 4_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 00:00:11
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063471, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 7.435, 'Inference time': 1.481, 'parameter_0.2': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.105245, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 1.855, 'Inference time': 2.027}}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995111;  // std dev = 5.06e-07, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.18209259707134262;  // std dev = 3.943, 71.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=23 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048835;  // std dev = 0.000, 192.000 (wgt'ed) examples reached here.  /* #neg=192 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7039703287111502;  // std dev = 1.184, 109.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=107 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.10831585668579007;  // std dev = 4.087, 84.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=23 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1254446385283915;  // std dev = 0.000, 176.000 (wgt'ed) examples reached here.  /* #neg=176 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1605258259766627;  // std dev = 0.147, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( movie(E, A) )
%   | | then return 0.3597435254122743;  // std dev = 0.373, 189.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=130 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360657;  // std dev = 0.000, 194.000 (wgt'ed) examples reached here.  /* #neg=194 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.451363557534646;  // std dev = 1.141, 110.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=107 */
%   | else if ( genre(A, E) )
%   | | then return -0.09727977871909409;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.07455164938898709;  // std dev = 3.969, 73.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=23 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783648;  // std dev = 0.000, 173.000 (wgt'ed) examples reached here.  /* #neg=173 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11835985849842598;  // std dev = 0.248, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( genre(B, E) )
%   | | then return 0.3604926959650242;  // std dev = 0.000, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.0522695003970557;  // std dev = 3.993, 75.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=23 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926055;  // std dev = 9.31e-08, 205.000 (wgt'ed) examples reached here.  /* #neg=205 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2674858347077243;  // std dev = 0.920, 110.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=107 */
%   | else if ( movie(E, A) )
%   | | then return -0.015340427739941084;  // std dev = 0.416, 99.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=23 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 7.74e-08, 202.000 (wgt'ed) examples reached here.  /* #neg=202 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.17146687524570345;  // std dev = 0.359, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( genre(B, E) )
%   | | then return 0.23126094485571863;  // std dev = 0.000, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.012344376262158504;  // std dev = 4.087, 84.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=23 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109147;  // std dev = 7.74e-08, 184.000 (wgt'ed) examples reached here.  /* #neg=184 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1841327879549993;  // std dev = 0.655, 109.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=107 */
%   | else if ( genre(A, E) )
%   | | then return -0.06721561621112325;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.01385586975635533;  // std dev = 4.153, 92.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=23 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333668;  // std dev = 8.07e-09, 188.000 (wgt'ed) examples reached here.  /* #neg=188 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.18815561656303095;  // std dev = 0.354, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( movie(E, B) )
%   | | then return 0.10410706032626514;  // std dev = 4.173, 188.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=130 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420262;  // std dev = 5.67e-09, 185.000 (wgt'ed) examples reached here.  /* #neg=185 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1517802911603714;  // std dev = 1.12e-07, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | else if ( genre(A, E) )
%   | | then return -0.052868026425203156;  // std dev = 3.23e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.014313363259457305;  // std dev = 4.105, 86.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=23 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #neg=204 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.133229
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.031 seconds
Total inference time: 1.741 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.97873
   AUC PR    = 0.865825
   CLL	      = -0.130471
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.823077
   F1        = 0.902954


Total scoring time: 2.092 seconds
Parameter learned model CLL: -0.130471


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 10, 0], 'true,false,true': [5.06e-07, 0, 107], 'true,false,false,true': [3.943, 48, 23], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 192, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.184, 2, 107], 'true,false,true': [0.0, 4, 0], 'true,false,false,true': [4.087, 61, 23], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 176, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.147, 7, 0], 'true,false,true': [0.373, 59, 130], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 194, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.141, 3, 107], 'true,false,true': [0.0, 9, 0], 'true,false,false,true': [3.969, 50, 23], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 173, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.248, 13, 0], 'true,false,true': [0.0, 0, 107], 'true,false,false,true': [3.993, 52, 23], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.31e-08, 205, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.92, 3, 107], 'true,false,true': [0.416, 76, 23], 'true,false,false': [0.0, 0, 0], 'false,true': [7.74e-08, 202, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.359, 10, 0], 'true,false,true': [0.0, 0, 107], 'true,false,false,true': [4.087, 61, 23], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.74e-08, 184, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.655, 2, 107], 'true,false,true': [0.0, 12, 0], 'true,false,false,true': [4.153, 69, 23], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.07e-09, 188, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.354, 8, 0], 'true,false,true': [4.173, 58, 130], 'true,false,false': [0.0, 0, 0], 'false,true': [5.67e-09, 185, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.12e-07, 0, 107], 'true,false,true': [3.23e-09, 11, 0], 'true,false,false,true': [4.105, 63, 23], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 204, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.2133318243549161, -2.266705341943028e-16], 'true': [-1.1102230246251566e-17, 0.19694483019821174], 'true,false': [2.3906110735853837e-15, 0.2190041658401121], 'true,false,false': [0.2190041658401121, nan], 'false': [-2.266705341943028e-16, nan]}, {'': [0.18380696759635387, -1.2616170734376778e-17], 'true': [0.01285848949310174, 0.19217069956544217], 'true,false': [0.0, 0.19883786848072646], 'true,false,false': [0.19883786848072646, nan], 'false': [-1.2616170734376778e-17, nan]}, {'': [0.14391858757299103, -3.433679457603577e-17], 'true': [0.003098867807396314, 0.13946698282111344], 'true,false': [0.13946698282111344, nan], 'false': [-3.433679457603577e-17, nan]}, {'': [0.12836261688078152, -8.342716370015627e-17], 'true': [0.011825124132338645, 0.19499991522773483], 'true,false': [0.0, 0.21580033777444177], 'true,false,false': [0.21580033777444177, nan], 'false': [-8.342716370015627e-17, nan]}, {'': [0.11127665711526251, 4.224263215646937e-17], 'true': [0.004719938790965627, 0.11063520945778112], 'true,false': [-9.960879473272432e-17, 0.2126222222222227], 'true,false,false': [0.2126222222222227, nan], 'false': [4.224263215646937e-17, nan]}, {'': [0.10611246468144797, 2.967922937116755e-17], 'true': [0.007691464054779473, 0.17336876639698362], 'true,false': [0.17336876639698362, nan], 'false': [2.967922937116755e-17, nan]}, {'': [0.09939702305129641, 3.2582632244433945e-17], 'true': [0.012881479860940409, 0.0992544021375424], 'true,false': [-1.245109934159054e-16, 0.19883786848072565], 'true,false,false': [0.19883786848072565, nan], 'false': [3.2582632244433945e-17, nan]}, {'': [0.09355732312901817, 6.495985782381235e-17], 'true': [0.003940298428242128, 0.16615600756712762], 'true,false': [-1.734723475976807e-18, 0.18749999999999964], 'true,false,false': [0.18749999999999964, nan], 'false': [6.495985782381235e-17, nan]}, {'': [0.09281131632909863, 3.2406509907977544e-17], 'true': [0.01563341083935122, 0.09260905507923342], 'true,false': [0.09260905507923342, nan], 'false': [3.2406509907977544e-17, nan]}, {'': [0.08991059582724241, -1.6326809185664067e-18], 'true': [1.162102605215117e-16, 0.17384880459170488], 'true,false': [9.462128050782583e-19, 0.1959167117360736], 'true,false,false': [0.1959167117360736, nan], 'false': [-1.6326809185664067e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995111;  // std dev = 5.06e-07, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.8581489350995121;  // std dev = 8.43e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.14185106490048768;  // std dev = 4.94e-08, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   else return -0.1418510649004884;  // std dev = 0.000, 200.000 (wgt'ed) examples reached here.  /* #neg=200 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109547;  // std dev = 0.000, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( actor(B) )
%   | | | then return -0.12544463852839152;  // std dev = 0.000, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
%   | | | else return 0.7194734122109543;  // std dev = 5.96e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   else return -0.1254446385283917;  // std dev = 0.000, 207.000 (wgt'ed) examples reached here.  /* #neg=207 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5553664367462834;  // std dev = 4.84e-07, 130.000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.11739881585650629;  // std dev = 0.195, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   else return -0.11231637819360661;  // std dev = 0.000, 201.000 (wgt'ed) examples reached here.  /* #neg=201 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.4175135841583106;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else return 0.40895111285985647;  // std dev = 0.073, 73.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=72 */
%   | else if ( genre(A, E) )
%   | | then return -0.10113337087727661;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.41751358415831047;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.10468048586899534;  // std dev = 0.148, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   else return -0.1015963294878365;  // std dev = 0.000, 189.000 (wgt'ed) examples reached here.  /* #neg=189 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11346504208176017;  // std dev = 0.060, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( genre(B, E) )
%   | | then return 0.3219689808141657;  // std dev = 0.009, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.32071184716014955;  // std dev = 2.98e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.09553708401223072;  // std dev = 0.137, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   else return -0.09269127618926058;  // std dev = 9.06e-08, 193.000 (wgt'ed) examples reached here.  /* #neg=193 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.2558782959670886;  // std dev = 0.009, 130.000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.0865887431432658;  // std dev = 0.175, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
%   else return -0.08518475138839678;  // std dev = 7.15e-08, 179.000 (wgt'ed) examples reached here.  /* #neg=179 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1437118817565059;  // std dev = 0.183, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.21038881933017786;  // std dev = 0.007, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.20964070461695175;  // std dev = 2.58e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.07968077282417903;  // std dev = 0.086, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   else return -0.07877675473109146;  // std dev = 6.99e-08, 210.000 (wgt'ed) examples reached here.  /* #neg=210 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.17671873978180727;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else return 0.17253724839119963;  // std dev = 0.046, 73.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=72 */
%   | else if ( genre(A, E) )
%   | | then return -0.0672579440169155;  // std dev = 1.86e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.17701067096554202;  // std dev = 3.33e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.07510313854628288;  // std dev = 0.113, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   else return -0.07324622576333666;  // std dev = 1.17e-07, 198.000 (wgt'ed) examples reached here.  /* #neg=198 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.1534124843099823;  // std dev = 0.009, 130.000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else if ( actor(B) )
%   | | then return -0.06716676066826446;  // std dev = 0.009, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
%   | | else return -0.196744867006558;  // std dev = 0.105, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.06842697784420262;  // std dev = 7.38e-08, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1346702721693967;  // std dev = 0.007, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | else if ( genre(A, E) )
%   | | then return -0.05929981653638187;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( actor(B) )
%   | | | then return -0.0633608754497631;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | | | else return 0.13387109708108103;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   else return -0.06419184008202626;  // std dev = 0.000, 208.000 (wgt'ed) examples reached here.  /* #neg=208 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.06333
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.207 seconds
Total inference time: 1.778 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.065692
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.987 seconds
Refined model CLL: -0.065692


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.06333
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 9.317 seconds
Total inference time: 1.778 seconds
AUC ROC: 1.0
Total revision time: 9.317
Best scored revision CLL: -0.065692


Dataset: 4_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 00:00:25
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.06333, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 9.317, 'Inference time': 1.778, 'parameter_0.4': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.133229, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 2.031, 'Inference time': 1.741}}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995098;  // std dev = 9.54e-07, 154.000 (wgt'ed) examples reached here.  /* #pos=154 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.15525038437487385;  // std dev = 5.368, 138.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=41 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004879;  // std dev = 4.21e-08, 290.000 (wgt'ed) examples reached here.  /* #neg=290 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7086411295091697;  // std dev = 1.187, 156.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=154 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 7.45e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.15356479814526466;  // std dev = 5.298, 130.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=41 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839202;  // std dev = 0.000, 304.000 (wgt'ed) examples reached here.  /* #neg=304 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12490568126213068;  // std dev = 0.107, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( movie(E, A) )
%   | | then return 0.3406975246543629;  // std dev = 0.387, 296.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=195 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360696;  // std dev = 0.000, 278.000 (wgt'ed) examples reached here.  /* #neg=278 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4687816825999177;  // std dev = 0.676, 155.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=154 */
%   | else if ( genre(A, E) )
%   | | then return -0.10045299658118888;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.03851147634379129;  // std dev = 5.437, 147.000 (wgt'ed) examples reached here.  /* #neg=106 #pos=41 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783662;  // std dev = 0.000, 294.000 (wgt'ed) examples reached here.  /* #neg=294 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12800845141811917;  // std dev = 0.255, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( genre(B, E) )
%   | | then return 0.3597914851853242;  // std dev = 0.000, 154.000 (wgt'ed) examples reached here.  /* #pos=154 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.09703509630507498;  // std dev = 5.184, 119.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=41 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926044;  // std dev = 1.33e-07, 277.000 (wgt'ed) examples reached here.  /* #neg=277 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.27468081285699436;  // std dev = 0.769, 156.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=154 */
%   | else if ( movie(E, A) )
%   | | then return 0.025646800668150664;  // std dev = 0.446, 145.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=41 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.05e-07, 303.000 (wgt'ed) examples reached here.  /* #neg=303 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13663550961640414;  // std dev = 0.298, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( genre(B, E) )
%   | | then return 0.22956986500457396;  // std dev = 1.33e-07, 154.000 (wgt'ed) examples reached here.  /* #pos=154 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.07061510234156095;  // std dev = 5.195, 120.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=41 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109143;  // std dev = 4.94e-08, 280.000 (wgt'ed) examples reached here.  /* #neg=280 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.188369250955746;  // std dev = 0.483, 155.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=154 */
%   | else if ( genre(A, E) )
%   | | then return -0.07366886310587108;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.03760747479644315;  // std dev = 5.269, 127.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=41 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333684;  // std dev = 7.03e-09, 262.000 (wgt'ed) examples reached here.  /* #neg=262 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12558891614134188;  // std dev = 0.407, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( movie(E, B) )
%   | | then return 0.11351468054339671;  // std dev = 5.281, 274.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=195 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420294;  // std dev = 0.000, 289.000 (wgt'ed) examples reached here.  /* #neg=289 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14319406793092546;  // std dev = 0.640, 156.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=154 */
%   | else if ( genre(A, E) )
%   | | then return -0.061173918159184444;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.01905768755018199;  // std dev = 5.217, 122.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=41 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202591;  // std dev = 7.09e-09, 308.000 (wgt'ed) examples reached here.  /* #neg=308 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.149234
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.325 seconds
Total inference time: 2.005 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.9746
   AUC PR    = 0.83969
   CLL	      = -0.144983
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.789744
   F1        = 0.882521


Total scoring time: 2.353 seconds
Parameter learned model CLL: -0.144983


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 14, 0], 'true,false,true': [9.54e-07, 0, 154], 'true,false,false,true': [5.368, 97, 41], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.21e-08, 290, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.187, 2, 154], 'true,false,true': [7.45e-09, 13, 0], 'true,false,false,true': [5.298, 89, 41], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 304, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.107, 9, 0], 'true,false,true': [0.387, 101, 195], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 278, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.676, 1, 154], 'true,false,true': [0.0, 14, 0], 'true,false,false,true': [5.437, 106, 41], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 294, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.255, 11, 0], 'true,false,true': [0.0, 0, 154], 'true,false,false,true': [5.184, 78, 41], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.33e-07, 277, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.769, 2, 154], 'true,false,true': [0.446, 104, 41], 'true,false,false': [0.0, 0, 0], 'false,true': [1.05e-07, 303, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.298, 9, 0], 'true,false,true': [1.33e-07, 0, 154], 'true,false,false,true': [5.195, 79, 41], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.94e-08, 280, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.483, 1, 154], 'true,false,true': [2.63e-09, 6, 0], 'true,false,false,true': [5.269, 86, 41], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.03e-09, 262, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.407, 14, 0], 'true,false,true': [5.281, 79, 195], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 289, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.64, 2, 154], 'true,false,true': [0.0, 7, 0], 'true,false,false,true': [5.217, 81, 41], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.09e-09, 308, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.23116109188774023, 6.1253684117250015e-18], 'true': [-1.1895246692412391e-17, 0.22184040157628565], 'true,false': [5.905809751772262e-15, 0.20883217811384283], 'true,false,false': [0.20883217811384283, nan], 'false': [6.1253684117250015e-18, nan]}, {'': [0.18573656114223605, -8.472754661613037e-17], 'true': [0.009035052836917036, 0.20272190273962098], 'true,false': [4.270088556250602e-18, 0.21591715976331466], 'true,false,false': [0.21591715976331466, nan], 'false': [-8.472754661613037e-17, nan]}, {'': [0.15157647653497427, -1.118210240629654e-16], 'true': [0.0012679244140092532, 0.1497496948727431], 'true,false': [0.1497496948727431, nan], 'false': [-1.118210240629654e-16, nan]}, {'': [0.14468578298521806, -5.588877811038203e-17], 'true': [0.0029439685549750407, 0.18516442485282458], 'true,false': [-1.982541115402065e-18, 0.20111990374381142], 'true,false,false': [0.20111990374381142, nan], 'false': [-5.588877811038203e-17, nan]}, {'': [0.1163623719645295, 6.412840575452168e-17], 'true': [0.005921538093428711, 0.11541590700712054], 'true,false': [-4.844609562000683e-16, 0.22583150907421803], 'true,false,false': [0.22583150907421803, nan], 'false': [6.412840575452168e-17, nan]}, {'': [0.11347289264983505, 3.664102391502167e-17], 'true': [0.00379018643416475, 0.19933416811669669], 'true,false': [0.19933416811669669, nan], 'false': [3.664102391502167e-17, nan]}, {'': [0.10442067658736558, 8.723180907769087e-18], 'true': [0.009861934481120124, 0.10472912436651403], 'true,false': [1.1534784671430197e-16, 0.2249305555555548], 'true,false,false': [0.2249305555555548, nan], 'false': [8.723180907769087e-18, nan]}, {'': [0.10349081243634675, 5.0002411032736055e-17], 'true': [0.0015066744781120555, 0.20928362732650643], 'true,false': [1.1564823173178713e-18, 0.21861243722487336], 'true,false,false': [0.21861243722487336, nan], 'false': [5.0002411032736055e-17, nan]}, {'': [0.10005327249076745, -4.8404187232792294e-17], 'true': [0.011826266301794619, 0.10178209872853898], 'true,false': [0.10178209872853898, nan], 'false': [-4.8404187232792294e-17, nan]}, {'': [0.10119085100176221, 4.9743758895542726e-17], 'true': [0.002626337070031146, 0.21134826469212184], 'true,false': [-4.956352788505163e-19, 0.2231255038968029], 'true,false,false': [0.2231255038968029, nan], 'false': [4.9743758895542726e-17, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995098;  // std dev = 9.54e-07, 154.000 (wgt'ed) examples reached here.  /* #pos=154 */
%   | | else if ( actor(B) )
%   | | | then return -0.14185106490048766;  // std dev = 7.74e-08, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
%   | | | else return 0.8581489350995117;  // std dev = 2.46e-07, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   else return -0.14185106490048788;  // std dev = 5.96e-08, 293.000 (wgt'ed) examples reached here.  /* #neg=293 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109552;  // std dev = 0.000, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | else return 0.7032249881582749;  // std dev = 0.116, 104.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=102 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.719473412210955;  // std dev = 0.000, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | | else return -0.1289692282843154;  // std dev = 0.217, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
%   else return -0.12544463852839202;  // std dev = 0.000, 309.000 (wgt'ed) examples reached here.  /* #neg=309 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12167961563583711;  // std dev = 0.108, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( actor(A), director(B) )
%   | | then return 0.5574632444720008;  // std dev = 0.028, 195.000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | | else return -0.11518526424501443;  // std dev = 0.200, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
%   else return -0.1123163781936069;  // std dev = 0.000, 291.000 (wgt'ed) examples reached here.  /* #neg=291 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.41700373729406726;  // std dev = 8.43e-08, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | else if ( actor(A) )
%   | | | then return 0.4209591650970077;  // std dev = 0.000, 102.000 (wgt'ed) examples reached here.  /* #pos=102 */
%   | | | else return -0.20419062375504582;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(A, E) )
%   | | then return -0.10074488692614891;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.41700373729406703;  // std dev = 6.66e-08, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | | else return -0.10357117285585801;  // std dev = 0.186, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
%   else return -0.1015963294878366;  // std dev = 0.000, 273.000 (wgt'ed) examples reached here.  /* #neg=273 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09872995561670228;  // std dev = 0.078, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( genre(B, E) )
%   | | then return 0.3221429144487019;  // std dev = 0.016, 154.000 (wgt'ed) examples reached here.  /* #pos=154 */
%   | | else if ( actor(B) )
%   | | | then return -0.09198989859572944;  // std dev = 4.47e-08, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
%   | | | else return 0.3203662170107203;  // std dev = 0.000, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   else return -0.09269127618926043;  // std dev = 1.38e-07, 282.000 (wgt'ed) examples reached here.  /* #neg=282 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.25589397354743443;  // std dev = 0.015, 195.000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.084541294084763;  // std dev = 0.002, 111.000 (wgt'ed) examples reached here.  /* #neg=111 */
%   else return -0.08518475138839678;  // std dev = 9.88e-08, 276.000 (wgt'ed) examples reached here.  /* #neg=276 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( actor(B) )
%   | | then return -0.07777340267705447;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.19665516396814306;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.21049000591758737;  // std dev = 0.012, 154.000 (wgt'ed) examples reached here.  /* #pos=154 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.20943250507006184;  // std dev = 2.98e-08, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | | else return -0.08093449387076143;  // std dev = 0.249, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
%   else return -0.07877675473109143;  // std dev = 5.16e-08, 281.000 (wgt'ed) examples reached here.  /* #neg=281 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( actor(A) )
%   | | then return 0.17763357364702295;  // std dev = 0.011, 154.000 (wgt'ed) examples reached here.  /* #pos=154 */
%   | | else return -0.16742504961309973;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(A, E) )
%   | | then return -0.07237511829709863;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.1768579344710961;  // std dev = 0.000, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | | else return -0.07530667919040174;  // std dev = 0.237, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
%   else return -0.07324622576333699;  // std dev = 9.42e-08, 306.000 (wgt'ed) examples reached here.  /* #neg=306 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.15302755227278442;  // std dev = 0.010, 195.000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else if ( actor(B) )
%   | | then return -0.0677076087906784;  // std dev = 0.000175, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
%   | | else return -0.2203565491744479;  // std dev = 0.184, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.06842697784420289;  // std dev = 0.000, 278.000 (wgt'ed) examples reached here.  /* #neg=278 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.1333939917950013;  // std dev = 0.000, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | else return 0.12991972192204185;  // std dev = 0.035, 104.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=102 */
%   | else if ( genre(A, E) )
%   | | then return -0.06351558414831984;  // std dev = 5.89e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.13381184165476254;  // std dev = 4.47e-08, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | | else return -0.06760719746696918;  // std dev = 0.263, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
%   else return -0.06419184008202591;  // std dev = 1.24e-07, 308.000 (wgt'ed) examples reached here.  /* #neg=308 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063271
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.712 seconds
Total inference time: 2.01 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.065475
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.351 seconds
Refined model CLL: -0.065475


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063271
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 10.741 seconds
Total inference time: 2.01 seconds
AUC ROC: 1.0
Total revision time: 10.741
Best scored revision CLL: -0.065475


Dataset: 4_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 00:00:40
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063271, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 10.741, 'Inference time': 2.01, 'parameter_0.6': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.149234, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 2.325, 'Inference time': 2.005}}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 7.45e-09, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995091;  // std dev = 1.08e-06, 212.000 (wgt'ed) examples reached here.  /* #pos=212 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.1869160583871839;  // std dev = 5.676, 146.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=48 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004874;  // std dev = 2.76e-07, 380.000 (wgt'ed) examples reached here.  /* #neg=380 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7155066607990352;  // std dev = 0.843, 213.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=212 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.10812482530683497;  // std dev = 5.902, 175.000 (wgt'ed) examples reached here.  /* #neg=127 #pos=48 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839224;  // std dev = 0.000, 393.000 (wgt'ed) examples reached here.  /* #neg=393 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1428511789085055;  // std dev = 0.196, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( movie(E, A) )
%   | | then return 0.3620973985289848;  // std dev = 0.373, 376.000 (wgt'ed) examples reached here.  /* #neg=116 #pos=260 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360632;  // std dev = 0.000, 380.000 (wgt'ed) examples reached here.  /* #neg=380 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4567807951026747;  // std dev = 1.150, 215.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=212 */
%   | else if ( genre(A, E) )
%   | | then return -0.09884298914907372;  // std dev = 9.13e-09, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.04391895202952562;  // std dev = 5.855, 168.000 (wgt'ed) examples reached here.  /* #neg=120 #pos=48 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783609;  // std dev = 9.03e-09, 376.000 (wgt'ed) examples reached here.  /* #neg=376 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.129606114596503;  // std dev = 0.351, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else if ( genre(B, E) )
%   | | then return 0.3560536967513879;  // std dev = 0.000, 212.000 (wgt'ed) examples reached here.  /* #pos=212 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.03748710903338089;  // std dev = 5.848, 167.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=48 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926074;  // std dev = 1.70e-07, 380.000 (wgt'ed) examples reached here.  /* #neg=380 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.26672821301680555;  // std dev = 1.193, 217.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=212 */
%   | else if ( movie(E, A) )
%   | | then return 0.014705886220406583;  // std dev = 0.428, 189.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=48 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.19e-07, 362.000 (wgt'ed) examples reached here.  /* #neg=362 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1364198983234608;  // std dev = 0.409, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( genre(B, E) )
%   | | then return 0.22876185088970882;  // std dev = 0.000, 212.000 (wgt'ed) examples reached here.  /* #pos=212 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.03828692360511835;  // std dev = 5.804, 161.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=48 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109148;  // std dev = 1.13e-07, 415.000 (wgt'ed) examples reached here.  /* #neg=415 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18867262503636398;  // std dev = 0.476, 213.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=212 */
%   | else if ( genre(A, E) )
%   | | then return -0.0717368965223644;  // std dev = 7.45e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.002382139517835579;  // std dev = 5.921, 178.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=48 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0732462257633377;  // std dev = 0.000, 379.000 (wgt'ed) examples reached here.  /* #neg=379 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09070599115644319;  // std dev = 0.350, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else if ( movie(E, B) )
%   | | then return 0.08166277172552268;  // std dev = 6.221, 399.000 (wgt'ed) examples reached here.  /* #neg=139 #pos=260 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420337;  // std dev = 0.000, 410.000 (wgt'ed) examples reached here.  /* #neg=410 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15259221193583916;  // std dev = 0.000, 212.000 (wgt'ed) examples reached here.  /* #pos=212 */
%   | else if ( genre(A, E) )
%   | | then return -0.061644035908504084;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.015902140741689406;  // std dev = 5.927, 179.000 (wgt'ed) examples reached here.  /* #neg=131 #pos=48 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202562;  // std dev = 9.63e-09, 391.000 (wgt'ed) examples reached here.  /* #neg=391 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.134144
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.943 seconds
Total inference time: 1.968 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.977931
   AUC PR    = 0.860153
   CLL	      = -0.131643
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.815385
   F1        = 0.898305


Total scoring time: 2.548 seconds
Parameter learned model CLL: -0.131643


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [7.45e-09, 20, 0], 'true,false,true': [1.08e-06, 0, 212], 'true,false,false,true': [5.676, 98, 48], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.76e-07, 380, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.843, 1, 212], 'true,false,true': [0.0, 9, 0], 'true,false,false,true': [5.902, 127, 48], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 393, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.196, 15, 0], 'true,false,true': [0.373, 116, 260], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 380, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.15, 3, 212], 'true,false,true': [9.13e-09, 17, 0], 'true,false,false,true': [5.855, 120, 48], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.03e-09, 376, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.351, 20, 0], 'true,false,true': [0.0, 0, 212], 'true,false,false,true': [5.848, 119, 48], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.7e-07, 380, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [1.193, 5, 212], 'true,false,true': [0.428, 141, 48], 'true,false,false': [0.0, 0, 0], 'false,true': [1.19e-07, 362, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.409, 17, 0], 'true,false,true': [0.0, 0, 212], 'true,false,false,true': [5.804, 113, 48], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.13e-07, 415, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.476, 1, 212], 'true,false,true': [7.45e-09, 15, 0], 'true,false,false,true': [5.921, 130, 48], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 379, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.35, 22, 0], 'true,false,true': [6.221, 139, 260], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 410, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 212], 'true,false,true': [0.0, 14, 0], 'true,false,false,true': [5.927, 131, 48], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.63e-09, 391, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.21471963270905434, 2.0100880024792309e-16], 'true': [2.7755575615628915e-18, 0.19880777753503706], 'true,false': [5.496651352106436e-15, 0.2206793019328212], 'true,false,false': [0.2206793019328212, nan], 'false': [2.0100880024792309e-16, nan]}, {'': [0.18592934898380828, -1.2881977079620136e-16], 'true': [0.0033358447539606454, 0.19185468499426078], 'true,false': [0.0, 0.19905306122448937], 'true,false,false': [0.19905306122448937, nan], 'false': [-1.2881977079620136e-16, nan]}, {'': [0.14324130362071044, -2.337311630789803e-17], 'true': [0.0025640286504211613, 0.13907185353549595], 'true,false': [0.13907185353549595, nan], 'false': [-2.337311630789803e-17, nan]}, {'': [0.13491907244633344, 8.149509436078277e-17], 'true': [0.006155386738364349, 0.18702893202215123], 'true,false': [4.89804275569922e-18, 0.20408163265306142], 'true,false,false': [0.20408163265306142, nan], 'false': [8.149509436078277e-17, nan]}, {'': [0.11546806647918714, 7.596262800066861e-17], 'true': [0.006154389683219408, 0.11526044069600151], 'true,false': [-1.3406466712454721e-15, 0.20481193302018774], 'true,false,false': [0.20481193302018774, nan], 'false': [7.596262800066861e-17, nan]}, {'': [0.10462511302299932, 3.925650473812708e-17], 'true': [0.006562360286853002, 0.18326787323241647], 'true,false': [0.18326787323241647, nan], 'false': [3.925650473812708e-17, nan]}, {'': [0.09866323366514262, 3.1032739965426065e-17], 'true': [0.009849453142595953, 0.09922082579640071], 'true,false': [-4.524682515453468e-16, 0.20925118629682524], 'true,false,false': [0.20925118629682524, nan], 'false': [3.1032739965426065e-17, nan]}, {'': [0.09629009181727716, -6.796088171847924e-17], 'true': [0.0010657129170367746, 0.1820320194567281], 'true,false': [3.7007434154171884e-18, 0.196944830198208], 'true,false,false': [0.196944830198208, nan], 'false': [-6.796088171847924e-17, nan]}, {'': [0.0936989492293338, -1.2456160764087123e-16], 'true': [0.005570445989977144, 0.09700557162331429], 'true,false': [0.09700557162331429, nan], 'false': [-1.2456160764087123e-16, nan]}, {'': [0.09416773142083083, 9.256590947002584e-17], 'true': [-1.298751462769051e-16, 0.18215367497224133], 'true,false': [0.0, 0.19624855653693657], 'true,false,false': [0.19624855653693657, nan], 'false': [9.256590947002584e-17, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995091;  // std dev = 1.08e-06, 212.000 (wgt'ed) examples reached here.  /* #pos=212 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.8581489350995121;  // std dev = 1.69e-07, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | | else return -0.14185106490048788;  // std dev = 0.000, 132.000 (wgt'ed) examples reached here.  /* #neg=132 */
%   else return -0.1418510649004875;  // std dev = 2.44e-07, 360.000 (wgt'ed) examples reached here.  /* #neg=360 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109543;  // std dev = 2.06e-07, 75.000 (wgt'ed) examples reached here.  /* #pos=75 */
%   | | else return 0.7133508176403809;  // std dev = 0.072, 138.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=137 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.7194734122109548;  // std dev = 0.000, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | | else return -0.12544463852839108;  // std dev = 7.60e-08, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
%   else return -0.12544463852839222;  // std dev = 0.000, 369.000 (wgt'ed) examples reached here.  /* #neg=369 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5561628088568676;  // std dev = 0.012, 260.000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.11742657134882349;  // std dev = 0.273, 134.000 (wgt'ed) examples reached here.  /* #neg=134 */
%   else return -0.11231637819360617;  // std dev = 0.000, 411.000 (wgt'ed) examples reached here.  /* #neg=411 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.41731992238536647;  // std dev = 5.96e-08, 75.000 (wgt'ed) examples reached here.  /* #pos=75 */
%   | | else return 0.40981167427417675;  // std dev = 0.074, 139.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=137 */
%   | else if ( genre(A, E) )
%   | | then return -0.10113084778074022;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.417319922385365;  // std dev = 1.12e-07, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | | else return -0.10113084778074047;  // std dev = 0.000, 111.000 (wgt'ed) examples reached here.  /* #neg=111 */
%   else return -0.10159632948783616;  // std dev = 1.56e-07, 368.000 (wgt'ed) examples reached here.  /* #neg=368 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( actor(B) )
%   | | then return -0.09230139608644115;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else return -0.2816857328383205;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.3225038229701553;  // std dev = 0.021, 212.000 (wgt'ed) examples reached here.  /* #pos=212 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.32058055743352487;  // std dev = 8.43e-08, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | | else return -0.09230139608644101;  // std dev = 6.66e-08, 113.000 (wgt'ed) examples reached here.  /* #neg=113 */
%   else return -0.09269127618926078;  // std dev = 1.65e-07, 385.000 (wgt'ed) examples reached here.  /* #neg=385 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.25615284786708903;  // std dev = 0.020, 260.000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.08720573020020622;  // std dev = 0.201, 122.000 (wgt'ed) examples reached here.  /* #neg=122 */
%   else return -0.08518475138839678;  // std dev = 1.21e-07, 382.000 (wgt'ed) examples reached here.  /* #neg=382 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( actor(B) )
%   | | then return -0.0783225153329816;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else return -0.21332361898649388;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.2106618033767256;  // std dev = 0.016, 212.000 (wgt'ed) examples reached here.  /* #pos=212 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.20951713009984974;  // std dev = 0.000, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | | else return -0.07832251533298161;  // std dev = 0.000, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
%   else return -0.07877675473109143;  // std dev = 1.12e-07, 388.000 (wgt'ed) examples reached here.  /* #neg=388 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17775952344873308;  // std dev = 0.014, 212.000 (wgt'ed) examples reached here.  /* #pos=212 */
%   | else if ( genre(A, E) )
%   | | then return -0.07285203090222468;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.17692001956336445;  // std dev = 3.33e-08, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | | else return -0.07285203090222474;  // std dev = 0.000, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
%   else return -0.07324622576333724;  // std dev = 0.000, 409.000 (wgt'ed) examples reached here.  /* #neg=409 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.15312921357892295;  // std dev = 0.013, 260.000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.07137318438549076;  // std dev = 0.238, 127.000 (wgt'ed) examples reached here.  /* #neg=127 */
%   else return -0.06842697784420333;  // std dev = 0.000, 395.000 (wgt'ed) examples reached here.  /* #neg=395 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13286240390422815;  // std dev = 0.330, 213.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=212 */
%   | else if ( genre(A, E) )
%   | | then return -0.06369066040793595;  // std dev = 4.56e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.13384228901879328;  // std dev = 0.000, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | | else return -0.06369066040793589;  // std dev = 4.71e-08, 118.000 (wgt'ed) examples reached here.  /* #neg=118 */
%   else return -0.06419184008202565;  // std dev = 1.83e-07, 380.000 (wgt'ed) examples reached here.  /* #neg=380 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063458
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 4.055 seconds
Total inference time: 2.257 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.065186
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.604 seconds
Refined model CLL: -0.065186


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063458
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 12.149999999999999 seconds
Total inference time: 2.257 seconds
AUC ROC: 1.0
Total revision time: 12.149999999999999
Best scored revision CLL: -0.065186


Dataset: 4_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 00:00:57
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063458, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 12.149999999999999, 'Inference time': 2.257, 'parameter_0.8': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.134144, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 2.943, 'Inference time': 1.968}}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 7.45e-09, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995086;  // std dev = 1.08e-06, 267.000 (wgt'ed) examples reached here.  /* #pos=267 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.16867525088898733;  // std dev = 6.378, 190.000 (wgt'ed) examples reached here.  /* #neg=131 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048716;  // std dev = 2.95e-07, 450.000 (wgt'ed) examples reached here.  /* #neg=450 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7131914936181;  // std dev = 1.190, 269.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=267 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.11597188839369763;  // std dev = 6.519, 211.000 (wgt'ed) examples reached here.  /* #neg=152 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839235;  // std dev = 0.000, 502.000 (wgt'ed) examples reached here.  /* #neg=502 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.140841313198114;  // std dev = 0.198, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( movie(E, A) )
%   | | then return 0.3549913881897004;  // std dev = 0.375, 478.000 (wgt'ed) examples reached here.  /* #neg=152 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360603;  // std dev = 0.000, 441.000 (wgt'ed) examples reached here.  /* #neg=441 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.45855257044544934;  // std dev = 1.332, 271.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=267 */
%   | else if ( genre(A, E) )
%   | | then return -0.09902215842210939;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.03839369524484826;  // std dev = 6.531, 213.000 (wgt'ed) examples reached here.  /* #neg=154 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1015963294878355;  // std dev = 1.48e-08, 478.000 (wgt'ed) examples reached here.  /* #neg=478 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1172964171750952;  // std dev = 0.316, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else if ( genre(B, E) )
%   | | then return 0.3578094722942354;  // std dev = 3.77e-07, 267.000 (wgt'ed) examples reached here.  /* #pos=267 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.06652284864661372;  // std dev = 6.370, 189.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0926912761892616;  // std dev = 0.000, 533.000 (wgt'ed) examples reached here.  /* #neg=533 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.27233022811806246;  // std dev = 1.080, 271.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=267 */
%   | else if ( movie(E, A) )
%   | | then return 0.02578425069196107;  // std dev = 0.443, 214.000 (wgt'ed) examples reached here.  /* #neg=155 #pos=59 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.43e-07, 489.000 (wgt'ed) examples reached here.  /* #neg=489 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11280655182024055;  // std dev = 0.313, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( genre(B, E) )
%   | | then return 0.2288133039429708;  // std dev = 0.000, 267.000 (wgt'ed) examples reached here.  /* #pos=267 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.03482990386674258;  // std dev = 6.436, 198.000 (wgt'ed) examples reached here.  /* #neg=139 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109189;  // std dev = 0.000, 470.000 (wgt'ed) examples reached here.  /* #neg=470 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18200930417693867;  // std dev = 1.078, 272.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=267 */
%   | else if ( genre(A, E) )
%   | | then return -0.07505744401670807;  // std dev = 3.73e-09, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.01233768476237852;  // std dev = 6.507, 209.000 (wgt'ed) examples reached here.  /* #neg=150 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333707;  // std dev = 4.93e-09, 470.000 (wgt'ed) examples reached here.  /* #neg=470 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1323053048381417;  // std dev = 0.463, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( movie(E, B) )
%   | | then return 0.10856776445979098;  // std dev = 6.560, 461.000 (wgt'ed) examples reached here.  /* #neg=135 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420353;  // std dev = 0.000, 484.000 (wgt'ed) examples reached here.  /* #neg=484 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14329322203123926;  // std dev = 0.905, 271.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=267 */
%   | else if ( genre(A, E) )
%   | | then return -0.06187072439282449;  // std dev = 4.56e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.02503178781490029;  // std dev = 6.565, 219.000 (wgt'ed) examples reached here.  /* #neg=160 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202539;  // std dev = 1.11e-08, 489.000 (wgt'ed) examples reached here.  /* #neg=489 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.137214
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.237 seconds
Total inference time: 1.75 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.978388
   AUC PR    = 0.863056
   CLL	      = -0.133852
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.819018
   F1        = 0.900506


Total scoring time: 3.216 seconds
Parameter learned model CLL: -0.133852


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [7.45e-09, 20, 0], 'true,false,true': [1.08e-06, 0, 267], 'true,false,false,true': [6.378, 131, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.95e-07, 450, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.19, 2, 267], 'true,false,true': [0.0, 18, 0], 'true,false,false,true': [6.519, 152, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 502, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.198, 16, 0], 'true,false,true': [0.375, 152, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 441, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.332, 4, 267], 'true,false,true': [0.0, 17, 0], 'true,false,false,true': [6.531, 154, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.48e-08, 478, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.316, 22, 0], 'true,false,true': [3.77e-07, 0, 267], 'true,false,false,true': [6.37, 130, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 533, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [1.08, 4, 267], 'true,false,true': [0.443, 155, 59], 'true,false,false': [0.0, 0, 0], 'false,true': [1.43e-07, 489, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.313, 16, 0], 'true,false,true': [0.0, 0, 267], 'true,false,false,true': [6.436, 139, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 470, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [1.078, 5, 267], 'true,false,true': [3.73e-09, 19, 0], 'true,false,false,true': [6.507, 150, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.93e-09, 470, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.463, 17, 0], 'true,false,true': [6.56, 135, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 484, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.905, 4, 267], 'true,false,true': [4.56e-09, 13, 0], 'true,false,false,true': [6.565, 160, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.11e-08, 489, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.2163504432402051, 1.934255225124717e-16], 'true': [2.7755575615628915e-18, 0.2044826645088107], 'true,false': [4.364382346990877e-15, 0.21409972299169006], 'true,false,false': [0.21409972299169006, nan], 'false': [1.934255225124717e-16, nan]}, {'': [0.1844446581586637, -1.3800381820041787e-16], 'true': [0.005268243911168789, 0.18982089319692233], 'true,false': [0.0, 0.20143303160306442], 'true,false,false': [0.20143303160306442, nan], 'false': [-1.3800381820041787e-16, nan]}, {'': [0.14374552311733202, -1.2084060131974493e-17], 'true': [0.002441015751034163, 0.140512625873216], 'true,false': [0.140512625873216, nan], 'false': [-1.2084060131974493e-17, nan]}, {'': [0.13526388211878876, 2.211155480006588e-16], 'true': [0.006550646000850203, 0.1867589692815542], 'true,false': [-3.2653618371328133e-18, 0.20026890608124395], 'true,false,false': [0.20026890608124395, nan], 'false': [2.211155480006588e-16, nan]}, {'': [0.11026592296039804, -5.165765668049509e-17], 'true': [0.0045368586863931415, 0.10958697030607008], 'true,false': [5.322417496330339e-16, 0.21471963270905006], 'true,false,false': [0.21471963270905006, nan], 'false': [-5.165765668049509e-17, nan]}, {'': [0.10410377649886544, 4.177526309427992e-17], 'true': [0.004300122438324815, 0.19652629003419247], 'true,false': [0.19652629003419247, nan], 'false': [4.177526309427992e-17, nan]}, {'': [0.09736538321013388, -1.7952542525853596e-17], 'true': [0.0061051725956657085, 0.09827378210300677], 'true,false': [-1.9293763424197477e-16, 0.20918783797571638], 'true,false,false': [0.20918783797571638, nan], 'false': [-1.7952542525853596e-17, nan]}, {'': [0.09504570534761478, 2.456663714064176e-17], 'true': [0.004270312878414859, 0.18630493208170051], 'true,false': [7.304098846218135e-19, 0.20260525171126856], 'true,false,false': [0.20260525171126856, nan], 'false': [2.456663714064176e-17, nan]}, {'': [0.09246897026060576, -1.2111523905001707e-16], 'true': [0.012612280534673908, 0.09335032700643521], 'true,false': [0.09335032700643521, nan], 'false': [-1.2111523905001707e-16, nan]}, {'': [0.09457260333899709, 1.2260131560277803e-16], 'true': [0.0030238135669673383, 0.18586929587431703], 'true,false': [1.6012832085939759e-18, 0.19682658826963548], 'true,false,false': [0.19682658826963548, nan], 'false': [1.2260131560277803e-16, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995086;  // std dev = 1.08e-06, 267.000 (wgt'ed) examples reached here.  /* #pos=267 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.8581489350995125;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.14185106490048796;  // std dev = 0.000, 142.000 (wgt'ed) examples reached here.  /* #neg=142 */
%   else return -0.14185106490048757;  // std dev = 1.26e-07, 485.000 (wgt'ed) examples reached here.  /* #neg=485 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109543;  // std dev = 2.23e-07, 95.000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | | else return 0.714589492842521;  // std dev = 0.064, 173.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=172 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 7.45e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.7194734122109543;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.12544463852839124;  // std dev = 5.58e-08, 148.000 (wgt'ed) examples reached here.  /* #neg=148 */
%   else return -0.12544463852839233;  // std dev = 0.000, 469.000 (wgt'ed) examples reached here.  /* #neg=469 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( actor(B) )
%   | | then return -0.11231637819360635;  // std dev = 1.67e-08, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else return -0.2266610740239172;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( director(B) )
%   | | then return 0.5560025624169808;  // std dev = 0.011, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | | else return -0.11231637819360615;  // std dev = 1.04e-07, 141.000 (wgt'ed) examples reached here.  /* #neg=141 */
%   else return -0.11231637819360592;  // std dev = 0.000, 468.000 (wgt'ed) examples reached here.  /* #neg=468 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( actor(A) )
%   | | then return 0.4181242581631077;  // std dev = 0.009, 267.000 (wgt'ed) examples reached here.  /* #pos=267 */
%   | | else return -0.18939860096189967;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783635;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.4173588890676312;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.10271113088643159;  // std dev = 0.111, 142.000 (wgt'ed) examples reached here.  /* #neg=142 */
%   else return -0.1015963294878354;  // std dev = 3.50e-07, 499.000 (wgt'ed) examples reached here.  /* #neg=499 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( actor(B) )
%   | | then return -0.09269127618926094;  // std dev = 9.13e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else return -0.16201364641318972;  // std dev = 5.27e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.32112599554140686;  // std dev = 0.008, 267.000 (wgt'ed) examples reached here.  /* #pos=267 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.3206069737902442;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.09565739150594127;  // std dev = 0.176, 144.000 (wgt'ed) examples reached here.  /* #neg=144 */
%   else return -0.09269127618926135;  // std dev = 0.000, 478.000 (wgt'ed) examples reached here.  /* #neg=478 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.25539078031573265;  // std dev = 0.008, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.08697533218450382;  // std dev = 0.135, 162.000 (wgt'ed) examples reached here.  /* #neg=162 */
%   else return -0.08518475138839678;  // std dev = 1.50e-07, 502.000 (wgt'ed) examples reached here.  /* #neg=502 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( actor(B) )
%   | | then return -0.07864690850133242;  // std dev = 2.63e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else return -0.13098128332001713;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.2099680248787169;  // std dev = 0.006, 267.000 (wgt'ed) examples reached here.  /* #pos=267 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.20965909007757416;  // std dev = 7.60e-08, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.0798265352004388;  // std dev = 0.109, 130.000 (wgt'ed) examples reached here.  /* #neg=130 */
%   else return -0.07877675473109211;  // std dev = 1.17e-07, 507.000 (wgt'ed) examples reached here.  /* #neg=507 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( actor(A) )
%   | | then return 0.17725076028606765;  // std dev = 0.006, 267.000 (wgt'ed) examples reached here.  /* #pos=267 */
%   | | else return -0.11677907052251014;  // std dev = 7.45e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( genre(A, E) )
%   | | then return -0.07313357294696016;  // std dev = 0.000, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.17702415720556866;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.0735327276384313;  // std dev = 0.084, 159.000 (wgt'ed) examples reached here.  /* #neg=159 */
%   else return -0.07324622576333693;  // std dev = 1.48e-07, 494.000 (wgt'ed) examples reached here.  /* #neg=494 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.15282977624466842;  // std dev = 0.005, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.06844641645751555;  // std dev = 0.052, 166.000 (wgt'ed) examples reached here.  /* #neg=166 */
%   else return -0.06842697784420354;  // std dev = 0.000, 494.000 (wgt'ed) examples reached here.  /* #neg=494 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.1337368688167242;  // std dev = 0.000, 95.000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | | else return 0.13295518171931553;  // std dev = 0.018, 173.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=172 */
%   | else if ( genre(A, E) )
%   | | then return -0.0640977414795462;  // std dev = 2.63e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.13394785053634117;  // std dev = 4.71e-08, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.06409356369168343;  // std dev = 0.053, 160.000 (wgt'ed) examples reached here.  /* #neg=160 */
%   else return -0.06419184008202533;  // std dev = 2.46e-07, 526.000 (wgt'ed) examples reached here.  /* #neg=526 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063358
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 4.762 seconds
Total inference time: 2.212 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064703
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.939 seconds
Refined model CLL: -0.064703


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063358
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 14.154 seconds
Total inference time: 2.212 seconds
AUC ROC: 1.0
Total revision time: 14.154
Best scored revision CLL: -0.064703


Dataset: 4_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 00:01:16
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063358, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 14.154, 'Inference time': 2.212, 'parameter_1.0': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.137214, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 3.237, 'Inference time': 1.75}}


Starting fold 2

Target train facts examples: 870
Target train pos examples: 324
Target train neg examples: 10813

Target test facts examples: 208
Target test pos	 examples: 58
Target test neg examples: 3423

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995122;  // std dev = 1.19e-07, 51.000 (wgt'ed) examples reached here.  /* #pos=51 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.2002541982574071;  // std dev = 2.924, 38.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=13 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048763;  // std dev = 8.94e-08, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109546;  // std dev = 0.000, 51.000 (wgt'ed) examples reached here.  /* #pos=51 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.20341142585159083;  // std dev = 2.859, 35.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=13 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( movie(E, A) )
%   | | then return 0.4366880891819154;  // std dev = 0.339, 81.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=64 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.1123163781936062;  // std dev = 8.16e-08, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.43403016140346057;  // std dev = 0.649, 52.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=51 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.26471764690848204;  // std dev = 2.441, 24.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=13 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783634;  // std dev = 0.000, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13193583917153515;  // std dev = 0.176, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.3433635771661092;  // std dev = 1.26e-07, 51.000 (wgt'ed) examples reached here.  /* #pos=51 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.007937571112452548;  // std dev = 2.962, 40.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=13 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926107;  // std dev = 1.05e-08, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2705756026105492;  // std dev = 5.96e-08, 51.000 (wgt'ed) examples reached here.  /* #pos=51 */
%   | else if ( movie(E, A) )
%   | | then return -0.009088009580268726;  // std dev = 0.440, 45.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=13 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 3.94e-08, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.16039766436044492;  // std dev = 0.193, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.22058169084556717;  // std dev = 4.71e-08, 51.000 (wgt'ed) examples reached here.  /* #pos=51 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.004166160550935125;  // std dev = 2.944, 39.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=13 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.0787767547310916;  // std dev = 5.48e-08, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18499560037233567;  // std dev = 4.47e-08, 51.000 (wgt'ed) examples reached here.  /* #pos=51 */
%   | else if ( genre(A, E) )
%   | | then return -0.07026472996989241;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.013014611445370097;  // std dev = 2.980, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333707;  // std dev = 0.000, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.06581082302500643;  // std dev = 1.32e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( movie(E, B) )
%   | | then return 0.046865368601864514;  // std dev = 3.303, 101.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=64 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420265;  // std dev = 4.75e-09, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.143669779044197;  // std dev = 0.457, 52.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=51 */
%   | else if ( genre(A, E) )
%   | | then return -0.06187857020351301;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.035290192835414035;  // std dev = 3.012, 43.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=13 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.145701
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.578 seconds
Total inference time: 1.697 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.976089
   AUC PR    = 0.845806
   CLL	      = -0.14509
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.796875
   F1        = 0.886957


Total scoring time: 1.609 seconds
Parameter learned model CLL: -0.14509


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [1.19e-07, 0, 51], 'true,false,false,true': [2.924, 25, 13], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.94e-08, 101, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 51], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [2.859, 22, 13], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 99, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [0.339, 17, 64], 'true,false,false': [0.0, 0, 0], 'false,true': [8.16e-08, 103, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.649, 1, 51], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [2.441, 11, 13], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 112, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.176, 5, 0], 'true,false,true': [1.26e-07, 0, 51], 'true,false,false,true': [2.962, 27, 13], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.05e-08, 83, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [5.96e-08, 0, 51], 'true,false,true': [0.44, 32, 13], 'true,false,false': [0.0, 0, 0], 'false,true': [3.94e-08, 95, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.193, 3, 0], 'true,false,true': [4.71e-08, 0, 51], 'true,false,false,true': [2.944, 26, 13], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.48e-08, 95, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [4.47e-08, 0, 51], 'true,false,true': [0.0, 4, 0], 'true,false,false,true': [2.98, 28, 13], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 90, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [1.32e-09, 3, 0], 'true,false,true': [3.303, 37, 64], 'true,false,false': [0.0, 0, 0], 'false,true': [4.75e-09, 98, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.457, 1, 51], 'true,false,true': [2.63e-09, 7, 0], 'true,false,false,true': [3.012, 30, 13], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 98, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.20543209876543136, 7.91446116564468e-17], 'true': [0.0, 0.20199469763918623], 'true,false': [2.7864421010200007e-16, 0.22506925207756182], 'true,false,false': [0.22506925207756182, nan], 'false': [7.91446116564468e-17, nan]}, {'': [0.16204105851613615, -1.1214373986112692e-17], 'true': [-4.876273676785002e-16, 0.2299047449530944], 'true,false': [0.0, 0.23346938775510173], 'true,false,false': [0.23346938775510173, nan], 'false': [-1.1214373986112692e-17, nan]}, {'': [0.11920958374867965, 6.467318590049455e-17], 'true': [0.0, 0.1148902373646487], 'true,false': [0.1148902373646487, nan], 'false': [6.467318590049455e-17, nan]}, {'': [0.09362682799971392, -7.93016446160826e-18], 'true': [0.008092076976734685, 0.23869466164678155], 'true,false': [0.0, 0.24826388888888903], 'true,false,false': [0.24826388888888903, nan], 'false': [-7.93016446160826e-18, nan]}, {'': [0.1256294053373809, 1.33761810195802e-18], 'true': [0.0061605428946787414, 0.12683087712051028], 'true,false': [3.134747363647501e-16, 0.21937499999999993], 'true,false,false': [0.21937499999999993, nan], 'false': [1.33761810195802e-18, nan]}, {'': [0.11013956150486533, 1.636118141552862e-17], 'true': [6.966105252550002e-17, 0.1934144131357495], 'true,false': [0.1934144131357495, nan], 'false': [1.636118141552862e-17, nan]}, {'': [0.10729633260504988, 3.1553707015662343e-17], 'true': [0.01245188883425509, 0.10779705814890546], 'true,false': [4.353815782843751e-17, 0.22222222222222207], 'true,false,false': [0.22222222222222207, nan], 'false': [3.1553707015662343e-17, nan]}, {'': [0.10287613107286163, -8.018277400070574e-18], 'true': [3.918434204559376e-17, 0.19755541609758345], 'true,false': [0.0, 0.21653777513384856], 'true,false,false': [0.21653777513384856, nan], 'false': [-8.018277400070574e-18, nan]}, {'': [0.10524703186336004, 2.2657612747452175e-17], 'true': [5.782411586589357e-19, 0.10800695274312291], 'true,false': [0.10800695274312291, nan], 'false': [2.2657612747452175e-17, nan]}, {'': [0.09935234507174627, -1.416100796715761e-17], 'true': [0.004023764503618321, 0.1814804646312621], 'true,false': [9.912705577010326e-19, 0.21092482422931327], 'true,false,false': [0.21092482422931327, nan], 'false': [-1.416100796715761e-17, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995122;  // std dev = 1.19e-07, 51.000 (wgt'ed) examples reached here.  /* #pos=51 */
%   | | else if ( actor(B) )
%   | | | then return -0.14185106490048777;  // std dev = 7.45e-09, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else return -0.14185106490048763;  // std dev = 8.16e-08, 111.000 (wgt'ed) examples reached here.  /* #neg=111 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109546;  // std dev = 0.000, 51.000 (wgt'ed) examples reached here.  /* #pos=51 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( actor(B) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | | else return 0.7194734122109542;  // std dev = 4.21e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else return -0.12544463852839138;  // std dev = 0.000, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( actor(B) )
%   | | then return -0.11231637819360642;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | else return 0.5553664367462837;  // std dev = 1.98e-07, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   else return -0.1123163781936062;  // std dev = 8.43e-08, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.41751358415831;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else return 0.39344060101909;  // std dev = 0.120, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.41751358415831025;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.11762599903296479;  // std dev = 0.473, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   else return -0.10159632948783628;  // std dev = 2.98e-08, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1553432591720724;  // std dev = 0.217, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.3232936685607909;  // std dev = 0.019, 51.000 (wgt'ed) examples reached here.  /* #pos=51 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.3207118471601497;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.10984322432473181;  // std dev = 0.453, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   else return -0.09269127618926101;  // std dev = 3.80e-08, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.25468185347082767;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else return 0.22152595966714073;  // std dev = 0.133, 27.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=25 */
%   | else if ( actor(B) )
%   | | then return -0.08263430300514864;  // std dev = 1.29e-08, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | else return 0.2551722425694894;  // std dev = 2.11e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else return -0.08518475138839682;  // std dev = 5.37e-08, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.0745240693359503;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.2141329500553685;  // std dev = 0.034, 51.000 (wgt'ed) examples reached here.  /* #pos=51 */
%   | | else if ( actor(B) )
%   | | | then return -0.07658230641021084;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | | else return 0.20975771563253567;  // std dev = 2.11e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else return -0.07877675473109162;  // std dev = 5.16e-08, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( actor(A) )
%   | | then return 0.1803030292029213;  // std dev = 0.030, 51.000 (wgt'ed) examples reached here.  /* #pos=51 */
%   | | else return -0.2789663185314736;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(A, E) )
%   | | then return -0.06954433001992709;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( actor(B) )
%   | | | then return -0.07133917800454849;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | | else return 0.1770964977452774;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else return -0.07324622576333707;  // std dev = 0.000, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09742808680600605;  // std dev = 0.144, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( actor(B) )
%   | | then return -0.06675509138718135;  // std dev = 7.45e-09, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | else return 0.1546809391049256;  // std dev = 0.028, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   else return -0.06842697784420265;  // std dev = 4.71e-08, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.13266538312871257;  // std dev = 1.29e-08, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else return 0.12595867979360859;  // std dev = 0.067, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | else if ( genre(A, E) )
%   | | then return -0.05948617254945156;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( actor(B) )
%   | | | then return -0.06271468028324373;  // std dev = 1.05e-08, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | | else return 0.13378239273972165;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else return -0.06419184008202626;  // std dev = 0.000, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063305
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.094 seconds
Total inference time: 1.866 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.070569
   Precision = 0.876712 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.934307


Total scoring time: 1.733 seconds
Refined model CLL: -0.070569


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063305
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 7.014000000000001 seconds
Total inference time: 1.866 seconds
AUC ROC: 1.0
Total revision time: 7.014000000000001
Best scored revision CLL: -0.070569


Dataset: 4_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 00:01:28
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063305, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 7.014000000000001, 'Inference time': 1.866, 'parameter_0.2': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.145701, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 1.578, 'Inference time': 1.697}}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995112;  // std dev = 4.62e-07, 104.000 (wgt'ed) examples reached here.  /* #pos=104 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.1706489350995114;  // std dev = 4.146, 80.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=25 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048827;  // std dev = 0.000, 176.000 (wgt'ed) examples reached here.  /* #neg=176 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7035315621970046;  // std dev = 1.184, 106.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=104 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.09649738844659579;  // std dev = 4.300, 96.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=25 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839155;  // std dev = 0.000, 181.000 (wgt'ed) examples reached here.  /* #neg=181 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12355760398044113;  // std dev = 0.107, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( movie(E, A) )
%   | | then return 0.3463157559128812;  // std dev = 0.381, 194.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=129 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360653;  // std dev = 0.000, 183.000 (wgt'ed) examples reached here.  /* #neg=183 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.46657988511072845;  // std dev = 0.674, 105.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=104 */
%   | else if ( genre(A, E) )
%   | | then return -0.10057487742846039;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.09506867077401654;  // std dev = 4.096, 76.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=25 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783655;  // std dev = 0.000, 198.000 (wgt'ed) examples reached here.  /* #neg=198 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11165361854474506;  // std dev = 0.188, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( genre(B, E) )
%   | | then return 0.36018157673914136;  // std dev = 0.000, 104.000 (wgt'ed) examples reached here.  /* #pos=104 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.10580114708194384;  // std dev = 4.009, 70.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=25 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926055;  // std dev = 9.31e-08, 202.000 (wgt'ed) examples reached here.  /* #neg=202 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2819604749352076;  // std dev = 2.11e-07, 104.000 (wgt'ed) examples reached here.  /* #pos=104 */
%   | else if ( movie(E, A) )
%   | | then return 0.07163573953304427;  // std dev = 0.466, 75.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=25 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 8.02e-08, 204.000 (wgt'ed) examples reached here.  /* #neg=204 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.16779959373323386;  // std dev = 0.336, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( genre(B, E) )
%   | | then return 0.2285145037770843;  // std dev = 0.000, 104.000 (wgt'ed) examples reached here.  /* #pos=104 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.061046821977977776;  // std dev = 4.040, 72.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=25 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109148;  // std dev = 8.16e-08, 176.000 (wgt'ed) examples reached here.  /* #neg=176 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1861528125569682;  // std dev = 0.479, 105.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=104 */
%   | else if ( genre(A, E) )
%   | | then return -0.07591107915071381;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.013693052608513001;  // std dev = 4.146, 80.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=25 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0732462257633367;  // std dev = 7.85e-09, 182.000 (wgt'ed) examples reached here.  /* #neg=182 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.15728378174608848;  // std dev = 0.367, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( movie(E, B) )
%   | | then return 0.06528490635080915;  // std dev = 4.537, 200.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=129 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420262;  // std dev = 5.82e-09, 209.000 (wgt'ed) examples reached here.  /* #neg=209 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14224395314655608;  // std dev = 0.771, 107.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=104 */
%   | else if ( genre(A, E) )
%   | | then return -0.061086037990877626;  // std dev = 1.86e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.017720509292797795;  // std dev = 4.082, 75.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=25 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 170.000 (wgt'ed) examples reached here.  /* #neg=170 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.142018
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.092 seconds
Total inference time: 1.979 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.976363
   AUC PR    = 0.852383
   CLL	      = -0.144688
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.806202
   F1        = 0.892704


Total scoring time: 2.002 seconds
Parameter learned model CLL: -0.144688


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 7, 0], 'true,false,true': [4.62e-07, 0, 104], 'true,false,false,true': [4.146, 55, 25], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 176, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.184, 2, 104], 'true,false,true': [0.0, 9, 0], 'true,false,false,true': [4.3, 71, 25], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 181, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.107, 10, 0], 'true,false,true': [0.381, 65, 129], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 183, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.674, 1, 104], 'true,false,true': [0.0, 3, 0], 'true,false,false,true': [4.096, 51, 25], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 198, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.188, 10, 0], 'true,false,true': [0.0, 0, 104], 'true,false,false,true': [4.009, 45, 25], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.31e-08, 202, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [2.11e-07, 0, 104], 'true,false,true': [0.466, 50, 25], 'true,false,false': [0.0, 0, 0], 'false,true': [8.02e-08, 204, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.336, 9, 0], 'true,false,true': [0.0, 0, 104], 'true,false,false,true': [4.04, 47, 25], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.16e-08, 176, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.479, 1, 104], 'true,false,true': [0.0, 6, 0], 'true,false,false,true': [4.146, 55, 25], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.85e-09, 182, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.367, 9, 0], 'true,false,true': [4.537, 71, 129], 'true,false,false': [0.0, 0, 0], 'false,true': [5.82e-09, 209, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.771, 3, 104], 'true,false,true': [1.86e-09, 5, 0], 'true,false,false,true': [4.082, 50, 25], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 170, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.21923741125517823, -1.8924256101565169e-16], 'true': [-7.93016446160826e-18, 0.20956403591682854], 'true,false': [2.049642507000289e-15, 0.2148437500000011], 'true,false,false': [0.2148437500000011, nan], 'false': [-1.8924256101565169e-16, nan]}, {'': [0.19417323634939768, -1.7174720822930598e-17], 'true': [0.013215414257097964, 0.17995150925386172], 'true,false': [0.0, 0.19259982638888837], 'true,false,false': [0.19259982638888837, nan], 'false': [-1.7174720822930598e-17, nan]}, {'': [0.14870430928927558, -4.853433987432378e-18], 'true': [0.0011372864147153965, 0.14548826007888194], 'true,false': [0.14548826007888194, nan], 'false': [-4.853433987432378e-18, nan]}, {'': [0.12942514833840055, -8.7472117091679e-17], 'true': [0.004322987862376339, 0.21375676431689777], 'true,false': [0.0, 0.22074099722991622], 'true,false,false': [0.22074099722991622, nan], 'false': [-8.7472117091679e-17, nan]}, {'': [0.10926765298789226, 4.286999798057535e-17], 'true': [0.0035348676601526336, 0.10792419821688988], 'true,false': [-3.416070845000482e-16, 0.2295918367346941], 'true,false,false': [0.2295918367346941, nan], 'false': [4.286999798057535e-17, nan]}, {'': [0.10181990714185536, 3.1565164425617195e-17], 'true': [4.270088556250602e-16, 0.2173085280462323], 'true,false': [0.2173085280462323, nan], 'false': [3.1565164425617195e-17, nan]}, {'': [0.10024728533937106, 3.7848512203130334e-17], 'true': [0.012560399840889481, 0.09950369190607557], 'true,false': [-1.0248212535001446e-16, 0.22665895061728422], 'true,false,false': [0.22665895061728422, nan], 'false': [3.7848512203130334e-17, nan]}, {'': [0.0993280740245356, 6.161127774018726e-17], 'true': [0.002184910688046637, 0.2003757263663597], 'true,false': [-1.1564823173178713e-18, 0.21484375], 'true,false,false': [0.21484375, nan], 'false': [6.161127774018726e-17, nan]}, {'': [0.1011817665923658, 3.346605289539946e-17], 'true': [0.014974631126401418, 0.10292792315105878], 'true,false': [0.10292792315105878, nan], 'false': [3.346605289539946e-17, nan]}, {'': [0.0965617130847103, -5.877651306839064e-18], 'true': [0.005553303205726058, 0.20869722817091746], 'true,false': [6.938893903907229e-19, 0.22222222222222182], 'true,false,false': [0.22222222222222182, nan], 'false': [-5.877651306839064e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995112;  // std dev = 4.62e-07, 104.000 (wgt'ed) examples reached here.  /* #pos=104 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.858148935099512;  // std dev = 1.33e-07, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return -0.14185106490048768;  // std dev = 4.94e-08, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   else return -0.14185106490048838;  // std dev = 0.000, 195.000 (wgt'ed) examples reached here.  /* #neg=195 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109551;  // std dev = 0.000, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | else return 0.6922179912193626;  // std dev = 0.149, 62.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=60 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.7194734122109544;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return -0.12544463852839152;  // std dev = 0.000, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   else return -0.12544463852839155;  // std dev = 0.000, 181.000 (wgt'ed) examples reached here.  /* #neg=181 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( actor(B) )
%   | | then return -0.11231637819360626;  // std dev = 5.05e-08, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | | else return 0.5584919014007634;  // std dev = 0.038, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   else return -0.11231637819360657;  // std dev = 0.000, 194.000 (wgt'ed) examples reached here.  /* #neg=194 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.41675368021189735;  // std dev = 0.000, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | else return 0.4031572795709348;  // std dev = 0.111, 62.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=60 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783627;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.4167536802118972;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return -0.10465478363412736;  // std dev = 0.110, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   else return -0.10159632948783652;  // std dev = 0.000, 199.000 (wgt'ed) examples reached here.  /* #neg=199 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.32536409512492565;  // std dev = 0.045, 104.000 (wgt'ed) examples reached here.  /* #pos=104 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.32019671485499557;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return -0.095637625385988;  // std dev = 0.125, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   else return -0.09269127618926053;  // std dev = 9.88e-08, 220.000 (wgt'ed) examples reached here.  /* #neg=220 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( actor(A) )
%   | | then return 0.2583494276112511;  // std dev = 0.039, 104.000 (wgt'ed) examples reached here.  /* #pos=104 */
%   | | else return -0.25894033975196773;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( actor(A), director(B) )
%   | | then return 0.2548207106714919;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else return -0.08749783398974027;  // std dev = 0.116, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
%   else return -0.08518475138839678;  // std dev = 7.15e-08, 181.000 (wgt'ed) examples reached here.  /* #neg=181 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( female(B) )
%   | | then return -0.07860905553348894;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.11683959328247018;  // std dev = 0.060, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(B, E) )
%   | | then return 0.21200267899354197;  // std dev = 0.034, 104.000 (wgt'ed) examples reached here.  /* #pos=104 */
%   | | else if ( actor(B) )
%   | | | then return -0.07817522864340506;  // std dev = 1.67e-08, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   | | | else return 0.20950936751133395;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.07877675473109147;  // std dev = 7.30e-08, 199.000 (wgt'ed) examples reached here.  /* #neg=199 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17874330983908154;  // std dev = 0.030, 104.000 (wgt'ed) examples reached here.  /* #pos=104 */
%   | else if ( genre(A, E) )
%   | | then return -0.07097699126781705;  // std dev = 0.002, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.17691432475357513;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return -0.07953610295442651;  // std dev = 0.187, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   else return -0.07324622576333664;  // std dev = 1.21e-07, 202.000 (wgt'ed) examples reached here.  /* #neg=202 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.15372436987369575;  // std dev = 0.027, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.07133365192492805;  // std dev = 0.178, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   else return -0.06842697784420262;  // std dev = 7.67e-08, 181.000 (wgt'ed) examples reached here.  /* #neg=181 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.13226810714338202;  // std dev = 2.11e-08, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | else return 0.12580602026586613;  // std dev = 0.061, 62.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=60 */
%   | else if ( genre(A, E) )
%   | | then return -0.06327382095813773;  // std dev = 0.002, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( actor(B) )
%   | | | then return -0.06318331804647877;  // std dev = 5.27e-09, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | | | else return 0.13376943665083715;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.06419184008202626;  // std dev = 0.000, 191.000 (wgt'ed) examples reached here.  /* #neg=191 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063433
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.211 seconds
Total inference time: 1.886 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.065845
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.217 seconds
Refined model CLL: -0.065845


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063433
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 9.522 seconds
Total inference time: 1.886 seconds
AUC ROC: 1.0
Total revision time: 9.522
Best scored revision CLL: -0.065845


Dataset: 4_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 00:01:42
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063433, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 9.522, 'Inference time': 1.886, 'parameter_0.4': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.142018, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 2.092, 'Inference time': 1.979}}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995098;  // std dev = 9.68e-07, 156.000 (wgt'ed) examples reached here.  /* #pos=156 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.16214893509951103;  // std dev = 5.143, 125.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048813;  // std dev = 0.000, 261.000 (wgt'ed) examples reached here.  /* #neg=261 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.708778247011724;  // std dev = 1.187, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.1364549177535438;  // std dev = 5.160, 127.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839205;  // std dev = 0.000, 318.000 (wgt'ed) examples reached here.  /* #neg=318 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14631468372206027;  // std dev = 0.164, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( movie(E, A) )
%   | | then return 0.3738508225352706;  // std dev = 0.372, 276.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=194 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360694;  // std dev = 0.000, 274.000 (wgt'ed) examples reached here.  /* #neg=274 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.44019792013990955;  // std dev = 1.601, 162.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=156 */
%   | else if ( genre(A, E) )
%   | | then return -0.09853491255491556;  // std dev = 6.45e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.08582039561903541;  // std dev = 5.044, 115.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1015963294878366;  // std dev = 0.000, 271.000 (wgt'ed) examples reached here.  /* #neg=271 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.16968124069890814;  // std dev = 0.326, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( genre(B, E) )
%   | | then return 0.3587080643136834;  // std dev = 3.67e-07, 156.000 (wgt'ed) examples reached here.  /* #pos=156 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.04076999673415602;  // std dev = 5.152, 126.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926043;  // std dev = 1.41e-07, 285.000 (wgt'ed) examples reached here.  /* #neg=285 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2677380386854405;  // std dev = 1.045, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   | else if ( movie(E, A) )
%   | | then return 0.0033319375395704912;  // std dev = 0.434, 146.000 (wgt'ed) examples reached here.  /* #neg=108 #pos=38 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 9.06e-08, 250.000 (wgt'ed) examples reached here.  /* #neg=250 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13844778526104803;  // std dev = 0.331, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( genre(B, E) )
%   | | then return 0.23015751125304013;  // std dev = 1.63e-07, 156.000 (wgt'ed) examples reached here.  /* #pos=156 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.06687416026617217;  // std dev = 5.022, 113.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109143;  // std dev = 5.96e-08, 253.000 (wgt'ed) examples reached here.  /* #neg=253 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18314883809761587;  // std dev = 0.798, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   | else if ( genre(A, E) )
%   | | then return -0.06805596468808049;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.04481338996700075;  // std dev = 5.055, 116.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333698;  // std dev = 5.59e-09, 300.000 (wgt'ed) examples reached here.  /* #neg=300 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09130049723286829;  // std dev = 0.233, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( movie(E, B) )
%   | | then return 0.09021986489908512;  // std dev = 5.368, 286.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=194 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420293;  // std dev = 0.000, 286.000 (wgt'ed) examples reached here.  /* #neg=286 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14741267875772543;  // std dev = 0.625, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   | else if ( genre(A, E) )
%   | | then return -0.05861846030871181;  // std dev = 1.86e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.052439341735973775;  // std dev = 5.308, 147.000 (wgt'ed) examples reached here.  /* #neg=109 #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202602;  // std dev = 5.67e-09, 287.000 (wgt'ed) examples reached here.  /* #neg=287 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.135057
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.312 seconds
Total inference time: 1.689 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.975708
   AUC PR    = 0.850472
   CLL	      = -0.139909
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.804124
   F1        = 0.891429


Total scoring time: 3.062 seconds
Parameter learned model CLL: -0.139909


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 12, 0], 'true,false,true': [9.68e-07, 0, 156], 'true,false,false,true': [5.143, 87, 38], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 261, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.187, 2, 156], 'true,false,true': [5.27e-09, 12, 0], 'true,false,false,true': [5.16, 89, 38], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 318, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.164, 10, 0], 'true,false,true': [0.372, 82, 194], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 274, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.601, 6, 156], 'true,false,true': [6.45e-09, 9, 0], 'true,false,false,true': [5.044, 77, 38], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 271, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.326, 12, 0], 'true,false,true': [3.67e-07, 0, 156], 'true,false,false,true': [5.152, 88, 38], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.41e-07, 285, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [1.045, 4, 156], 'true,false,true': [0.434, 108, 38], 'true,false,false': [0.0, 0, 0], 'false,true': [9.06e-08, 250, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.331, 11, 0], 'true,false,true': [1.63e-07, 0, 156], 'true,false,false,true': [5.022, 75, 38], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.96e-08, 253, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.798, 3, 156], 'true,false,true': [0.0, 7, 0], 'true,false,false,true': [5.055, 78, 38], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.59e-09, 300, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.233, 9, 0], 'true,false,true': [5.368, 92, 194], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 286, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.625, 2, 156], 'true,false,true': [1.86e-09, 8, 0], 'true,false,false,true': [5.308, 109, 38], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.67e-09, 287, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.2237183892648769, -8.847754372491668e-17], 'true': [-1.1564823173178714e-17, 0.21375109231139924], 'true,false': [6.012284687200848e-15, 0.21158400000000135], 'true,false,false': [0.21158400000000135, nan], 'false': [-8.847754372491668e-17, nan]}, {'': [0.18506590413819335, -9.216945864812621e-17], 'true': [0.008922151573829072, 0.19699251149273134], 'true,false': [2.3129646346357427e-18, 0.20968441936883883], 'true,false,false': [0.20968441936883883, nan], 'false': [-9.216945864812621e-17, nan]}, {'': [0.14256211469653562, -1.1021192069271627e-16], 'true': [0.0026970644838809122, 0.13816912415792637], 'true,false': [0.13816912415792637, nan], 'false': [-1.1021192069271627e-16, nan]}, {'': [0.13212966284160077, -6.390951728469536e-17], 'true': [0.015818172994287266, 0.2074770892811879], 'true,false': [4.625929269271485e-18, 0.2212476370510389], 'true,false,false': [0.2212476370510389, nan], 'false': [-6.390951728469536e-17, nan]}, {'': [0.12044135429924402, 7.011934892369409e-17], 'true': [0.008861525143375668, 0.11909750094333489], 'true,false': [8.654046140667887e-16, 0.21063240110859183], 'true,false,false': [0.21063240110859183, nan], 'false': [7.011934892369409e-17, nan]}, {'': [0.11094934894264555, 3.286260152890463e-17], 'true': [0.006822301472604986, 0.18850662684631272], 'true,false': [0.18850662684631272, nan], 'false': [3.286260152890463e-17, nan]}, {'': [0.10010356024849915, 1.4042346556523718e-17], 'true': [0.009944859689895747, 0.10025429945273452], 'true,false': [1.708035422500241e-16, 0.22319680476153256], 'true,false,false': [0.22319680476153256, nan], 'false': [1.4042346556523718e-17, nan]}, {'': [0.09831644173427545, 3.1086244689504386e-17], 'true': [0.004000941734600854, 0.20842134548458968], 'true,false': [-1.982541115402065e-18, 0.22027348394768087], 'true,false,false': [0.22027348394768087, nan], 'false': [3.1086244689504386e-17, nan]}, {'': [0.09884260058714273, -4.5030024775006347e-17], 'true': [0.006021918092967192, 0.10075828784389843], 'true,false': [0.10075828784389843, nan], 'false': [-4.5030024775006347e-17, nan]}, {'': [0.10128623722366929, 3.249433242805336e-17], 'true': [0.0024706775517731347, 0.18178813183924553], 'true,false': [4.336808689942018e-19, 0.19167939284557486], 'true,false,false': [0.19167939284557486, nan], 'false': [3.249433242805336e-17, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995098;  // std dev = 9.68e-07, 156.000 (wgt'ed) examples reached here.  /* #pos=156 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.8581489350995115;  // std dev = 2.60e-07, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return -0.14185106490048766;  // std dev = 7.60e-08, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
%   else return -0.1418510649004879;  // std dev = 0.000, 289.000 (wgt'ed) examples reached here.  /* #neg=289 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7140917685756738;  // std dev = 0.067, 157.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=156 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.719473412210955;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return -0.12544463852839147;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
%   else return -0.12544463852839197;  // std dev = 0.000, 283.000 (wgt'ed) examples reached here.  /* #neg=283 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5564347269470276;  // std dev = 0.007, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.11445203172048145;  // std dev = 0.160, 107.000 (wgt'ed) examples reached here.  /* #neg=107 */
%   else return -0.11231637819360693;  // std dev = 0.000, 271.000 (wgt'ed) examples reached here.  /* #neg=271 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.4185629461509957;  // std dev = 1.93e-07, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | | else return 0.40524997619726166;  // std dev = 0.090, 94.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=92 */
%   | else if ( genre(A, E) )
%   | | then return -0.1014015645374886;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.41725380318050737;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return -0.10140156453748847;  // std dev = 5.37e-08, 110.000 (wgt'ed) examples reached here.  /* #neg=110 */
%   else return -0.10159632948783662;  // std dev = 0.000, 293.000 (wgt'ed) examples reached here.  /* #neg=293 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( female(B) )
%   | | then return -0.09252817721712255;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return -0.16812272384736793;  // std dev = 0.207, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.3231398342671778;  // std dev = 0.018, 156.000 (wgt'ed) examples reached here.  /* #pos=156 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.3205357343085632;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return -0.09252817721712249;  // std dev = 3.94e-08, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
%   else return -0.09269127618926043;  // std dev = 1.49e-07, 293.000 (wgt'ed) examples reached here.  /* #neg=293 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25648080771107934;  // std dev = 0.018, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.08614221643511098;  // std dev = 0.164, 113.000 (wgt'ed) examples reached here.  /* #neg=113 */
%   else return -0.08518475138839678;  // std dev = 9.31e-08, 255.000 (wgt'ed) examples reached here.  /* #neg=255 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( actor(B) )
%   | | then return -0.07653928630698233;  // std dev = 0.009, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else return -0.23303968614381104;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.21098548349978058;  // std dev = 0.014, 156.000 (wgt'ed) examples reached here.  /* #pos=156 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.20943616423160538;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return -0.0785784831896885;  // std dev = 0.000, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
%   else return -0.07877675473109143;  // std dev = 5.96e-08, 255.000 (wgt'ed) examples reached here.  /* #neg=255 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1756273259392291;  // std dev = 0.371, 157.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=156 */
%   | else if ( genre(A, E) )
%   | | then return -0.07108387129721762;  // std dev = 0.009, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.17686061911547912;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return -0.07307419860485169;  // std dev = 0.000, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
%   else return -0.07324622576333698;  // std dev = 9.77e-08, 299.000 (wgt'ed) examples reached here.  /* #neg=299 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.15350543456418209;  // std dev = 0.012, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.07293893189791224;  // std dev = 0.264, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
%   else return -0.06842697784420301;  // std dev = 0.000, 303.000 (wgt'ed) examples reached here.  /* #neg=303 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( actor(A) )
%   | | then return 0.13480677936011304;  // std dev = 0.010, 156.000 (wgt'ed) examples reached here.  /* #pos=156 */
%   | | else return -0.21055594431258293;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(A, E) )
%   | | then return -0.060833186807136806;  // std dev = 0.006, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.13375828744398263;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return -0.06377997151619245;  // std dev = 0.000, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
%   else return -0.06419184008202597;  // std dev = 1.14e-07, 298.000 (wgt'ed) examples reached here.  /* #neg=298 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063447
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.573 seconds
Total inference time: 1.748 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064884
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.225 seconds
Refined model CLL: -0.064884


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063447
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 11.171999999999999 seconds
Total inference time: 1.748 seconds
AUC ROC: 1.0
Total revision time: 11.171999999999999
Best scored revision CLL: -0.064884


Dataset: 4_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 00:01:57
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063447, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 11.171999999999999, 'Inference time': 1.748, 'parameter_0.6': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.135057, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 2.312, 'Inference time': 1.689}}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995091;  // std dev = 1.08e-06, 211.000 (wgt'ed) examples reached here.  /* #pos=211 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.15083186192878073;  // std dev = 5.827, 164.000 (wgt'ed) examples reached here.  /* #neg=116 #pos=48 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048743;  // std dev = 2.70e-07, 376.000 (wgt'ed) examples reached here.  /* #neg=376 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7115399093871134;  // std dev = 1.189, 213.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=211 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 7.45e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.11784835765261356;  // std dev = 5.883, 172.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=48 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839227;  // std dev = 0.000, 411.000 (wgt'ed) examples reached here.  /* #neg=411 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12654270227919082;  // std dev = 0.151, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( movie(E, A) )
%   | | then return 0.3696695105170412;  // std dev = 0.370, 371.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=259 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360642;  // std dev = 0.000, 362.000 (wgt'ed) examples reached here.  /* #neg=362 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4558246003007854;  // std dev = 1.152, 214.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=211 */
%   | else if ( genre(A, E) )
%   | | then return -0.10030516849610227;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.08816306039651842;  // std dev = 5.686, 147.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=48 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783638;  // std dev = 3.48e-09, 341.000 (wgt'ed) examples reached here.  /* #neg=341 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.15735244384736238;  // std dev = 0.360, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( genre(B, E) )
%   | | then return 0.3554465293393701;  // std dev = 2.98e-07, 211.000 (wgt'ed) examples reached here.  /* #pos=211 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.043396166764957715;  // std dev = 5.804, 161.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=48 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926086;  // std dev = 1.50e-07, 397.000 (wgt'ed) examples reached here.  /* #neg=397 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.26392754247230205;  // std dev = 1.296, 217.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=211 */
%   | else if ( movie(E, A) )
%   | | then return 0.030529141560725507;  // std dev = 0.444, 171.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=48 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.19e-07, 358.000 (wgt'ed) examples reached here.  /* #neg=358 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11439139110124608;  // std dev = 0.301, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( genre(B, E) )
%   | | then return 0.22889573086503168;  // std dev = 0.000, 211.000 (wgt'ed) examples reached here.  /* #pos=211 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.027268730751529233;  // std dev = 5.812, 162.000 (wgt'ed) examples reached here.  /* #neg=114 #pos=48 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109141;  // std dev = 6.99e-08, 348.000 (wgt'ed) examples reached here.  /* #neg=348 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18430683619427915;  // std dev = 0.823, 214.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=211 */
%   | else if ( genre(A, E) )
%   | | then return -0.0734163089951977;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.006278093645294776;  // std dev = 5.876, 171.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=48 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333721;  // std dev = 1.61e-09, 393.000 (wgt'ed) examples reached here.  /* #neg=393 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.0869914395748181;  // std dev = 0.248, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( movie(E, B) )
%   | | then return 0.10384079413391087;  // std dev = 5.948, 371.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=259 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420324;  // std dev = 0.000, 360.000 (wgt'ed) examples reached here.  /* #neg=360 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14186303327612987;  // std dev = 0.907, 215.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=211 */
%   | else if ( genre(A, E) )
%   | | then return -0.0632236565309695;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.040200783979058484;  // std dev = 5.973, 187.000 (wgt'ed) examples reached here.  /* #neg=139 #pos=48 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202564;  // std dev = 9.45e-09, 382.000 (wgt'ed) examples reached here.  /* #neg=382 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.131269
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.516 seconds
Total inference time: 1.684 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.977375
   AUC PR    = 0.8594
   CLL	      = -0.135418
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.814672
   F1        = 0.897872


Total scoring time: 3.354 seconds
Parameter learned model CLL: -0.135418


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 10, 0], 'true,false,true': [1.08e-06, 0, 211], 'true,false,false,true': [5.827, 116, 48], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.7e-07, 376, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.189, 2, 211], 'true,false,true': [7.45e-09, 13, 0], 'true,false,false,true': [5.883, 124, 48], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 411, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.151, 16, 0], 'true,false,true': [0.37, 112, 259], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 362, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.152, 3, 211], 'true,false,true': [0.0, 8, 0], 'true,false,false,true': [5.686, 99, 48], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.48e-09, 341, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.36, 15, 0], 'true,false,true': [2.98e-07, 0, 211], 'true,false,false,true': [5.804, 113, 48], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.5e-07, 397, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [1.296, 6, 211], 'true,false,true': [0.444, 123, 48], 'true,false,false': [0.0, 0, 0], 'false,true': [1.19e-07, 358, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.301, 14, 0], 'true,false,true': [0.0, 0, 211], 'true,false,false,true': [5.812, 114, 48], 'true,false,false,false': [0.0, 0, 0], 'false,true': [6.99e-08, 348, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.823, 3, 211], 'true,false,true': [5.27e-09, 11, 0], 'true,false,false,true': [5.876, 123, 48], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.61e-09, 393, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.248, 14, 0], 'true,false,true': [5.948, 112, 259], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 360, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.907, 4, 211], 'true,false,true': [0.0, 11, 0], 'true,false,false,true': [5.973, 139, 48], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.45e-09, 382, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.22016528925620196, 1.9369848514736775e-16], 'true': [-1.1102230246251566e-17, 0.2136462222222259], 'true,false': [5.522701832448172e-15, 0.20701963117192235], 'true,false,false': [0.20701963117192235, nan], 'false': [1.9369848514736775e-16, nan]}, {'': [0.1851014091456926, -1.2750006511510313e-16], 'true': [0.0066402192743973, 0.1909192876215509], 'true,false': [4.270088556250602e-18, 0.20118983234180715], 'true,false,false': [0.20118983234180715, nan], 'false': [-1.2750006511510313e-16, nan]}, {'': [0.14115839599129293, -2.944237855359531e-17], 'true': [0.0014167180789165755, 0.13700508180248028], 'true,false': [0.13700508180248028, nan], 'false': [-2.944237855359531e-17, nan]}, {'': [0.12662954343933663, 1.3023143983872805e-17], 'true': [0.0062041931999332325, 0.21029694427891896], 'true,false': [0.0, 0.21990837151187043], 'true,false,false': [0.21990837151187043, nan], 'false': [1.3023143983872805e-17, nan]}, {'': [0.1156817272239749, 5.704924358275363e-17], 'true': [0.008644361244869437, 0.11446708247247334], 'true,false': [4.209376396683058e-16, 0.20925118629682507], 'true,false,false': [0.20925118629682507, nan], 'false': [5.704924358275363e-17, nan]}, {'': [0.10451919983932074, 3.9695124902798894e-17], 'true': [0.007734899259915207, 0.196872459398841], 'true,false': [0.196872459398841, nan], 'false': [3.9695124902798894e-17, nan]}, {'': [0.09942129390138495, 1.403730261020313e-17], 'true': [0.006456462620532566, 0.1005450139254873], 'true,false': [-3.4516886452801077e-16, 0.20850480109739333], 'true,false,false': [0.20850480109739333, nan], 'false': [1.403730261020313e-17, nan]}, {'': [0.09736540165637142, 2.259995978880726e-18], 'true': [0.0031614137970366798, 0.19006569486683433], 'true,false': [2.523234146875356e-18, 0.20190827947060697], 'true,false,false': [0.20190827947060697, nan], 'false': [2.259995978880726e-18, nan]}, {'': [0.09332936585238116, -9.93032816470279e-17], 'true': [0.004408748845530336, 0.09536060841841681], 'true,false': [0.09536060841841681, nan], 'false': [-9.93032816470279e-17, nan]}, {'': [0.09678628465697767, 8.893409568986856e-17], 'true': [0.0038291019962016838, 0.18022551031930553], 'true,false': [0.0, 0.19079756355629338], 'true,false,false': [0.19079756355629338, nan], 'false': [8.893409568986856e-17, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048774;  // std dev = 1.49e-08, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995091;  // std dev = 1.08e-06, 211.000 (wgt'ed) examples reached here.  /* #pos=211 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.8581489350995121;  // std dev = 1.69e-07, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 131.000 (wgt'ed) examples reached here.  /* #neg=131 */
%   else return -0.14185106490048752;  // std dev = 2.40e-07, 358.000 (wgt'ed) examples reached here.  /* #neg=358 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109541;  // std dev = 2.67e-07, 84.000 (wgt'ed) examples reached here.  /* #pos=84 */
%   | | else return 0.7128724899395544;  // std dev = 0.074, 128.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=127 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( actor(B) )
%   | | | then return -0.12544463852839105;  // std dev = 8.02e-08, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
%   | | | else return 0.702230186685662;  // std dev = 0.836, 49.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=48 */
%   else return -0.12544463852839222;  // std dev = 0.000, 376.000 (wgt'ed) examples reached here.  /* #neg=376 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( actor(B) )
%   | | then return -0.11231637819360635;  // std dev = 1.39e-08, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else return -0.22636024900053034;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( actor(B) )
%   | | then return -0.1123163781936062;  // std dev = 9.54e-08, 131.000 (wgt'ed) examples reached here.  /* #neg=131 */
%   | | else return 0.5569537518687744;  // std dev = 0.024, 259.000 (wgt'ed) examples reached here.  /* #pos=259 */
%   else return -0.11231637819360617;  // std dev = 0.000, 410.000 (wgt'ed) examples reached here.  /* #neg=410 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( actor(A) )
%   | | then return 0.4180941116807362;  // std dev = 0.011, 211.000 (wgt'ed) examples reached here.  /* #pos=211 */
%   | | else return -0.18918127537564414;  // std dev = 7.45e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783633;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.4213258841425365;  // std dev = 5.96e-08, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | | else return -0.10683670168957289;  // std dev = 0.401, 134.000 (wgt'ed) examples reached here.  /* #neg=134 */
%   else return -0.10159632948783598;  // std dev = 2.06e-07, 392.000 (wgt'ed) examples reached here.  /* #neg=392 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( actor(B) )
%   | | then return -0.09269127618926101;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else return -0.1618509499055117;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.32110566021861536;  // std dev = 0.010, 211.000 (wgt'ed) examples reached here.  /* #pos=211 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.32329750610136865;  // std dev = 0.000, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | | else return -0.0961804975463431;  // std dev = 0.308, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
%   else return -0.09269127618926065;  // std dev = 1.80e-07, 370.000 (wgt'ed) examples reached here.  /* #neg=370 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.2557180856493836;  // std dev = 0.013, 259.000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else if ( actor(B) )
%   | | then return -0.08455211598111505;  // std dev = 0.002, 135.000 (wgt'ed) examples reached here.  /* #neg=135 */
%   | | else return -0.24169325206586686;  // std dev = 0.174, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.08518475138839679;  // std dev = 1.17e-07, 328.000 (wgt'ed) examples reached here.  /* #neg=328 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.081547711867569;  // std dev = 0.034, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( genre(B, E) )
%   | | then return 0.20990173005804996;  // std dev = 0.008, 211.000 (wgt'ed) examples reached here.  /* #pos=211 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.21120548133115039;  // std dev = 0.000, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | | else return -0.08335252261119346;  // std dev = 0.328, 129.000 (wgt'ed) examples reached here.  /* #neg=129 */
%   else return -0.07877675473109143;  // std dev = 2.12e-07, 369.000 (wgt'ed) examples reached here.  /* #neg=369 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.176623141309369;  // std dev = 1.10e-07, 84.000 (wgt'ed) examples reached here.  /* #pos=84 */
%   | | else return 0.17536766993075573;  // std dev = 0.025, 128.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=127 */
%   | else if ( genre(A, E) )
%   | | then return -0.07310120627467387;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.1781576390174334;  // std dev = 3.94e-08, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | | else return -0.07701360287286603;  // std dev = 0.310, 136.000 (wgt'ed) examples reached here.  /* #neg=136 */
%   else return -0.07324622576333771;  // std dev = 0.000, 395.000 (wgt'ed) examples reached here.  /* #neg=395 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.15309928432380898;  // std dev = 0.008, 259.000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else if ( actor(B) )
%   | | then return -0.06746946978946489;  // std dev = 0.003, 121.000 (wgt'ed) examples reached here.  /* #neg=121 */
%   | | else return -0.15480584762115435;  // std dev = 0.106, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.06842697784420332;  // std dev = 0.000, 389.000 (wgt'ed) examples reached here.  /* #neg=389 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.13364379725459036;  // std dev = 0.000, 84.000 (wgt'ed) examples reached here.  /* #pos=84 */
%   | | else return 0.1326593658670899;  // std dev = 0.021, 128.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=127 */
%   | else if ( genre(A, E) )
%   | | then return -0.06412964671299175;  // std dev = 3.73e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( actor(B) )
%   | | | then return -0.06326803306419483;  // std dev = 0.000, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
%   | | | else return 0.1216535945543503;  // std dev = 0.451, 50.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=48 */
%   else return -0.06419184008202561;  // std dev = 1.93e-07, 394.000 (wgt'ed) examples reached here.  /* #neg=394 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063293
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 4.465 seconds
Total inference time: 1.741 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.065212
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 3.283 seconds
Refined model CLL: -0.065212


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063293
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 13.618 seconds
Total inference time: 1.741 seconds
AUC ROC: 1.0
Total revision time: 13.618
Best scored revision CLL: -0.065212


Dataset: 4_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 00:02:15
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063293, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 13.618, 'Inference time': 1.741, 'parameter_0.8': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.131269, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 2.516, 'Inference time': 1.684}}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004877;  // std dev = 1.83e-08, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995086;  // std dev = 1.08e-06, 265.000 (wgt'ed) examples reached here.  /* #pos=265 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.1531489350995135;  // std dev = 6.449, 200.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048763;  // std dev = 8.43e-08, 490.000 (wgt'ed) examples reached here.  /* #neg=490 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.710015374329547;  // std dev = 1.455, 268.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=265 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 7.45e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.1410291111188387;  // std dev = 6.415, 195.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839233;  // std dev = 0.000, 493.000 (wgt'ed) examples reached here.  /* #neg=493 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13956691905522958;  // std dev = 0.242, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | else if ( movie(E, A) )
%   | | then return 0.3823875940592289;  // std dev = 0.365, 452.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=324 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360588;  // std dev = 0.000, 482.000 (wgt'ed) examples reached here.  /* #neg=482 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4574529826769431;  // std dev = 0.937, 267.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=265 */
%   | else if ( genre(A, E) )
%   | | then return -0.09913591386603252;  // std dev = 7.45e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.0215935248828569;  // std dev = 6.576, 221.000 (wgt'ed) examples reached here.  /* #neg=162 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783545;  // std dev = 1.52e-08, 486.000 (wgt'ed) examples reached here.  /* #neg=486 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12150605338722112;  // std dev = 0.311, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( genre(B, E) )
%   | | then return 0.35251444457618664;  // std dev = 2.06e-07, 265.000 (wgt'ed) examples reached here.  /* #pos=265 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.013997720817029102;  // std dev = 6.592, 224.000 (wgt'ed) examples reached here.  /* #neg=165 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0926912761892614;  // std dev = 0.000, 487.000 (wgt'ed) examples reached here.  /* #neg=487 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2707428625536671;  // std dev = 0.928, 268.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=265 */
%   | else if ( movie(E, A) )
%   | | then return 0.037381492151006154;  // std dev = 0.448, 208.000 (wgt'ed) examples reached here.  /* #neg=149 #pos=59 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.48e-07, 522.000 (wgt'ed) examples reached here.  /* #neg=522 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13312790834299496;  // std dev = 0.415, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( genre(B, E) )
%   | | then return 0.22596058873647035;  // std dev = 1.98e-07, 265.000 (wgt'ed) examples reached here.  /* #pos=265 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.005437524430440932;  // std dev = 6.587, 223.000 (wgt'ed) examples reached here.  /* #neg=164 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109201;  // std dev = 0.000, 491.000 (wgt'ed) examples reached here.  /* #neg=491 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1800334444962408;  // std dev = 1.060, 270.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=265 */
%   | else if ( genre(A, E) )
%   | | then return -0.07424418755136661;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.005584010911444001;  // std dev = 6.582, 222.000 (wgt'ed) examples reached here.  /* #neg=163 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333692;  // std dev = 6.91e-09, 499.000 (wgt'ed) examples reached here.  /* #neg=499 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09803049035300242;  // std dev = 0.345, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else if ( movie(E, B) )
%   | | then return 0.10261807383049472;  // std dev = 6.656, 471.000 (wgt'ed) examples reached here.  /* #neg=147 #pos=324 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420351;  // std dev = 0.000, 477.000 (wgt'ed) examples reached here.  /* #neg=477 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.147614702927216;  // std dev = 0.455, 266.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=265 */
%   | else if ( genre(A, E) )
%   | | then return -0.06323789205003341;  // std dev = 9.13e-09, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.003481426630353631;  // std dev = 6.495, 207.000 (wgt'ed) examples reached here.  /* #neg=148 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202544;  // std dev = 1.08e-08, 464.000 (wgt'ed) examples reached here.  /* #neg=464 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.129104
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.86 seconds
Total inference time: 1.699 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.977686
   AUC PR    = 0.861626
   CLL	      = -0.133534
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.817901
   F1        = 0.89983


Total scoring time: 3.208 seconds
Parameter learned model CLL: -0.133534


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [1.83e-08, 25, 0], 'true,false,true': [1.08e-06, 0, 265], 'true,false,false,true': [6.449, 141, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.43e-08, 490, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.455, 3, 265], 'true,false,true': [7.45e-09, 15, 0], 'true,false,false,true': [6.415, 136, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 493, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.242, 25, 0], 'true,false,true': [0.365, 128, 324], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 482, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.937, 2, 265], 'true,false,true': [7.45e-09, 11, 0], 'true,false,false,true': [6.576, 162, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.52e-08, 486, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.311, 19, 0], 'true,false,true': [2.06e-07, 0, 265], 'true,false,false,true': [6.592, 165, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 487, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.928, 3, 265], 'true,false,true': [0.448, 149, 59], 'true,false,false': [0.0, 0, 0], 'false,true': [1.48e-07, 522, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.415, 19, 0], 'true,false,true': [1.98e-07, 0, 265], 'true,false,false,true': [6.587, 164, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 491, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [1.06, 5, 265], 'true,false,true': [0.0, 14, 0], 'true,false,false,true': [6.582, 163, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [6.91e-09, 499, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.345, 18, 0], 'true,false,true': [6.656, 147, 324], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 477, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.455, 1, 265], 'true,false,true': [9.13e-09, 18, 0], 'true,false,false,true': [6.495, 148, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.08e-08, 464, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.22400666389004856, 1.4500872158369393e-17], 'true': [1.3322676295501878e-17, 0.21127991675338473], 'true,false': [4.397321081685148e-15, 0.2079750000000004], 'true,false,false': [0.2079750000000004, nan], 'false': [1.4500872158369393e-17, nan]}, {'': [0.1777538323824343, -1.3872157873612505e-16], 'true': [0.007901812450009897, 0.20065600742721545], 'true,false': [3.7007434154171884e-18, 0.2110190664036841], 'true,false,false': [0.2110190664036841, nan], 'false': [-1.3872157873612505e-16, nan]}, {'': [0.1395899353694521, -1.1056162900831434e-17], 'true': [0.0023515412612948026, 0.1329019112337477], 'true,false': [0.1329019112337477, nan], 'false': [-1.1056162900831434e-17, nan]}, {'': [0.13724461234889615, 2.3209600679406563e-16], 'true': [0.0032860162570804152, 0.18707585526518572], 'true,false': [5.046468293750712e-18, 0.19569623881574874], 'true,false,false': [0.19569623881574874, nan], 'false': [2.3209600679406563e-16, nan]}, {'': [0.11678666555210003, -2.0061524880290305e-17], 'true': [0.005085292579000431, 0.11732188778150011], 'true,false': [1.6087760054945663e-16, 0.1940170599489776], 'true,false,false': [0.1940170599489776, nan], 'false': [-2.0061524880290305e-17, nan]}, {'': [0.10298725138611992, 4.1686535024239595e-17], 'true': [0.003213334550064686, 0.2008811439546865], 'true,false': [0.2008811439546865, nan], 'false': [4.1686535024239595e-17, nan]}, {'': [0.09994452274945081, -3.3464971007031196e-17], 'true': [0.00907700933477364, 0.10098176074924677], 'true,false': [1.4747113383700192e-16, 0.19457459430111418], 'true,false,false': [0.19457459430111418, nan], 'false': [-3.3464971007031196e-17, nan]}, {'': [0.09598824910083283, 4.805775016413503e-17], 'true': [0.0041595552025412525, 0.18391416503418534], 'true,false': [-2.9738116731030977e-18, 0.19513432351270005], 'true,false,false': [0.19513432351270005, nan], 'false': [4.805775016413503e-17, nan]}, {'': [0.09226199715508089, -1.2103060226521622e-16], 'true': [0.006603620770193042, 0.09405360814650131], 'true,false': [0.09405360814650131, nan], 'false': [-1.2103060226521622e-16, nan]}, {'': [0.09203202550097754, 1.1772192416283987e-16], 'true': [0.0007786962697305684, 0.18781018302569671], 'true,false': [4.625929269271485e-18, 0.20378538588998668], 'true,false,false': [0.20378538588998668, nan], 'false': [1.1772192416283987e-16, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048774;  // std dev = 1.49e-08, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995086;  // std dev = 1.08e-06, 265.000 (wgt'ed) examples reached here.  /* #pos=265 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.8581489350995125;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.14185106490048796;  // std dev = 0.000, 140.000 (wgt'ed) examples reached here.  /* #neg=140 */
%   else return -0.14185106490048738;  // std dev = 2.23e-07, 469.000 (wgt'ed) examples reached here.  /* #neg=469 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109546;  // std dev = 0.000, 102.000 (wgt'ed) examples reached here.  /* #pos=102 */
%   | | else return 0.7042038088843416;  // std dev = 0.113, 166.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=163 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( actor(B) )
%   | | | then return -0.12544463852839133;  // std dev = 4.21e-08, 153.000 (wgt'ed) examples reached here.  /* #neg=153 */
%   | | | else return 0.7194734122109543;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   else return -0.12544463852839235;  // std dev = 0.000, 500.000 (wgt'ed) examples reached here.  /* #neg=500 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1423242187736577;  // std dev = 0.193, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( director(B), actor(A) )
%   | | then return 0.5572617315975088;  // std dev = 0.034, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | | else return -0.11375640219809464;  // std dev = 0.162, 160.000 (wgt'ed) examples reached here.  /* #neg=160 */
%   else return -0.11231637819360601;  // std dev = 0.000, 447.000 (wgt'ed) examples reached here.  /* #neg=447 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.4170527282347106;  // std dev = 2.46e-07, 102.000 (wgt'ed) examples reached here.  /* #pos=102 */
%   | | else return 0.4132329388629057;  // std dev = 0.068, 165.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=163 */
%   | else if ( genre(A, E) )
%   | | then return -0.09888993702030714;  // std dev = 7.45e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.41705272823471073;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.10308135470461115;  // std dev = 0.150, 132.000 (wgt'ed) examples reached here.  /* #neg=132 */
%   else return -0.10159632948783556;  // std dev = 3.10e-07, 463.000 (wgt'ed) examples reached here.  /* #neg=463 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( actor(B) )
%   | | then return -0.09042062616163739;  // std dev = 1.05e-08, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else return -0.2755310582552296;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.32296484159547023;  // std dev = 0.033, 265.000 (wgt'ed) examples reached here.  /* #pos=265 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.3203994267810955;  // std dev = 6.66e-08, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.09373416196064195;  // std dev = 0.139, 154.000 (wgt'ed) examples reached here.  /* #neg=154 */
%   else return -0.0926912761892613;  // std dev = 0.000, 468.000 (wgt'ed) examples reached here.  /* #neg=468 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25639121091668;  // std dev = 0.031, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.09169344458171483;  // std dev = 0.363, 166.000 (wgt'ed) examples reached here.  /* #neg=166 */
%   else return -0.08518475138839678;  // std dev = 1.33e-07, 437.000 (wgt'ed) examples reached here.  /* #neg=437 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( actor(B) )
%   | | then return -0.0765180968891799;  // std dev = 3.73e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else return -0.20850458769613794;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.21089714218400876;  // std dev = 0.025, 265.000 (wgt'ed) examples reached here.  /* #pos=265 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.20936993866444098;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.07939354473503957;  // std dev = 0.121, 126.000 (wgt'ed) examples reached here.  /* #neg=126 */
%   else return -0.07877675473109172;  // std dev = 3.65e-08, 445.000 (wgt'ed) examples reached here.  /* #neg=445 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.1762171384513529;  // std dev = 0.000, 102.000 (wgt'ed) examples reached here.  /* #pos=102 */
%   | | else return 0.1704980337616024;  // std dev = 0.054, 167.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=163 */
%   | else if ( genre(A, E) )
%   | | then return -0.07128327586959331;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.17681202946588906;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.0735683528717062;  // std dev = 0.114, 152.000 (wgt'ed) examples reached here.  /* #neg=152 */
%   else return -0.0732462257633371;  // std dev = 9.42e-08, 464.000 (wgt'ed) examples reached here.  /* #neg=464 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.15378199957383049;  // std dev = 0.028, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.07217712901017584;  // std dev = 0.314, 181.000 (wgt'ed) examples reached here.  /* #neg=181 */
%   else return -0.06842697784420353;  // std dev = 0.000, 489.000 (wgt'ed) examples reached here.  /* #neg=489 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( director(A) )
%   | | then return -0.19090402617124932;  // std dev = 3.73e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.13506754386715641;  // std dev = 0.023, 265.000 (wgt'ed) examples reached here.  /* #pos=265 */
%   | else if ( genre(A, E) )
%   | | then return -0.06235062211292072;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.13369320962639278;  // std dev = 3.65e-08, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.06523612337808109;  // std dev = 0.143, 149.000 (wgt'ed) examples reached here.  /* #neg=149 */
%   else return -0.06419184008202551;  // std dev = 2.17e-07, 434.000 (wgt'ed) examples reached here.  /* #neg=434 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063309
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 4.485 seconds
Total inference time: 1.653 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.065012
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 3.14 seconds
Refined model CLL: -0.065012


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063309
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 13.693000000000001 seconds
Total inference time: 1.653 seconds
AUC ROC: 1.0
Total revision time: 13.693000000000001
Best scored revision CLL: -0.065012


Dataset: 4_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 00:02:32
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063309, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 13.693000000000001, 'Inference time': 1.653, 'parameter_1.0': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.129104, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 2.86, 'Inference time': 1.699}}


Starting fold 3

Target train facts examples: 737
Target train pos examples: 204
Target train neg examples: 10693

Target test facts examples: 341
Target test pos	 examples: 178
Target test neg examples: 3543

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995115;  // std dev = 2.60e-07, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.05851773156715447;  // std dev = 1.354, 24.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048766;  // std dev = 6.14e-08, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.719473412210955;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.05795283904879727;  // std dev = 1.359, 26.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839158;  // std dev = 0.000, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, A) )
%   | | then return 0.330394170481709;  // std dev = 0.337, 61.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=40 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360628;  // std dev = 4.59e-08, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.47302209599697653;  // std dev = 8.43e-08, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | else if ( genre(A, E) )
%   | | then return -0.1015963294878363;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.10097111900597135;  // std dev = 1.365, 29.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783617;  // std dev = 6.18e-09, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.16079090044044855;  // std dev = 0.167, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.35869364367706724;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.04505340370038149;  // std dev = 1.333, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926107;  // std dev = 0.000, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2809544285002729;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | else if ( movie(E, A) )
%   | | then return -0.06112792510504206;  // std dev = 0.275, 24.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.0851847513883968;  // std dev = 1.83e-08, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.3226743848218575;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.2278156291751249;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.047439218097398234;  // std dev = 1.345, 21.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109177;  // std dev = 1.05e-08, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.19023216819002475;  // std dev = 3.94e-08, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | else if ( genre(A, E) )
%   | | then return -0.055945725707015226;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.05001577900041678;  // std dev = 1.351, 23.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.07779453650432146;  // std dev = 1.590, 63.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=40 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420268;  // std dev = 3.23e-09, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15231878825215625;  // std dev = 3.16e-08, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | else if ( genre(A, E) )
%   | | then return -0.053063267871085146;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.02917817799941637;  // std dev = 1.333, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202625;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.97199
   AUC PR    = 0.81824
   CLL	      = -0.109107
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total learning time: 1.453 seconds
Total inference time: 1.818 seconds
AUC ROC: 0.97199


Results scoring model
   AUC ROC   = 0.993417
   AUC PR    = 0.966052
   CLL	      = -0.087354
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.95
   F1        = 0.974359


Total scoring time: 1.523 seconds
Parameter learned model CLL: -0.087354


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [2.6e-07, 0, 38], 'true,false,false,true': [1.354, 22, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [6.14e-08, 60, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 38], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [1.359, 24, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 52, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.337, 21, 40], 'true,false,false': [0.0, 0, 0], 'false,true': [4.59e-08, 61, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [8.43e-08, 0, 38], 'true,false,true': [0.0, 3, 0], 'true,false,false,true': [1.365, 27, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [6.18e-09, 68, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.167, 3, 0], 'true,false,true': [0.0, 0, 38], 'true,false,false,true': [1.333, 16, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 57, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 38], 'true,false,true': [0.275, 22, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [1.83e-08, 48, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 38], 'true,false,false,true': [1.345, 19, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.05e-08, 53, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [3.94e-08, 0, 38], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [1.351, 21, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 59, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [1.59, 23, 40], 'true,false,false': [0.0, 0, 0], 'false,true': [3.23e-09, 66, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [3.16e-08, 0, 38], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [1.333, 16, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 58, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.23437500000000086, 6.29126380620922e-17], 'true': [0.0, 0.22892819979188425], 'true,false': [1.7763568394002505e-15, 0.07638888888888894], 'true,false,false': [0.07638888888888894, nan], 'false': [6.29126380620922e-17, nan]}, {'': [0.17618579844393228, -3.416070845000482e-17], 'true': [-7.47939721852737e-16, 0.06853852889447963], 'true,false': [0.0, 0.07100591715976326], 'true,false,false': [0.07100591715976326, nan], 'false': [-3.416070845000482e-17, nan]}, {'': [0.11483516568585687, 3.45807171604557e-17], 'true': [0.0, 0.11355653793548955], 'true,false': [0.11355653793548955, nan], 'false': [3.45807171604557e-17, nan]}, {'': [0.10837960656141477, 3.7551661127027356e-17], 'true': [1.8698493046318425e-16, 0.05818968838263719], 'true,false': [-1.1564823173178713e-18, 0.06420927467300833], 'true,false,false': [0.06420927467300833, nan], 'false': [3.7551661127027356e-17, nan]}, {'': [0.07168010042120072, -1.947759692324836e-18], 'true': [0.009275117646305883, 0.06730087483721453], 'true,false': [-2.337311630789803e-16, 0.09876543209876533], 'true,false,false': [0.09876543209876533, nan], 'false': [-1.947759692324836e-18, nan]}, {'': [0.05710149027410878, 6.938893903907228e-18], 'true': [-9.349246523159212e-17, 0.07579004139150552], 'true,false': [0.07579004139150552, nan], 'false': [6.938893903907228e-18, nan]}, {'': [0.05059400469821794, 2.09476042382105e-18], 'true': [0.0, 0.04803865528802845], 'true,false': [-8.764918615461762e-17, 0.0861678004535148], 'true,false,false': [0.0861678004535148, nan], 'false': [2.09476042382105e-18, nan]}, {'': [0.04285649749756775, 0.0], 'true': [4.0902953538821554e-17, 0.07304606635099024], 'true,false': [0.0, 0.07939508506616265], 'true,false,false': [0.07939508506616265, nan], 'false': [0.0, nan]}, {'': [0.040147765954040585, 1.0092936587501423e-17], 'true': [nan, 0.040147765954040585], 'true,false': [0.040147765954040585, nan], 'false': [1.0092936587501423e-17, nan]}, {'': [0.038308326615600366, -3.3498108501621104e-18], 'true': [2.6294755846385285e-17, 0.08894023366552481], 'true,false': [0.0, 0.09876543209876537], 'true,false,false': [0.09876543209876537, nan], 'false': [-3.3498108501621104e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995115;  // std dev = 2.60e-07, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else if ( female(A) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return -0.030739953789376686;  // std dev = 1.333, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   else return -0.14185106490048768;  // std dev = 4.47e-08, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.719473412210955;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( female(A) )
%   | | | then return -0.12544463852839138;  // std dev = 7.45e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return -0.03815014721646235;  // std dev = 1.342, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   else return -0.1254446385283916;  // std dev = 0.000, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( director(B) )
%   | | then if ( female(A) )
%   | | | then return 0.5553664367462846;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.5824067292608978;  // std dev = 0.420, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return -0.12299328876463511;  // std dev = 0.052, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else return -0.1123163781936063;  // std dev = 3.33e-08, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.41388773697010534;  // std dev = 0.020, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( female(A) )
%   | | | then return -0.10062593664852856;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return 0.030543768576697255;  // std dev = 1.167, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   else return -0.10159632948783624;  // std dev = 3.16e-08, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.31825841215557843;  // std dev = 0.018, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else if ( female(B) )
%   | | | then return -0.10366966790564797;  // std dev = 0.043, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.05204811238415438;  // std dev = 1.136, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   else return -0.09269127618926104;  // std dev = 0.000, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.25349963843434936;  // std dev = 0.016, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | else if ( actor(A), actor(B) )
%   | | then return -0.11103477008497531;  // std dev = 0.094, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else return 0.3338100025351974;  // std dev = 0.871, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return -0.0851847513883968;  // std dev = 1.29e-08, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.20857685196120196;  // std dev = 0.014, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else if ( female(A) )
%   | | | then return -0.08191429920745891;  // std dev = 0.017, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0.03509850752977078;  // std dev = 1.047, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   else return -0.07877675473109166;  // std dev = 3.57e-08, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1762307548653114;  // std dev = 0.012, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | else if ( genre(A, E) )
%   | | then return -0.1363665348408769;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( female(B) )
%   | | | then return -0.09108623986458322;  // std dev = 0.039, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.02559507179829894;  // std dev = 1.042, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   else return -0.07324622576333704;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then if ( female(A) )
%   | | then return 0.154016231317391;  // std dev = 2.11e-08, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0.19760876197686042;  // std dev = 0.153, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else return -0.10774339907724759;  // std dev = 0.111, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return -0.06842697784420268;  // std dev = 1.67e-08, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1305577563362975;  // std dev = 0.025, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | else if ( genre(A, E) )
%   | | then return -0.11008119356528442;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( female(B) )
%   | | | then return -0.0716184467504659;  // std dev = 0.049, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return 0.05104962212750887;  // std dev = 0.946, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   else return -0.06419184008202625;  // std dev = 0.000, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */


Results
   AUC ROC   = 0.992036
   AUC PR    = 0.889837
   CLL	      = -0.100702
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total learning time: 2.118 seconds
Total inference time: 1.885 seconds
AUC ROC: 0.992036


Results scoring model
   AUC ROC   = 0.999977
   AUC PR    = 0.99875
   CLL	      = -0.073605
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.95
   F1        = 0.974359


Total scoring time: 1.7 seconds
Refined model CLL: -0.073605


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.992036
   AUC PR    = 0.889837
   CLL	      = -0.100702
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total learning time: 6.794 seconds
Total inference time: 1.885 seconds
AUC ROC: 0.992036
Total revision time: 6.794
Best scored revision CLL: -0.073605


Dataset: 4_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 00:02:44
{'AUC ROC': 0.992036, 'AUC PR': 0.889837, 'CLL': -0.100702, 'Precision': [1.0, 0.5], 'Recall': 0.724719, 'F1': 0.840391, 'Learning time': 6.794, 'Inference time': 1.885, 'parameter_0.2': {'AUC ROC': 0.97199, 'AUC PR': 0.81824, 'CLL': -0.109107, 'Precision': [1.0, 0.5], 'Recall': 0.724719, 'F1': 0.840391, 'Learning time': 1.453, 'Inference time': 1.818}}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995127;  // std dev = 0.000, 76.000 (wgt'ed) examples reached here.  /* #pos=76 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.006715929765352576;  // std dev = 2.080, 37.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 123.000 (wgt'ed) examples reached here.  /* #neg=123 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109538;  // std dev = 2.06e-07, 76.000 (wgt'ed) examples reached here.  /* #pos=76 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.044881657783598365;  // std dev = 2.126, 52.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839105;  // std dev = 8.02e-08, 119.000 (wgt'ed) examples reached here.  /* #neg=119 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( movie(E, A) )
%   | | then return 0.33578950299555144;  // std dev = 0.341, 122.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=81 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360622;  // std dev = 7.88e-08, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4716773886214835;  // std dev = 0.000, 76.000 (wgt'ed) examples reached here.  /* #pos=76 */
%   | else if ( genre(A, E) )
%   | | then return -0.1015963294878363;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.07369665117019238;  // std dev = 2.114, 47.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783635;  // std dev = 0.000, 117.000 (wgt'ed) examples reached here.  /* #neg=117 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926094;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.35776240249084196;  // std dev = 1.74e-07, 76.000 (wgt'ed) examples reached here.  /* #pos=76 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.0732997424032913;  // std dev = 2.126, 52.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0926912761892608;  // std dev = 7.60e-08, 125.000 (wgt'ed) examples reached here.  /* #neg=125 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.28032468436311964;  // std dev = 1.55e-07, 76.000 (wgt'ed) examples reached here.  /* #pos=76 */
%   | else if ( movie(E, A) )
%   | | then return -0.055219221583857864;  // std dev = 0.305, 48.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.0851847513883968;  // std dev = 5.37e-08, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08097901505815962;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.2273779593324186;  // std dev = 3.65e-08, 76.000 (wgt'ed) examples reached here.  /* #pos=76 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.009268755930434556;  // std dev = 2.070, 35.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109157;  // std dev = 6.50e-08, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1899162756555306;  // std dev = 4.71e-08, 76.000 (wgt'ed) examples reached here.  /* #pos=76 */
%   | else if ( genre(A, E) )
%   | | then return -0.07515330296758956;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.0616485177984042;  // std dev = 2.134, 56.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333711;  // std dev = 3.95e-09, 115.000 (wgt'ed) examples reached here.  /* #neg=115 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07009367934324802;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( movie(E, B) )
%   | | then return 0.0980442068267538;  // std dev = 2.300, 117.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=81 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420265;  // std dev = 5.10e-09, 121.000 (wgt'ed) examples reached here.  /* #neg=121 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14950168492116828;  // std dev = 8.30e-08, 76.000 (wgt'ed) examples reached here.  /* #pos=76 */
%   | else if ( genre(A, E) )
%   | | then return -0.06566034228752507;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.061318320350540516;  // std dev = 2.128, 53.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202626;  // std dev = 3.23e-09, 124.000 (wgt'ed) examples reached here.  /* #neg=124 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.97199
   AUC PR    = 0.81824
   CLL	      = -0.111773
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total learning time: 1.822 seconds
Total inference time: 1.856 seconds
AUC ROC: 0.97199


Results scoring model
   AUC ROC   = 0.991853
   AUC PR    = 0.951778
   CLL	      = -0.091335
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.938272
   F1        = 0.968153


Total scoring time: 2.03 seconds
Parameter learned model CLL: -0.091335


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 6, 0], 'true,false,true': [0.0, 0, 76], 'true,false,false,true': [2.08, 32, 5], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 123, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [2.06e-07, 0, 76], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [2.126, 47, 5], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.02e-08, 119, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 4, 0], 'true,false,true': [0.341, 41, 81], 'true,false,false': [0.0, 0, 0], 'false,true': [7.88e-08, 104, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 76], 'true,false,true': [0.0, 3, 0], 'true,false,false,true': [2.114, 42, 5], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 117, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [2.63e-09, 3, 0], 'true,false,true': [1.74e-07, 0, 76], 'true,false,false,true': [2.126, 47, 5], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.6e-08, 125, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [1.55e-07, 0, 76], 'true,false,true': [0.305, 43, 5], 'true,false,false': [0.0, 0, 0], 'false,true': [5.37e-08, 93, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 4, 0], 'true,false,true': [3.65e-08, 0, 76], 'true,false,false,true': [2.07, 30, 5], 'true,false,false,false': [0.0, 0, 0], 'false,true': [6.5e-08, 112, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [4.71e-08, 0, 76], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [2.134, 51, 5], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.95e-09, 115, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [2.3, 36, 81], 'true,false,false': [0.0, 0, 0], 'false,true': [5.1e-09, 121, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [8.3e-08, 0, 76], 'true,false,true': [0.0, 3, 0], 'true,false,false,true': [2.128, 48, 5], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.23e-09, 124, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.21735753124779492, -3.6104813808948184e-18], 'true': [-6.938893903907228e-18, 0.20299162033048948], 'true,false': [-1.3088945132422897e-15, 0.11687363038714393], 'true,false,false': [0.11687363038714393, nan], 'false': [-3.6104813808948184e-18, nan]}, {'': [0.17784597554183812, 5.411171044391519e-17], 'true': [5.609547913895527e-16, 0.08392094050088328], 'true,false': [0.0, 0.08690828402366847], 'true,false,false': [0.08690828402366847, nan], 'false': [5.411171044391519e-17, nan]}, {'': [0.11867055870366243, 5.978123978750843e-17], 'true': [0.0, 0.11618682905088899], 'true,false': [0.11618682905088899, nan], 'false': [5.978123978750843e-17, nan]}, {'': [0.10710815956250312, -1.8978171361113787e-17], 'true': [-5.609547913895527e-16, 0.08940560343929255], 'true,false': [-1.1564823173178713e-18, 0.09506564056134008], 'true,false,false': [0.09506564056134008, nan], 'false': [-1.8978171361113787e-17, nan]}, {'': [0.07998835878093549, 4.618527782440651e-17], 'true': [2.3129646346357427e-18, 0.08012699768139359], 'true,false': [3.9734297723426655e-16, 0.08690828402366843], 'true,false,false': [0.08690828402366843, nan], 'false': [4.618527782440651e-17, nan]}, {'': [0.06283454338106785, 3.1038493161563513e-17], 'true': [3.1553707015662343e-16, 0.09331597222222242], 'true,false': [0.09331597222222242, nan], 'false': [3.1038493161563513e-17, nan]}, {'': [0.05077104371207837, 3.766828119263924e-17], 'true': [0.0, 0.05070032644924777], 'true,false': [1.7529837230923523e-17, 0.1224489795918367], 'true,false,false': [0.1224489795918367, nan], 'false': [3.766828119263924e-17, nan]}, {'': [0.04976626252765131, 1.544658121217609e-17], 'true': [2.921639538487254e-17, 0.07989036154663862], 'true,false': [0.0, 0.08131377551020388], 'true,false,false': [0.08131377551020388, nan], 'false': [1.544658121217609e-17, nan]}, {'': [0.04490840641989306, 2.6608651003412843e-17], 'true': [0.0, 0.04520093957487093], 'true,false': [0.04520093957487093, nan], 'false': [2.6608651003412843e-17, nan]}, {'': [0.04518588145212605, 9.848752637803809e-18], 'true': [9.057082569310487e-17, 0.0808634895765126], 'true,false': [0.0, 0.0854396582413672], 'true,false,false': [0.0854396582413672, nan], 'false': [9.848752637803809e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995127;  // std dev = 0.000, 76.000 (wgt'ed) examples reached here.  /* #pos=76 */
%   | | else if ( actor(B) )
%   | | | then return -0.14185106490048768;  // std dev = 4.47e-08, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.14185106490048763;  // std dev = 8.43e-08, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109538;  // std dev = 2.06e-07, 76.000 (wgt'ed) examples reached here.  /* #pos=76 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( actor(B) )
%   | | | then return -0.12544463852839155;  // std dev = 0.000, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.1254446385283913;  // std dev = 0.000, 118.000 (wgt'ed) examples reached here.  /* #neg=118 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( actor(B) )
%   | | then return -0.11231637819360633;  // std dev = 2.36e-08, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   | | else return 0.5553664367462836;  // std dev = 3.42e-07, 81.000 (wgt'ed) examples reached here.  /* #pos=81 */
%   else return -0.11231637819360621;  // std dev = 8.82e-08, 120.000 (wgt'ed) examples reached here.  /* #neg=120 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4175135841583105;  // std dev = 0.000, 76.000 (wgt'ed) examples reached here.  /* #pos=76 */
%   | else if ( genre(A, E) )
%   | | then return -0.1015963294878363;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( actor(B) )
%   | | | then return -0.10159632948783627;  // std dev = 2.36e-08, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | | | else return 0.4175135841583102;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.10159632948783634;  // std dev = 0.000, 114.000 (wgt'ed) examples reached here.  /* #neg=114 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.32071184716015005;  // std dev = 0.000, 76.000 (wgt'ed) examples reached here.  /* #pos=76 */
%   | | else if ( actor(B) )
%   | | | then return -0.09269127618926107;  // std dev = 0.000, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | | | else return 0.32071184716014967;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.09269127618926079;  // std dev = 7.60e-08, 127.000 (wgt'ed) examples reached here.  /* #neg=127 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2551722425694895;  // std dev = 0.000, 76.000 (wgt'ed) examples reached here.  /* #pos=76 */
%   | else if ( actor(B) )
%   | | then return -0.0851847513883968;  // std dev = 1.97e-08, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   | | else return 0.25517224256948945;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.0851847513883968;  // std dev = 6.41e-08, 120.000 (wgt'ed) examples reached here.  /* #neg=120 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.20975771563253573;  // std dev = 0.000, 76.000 (wgt'ed) examples reached here.  /* #pos=76 */
%   | | else if ( actor(B) )
%   | | | then return -0.07877675473109179;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | | | else return 0.20975771563253573;  // std dev = 5.27e-09, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.07877675473109155;  // std dev = 6.91e-08, 121.000 (wgt'ed) examples reached here.  /* #neg=121 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1770964977452772;  // std dev = 2.98e-08, 76.000 (wgt'ed) examples reached here.  /* #pos=76 */
%   | else if ( genre(A, E) )
%   | | then return -0.07877675473109179;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( actor(B) )
%   | | | then return -0.07324622576333704;  // std dev = 1.05e-08, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | | else return 0.17709649774527736;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.07324622576333707;  // std dev = 4.83e-08, 110.000 (wgt'ed) examples reached here.  /* #neg=110 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07324622576333704;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( actor(B) )
%   | | then return -0.0684269778442027;  // std dev = 1.05e-08, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   | | else return 0.1527438580936706;  // std dev = 7.74e-08, 81.000 (wgt'ed) examples reached here.  /* #pos=81 */
%   else return -0.06842697784420265;  // std dev = 6.05e-08, 130.000 (wgt'ed) examples reached here.  /* #neg=130 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13400703000801092;  // std dev = 5.37e-08, 76.000 (wgt'ed) examples reached here.  /* #pos=76 */
%   | else if ( genre(A, E) )
%   | | then return -0.06842697784420272;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( actor(B) )
%   | | | then return -0.06419184008202625;  // std dev = 0.000, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | | else return 0.13400703000801117;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.06419184008202626;  // std dev = 3.33e-08, 121.000 (wgt'ed) examples reached here.  /* #neg=121 */


Results
   AUC ROC   = 0.993085
   AUC PR    = 0.784141
   CLL	      = -0.098971
   Precision = 0.784141 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.879012


Total learning time: 2.323 seconds
Total inference time: 1.828 seconds
AUC ROC: 0.993085


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063978
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.024 seconds
Refined model CLL: -0.063978


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.993085
   AUC PR    = 0.784141
   CLL	      = -0.098971
   Precision = 0.784141 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.879012


Total learning time: 8.199 seconds
Total inference time: 1.828 seconds
AUC ROC: 0.993085
Total revision time: 8.199
Best scored revision CLL: -0.063978


Dataset: 4_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 00:02:56
{'AUC ROC': 0.993085, 'AUC PR': 0.784141, 'CLL': -0.098971, 'Precision': [0.784141, 0.5], 'Recall': 1.0, 'F1': 0.879012, 'Learning time': 8.199, 'Inference time': 1.828, 'parameter_0.4': {'AUC ROC': 0.97199, 'AUC PR': 0.81824, 'CLL': -0.111773, 'Precision': [1.0, 0.5], 'Recall': 0.724719, 'F1': 0.840391, 'Learning time': 1.822, 'Inference time': 1.856}}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995108;  // std dev = 5.96e-07, 114.000 (wgt'ed) examples reached here.  /* #pos=114 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.035184398233821024;  // std dev = 2.673, 75.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=8 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048813;  // std dev = 0.000, 158.000 (wgt'ed) examples reached here.  /* #neg=158 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109551;  // std dev = 0.000, 114.000 (wgt'ed) examples reached here.  /* #pos=114 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.02494576503960167;  // std dev = 2.664, 71.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=8 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 2.98e-08, 159.000 (wgt'ed) examples reached here.  /* #neg=159 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.15071701831329518;  // std dev = 0.094, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( movie(E, A) )
%   | | then return 0.34948079060665443;  // std dev = 0.337, 179.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=122 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360638;  // std dev = 6.66e-08, 165.000 (wgt'ed) examples reached here.  /* #neg=165 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4682669252233914;  // std dev = 3.77e-07, 114.000 (wgt'ed) examples reached here.  /* #pos=114 */
%   | else if ( genre(A, E) )
%   | | then return -0.09814456226449511;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.0665568618106509;  // std dev = 2.662, 70.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=8 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783648;  // std dev = 0.000, 162.000 (wgt'ed) examples reached here.  /* #neg=162 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08979363266713279;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( genre(B, E) )
%   | | then return 0.355403663290192;  // std dev = 0.000, 114.000 (wgt'ed) examples reached here.  /* #pos=114 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.06160247022998724;  // std dev = 2.669, 73.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=8 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926067;  // std dev = 7.88e-08, 159.000 (wgt'ed) examples reached here.  /* #neg=159 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.27872924596584175;  // std dev = 1.63e-07, 114.000 (wgt'ed) examples reached here.  /* #pos=114 */
%   | else if ( movie(E, A) )
%   | | then return -0.04657481086901413;  // std dev = 0.315, 71.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=8 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 7.45e-08, 176.000 (wgt'ed) examples reached here.  /* #neg=176 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07925404369748229;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.22626842902478014;  // std dev = 0.000, 114.000 (wgt'ed) examples reached here.  /* #pos=114 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.038736859129823935;  // std dev = 2.657, 68.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=8 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109148;  // std dev = 8.56e-08, 162.000 (wgt'ed) examples reached here.  /* #neg=162 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18911493049617425;  // std dev = 0.000, 114.000 (wgt'ed) examples reached here.  /* #pos=114 */
%   | else if ( genre(A, E) )
%   | | then return -0.07366011297031205;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.033694135506837995;  // std dev = 2.657, 68.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=8 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333673;  // std dev = 7.74e-09, 171.000 (wgt'ed) examples reached here.  /* #neg=171 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.16351444381639507;  // std dev = 0.328, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( movie(E, B) )
%   | | then return 0.08400884347140387;  // std dev = 2.982, 187.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=122 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420264;  // std dev = 5.51e-09, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15072895348457171;  // std dev = 2.98e-08, 114.000 (wgt'ed) examples reached here.  /* #pos=114 */
%   | else if ( genre(A, E) )
%   | | then return -0.05902506446944339;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.04980933589939082;  // std dev = 2.671, 74.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=8 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 162.000 (wgt'ed) examples reached here.  /* #neg=162 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.97199
   AUC PR    = 0.81824
   CLL	      = -0.111234
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total learning time: 2.149 seconds
Total inference time: 1.707 seconds
AUC ROC: 0.97199


Results scoring model
   AUC ROC   = 0.991378
   AUC PR    = 0.94754
   CLL	      = -0.092403
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.934426
   F1        = 0.966102


Total scoring time: 2.756 seconds
Parameter learned model CLL: -0.092403


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 3, 0], 'true,false,true': [5.96e-07, 0, 114], 'true,false,false,true': [2.673, 67, 8], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 158, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 114], 'true,false,true': [0.0, 4, 0], 'true,false,false,true': [2.664, 63, 8], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.98e-08, 159, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.094, 3, 0], 'true,false,true': [0.337, 57, 122], 'true,false,false': [0.0, 0, 0], 'false,true': [6.66e-08, 165, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [3.77e-07, 0, 114], 'true,false,true': [0.0, 4, 0], 'true,false,false,true': [2.662, 62, 8], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 162, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 9, 0], 'true,false,true': [0.0, 0, 114], 'true,false,false,true': [2.669, 65, 8], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.88e-08, 159, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [1.63e-07, 0, 114], 'true,false,true': [0.315, 63, 8], 'true,false,false': [0.0, 0, 0], 'false,true': [7.45e-08, 176, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 4, 0], 'true,false,true': [0.0, 0, 114], 'true,false,false,true': [2.657, 60, 8], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.56e-08, 162, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 114], 'true,false,true': [0.0, 4, 0], 'true,false,false,true': [2.657, 60, 8], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.74e-09, 171, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.328, 6, 0], 'true,false,true': [2.982, 65, 122], 'true,false,false': [0.0, 0, 0], 'false,true': [5.51e-09, 151, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [2.98e-08, 0, 114], 'true,false,true': [0.0, 4, 0], 'true,false,false,true': [2.671, 66, 8], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 162, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.23166232638889286, -1.4053456007913375e-16], 'true': [0.0, 0.22882898015173542], 'true,false': [3.1164155077197375e-15, 0.09528888888888912], 'true,false,false': [0.09528888888888912, nan], 'false': [-1.4053456007913375e-16, nan]}, {'': [0.17231893795078224, 5.586027796856134e-18], 'true': [-9.349246523159212e-16, 0.09515782629187179], 'true,false': [0.0, 0.09998016266613789], 'true,false,false': [0.09998016266613789, nan], 'false': [5.586027796856134e-18, nan]}, {'': [0.11576900671264855, 2.6914497566670462e-17], 'true': [0.0029492183232036986, 0.1135357008024849], 'true,false': [0.1135357008024849, nan], 'false': [2.6914497566670462e-17, nan]}, {'': [0.10641861759902631, -6.990293118010245e-17], 'true': [1.246566203087895e-15, 0.09580391459686764], 'true,false': [0.0, 0.10122448979591854], 'true,false,false': [0.10122448979591854, nan], 'false': [-6.990293118010245e-17, nan]}, {'': [0.07932078316043754, 3.910219457799293e-17], 'true': [-1.5419764230904951e-18, 0.07947615381694785], 'true,false': [-2.49313240617579e-16, 0.09757928316757358], 'true,false,false': [0.09757928316757358, nan], 'false': [3.910219457799293e-17, nan]}, {'': [0.0632043421162357, 3.154042683594195e-17], 'true': [2.337311630789803e-16, 0.09947768840650723], 'true,false': [0.09947768840650723, nan], 'false': [3.154042683594195e-17, nan]}, {'': [0.05493000594198315, 4.5231308410654523e-17], 'true': [0.0, 0.0552201367368134], 'true,false': [-9.349246523159212e-17, 0.10380622837370239], 'true,false,false': [0.10380622837370239, nan], 'false': [4.5231308410654523e-17, nan]}, {'': [0.04999717086623889, 5.973129723129497e-17], 'true': [0.0, 0.09812302355364616], 'true,false': [0.0, 0.10380622837370253], 'true,false,false': [0.10380622837370253, nan], 'false': [5.973129723129497e-17, nan]}, {'': [0.04846835212678178, 3.0145128483199615e-17], 'true': [0.017945767059720927, 0.04754298865312981], 'true,false': [0.04754298865312981, nan], 'false': [3.0145128483199615e-17, nan]}, {'': [0.046910059958424975, -7.538551401775754e-18], 'true': [7.791038769299344e-18, 0.0914802234907712], 'true,false': [0.0, 0.09642074506939387], 'true,false,false': [0.09642074506939387, nan], 'false': [-7.538551401775754e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995108;  // std dev = 5.96e-07, 114.000 (wgt'ed) examples reached here.  /* #pos=114 */
%   | | else if ( actor(B) )
%   | | | then return -0.14185106490048766;  // std dev = 5.96e-08, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.1418510649004883;  // std dev = 0.000, 180.000 (wgt'ed) examples reached here.  /* #neg=180 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109552;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return 0.7074031543432492;  // std dev = 0.100, 70.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=69 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( actor(B) )
%   | | | then return -0.12544463852839155;  // std dev = 0.000, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
%   | | | else return 0.7194734122109543;  // std dev = 2.98e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.12544463852839155;  // std dev = 0.000, 183.000 (wgt'ed) examples reached here.  /* #neg=183 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.11231637819360625;  // std dev = 5.48e-08, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | else return 0.5570510192086796;  // std dev = 0.016, 122.000 (wgt'ed) examples reached here.  /* #pos=122 */
%   else return -0.11231637819360656;  // std dev = 0.000, 192.000 (wgt'ed) examples reached here.  /* #neg=192 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4188819326345343;  // std dev = 0.015, 114.000 (wgt'ed) examples reached here.  /* #pos=114 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783633;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( actor(B) )
%   | | | then return -0.10159632948783621;  // std dev = 4.08e-08, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | | | else return 0.417103957473223;  // std dev = 2.11e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.10159632948783648;  // std dev = 0.000, 171.000 (wgt'ed) examples reached here.  /* #neg=171 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926098;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.32164039470691624;  // std dev = 0.014, 114.000 (wgt'ed) examples reached here.  /* #pos=114 */
%   | | else if ( actor(B) )
%   | | | then return -0.09269127618926107;  // std dev = 0.000, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   | | | else return 0.3204341542164568;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.09269127618926055;  // std dev = 9.54e-08, 207.000 (wgt'ed) examples reached here.  /* #neg=207 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2558061712338165;  // std dev = 0.012, 114.000 (wgt'ed) examples reached here.  /* #pos=114 */
%   | else if ( actor(B) )
%   | | then return -0.08518475138839679;  // std dev = 1.67e-08, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   | | else return 0.25498274970624607;  // std dev = 1.49e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.08518475138839678;  // std dev = 7.60e-08, 199.000 (wgt'ed) examples reached here.  /* #neg=199 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07877675473109177;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.21020567696278886;  // std dev = 0.010, 114.000 (wgt'ed) examples reached here.  /* #pos=114 */
%   | | else if ( actor(B) )
%   | | | then return -0.07877675473109179;  // std dev = 7.45e-09, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | | | else return 0.2096238515452699;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.07877675473109147;  // std dev = 7.74e-08, 187.000 (wgt'ed) examples reached here.  /* #neg=187 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.1763598022605128;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return 0.16905301083849464;  // std dev = 0.075, 70.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=69 */
%   | else if ( genre(A, E) )
%   | | then return -0.07324622576333704;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( actor(B) )
%   | | | then return -0.07324622576333704;  // std dev = 0.000, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
%   | | | else return 0.17699830856834342;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.07324622576333664;  // std dev = 1.23e-07, 205.000 (wgt'ed) examples reached here.  /* #neg=205 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.15364009670098197;  // std dev = 0.013, 122.000 (wgt'ed) examples reached here.  /* #pos=122 */
%   | else return -0.06842697784420268;  // std dev = 1.67e-08, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   else return -0.06842697784420262;  // std dev = 7.45e-08, 176.000 (wgt'ed) examples reached here.  /* #neg=176 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13476758208597978;  // std dev = 0.012, 114.000 (wgt'ed) examples reached here.  /* #pos=114 */
%   | else if ( genre(A, E) )
%   | | then return -0.0641918400820262;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( actor(B) )
%   | | | then return -0.06419184008202625;  // std dev = 0.000, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   | | | else return 0.13383630285691483;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.06419184008202626;  // std dev = 0.000, 169.000 (wgt'ed) examples reached here.  /* #neg=169 */


Results
   AUC ROC   = 0.991725
   AUC PR    = 0.81335
   CLL	      = -0.104648
   Precision = 0.626761 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.770563


Total learning time: 2.86 seconds
Total inference time: 1.845 seconds
AUC ROC: 0.991725


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.06464
   Precision = 0.931298 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.964427


Total scoring time: 2.173 seconds
Refined model CLL: -0.06464


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.991725
   AUC PR    = 0.81335
   CLL	      = -0.104648
   Precision = 0.626761 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.770563


Total learning time: 9.937999999999999 seconds
Total inference time: 1.845 seconds
AUC ROC: 0.991725
Total revision time: 9.937999999999999
Best scored revision CLL: -0.06464


Dataset: 4_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 00:03:11
{'AUC ROC': 0.991725, 'AUC PR': 0.81335, 'CLL': -0.104648, 'Precision': [0.626761, 0.5], 'Recall': 1.0, 'F1': 0.770563, 'Learning time': 9.937999999999999, 'Inference time': 1.845, 'parameter_0.6': {'AUC ROC': 0.97199, 'AUC PR': 0.81824, 'CLL': -0.111234, 'Precision': [1.0, 0.5], 'Recall': 0.724719, 'F1': 0.840391, 'Learning time': 2.149, 'Inference time': 1.707}}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995098;  // std dev = 9.46e-07, 153.000 (wgt'ed) examples reached here.  /* #pos=153 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.04839312097525403;  // std dev = 3.011, 107.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048818;  // std dev = 0.000, 257.000 (wgt'ed) examples reached here.  /* #neg=257 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109563;  // std dev = 0.000, 153.000 (wgt'ed) examples reached here.  /* #pos=153 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.007856545218853244;  // std dev = 2.953, 78.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839177;  // std dev = 0.000, 223.000 (wgt'ed) examples reached here.  /* #neg=223 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13151669825345083;  // std dev = 0.105, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( movie(E, A) )
%   | | then return 0.3256066457477535;  // std dev = 0.344, 251.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=163 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360685;  // std dev = 0.000, 249.000 (wgt'ed) examples reached here.  /* #neg=249 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4742156446609004;  // std dev = 0.000, 153.000 (wgt'ed) examples reached here.  /* #pos=153 */
%   | else if ( genre(A, E) )
%   | | then return -0.09985718654392796;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.06800951381070286;  // std dev = 2.983, 91.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783656;  // std dev = 0.000, 231.000 (wgt'ed) examples reached here.  /* #neg=231 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09123320509562056;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.3595207942059362;  // std dev = 1.33e-07, 153.000 (wgt'ed) examples reached here.  /* #pos=153 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.07201617989749194;  // std dev = 3.006, 104.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926046;  // std dev = 1.15e-07, 261.000 (wgt'ed) examples reached here.  /* #neg=261 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2815137185403432;  // std dev = 0.000, 153.000 (wgt'ed) examples reached here.  /* #pos=153 */
%   | else if ( movie(E, A) )
%   | | then return -0.0033444401674281835;  // std dev = 0.360, 65.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 8.94e-08, 244.000 (wgt'ed) examples reached here.  /* #neg=244 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12923051320136256;  // std dev = 0.320, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( genre(B, E) )
%   | | then return 0.22820420257716487;  // std dev = 1.81e-07, 153.000 (wgt'ed) examples reached here.  /* #pos=153 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.06698076345691364;  // std dev = 3.015, 110.000 (wgt'ed) examples reached here.  /* #neg=100 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109144;  // std dev = 6.99e-08, 222.000 (wgt'ed) examples reached here.  /* #neg=222 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18728806276122661;  // std dev = 0.495, 154.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=153 */
%   | else if ( genre(A, E) )
%   | | then return -0.07429735269656862;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.04165985078202728;  // std dev = 2.987, 93.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333667;  // std dev = 8.38e-09, 229.000 (wgt'ed) examples reached here.  /* #neg=229 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.06934625806923242;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( movie(E, B) )
%   | | then return 0.08498491953463118;  // std dev = 3.375, 249.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=163 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420261;  // std dev = 3.95e-09, 231.000 (wgt'ed) examples reached here.  /* #neg=231 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14576479673240264;  // std dev = 0.680, 155.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=153 */
%   | else if ( genre(A, E) )
%   | | then return -0.06500230352817439;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.05861612594547461;  // std dev = 3.006, 104.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202626;  // std dev = 9.31e-10, 235.000 (wgt'ed) examples reached here.  /* #neg=235 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.97199
   AUC PR    = 0.81824
   CLL	      = -0.111419
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total learning time: 2.357 seconds
Total inference time: 2.107 seconds
AUC ROC: 0.97199


Results scoring model
   AUC ROC   = 0.99205
   AUC PR    = 0.950779
   CLL	      = -0.090848
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.93865
   F1        = 0.968354


Total scoring time: 2.804 seconds
Parameter learned model CLL: -0.090848


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 5, 0], 'true,false,true': [9.46e-07, 0, 153], 'true,false,false,true': [3.011, 97, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 257, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 153], 'true,false,true': [0.0, 5, 0], 'true,false,false,true': [2.953, 68, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 223, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.105, 6, 0], 'true,false,true': [0.344, 88, 163], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 249, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 153], 'true,false,true': [0.0, 5, 0], 'true,false,false,true': [2.983, 81, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 231, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [2.63e-09, 3, 0], 'true,false,true': [1.33e-07, 0, 153], 'true,false,false,true': [3.006, 94, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.15e-07, 261, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 153], 'true,false,true': [0.36, 55, 10], 'true,false,false': [0.0, 0, 0], 'false,true': [8.94e-08, 244, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.32, 11, 0], 'true,false,true': [1.81e-07, 0, 153], 'true,false,false,true': [3.015, 100, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [6.99e-08, 222, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.495, 1, 153], 'true,false,true': [0.0, 6, 0], 'true,false,false,true': [2.987, 83, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.38e-09, 229, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 4, 0], 'true,false,true': [3.375, 86, 163], 'true,false,false': [0.0, 0, 0], 'false,true': [3.95e-09, 231, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.68, 2, 153], 'true,false,true': [0.0, 4, 0], 'true,false,false,true': [3.006, 94, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.31e-10, 235, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.2367532929868331, -1.0022246759262114e-16], 'true': [-2.7755575615628915e-18, 0.2338905325443838], 'true,false': [5.851528412142001e-15, 0.08472355664250122], 'true,false,false': [0.08472355664250122, nan], 'false': [-1.0022246759262114e-16, nan]}, {'': [0.16019361196904494, -4.978578585763034e-17], 'true': [-2.507797890918001e-15, 0.10581829842765712], 'true,false': [0.0, 0.11176857330703474], 'true,false,false': [0.11176857330703474, nan], 'false': [-4.978578585763034e-17, nan]}, {'': [0.12023990833791937, -9.095803093314535e-17], 'true': [0.0018432614520023163, 0.11819162259438809], 'true,false': [0.11819162259438809, nan], 'false': [-9.095803093314535e-17, nan]}, {'': [0.10584383020148985, -7.882102858810636e-17], 'true': [-3.2508491178566673e-16, 0.09276985560906288], 'true,false': [0.0, 0.0978142736384496], 'true,false,false': [0.0978142736384496, nan], 'false': [-7.882102858810636e-17, nan]}, {'': [0.07997889485233137, 5.104473676437501e-17], 'true': [2.3129646346357427e-18, 0.08003275522107003], 'true,false': [1.161017542091667e-16, 0.08690828402366843], 'true,false,false': [0.08690828402366843, nan], 'false': [5.104473676437501e-17, nan]}, {'': [0.05571484225843196, 3.276067941516855e-17], 'true': [-4.876273676785002e-16, 0.12990920162653172], 'true,false': [0.12990920162653172, nan], 'false': [3.276067941516855e-17, nan]}, {'': [0.05601277625773836, 2.2004420307885986e-17], 'true': [0.00933309953091695, 0.055767425782257136], 'true,false': [2.147882452869584e-16, 0.08264462809917354], 'true,false,false': [0.08264462809917354, nan], 'false': [2.2004420307885986e-17, nan]}, {'': [0.048969295959605266, 7.078277798920212e-17], 'true': [0.0015907660454262734, 0.09020944519346966], 'true,false': [0.0, 0.09596485142791074], 'true,false,false': [0.09596485142791074, nan], 'false': [7.078277798920212e-17, nan]}, {'': [0.04539619309634637, 1.6340944951192782e-17], 'true': [0.0, 0.045748878263615136], 'true,false': [0.045748878263615136, nan], 'false': [1.6340944951192782e-17, nan]}, {'': [0.046256166265087814, 9.448706592554524e-19], 'true': [0.002979534500995897, 0.08369091323660101], 'true,false': [0.0, 0.08690828402366821], 'true,false,false': [0.08690828402366821, nan], 'false': [9.448706592554524e-19, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995098;  // std dev = 9.46e-07, 153.000 (wgt'ed) examples reached here.  /* #pos=153 */
%   | | else if ( actor(B) )
%   | | | then return -0.14185106490048763;  // std dev = 8.16e-08, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.14185106490048827;  // std dev = 0.000, 248.000 (wgt'ed) examples reached here.  /* #neg=248 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109547;  // std dev = 0.000, 61.000 (wgt'ed) examples reached here.  /* #pos=61 */
%   | | else return 0.7103882718804235;  // std dev = 0.087, 93.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=92 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( actor(B) )
%   | | | then return -0.1254446385283915;  // std dev = 0.000, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
%   | | | else return 0.7194734122109544;  // std dev = 2.98e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.1254446385283919;  // std dev = 0.000, 269.000 (wgt'ed) examples reached here.  /* #neg=269 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( actor(B) )
%   | | then return -0.11231637819360621;  // std dev = 7.45e-08, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
%   | | else return 0.5566320247484803;  // std dev = 0.014, 163.000 (wgt'ed) examples reached here.  /* #pos=163 */
%   else return -0.11231637819360675;  // std dev = 0.000, 227.000 (wgt'ed) examples reached here.  /* #neg=227 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.418535113280265;  // std dev = 0.013, 153.000 (wgt'ed) examples reached here.  /* #pos=153 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( actor(B) )
%   | | | then return -0.10159632948783619;  // std dev = 5.58e-08, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
%   | | | else return 0.41720583039833103;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.10159632948783653;  // std dev = 0.000, 202.000 (wgt'ed) examples reached here.  /* #neg=202 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12455782805600006;  // std dev = 0.175, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.3214048876406568;  // std dev = 0.012, 153.000 (wgt'ed) examples reached here.  /* #pos=153 */
%   | | else if ( actor(B) )
%   | | | then return -0.09269127618926107;  // std dev = 0.000, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
%   | | | else return 0.3205032132993281;  // std dev = 2.11e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.09269127618926046;  // std dev = 1.03e-07, 252.000 (wgt'ed) examples reached here.  /* #neg=252 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2556453294984314;  // std dev = 0.010, 153.000 (wgt'ed) examples reached here.  /* #pos=153 */
%   | else if ( actor(B) )
%   | | then return -0.08493968099470828;  // std dev = 0.006, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
%   | | else return 0.2550298761378322;  // std dev = 1.49e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.08518475138839678;  // std dev = 8.69e-08, 234.000 (wgt'ed) examples reached here.  /* #neg=234 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07651230341082936;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( genre(B, E) )
%   | | then return 0.21009199125516906;  // std dev = 0.009, 153.000 (wgt'ed) examples reached here.  /* #pos=153 */
%   | | else if ( actor(B) )
%   | | | then return -0.07879454156518788;  // std dev = 1.83e-08, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | | | else return 0.20965714490769116;  // std dev = 7.45e-09, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.07877675473109144;  // std dev = 7.15e-08, 218.000 (wgt'ed) examples reached here.  /* #neg=218 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.1765452047195169;  // std dev = 7.88e-08, 61.000 (wgt'ed) examples reached here.  /* #pos=61 */
%   | | else return 0.16780634796148888;  // std dev = 0.068, 94.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=92 */
%   | else if ( genre(A, E) )
%   | | then return -0.07127823166160081;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( actor(B) )
%   | | | then return -0.07326165554431024;  // std dev = 1.97e-08, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | | | else return 0.1770227303811863;  // std dev = 7.45e-09, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.07324622576333674;  // std dev = 1.23e-07, 240.000 (wgt'ed) examples reached here.  /* #neg=240 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.06670157400024718;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( actor(B) )
%   | | then return -0.06844048364017838;  // std dev = 0.000, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
%   | | else return 0.15365480896680225;  // std dev = 0.014, 163.000 (wgt'ed) examples reached here.  /* #pos=163 */
%   else return -0.06842697784420261;  // std dev = 6.32e-08, 226.000 (wgt'ed) examples reached here.  /* #neg=226 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13477461056614154;  // std dev = 0.013, 153.000 (wgt'ed) examples reached here.  /* #pos=153 */
%   | else if ( genre(A, E) )
%   | | then return -0.062667328128241;  // std dev = 1.86e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.13385120080537294;  // std dev = 5.27e-09, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.07331676797592401;  // std dev = 0.797, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
%   else return -0.06419184008202626;  // std dev = 1.83e-08, 238.000 (wgt'ed) examples reached here.  /* #neg=238 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.095718
   Precision = 0.784141 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.879012


Total learning time: 3.495 seconds
Total inference time: 1.9 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064122
   Precision = 0.993902 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.996942


Total scoring time: 3.036 seconds
Refined model CLL: -0.064122


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.095718
   Precision = 0.784141 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.879012


Total learning time: 11.691999999999998 seconds
Total inference time: 1.9 seconds
AUC ROC: 1.0
Total revision time: 11.691999999999998
Best scored revision CLL: -0.064122


Dataset: 4_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 00:03:27
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.095718, 'Precision': [0.784141, 0.5], 'Recall': 1.0, 'F1': 0.879012, 'Learning time': 11.691999999999998, 'Inference time': 1.9, 'parameter_0.8': {'AUC ROC': 0.97199, 'AUC PR': 0.81824, 'CLL': -0.111419, 'Precision': [1.0, 0.5], 'Recall': 0.724719, 'F1': 0.840391, 'Learning time': 2.357, 'Inference time': 2.107}}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995093;  // std dev = 1.09e-06, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.06433168505552643;  // std dev = 3.037, 129.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048785;  // std dev = 8.94e-08, 298.000 (wgt'ed) examples reached here.  /* #neg=298 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.719473412210957;  // std dev = 0.000, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 7.45e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.03518905625303589;  // std dev = 3.002, 101.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.125444638528392;  // std dev = 0.000, 298.000 (wgt'ed) examples reached here.  /* #neg=298 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12054508679068254;  // std dev = 0.111, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( movie(E, A) )
%   | | then return 0.33259668339644705;  // std dev = 0.337, 309.000 (wgt'ed) examples reached here.  /* #neg=105 #pos=204 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360671;  // std dev = 0.000, 314.000 (wgt'ed) examples reached here.  /* #neg=314 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.47247310361589223;  // std dev = 0.000, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else if ( genre(A, E) )
%   | | then return -0.1008477165366084;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.08256524372164815;  // std dev = 3.016, 111.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783662;  // std dev = 0.000, 288.000 (wgt'ed) examples reached here.  /* #neg=288 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09206411680710881;  // std dev = 5.27e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( genre(B, E) )
%   | | then return 0.35831336913123674;  // std dev = 0.000, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.07853335576647427;  // std dev = 3.029, 121.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926047;  // std dev = 1.50e-07, 276.000 (wgt'ed) examples reached here.  /* #neg=276 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2806972803242595;  // std dev = 0.000, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else if ( movie(E, A) )
%   | | then return -0.062157501397658785;  // std dev = 0.281, 115.000 (wgt'ed) examples reached here.  /* #neg=105 #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 9.77e-08, 275.000 (wgt'ed) examples reached here.  /* #neg=275 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07995856640608988;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( genre(B, E) )
%   | | then return 0.22763693108670438;  // std dev = 0.000, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.05830487419396667;  // std dev = 3.025, 118.000 (wgt'ed) examples reached here.  /* #neg=108 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109143;  // std dev = 4.21e-08, 286.000 (wgt'ed) examples reached here.  /* #neg=286 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.19010320533926964;  // std dev = 0.000, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else if ( genre(A, E) )
%   | | then return -0.07427046906893205;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.032958086124285864;  // std dev = 2.995, 97.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333692;  // std dev = 6.18e-09, 283.000 (wgt'ed) examples reached here.  /* #neg=283 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.06932276621566137;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( movie(E, B) )
%   | | then return 0.08661794356984574;  // std dev = 3.486, 307.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=204 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420274;  // std dev = 0.000, 252.000 (wgt'ed) examples reached here.  /* #neg=252 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15109213224945162;  // std dev = 0.000, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else if ( genre(A, E) )
%   | | then return -0.06498160781902;  // std dev = 4.56e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.05773639839425809;  // std dev = 3.025, 118.000 (wgt'ed) examples reached here.  /* #neg=108 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202583;  // std dev = 7.90e-09, 329.000 (wgt'ed) examples reached here.  /* #neg=329 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.97199
   AUC PR    = 0.81824
   CLL	      = -0.110601
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total learning time: 2.382 seconds
Total inference time: 1.885 seconds
AUC ROC: 0.97199


Results scoring model
   AUC ROC   = 0.993632
   AUC PR    = 0.960741
   CLL	      = -0.087104
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.95098
   F1        = 0.974874


Total scoring time: 2.868 seconds
Parameter learned model CLL: -0.087104


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 11, 0], 'true,false,true': [1.09e-06, 0, 194], 'true,false,false,true': [3.037, 119, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.94e-08, 298, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 194], 'true,false,true': [7.45e-09, 13, 0], 'true,false,false,true': [3.002, 91, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 298, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.111, 14, 0], 'true,false,true': [0.337, 105, 204], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 314, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 194], 'true,false,true': [0.0, 5, 0], 'true,false,false,true': [3.016, 101, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 288, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [5.27e-09, 9, 0], 'true,false,true': [0.0, 0, 194], 'true,false,false,true': [3.029, 111, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.5e-07, 276, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 194], 'true,false,true': [0.281, 105, 10], 'true,false,false': [0.0, 0, 0], 'false,true': [9.77e-08, 275, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 9, 0], 'true,false,true': [0.0, 0, 194], 'true,false,false,true': [3.025, 108, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.21e-08, 286, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 194], 'true,false,true': [0.0, 7, 0], 'true,false,false,true': [2.995, 87, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [6.18e-09, 283, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 5, 0], 'true,false,true': [3.486, 103, 204], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 252, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 194], 'true,false,true': [4.56e-09, 11, 0], 'true,false,false,true': [3.025, 108, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.9e-09, 329, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.23772813654129304, 2.682418046074204e-17], 'true': [-1.0092936587501423e-17, 0.23268698060942278], 'true,false': [6.15315358802561e-15, 0.0715101255934135], 'true,false,false': [0.0715101255934135, nan], 'false': [2.682418046074204e-17, nan]}, {'': [0.16597711077398275, -8.345300587786412e-17], 'true': [-3.516087764586063e-15, 0.07985722552742577], 'true,false': [4.270088556250602e-18, 0.08920694049603001], 'true,false,false': [0.08920694049603001, nan], 'false': [-8.345300587786412e-17, nan]}, {'': [0.11690896100016733, -5.657187386625001e-17], 'true': [0.000880251387282756, 0.11326584935557908], 'true,false': [0.11326584935557908, nan], 'false': [-5.657187386625001e-17, nan]}, {'': [0.10170311214206124, -5.551115123125783e-17], 'true': [-4.028850563588197e-16, 0.07845429574808906], 'true,false': [0.0, 0.0819738657576498], 'true,false,false': [0.0819738657576498, nan], 'false': [-5.551115123125783e-17, nan]}, {'': [0.07436224883863865, 8.205996268968548e-17], 'true': [3.0839528461809902e-18, 0.07426890042494962], 'true,false': [-1.3002199546125544e-15, 0.07581449354552293], 'true,false,false': [0.07581449354552293, nan], 'false': [8.205996268968548e-17, nan]}, {'': [0.0569444803186467, 3.47197018610049e-17], 'true': [-7.966136341640299e-16, 0.07920610049797529], 'true,false': [0.07920610049797529, nan], 'false': [3.47197018610049e-17, nan]}, {'': [0.048285380793095876, 6.211037900000876e-18], 'true': [0.0, 0.048562883333078344], 'true,false': [-1.2819069975053353e-16, 0.07756391841424864], 'true,false,false': [0.07756391841424864, nan], 'false': [6.211037900000876e-18, nan]}, {'': [0.041723035626943426, 3.923049556979352e-17], 'true': [-1.0072126408970492e-16, 0.08634822145628362], 'true,false': [0.0, 0.09246466149431443], 'true,false,false': [0.09246466149431443, nan], 'false': [3.923049556979352e-17, nan]}, {'': [0.039335968801811415, -8.8112938462314e-18], 'true': [0.0, 0.03958691615423269], 'true,false': [0.03958691615423269, nan], 'false': [-8.8112938462314e-18, nan]}, {'': [0.03886049494968834, 6.20915004653583e-17], 'true': [-1.78551331795386e-16, 0.07095403534000785], 'true,false': [1.8924256101565167e-18, 0.07756391841424905], 'true,false,false': [0.07756391841424905, nan], 'false': [6.20915004653583e-17, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995093;  // std dev = 1.09e-06, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | | else if ( actor(B) )
%   | | | then return -0.14185106490048763;  // std dev = 8.16e-08, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.14185106490048777;  // std dev = 1.33e-07, 309.000 (wgt'ed) examples reached here.  /* #neg=309 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.719473412210957;  // std dev = 0.000, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( actor(B) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
%   | | | else return 0.7194734122109544;  // std dev = 2.98e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.12544463852839197;  // std dev = 0.000, 289.000 (wgt'ed) examples reached here.  /* #neg=289 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( actor(B) )
%   | | then return -0.1123163781936062;  // std dev = 8.30e-08, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
%   | | else return 0.5553664367462833;  // std dev = 6.36e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.11231637819360658;  // std dev = 0.000, 336.000 (wgt'ed) examples reached here.  /* #neg=336 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4175135841583099;  // std dev = 3.04e-07, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783627;  // std dev = 5.27e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( actor(B) )
%   | | | then return -0.10159632948783635;  // std dev = 0.000, 117.000 (wgt'ed) examples reached here.  /* #neg=117 */
%   | | | else return 0.4175135841583103;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.10159632948783663;  // std dev = 0.000, 295.000 (wgt'ed) examples reached here.  /* #neg=295 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926097;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( genre(B, E) )
%   | | then return 0.320711847160149;  // std dev = 3.95e-07, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | | else if ( actor(B) )
%   | | | then return -0.09269127618926094;  // std dev = 5.16e-08, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
%   | | | else return 0.3207118471601498;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.09269127618926046;  // std dev = 1.53e-07, 278.000 (wgt'ed) examples reached here.  /* #neg=278 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2524944107842949;  // std dev = 0.521, 195.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=194 */
%   | else if ( actor(B) )
%   | | then return -0.08518475138839682;  // std dev = 5.77e-08, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
%   | | else return 0.2551722425694896;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.08518475138839678;  // std dev = 1.01e-07, 278.000 (wgt'ed) examples reached here.  /* #neg=278 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.21020193645824017;  // std dev = 0.000, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.2097577156325357;  // std dev = 1.97e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.08501768042965624;  // std dev = 0.708, 114.000 (wgt'ed) examples reached here.  /* #neg=114 */
%   else return -0.07877675473109143;  // std dev = 3.65e-08, 304.000 (wgt'ed) examples reached here.  /* #neg=304 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17742224411051918;  // std dev = 0.000, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else if ( genre(A, E) )
%   | | then return -0.07324622576333704;  // std dev = 2.63e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( actor(B) )
%   | | | then return -0.07282371080863113;  // std dev = 0.000, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
%   | | | else return 0.17709649774527736;  // std dev = 7.45e-09, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.07324622576333695;  // std dev = 1.01e-07, 291.000 (wgt'ed) examples reached here.  /* #neg=291 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.06842697784420272;  // std dev = 1.86e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( actor(B) )
%   | | then return -0.06805701488866832;  // std dev = 0.000, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
%   | | else return 0.15297881341431585;  // std dev = 0.000762, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.068426977844203;  // std dev = 0.000, 297.000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.13420128859439795;  // std dev = 0.000, 75.000 (wgt'ed) examples reached here.  /* #pos=75 */
%   | | else return 0.12659765541993406;  // std dev = 0.059, 121.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=119 */
%   | else if ( genre(A, E) )
%   | | then return -0.0641918400820262;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( actor(B) )
%   | | | then return -0.06386532114486314;  // std dev = 0.000, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
%   | | | else return 0.1339797659883346;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.06419184008202602;  // std dev = 9.88e-08, 285.000 (wgt'ed) examples reached here.  /* #neg=285 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094994
   Precision = 0.784141 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.879012


Total learning time: 3.607 seconds
Total inference time: 1.74 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064103
   Precision = 0.995122 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.997555


Total scoring time: 2.918 seconds
Refined model CLL: -0.064103


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094994
   Precision = 0.784141 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.879012


Total learning time: 11.774999999999999 seconds
Total inference time: 1.74 seconds
AUC ROC: 1.0
Total revision time: 11.774999999999999
Best scored revision CLL: -0.064103


Dataset: 4_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 00:03:43
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.094994, 'Precision': [0.784141, 0.5], 'Recall': 1.0, 'F1': 0.879012, 'Learning time': 11.774999999999999, 'Inference time': 1.74, 'parameter_1.0': {'AUC ROC': 0.97199, 'AUC PR': 0.81824, 'CLL': -0.110601, 'Precision': [1.0, 0.5], 'Recall': 0.724719, 'F1': 0.840391, 'Learning time': 2.382, 'Inference time': 1.885}}


Starting fold 4

Target train facts examples: 927
Target train pos examples: 337
Target train neg examples: 12345

Target test facts examples: 151
Target test pos	 examples: 45
Target test neg examples: 1891

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995125;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.07766113022146359;  // std dev = 2.650, 41.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048763;  // std dev = 8.16e-08, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109544;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.028429852303968363;  // std dev = 2.717, 50.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( movie(E, A) )
%   | | then return 0.36243316988705354;  // std dev = 0.356, 97.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360622;  // std dev = 6.83e-08, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.46504324335622366;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( genre(A, E) )
%   | | then return -0.1015963294878363;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.021853883266099453;  // std dev = 2.631, 39.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783633;  // std dev = 0.000, 111.000 (wgt'ed) examples reached here.  /* #neg=111 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.35317804592671503;  // std dev = 1.69e-07, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.025050110046496554;  // std dev = 2.704, 48.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0926912761892609;  // std dev = 6.14e-08, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.27722333954328354;  // std dev = 7.30e-08, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( movie(E, A) )
%   | | then return 0.03493886625313541;  // std dev = 0.422, 38.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=9 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839682;  // std dev = 5.77e-08, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08794723430550166;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.22522022157398833;  // std dev = 2.98e-08, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.06704007898110742;  // std dev = 2.543, 32.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.0787767547310916;  // std dev = 5.58e-08, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18835717159329946;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( genre(A, E) )
%   | | then return -0.08114370240280552;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.024289587232586562;  // std dev = 2.598, 36.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333707;  // std dev = 0.000, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.0752956460197002;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, B) )
%   | | then return 0.093389861982188;  // std dev = 2.762, 98.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420264;  // std dev = 5.02e-09, 113.000 (wgt'ed) examples reached here.  /* #neg=113 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13267518598878203;  // std dev = 0.681, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( genre(A, E) )
%   | | then return -0.07021787320355657;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.04693736566167157;  // std dev = 2.683, 45.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 110.000 (wgt'ed) examples reached here.  /* #neg=110 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.119594
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.586 seconds
Total inference time: 1.403 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.984249
   AUC PR    = 0.899394
   CLL	      = -0.117019
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.865672
   F1        = 0.928


Total scoring time: 1.594 seconds
Parameter learned model CLL: -0.117019


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [0.0, 0, 58], 'true,false,false,true': [2.65, 32, 9], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.16e-08, 109, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 58], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [2.717, 41, 9], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 97, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 7, 0], 'true,false,true': [0.356, 30, 67], 'true,false,false': [0.0, 0, 0], 'false,true': [6.83e-08, 84, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 58], 'true,false,true': [0.0, 3, 0], 'true,false,false,true': [2.631, 30, 9], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 111, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [1.69e-07, 0, 58], 'true,false,false,true': [2.704, 39, 9], 'true,false,false,false': [0.0, 0, 0], 'false,true': [6.14e-08, 108, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [7.3e-08, 0, 58], 'true,false,true': [0.422, 29, 9], 'true,false,false': [0.0, 0, 0], 'false,true': [5.77e-08, 105, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [2.98e-08, 0, 58], 'true,false,false,true': [2.543, 23, 9], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.58e-08, 97, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 58], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [2.598, 27, 9], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 99, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [2.762, 31, 67], 'true,false,false': [0.0, 0, 0], 'false,true': [5.02e-09, 113, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.681, 2, 58], 'true,false,true': [0.0, 3, 0], 'true,false,false,true': [2.683, 36, 9], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 110, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.2233114400548958, 6.111319401606367e-17], 'true': [0.0, 0.21875318845015737], 'true,false': [-3.675221047035001e-16, 0.1713265913146938], 'true,false,false': [0.1713265913146938, nan], 'false': [6.111319401606367e-17, nan]}, {'': [0.18858248398650657, -1.1445598192011922e-17], 'true': [-1.2250736823450003e-16, 0.14279871889530035], 'true,false': [0.0, 0.14760000000000015], 'true,false,false': [0.14760000000000015, nan], 'false': [-1.1445598192011922e-17, nan]}, {'': [0.13234890971551522, 5.551115123125783e-17], 'true': [-1.982541115402065e-18, 0.12672957413783895], 'true,false': [0.12672957413783895, nan], 'false': [5.551115123125783e-17, nan]}, {'': [0.11942535793305455, -8.001607384685813e-18], 'true': [-5.819099991138751e-16, 0.16584597817892463], 'true,false': [-1.1564823173178713e-18, 0.1775147928994084], 'true,false,false': [0.1775147928994084, nan], 'false': [-8.001607384685813e-18, nan]}, {'': [0.10386825871194688, 3.4951465590051226e-17], 'true': [0.0, 0.10443168402554105], 'true,false': [4.900294729380001e-16, 0.1523437500000002], 'true,false,false': [0.1523437500000002, nan], 'false': [3.4951465590051226e-17, nan]}, {'': [0.08466830600233931, 3.172065784643304e-17], 'true': [9.188052617587502e-17, 0.17843322803155112], 'true,false': [0.17843322803155112, nan], 'false': [3.172065784643304e-17, nan]}, {'': [0.07747278165768595, 3.204767493763338e-17], 'true': [0.0, 0.0776081971777612], 'true,false': [1.5313421029312504e-17, 0.20214843750000022], 'true,false,false': [0.20214843750000022, nan], 'false': [3.204767493763338e-17, nan]}, {'': [0.07779145793729086, -6.7286243916676156e-18], 'true': [-2.2970131543968756e-17, 0.1827247497649966], 'true,false': [0.0, 0.18750000000000008], 'true,false,false': [0.18750000000000008, nan], 'false': [-6.7286243916676156e-18, nan]}, {'': [0.0773456826518859, 2.5544954548897407e-17], 'true': [0.0, 0.07784750208321665], 'true,false': [0.07784750208321665, nan], 'false': [2.5544954548897407e-17, nan]}, {'': [0.07906945711230706, -1.6653345369377347e-17], 'true': [0.007728297506380906, 0.15003175675965247], 'true,false': [-5.782411586589357e-19, 0.15999999999999964], 'true,false,false': [0.15999999999999964, nan], 'false': [-1.6653345369377347e-17, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995125;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.1418510649004877;  // std dev = 2.58e-08, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   else return -0.14185106490048763;  // std dev = 8.69e-08, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109542;  // std dev = 4.21e-08, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else return 0.6953328964755447;  // std dev = 0.141, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( actor(B) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | | else return 0.7194734122109543;  // std dev = 2.98e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.12544463852839133;  // std dev = 0.000, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.18630775434818148;  // std dev = 0.091, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( director(B), actor(A) )
%   | | then return 0.5583873022463249;  // std dev = 0.024, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | | else return -0.116288858205988;  // std dev = 0.113, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   else return -0.1123163781936062;  // std dev = 8.16e-08, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4202256881909044;  // std dev = 0.022, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( genre(A, E) )
%   | | then return -0.0950390909432496;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( actor(B) )
%   | | | then return -0.10123431671588003;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | | | else return 0.41677910535498774;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.10159632948783624;  // std dev = 4.71e-08, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.3225540861352735;  // std dev = 0.020, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else if ( actor(B) )
%   | | | then return -0.09238808352271492;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | | else return 0.32021394896902594;  // std dev = 1.83e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.09269127618926101;  // std dev = 3.80e-08, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.2537351753066046;  // std dev = 2.98e-08, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else return 0.22917756749912843;  // std dev = 0.120, 36.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=34 */
%   | else if ( actor(B) )
%   | | then return -0.08523936829119144;  // std dev = 0.005, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | else return 0.2548324724385789;  // std dev = 1.83e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.0851847513883968;  // std dev = 6.05e-08, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.0806252519668264;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.21352405818658493;  // std dev = 0.031, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else if ( actor(B) )
%   | | | then return -0.07853312421619649;  // std dev = 5.27e-09, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | | else return 0.20951767789316073;  // std dev = 1.49e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.07877675473109157;  // std dev = 6.50e-08, 113.000 (wgt'ed) examples reached here.  /* #neg=113 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17985688358955365;  // std dev = 0.027, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( genre(A, E) )
%   | | then return -0.0748474106483402;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( actor(B) )
%   | | | then return -0.07303483589095718;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | | else return 0.1769204214352924;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.07324622576333709;  // std dev = 0.000, 111.000 (wgt'ed) examples reached here.  /* #neg=111 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.06982669188965206;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( director(B) )
%   | | then return 0.15453749900499902;  // std dev = 0.025, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | | else return -0.06824191244138675;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.06842697784420265;  // std dev = 5.16e-08, 107.000 (wgt'ed) examples reached here.  /* #neg=107 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1356750006185669;  // std dev = 0.021, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( genre(A, E) )
%   | | then return -0.06542537668607258;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( actor(B) )
%   | | | then return -0.06402853163317522;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | | else return 0.1336793857907944;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.06419184008202626;  // std dev = 0.000, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064654
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.418 seconds
Total inference time: 1.575 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.067811
   Precision = 0.881579 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.937063


Total scoring time: 1.502 seconds
Refined model CLL: -0.067811


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064654
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 7.1000000000000005 seconds
Total inference time: 1.575 seconds
AUC ROC: 1.0
Total revision time: 7.1000000000000005
Best scored revision CLL: -0.067811


Dataset: 4_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 00:03:54
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.064654, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 7.1000000000000005, 'Inference time': 1.575, 'parameter_0.2': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.119594, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 1.586, 'Inference time': 1.403}}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.858148935099511;  // std dev = 5.46e-07, 110.000 (wgt'ed) examples reached here.  /* #pos=110 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.1914822684328448;  // std dev = 4.000, 72.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=24 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048838;  // std dev = 0.000, 198.000 (wgt'ed) examples reached here.  /* #neg=198 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109548;  // std dev = 0.000, 110.000 (wgt'ed) examples reached here.  /* #pos=110 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.11227525867340957;  // std dev = 4.160, 86.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=24 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1254446385283917;  // std dev = 0.000, 205.000 (wgt'ed) examples reached here.  /* #neg=205 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.18911765843298392;  // std dev = 0.133, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( movie(E, A) )
%   | | then return 0.332791991550705;  // std dev = 0.382, 204.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=134 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360651;  // std dev = 0.000, 187.000 (wgt'ed) examples reached here.  /* #neg=187 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.472424424830043;  // std dev = 0.000, 110.000 (wgt'ed) examples reached here.  /* #pos=110 */
%   | else if ( genre(A, E) )
%   | | then return -0.09479769531522507;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.04102888726356064;  // std dev = 4.160, 86.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=24 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1015963294878365;  // std dev = 0.000, 184.000 (wgt'ed) examples reached here.  /* #neg=184 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10853828130933846;  // std dev = 0.183, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( genre(B, E) )
%   | | then return 0.35827965608903084;  // std dev = 0.000, 110.000 (wgt'ed) examples reached here.  /* #pos=110 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.007938616659691153;  // std dev = 4.278, 101.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=24 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926053;  // std dev = 1.01e-07, 227.000 (wgt'ed) examples reached here.  /* #neg=227 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2806744823692568;  // std dev = 0.000, 110.000 (wgt'ed) examples reached here.  /* #pos=110 */
%   | else if ( movie(E, A) )
%   | | then return 0.042666583263568855;  // std dev = 0.445, 86.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=24 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 7.30e-08, 192.000 (wgt'ed) examples reached here.  /* #neg=192 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1406951111974867;  // std dev = 0.204, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.22762108701149344;  // std dev = 1.79e-07, 110.000 (wgt'ed) examples reached here.  /* #pos=110 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.01761008922446979;  // std dev = 4.187, 89.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=24 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109146;  // std dev = 6.99e-08, 216.000 (wgt'ed) examples reached here.  /* #neg=216 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1857892757211448;  // std dev = 0.475, 111.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=110 */
%   | else if ( genre(A, E) )
%   | | then return -0.07190569594413149;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.11384357139905668;  // std dev = 3.891, 65.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=24 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333661;  // std dev = 8.84e-09, 219.000 (wgt'ed) examples reached here.  /* #neg=219 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.06725229782117391;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( movie(E, B) )
%   | | then return 0.09217728409609326;  // std dev = 4.309, 196.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=134 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420262;  // std dev = 5.82e-09, 211.000 (wgt'ed) examples reached here.  /* #neg=211 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14264997094344717;  // std dev = 0.649, 112.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=110 */
%   | else if ( genre(A, E) )
%   | | then return -0.06315440624276442;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.014138293073535212;  // std dev = 4.150, 85.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=24 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 212.000 (wgt'ed) examples reached here.  /* #neg=212 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.138888
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.062 seconds
Total inference time: 1.678 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.978872
   AUC PR    = 0.862975
   CLL	      = -0.13421
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.820896
   F1        = 0.901639


Total scoring time: 2.067 seconds
Parameter learned model CLL: -0.13421


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 5, 0], 'true,false,true': [5.46e-07, 0, 110], 'true,false,false,true': [4.0, 48, 24], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 198, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 110], 'true,false,true': [0.0, 7, 0], 'true,false,false,true': [4.16, 62, 24], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 205, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.133, 6, 0], 'true,false,true': [0.382, 70, 134], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 187, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 110], 'true,false,true': [0.0, 6, 0], 'true,false,false,true': [4.16, 62, 24], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 184, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.183, 9, 0], 'true,false,true': [0.0, 0, 110], 'true,false,false,true': [4.278, 77, 24], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.01e-07, 227, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 110], 'true,false,true': [0.445, 62, 24], 'true,false,false': [0.0, 0, 0], 'false,true': [7.3e-08, 192, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.204, 4, 0], 'true,false,true': [1.79e-07, 0, 110], 'true,false,false,true': [4.187, 65, 24], 'true,false,false,false': [0.0, 0, 0], 'false,true': [6.99e-08, 216, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.475, 1, 110], 'true,false,true': [0.0, 9, 0], 'true,false,false,true': [3.891, 41, 24], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.84e-09, 219, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 7, 0], 'true,false,true': [4.309, 62, 134], 'true,false,false': [0.0, 0, 0], 'false,true': [5.82e-09, 211, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.649, 2, 110], 'true,false,true': [0.0, 6, 0], 'true,false,false,true': [4.15, 61, 24], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 212, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.20309416912122624, -2.377447285055891e-16], 'true': [-2.7755575615628915e-18, 0.19417944692670439], 'true,false': [2.7129813547203826e-15, 0.22222222222222332], 'true,false,false': [0.22222222222222332, nan], 'false': [-2.377447285055891e-16, nan]}, {'': [0.18403474417466414, -3.6826910085127146e-17], 'true': [-7.105427357601002e-16, 0.1899798531950755], 'true,false': [-1.982541115402065e-18, 0.20118983234180732], 'true,false,false': [0.20118983234180732, nan], 'false': [-3.6826910085127146e-17, nan]}, {'': [0.14906613699230717, -2.6122894697062506e-17], 'true': [0.002949218323203708, 0.1455811310595772], 'true,false': [0.1455811310595772, nan], 'false': [-2.6122894697062506e-17, nan]}, {'': [0.13423841669089914, -8.930054763289303e-17], 'true': [-1.0012193094801411e-15, 0.18919347418767096], 'true,false': [-2.3129646346357427e-18, 0.20118983234180615], 'true,false,false': [0.20118983234180615, nan], 'false': [-8.930054763289303e-17, nan]}, {'': [0.11875374787035844, 4.499582302445568e-17], 'true': [0.0037216781545792027, 0.12018373495956615], 'true,false': [-8.881784197001252e-16, 0.18115870993039948], 'true,false,false': [0.18115870993039948, nan], 'false': [4.499582302445568e-17, nan]}, {'': [0.1008752744034382, 2.7755575615628914e-17], 'true': [-1.9378438248002731e-16, 0.1981096779505961], 'true,false': [0.1981096779505961, nan], 'false': [2.7755575615628914e-17, nan]}, {'': [0.0986926127265954, 2.2615654205327262e-17], 'true': [0.010377901684183524, 0.09898422033598327], 'true,false': [2.90676573720041e-16, 0.1969448301982074], 'true,false,false': [0.1969448301982074, nan], 'false': [2.2615654205327262e-17, nan]}, {'': [0.08667057952682784, 7.807047753071877e-17], 'true': [0.0020362603067134444, 0.2082597308587463], 'true,false': [-7.709882115452476e-19, 0.23289940828402364], 'true,false,false': [0.23289940828402364, nan], 'false': [7.807047753071877e-17, nan]}, {'': [0.09229458663586763, 3.3675011173464466e-17], 'true': [-9.912705577010326e-19, 0.09471434630078313], 'true,false': [0.09471434630078313, nan], 'false': [3.3675011173464466e-17, nan]}, {'': [0.09332126591232665, -5.236901059552625e-19], 'true': [0.003764313663798571, 0.1894175210649919], 'true,false': [0.0, 0.20262975778546688], 'true,false,false': [0.20262975778546688, nan], 'false': [-5.236901059552625e-19, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.858148935099511;  // std dev = 5.46e-07, 110.000 (wgt'ed) examples reached here.  /* #pos=110 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.858148935099512;  // std dev = 1.03e-07, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | | else return -0.14185106490048768;  // std dev = 5.37e-08, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   else return -0.1418510649004885;  // std dev = 0.000, 221.000 (wgt'ed) examples reached here.  /* #neg=221 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109551;  // std dev = 0.000, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | else return 0.6946228813068558;  // std dev = 0.143, 68.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=66 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.7194734122109544;  // std dev = 4.21e-08, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | | else return -0.12544463852839155;  // std dev = 0.000, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
%   else return -0.12544463852839163;  // std dev = 0.000, 195.000 (wgt'ed) examples reached here.  /* #neg=195 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5583845618230832;  // std dev = 0.035, 134.000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.11495599591011943;  // std dev = 0.155, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
%   else return -0.11231637819360646;  // std dev = 0.000, 180.000 (wgt'ed) examples reached here.  /* #neg=180 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.42041141170289525;  // std dev = 0.031, 110.000 (wgt'ed) examples reached here.  /* #pos=110 */
%   | else if ( genre(A, E) )
%   | | then return -0.1013556529034012;  // std dev = 3.73e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.4167797714815535;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | | else return -0.10135565290340134;  // std dev = 0.000, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   else return -0.1015963294878365;  // std dev = 0.000, 185.000 (wgt'ed) examples reached here.  /* #neg=185 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11599630668325514;  // std dev = 0.062, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( genre(B, E) )
%   | | then return 0.3226802254735123;  // std dev = 0.028, 110.000 (wgt'ed) examples reached here.  /* #pos=110 */
%   | | else if ( actor(B) )
%   | | | then return -0.09248972322721943;  // std dev = 7.45e-09, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   | | | else return 0.3202144004958216;  // std dev = 5.96e-08, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   else return -0.09269127618926058;  // std dev = 8.94e-08, 191.000 (wgt'ed) examples reached here.  /* #neg=191 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.253676646307092;  // std dev = 4.71e-08, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | else return 0.24322942885535306;  // std dev = 0.087, 68.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=66 */
%   | else if ( director(B), actor(A) )
%   | | then return 0.2548327805911533;  // std dev = 4.47e-08, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else return -0.08545429259625521;  // std dev = 0.038, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
%   else return -0.08518475138839678;  // std dev = 7.30e-08, 183.000 (wgt'ed) examples reached here.  /* #neg=183 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1344152430464664;  // std dev = 0.100, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( genre(B, E) )
%   | | then return 0.21223419356808287;  // std dev = 0.030, 110.000 (wgt'ed) examples reached here.  /* #pos=110 */
%   | | else if ( actor(B) )
%   | | | then return -0.07859791318431363;  // std dev = 0.000, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | | | else return 0.2095178956201892;  // std dev = 1.49e-08, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   else return -0.07877675473109147;  // std dev = 7.74e-08, 184.000 (wgt'ed) examples reached here.  /* #neg=184 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.175808237029373;  // std dev = 2.98e-08, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | else return 0.17411471766747683;  // std dev = 0.056, 67.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=66 */
%   | else if ( genre(A, E) )
%   | | then return -0.06789562529687666;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.17692058116405718;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | | else return -0.0752618920221283;  // std dev = 0.089, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   else return -0.0732462257633367;  // std dev = 1.06e-07, 182.000 (wgt'ed) examples reached here.  /* #neg=182 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08889383940581516;  // std dev = 0.076, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( actor(B) )
%   | | then return -0.06815314525160167;  // std dev = 2.63e-08, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | | else return 0.15429292945733425;  // std dev = 0.026, 134.000 (wgt'ed) examples reached here.  /* #pos=134 */
%   else return -0.06842697784420262;  // std dev = 8.36e-08, 207.000 (wgt'ed) examples reached here.  /* #neg=207 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.1329514956777257;  // std dev = 0.000, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | else return 0.12451405953045525;  // std dev = 0.073, 68.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=66 */
%   | else if ( genre(A, E) )
%   | | then return -0.058620457432196724;  // std dev = 3.73e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( actor(B) )
%   | | | then return -0.0639501824131613;  // std dev = 2.74e-08, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | | | else return 0.1337078202853359;  // std dev = 1.05e-08, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   else return -0.06419184008202626;  // std dev = 0.000, 203.000 (wgt'ed) examples reached here.  /* #neg=203 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064417
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.242 seconds
Total inference time: 1.438 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.065806
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.368 seconds
Refined model CLL: -0.065806


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064417
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 9.738999999999999 seconds
Total inference time: 1.438 seconds
AUC ROC: 1.0
Total revision time: 9.738999999999999
Best scored revision CLL: -0.065806


Dataset: 4_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 00:04:08
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.064417, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 9.738999999999999, 'Inference time': 1.438, 'parameter_0.4': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.138888, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 2.062, 'Inference time': 1.678}}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995097;  // std dev = 1.02e-06, 163.000 (wgt'ed) examples reached here.  /* #pos=163 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.200254198257406;  // std dev = 5.065, 114.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=39 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004876;  // std dev = 2.04e-07, 339.000 (wgt'ed) examples reached here.  /* #neg=339 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7092319812929038;  // std dev = 1.188, 165.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=163 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.14150666394682748;  // std dev = 5.189, 126.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=39 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839213;  // std dev = 0.000, 323.000 (wgt'ed) examples reached here.  /* #neg=323 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11987684322157022;  // std dev = 0.110, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( movie(E, A) )
%   | | then return 0.37711113071400226;  // std dev = 0.370, 284.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=202 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360658;  // std dev = 0.000, 336.000 (wgt'ed) examples reached here.  /* #neg=336 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.45582573760922984;  // std dev = 0.941, 165.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=163 */
%   | else if ( genre(A, E) )
%   | | then return -0.10090832732703034;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.03137892169300438;  // std dev = 5.282, 137.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=39 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783665;  // std dev = 0.000, 310.000 (wgt'ed) examples reached here.  /* #neg=310 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13446213492821882;  // std dev = 0.303, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( genre(B, E) )
%   | | then return 0.3542709930051444;  // std dev = 1.58e-07, 163.000 (wgt'ed) examples reached here.  /* #pos=163 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.03395979648566095;  // std dev = 5.250, 133.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=39 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926044;  // std dev = 1.76e-07, 306.000 (wgt'ed) examples reached here.  /* #neg=306 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.27796291873447326;  // std dev = 0.000, 163.000 (wgt'ed) examples reached here.  /* #pos=163 */
%   | else if ( movie(E, A) )
%   | | then return 0.012640687996496083;  // std dev = 0.438, 146.000 (wgt'ed) examples reached here.  /* #neg=107 #pos=39 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.05e-07, 295.000 (wgt'ed) examples reached here.  /* #neg=295 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10403074057655769;  // std dev = 0.227, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( genre(B, E) )
%   | | then return 0.22573513123977595;  // std dev = 0.000, 163.000 (wgt'ed) examples reached here.  /* #pos=163 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.014285876242494595;  // std dev = 5.289, 138.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=39 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109143;  // std dev = 3.94e-08, 296.000 (wgt'ed) examples reached here.  /* #neg=296 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1799345360156193;  // std dev = 0.835, 166.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=163 */
%   | else if ( genre(A, E) )
%   | | then return -0.07488717458460338;  // std dev = 7.45e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.045936401391955886;  // std dev = 5.161, 123.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=39 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0732462257633369;  // std dev = 6.38e-09, 281.000 (wgt'ed) examples reached here.  /* #neg=281 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09211227740353033;  // std dev = 0.256, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( movie(E, B) )
%   | | then return 0.10990703379937918;  // std dev = 5.253, 285.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=202 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.068426977844203;  // std dev = 0.000, 296.000 (wgt'ed) examples reached here.  /* #neg=296 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14264830079766433;  // std dev = 0.653, 165.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=163 */
%   | else if ( genre(A, E) )
%   | | then return -0.06410790463896375;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.03770091358975132;  // std dev = 5.353, 147.000 (wgt'ed) examples reached here.  /* #neg=108 #pos=39 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202608;  // std dev = 5.27e-09, 276.000 (wgt'ed) examples reached here.  /* #neg=276 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.13943
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.234 seconds
Total inference time: 1.656 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.977284
   AUC PR    = 0.851913
   CLL	      = -0.13482
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.806931
   F1        = 0.893151


Total scoring time: 2.868 seconds
Parameter learned model CLL: -0.13482


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 5, 0], 'true,false,true': [1.02e-06, 0, 163], 'true,false,false,true': [5.065, 75, 39], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.04e-07, 339, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.188, 2, 163], 'true,false,true': [0.0, 8, 0], 'true,false,false,true': [5.189, 87, 39], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 323, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.11, 15, 0], 'true,false,true': [0.37, 82, 202], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 336, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.941, 2, 163], 'true,false,true': [0.0, 8, 0], 'true,false,false,true': [5.282, 98, 39], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 310, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.303, 14, 0], 'true,false,true': [1.58e-07, 0, 163], 'true,false,false,true': [5.25, 94, 39], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.76e-07, 306, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 163], 'true,false,true': [0.438, 107, 39], 'true,false,false': [0.0, 0, 0], 'false,true': [1.05e-07, 295, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.227, 11, 0], 'true,false,true': [0.0, 0, 163], 'true,false,false,true': [5.289, 99, 39], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.94e-08, 296, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.835, 3, 163], 'true,false,true': [7.45e-09, 13, 0], 'true,false,false,true': [5.161, 84, 39], 'true,false,false,false': [0.0, 0, 0], 'false,true': [6.38e-09, 281, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.256, 12, 0], 'true,false,true': [5.253, 83, 202], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 296, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.653, 2, 163], 'true,false,true': [0.0, 10, 0], 'true,false,false,true': [5.353, 108, 39], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.27e-09, 276, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.20320909410995916, 1.2313978090237726e-16], 'true': [-2.7755575615628915e-18, 0.19744816171200433], 'true,false': [6.3643705166242106e-15, 0.22506925207756368], 'true,false,false': [0.22506925207756368, nan], 'false': [1.2313978090237726e-16, nan]}, {'': [0.1808223286562339, -1.1274091395574345e-16], 'true': [0.00854828294081065, 0.20495999517180533], 'true,false': [0.0, 0.2137188208616781], 'true,false,false': [0.2137188208616781, nan], 'false': [-1.1274091395574345e-16, nan]}, {'': [0.14202153178995158, -3.700743415417188e-17], 'true': [0.0008002488401469148, 0.13708924620257143], 'true,false': [0.13708924620257143, nan], 'false': [-3.700743415417188e-17, nan]}, {'': [0.13968261143000624, -4.870655849968429e-17], 'true': [0.005365672258714248, 0.19331093412439515], 'true,false': [-1.734723475976807e-18, 0.20363365123341579], 'true,false,false': [0.20363365123341579, nan], 'false': [-4.870655849968429e-17, nan]}, {'': [0.11857954927367238, 1.0158903493302086e-16], 'true': [0.006575384120823979, 0.11850765507989029], 'true,false': [1.525705260834571e-16, 0.20724744191305394], 'true,false,false': [0.20724744191305394, nan], 'false': [1.0158903493302086e-16, nan]}, {'': [0.10810478966474947, 3.763467880085276e-17], 'true': [-6.974652620958039e-16, 0.19166272385526492], 'true,false': [0.19166272385526492, nan], 'false': [3.763467880085276e-17, nan]}, {'': [0.10239151886821457, 5.251054846200065e-18], 'true': [0.0046699363523388234, 0.10405162166410944], 'true,false': [-1.0897894720246935e-16, 0.2027410207939505], 'true,false,false': [0.2027410207939505, nan], 'false': [5.251054846200065e-18, nan]}, {'': [0.09631474912681244, 4.029991050240782e-17], 'true': [0.004202749673293707, 0.1971013539425466], 'true,false': [4.270088556250602e-18, 0.21653777513384956], 'true,false,false': [0.21653777513384956, nan], 'false': [4.029991050240782e-17, nan]}, {'': [0.09471263358938455, -4.5759192231171994e-17], 'true': [0.0054461140719032596, 0.09682226218389191], 'true,false': [0.09682226218389191, nan], 'false': [-4.5759192231171994e-17, nan]}, {'': [0.09860981054199981, 2.735332089656183e-17], 'true': [0.002587994879674251, 0.18254516151300337], 'true,false': [-2.0816681711721684e-18, 0.19491878384006675], 'true,false,false': [0.19491878384006675, nan], 'false': [2.735332089656183e-17, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995097;  // std dev = 1.02e-06, 163.000 (wgt'ed) examples reached here.  /* #pos=163 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.8581489350995116;  // std dev = 2.46e-07, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return -0.14185106490048766;  // std dev = 7.60e-08, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
%   else return -0.1418510649004878;  // std dev = 1.26e-07, 307.000 (wgt'ed) examples reached here.  /* #neg=307 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109545;  // std dev = 1.46e-07, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | | else return 0.7022301866856616;  // std dev = 0.119, 98.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=96 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.719473412210955;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return -0.12544463852839147;  // std dev = 0.000, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
%   else return -0.125444638528392;  // std dev = 0.000, 292.000 (wgt'ed) examples reached here.  /* #neg=292 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14036277971002697;  // std dev = 0.137, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( actor(A), director(B) )
%   | | then return 0.5573880360188429;  // std dev = 0.030, 202.000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | | else return -0.11231637819360622;  // std dev = 7.30e-08, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
%   else return -0.11231637819360678;  // std dev = 0.000, 309.000 (wgt'ed) examples reached here.  /* #neg=309 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.41702202145710293;  // std dev = 0.000, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | | else return 0.40852140010009347;  // std dev = 0.088, 98.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=96 */
%   | else if ( genre(A, E) )
%   | | then return -0.09906485982731038;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.41702202145710204;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return -0.10159632948783617;  // std dev = 5.77e-08, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
%   else return -0.10159632948783659;  // std dev = 0.000, 262.000 (wgt'ed) examples reached here.  /* #neg=262 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( female(B) )
%   | | then return -0.09056766527284475;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.13657303374771043;  // std dev = 0.159, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.32369508406740644;  // std dev = 0.035, 163.000 (wgt'ed) examples reached here.  /* #pos=163 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.3203786113601433;  // std dev = 4.21e-08, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return -0.09269127618926107;  // std dev = 0.000, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
%   else return -0.09269127618926043;  // std dev = 1.90e-07, 322.000 (wgt'ed) examples reached here.  /* #neg=322 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.25431540090191845;  // std dev = 9.88e-08, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | | else return 0.24887180131910774;  // std dev = 0.072, 98.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=96 */
%   | else if ( actor(A), director(B) )
%   | | then return 0.2549448460264543;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | else return -0.08493760327541479;  // std dev = 0.009, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
%   else return -0.08518475138839678;  // std dev = 9.88e-08, 285.000 (wgt'ed) examples reached here.  /* #neg=285 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( actor(B) )
%   | | then return -0.07497276542722682;  // std dev = 0.005, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else return -0.2975141461383405;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.21221804918654005;  // std dev = 0.033, 163.000 (wgt'ed) examples reached here.  /* #pos=163 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.20959707296476737;  // std dev = 4.47e-08, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return -0.0787946923785732;  // std dev = 0.000, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
%   else return -0.07877675473109143;  // std dev = 3.65e-08, 298.000 (wgt'ed) examples reached here.  /* #neg=298 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( actor(A) )
%   | | then return 0.17890009167033374;  // std dev = 0.029, 163.000 (wgt'ed) examples reached here.  /* #pos=163 */
%   | | else return -0.23927149999047964;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(A, E) )
%   | | then return -0.06936258931189655;  // std dev = 0.003, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.17697866500998408;  // std dev = 3.65e-08, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return -0.0732617863705102;  // std dev = 0.000, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
%   else return -0.07324622576333695;  // std dev = 1.01e-07, 292.000 (wgt'ed) examples reached here.  /* #neg=292 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.15383015125093719;  // std dev = 0.027, 202.000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.06953300546161395;  // std dev = 0.130, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
%   else return -0.06842697784420318;  // std dev = 0.000, 344.000 (wgt'ed) examples reached here.  /* #neg=344 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13313926185043307;  // std dev = 0.323, 164.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=163 */
%   | else if ( genre(A, E) )
%   | | then return -0.06275908721573172;  // std dev = 0.002, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.13380091903412486;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return -0.06413825467978886;  // std dev = 0.000, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
%   else return -0.06419184008202602;  // std dev = 1.01e-07, 287.000 (wgt'ed) examples reached here.  /* #neg=287 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064164
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.641 seconds
Total inference time: 1.601 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.06481
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.522 seconds
Refined model CLL: -0.06481


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064164
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 11.265 seconds
Total inference time: 1.601 seconds
AUC ROC: 1.0
Total revision time: 11.265
Best scored revision CLL: -0.06481


Dataset: 4_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 00:04:23
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.064164, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 11.265, 'Inference time': 1.601, 'parameter_0.6': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.13943, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 2.234, 'Inference time': 1.656}}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 7.45e-09, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else if ( genre(B, E) )
%   | | then return 0.858148935099509;  // std dev = 1.08e-06, 221.000 (wgt'ed) examples reached here.  /* #pos=221 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.13885068948547727;  // std dev = 5.876, 171.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=48 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048735;  // std dev = 2.94e-07, 393.000 (wgt'ed) examples reached here.  /* #neg=393 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.6971407765085955;  // std dev = 2.042, 227.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=221 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.15208053568249305;  // std dev = 5.748, 154.000 (wgt'ed) examples reached here.  /* #neg=106 #pos=48 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839222;  // std dev = 0.000, 374.000 (wgt'ed) examples reached here.  /* #neg=374 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1457066115963032;  // std dev = 0.228, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else if ( movie(E, A) )
%   | | then return 0.38417957833173977;  // std dev = 0.365, 375.000 (wgt'ed) examples reached here.  /* #neg=106 #pos=269 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360607;  // std dev = 0.000, 431.000 (wgt'ed) examples reached here.  /* #neg=431 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.462195707087244;  // std dev = 0.663, 222.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=221 */
%   | else if ( genre(A, E) )
%   | | then return -0.09858893822501587;  // std dev = 5.27e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.05489448560794878;  // std dev = 5.797, 160.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=48 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783605;  // std dev = 9.68e-09, 383.000 (wgt'ed) examples reached here.  /* #neg=383 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.15454025664666313;  // std dev = 0.273, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( genre(B, E) )
%   | | then return 0.3539628611404878;  // std dev = 0.000, 221.000 (wgt'ed) examples reached here.  /* #pos=221 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.026948851160619364;  // std dev = 5.869, 170.000 (wgt'ed) examples reached here.  /* #neg=122 #pos=48 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926103;  // std dev = 1.21e-07, 422.000 (wgt'ed) examples reached here.  /* #neg=422 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2729944398790335;  // std dev = 0.747, 223.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=221 */
%   | else if ( movie(E, A) )
%   | | then return 0.019490057544888147;  // std dev = 0.445, 174.000 (wgt'ed) examples reached here.  /* #neg=126 #pos=48 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.26e-07, 404.000 (wgt'ed) examples reached here.  /* #neg=404 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10653810589442585;  // std dev = 0.303, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( genre(B, E) )
%   | | then return 0.22642264675477025;  // std dev = 3.24e-07, 221.000 (wgt'ed) examples reached here.  /* #pos=221 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.049390137876795276;  // std dev = 5.739, 153.000 (wgt'ed) examples reached here.  /* #neg=105 #pos=48 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109161;  // std dev = 8.16e-08, 431.000 (wgt'ed) examples reached here.  /* #neg=431 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17871888669850416;  // std dev = 1.050, 226.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=221 */
%   | else if ( genre(A, E) )
%   | | then return -0.0722131699909223;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.03967451413761692;  // std dev = 5.739, 153.000 (wgt'ed) examples reached here.  /* #neg=105 #pos=48 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333768;  // std dev = 0.000, 371.000 (wgt'ed) examples reached here.  /* #neg=371 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12660124462240793;  // std dev = 0.389, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( movie(E, B) )
%   | | then return 0.09150059802990458;  // std dev = 6.094, 392.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=269 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420329;  // std dev = 0.000, 383.000 (wgt'ed) examples reached here.  /* #neg=383 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.145198873929999;  // std dev = 0.770, 224.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=221 */
%   | else if ( genre(A, E) )
%   | | then return -0.05997413680619001;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.034238646557659104;  // std dev = 5.933, 180.000 (wgt'ed) examples reached here.  /* #neg=132 #pos=48 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202564;  // std dev = 9.45e-09, 382.000 (wgt'ed) examples reached here.  /* #neg=382 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.13884
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.555 seconds
Total inference time: 1.616 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.978698
   AUC PR    = 0.862851
   CLL	      = -0.134704
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.821561
   F1        = 0.902041


Total scoring time: 2.92 seconds
Parameter learned model CLL: -0.134704


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [7.45e-09, 20, 0], 'true,false,true': [1.08e-06, 0, 221], 'true,false,false,true': [5.876, 123, 48], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.94e-07, 393, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [2.042, 6, 221], 'true,false,true': [5.27e-09, 10, 0], 'true,false,false,true': [5.748, 106, 48], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 374, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.228, 20, 0], 'true,false,true': [0.365, 106, 269], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 431, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.663, 1, 221], 'true,false,true': [5.27e-09, 13, 0], 'true,false,false,true': [5.797, 112, 48], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.68e-09, 383, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.273, 9, 0], 'true,false,true': [0.0, 0, 221], 'true,false,false,true': [5.869, 122, 48], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.21e-07, 422, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.747, 2, 221], 'true,false,true': [0.445, 126, 48], 'true,false,false': [0.0, 0, 0], 'false,true': [1.26e-07, 404, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.303, 17, 0], 'true,false,true': [3.24e-07, 0, 221], 'true,false,false,true': [5.739, 105, 48], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.16e-08, 431, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [1.05, 5, 221], 'true,false,true': [0.0, 13, 0], 'true,false,false,true': [5.739, 105, 48], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 371, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.389, 13, 0], 'true,false,true': [6.094, 123, 269], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 383, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.77, 3, 221], 'true,false,true': [0.0, 12, 0], 'true,false,false,true': [5.933, 132, 48], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.45e-09, 382, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.2266177302290542, 2.1921960995143041e-16], 'true': [2.7755575615628915e-18, 0.21532043940025344], 'true,false': [5.2728058219301554e-15, 0.20190827947060727], 'true,false,false': [0.20190827947060727, nan], 'false': [2.1921960995143041e-16, nan]}, {'': [0.17391984011422595, -1.2349004765884094e-16], 'true': [0.01837050040809291, 0.20586707141447366], 'true,false': [2.7755575615628915e-18, 0.21453870804520425], 'true,false,false': [0.21453870804520425, nan], 'false': [-1.2349004765884094e-16, nan]}, {'': [0.13980703695938956, -1.236443275684629e-17], 'true': [0.0026014512689353344, 0.13290799101765885], 'true,false': [0.13290799101765885, nan], 'false': [-1.236443275684629e-17, nan]}, {'': [0.13007401361165138, 9.276014827155354e-17], 'true': [0.0019802311854390815, 0.19585682434074922], 'true,false': [2.135044278125301e-18, 0.20999999999999952], 'true,false,false': [0.20999999999999952, nan], 'false': [9.276014827155354e-17, nan]}, {'': [0.11494392578129549, 3.472735527263523e-17], 'true': [0.008287699125406469, 0.11437959441335235], 'true,false': [-8.359326303060002e-16, 0.20262975778546682], 'true,false,false': [0.20262975778546682, nan], 'false': [3.472735527263523e-17, nan]}, {'': [0.1040946615271025, 3.95723058282234e-17], 'true': [0.0025036479843783235, 0.19819645924472046], 'true,false': [0.19819645924472046, nan], 'false': [3.95723058282234e-17, nan]}, {'': [0.09455339494850873, 1.5455540946057863e-17], 'true': [0.005408370941313704, 0.09565412678062714], 'true,false': [4.742310114235963e-16, 0.21530180699730894], 'true,false,false': [0.21530180699730894, nan], 'false': [1.5455540946057863e-17, nan]}, {'': [0.09256347559293147, -6.763083654050818e-17], 'true': [0.004879987443818752, 0.19934443658166898], 'true,false': [0.0, 0.21530180699730805], 'true,false,false': [0.21530180699730805, nan], 'false': [-6.763083654050818e-17, nan]}, {'': [0.0935529114828192, -1.1131217792586425e-16], 'true': [0.011634539693088145, 0.09474270482440078], 'true,false': [0.09474270482440078, nan], 'false': [-1.1131217792586425e-16, nan]}, {'': [0.09420505090368472, 8.893409568986856e-17], 'true': [0.0026479704854222297, 0.18337214087971945], 'true,false': [-5.782411586589357e-19, 0.19555555555555498], 'true,false,false': [0.19555555555555498, nan], 'false': [8.893409568986856e-17, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( genre(B, E) )
%   | | then return 0.858148935099509;  // std dev = 1.08e-06, 221.000 (wgt'ed) examples reached here.  /* #pos=221 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.8581489350995121;  // std dev = 1.69e-07, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | | else return -0.14185106490048788;  // std dev = 0.000, 133.000 (wgt'ed) examples reached here.  /* #neg=133 */
%   else return -0.1418510649004874;  // std dev = 2.73e-07, 379.000 (wgt'ed) examples reached here.  /* #neg=379 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.719473412210954;  // std dev = 2.92e-07, 89.000 (wgt'ed) examples reached here.  /* #pos=89 */
%   | | else if ( actor(A) )
%   | | | then return 0.7194734122109557;  // std dev = 0.000, 132.000 (wgt'ed) examples reached here.  /* #pos=132 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.7194734122109548;  // std dev = 0.000, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | | else return -0.12544463852839116;  // std dev = 7.88e-08, 141.000 (wgt'ed) examples reached here.  /* #neg=141 */
%   else return -0.12544463852839227;  // std dev = 0.000, 428.000 (wgt'ed) examples reached here.  /* #neg=428 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5553664367462835;  // std dev = 5.72e-07, 269.000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.11231637819360618;  // std dev = 1.00e-07, 147.000 (wgt'ed) examples reached here.  /* #neg=147 */
%   else return -0.11231637819360618;  // std dev = 0.000, 406.000 (wgt'ed) examples reached here.  /* #neg=406 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( actor(A) )
%   | | then return 0.41751358415831297;  // std dev = 0.000, 221.000 (wgt'ed) examples reached here.  /* #pos=221 */
%   | | else return -0.10159632948783633;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783635;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.41751358415831047;  // std dev = 0.000, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | | else return -0.10159632948783634;  // std dev = 0.000, 118.000 (wgt'ed) examples reached here.  /* #neg=118 */
%   else return -0.10159632948783583;  // std dev = 2.46e-07, 416.000 (wgt'ed) examples reached here.  /* #neg=416 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926103;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( genre(B, E) )
%   | | then return 0.3207118471601495;  // std dev = 3.32e-07, 221.000 (wgt'ed) examples reached here.  /* #pos=221 */
%   | | else if ( actor(B) )
%   | | | then return -0.09269127618926079;  // std dev = 7.60e-08, 127.000 (wgt'ed) examples reached here.  /* #neg=127 */
%   | | | else return 0.30417572222617306;  // std dev = 0.573, 50.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=48 */
%   else return -0.09269127618926082;  // std dev = 1.62e-07, 392.000 (wgt'ed) examples reached here.  /* #neg=392 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2557353144771254;  // std dev = 0.020, 269.000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.08575429450063744;  // std dev = 0.051, 128.000 (wgt'ed) examples reached here.  /* #neg=128 */
%   else return -0.08518475138839678;  // std dev = 1.32e-07, 390.000 (wgt'ed) examples reached here.  /* #neg=390 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07873543234518106;  // std dev = 9.13e-09, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( genre(B, E) )
%   | | then return 0.20966439641512605;  // std dev = 4.21e-08, 221.000 (wgt'ed) examples reached here.  /* #pos=221 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.2124176747429718;  // std dev = 4.21e-08, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | | else return -0.07932217817198538;  // std dev = 0.048, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
%   else return -0.07877675473109143;  // std dev = 2.23e-07, 397.000 (wgt'ed) examples reached here.  /* #neg=397 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17590084938409167;  // std dev = 0.250, 222.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=221 */
%   | else if ( genre(A, E) )
%   | | then return -0.0732103775797629;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.17904500678923896;  // std dev = 5.96e-08, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | | else return -0.07391824025880066;  // std dev = 0.055, 128.000 (wgt'ed) examples reached here.  /* #neg=128 */
%   else return -0.07324622576333772;  // std dev = 0.000, 434.000 (wgt'ed) examples reached here.  /* #neg=434 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.15308452688784854;  // std dev = 0.009, 269.000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.06903696251253409;  // std dev = 0.046, 141.000 (wgt'ed) examples reached here.  /* #neg=141 */
%   else return -0.06842697784420333;  // std dev = 0.000, 392.000 (wgt'ed) examples reached here.  /* #neg=392 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13212481929060468;  // std dev = 0.302, 223.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=221 */
%   | else if ( genre(A, E) )
%   | | then return -0.06412565191346672;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.1352915155278647;  // std dev = 1.83e-08, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | | else return -0.06424884919813997;  // std dev = 0.028, 141.000 (wgt'ed) examples reached here.  /* #neg=141 */
%   else return -0.06419184008202555;  // std dev = 2.05e-07, 414.000 (wgt'ed) examples reached here.  /* #neg=414 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063882
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 4.089 seconds
Total inference time: 1.708 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064313
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 3.085 seconds
Refined model CLL: -0.064313


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063882
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 12.649000000000001 seconds
Total inference time: 1.708 seconds
AUC ROC: 1.0
Total revision time: 12.649000000000001
Best scored revision CLL: -0.064313


Dataset: 4_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 00:04:39
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063882, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 12.649000000000001, 'Inference time': 1.708, 'parameter_0.8': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.13884, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 2.555, 'Inference time': 1.616}}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995086;  // std dev = 1.07e-06, 278.000 (wgt'ed) examples reached here.  /* #pos=278 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.15764132088631558;  // std dev = 6.429, 197.000 (wgt'ed) examples reached here.  /* #neg=138 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048788;  // std dev = 0.000, 516.000 (wgt'ed) examples reached here.  /* #neg=516 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7045455314558454;  // std dev = 1.873, 283.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=278 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.10603744599767237;  // std dev = 6.571, 220.000 (wgt'ed) examples reached here.  /* #neg=161 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839227;  // std dev = 0.000, 481.000 (wgt'ed) examples reached here.  /* #neg=481 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13644258533403736;  // std dev = 0.244, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | else if ( movie(E, A) )
%   | | then return 0.35021215193188376;  // std dev = 0.376, 500.000 (wgt'ed) examples reached here.  /* #neg=163 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360582;  // std dev = 0.000, 498.000 (wgt'ed) examples reached here.  /* #neg=498 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4646095039528441;  // std dev = 1.161, 281.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=278 */
%   | else if ( genre(A, E) )
%   | | then return -0.09941529148795791;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.05526014065736014;  // std dev = 6.476, 204.000 (wgt'ed) examples reached here.  /* #neg=145 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783541;  // std dev = 1.55e-08, 495.000 (wgt'ed) examples reached here.  /* #neg=495 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1469518383353466;  // std dev = 0.235, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(B, E) )
%   | | then return 0.3595043338995945;  // std dev = 5.26e-07, 278.000 (wgt'ed) examples reached here.  /* #pos=278 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.046635928121224884;  // std dev = 6.469, 203.000 (wgt'ed) examples reached here.  /* #neg=144 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926142;  // std dev = 0.000, 492.000 (wgt'ed) examples reached here.  /* #neg=492 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.27574216355025183;  // std dev = 0.930, 281.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=278 */
%   | else if ( movie(E, A) )
%   | | then return 8.374373571172372E-4;  // std dev = 0.423, 245.000 (wgt'ed) examples reached here.  /* #neg=186 #pos=59 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.43e-07, 491.000 (wgt'ed) examples reached here.  /* #neg=491 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1761549855033242;  // std dev = 0.476, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( genre(B, E) )
%   | | then return 0.22921260224593043;  // std dev = 3.70e-07, 278.000 (wgt'ed) examples reached here.  /* #pos=278 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.034937125946327585;  // std dev = 6.482, 205.000 (wgt'ed) examples reached here.  /* #neg=146 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109196;  // std dev = 0.000, 481.000 (wgt'ed) examples reached here.  /* #neg=481 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18789095684578297;  // std dev = 0.661, 280.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=278 */
%   | else if ( genre(A, E) )
%   | | then return -0.06752005581792939;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.017470230989040127;  // std dev = 6.531, 213.000 (wgt'ed) examples reached here.  /* #neg=154 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333681;  // std dev = 8.01e-09, 521.000 (wgt'ed) examples reached here.  /* #neg=521 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09644170744974383;  // std dev = 0.409, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else if ( movie(E, B) )
%   | | then return 0.10260797919653761;  // std dev = 6.686, 486.000 (wgt'ed) examples reached here.  /* #neg=149 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420354;  // std dev = 0.000, 495.000 (wgt'ed) examples reached here.  /* #neg=495 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13626788685404762;  // std dev = 1.318, 287.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=278 */
%   | else if ( genre(A, E) )
%   | | then return -0.057900507920642635;  // std dev = 6.45e-09, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.010109356716092806;  // std dev = 6.549, 216.000 (wgt'ed) examples reached here.  /* #neg=157 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202536;  // std dev = 1.09e-08, 509.000 (wgt'ed) examples reached here.  /* #neg=509 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.134228
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.38 seconds
Total inference time: 1.574 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.978805
   AUC PR    = 0.865091
   CLL	      = -0.13167
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.824926
   F1        = 0.904065


Total scoring time: 3.046 seconds
Parameter learned model CLL: -0.13167


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 16, 0], 'true,false,true': [1.07e-06, 0, 278], 'true,false,false,true': [6.429, 138, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 516, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.873, 5, 278], 'true,false,true': [0.0, 21, 0], 'true,false,false,true': [6.571, 161, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 481, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.244, 28, 0], 'true,false,true': [0.376, 163, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 498, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.161, 3, 278], 'true,false,true': [0.0, 12, 0], 'true,false,false,true': [6.476, 145, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.55e-08, 495, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.235, 7, 0], 'true,false,true': [5.26e-07, 0, 278], 'true,false,false,true': [6.469, 144, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 492, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.93, 3, 278], 'true,false,true': [0.423, 186, 59], 'true,false,false': [0.0, 0, 0], 'false,true': [1.43e-07, 491, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.476, 17, 0], 'true,false,true': [3.7e-07, 0, 278], 'true,false,false,true': [6.482, 146, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 481, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.661, 2, 278], 'true,false,true': [0.0, 16, 0], 'true,false,false,true': [6.531, 154, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.01e-09, 521, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.409, 23, 0], 'true,false,true': [6.686, 149, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 495, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.318, 9, 278], 'true,false,true': [6.45e-09, 17, 0], 'true,false,false,true': [6.549, 157, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.09e-08, 509, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.21527204549508527, -9.294890438722241e-17], 'true': [-6.938893903907228e-18, 0.20612077562327147], 'true,false': [4.089454594302735e-15, 0.20979669664253175], 'true,false,false': [0.20979669664253175, nan], 'false': [-9.294890438722241e-17, nan]}, {'': [0.1861273243081273, -1.2187063555136854e-16], 'true': [0.012389994285435506, 0.18342109470363466], 'true,false': [-2.64338815386942e-18, 0.19626033057851042], 'true,false,false': [0.19626033057851042, nan], 'false': [-1.2187063555136854e-16, nan]}, {'': [0.14576990383412278, -8.917454013053466e-18], 'true': [0.0021342708602709276, 0.14125418236305548], 'true,false': [0.14125418236305548, nan], 'false': [-8.917454013053466e-18, nan]}, {'': [0.13055778368635657, 2.4043617826225614e-16], 'true': [0.004795555803433312, 0.19540471630544456], 'true,false': [0.0, 0.20556997308727204], 'true,false,false': [0.20556997308727204, nan], 'false': [2.4043617826225614e-16, nan]}, {'': [0.11139177236746639, -2.3468128975816318e-17], 'true': [0.007865141421053684, 0.11088753446064689], 'true,false': [9.968045573612915e-16, 0.20616855541265242], 'true,false,false': [0.20616855541265242, nan], 'false': [-2.3468128975816318e-17, nan]}, {'': [0.10369898519954439, 4.160509908982257e-17], 'true': [0.0030749120384214357, 0.17873619732508486], 'true,false': [0.17873619732508486, nan], 'false': [4.160509908982257e-17, nan]}, {'': [0.09682427171592431, -2.5851346935138782e-17], 'true': [0.013348162936590684, 0.09621712005301866], 'true,false': [4.920125058770478e-16, 0.2049732302201063], 'true,false,false': [0.2049732302201063, nan], 'false': [-2.5851346935138782e-17, nan]}, {'': [0.09257224458868944, 6.392838913388617e-17], 'true': [0.0015587203951403085, 0.1867457448334501], 'true,false': [-1.734723475976807e-18, 0.20026890608124626], 'true,false,false': [0.20026890608124626, nan], 'false': [6.392838913388617e-17, nan]}, {'': [0.08985880915187532, -1.2021808913112807e-16], 'true': [0.007282302573423842, 0.09197642098165494], 'true,false': [0.09197642098165494, nan], 'false': [-1.2021808913112807e-16, nan]}, {'': [0.09143634935557979, 1.1865644899726624e-16], 'true': [0.006057244917283691, 0.18420709966780605], 'true,false': [2.44902137784961e-18, 0.19853823731138678], 'true,false,false': [0.19853823731138678, nan], 'false': [1.1865644899726624e-16, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995086;  // std dev = 1.07e-06, 278.000 (wgt'ed) examples reached here.  /* #pos=278 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.8581489350995125;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.14185106490048818;  // std dev = 0.000, 169.000 (wgt'ed) examples reached here.  /* #neg=169 */
%   else return -0.14185106490048796;  // std dev = 0.000, 523.000 (wgt'ed) examples reached here.  /* #neg=523 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109551;  // std dev = 0.000, 111.000 (wgt'ed) examples reached here.  /* #pos=111 */
%   | | else return 0.709474382024692;  // std dev = 0.091, 169.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=167 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.7194734122109543;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.12544463852839105;  // std dev = 8.69e-08, 132.000 (wgt'ed) examples reached here.  /* #neg=132 */
%   else return -0.12544463852839227;  // std dev = 0.000, 477.000 (wgt'ed) examples reached here.  /* #neg=477 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( actor(B) )
%   | | then return -0.11231637819360636;  // std dev = 1.05e-08, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else return -0.2257657213682376;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( director(B), actor(A) )
%   | | then return 0.556589312522231;  // std dev = 0.023, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | | else return -0.11231637819360649;  // std dev = 2.98e-08, 178.000 (wgt'ed) examples reached here.  /* #neg=178 */
%   else return -0.11231637819360583;  // std dev = 0.000, 492.000 (wgt'ed) examples reached here.  /* #neg=492 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.4172162157046675;  // std dev = 0.000, 111.000 (wgt'ed) examples reached here.  /* #pos=111 */
%   | | else return 0.4089129531449894;  // std dev = 0.080, 170.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=167 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783635;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.4172162157046663;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.10159632948783646;  // std dev = 0.000, 166.000 (wgt'ed) examples reached here.  /* #neg=166 */
%   else return -0.1015963294878354;  // std dev = 3.49e-07, 498.000 (wgt'ed) examples reached here.  /* #neg=498 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10459712037621563;  // std dev = 0.043, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( genre(B, E) )
%   | | then return 0.322912507294385;  // std dev = 0.033, 278.000 (wgt'ed) examples reached here.  /* #pos=278 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.32051025352600726;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.09269127618926067;  // std dev = 8.16e-08, 164.000 (wgt'ed) examples reached here.  /* #neg=164 */
%   else return -0.0926912761892615;  // std dev = 0.000, 508.000 (wgt'ed) examples reached here.  /* #neg=508 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.25638725403889706;  // std dev = 0.031, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.08673443804583893;  // std dev = 0.218, 190.000 (wgt'ed) examples reached here.  /* #neg=190 */
%   else return -0.08518475138839678;  // std dev = 1.38e-07, 469.000 (wgt'ed) examples reached here.  /* #neg=469 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( female(B) )
%   | | then return -0.07780579156038832;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return -0.10222788446704395;  // std dev = 0.134, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.2108665686508191;  // std dev = 0.025, 278.000 (wgt'ed) examples reached here.  /* #pos=278 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.20943650139657594;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.0786643658412358;  // std dev = 2.58e-08, 152.000 (wgt'ed) examples reached here.  /* #neg=152 */
%   else return -0.07877675473109214;  // std dev = 0.000, 512.000 (wgt'ed) examples reached here.  /* #neg=512 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.17630364370539225;  // std dev = 1.33e-07, 111.000 (wgt'ed) examples reached here.  /* #pos=111 */
%   | | else if ( actor(A) )
%   | | | then return 0.178977279919522;  // std dev = 1.98e-07, 167.000 (wgt'ed) examples reached here.  /* #pos=167 */
%   | | | else return -0.20705180007279927;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(A, E) )
%   | | then return -0.07175398760949793;  // std dev = 0.003, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.17686086648535232;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.07314872006694208;  // std dev = 0.000, 156.000 (wgt'ed) examples reached here.  /* #neg=156 */
%   else return -0.07324622576333689;  // std dev = 1.59e-07, 503.000 (wgt'ed) examples reached here.  /* #neg=503 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.15322065579533653;  // std dev = 0.017, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07063897301520461;  // std dev = 0.212, 173.000 (wgt'ed) examples reached here.  /* #neg=173 */
%   else return -0.06842697784420358;  // std dev = 0.000, 524.000 (wgt'ed) examples reached here.  /* #neg=524 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.13341235522327996;  // std dev = 0.000, 111.000 (wgt'ed) examples reached here.  /* #pos=111 */
%   | | else return 0.12992899565721483;  // std dev = 0.040, 170.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=167 */
%   | else if ( genre(A, E) )
%   | | then return -0.0625661694897317;  // std dev = 0.002, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.13379145560274464;  // std dev = 4.71e-08, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.06397880976377478;  // std dev = 0.000, 145.000 (wgt'ed) examples reached here.  /* #neg=145 */
%   else return -0.06419184008202543;  // std dev = 2.36e-07, 472.000 (wgt'ed) examples reached here.  /* #neg=472 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064072
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 4.621 seconds
Total inference time: 1.549 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064732
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 3.478 seconds
Refined model CLL: -0.064732


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064072
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 14.525 seconds
Total inference time: 1.549 seconds
AUC ROC: 1.0
Total revision time: 14.525
Best scored revision CLL: -0.064732


Dataset: 4_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 00:04:58
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.064072, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 14.525, 'Inference time': 1.549, 'parameter_1.0': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.134228, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 3.38, 'Inference time': 1.574}}


Starting fold 5

Target train facts examples: 915
Target train pos examples: 337
Target train neg examples: 12165

Target test facts examples: 163
Target test pos	 examples: 45
Target test neg examples: 2071

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995125;  // std dev = 0.000, 60.000 (wgt'ed) examples reached here.  /* #pos=60 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.03314893509951235;  // std dev = 2.403, 40.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048763;  // std dev = 8.16e-08, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.6922179912193624;  // std dev = 1.175, 62.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=60 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.09544494334153537;  // std dev = 2.304, 29.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839136;  // std dev = 0.000, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, A) )
%   | | then return 0.32932998933270313;  // std dev = 0.364, 103.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.1123163781936062;  // std dev = 7.88e-08, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4800863102847294;  // std dev = 0.000, 60.000 (wgt'ed) examples reached here.  /* #pos=60 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.026164486636052767;  // std dev = 2.317, 30.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1015963294878362;  // std dev = 5.89e-09, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.19274155760616968;  // std dev = 0.141, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.36359761853742384;  // std dev = 1.43e-07, 60.000 (wgt'ed) examples reached here.  /* #pos=60 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.022310104104410713;  // std dev = 2.382, 37.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926104;  // std dev = 2.79e-08, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2668889473255919;  // std dev = 0.750, 62.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=60 */
%   | else if ( movie(E, A) )
%   | | then return -0.01158113182319166;  // std dev = 0.389, 37.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=7 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839682;  // std dev = 5.58e-08, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.15404498882908246;  // std dev = 0.189, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.2332106871952057;  // std dev = 8.94e-08, 60.000 (wgt'ed) examples reached here.  /* #pos=60 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.021692073813067436;  // std dev = 2.390, 38.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109158;  // std dev = 5.87e-08, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1941165340766345;  // std dev = 0.000, 60.000 (wgt'ed) examples reached here.  /* #pos=60 */
%   | else if ( genre(A, E) )
%   | | then return -0.0666343955371451;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.030954912051053305;  // std dev = 2.317, 30.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333707;  // std dev = 0.000, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.06260788267260528;  // std dev = 1.32e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( movie(E, B) )
%   | | then return 0.1118990421971171;  // std dev = 2.442, 92.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420265;  // std dev = 4.75e-09, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1359990246674006;  // std dev = 0.632, 62.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=60 */
%   | else if ( genre(A, E) )
%   | | then return -0.05903261631591702;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.026419370833171443;  // std dev = 2.366, 35.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.971565
   AUC PR    = 0.823063
   CLL	      = -0.117608
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.875


Total learning time: 1.564 seconds
Total inference time: 1.61 seconds
AUC ROC: 0.971565


Results scoring model
   AUC ROC   = 0.987654
   AUC PR    = 0.921852
   CLL	      = -0.111424
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.895522
   F1        = 0.944882


Total scoring time: 1.944 seconds
Parameter learned model CLL: -0.111424


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 60], 'true,false,false,true': [2.403, 33, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.16e-08, 88, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.175, 2, 60], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [2.304, 22, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 104, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.364, 36, 67], 'true,false,false': [0.0, 0, 0], 'false,true': [7.88e-08, 98, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 60], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [2.317, 23, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.89e-09, 87, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.141, 2, 0], 'true,false,true': [1.43e-07, 0, 60], 'true,false,false,true': [2.382, 30, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.79e-08, 91, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.75, 2, 60], 'true,false,true': [0.389, 30, 7], 'true,false,false': [0.0, 0, 0], 'false,true': [5.58e-08, 98, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.189, 3, 0], 'true,false,true': [8.94e-08, 0, 60], 'true,false,false,true': [2.39, 31, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.87e-08, 101, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 60], 'true,false,true': [0.0, 4, 0], 'true,false,false,true': [2.317, 23, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 108, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [1.32e-09, 3, 0], 'true,false,true': [2.442, 25, 67], 'true,false,false': [0.0, 0, 0], 'false,true': [4.75e-09, 99, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.632, 2, 60], 'true,false,true': [0.0, 3, 0], 'true,false,false,true': [2.366, 28, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 94, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.2233114400548958, 7.569702440626067e-17], 'true': [0.0, 0.22109999999999919], 'true,false': [-4.736951571734001e-16, 0.1443750000000002], 'true,false,false': [0.1443750000000002, nan], 'false': [7.569702440626067e-17, nan]}, {'': [0.15345844524493907, -8.540177112501205e-18], 'true': [0.02228573920286717, 0.17858368760174204], 'true,false': [0.0, 0.1831153388822832], 'true,false,false': [0.1831153388822832, nan], 'false': [-8.540177112501205e-18, nan]}, {'': [0.1330748727838115, 6.344131569286608e-17], 'true': [0.0, 0.13249136651353058], 'true,false': [0.13249136651353058, nan], 'false': [6.344131569286608e-17, nan]}, {'': [0.10627202905780796, 3.317907889684376e-17], 'true': [-2.0724163126336256e-16, 0.17362783709757107], 'true,false': [0.0, 0.17888888888888874], 'true,false,false': [0.17888888888888874, nan], 'false': [3.317907889684376e-17, nan]}, {'': [0.09527374109044331, 8.540177112501205e-18], 'true': [0.01001005881160262, 0.09365007235801562], 'true,false': [3.4046839421838136e-16, 0.15339663988312652], 'true,false,false': [0.15339663988312652, nan], 'false': [8.540177112501205e-18, nan]}, {'': [0.08048470546971259, 3.172065784643304e-17], 'true': [0.009062534461722876, 0.15160119842639388], 'true,false': [0.15160119842639388, nan], 'false': [3.172065784643304e-17, nan]}, {'': [0.07425807655638407, 3.407615224097015e-17], 'true': [0.011909257158098555, 0.07369591118348061], 'true,false': [1.3322676295501878e-16, 0.15027700831024945], 'true,false,false': [0.15027700831024945, nan], 'false': [3.407615224097015e-17, nan]}, {'': [0.06449144925256131, -3.0839528461809902e-18], 'true': [-1.554312234475219e-16, 0.15883175382468143], 'true,false': [0.0, 0.17888888888888876], 'true,false,false': [0.17888888888888876, nan], 'false': [-3.0839528461809902e-18, nan]}, {'': [0.06372107608652909, 2.2428747972225384e-17], 'true': [5.782411586589357e-19, 0.06483727410029048], 'true,false': [0.06483727410029048, nan], 'false': [2.2428747972225384e-17, nan]}, {'': [0.06643669317349059, -1.4173059888831785e-17], 'true': [0.006441335554405862, 0.14744576211703353], 'true,false': [-5.782411586589357e-19, 0.16000000000000003], 'true,false,false': [0.16000000000000003, nan], 'false': [-1.4173059888831785e-17, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995125;  // std dev = 0.000, 60.000 (wgt'ed) examples reached here.  /* #pos=60 */
%   | | else if ( actor(B) )
%   | | | then return -0.1418510649004877;  // std dev = 2.36e-08, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.14185106490048763;  // std dev = 8.56e-08, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109543;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else return 0.696003466357084;  // std dev = 0.139, 36.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=35 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( actor(B) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | | else return 0.7194734122109543;  // std dev = 2.11e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.12544463852839144;  // std dev = 0.000, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14935084112381708;  // std dev = 0.091, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( actor(B) )
%   | | then return -0.1123163781936064;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else return 0.5583898904030408;  // std dev = 0.024, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   else return -0.1123163781936062;  // std dev = 7.74e-08, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.41677847624078607;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else return 0.40524227508792143;  // std dev = 0.102, 36.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=35 */
%   | else if ( genre(A, E) )
%   | | then return -0.09826555202816624;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( actor(B) )
%   | | | then return -0.10159632948783635;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | | | else return 0.4167784762407861;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.10159632948783628;  // std dev = 2.98e-08, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08989545474806475;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.3246862310333547;  // std dev = 0.029, 60.000 (wgt'ed) examples reached here.  /* #pos=60 */
%   | | else if ( actor(B) )
%   | | | then return -0.092691276189261;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | | else return 0.3202135225307261;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.09269127618926098;  // std dev = 4.21e-08, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.08490499599472356;  // std dev = 0.004, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | else return 0.2575670655056461;  // std dev = 0.027, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   else return -0.08518475138839682;  // std dev = 5.58e-08, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07658252285270133;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.2117284805053188;  // std dev = 0.022, 60.000 (wgt'ed) examples reached here.  /* #pos=60 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.20906488086708602;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.1051725429455665;  // std dev = 0.699, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   else return -0.0787767547310916;  // std dev = 5.77e-08, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1785420607033888;  // std dev = 0.020, 60.000 (wgt'ed) examples reached here.  /* #pos=60 */
%   | else if ( genre(A, E) )
%   | | then return -0.0713393664340142;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( actor(B) )
%   | | | then return -0.07149307638927556;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | | else return 0.17658816930917198;  // std dev = 7.45e-09, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.07324622576333707;  // std dev = 0.000, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.19703833652755556;  // std dev = 0.319, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( director(B), actor(A) )
%   | | then return 0.15368565628498398;  // std dev = 0.018, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | | else if ( female(A) )
%   | | | then return -0.0668902066829913;  // std dev = 5.27e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return -0.13376373287379012;  // std dev = 0.701, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return -0.06842697784420265;  // std dev = 4.83e-08, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.1325037539249099;  // std dev = 1.67e-08, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else return 0.1137647393882378;  // std dev = 0.095, 37.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=35 */
%   | else if ( genre(A, E) )
%   | | then return -0.05547903022347633;  // std dev = 1.32e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.1335521356484335;  // std dev = 3.73e-09, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.08295720235290667;  // std dev = 0.708, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   else return -0.06419184008202626;  // std dev = 0.000, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063461
   Precision = 0.978261 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.989011


Total learning time: 2.415 seconds
Total inference time: 1.665 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.068336
   Precision = 0.905405 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.950355


Total scoring time: 1.725 seconds
Refined model CLL: -0.068336


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063461
   Precision = 0.978261 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.989011


Total learning time: 7.648 seconds
Total inference time: 1.665 seconds
AUC ROC: 1.0
Total revision time: 7.648
Best scored revision CLL: -0.068336


Dataset: 4_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 00:05:10
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063461, 'Precision': [0.978261, 0.5], 'Recall': 1.0, 'F1': 0.989011, 'Learning time': 7.648, 'Inference time': 1.665, 'parameter_0.2': {'AUC ROC': 0.971565, 'AUC PR': 0.823063, 'CLL': -0.117608, 'Precision': [1.0, 0.5], 'Recall': 0.777778, 'F1': 0.875, 'Learning time': 1.564, 'Inference time': 1.61}}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995105;  // std dev = 6.85e-07, 122.000 (wgt'ed) examples reached here.  /* #pos=122 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.020311097261674526;  // std dev = 3.171, 74.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048838;  // std dev = 0.000, 198.000 (wgt'ed) examples reached here.  /* #neg=198 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109553;  // std dev = 0.000, 122.000 (wgt'ed) examples reached here.  /* #pos=122 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.003806595597837765;  // std dev = 3.197, 81.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1254446385283917;  // std dev = 0.000, 210.000 (wgt'ed) examples reached here.  /* #neg=210 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.15071701831329518;  // std dev = 0.163, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( movie(E, A) )
%   | | then return 0.3625929277420367;  // std dev = 0.341, 192.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=134 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360663;  // std dev = 0.000, 203.000 (wgt'ed) examples reached here.  /* #neg=203 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.45957972847913386;  // std dev = 0.664, 123.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=122 */
%   | else if ( genre(A, E) )
%   | | then return -0.0981445622644951;  // std dev = 7.45e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.029049086573438146;  // std dev = 3.162, 72.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783648;  // std dev = 0.000, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08979363266713279;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.3543905951357804;  // std dev = 0.000, 122.000 (wgt'ed) examples reached here.  /* #pos=122 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.01727044141375354;  // std dev = 3.148, 69.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926058;  // std dev = 9.06e-08, 193.000 (wgt'ed) examples reached here.  /* #neg=193 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2736020937665288;  // std dev = 0.544, 123.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=122 */
%   | else if ( movie(E, A) )
%   | | then return -0.03315337093818749;  // std dev = 0.351, 82.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=12 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 7.60e-08, 199.000 (wgt'ed) examples reached here.  /* #neg=199 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08023899152097831;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.2265688658388311;  // std dev = 0.000, 122.000 (wgt'ed) examples reached here.  /* #pos=122 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.016492513499542526;  // std dev = 3.098, 60.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109146;  // std dev = 7.15e-08, 208.000 (wgt'ed) examples reached here.  /* #neg=208 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18131208783458838;  // std dev = 0.698, 124.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=122 */
%   | else if ( genre(A, E) )
%   | | then return -0.07451322064135327;  // std dev = 1.86e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.004484679932797754;  // std dev = 3.117, 63.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0732462257633367;  // std dev = 7.85e-09, 184.000 (wgt'ed) examples reached here.  /* #neg=184 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10432055673601262;  // std dev = 0.260, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( movie(E, B) )
%   | | then return 0.06524865787231529;  // std dev = 3.626, 217.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=134 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420261;  // std dev = 4.66e-09, 205.000 (wgt'ed) examples reached here.  /* #neg=205 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14285208176725642;  // std dev = 0.819, 125.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=122 */
%   | else if ( genre(A, E) )
%   | | then return -0.06308100951730405;  // std dev = 3.73e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.042934773727624345;  // std dev = 3.187, 78.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 193.000 (wgt'ed) examples reached here.  /* #neg=193 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.971565
   AUC PR    = 0.823063
   CLL	      = -0.108545
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.875


Total learning time: 1.893 seconds
Total inference time: 1.555 seconds
AUC ROC: 0.971565


Results scoring model
   AUC ROC   = 0.989271
   AUC PR    = 0.932325
   CLL	      = -0.103271
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.910448
   F1        = 0.953125


Total scoring time: 2.363 seconds
Parameter learned model CLL: -0.103271


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 6, 0], 'true,false,true': [6.85e-07, 0, 122], 'true,false,false,true': [3.171, 62, 12], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 198, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 122], 'true,false,true': [0.0, 8, 0], 'true,false,false,true': [3.197, 69, 12], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 210, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.163, 9, 0], 'true,false,true': [0.341, 58, 134], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 203, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.664, 1, 122], 'true,false,true': [7.45e-09, 11, 0], 'true,false,false,true': [3.162, 60, 12], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 172, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [0.0, 0, 122], 'true,false,false,true': [3.148, 57, 12], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.06e-08, 193, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.544, 1, 122], 'true,false,true': [0.351, 70, 12], 'true,false,false': [0.0, 0, 0], 'false,true': [7.6e-08, 199, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [0.0, 0, 122], 'true,false,false,true': [3.098, 48, 12], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.15e-08, 208, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.698, 2, 122], 'true,false,true': [1.86e-09, 5, 0], 'true,false,false,true': [3.117, 51, 12], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.85e-09, 184, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.26, 8, 0], 'true,false,true': [3.626, 83, 134], 'true,false,false': [0.0, 0, 0], 'false,true': [4.66e-09, 205, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.819, 3, 122], 'true,false,true': [3.73e-09, 9, 0], 'true,false,false,true': [3.187, 66, 12], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 193, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.22331144005490106, -2.377447285055891e-16], 'true': [-6.938893903907228e-18, 0.2162640566430699], 'true,false': [3.843919718046444e-15, 0.13586559532505424], 'true,false,false': [0.13586559532505424, nan], 'false': [-2.377447285055891e-16, nan]}, {'': [0.17802431075650177, -4.017949993881519e-17], 'true': [-1.3395477805313363e-15, 0.11622310175543189], 'true,false': [0.0, 0.12620027434842185], 'true,false,false': [0.12620027434842185, nan], 'false': [-4.017949993881519e-17, nan]}, {'': [0.12273604174103035, -4.594026308793751e-17], 'true': [0.002949218323203714, 0.11655311920578587], 'true,false': [0.11655311920578587, nan], 'false': [-4.594026308793751e-17, nan]}, {'': [0.11051979758436152, -8.13302913388196e-17], 'true': [0.0035889094156922353, 0.12103079609967898], 'true,false': [5.046468293750712e-18, 0.13888888888888845], 'true,false,false': [0.13888888888888845, nan], 'false': [-8.13302913388196e-17, nan]}, {'': [0.08389161805796731, 4.256813669547232e-17], 'true': [0.0, 0.08377472816440497], 'true,false': [-4.3680905886891404e-17, 0.14366729678638943], 'true,false,false': [0.14366729678638943, nan], 'false': [4.256813669547232e-17, nan]}, {'': [0.07329036719937988, 2.901085290477796e-17], 'true': [0.002406955518292258, 0.12315613564528516], 'true,false': [0.12315613564528516, nan], 'false': [2.901085290477796e-17, nan]}, {'': [0.062427268353000935, 2.455300919844096e-17], 'true': [0.0, 0.0624999027987312], 'true,false': [-1.6744347256641704e-16, 0.16000000000000061], 'true,false,false': [0.16000000000000061, nan], 'false': [2.455300919844096e-17, nan]}, {'': [0.06090929280798229, 6.214835409586475e-17], 'true': [0.003923451417302025, 0.14328227488849316], 'true,false': [6.938893903907229e-19, 0.15419501133786845], 'true,false,false': [0.15419501133786845, nan], 'false': [6.214835409586475e-17, nan]}, {'': [0.05973179924774096, 2.166288828536891e-17], 'true': [0.008470315959549913, 0.06059926907934969], 'true,false': [0.06059926907934969, nan], 'false': [2.166288828536891e-17, nan]}, {'': [0.05961877980615858, -3.4514705428761343e-18], 'true': [0.005372010302058541, 0.1167485185226316], 'true,false': [1.5419764230904951e-18, 0.1301775147929001], 'true,false,false': [0.1301775147929001, nan], 'false': [-3.4514705428761343e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995105;  // std dev = 6.85e-07, 122.000 (wgt'ed) examples reached here.  /* #pos=122 */
%   | | else if ( actor(B) )
%   | | | then return -0.14185106490048766;  // std dev = 5.58e-08, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else return -0.14185106490048838;  // std dev = 0.000, 197.000 (wgt'ed) examples reached here.  /* #neg=197 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109553;  // std dev = 0.000, 122.000 (wgt'ed) examples reached here.  /* #pos=122 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( actor(B) )
%   | | | then return -0.1254446385283916;  // std dev = 0.000, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | | | else return 0.7194734122109542;  // std dev = 4.21e-08, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else return -0.1254446385283917;  // std dev = 0.000, 210.000 (wgt'ed) examples reached here.  /* #neg=210 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5553664367462834;  // std dev = 4.99e-07, 134.000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else if ( actor(B) )
%   | | then return -0.11231637819360625;  // std dev = 5.37e-08, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   | | else return -0.3722618083533679;  // std dev = 0.177, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.11231637819360664;  // std dev = 0.000, 205.000 (wgt'ed) examples reached here.  /* #neg=205 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.4175135841583106;  // std dev = 0.000, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | else return 0.4028574406009705;  // std dev = 0.092, 80.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=78 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783634;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( actor(B) )
%   | | | then return -0.10159632948783617;  // std dev = 5.27e-08, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | | | else return 0.41751358415831036;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else return -0.10159632948783653;  // std dev = 0.000, 201.000 (wgt'ed) examples reached here.  /* #neg=201 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( female(B) )
%   | | then return -0.09269127618926098;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.1277535507272969;  // std dev = 0.121, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.3227585670839063;  // std dev = 0.017, 122.000 (wgt'ed) examples reached here.  /* #pos=122 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.3207118471601498;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.10459759306983353;  // std dev = 0.505, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   else return -0.09269127618926054;  // std dev = 5.58e-08, 196.000 (wgt'ed) examples reached here.  /* #neg=196 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.25656895631357535;  // std dev = 0.015, 122.000 (wgt'ed) examples reached here.  /* #pos=122 */
%   | else if ( director(B), actor(A) )
%   | | then return 0.2551722425694896;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( actor(A) )
%   | | | then return -0.08426148309805605;  // std dev = 0.000, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   | | | else return -0.1703865493251594;  // std dev = 0.424, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return -0.08518475138839678;  // std dev = 7.30e-08, 185.000 (wgt'ed) examples reached here.  /* #neg=185 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09742160224920002;  // std dev = 0.065, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(B, E) )
%   | | then return 0.21074422608102875;  // std dev = 0.013, 122.000 (wgt'ed) examples reached here.  /* #pos=122 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.20975771563253567;  // std dev = 2.11e-08, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.08276608751974335;  // std dev = 0.308, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   else return -0.07877675473109144;  // std dev = 7.60e-08, 203.000 (wgt'ed) examples reached here.  /* #neg=203 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( actor(A) )
%   | | then return 0.17781995664393893;  // std dev = 0.011, 122.000 (wgt'ed) examples reached here.  /* #pos=122 */
%   | | else return -0.2385967512425128;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(A, E) )
%   | | then return -0.0655491170956341;  // std dev = 0.003, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( actor(B) )
%   | | | then return -0.07223635376924065;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | | | else return 0.17709649774527736;  // std dev = 1.05e-08, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else return -0.07324622576333664;  // std dev = 1.20e-07, 201.000 (wgt'ed) examples reached here.  /* #neg=201 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.15324346825613583;  // std dev = 0.010, 134.000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.06688347192615741;  // std dev = 0.015, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   else return -0.06842697784420261;  // std dev = 6.14e-08, 190.000 (wgt'ed) examples reached here.  /* #neg=190 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.13335235889070357;  // std dev = 1.05e-08, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | else return 0.13051739071671645;  // std dev = 0.040, 79.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=78 */
%   | else if ( genre(A, E) )
%   | | then return -0.05754469296005724;  // std dev = 0.003, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.13394906127637496;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.07012815877993953;  // std dev = 0.382, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   else return -0.06419184008202626;  // std dev = 0.000, 170.000 (wgt'ed) examples reached here.  /* #neg=170 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063777
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.281 seconds
Total inference time: 1.643 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.06646
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.193 seconds
Refined model CLL: -0.06646


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063777
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 9.73 seconds
Total inference time: 1.643 seconds
AUC ROC: 1.0
Total revision time: 9.73
Best scored revision CLL: -0.06646


Dataset: 4_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 00:05:23
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063777, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 9.73, 'Inference time': 1.643, 'parameter_0.4': {'AUC ROC': 0.971565, 'AUC PR': 0.823063, 'CLL': -0.108545, 'Precision': [1.0, 0.5], 'Recall': 0.777778, 'F1': 0.875, 'Learning time': 1.893, 'Inference time': 1.555}}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995094;  // std dev = 1.08e-06, 179.000 (wgt'ed) examples reached here.  /* #pos=179 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.05306418933680007;  // std dev = 4.303, 118.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=23 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048785;  // std dev = 9.42e-08, 299.000 (wgt'ed) examples reached here.  /* #neg=299 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7147794230401825;  // std dev = 0.843, 180.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=179 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.029860474834419656;  // std dev = 4.347, 129.000 (wgt'ed) examples reached here.  /* #neg=106 #pos=23 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839208;  // std dev = 0.000, 327.000 (wgt'ed) examples reached here.  /* #neg=327 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1552081243053445;  // std dev = 0.157, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( movie(E, A) )
%   | | then return 0.3540708497573642;  // std dev = 0.354, 296.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=202 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360663;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #neg=326 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4536712531676547;  // std dev = 1.323, 183.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=179 */
%   | else if ( genre(A, E) )
%   | | then return -0.09774776136398533;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.022650066266146466;  // std dev = 4.340, 127.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=23 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783663;  // std dev = 0.000, 313.000 (wgt'ed) examples reached here.  /* #neg=313 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13097689335129067;  // std dev = 0.297, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( genre(B, E) )
%   | | then return 0.358778335178572;  // std dev = 3.72e-07, 179.000 (wgt'ed) examples reached here.  /* #pos=179 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.023179312131427765;  // std dev = 4.351, 130.000 (wgt'ed) examples reached here.  /* #neg=107 #pos=23 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926046;  // std dev = 1.62e-07, 287.000 (wgt'ed) examples reached here.  /* #neg=287 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.27506252105372453;  // std dev = 0.757, 181.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=179 */
%   | else if ( movie(E, A) )
%   | | then return 0.006166698343315564;  // std dev = 0.395, 117.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=23 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.03e-07, 300.000 (wgt'ed) examples reached here.  /* #neg=300 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13369553713331192;  // std dev = 0.355, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( genre(B, E) )
%   | | then return 0.22890379886122558;  // std dev = 2.76e-07, 179.000 (wgt'ed) examples reached here.  /* #pos=179 */
%   | | else if ( movie(F, A) )
%   | | | then return 8.826485151348802E-4;  // std dev = 4.294, 116.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=23 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109143;  // std dev = 3.65e-08, 293.000 (wgt'ed) examples reached here.  /* #neg=293 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18575365089429713;  // std dev = 0.670, 181.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=179 */
%   | else if ( genre(A, E) )
%   | | then return -0.07051813922507733;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.023620758010415795;  // std dev = 4.232, 104.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=23 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333696;  // std dev = 5.74e-09, 297.000 (wgt'ed) examples reached here.  /* #neg=297 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1091370806966974;  // std dev = 0.236, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( movie(E, B) )
%   | | then return 0.09427938059647185;  // std dev = 4.556, 299.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=202 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420308;  // std dev = 0.000, 319.000 (wgt'ed) examples reached here.  /* #neg=319 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14153410913270484;  // std dev = 0.895, 183.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=179 */
%   | else if ( genre(A, E) )
%   | | then return -0.059613296016869835;  // std dev = 4.17e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.028365151642058786;  // std dev = 4.320, 122.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=23 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202596;  // std dev = 6.72e-09, 301.000 (wgt'ed) examples reached here.  /* #neg=301 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.971565
   AUC PR    = 0.823063
   CLL	      = -0.114744
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.875


Total learning time: 2.347 seconds
Total inference time: 1.566 seconds
AUC ROC: 0.971565


Results scoring model
   AUC ROC   = 0.986155
   AUC PR    = 0.91321
   CLL	      = -0.110366
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.886139
   F1        = 0.939633


Total scoring time: 2.468 seconds
Parameter learned model CLL: -0.110366


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 11, 0], 'true,false,true': [1.08e-06, 0, 179], 'true,false,false,true': [4.303, 95, 23], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.42e-08, 299, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.843, 1, 179], 'true,false,true': [5.27e-09, 12, 0], 'true,false,false,true': [4.347, 106, 23], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 327, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.157, 8, 0], 'true,false,true': [0.354, 94, 202], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 326, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.323, 4, 179], 'true,false,true': [0.0, 7, 0], 'true,false,false,true': [4.34, 104, 23], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 313, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.297, 14, 0], 'true,false,true': [3.72e-07, 0, 179], 'true,false,false,true': [4.351, 107, 23], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.62e-07, 287, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.757, 2, 179], 'true,false,true': [0.395, 94, 23], 'true,false,false': [0.0, 0, 0], 'false,true': [1.03e-07, 300, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.355, 13, 0], 'true,false,true': [2.76e-07, 0, 179], 'true,false,false,true': [4.294, 93, 23], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.65e-08, 293, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.67, 2, 179], 'true,false,true': [0.0, 7, 0], 'true,false,false,true': [4.232, 81, 23], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.74e-09, 297, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.236, 6, 0], 'true,false,true': [4.556, 97, 202], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 319, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.895, 4, 179], 'true,false,true': [4.17e-09, 8, 0], 'true,false,false,true': [4.32, 99, 23], 'true,false,false,false': [0.0, 0, 0], 'false,true': [6.72e-09, 301, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.22571259908922714, 2.9704963869569404e-17], 'true': [-1.0092936587501423e-17, 0.21755149701278126], 'true,false': [6.510000484059019e-15, 0.15692329790290244], 'true,false,false': [0.15692329790290244, nan], 'false': [2.9704963869569404e-17, nan]}, {'': [0.1819626009272252, -9.234882651316287e-17], 'true': [0.00394400264602355, 0.13591509278128408], 'true,false': [2.3129646346357427e-18, 0.14650561865272393], 'true,false,false': [0.14650561865272393, nan], 'false': [-9.234882651316287e-17, nan]}, {'': [0.12856904096303468, -4.904052624111121e-17], 'true': [0.0030661698075230143, 0.12513561378471466], 'true,false': [0.12513561378471466, nan], 'false': [-4.904052624111121e-17, nan]}, {'': [0.12133728034733239, -4.965853784265876e-17], 'true': [0.009567090153649834, 0.14083627649873254], 'true,false': [0.0, 0.1483042966085929], 'true,false,false': [0.1483042966085929, nan], 'false': [-4.965853784265876e-17, nan]}, {'': [0.09738764421206815, 9.129360063119754e-17], 'true': [0.0063201917776328775, 0.0968203753214447], 'true,false': [7.740549356045784e-16, 0.14562130177514732], 'true,false,false': [0.14562130177514732, nan], 'false': [9.129360063119754e-17, nan]}, {'': [0.08051036804966323, 3.552713678800501e-17], 'true': [0.0031676457468168984, 0.1562434473860718], 'true,false': [0.1562434473860718, nan], 'false': [3.552713678800501e-17, nan]}, {'': [0.07517118670614563, 4.54698849675832e-18], 'true': [0.009682278055260934, 0.07491289078711988], 'true,false': [4.267225927050881e-16, 0.15896254458977363], 'true,false,false': [0.15896254458977363, nan], 'false': [4.54698849675832e-18, nan]}, {'': [0.0697394569546339, 3.289549702593056e-17], 'true': [0.002479456606964322, 0.16190616531493998], 'true,false': [0.0, 0.17224482248520784], 'true,false,false': [0.17224482248520784, nan], 'false': [3.289549702593056e-17, nan]}, {'': [0.06903395126936486, -7.169465300087218e-17], 'true': [0.009289515698008713, 0.06941883777115626], 'true,false': [0.06941883777115626, nan], 'false': [-7.169465300087218e-17, nan]}, {'': [0.06938261437179384, 4.5736762476252294e-17], 'true': [0.004380140733422325, 0.1436251175869851], 'true,false': [2.168404344971009e-18, 0.15298306906745418], 'true,false,false': [0.15298306906745418, nan], 'false': [4.5736762476252294e-17, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995094;  // std dev = 1.08e-06, 179.000 (wgt'ed) examples reached here.  /* #pos=179 */
%   | | else if ( actor(B) )
%   | | | then return -0.14185106490048763;  // std dev = 8.69e-08, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
%   | | | else return 0.8581489350995121;  // std dev = 8.43e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   else return -0.14185106490048796;  // std dev = 0.000, 282.000 (wgt'ed) examples reached here.  /* #neg=282 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109544;  // std dev = 1.46e-07, 69.000 (wgt'ed) examples reached here.  /* #pos=69 */
%   | | else return 0.7043855898763238;  // std dev = 0.112, 112.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=110 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.7194734122109543;  // std dev = 5.96e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.12932168725990784;  // std dev = 0.217, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
%   else return -0.12544463852839197;  // std dev = 0.000, 280.000 (wgt'ed) examples reached here.  /* #neg=280 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.557393554033917;  // std dev = 0.026, 202.000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.11303918065940499;  // std dev = 0.112, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
%   else return -0.11231637819360678;  // std dev = 0.000, 306.000 (wgt'ed) examples reached here.  /* #neg=306 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.41702067994738534;  // std dev = 1.19e-07, 69.000 (wgt'ed) examples reached here.  /* #pos=69 */
%   | | else return 0.4095061121715;  // std dev = 0.083, 112.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=110 */
%   | else if ( genre(A, E) )
%   | | then return -0.10153037503868326;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.41702067994738473;  // std dev = 6.66e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.10413543739419144;  // std dev = 0.186, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
%   else return -0.10159632948783642;  // std dev = 0.000, 335.000 (wgt'ed) examples reached here.  /* #neg=335 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( actor(B) )
%   | | then return -0.09263605030860995;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else return -0.28069868558265476;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.32341419395014576;  // std dev = 0.032, 179.000 (wgt'ed) examples reached here.  /* #pos=179 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.32037770198460075;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.0947317854024711;  // std dev = 0.174, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
%   else return -0.09269127618926042;  // std dev = 1.99e-07, 334.000 (wgt'ed) examples reached here.  /* #neg=334 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2567808751954524;  // std dev = 0.030, 202.000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.08790675224429881;  // std dev = 0.215, 111.000 (wgt'ed) examples reached here.  /* #neg=111 */
%   else return -0.08518475138839678;  // std dev = 9.77e-08, 275.000 (wgt'ed) examples reached here.  /* #neg=275 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09342669651154445;  // std dev = 0.042, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( genre(B, E) )
%   | | then return 0.2111001104522009;  // std dev = 0.024, 179.000 (wgt'ed) examples reached here.  /* #pos=179 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.20929252660202965;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.0813555434974231;  // std dev = 0.186, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
%   else return -0.07877675473109143;  // std dev = 4.21e-08, 286.000 (wgt'ed) examples reached here.  /* #neg=286 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.17605145665616653;  // std dev = 8.16e-08, 69.000 (wgt'ed) examples reached here.  /* #pos=69 */
%   | | else return 0.17262753792625465;  // std dev = 0.050, 112.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=110 */
%   | else if ( genre(A, E) )
%   | | then return -0.0720354777062693;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.17675522841939365;  // std dev = 2.36e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.07344726157006386;  // std dev = 0.102, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
%   else return -0.07324622576333698;  // std dev = 9.66e-08, 300.000 (wgt'ed) examples reached here.  /* #neg=300 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.15385437444648786;  // std dev = 0.023, 202.000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else if ( actor(B) )
%   | | then return -0.0674873867369863;  // std dev = 0.000333, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
%   | | else return -0.19525947848176226;  // std dev = 0.062, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.06842697784420283;  // std dev = 0.000, 268.000 (wgt'ed) examples reached here.  /* #neg=268 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.13316755042821882;  // std dev = 0.000, 69.000 (wgt'ed) examples reached here.  /* #pos=69 */
%   | | else return 0.13322789966248821;  // std dev = 0.031, 111.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=110 */
%   | else if ( genre(A, E) )
%   | | then return -0.06324784853486308;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.1336462083964549;  // std dev = 7.45e-09, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.06558303906474573;  // std dev = 0.130, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
%   else return -0.06419184008202591;  // std dev = 1.27e-07, 312.000 (wgt'ed) examples reached here.  /* #neg=312 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063699
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.942 seconds
Total inference time: 1.469 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.065157
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.457 seconds
Refined model CLL: -0.065157


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063699
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 11.213999999999999 seconds
Total inference time: 1.469 seconds
AUC ROC: 1.0
Total revision time: 11.213999999999999
Best scored revision CLL: -0.065157


Dataset: 4_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 00:05:38
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063699, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 11.213999999999999, 'Inference time': 1.469, 'parameter_0.6': {'AUC ROC': 0.971565, 'AUC PR': 0.823063, 'CLL': -0.114744, 'Precision': [1.0, 0.5], 'Recall': 0.777778, 'F1': 0.875, 'Learning time': 2.347, 'Inference time': 1.566}}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 7.45e-09, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995088;  // std dev = 1.08e-06, 239.000 (wgt'ed) examples reached here.  /* #pos=239 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.07243464938522567;  // std dev = 4.855, 140.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=30 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048735;  // std dev = 2.97e-07, 394.000 (wgt'ed) examples reached here.  /* #neg=394 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7021595177285936;  // std dev = 1.870, 244.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=239 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.05743407025193142;  // std dev = 4.873, 144.000 (wgt'ed) examples reached here.  /* #neg=114 #pos=30 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839224;  // std dev = 0.000, 390.000 (wgt'ed) examples reached here.  /* #neg=390 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14347562896588412;  // std dev = 0.213, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else if ( movie(E, A) )
%   | | then return 0.3821096514528903;  // std dev = 0.344, 373.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=269 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360622;  // std dev = 0.000, 399.000 (wgt'ed) examples reached here.  /* #neg=399 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4562122718635715;  // std dev = 1.145, 242.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=239 */
%   | else if ( genre(A, E) )
%   | | then return -0.09878738140792472;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.04176925424122792;  // std dev = 4.977, 172.000 (wgt'ed) examples reached here.  /* #neg=142 #pos=30 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783584;  // std dev = 1.19e-08, 414.000 (wgt'ed) examples reached here.  /* #neg=414 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09033440044260642;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( genre(B, E) )
%   | | then return 0.3546571046023802;  // std dev = 0.000, 239.000 (wgt'ed) examples reached here.  /* #pos=239 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.02847106612929853;  // std dev = 4.958, 166.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=30 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926086;  // std dev = 1.56e-07, 397.000 (wgt'ed) examples reached here.  /* #neg=397 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2649071048281068;  // std dev = 1.316, 245.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=239 */
%   | else if ( movie(E, A) )
%   | | then return -0.01789664338382082;  // std dev = 0.385, 164.000 (wgt'ed) examples reached here.  /* #neg=134 #pos=30 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.26e-07, 368.000 (wgt'ed) examples reached here.  /* #neg=368 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1295214178018536;  // std dev = 0.302, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( genre(B, E) )
%   | | then return 0.228254326026658;  // std dev = 3.15e-07, 239.000 (wgt'ed) examples reached here.  /* #pos=239 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.02090376368089582;  // std dev = 4.958, 166.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=30 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109143;  // std dev = 2.18e-07, 383.000 (wgt'ed) examples reached here.  /* #neg=383 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18853479975394588;  // std dev = 0.482, 240.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=239 */
%   | else if ( genre(A, E) )
%   | | then return -0.07260733079162954;  // std dev = 5.27e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.027828139514904725;  // std dev = 4.989, 176.000 (wgt'ed) examples reached here.  /* #neg=146 #pos=30 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0732462257633377;  // std dev = 0.000, 392.000 (wgt'ed) examples reached here.  /* #neg=392 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14025380342659216;  // std dev = 0.392, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( movie(E, B) )
%   | | then return 0.1033557938080718;  // std dev = 5.117, 388.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=269 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420332;  // std dev = 0.000, 385.000 (wgt'ed) examples reached here.  /* #neg=385 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1457695843303741;  // std dev = 0.637, 241.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=239 */
%   | else if ( genre(A, E) )
%   | | then return -0.05951472060493053;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.02306307236888598;  // std dev = 4.937, 160.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=30 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202558;  // std dev = 9.90e-09, 406.000 (wgt'ed) examples reached here.  /* #neg=406 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.971565
   AUC PR    = 0.823063
   CLL	      = -0.113141
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.875


Total learning time: 2.829 seconds
Total inference time: 1.42 seconds
AUC ROC: 0.971565


Results scoring model
   AUC ROC   = 0.986312
   AUC PR    = 0.914738
   CLL	      = -0.109154
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.888476
   F1        = 0.940945


Total scoring time: 3.088 seconds
Parameter learned model CLL: -0.109154


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [7.45e-09, 20, 0], 'true,false,true': [1.08e-06, 0, 239], 'true,false,false,true': [4.855, 110, 30], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.97e-07, 394, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.87, 5, 239], 'true,false,true': [5.27e-09, 10, 0], 'true,false,false,true': [4.873, 114, 30], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 390, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.213, 18, 0], 'true,false,true': [0.344, 104, 269], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 399, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.145, 3, 239], 'true,false,true': [0.0, 12, 0], 'true,false,false,true': [4.977, 142, 30], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.19e-08, 414, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 11, 0], 'true,false,true': [0.0, 0, 239], 'true,false,false,true': [4.958, 136, 30], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.56e-07, 397, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [1.316, 6, 239], 'true,false,true': [0.385, 134, 30], 'true,false,false': [0.0, 0, 0], 'false,true': [1.26e-07, 368, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.302, 10, 0], 'true,false,true': [3.15e-07, 0, 239], 'true,false,false,true': [4.958, 136, 30], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.18e-07, 383, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.482, 1, 239], 'true,false,true': [5.27e-09, 10, 0], 'true,false,false,true': [4.989, 146, 30], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 392, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.392, 11, 0], 'true,false,true': [5.117, 119, 269], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 385, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.637, 2, 239], 'true,false,true': [0.0, 11, 0], 'true,false,false,true': [4.937, 130, 30], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.9e-09, 406, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.21965942424985116, 2.2317173489927e-16], 'true': [2.7755575615628915e-18, 0.20599967975717595], 'true,false': [4.875690739106964e-15, 0.1683673469387766], 'true,false,false': [0.1683673469387766, nan], 'false': [2.2317173489927e-16, nan]}, {'': [0.1715134830862574, -1.2753331154668464e-16], 'true': [0.014329051034594874, 0.15625148658543847], 'true,false': [2.7755575615628915e-18, 0.1649305555555569], 'true,false,false': [0.1649305555555569, nan], 'false': [-1.2753331154668464e-16, nan]}, {'': [0.12542045668462048, -2.0034099692484027e-17], 'true': [0.0025243371625932043, 0.11863417477822663], 'true,false': [0.11863417477822663, nan], 'false': [-2.0034099692484027e-17, nan]}, {'': [0.12305969200714956, 1.4159366111161416e-16], 'true': [0.00541345711829827, 0.13480386059350155], 'true,false': [-4.625929269271485e-18, 0.14399675500270342], 'true,false,false': [0.14399675500270342, nan], 'false': [1.4159366111161416e-16, nan]}, {'': [0.09578280775162724, 6.152369405983236e-17], 'true': [-1.261617073437678e-18, 0.09619175156323594], 'true,false': [-6.39191163968291e-16, 0.14806212803019156], 'true,false,false': [0.14806212803019156, nan], 'false': [6.152369405983236e-17, nan]}, {'': [0.08300571312298877, 4.344350965924526e-17], 'true': [0.007064205125629692, 0.14854635919559395], 'true,false': [0.14854635919559395, nan], 'false': [4.344350965924526e-17, nan]}, {'': [0.07563493753197036, 1.2406669831320288e-16], 'true': [0.00909935085781351, 0.07570290513301856], 'true,false': [4.1621750211888714e-16, 0.1480621280301936], 'true,false,false': [0.1480621280301936, nan], 'false': [1.2406669831320288e-16, nan]}, {'': [0.07078219443357536, -6.910571887972913e-17], 'true': [0.0009693191011251804, 0.13389966314236562], 'true,false': [2.7755575615628915e-18, 0.14139979338842937], 'true,false,false': [0.14139979338842937, nan], 'false': [-6.910571887972913e-17, nan]}, {'': [0.0676022760300671, -1.0612001897715782e-16], 'true': [0.013972758225564746, 0.06748660527956228], 'true,false': [0.06748660527956228, nan], 'false': [-1.0612001897715782e-16, nan]}, {'': [0.06729507948629675, 9.844342090272324e-17], 'true': [0.0016844026664291595, 0.14262383474847215], 'true,false': [-6.30808536718839e-19, 0.1523437500000006], 'true,false,false': [0.1523437500000006, nan], 'false': [9.844342090272324e-17, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995088;  // std dev = 1.08e-06, 239.000 (wgt'ed) examples reached here.  /* #pos=239 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.8581489350995117;  // std dev = 1.98e-07, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return -0.14185106490048782;  // std dev = 0.000, 127.000 (wgt'ed) examples reached here.  /* #neg=127 */
%   else return -0.1418510649004873;  // std dev = 3.01e-07, 413.000 (wgt'ed) examples reached here.  /* #neg=413 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109541;  // std dev = 2.80e-07, 91.000 (wgt'ed) examples reached here.  /* #pos=91 */
%   | | else if ( actor(A) )
%   | | | then return 0.7194734122109562;  // std dev = 0.000, 148.000 (wgt'ed) examples reached here.  /* #pos=148 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 7.45e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.7194734122109546;  // std dev = 0.000, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return -0.12544463852839116;  // std dev = 7.88e-08, 141.000 (wgt'ed) examples reached here.  /* #neg=141 */
%   else return -0.12544463852839222;  // std dev = 0.000, 375.000 (wgt'ed) examples reached here.  /* #neg=375 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5553664367462834;  // std dev = 5.96e-07, 269.000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.11231637819360622;  // std dev = 9.42e-08, 155.000 (wgt'ed) examples reached here.  /* #neg=155 */
%   else return -0.11231637819360629;  // std dev = 0.000, 383.000 (wgt'ed) examples reached here.  /* #neg=383 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4132056180699633;  // std dev = 0.731, 241.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=239 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783634;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.4175135841583105;  // std dev = 0.000, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return -0.1015963294878364;  // std dev = 0.000, 132.000 (wgt'ed) examples reached here.  /* #neg=132 */
%   else return -0.10159632948783616;  // std dev = 1.56e-07, 368.000 (wgt'ed) examples reached here.  /* #neg=368 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11045744737272933;  // std dev = 0.097, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( genre(B, E) )
%   | | then return 0.3216510863639005;  // std dev = 2.23e-07, 239.000 (wgt'ed) examples reached here.  /* #pos=239 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.3207118471601495;  // std dev = 2.11e-08, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return -0.09269127618926082;  // std dev = 7.60e-08, 134.000 (wgt'ed) examples reached here.  /* #neg=134 */
%   else return -0.09269127618926089;  // std dev = 1.44e-07, 401.000 (wgt'ed) examples reached here.  /* #neg=401 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2557415654414427;  // std dev = 0.003, 269.000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.08599532323239766;  // std dev = 0.082, 154.000 (wgt'ed) examples reached here.  /* #neg=154 */
%   else return -0.08518475138839678;  // std dev = 1.26e-07, 409.000 (wgt'ed) examples reached here.  /* #neg=409 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08447279200216906;  // std dev = 0.059, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( genre(B, E) )
%   | | then return 0.2102221202358145;  // std dev = 2.86e-07, 239.000 (wgt'ed) examples reached here.  /* #pos=239 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.20966336059948;  // std dev = 1.49e-08, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return -0.07871795082065988;  // std dev = 2.79e-08, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
%   else return -0.07877675473109141;  // std dev = 1.21e-07, 402.000 (wgt'ed) examples reached here.  /* #neg=402 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17622137790357034;  // std dev = 0.291, 240.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=239 */
%   | else if ( genre(A, E) )
%   | | then return -0.07161553152590547;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.17702728971696394;  // std dev = 0.000, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return -0.07319521121060647;  // std dev = 4.71e-08, 125.000 (wgt'ed) examples reached here.  /* #neg=125 */
%   else return -0.07324622576333722;  // std dev = 0.000, 407.000 (wgt'ed) examples reached here.  /* #neg=407 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1531075153417433;  // std dev = 0.002, 269.000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.06939383018857057;  // std dev = 0.091, 119.000 (wgt'ed) examples reached here.  /* #neg=119 */
%   else return -0.06842697784420332;  // std dev = 0.000, 388.000 (wgt'ed) examples reached here.  /* #neg=388 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13325466147463605;  // std dev = 0.259, 240.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=239 */
%   | else if ( genre(A, E) )
%   | | then return -0.06278812962559123;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.13391776495705307;  // std dev = 0.000, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return -0.06409173769858376;  // std dev = 2.36e-08, 142.000 (wgt'ed) examples reached here.  /* #neg=142 */
%   else return -0.06419184008202555;  // std dev = 2.05e-07, 414.000 (wgt'ed) examples reached here.  /* #neg=414 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063765
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.916 seconds
Total inference time: 1.444 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064544
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 3.632 seconds
Refined model CLL: -0.064544


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063765
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 13.465 seconds
Total inference time: 1.444 seconds
AUC ROC: 1.0
Total revision time: 13.465
Best scored revision CLL: -0.064544


Dataset: 4_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 00:05:55
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063765, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 13.465, 'Inference time': 1.444, 'parameter_0.8': {'AUC ROC': 0.971565, 'AUC PR': 0.823063, 'CLL': -0.113141, 'Precision': [1.0, 0.5], 'Recall': 0.777778, 'F1': 0.875, 'Learning time': 2.829, 'Inference time': 1.42}}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995085;  // std dev = 1.08e-06, 288.000 (wgt'ed) examples reached here.  /* #pos=288 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.13342983397591693;  // std dev = 5.959, 178.000 (wgt'ed) examples reached here.  /* #neg=129 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048788;  // std dev = 0.000, 516.000 (wgt'ed) examples reached here.  /* #neg=516 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.6994245093120579;  // std dev = 2.209, 295.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=288 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 7.45e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.07669492241838184;  // std dev = 6.120, 208.000 (wgt'ed) examples reached here.  /* #neg=159 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839227;  // std dev = 0.000, 480.000 (wgt'ed) examples reached here.  /* #neg=480 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13174203260488299;  // std dev = 0.203, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else if ( movie(E, A) )
%   | | then return 0.35841391386568194;  // std dev = 0.365, 491.000 (wgt'ed) examples reached here.  /* #neg=154 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360579;  // std dev = 0.000, 507.000 (wgt'ed) examples reached here.  /* #neg=507 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.45955127653475936;  // std dev = 1.492, 293.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=288 */
%   | else if ( genre(A, E) )
%   | | then return -0.09983693402768944;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.0021814689573649965;  // std dev = 6.167, 219.000 (wgt'ed) examples reached here.  /* #neg=170 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783534;  // std dev = 1.60e-08, 512.000 (wgt'ed) examples reached here.  /* #neg=512 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13992613305246202;  // std dev = 0.337, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( genre(B, E) )
%   | | then return 0.35995979850726195;  // std dev = 0.000, 288.000 (wgt'ed) examples reached here.  /* #pos=288 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.018236607738786968;  // std dev = 6.087, 201.000 (wgt'ed) examples reached here.  /* #neg=152 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926133;  // std dev = 0.000, 474.000 (wgt'ed) examples reached here.  /* #neg=474 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.27441102570774467;  // std dev = 1.073, 292.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=288 */
%   | else if ( movie(E, A) )
%   | | then return -0.003390583091595709;  // std dev = 0.409, 226.000 (wgt'ed) examples reached here.  /* #neg=177 #pos=49 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.38e-07, 462.000 (wgt'ed) examples reached here.  /* #neg=462 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1246361976529186;  // std dev = 0.422, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else if ( genre(B, E) )
%   | | then return 0.22971707152743154;  // std dev = 0.000, 288.000 (wgt'ed) examples reached here.  /* #pos=288 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.016851734696624484;  // std dev = 6.082, 200.000 (wgt'ed) examples reached here.  /* #neg=151 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109241;  // std dev = 0.000, 568.000 (wgt'ed) examples reached here.  /* #neg=568 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18665808889107605;  // std dev = 0.827, 291.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=288 */
%   | else if ( genre(A, E) )
%   | | then return -0.071304095422035;  // std dev = 7.45e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.01760157892034566;  // std dev = 6.067, 197.000 (wgt'ed) examples reached here.  /* #neg=148 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333684;  // std dev = 7.68e-09, 515.000 (wgt'ed) examples reached here.  /* #neg=515 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14504975802196446;  // std dev = 0.535, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else if ( movie(E, B) )
%   | | then return 0.08816937407707162;  // std dev = 6.476, 508.000 (wgt'ed) examples reached here.  /* #neg=171 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.0684269778442036;  // std dev = 0.000, 528.000 (wgt'ed) examples reached here.  /* #neg=528 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14795529200841823;  // std dev = 0.774, 291.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=288 */
%   | else if ( genre(A, E) )
%   | | then return -0.05823981482508837;  // std dev = 4.56e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.0034285688220643757;  // std dev = 6.046, 193.000 (wgt'ed) examples reached here.  /* #neg=144 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202532;  // std dev = 1.06e-08, 539.000 (wgt'ed) examples reached here.  /* #neg=539 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.971565
   AUC PR    = 0.823063
   CLL	      = -0.126542
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.875


Total learning time: 3.423 seconds
Total inference time: 1.715 seconds
AUC ROC: 0.971565


Results scoring model
   AUC ROC   = 0.982257
   AUC PR    = 0.888508
   CLL	      = -0.122499
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.854599
   F1        = 0.9216


Total scoring time: 3.421 seconds
Parameter learned model CLL: -0.122499


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 17, 0], 'true,false,true': [1.08e-06, 0, 288], 'true,false,false,true': [5.959, 129, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 516, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [2.209, 7, 288], 'true,false,true': [7.45e-09, 16, 0], 'true,false,false,true': [6.12, 159, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 480, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.203, 23, 0], 'true,false,true': [0.365, 154, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 507, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.492, 5, 288], 'true,false,true': [0.0, 15, 0], 'true,false,false,true': [6.167, 170, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.6e-08, 512, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.337, 16, 0], 'true,false,true': [0.0, 0, 288], 'true,false,false,true': [6.087, 152, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 474, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [1.073, 4, 288], 'true,false,true': [0.409, 177, 49], 'true,false,false': [0.0, 0, 0], 'false,true': [1.38e-07, 462, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.422, 21, 0], 'true,false,true': [0.0, 0, 288], 'true,false,false,true': [6.082, 151, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 568, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.827, 3, 288], 'true,false,true': [7.45e-09, 13, 0], 'true,false,false,true': [6.067, 148, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.68e-09, 515, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.535, 20, 0], 'true,false,true': [6.476, 171, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 528, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.774, 3, 288], 'true,false,true': [4.56e-09, 12, 0], 'true,false,false,true': [6.046, 144, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.06e-08, 539, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.2109057863851302, -9.294890438722241e-17], 'true': [-3.2653618371328133e-18, 0.20019248834939213], 'true,false': [4.046146134189459e-15, 0.19950132559020417], 'true,false,false': [0.19950132559020417, nan], 'false': [-9.294890438722241e-17, nan]}, {'': [0.1823370537898901, -1.2397490441647582e-16], 'true': [0.016537721449347054, 0.1699276767876235], 'true,false': [3.469446951953614e-18, 0.1800804363905351], 'true,false,false': [0.1800804363905351, nan], 'false': [-1.2397490441647582e-16, nan]}, {'': [0.13791263704839293, -7.007324810257399e-18], 'true': [0.0017924412342051597, 0.13353832550621828], 'true,false': [0.13353832550621828, nan], 'false': [-7.007324810257399e-18, nan]}, {'': [0.13072132465564676, 2.5673907444456745e-16], 'true': [0.007596878683191804, 0.16312140483032744], 'true,false': [0.0, 0.17368278392861006], 'true,false,false': [0.17368278392861006, nan], 'false': [2.5673907444456745e-16, nan]}, {'': [0.10493845800823892, -1.1242764806330699e-17], 'true': [0.0071179717852482595, 0.10404614103977144], 'true,false': [-8.881784197001252e-16, 0.1843518724784055], 'true,false,false': [0.1843518724784055, nan], 'false': [-1.1242764806330699e-17, nan]}, {'': [0.0941932100435638, 4.133297840595821e-17], 'true': [0.003942196324121118, 0.1672973741773998], 'true,false': [0.1672973741773998, nan], 'false': [4.133297840595821e-17, nan]}, {'': [0.08636053665794517, -7.974841444490562e-17], 'true': [0.008463311962220131, 0.08676897647451803], 'true,false': [-5.612794180049402e-16, 0.1849749999999992], 'true,false,false': [0.1849749999999992, nan], 'false': [-7.974841444490562e-17, nan]}, {'': [0.08245207190403224, 5.863702188311507e-17], 'true': [0.002347585549792947, 0.17575512653775455], 'true,false': [4.270088556250602e-18, 0.1868638717823191], 'true,false,false': [0.1868638717823191, nan], 'false': [5.863702188311507e-17, nan]}, {'': [0.08196531106027477, -1.1775092685418326e-16], 'true': [0.014314719065573817, 0.08256844884630986], 'true,false': [0.08256844884630986, nan], 'false': [-1.1775092685418326e-16, nan]}, {'': [0.08032486843146346, 1.1122828076021976e-16], 'true': [0.002059375973049583, 0.17854902438275264], 'true,false': [1.734723475976807e-18, 0.18942790410480762], 'true,false,false': [0.18942790410480762, nan], 'false': [1.1122828076021976e-16, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995085;  // std dev = 1.08e-06, 288.000 (wgt'ed) examples reached here.  /* #pos=288 */
%   | | else if ( actor(B) )
%   | | | then return -0.14185106490048807;  // std dev = 0.000, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
%   | | | else return 0.8581489350995122;  // std dev = 1.69e-07, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   else return -0.14185106490048752;  // std dev = 1.63e-07, 481.000 (wgt'ed) examples reached here.  /* #neg=481 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109548;  // std dev = 0.000, 105.000 (wgt'ed) examples reached here.  /* #pos=105 */
%   | | else if ( actor(A) )
%   | | | then return 0.7194734122109567;  // std dev = 0.000, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.7194734122109547;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.12759855449034474;  // std dev = 0.218, 144.000 (wgt'ed) examples reached here.  /* #neg=144 */
%   else return -0.12544463852839235;  // std dev = 0.000, 509.000 (wgt'ed) examples reached here.  /* #neg=509 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 7.45e-09, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | else if ( director(B), actor(A) )
%   | | then return 0.5553664367462833;  // std dev = 4.77e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | | else return -0.11564269680628088;  // std dev = 0.283, 162.000 (wgt'ed) examples reached here.  /* #neg=162 */
%   else return -0.11231637819360572;  // std dev = 0.000, 530.000 (wgt'ed) examples reached here.  /* #neg=530 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.4175135841583117;  // std dev = 0.000, 105.000 (wgt'ed) examples reached here.  /* #pos=105 */
%   | | else return 0.4064096287862026;  // std dev = 0.075, 187.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=183 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783631;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.41751358415831047;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.10709904653409365;  // std dev = 0.318, 133.000 (wgt'ed) examples reached here.  /* #neg=133 */
%   else return -0.10159632948783547;  // std dev = 3.31e-07, 482.000 (wgt'ed) examples reached here.  /* #neg=482 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10143348425336815;  // std dev = 0.083, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else if ( genre(B, E) )
%   | | then return 0.3222520089349732;  // std dev = 0.020, 288.000 (wgt'ed) examples reached here.  /* #pos=288 */
%   | | else if ( actor(B) )
%   | | | then return -0.0917717370700029;  // std dev = 5.16e-08, 140.000 (wgt'ed) examples reached here.  /* #neg=140 */
%   | | | else return 0.32071184716014944;  // std dev = 2.98e-08, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   else return -0.09269127618926133;  // std dev = 0.000, 474.000 (wgt'ed) examples reached here.  /* #neg=474 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.2560704352017414;  // std dev = 0.019, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.09094159896948736;  // std dev = 0.425, 168.000 (wgt'ed) examples reached here.  /* #neg=168 */
%   else return -0.08518475138839678;  // std dev = 1.44e-07, 473.000 (wgt'ed) examples reached here.  /* #neg=473 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07773094949629854;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( genre(B, E) )
%   | | then return 0.21052547384414574;  // std dev = 0.015, 288.000 (wgt'ed) examples reached here.  /* #pos=288 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.20960887055897715;  // std dev = 4.21e-08, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.07996369918821365;  // std dev = 0.252, 154.000 (wgt'ed) examples reached here.  /* #neg=154 */
%   else return -0.07877675473109197;  // std dev = 1.50e-07, 483.000 (wgt'ed) examples reached here.  /* #neg=483 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17564306284695483;  // std dev = 0.412, 290.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=288 */
%   | else if ( genre(A, E) )
%   | | then return -0.07233822947015488;  // std dev = 3.73e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.17698731925424213;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.07419618448609028;  // std dev = 0.239, 162.000 (wgt'ed) examples reached here.  /* #neg=162 */
%   else return -0.0732462257633371;  // std dev = 9.88e-08, 465.000 (wgt'ed) examples reached here.  /* #neg=465 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.15332048244685023;  // std dev = 0.013, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06987125374956485;  // std dev = 0.206, 168.000 (wgt'ed) examples reached here.  /* #neg=168 */
%   else return -0.06842697784420351;  // std dev = 0.000, 480.000 (wgt'ed) examples reached here.  /* #neg=480 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13187235792585622;  // std dev = 0.449, 291.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=288 */
%   | else if ( genre(A, E) )
%   | | then return -0.06335657756817582;  // std dev = 6.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.13386588504537336;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.06598652010477359;  // std dev = 0.263, 156.000 (wgt'ed) examples reached here.  /* #neg=156 */
%   else return -0.06419184008202536;  // std dev = 2.46e-07, 514.000 (wgt'ed) examples reached here.  /* #neg=514 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063566
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 4.474 seconds
Total inference time: 1.516 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.06495
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 3.324 seconds
Refined model CLL: -0.06495


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063566
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 14.642 seconds
Total inference time: 1.516 seconds
AUC ROC: 1.0
Total revision time: 14.642
Best scored revision CLL: -0.06495


Dataset: 4_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 00:06:14
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063566, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 14.642, 'Inference time': 1.516, 'parameter_1.0': {'AUC ROC': 0.971565, 'AUC PR': 0.823063, 'CLL': -0.126542, 'Precision': [1.0, 0.5], 'Recall': 0.777778, 'F1': 0.875, 'Learning time': 3.423, 'Inference time': 1.715}}


Starting fold 1

Target train facts examples: 863
Target train pos examples: 326
Target train neg examples: 10928

Target test facts examples: 215
Target test pos	 examples: 56
Target test neg examples: 3308

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995124;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.1795775065280838;  // std dev = 2.471, 28.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048763;  // std dev = 8.69e-08, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7046502885137729;  // std dev = 0.837, 57.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=56 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.04913910286669577;  // std dev = 2.659, 42.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839136;  // std dev = 0.000, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( movie(E, A) )
%   | | then return 0.3175665316607945;  // std dev = 0.377, 102.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=65 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.1123163781936062;  // std dev = 8.43e-08, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.467924103677924;  // std dev = 0.678, 57.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=56 */
%   | else if ( genre(A, E) )
%   | | then return -0.11231637819360639;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.0591926040454929;  // std dev = 2.543, 32.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783626;  // std dev = 4.75e-09, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.29013647629388367;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.3662612657218815;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.04027651964902852;  // std dev = 2.558, 33.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.092691276189261;  // std dev = 4.21e-08, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.27694225888637347;  // std dev = 0.516, 57.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=56 */
%   | else if ( movie(E, A) )
%   | | then return -0.025340049671258462;  // std dev = 0.395, 45.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=9 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.0851847513883968;  // std dev = 5.37e-08, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07620320491986463;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.232991951711305;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.008116921544214707;  // std dev = 2.610, 37.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109158;  // std dev = 5.96e-08, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.19395938739340873;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else if ( genre(A, E) )
%   | | then return -0.07100904016396663;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.0134107782849145;  // std dev = 2.598, 36.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333707;  // std dev = 0.000, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.0664651308948677;  // std dev = 1.32e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( movie(E, B) )
%   | | then return 0.09065304442174725;  // std dev = 2.780, 96.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=65 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420267;  // std dev = 4.27e-09, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1453627788178529;  // std dev = 0.447, 57.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=56 */
%   | else if ( genre(A, E) )
%   | | then return -0.06245807275275317;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.03089650600491432;  // std dev = 2.641, 40.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.12317
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.619 seconds
Total inference time: 1.886 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.983429
   AUC PR    = 0.896553
   CLL	      = -0.121412
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.861538
   F1        = 0.92562


Total scoring time: 1.652 seconds
Parameter learned model CLL: -0.121412


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 5, 0], 'true,false,true': [0.0, 0, 56], 'true,false,false,true': [2.471, 19, 9], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.69e-08, 95, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.837, 1, 56], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [2.659, 33, 9], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 100, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 3, 0], 'true,false,true': [0.377, 37, 65], 'true,false,false': [0.0, 0, 0], 'false,true': [8.43e-08, 105, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.678, 1, 56], 'true,false,true': [0.0, 7, 0], 'true,false,false,true': [2.543, 23, 9], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.75e-09, 96, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 3, 0], 'true,false,true': [0.0, 0, 56], 'true,false,false,true': [2.558, 24, 9], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.21e-08, 97, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.516, 1, 56], 'true,false,true': [0.395, 36, 9], 'true,false,false': [0.0, 0, 0], 'false,true': [5.37e-08, 93, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 4, 0], 'true,false,true': [0.0, 0, 56], 'true,false,false,true': [2.61, 28, 9], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.96e-08, 104, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 56], 'true,false,true': [0.0, 5, 0], 'true,false,false,true': [2.598, 27, 9], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 106, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [1.32e-09, 3, 0], 'true,false,true': [2.78, 31, 65], 'true,false,false': [0.0, 0, 0], 'false,true': [4.27e-09, 84, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.447, 1, 56], 'true,false,true': [0.0, 3, 0], 'true,false,false,true': [2.641, 31, 9], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 101, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.1969448301982065, 7.946859544685331e-17], 'true': [-2.7755575615628915e-18, 0.17502834467120093], 'true,false': [-1.2688263138573217e-16, 0.21811224489795927], 'true,false,false': [0.21811224489795927, nan], 'false': [7.946859544685331e-17, nan]}, {'': [0.18347065712534036, -1.3322676295501878e-17], 'true': [0.012304599783948732, 0.1683673469387752], 'true,false': [nan, 0.1683673469387752], 'true,false,false': [0.1683673469387752, nan], 'false': [-1.3322676295501878e-17, nan]}, {'': [0.1433392273748447, 6.767073673905717e-17], 'true': [0.0, 0.14194768994887677], 'true,false': [0.14194768994887677, nan], 'false': [6.767073673905717e-17, nan]}, {'': [0.12052250564060889, 2.1973164029039556e-17], 'true': [0.008057636290567553, 0.17019742547104996], 'true,false': [-1.982541115402065e-18, 0.20214843750000014], 'true,false,false': [0.20214843750000014, nan], 'false': [2.1973164029039556e-17, nan]}, {'': [0.10417695327722691, 1.8312957107219077e-17], 'true': [-1.850371707708594e-17, 0.09833671551314802], 'true,false': [-2.379049338482478e-16, 0.19834710743801667], 'true,false,false': [0.19834710743801667, nan], 'false': [1.8312957107219077e-17, nan]}, {'': [0.09412040053843919, 3.1038493161563513e-17], 'true': [0.004665104256385233, 0.15636816934065814], 'true,false': [0.15636816934065814, nan], 'false': [3.1038493161563513e-17, nan]}, {'': [0.08373835587006685, 3.416070845000482e-17], 'true': [0.0, 0.08534904797000542], 'true,false': [-7.137148015447435e-17, 0.18407596785975153], 'true,false,false': [0.18407596785975153, nan], 'false': [3.416070845000482e-17, nan]}, {'': [0.07879777736944565, -3.142140635731575e-18], 'true': [0.0, 0.1653972677182922], 'true,false': [-6.938893903907229e-19, 0.18749999999999975], 'true,false,false': [0.18749999999999975, nan], 'false': [-3.142140635731575e-18, nan]}, {'': [0.07876881530864513, 1.850371707708594e-17], 'true': [5.782411586589357e-19, 0.08048227651386385], 'true,false': [0.08048227651386385, nan], 'false': [1.850371707708594e-17, nan]}, {'': [0.07958506087599866, -1.5389230044309102e-17], 'true': [0.003510902169557367, 0.16227395127067032], 'true,false': [0.0, 0.17437499999999997], 'true,false,false': [0.17437499999999997, nan], 'false': [-1.5389230044309102e-17, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995124;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else if ( actor(B) )
%   | | | then return -0.1418510649004877;  // std dev = 2.58e-08, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.14185106490048763;  // std dev = 8.16e-08, 110.000 (wgt'ed) examples reached here.  /* #neg=110 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.7194734122109542;  // std dev = 1.19e-07, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else return -0.12544463852839138;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   else return -0.12544463852839136;  // std dev = 0.000, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( director(B), actor(A) )
%   | | then return 0.5553664367462837;  // std dev = 2.80e-07, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | | else return -0.11680391970921686;  // std dev = 0.141, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   else return -0.11231637819360622;  // std dev = 6.50e-08, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.41751358415831036;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return 0.404203073551999;  // std dev = 0.082, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( actor(B) )
%   | | | then return -0.10118746299035533;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | | else return 0.4175135841583102;  // std dev = 1.49e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.10159632948783626;  // std dev = 4.21e-08, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11241498582416481;  // std dev = 0.037, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.322684226968605;  // std dev = 0.010, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else if ( actor(B) )
%   | | | then return -0.09234883061009475;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | | else return 0.3207118471601497;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.09269127618926097;  // std dev = 4.59e-08, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.25633177419008946;  // std dev = 0.010, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else return -0.0877465166193274;  // std dev = 0.046, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   else return -0.08518475138839682;  // std dev = 4.94e-08, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09708268718421657;  // std dev = 0.030, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.21073926683266048;  // std dev = 0.008, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else if ( actor(B) )
%   | | | then return -0.07832091389015929;  // std dev = 7.45e-09, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | | else return 0.20956557703268142;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.07877675473109161;  // std dev = 5.48e-08, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.17649782517765678;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return 0.16392959023586068;  // std dev = 0.063, 40.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=38 */
%   | else if ( genre(A, E) )
%   | | then return -0.0774966518927665;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.17695556037690063;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.08441187929766893;  // std dev = 0.341, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   else return -0.07324622576333707;  // std dev = 0.000, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.0911311692645728;  // std dev = 0.047, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( director(B), actor(A) )
%   | | then return 0.1543084051873586;  // std dev = 0.013, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | | else if ( actor(A) )
%   | | | then return -0.06735074542285703;  // std dev = 1.49e-08, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | | else return -0.23331525277486395;  // std dev = 0.332, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.06842697784420265;  // std dev = 4.47e-08, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13546832337371334;  // std dev = 0.011, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else if ( genre(A, E) )
%   | | then return -0.06626789113874434;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.13372979891573333;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.07295185485653208;  // std dev = 0.277, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   else return -0.06419184008202626;  // std dev = 0.000, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063153
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.375 seconds
Total inference time: 1.925 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.06633
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.613 seconds
Refined model CLL: -0.06633


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063153
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 7.259 seconds
Total inference time: 1.925 seconds
AUC ROC: 1.0
Total revision time: 7.259
Best scored revision CLL: -0.06633


Dataset: 4_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 00:06:26
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063153, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 7.259, 'Inference time': 1.925, 'parameter_0.2': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.12317, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 1.619, 'Inference time': 1.886}}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995111;  // std dev = 5.06e-07, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.1456489350995117;  // std dev = 4.048, 80.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=23 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004884;  // std dev = 0.000, 199.000 (wgt'ed) examples reached here.  /* #neg=199 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7116500969263312;  // std dev = 0.841, 108.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=107 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.14210982145566767;  // std dev = 4.005, 76.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=23 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839172;  // std dev = 0.000, 216.000 (wgt'ed) examples reached here.  /* #neg=216 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.18061430341965334;  // std dev = 0.125, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( movie(E, A) )
%   | | then return 0.3395755796698033;  // std dev = 0.379, 196.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=130 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360651;  // std dev = 0.000, 187.000 (wgt'ed) examples reached here.  /* #neg=187 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4604122142890428;  // std dev = 0.937, 109.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=107 */
%   | else if ( genre(A, E) )
%   | | then return -0.09552989594014728;  // std dev = 3.73e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.09219793752460566;  // std dev = 3.930, 70.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=23 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783652;  // std dev = 0.000, 196.000 (wgt'ed) examples reached here.  /* #neg=196 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14222151915126557;  // std dev = 0.229, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(B, E) )
%   | | then return 0.3612860150975791;  // std dev = 1.88e-07, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.005009452275166045;  // std dev = 4.130, 89.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=23 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926057;  // std dev = 8.94e-08, 194.000 (wgt'ed) examples reached here.  /* #neg=194 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2729120358923344;  // std dev = 0.748, 109.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=107 */
%   | else if ( movie(E, A) )
%   | | then return -0.03596574892762553;  // std dev = 0.402, 111.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=23 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 7.30e-08, 192.000 (wgt'ed) examples reached here.  /* #neg=192 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10007463069291142;  // std dev = 0.218, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( genre(B, E) )
%   | | then return 0.23076708770246857;  // std dev = 0.000, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.05906116466493046;  // std dev = 3.993, 75.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=23 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109147;  // std dev = 7.45e-08, 196.000 (wgt'ed) examples reached here.  /* #neg=196 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18793934702954737;  // std dev = 0.475, 108.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=107 */
%   | else if ( genre(A, E) )
%   | | then return -0.0677547218466797;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.028728374618544127;  // std dev = 4.048, 80.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=23 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333671;  // std dev = 7.68e-09, 178.000 (wgt'ed) examples reached here.  /* #neg=178 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.0962472503530307;  // std dev = 0.244, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( movie(E, B) )
%   | | then return 0.10621482873318017;  // std dev = 4.144, 186.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=130 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420261;  // std dev = 4.66e-09, 208.000 (wgt'ed) examples reached here.  /* #neg=208 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14651666506842093;  // std dev = 0.453, 108.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=107 */
%   | else if ( genre(A, E) )
%   | | then return -0.058101623924374464;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.04590061567520476;  // std dev = 4.182, 96.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=23 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202626;  // std dev = 9.31e-10, 223.000 (wgt'ed) examples reached here.  /* #neg=223 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.132381
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.349 seconds
Total inference time: 1.95 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.979195
   AUC PR    = 0.866809
   CLL	      = -0.129012
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.823077
   F1        = 0.902954


Total scoring time: 2.051 seconds
Parameter learned model CLL: -0.129012


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 4, 0], 'true,false,true': [5.06e-07, 0, 107], 'true,false,false,true': [4.048, 57, 23], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 199, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.841, 1, 107], 'true,false,true': [0.0, 4, 0], 'true,false,false,true': [4.005, 53, 23], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 216, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.125, 5, 0], 'true,false,true': [0.379, 66, 130], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 187, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.937, 2, 107], 'true,false,true': [3.73e-09, 7, 0], 'true,false,false,true': [3.93, 47, 23], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 196, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.229, 7, 0], 'true,false,true': [1.88e-07, 0, 107], 'true,false,false,true': [4.13, 66, 23], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.94e-08, 194, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.748, 2, 107], 'true,false,true': [0.402, 88, 23], 'true,false,false': [0.0, 0, 0], 'false,true': [7.3e-08, 192, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.218, 9, 0], 'true,false,true': [0.0, 0, 107], 'true,false,false,true': [3.993, 52, 23], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.45e-08, 196, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.475, 1, 107], 'true,false,true': [2.63e-09, 6, 0], 'true,false,false,true': [4.048, 57, 23], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.68e-09, 178, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.244, 8, 0], 'true,false,true': [4.144, 56, 130], 'true,false,false': [0.0, 0, 0], 'false,true': [4.66e-09, 208, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.453, 1, 107], 'true,false,true': [0.0, 4, 0], 'true,false,false,true': [4.182, 73, 23], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.31e-10, 223, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.2173734272635114, -2.410132395166169e-16], 'true': [0.0, 0.21190197031657051], 'true,false': [2.3906110735853837e-15, 0.20484375000000096], 'true,false,false': [0.20484375000000096, nan], 'false': [-2.410132395166169e-16, nan]}, {'': [0.17358942232298774, -6.167905692361981e-17], 'true': [0.006548856038560315, 0.2038937270328572], 'true,false': [0.0, 0.21104570637119208], 'true,false,false': [0.21104570637119208, nan], 'false': [-6.167905692361981e-17, nan]}, {'': [0.1470700420508403, -2.6122894697062506e-17], 'true': [0.0031097377267884753, 0.14401121733935743], 'true,false': [0.14401121733935743, nan], 'false': [-2.6122894697062506e-17, nan]}, {'': [0.12496488180517024, -9.289621226455392e-17], 'true': [0.008056364620902298, 0.20346912672189446], 'true,false': [1.982541115402065e-18, 0.22061224489795936], 'true,false,false': [0.22061224489795936, nan], 'false': [-9.289621226455392e-17, nan]}, {'': [0.11854647751984919, 4.1204153491242925e-17], 'true': [0.007461884625725708, 0.1184869349298284], 'true,false': [3.3202931577574774e-16, 0.1916424693851783], 'true,false,false': [0.1916424693851783, nan], 'false': [4.1204153491242925e-17, nan]}, {'': [0.10787419995506242, 2.7755575615628914e-17], 'true': [0.0051329749683813744, 0.16149515002089426], 'true,false': [0.16149515002089426, nan], 'false': [2.7755575615628914e-17, nan]}, {'': [0.09358324381148966, 2.832201593431522e-17], 'true': [0.005291635503092014, 0.0947619188045784], 'true,false': [-4.150366447196847e-17, 0.21262222222222174], 'true,false,false': [0.21262222222222174, nan], 'false': [2.832201593431522e-17, nan]}, {'': [0.09269888251418354, 5.98771968337163e-17], 'true': [0.002090400180711547, 0.19115647839287303], 'true,false': [1.1564823173178713e-18, 0.20484375], 'true,false,false': [0.20484375, nan], 'false': [5.98771968337163e-17, nan]}, {'': [0.0904307186076969, 2.241796492031566e-17], 'true': [0.007461642674009141, 0.09230893489105883], 'true,false': [0.09230893489105883, nan], 'false': [2.241796492031566e-17, nan]}, {'': [0.0943617612830347, 0.0], 'true': [0.0018972759248956567, 0.17490154973406166], 'true,false': [0.0, 0.1821831597222224], 'true,false,false': [0.1821831597222224, nan], 'false': [0.0, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995111;  // std dev = 5.06e-07, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.8581489350995121;  // std dev = 8.43e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.14185106490048766;  // std dev = 5.77e-08, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   else return -0.14185106490048843;  // std dev = 0.000, 210.000 (wgt'ed) examples reached here.  /* #neg=210 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.719473412210955;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else return 0.7074031543432492;  // std dev = 0.100, 70.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=69 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( actor(B) )
%   | | | then return -0.12544463852839158;  // std dev = 0.000, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | | | else return 0.7194734122109543;  // std dev = 5.96e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   else return -0.12544463852839166;  // std dev = 0.000, 202.000 (wgt'ed) examples reached here.  /* #neg=202 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5569473525956091;  // std dev = 0.017, 130.000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.11384458775338925;  // std dev = 0.112, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
%   else return -0.11231637819360658;  // std dev = 0.000, 197.000 (wgt'ed) examples reached here.  /* #neg=197 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.41902348524081523;  // std dev = 0.015, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | else if ( genre(A, E) )
%   | | then return -0.10145692780200768;  // std dev = 8.33e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.41712916197161504;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.10785743190656052;  // std dev = 0.179, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   else return -0.10159632948783648;  // std dev = 0.000, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.18782379174295818;  // std dev = 0.190, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.3217363605379676;  // std dev = 0.013, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.3204512400618142;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.09368620835518215;  // std dev = 0.098, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   else return -0.09269127618926058;  // std dev = 8.94e-08, 190.000 (wgt'ed) examples reached here.  /* #neg=190 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.25571641588736804;  // std dev = 0.012, 130.000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.08376178665221413;  // std dev = 0.015, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   else return -0.08518475138839678;  // std dev = 8.02e-08, 211.000 (wgt'ed) examples reached here.  /* #neg=211 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1096302959551733;  // std dev = 0.205, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.21027764285945294;  // std dev = 0.010, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | | else if ( actor(B) )
%   | | | then return -0.07824419322842353;  // std dev = 3.07e-08, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | | | else return 0.20951248715930418;  // std dev = 2.58e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   else return -0.07877675473109146;  // std dev = 7.15e-08, 208.000 (wgt'ed) examples reached here.  /* #neg=208 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17747790524866203;  // std dev = 0.009, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | else if ( genre(A, E) )
%   | | then return -0.06514273384835788;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( actor(B) )
%   | | | then return -0.072784032797074;  // std dev = 1.67e-08, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | | | else return 0.17691661340263828;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   else return -0.07324622576333675;  // std dev = 9.06e-08, 164.000 (wgt'ed) examples reached here.  /* #neg=164 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.15295789452085476;  // std dev = 0.008, 130.000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else if ( actor(B) )
%   | | then return -0.0677065063944521;  // std dev = 0.011, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   | | else return -0.3028274226825681;  // std dev = 0.024, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.06842697784420261;  // std dev = 6.66e-08, 202.000 (wgt'ed) examples reached here.  /* #neg=202 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.13333827603400739;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else return 0.1238896394838122;  // std dev = 0.064, 71.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=69 */
%   | else if ( genre(A, E) )
%   | | then return -0.05750480381085164;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( actor(B) )
%   | | | then return -0.06385350800145324;  // std dev = 0.000, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   | | | else return 0.13385983394076242;  // std dev = 1.67e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   else return -0.06419184008202626;  // std dev = 0.000, 203.000 (wgt'ed) examples reached here.  /* #neg=203 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063474
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.071 seconds
Total inference time: 1.864 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.066356
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.001 seconds
Refined model CLL: -0.066356


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063474
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 9.472 seconds
Total inference time: 1.864 seconds
AUC ROC: 1.0
Total revision time: 9.472
Best scored revision CLL: -0.066356


Dataset: 4_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 00:06:40
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063474, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 9.472, 'Inference time': 1.864, 'parameter_0.4': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.132381, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 2.349, 'Inference time': 1.95}}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995096;  // std dev = 1.02e-06, 164.000 (wgt'ed) examples reached here.  /* #pos=164 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.16814893509951095;  // std dev = 4.625, 100.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=31 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048785;  // std dev = 9.88e-08, 300.000 (wgt'ed) examples reached here.  /* #neg=300 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.6848861235841994;  // std dev = 2.189, 171.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=164 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.1288758885296309;  // std dev = 4.683, 106.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=31 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.125444638528392;  // std dev = 0.000, 294.000 (wgt'ed) examples reached here.  /* #neg=294 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1305131156783572;  // std dev = 0.173, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else if ( movie(E, A) )
%   | | then return 0.357887694855658;  // std dev = 0.373, 284.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=195 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360679;  // std dev = 0.000, 304.000 (wgt'ed) examples reached here.  /* #neg=304 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4666629777340584;  // std dev = 0.948, 166.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=164 */
%   | else if ( genre(A, E) )
%   | | then return -0.09994743052741649;  // std dev = 3.73e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.00861248182004928;  // std dev = 4.822, 124.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=31 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783663;  // std dev = 0.000, 311.000 (wgt'ed) examples reached here.  /* #neg=311 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.15580325380338744;  // std dev = 0.274, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( genre(B, E) )
%   | | then return 0.36179409118028666;  // std dev = 3.77e-07, 164.000 (wgt'ed) examples reached here.  /* #pos=164 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.06703185698176249;  // std dev = 4.625, 100.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=31 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926043;  // std dev = 1.52e-07, 297.000 (wgt'ed) examples reached here.  /* #neg=297 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.276578298396007;  // std dev = 0.755, 166.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=164 */
%   | else if ( movie(E, A) )
%   | | then return -0.006753476639873799;  // std dev = 0.421, 131.000 (wgt'ed) examples reached here.  /* #neg=100 #pos=31 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.12e-07, 334.000 (wgt'ed) examples reached here.  /* #neg=334 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.15579741464879757;  // std dev = 0.378, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( genre(B, E) )
%   | | then return 0.23041699610571467;  // std dev = 1.12e-07, 164.000 (wgt'ed) examples reached here.  /* #pos=164 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.0021939253558937908;  // std dev = 4.815, 123.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=31 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109143;  // std dev = 2.98e-08, 326.000 (wgt'ed) examples reached here.  /* #neg=326 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18366743550344233;  // std dev = 0.806, 167.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=164 */
%   | else if ( genre(A, E) )
%   | | then return -0.06810875229642804;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.006693489733177955;  // std dev = 4.788, 119.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=31 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333698;  // std dev = 5.67e-09, 298.000 (wgt'ed) examples reached here.  /* #neg=298 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.2014194755027664;  // std dev = 0.416, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( movie(E, B) )
%   | | then return 0.0955364827287199;  // std dev = 4.993, 285.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=195 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420278;  // std dev = 0.000, 259.000 (wgt'ed) examples reached here.  /* #neg=259 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1447778879321023;  // std dev = 0.732, 167.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=164 */
%   | else if ( genre(A, E) )
%   | | then return -0.052868080496904606;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.0017244494147421925;  // std dev = 4.751, 114.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=31 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202594;  // std dev = 6.84e-09, 303.000 (wgt'ed) examples reached here.  /* #neg=303 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.131239
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.212 seconds
Total inference time: 1.955 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.981147
   AUC PR    = 0.880008
   CLL	      = -0.127539
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.841026
   F1        = 0.913649


Total scoring time: 2.321 seconds
Parameter learned model CLL: -0.127539


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 10, 0], 'true,false,true': [1.02e-06, 0, 164], 'true,false,false,true': [4.625, 69, 31], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.88e-08, 300, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [2.189, 7, 164], 'true,false,true': [5.27e-09, 10, 0], 'true,false,false,true': [4.683, 75, 31], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 294, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.173, 18, 0], 'true,false,true': [0.373, 89, 195], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 304, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.948, 2, 164], 'true,false,true': [3.73e-09, 9, 0], 'true,false,false,true': [4.822, 93, 31], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 311, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.274, 9, 0], 'true,false,true': [3.77e-07, 0, 164], 'true,false,false,true': [4.625, 69, 31], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.52e-07, 297, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.755, 2, 164], 'true,false,true': [0.421, 100, 31], 'true,false,false': [0.0, 0, 0], 'false,true': [1.12e-07, 334, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.378, 12, 0], 'true,false,true': [1.12e-07, 0, 164], 'true,false,false,true': [4.815, 92, 31], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.98e-08, 326, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.806, 3, 164], 'true,false,true': [0.0, 7, 0], 'true,false,false,true': [4.788, 88, 31], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.67e-09, 298, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.416, 11, 0], 'true,false,true': [4.993, 90, 195], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 259, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.732, 3, 164], 'true,false,true': [0.0, 13, 0], 'true,false,false,true': [4.751, 83, 31], 'true,false,false,false': [0.0, 0, 0], 'false,true': [6.84e-09, 303, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.20519207203367762, 3.256654205567126e-17], 'true': [-1.1102230246251566e-17, 0.19305268595041847], 'true,false': [6.325563379327721e-15, 0.21390000000000137], 'true,false,false': [0.21390000000000137, nan], 'false': [3.256654205567126e-17, nan]}, {'': [0.17561883573869913, -8.458842092382145e-17], 'true': [0.028027143952325147, 0.19418098164042608], 'true,false': [2.7755575615628915e-18, 0.20692417230331145], 'true,false,false': [0.20692417230331145, nan], 'false': [-8.458842092382145e-17, nan]}, {'': [0.1441403853403884, -7.450180823142498e-17], 'true': [0.001655606275444668, 0.13895377192923078], 'true,false': [0.13895377192923078, nan], 'false': [-7.450180823142498e-17, nan]}, {'': [0.134586242194831, -4.997788535290094e-17], 'true': [0.005416916231771288, 0.17555556244552536], 'true,false': [1.5419764230904951e-18, 0.18750000000000114], 'true,false,false': [0.18750000000000114, nan], 'false': [-4.997788535290094e-17, nan]}, {'': [0.10365013410797078, 7.775299297038134e-17], 'true': [0.008319028380412954, 0.10146737696911022], 'true,false': [8.665155314147563e-16, 0.2138999999999996], 'true,false,false': [0.2138999999999996, nan], 'false': [7.775299297038134e-17, nan]}, {'': [0.09973613463689608, 3.722903555629267e-17], 'true': [0.0034349854948410594, 0.17689803100200358], 'true,false': [0.17689803100200358, nan], 'false': [3.722903555629267e-17, nan]}, {'': [0.09390741260588707, 2.724473680061734e-18], 'true': [0.011891833333709675, 0.09404181222238622], 'true,false': [7.582010899879118e-17, 0.18851212902372932], 'true,false,false': [0.18851212902372932, nan], 'false': [2.724473680061734e-18, nan]}, {'': [0.08862724446279369, 3.203999332810855e-17], 'true': [0.003893987826996994, 0.18223302695603633], 'true,false': [0.0, 0.19264176258738772], 'true,false,false': [0.19264176258738772, nan], 'false': [3.203999332810855e-17, nan]}, {'': [0.08797200524869982, -1.6288986461681835e-17], 'true': [0.015757151794705316, 0.08748218016461051], 'true,false': [0.08748218016461051, nan], 'false': [-1.6288986461681835e-17, nan]}, {'': [0.08434635984683285, 4.6900510611227736e-17], 'true': [0.0032106157727329796, 0.1779582556342098], 'true,false': [-1.6012832085939759e-18, 0.19798399507540898], 'true,false,false': [0.19798399507540898, nan], 'false': [4.6900510611227736e-17, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995096;  // std dev = 1.02e-06, 164.000 (wgt'ed) examples reached here.  /* #pos=164 */
%   | | else if ( actor(B) )
%   | | | then return -0.14185106490048763;  // std dev = 8.56e-08, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
%   | | | else return 0.8581489350995116;  // std dev = 2.06e-07, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else return -0.14185106490048782;  // std dev = 1.07e-07, 303.000 (wgt'ed) examples reached here.  /* #neg=303 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109548;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else return 0.7038267816417076;  // std dev = 0.114, 108.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=106 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.7194734122109547;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | | else return -0.13118841442693424;  // std dev = 0.264, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
%   else return -0.1254446385283919;  // std dev = 0.000, 269.000 (wgt'ed) examples reached here.  /* #neg=269 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12637434030055217;  // std dev = 0.149, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( actor(A), director(B) )
%   | | then return 0.5574648404141775;  // std dev = 0.027, 195.000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | | else return -0.1166787998911589;  // std dev = 0.244, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
%   else return -0.1123163781936068;  // std dev = 0.000, 305.000 (wgt'ed) examples reached here.  /* #neg=305 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.41700334930203087;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else return 0.4092502715347556;  // std dev = 0.084, 108.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=106 */
%   | else if ( genre(A, E) )
%   | | then return -0.10032036318398453;  // std dev = 4.56e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.41700334930203015;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | | else return -0.10441370313486427;  // std dev = 0.185, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
%   else return -0.10159632948783662;  // std dev = 0.000, 288.000 (wgt'ed) examples reached here.  /* #neg=288 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( female(B) )
%   | | then return -0.09162189738926814;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.10855178184360675;  // std dev = 0.054, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( genre(B, E) )
%   | | then return 0.3236727195106203;  // std dev = 0.031, 164.000 (wgt'ed) examples reached here.  /* #pos=164 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.320365954001735;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | | else return -0.09306357554860656;  // std dev = 0.123, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
%   else return -0.09269127618926044;  // std dev = 1.72e-07, 300.000 (wgt'ed) examples reached here.  /* #neg=300 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25683436186167186;  // std dev = 0.030, 195.000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.08738873810780484;  // std dev = 0.242, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
%   else return -0.08518475138839678;  // std dev = 1.03e-07, 298.000 (wgt'ed) examples reached here.  /* #neg=298 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( actor(B) )
%   | | then return -0.07686848951495125;  // std dev = 0.002, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else return -0.24029025234160542;  // std dev = 5.27e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.21124497992431146;  // std dev = 0.024, 164.000 (wgt'ed) examples reached here.  /* #pos=164 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.20927669065321883;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | | else return -0.0798529221736314;  // std dev = 0.152, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
%   else return -0.07877675473109143;  // std dev = 2.11e-08, 319.000 (wgt'ed) examples reached here.  /* #neg=319 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.1759773681983567;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else return 0.17238549624111096;  // std dev = 0.051, 108.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=106 */
%   | else if ( genre(A, E) )
%   | | then return -0.07149417571026893;  // std dev = 0.001, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.17674360828845764;  // std dev = 1.05e-08, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | | else return -0.07344071516976233;  // std dev = 0.102, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
%   else return -0.07324622576333686;  // std dev = 1.12e-07, 268.000 (wgt'ed) examples reached here.  /* #neg=268 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.15389477642036084;  // std dev = 0.023, 195.000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.06925879780735558;  // std dev = 0.160, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
%   else return -0.06842697784420285;  // std dev = 0.000, 271.000 (wgt'ed) examples reached here.  /* #neg=271 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( actor(A) )
%   | | then return 0.13514562131521385;  // std dev = 0.019, 164.000 (wgt'ed) examples reached here.  /* #pos=164 */
%   | | else return -0.21614875275260667;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(A, E) )
%   | | then return -0.06298362886471294;  // std dev = 0.002, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.13363362998945988;  // std dev = 2.36e-08, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | | else return -0.06419651190111254;  // std dev = 0.091, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
%   else return -0.06419184008202607;  // std dev = 9.06e-08, 280.000 (wgt'ed) examples reached here.  /* #neg=280 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063259
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.729 seconds
Total inference time: 1.914 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.06529
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.779 seconds
Refined model CLL: -0.06529


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063259
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 11.041 seconds
Total inference time: 1.914 seconds
AUC ROC: 1.0
Total revision time: 11.041
Best scored revision CLL: -0.06529


Dataset: 4_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 00:06:55
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063259, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 11.041, 'Inference time': 1.914, 'parameter_0.6': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.131239, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 2.212, 'Inference time': 1.955}}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995091;  // std dev = 1.08e-06, 210.000 (wgt'ed) examples reached here.  /* #pos=210 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.12988806553429513;  // std dev = 6.034, 184.000 (wgt'ed) examples reached here.  /* #neg=134 #pos=50 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048727;  // std dev = 3.01e-07, 420.000 (wgt'ed) examples reached here.  /* #neg=420 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7115024872039821;  // std dev = 1.189, 212.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=210 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 7.45e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.12092035329291789;  // std dev = 6.003, 179.000 (wgt'ed) examples reached here.  /* #neg=129 #pos=50 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839227;  // std dev = 0.000, 427.000 (wgt'ed) examples reached here.  /* #neg=427 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12982469267215968;  // std dev = 0.148, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( movie(E, A) )
%   | | then return 0.3742113663883586;  // std dev = 0.370, 371.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=260 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360615;  // std dev = 0.000, 414.000 (wgt'ed) examples reached here.  /* #neg=414 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4546834114266319;  // std dev = 1.149, 213.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=210 */
%   | else if ( genre(A, E) )
%   | | then return -0.10000937670190832;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.058161679981447695;  // std dev = 5.941, 170.000 (wgt'ed) examples reached here.  /* #neg=120 #pos=50 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783599;  // std dev = 1.01e-08, 389.000 (wgt'ed) examples reached here.  /* #neg=389 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13067348839903375;  // std dev = 0.249, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( genre(B, E) )
%   | | then return 0.3546763706633141;  // std dev = 2.38e-07, 210.000 (wgt'ed) examples reached here.  /* #pos=210 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.08673144391117418;  // std dev = 5.774, 150.000 (wgt'ed) examples reached here.  /* #neg=100 #pos=50 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926064;  // std dev = 1.87e-07, 368.000 (wgt'ed) examples reached here.  /* #neg=368 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2731416503521862;  // std dev = 0.760, 212.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=210 */
%   | else if ( movie(E, A) )
%   | | then return 0.032398078881685166;  // std dev = 0.446, 176.000 (wgt'ed) examples reached here.  /* #neg=126 #pos=50 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.28e-07, 375.000 (wgt'ed) examples reached here.  /* #neg=375 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12260155218361407;  // std dev = 0.428, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | else if ( genre(B, E) )
%   | | then return 0.22681840550667204;  // std dev = 2.23e-07, 210.000 (wgt'ed) examples reached here.  /* #pos=210 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.011502844670504895;  // std dev = 5.996, 178.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=50 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109141;  // std dev = 2.27e-07, 407.000 (wgt'ed) examples reached here.  /* #neg=407 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18273018212390366;  // std dev = 0.828, 213.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=210 */
%   | else if ( genre(A, E) )
%   | | then return -0.07460544252751242;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.024191949330727523;  // std dev = 5.934, 169.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=50 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333768;  // std dev = 0.000, 370.000 (wgt'ed) examples reached here.  /* #neg=370 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13500433065322484;  // std dev = 0.453, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( movie(E, B) )
%   | | then return 0.09798202171508398;  // std dev = 6.106, 380.000 (wgt'ed) examples reached here.  /* #neg=120 #pos=260 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420336;  // std dev = 0.000, 405.000 (wgt'ed) examples reached here.  /* #neg=405 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14164019926189236;  // std dev = 0.896, 214.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=210 */
%   | else if ( genre(A, E) )
%   | | then return -0.06136330340530038;  // std dev = 2.63e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.010787479321343883;  // std dev = 5.976, 175.000 (wgt'ed) examples reached here.  /* #neg=125 #pos=50 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202572;  // std dev = 8.88e-09, 362.000 (wgt'ed) examples reached here.  /* #neg=362 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.139054
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.641 seconds
Total inference time: 1.877 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.976726
   AUC PR    = 0.85364
   CLL	      = -0.136409
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.807692
   F1        = 0.893617


Total scoring time: 3.007 seconds
Parameter learned model CLL: -0.136409


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 18, 0], 'true,false,true': [1.08e-06, 0, 210], 'true,false,false,true': [6.034, 134, 50], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.01e-07, 420, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.189, 2, 210], 'true,false,true': [7.45e-09, 13, 0], 'true,false,false,true': [6.003, 129, 50], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 427, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.148, 13, 0], 'true,false,true': [0.37, 111, 260], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 414, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.149, 3, 210], 'true,false,true': [0.0, 8, 0], 'true,false,false,true': [5.941, 120, 50], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.01e-08, 389, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.249, 10, 0], 'true,false,true': [2.38e-07, 0, 210], 'true,false,false,true': [5.774, 100, 50], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.87e-07, 368, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.76, 2, 210], 'true,false,true': [0.446, 126, 50], 'true,false,false': [0.0, 0, 0], 'false,true': [1.28e-07, 375, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.428, 24, 0], 'true,false,true': [2.23e-07, 0, 210], 'true,false,false,true': [5.996, 128, 50], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.27e-07, 407, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.828, 3, 210], 'true,false,true': [0.0, 15, 0], 'true,false,false,true': [5.934, 119, 50], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 370, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.453, 16, 0], 'true,false,true': [6.106, 120, 260], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 405, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.896, 4, 210], 'true,false,true': [2.63e-09, 12, 0], 'true,false,false,true': [5.976, 125, 50], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.88e-09, 362, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.23282118955604078, 2.157004733557447e-16], 'true': [-3.0839528461809902e-18, 0.22443247700276064], 'true,false': [5.549000412602687e-15, 0.1978969754253317], 'true,false,false': [0.1978969754253317, nan], 'false': [2.157004733557447e-16, nan]}, {'': [0.18647964951010845, -1.310427176606742e-16], 'true': [0.006671242774012169, 0.19150593178946898], 'true,false': [4.270088556250602e-18, 0.20130457850878583], 'true,false,false': [0.20130457850878583, nan], 'false': [-1.310427176606742e-16, nan]}, {'': [0.1403966244661013, -1.716286801352899e-17], 'true': [0.0016859759173395716, 0.13665637485309456], 'true,false': [0.13665637485309456, nan], 'false': [-1.716286801352899e-17, nan]}, {'': [0.13453681642717236, 1.0274557554371629e-16], 'true': [0.006202047875957436, 0.19935543284594293], 'true,false': [-3.469446951953614e-18, 0.20761245674740544], 'true,false,false': [0.20761245674740544, nan], 'false': [1.0274557554371629e-16, nan]}, {'': [0.11090807441701045, 9.533436841889932e-17], 'true': [0.006181902348271734, 0.11004264073167219], 'true,false': [2.7068294695622867e-16, 0.2222222222222215], 'true,false,false': [0.2222222222222215, nan], 'false': [9.533436841889932e-17, nan]}, {'': [0.10605932824712258, 4.381680203853951e-17], 'true': [0.0027262846727980116, 0.19886119410818479], 'true,false': [0.19886119410818479, nan], 'false': [4.381680203853951e-17, nan]}, {'': [0.10200143155034902, 1.265708804486665e-16], 'true': [0.007635374664927107, 0.10417903174850147], 'true,false': [2.3684757858670006e-16, 0.20199469763918643], 'true,false,false': [0.20199469763918643, nan], 'false': [1.265708804486665e-16, nan]}, {'': [0.09765030861614492, -6.00120553851436e-17], 'true': [0.003219741510863717, 0.1920737964565515], 'true,false': [-4.625929269271485e-18, 0.20832603900423538], 'true,false,false': [0.20832603900423538, nan], 'false': [-6.00120553851436e-17, nan]}, {'': [0.09676385299582427, -1.16230756158288e-16], 'true': [0.012827135109720968, 0.09810479259547758], 'true,false': [0.09810479259547758, nan], 'false': [-1.16230756158288e-16, nan]}, {'': [0.09716621246526563, 7.973977524932064e-17], 'true': [0.003748512956175811, 0.1911390959974009], 'true,false': [5.782411586589357e-19, 0.20408163265306015], 'true,false,false': [0.20408163265306015, nan], 'false': [7.973977524932064e-17, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995091;  // std dev = 1.08e-06, 210.000 (wgt'ed) examples reached here.  /* #pos=210 */
%   | | else if ( actor(B) )
%   | | | then return -0.14185106490048763;  // std dev = 7.88e-08, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
%   | | | else return 0.8581489350995122;  // std dev = 1.46e-07, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   else return -0.14185106490048757;  // std dev = 2.13e-07, 343.000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.703680551449474;  // std dev = 0.114, 214.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=210 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.7194734122109547;  // std dev = 0.000, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | | | else return -0.12685447443076092;  // std dev = 0.154, 110.000 (wgt'ed) examples reached here.  /* #neg=110 */
%   else return -0.12544463852839224;  // std dev = 0.000, 389.000 (wgt'ed) examples reached here.  /* #neg=389 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13275969031836865;  // std dev = 0.203, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else if ( actor(A), director(B) )
%   | | then return 0.5585134605516651;  // std dev = 0.025, 260.000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | | else return -0.11631454930911943;  // std dev = 0.245, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
%   else return -0.11231637819360635;  // std dev = 0.000, 374.000 (wgt'ed) examples reached here.  /* #neg=374 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.4205921712892502;  // std dev = 0.000, 75.000 (wgt'ed) examples reached here.  /* #pos=75 */
%   | | else return 0.40704735018316457;  // std dev = 0.091, 138.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=135 */
%   | else if ( genre(A, E) )
%   | | then return -0.09974551485324283;  // std dev = 3.73e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.4167484398374092;  // std dev = 0.000, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | | | else return -0.10218546157448741;  // std dev = 0.133, 123.000 (wgt'ed) examples reached here.  /* #neg=123 */
%   else return -0.10159632948783592;  // std dev = 2.21e-07, 401.000 (wgt'ed) examples reached here.  /* #neg=401 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( female(B) )
%   | | then return -0.09113945102065142;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.11169078499628693;  // std dev = 0.058, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( genre(B, E) )
%   | | then return 0.32470767804978845;  // std dev = 0.021, 210.000 (wgt'ed) examples reached here.  /* #pos=210 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.32019316274464943;  // std dev = 0.000, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | | | else return -0.0953986158555646;  // std dev = 0.212, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
%   else return -0.09269127618926061;  // std dev = 1.85e-07, 365.000 (wgt'ed) examples reached here.  /* #neg=365 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.25730533503287495;  // std dev = 0.027, 260.000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.08968315929021571;  // std dev = 0.331, 139.000 (wgt'ed) examples reached here.  /* #neg=139 */
%   else return -0.08518475138839678;  // std dev = 1.23e-07, 371.000 (wgt'ed) examples reached here.  /* #neg=371 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( actor(B) )
%   | | then return -0.07603207656290148;  // std dev = 0.002, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else return -0.23771341018891448;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.21178010558106142;  // std dev = 0.016, 210.000 (wgt'ed) examples reached here.  /* #pos=210 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.20909606167099834;  // std dev = 0.000, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | | | else return -0.08139019268955588;  // std dev = 0.214, 122.000 (wgt'ed) examples reached here.  /* #neg=122 */
%   else return -0.07877675473109153;  // std dev = 1.03e-07, 420.000 (wgt'ed) examples reached here.  /* #neg=420 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17679698477437208;  // std dev = 0.375, 211.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=210 */
%   | else if ( genre(A, E) )
%   | | then return -0.07120302748533223;  // std dev = 0.003, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( actor(B) )
%   | | | then return -0.07217981457290783;  // std dev = 0.000, 110.000 (wgt'ed) examples reached here.  /* #neg=110 */
%   | | | else return 0.17661105365554003;  // std dev = 6.66e-08, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   else return -0.07324622576333724;  // std dev = 0.000, 412.000 (wgt'ed) examples reached here.  /* #neg=412 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.15376795838285107;  // std dev = 0.016, 260.000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.07244481368836725;  // std dev = 0.302, 122.000 (wgt'ed) examples reached here.  /* #neg=122 */
%   else return -0.06842697784420336;  // std dev = 0.000, 405.000 (wgt'ed) examples reached here.  /* #neg=405 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.13408728079539672;  // std dev = 0.000, 75.000 (wgt'ed) examples reached here.  /* #pos=75 */
%   | | else if ( actor(A) )
%   | | | then return 0.13566775028025038;  // std dev = 0.000, 135.000 (wgt'ed) examples reached here.  /* #pos=135 */
%   | | | else return -0.21439769094374225;  // std dev = 5.27e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(A, E) )
%   | | then return -0.0620972166487583;  // std dev = 0.002, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( actor(B) )
%   | | | then return -0.06307361688947366;  // std dev = 0.000, 118.000 (wgt'ed) examples reached here.  /* #neg=118 */
%   | | | else return 0.10958521437033134;  // std dev = 0.623, 54.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=50 */
%   else return -0.06419184008202562;  // std dev = 1.90e-07, 389.000 (wgt'ed) examples reached here.  /* #neg=389 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.06325
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.972 seconds
Total inference time: 2.124 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.065556
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.677 seconds
Refined model CLL: -0.065556


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.06325
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 12.296999999999999 seconds
Total inference time: 2.124 seconds
AUC ROC: 1.0
Total revision time: 12.296999999999999
Best scored revision CLL: -0.065556


Dataset: 4_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 00:07:12
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.06325, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 12.296999999999999, 'Inference time': 2.124, 'parameter_0.8': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.139054, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 2.641, 'Inference time': 1.877}}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995086;  // std dev = 1.08e-06, 267.000 (wgt'ed) examples reached here.  /* #pos=267 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.15612873307931152;  // std dev = 6.436, 198.000 (wgt'ed) examples reached here.  /* #neg=139 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048802;  // std dev = 0.000, 528.000 (wgt'ed) examples reached here.  /* #neg=528 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7100854338694093;  // std dev = 1.455, 270.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=267 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.11636290007043089;  // std dev = 6.525, 212.000 (wgt'ed) examples reached here.  /* #neg=153 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839227;  // std dev = 0.000, 479.000 (wgt'ed) examples reached here.  /* #neg=479 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13935356157982215;  // std dev = 0.222, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else if ( movie(E, A) )
%   | | then return 0.35287474009607916;  // std dev = 0.376, 481.000 (wgt'ed) examples reached here.  /* #neg=155 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360585;  // std dev = 0.000, 490.000 (wgt'ed) examples reached here.  /* #neg=490 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4647619156874784;  // std dev = 0.947, 269.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=267 */
%   | else if ( genre(A, E) )
%   | | then return -0.09915497002187831;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.05319723032954492;  // std dev = 6.476, 204.000 (wgt'ed) examples reached here.  /* #neg=145 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783533;  // std dev = 1.61e-08, 517.000 (wgt'ed) examples reached here.  /* #neg=517 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13444393686575132;  // std dev = 0.426, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | else if ( genre(B, E) )
%   | | then return 0.35758279274284543;  // std dev = 0.000, 267.000 (wgt'ed) examples reached here.  /* #pos=267 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.04347074229713201;  // std dev = 6.476, 204.000 (wgt'ed) examples reached here.  /* #neg=145 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926118;  // std dev = 7.30e-08, 447.000 (wgt'ed) examples reached here.  /* #neg=447 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.27221504389879236;  // std dev = 1.074, 271.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=267 */
%   | else if ( movie(E, A) )
%   | | then return 0.017834782186309493;  // std dev = 0.433, 228.000 (wgt'ed) examples reached here.  /* #neg=169 #pos=59 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.37e-07, 457.000 (wgt'ed) examples reached here.  /* #neg=457 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11677528929959216;  // std dev = 0.376, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else if ( genre(B, E) )
%   | | then return 0.22869954851697652;  // std dev = 0.000, 267.000 (wgt'ed) examples reached here.  /* #pos=267 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.027739708895694278;  // std dev = 6.495, 207.000 (wgt'ed) examples reached here.  /* #neg=148 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109201;  // std dev = 0.000, 490.000 (wgt'ed) examples reached here.  /* #neg=490 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1819922540418666;  // std dev = 1.070, 272.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=267 */
%   | else if ( genre(A, E) )
%   | | then return -0.07315616546023808;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.03535900795486995;  // std dev = 6.436, 198.000 (wgt'ed) examples reached here.  /* #neg=139 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333699;  // std dev = 6.04e-09, 485.000 (wgt'ed) examples reached here.  /* #neg=485 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.16217582448277928;  // std dev = 0.471, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( movie(E, B) )
%   | | then return 0.10011366566241163;  // std dev = 6.681, 473.000 (wgt'ed) examples reached here.  /* #neg=147 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420354;  // std dev = 0.000, 492.000 (wgt'ed) examples reached here.  /* #neg=492 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1444380558810414;  // std dev = 0.888, 271.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=267 */
%   | else if ( genre(A, E) )
%   | | then return -0.05871666154407071;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.008295637828515714;  // std dev = 6.436, 198.000 (wgt'ed) examples reached here.  /* #neg=139 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202539;  // std dev = 1.11e-08, 489.000 (wgt'ed) examples reached here.  /* #neg=489 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.137953
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.245 seconds
Total inference time: 2.062 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.978388
   AUC PR    = 0.863056
   CLL	      = -0.134334
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.819018
   F1        = 0.900506


Total scoring time: 3.184 seconds
Parameter learned model CLL: -0.134334


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 14, 0], 'true,false,true': [1.08e-06, 0, 267], 'true,false,false,true': [6.436, 139, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 528, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.455, 3, 267], 'true,false,true': [7.45e-09, 14, 0], 'true,false,false,true': [6.525, 153, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 479, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.222, 21, 0], 'true,false,true': [0.376, 155, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 490, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.947, 2, 267], 'true,false,true': [0.0, 14, 0], 'true,false,false,true': [6.476, 145, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.61e-08, 517, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.426, 27, 0], 'true,false,true': [0.0, 0, 267], 'true,false,false,true': [6.476, 145, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.3e-08, 447, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [1.074, 4, 267], 'true,false,true': [0.433, 169, 59], 'true,false,false': [0.0, 0, 0], 'false,true': [1.37e-07, 457, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.376, 20, 0], 'true,false,true': [0.0, 0, 267], 'true,false,false,true': [6.495, 148, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 490, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [1.07, 5, 267], 'true,false,true': [0.0, 12, 0], 'true,false,false,true': [6.436, 139, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [6.04e-09, 485, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.471, 14, 0], 'true,false,true': [6.681, 147, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 492, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.888, 4, 267], 'true,false,true': [0.0, 12, 0], 'true,false,false,true': [6.436, 139, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.11e-08, 489, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.2173892198865967, -1.345724878333523e-16], 'true': [-1.1895246692412391e-17, 0.20956873627009182], 'true,false': [4.364382346990877e-15, 0.2091878379757172], 'true,false,false': [0.2091878379757172, nan], 'false': [-1.345724878333523e-16, nan]}, {'': [0.18356571162871532, -1.2237948997955797e-16], 'true': [0.007843938223378451, 0.1918056275028581], 'true,false': [3.96508223080413e-18, 0.20084994660021407], 'true,false,false': [0.20084994660021407, nan], 'false': [-1.2237948997955797e-16, nan]}, {'': [0.14508214457523427, -9.063045098980869e-18], 'true': [0.002339229713471539, 0.1411785806188656], 'true,false': [0.1411785806188656, nan], 'false': [-9.063045098980869e-18, nan]}, {'': [0.13247465901975197, 2.611278912851432e-16], 'true': [0.003334510668632047, 0.19376313042269128], 'true,false': [-3.96508223080413e-18, 0.20556997308727482], 'true,false,false': [0.20556997308727482, nan], 'false': [2.611278912851432e-16, nan]}, {'': [0.11398319479055741, 1.1921857982552016e-17], 'true': [0.006714705756505913, 0.1132619565038394], 'true,false': [-4.790175746697304e-16, 0.2055699730872748], 'true,false,false': [0.2055699730872748, nan], 'false': [1.1921857982552016e-17, nan]}, {'': [0.10389897521762316, 4.0813450358211444e-17], 'true': [0.004259376901201616, 0.18718751658122124], 'true,false': [0.18718751658122124, nan], 'false': [4.0813450358211444e-17, nan]}, {'': [0.09778996172072342, -3.172065784643304e-17], 'true': [0.007059510802643482, 0.09892932561581112], 'true,false': [-3.2599807165023324e-16, 0.2037853858899859], 'true,false,false': [0.2037853858899859, nan], 'false': [-3.172065784643304e-17, nan]}, {'': [0.09432620680303354, 3.6625914214438153e-17], 'true': [0.004208485230211915, 0.19786868464554933], 'true,false': [0.0, 0.2091878379757155], 'true,false,false': [0.2091878379757155, nan], 'false': [3.6625914214438153e-17, nan]}, {'': [0.09401913813651566, -1.209511262599764e-16], 'true': [0.015846541666339337, 0.09435521277834247], 'true,false': [0.09435521277834247, nan], 'false': [-1.209511262599764e-16, nan]}, {'': [0.09267416901189705, 1.2260131560277803e-16], 'true': [0.002908556572876574, 0.19747619236537992], 'true,false': [-1.1564823173178713e-18, 0.20918783797571888], 'true,false,false': [0.20918783797571888, nan], 'false': [1.2260131560277803e-16, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995086;  // std dev = 1.08e-06, 267.000 (wgt'ed) examples reached here.  /* #pos=267 */
%   | | else if ( actor(B) )
%   | | | then return -0.14185106490048782;  // std dev = 0.000, 126.000 (wgt'ed) examples reached here.  /* #neg=126 */
%   | | | else return 0.7800239350995126;  // std dev = 2.147, 64.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=59 */
%   else return -0.14185106490048802;  // std dev = 0.000, 530.000 (wgt'ed) examples reached here.  /* #neg=530 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109543;  // std dev = 2.23e-07, 95.000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | | else return 0.7097617104783204;  // std dev = 0.090, 174.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=172 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.7349679371730667;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.13016042988982848;  // std dev = 0.307, 148.000 (wgt'ed) examples reached here.  /* #neg=148 */
%   else return -0.12544463852839227;  // std dev = 0.000, 475.000 (wgt'ed) examples reached here.  /* #neg=475 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1236663352806134;  // std dev = 0.152, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else if ( actor(A), director(B) )
%   | | then return 0.5594194444898537;  // std dev = 0.098, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | | else return -0.11599600430772437;  // std dev = 0.283, 155.000 (wgt'ed) examples reached here.  /* #neg=155 */
%   else return -0.11231637819360597;  // std dev = 0.000, 454.000 (wgt'ed) examples reached here.  /* #neg=454 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.4165282396900814;  // std dev = 2.80e-07, 95.000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | | else if ( actor(A) )
%   | | | then return 0.41889039482556745;  // std dev = 4.54e-07, 172.000 (wgt'ed) examples reached here.  /* #pos=172 */
%   | | | else return -0.20493097988138806;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(A, E) )
%   | | then return -0.10056504206880218;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.4318244453859954;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.10318301045938143;  // std dev = 0.204, 152.000 (wgt'ed) examples reached here.  /* #neg=152 */
%   else return -0.10159632948783551;  // std dev = 3.21e-07, 473.000 (wgt'ed) examples reached here.  /* #neg=473 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09612822592075398;  // std dev = 0.080, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( genre(B, E) )
%   | | then return 0.321075577374936;  // std dev = 0.013, 267.000 (wgt'ed) examples reached here.  /* #pos=267 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.33043113202822344;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.09407269729212157;  // std dev = 0.190, 150.000 (wgt'ed) examples reached here.  /* #neg=150 */
%   else return -0.0926912761892615;  // std dev = 0.000, 509.000 (wgt'ed) examples reached here.  /* #neg=509 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.25657397888545774;  // std dev = 0.046, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.08769471491869024;  // std dev = 0.218, 158.000 (wgt'ed) examples reached here.  /* #neg=158 */
%   else return -0.08518475138839678;  // std dev = 1.41e-07, 481.000 (wgt'ed) examples reached here.  /* #neg=481 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08986934016942237;  // std dev = 0.145, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | else if ( genre(B, E) )
%   | | then return 0.20974196945123652;  // std dev = 0.010, 267.000 (wgt'ed) examples reached here.  /* #pos=267 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.2153047646002939;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.07973193089609827;  // std dev = 0.167, 149.000 (wgt'ed) examples reached here.  /* #neg=149 */
%   else return -0.07877675473109186;  // std dev = 0.000, 465.000 (wgt'ed) examples reached here.  /* #neg=465 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17474446877312677;  // std dev = 0.444, 269.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=267 */
%   | else if ( genre(A, E) )
%   | | then return -0.07141066505056816;  // std dev = 3.73e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.18115442959635256;  // std dev = 5.58e-08, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.07584727687249755;  // std dev = 0.200, 127.000 (wgt'ed) examples reached here.  /* #neg=127 */
%   else return -0.07324622576333703;  // std dev = 1.17e-07, 477.000 (wgt'ed) examples reached here.  /* #neg=477 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.15354089082203132;  // std dev = 0.021, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.07400275961586247;  // std dev = 0.322, 186.000 (wgt'ed) examples reached here.  /* #neg=186 */
%   else return -0.06842697784420358;  // std dev = 0.000, 518.000 (wgt'ed) examples reached here.  /* #neg=518 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13206472489087928;  // std dev = 0.401, 269.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=267 */
%   | else if ( genre(A, E) )
%   | | then return -0.062348847507922564;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( actor(B) )
%   | | | then return -0.06282364926304022;  // std dev = 0.000, 143.000 (wgt'ed) examples reached here.  /* #neg=143 */
%   | | | else return 0.11472394914398727;  // std dev = 0.603, 64.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=59 */
%   else return -0.06419184008202537;  // std dev = 2.43e-07, 501.000 (wgt'ed) examples reached here.  /* #neg=501 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063165
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 4.254 seconds
Total inference time: 1.74 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.065147
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 3.223 seconds
Refined model CLL: -0.065147


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063165
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 13.905999999999999 seconds
Total inference time: 1.74 seconds
AUC ROC: 1.0
Total revision time: 13.905999999999999
Best scored revision CLL: -0.065147


Dataset: 4_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 00:07:31
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063165, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 13.905999999999999, 'Inference time': 1.74, 'parameter_1.0': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.137953, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 3.245, 'Inference time': 2.062}}


Starting fold 2

Target train facts examples: 870
Target train pos examples: 324
Target train neg examples: 10813

Target test facts examples: 208
Target test pos	 examples: 58
Target test neg examples: 3423

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995122;  // std dev = 1.46e-07, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.23652731347789074;  // std dev = 2.950, 37.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=14 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048763;  // std dev = 8.16e-08, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109547;  // std dev = 0.000, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.18582545525651772;  // std dev = 2.996, 39.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=14 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1254446385283914;  // std dev = 0.000, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, A) )
%   | | then return 0.2923050443567799;  // std dev = 0.403, 105.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=64 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360625;  // std dev = 5.67e-08, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4825252722216635;  // std dev = 0.000, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else if ( genre(A, E) )
%   | | then return -0.1015963294878363;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.14750361071867332;  // std dev = 2.898, 35.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=14 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783627;  // std dev = 3.95e-09, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1339486427290791;  // std dev = 0.185, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.36529555965134514;  // std dev = 4.21e-08, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.06866285319266041;  // std dev = 3.017, 40.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=14 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926107;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.28541693135773505;  // std dev = 0.000, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else if ( movie(E, A) )
%   | | then return 0.05185620037595347;  // std dev = 0.451, 44.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=14 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 4.34e-08, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.15619794094621048;  // std dev = 0.294, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(B, E) )
%   | | then return 0.2309126316640479;  // std dev = 7.30e-08, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.03513046773736124;  // std dev = 3.036, 41.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=14 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.0787767547310916;  // std dev = 5.48e-08, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18284740942830757;  // std dev = 0.486, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   | else if ( genre(A, E) )
%   | | then return -0.07450249686187638;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.022181619825053372;  // std dev = 3.149, 48.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=14 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333707;  // std dev = 0.000, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.15888044022307607;  // std dev = 0.219, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( movie(E, B) )
%   | | then return 0.11490904167058578;  // std dev = 3.044, 89.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=64 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420265;  // std dev = 4.75e-09, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1414633325468836;  // std dev = 0.449, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   | else if ( genre(A, E) )
%   | | then return -0.059924106971595566;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.008571451009516473;  // std dev = 3.073, 43.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=14 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.146519
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.585 seconds
Total inference time: 1.888 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.973238
   AUC PR    = 0.832478
   CLL	      = -0.14932
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.78125
   F1        = 0.877193


Total scoring time: 1.69 seconds
Parameter learned model CLL: -0.14932


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 4, 0], 'true,false,true': [1.46e-07, 0, 50], 'true,false,false,true': [2.95, 23, 14], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.16e-08, 90, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 50], 'true,false,true': [0.0, 5, 0], 'true,false,false,true': [2.996, 25, 14], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 92, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.403, 41, 64], 'true,false,false': [0.0, 0, 0], 'false,true': [5.67e-08, 71, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 50], 'true,false,true': [0.0, 3, 0], 'true,false,false,true': [2.898, 21, 14], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.95e-09, 99, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.185, 5, 0], 'true,false,true': [4.21e-08, 0, 50], 'true,false,false,true': [3.017, 26, 14], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 82, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 50], 'true,false,true': [0.451, 30, 14], 'true,false,false': [0.0, 0, 0], 'false,true': [4.34e-08, 102, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.294, 7, 0], 'true,false,true': [7.3e-08, 0, 50], 'true,false,false,true': [3.036, 27, 14], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.48e-08, 95, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.486, 1, 50], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [3.149, 34, 14], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 89, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.219, 3, 0], 'true,false,true': [3.044, 25, 64], 'true,false,false': [0.0, 0, 0], 'false,true': [4.75e-09, 97, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.449, 1, 50], 'true,false,true': [0.0, 7, 0], 'true,false,false,true': [3.073, 29, 14], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 94, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.20867045042869145, 7.401486830834377e-17], 'true': [0.0, 0.19447747390672399], 'true,false': [4.263256414560601e-16, 0.2352081811541266], 'true,false,false': [0.2352081811541266, nan], 'false': [7.401486830834377e-17, nan]}, {'': [0.18065595489268677, -1.68946982008176e-17], 'true': [-5.684341886080802e-16, 0.2137216755022434], 'true,false': [0.0, 0.2301117685733068], 'true,false,false': [0.2301117685733068, nan], 'false': [-1.68946982008176e-17, nan]}, {'': [0.1623029800775742, 4.5347137625534564e-17], 'true': [0.0, 0.16230420863567122], 'true,false': [0.16230420863567122, nan], 'false': [4.5347137625534564e-17, nan]}, {'': [0.12826887754301128, 1.570012358055777e-17], 'true': [-3.1974423109204507e-16, 0.22556463429511298], 'true,false': [-1.1564823173178713e-18, 0.24000000000000002], 'true,false,false': [0.24000000000000002, nan], 'false': [1.570012358055777e-17, nan]}, {'': [0.12346122168407483, 0.0], 'true': [0.006808681175203626, 0.12283727470148255], 'true,false': [3.552713678800501e-17, 0.22750000000000017], 'true,false,false': [0.22750000000000017, nan], 'false': [0.0, nan]}, {'': [0.10897176703666323, 1.850371707708594e-17], 'true': [0.0, 0.20378703588276614], 'true,false': [0.20378703588276614, nan], 'false': [1.850371707708594e-17, nan]}, {'': [0.10969313523548067, 3.1553707015662343e-17], 'true': [0.012314344547875404, 0.11080225262230654], 'true,false': [1.0658141036401502e-16, 0.2248661511005355], 'true,false,false': [0.2248661511005355, nan], 'false': [3.1553707015662343e-17, nan]}, {'': [0.11129558888052749, -7.484649604214538e-18], 'true': [0.004624049271404264, 0.19843845234161137], 'true,false': [0.0, 0.2065972222222224], 'true,false,false': [0.2065972222222224, nan], 'false': [-7.484649604214538e-18, nan]}, {'': [0.10362335196901981, 2.2891196384023845e-17], 'true': [0.015968615584983654, 0.10413363599153677], 'true,false': [0.10413363599153677, nan], 'false': [2.2891196384023845e-17, nan]}, {'': [0.10181546669601362, -1.299197156476247e-17], 'true': [0.003951408031944671, 0.18915471557335864], 'true,false': [-4.956352788505163e-19, 0.21957815035154155], 'true,false,false': [0.21957815035154155, nan], 'false': [-1.299197156476247e-17, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995122;  // std dev = 1.46e-07, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.1418510649004877;  // std dev = 2.36e-08, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   else return -0.14185106490048763;  // std dev = 8.69e-08, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109547;  // std dev = 0.000, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.7194734122109542;  // std dev = 5.16e-08, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   else return -0.12544463852839144;  // std dev = 0.000, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14111685828337295;  // std dev = 0.100, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( director(B), actor(A) )
%   | | then return 0.5553664367462837;  // std dev = 2.06e-07, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | | else return -0.11231637819360636;  // std dev = 1.49e-08, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   else return -0.11231637819360624;  // std dev = 5.87e-08, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4175135841583103;  // std dev = 0.000, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.41751358415831025;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.10159632948783634;  // std dev = 7.45e-09, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.1015963294878363;  // std dev = 2.58e-08, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13513682389638054;  // std dev = 0.162, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.3207118471601495;  // std dev = 0.000, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.3207118471601497;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.09269127618926104;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   else return -0.09269127618926093;  // std dev = 5.48e-08, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2551722425694896;  // std dev = 0.000, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else if ( actor(B) )
%   | | then return -0.08529880461845817;  // std dev = 0.002, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else return 0.2551722425694894;  // std dev = 2.11e-08, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return -0.08518475138839682;  // std dev = 4.83e-08, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12569994229533793;  // std dev = 0.200, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.20975771563253556;  // std dev = 3.65e-08, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.20975771563253567;  // std dev = 2.36e-08, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.07963276348330087;  // std dev = 0.028, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   else return -0.07877675473109162;  // std dev = 5.16e-08, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.17709649774527747;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else return 0.1602205523091323;  // std dev = 0.086, 27.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=26 */
%   | else if ( genre(A, E) )
%   | | then return -0.07212153133062486;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.1770964977452774;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.07424910145444187;  // std dev = 0.026, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   else return -0.07324622576333707;  // std dev = 0.000, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.15363630455686136;  // std dev = 0.009, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else if ( actor(B) )
%   | | then return -0.06825355851672248;  // std dev = 0.001, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | else return -0.2390475302358761;  // std dev = 0.178, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.06842697784420265;  // std dev = 4.83e-08, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13492752169958183;  // std dev = 0.007, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else if ( genre(A, E) )
%   | | then return -0.06327359057334565;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.1339034961822172;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.06489576597523239;  // std dev = 0.015, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   else return -0.06419184008202626;  // std dev = 0.000, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063711
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.302 seconds
Total inference time: 1.63 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.066276
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.626 seconds
Refined model CLL: -0.066276


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063711
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 7.202999999999999 seconds
Total inference time: 1.63 seconds
AUC ROC: 1.0
Total revision time: 7.202999999999999
Best scored revision CLL: -0.066276


Dataset: 4_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 00:07:42
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063711, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 7.202999999999999, 'Inference time': 1.63, 'parameter_0.2': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.146519, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 1.585, 'Inference time': 1.888}}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995112;  // std dev = 4.46e-07, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.12345505754849105;  // std dev = 4.371, 98.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=26 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048827;  // std dev = 0.000, 175.000 (wgt'ed) examples reached here.  /* #neg=175 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7033797350540146;  // std dev = 1.183, 105.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=103 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 7.45e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.1345813137877935;  // std dev = 4.290, 89.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=26 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839158;  // std dev = 0.000, 189.000 (wgt'ed) examples reached here.  /* #neg=189 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.16340083582416717;  // std dev = 0.186, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( movie(E, A) )
%   | | then return 0.3429614811633153;  // std dev = 0.384, 196.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=129 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360657;  // std dev = 0.000, 194.000 (wgt'ed) examples reached here.  /* #neg=194 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.45489873970246136;  // std dev = 1.146, 106.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=103 */
%   | else if ( genre(A, E) )
%   | | then return -0.09702759779211384;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.054061509238910385;  // std dev = 4.309, 91.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=26 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783653;  // std dev = 0.000, 207.000 (wgt'ed) examples reached here.  /* #neg=207 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08885274008716425;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.3636888703322193;  // std dev = 2.42e-07, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.06446794386451046;  // std dev = 4.248, 85.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=26 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0926912761892606;  // std dev = 8.82e-08, 185.000 (wgt'ed) examples reached here.  /* #neg=185 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2739257214371973;  // std dev = 0.765, 105.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=103 */
%   | else if ( movie(E, A) )
%   | | then return 0.04835304641072912;  // std dev = 0.450, 89.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=26 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 6.66e-08, 166.000 (wgt'ed) examples reached here.  /* #neg=166 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10888867369444992;  // std dev = 0.221, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( genre(B, E) )
%   | | then return 0.2320087091240239;  // std dev = 0.000, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.023040913107838852;  // std dev = 4.309, 91.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=26 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109147;  // std dev = 7.45e-08, 196.000 (wgt'ed) examples reached here.  /* #neg=196 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17499683826523868;  // std dev = 0.958, 107.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=103 */
%   | else if ( genre(A, E) )
%   | | then return -0.07747833553080857;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.049912988203320574;  // std dev = 4.214, 82.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=26 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333661;  // std dev = 8.84e-09, 217.000 (wgt'ed) examples reached here.  /* #neg=217 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.20243223310415892;  // std dev = 0.261, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( movie(E, B) )
%   | | then return 0.08365892331622288;  // std dev = 4.523, 199.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=129 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420262;  // std dev = 5.74e-09, 200.000 (wgt'ed) examples reached here.  /* #neg=200 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14347433156429484;  // std dev = 0.761, 106.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=103 */
%   | else if ( genre(A, E) )
%   | | then return -0.059691236654789655;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.047995523166128186;  // std dev = 4.136, 76.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=26 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 176.000 (wgt'ed) examples reached here.  /* #neg=176 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.136636
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.038 seconds
Total inference time: 1.768 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.975208
   AUC PR    = 0.845785
   CLL	      = -0.140569
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.79845
   F1        = 0.887931


Total scoring time: 2.41 seconds
Parameter learned model CLL: -0.140569


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 11, 0], 'true,false,true': [4.46e-07, 0, 103], 'true,false,false,true': [4.371, 72, 26], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 175, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.183, 2, 103], 'true,false,true': [7.45e-09, 13, 0], 'true,false,false,true': [4.29, 63, 26], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 189, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.186, 11, 0], 'true,false,true': [0.384, 67, 129], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 194, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.146, 3, 103], 'true,false,true': [0.0, 6, 0], 'true,false,false,true': [4.309, 65, 26], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 207, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 6, 0], 'true,false,true': [2.42e-07, 0, 103], 'true,false,false,true': [4.248, 59, 26], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.82e-08, 185, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.765, 2, 103], 'true,false,true': [0.45, 63, 26], 'true,false,false': [0.0, 0, 0], 'false,true': [6.66e-08, 166, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.221, 10, 0], 'true,false,true': [0.0, 0, 103], 'true,false,false,true': [4.309, 65, 26], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.45e-08, 196, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.958, 4, 103], 'true,false,true': [0.0, 9, 0], 'true,false,false,true': [4.214, 56, 26], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.84e-09, 217, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.261, 4, 0], 'true,false,true': [4.523, 70, 129], 'true,false,false': [0.0, 0, 0], 'false,true': [5.74e-09, 200, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.761, 3, 103], 'true,false,true': [0.0, 6, 0], 'true,false,false,true': [4.136, 50, 26], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 176, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.23822979708081576, -1.9032394707859825e-16], 'true': [-1.0092936587501423e-17, 0.22989529962130073], 'true,false': [1.9315724855614373e-15, 0.1949187838400677], 'true,false,false': [0.1949187838400677, nan], 'false': [-1.9032394707859825e-16, nan]}, {'': [0.18994535254195383, -2.5846461948945442e-17], 'true': [0.01333883188823792, 0.18795532888283994], 'true,false': [4.270088556250602e-18, 0.2067920717081174], 'true,false,false': [0.2067920717081174, nan], 'false': [-2.5846461948945442e-17, nan]}, {'': [0.15265353737804588, -3.433679457603577e-17], 'true': [0.00313154617369029, 0.14741980834463164], 'true,false': [0.14741980834463164, nan], 'false': [-3.433679457603577e-17, nan]}, {'': [0.14057128338465658, -8.795969856933607e-17], 'true': [0.01239754839715701, 0.19278272024661616], 'true,false': [-1.1564823173178713e-18, 0.20408163265306184], 'true,false,false': [0.20408163265306184, nan], 'false': [-8.795969856933607e-17, nan]}, {'': [0.11753490213205686, 4.200843876960052e-17], 'true': [0.0, 0.11817309584241904], 'true,false': [5.691240359243521e-16, 0.2123183391003463], 'true,false,false': [0.2123183391003463, nan], 'false': [4.200843876960052e-17, nan]}, {'': [0.10865368734240395, 2.6752362039160398e-17], 'true': [0.0055761042706159005, 0.20272228665678163], 'true,false': [0.20272228665678163, nan], 'false': [2.6752362039160398e-17, nan]}, {'': [0.1043670058882197, 2.832201593431522e-17], 'true': [0.0048694869436287525, 0.10660412884309761], 'true,false': [-6.898473162719419e-17, 0.20408163265306156], 'true,false,false': [0.20408163265306156, nan], 'false': [2.832201593431522e-17, nan]}, {'': [0.09968781933256414, 7.879002110243047e-17], 'true': [0.008581815813436746, 0.19656823420824462], 'true,false': [-7.709882115452476e-19, 0.21653777513384845], 'true,false,false': [0.21653777513384845, nan], 'false': [7.879002110243047e-17, nan]}, {'': [0.10268594084541244, 3.3306690738754695e-17], 'true': [0.016981623842424833, 0.10279586926039357], 'true,false': [0.10279586926039357, nan], 'false': [3.3306690738754695e-17, nan]}, {'': [0.09703309233000688, -5.046468293750712e-18], 'true': [0.005458066128417602, 0.20938720326965185], 'true,false': [-1.1564823173178713e-18, 0.22506925207756204], 'true,false,false': [0.22506925207756204, nan], 'false': [-5.046468293750712e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995112;  // std dev = 4.46e-07, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.8581489350995118;  // std dev = 1.46e-07, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return -0.14185106490048768;  // std dev = 5.96e-08, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   else return -0.14185106490048838;  // std dev = 0.000, 194.000 (wgt'ed) examples reached here.  /* #neg=194 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109546;  // std dev = 0.000, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return -0.1254446385283916;  // std dev = 0.000, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   else return -0.12544463852839158;  // std dev = 0.000, 187.000 (wgt'ed) examples reached here.  /* #neg=187 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5553664367462834;  // std dev = 4.84e-07, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.1189947503883348;  // std dev = 0.224, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   else return -0.11231637819360649;  // std dev = 0.000, 183.000 (wgt'ed) examples reached here.  /* #neg=183 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.4175135841583105;  // std dev = 0.000, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | | else return 0.39767872567803936;  // std dev = 0.110, 63.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=61 */
%   | else if ( genre(A, E) )
%   | | then return -0.10098838411513646;  // std dev = 5.27e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.4175135841583105;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return -0.10098838411513648;  // std dev = 0.000, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   else return -0.10159632948783652;  // std dev = 0.000, 198.000 (wgt'ed) examples reached here.  /* #neg=198 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09218201642827048;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(B, E) )
%   | | then return 0.3232800164136982;  // std dev = 0.022, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.32071184716014955;  // std dev = 2.11e-08, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return -0.09218201642827048;  // std dev = 0.000, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   else return -0.0926912761892606;  // std dev = 8.69e-08, 184.000 (wgt'ed) examples reached here.  /* #neg=184 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.25657178352904797;  // std dev = 0.020, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.09143895069468254;  // std dev = 0.246, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   else return -0.08518475138839678;  // std dev = 7.30e-08, 191.000 (wgt'ed) examples reached here.  /* #neg=191 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09181801290629481;  // std dev = 0.160, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( genre(B, E) )
%   | | then return 0.21105466512855303;  // std dev = 0.016, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.20952582277401358;  // std dev = 2.58e-08, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return -0.07792355824780108;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.07877675473109147;  // std dev = 7.45e-08, 196.000 (wgt'ed) examples reached here.  /* #neg=196 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17414246258367225;  // std dev = 0.404, 104.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=103 */
%   | else if ( genre(A, E) )
%   | | then return -0.07157672332868226;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.17692639665515342;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return -0.07250557264110927;  // std dev = 2.69e-08, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   else return -0.07324622576333663;  // std dev = 1.30e-07, 222.000 (wgt'ed) examples reached here.  /* #neg=222 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.15369950910335733;  // std dev = 0.014, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.07338947466539107;  // std dev = 0.268, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   else return -0.06842697784420262;  // std dev = 8.09e-08, 196.000 (wgt'ed) examples reached here.  /* #neg=196 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( actor(A) )
%   | | then return 0.13499830002532243;  // std dev = 0.012, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   | | else return -0.246311961896194;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(A, E) )
%   | | then return -0.0625214595986467;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.13378052503653093;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return -0.06328573086110756;  // std dev = 0.000, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   else return -0.06419184008202626;  // std dev = 0.000, 213.000 (wgt'ed) examples reached here.  /* #neg=213 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063396
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.644 seconds
Total inference time: 1.581 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.065193
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.072 seconds
Refined model CLL: -0.065193


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063396
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 9.164000000000001 seconds
Total inference time: 1.581 seconds
AUC ROC: 1.0
Total revision time: 9.164000000000001
Best scored revision CLL: -0.065193


Dataset: 4_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 00:07:55
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063396, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 9.164000000000001, 'Inference time': 1.581, 'parameter_0.4': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.136636, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 2.038, 'Inference time': 1.768}}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995097;  // std dev = 9.83e-07, 158.000 (wgt'ed) examples reached here.  /* #pos=158 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.15083186192877918;  // std dev = 5.046, 123.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=36 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048818;  // std dev = 0.000, 255.000 (wgt'ed) examples reached here.  /* #neg=255 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.6836284039977718;  // std dev = 2.188, 165.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=158 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.1222431571398881;  // std dev = 5.079, 127.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=36 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1254446385283919;  // std dev = 0.000, 265.000 (wgt'ed) examples reached here.  /* #neg=265 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1486375864541343;  // std dev = 0.178, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( movie(E, A) )
%   | | then return 0.3413446121374599;  // std dev = 0.384, 295.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=194 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360683;  // std dev = 0.000, 299.000 (wgt'ed) examples reached here.  /* #neg=299 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.47078195350820184;  // std dev = 0.950, 160.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=158 */
%   | else if ( genre(A, E) )
%   | | then return -0.09832877123234009;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.06594968503597802;  // std dev = 5.020, 120.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=36 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783662;  // std dev = 0.000, 315.000 (wgt'ed) examples reached here.  /* #neg=315 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14747201252481396;  // std dev = 0.278, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( genre(B, E) )
%   | | then return 0.3649591484421463;  // std dev = 0.000, 158.000 (wgt'ed) examples reached here.  /* #pos=158 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.022576922070436562;  // std dev = 5.131, 134.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=36 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926042;  // std dev = 1.66e-07, 312.000 (wgt'ed) examples reached here.  /* #neg=312 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2818058107088223;  // std dev = 0.536, 159.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=158 */
%   | else if ( movie(E, A) )
%   | | then return 0.006867723273382025;  // std dev = 0.427, 146.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=36 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 9.88e-08, 285.000 (wgt'ed) examples reached here.  /* #neg=285 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13032098061844105;  // std dev = 0.288, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( genre(B, E) )
%   | | then return 0.23135625070417457;  // std dev = 2.98e-07, 158.000 (wgt'ed) examples reached here.  /* #pos=158 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.034131037948944475;  // std dev = 5.071, 126.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=36 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109141;  // std dev = 4.21e-08, 292.000 (wgt'ed) examples reached here.  /* #neg=292 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1868422289417446;  // std dev = 0.668, 160.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=158 */
%   | else if ( genre(A, E) )
%   | | then return -0.07009784422946849;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.010592645682707664;  // std dev = 5.131, 134.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=36 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333696;  // std dev = 5.74e-09, 295.000 (wgt'ed) examples reached here.  /* #neg=295 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13308480001232936;  // std dev = 0.492, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( movie(E, B) )
%   | | then return 0.12079724295801347;  // std dev = 5.028, 271.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=194 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420307;  // std dev = 0.000, 315.000 (wgt'ed) examples reached here.  /* #neg=315 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1438194925522131;  // std dev = 0.622, 160.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=158 */
%   | else if ( genre(A, E) )
%   | | then return -0.05795588564262854;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.029035178300723948;  // std dev = 4.973, 115.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=36 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202615;  // std dev = 3.73e-09, 264.000 (wgt'ed) examples reached here.  /* #neg=264 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.13161
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.568 seconds
Total inference time: 1.851 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.976972
   AUC PR    = 0.858485
   CLL	      = -0.136497
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.814433
   F1        = 0.897727


Total scoring time: 2.3 seconds
Parameter learned model CLL: -0.136497


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 6, 0], 'true,false,true': [9.83e-07, 0, 158], 'true,false,false,true': [5.046, 87, 36], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 255, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [2.188, 7, 158], 'true,false,true': [5.27e-09, 12, 0], 'true,false,false,true': [5.079, 91, 36], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 265, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.178, 12, 0], 'true,false,true': [0.384, 101, 194], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 299, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.95, 2, 158], 'true,false,true': [0.0, 11, 0], 'true,false,false,true': [5.02, 84, 36], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 315, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.278, 10, 0], 'true,false,true': [0.0, 0, 158], 'true,false,false,true': [5.131, 98, 36], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.66e-07, 312, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.536, 1, 158], 'true,false,true': [0.427, 110, 36], 'true,false,false': [0.0, 0, 0], 'false,true': [9.88e-08, 285, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.288, 9, 0], 'true,false,true': [2.98e-07, 0, 158], 'true,false,false,true': [5.071, 90, 36], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.21e-08, 292, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.668, 2, 158], 'true,false,true': [0.0, 13, 0], 'true,false,false,true': [5.131, 98, 36], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.74e-09, 295, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.492, 19, 0], 'true,false,true': [5.028, 77, 194], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 315, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.622, 2, 158], 'true,false,true': [0.0, 12, 0], 'true,false,false,true': [4.973, 79, 36], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.73e-09, 264, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.21903871602180922, -1.0797463141452503e-16], 'true': [-6.938893903907228e-18, 0.21375109231139924], 'true,false': [6.1160640546439006e-15, 0.20701963117192285], 'true,false,false': [0.20701963117192285, nan], 'false': [-1.0797463141452503e-16, nan]}, {'': [0.18708997911597147, -7.038395024038728e-17], 'true': [0.02900122985441366, 0.19041662207598448], 'true,false': [2.3129646346357427e-18, 0.20311240622481305], 'true,false,false': [0.20311240622481305, nan], 'false': [-7.038395024038728e-17, nan]}, {'': [0.15060878987309867, -8.614439522175128e-17], 'true': [0.002638460339009288, 0.14724358752702496], 'true,false': [0.14724358752702496, nan], 'false': [-8.614439522175128e-17, nan]}, {'': [0.13401048535819085, -4.7933438523498824e-17], 'true': [0.005640150310242653, 0.19444224595163126], 'true,false': [0.0, 0.2099999999999996], 'true,false,false': [0.2099999999999996, nan], 'false': [-4.7933438523498824e-17, nan]}, {'': [0.11962211109554724, 8.82484968291791e-17], 'true': [0.007720853255952453, 0.11927402849915673], 'true,false': [-6.520803587671806e-16, 0.19648028514145746], 'true,false,false': [0.19648028514145746, nan], 'false': [8.82484968291791e-17, nan]}, {'': [0.10705301912505072, 3.4280570584917116e-17], 'true': [0.0018091172210113922, 0.18226152271597446], 'true,false': [0.18226152271597446, nan], 'false': [3.4280570584917116e-17, nan]}, {'': [0.09958850717306736, 6.083413833562501e-18], 'true': [0.009188510278273339, 0.1001442451597625], 'true,false': [5.62138240316535e-16, 0.20408163265305995], 'true,false,false': [0.20408163265305995, nan], 'false': [6.083413833562501e-18, nan]}, {'': [0.09585719718058007, 3.387121092076749e-17], 'true': [0.0027884510197448585, 0.17962935538937821], 'true,false': [-1.0675221390626506e-18, 0.19648028514145607], 'true,false,false': [0.19648028514145607, nan], 'false': [3.387121092076749e-17, nan]}, {'': [0.09196461987984629, -6.97854472621527e-17], 'true': [0.012727577390953362, 0.0932969991613089], 'true,false': [0.0932969991613089, nan], 'false': [-6.97854472621527e-17, nan]}, {'': [0.09153754560310438, 1.3457248783335231e-17], 'true': [0.002421180763737574, 0.19537530484069662], 'true,false': [-2.3129646346357427e-18, 0.21504725897920707], 'true,false,false': [0.21504725897920707, nan], 'false': [1.3457248783335231e-17, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995097;  // std dev = 9.83e-07, 158.000 (wgt'ed) examples reached here.  /* #pos=158 */
%   | | else if ( actor(B) )
%   | | | then return -0.14185106490048763;  // std dev = 7.88e-08, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
%   | | | else return 0.8581489350995115;  // std dev = 2.53e-07, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   else return -0.14185106490048793;  // std dev = 0.000, 288.000 (wgt'ed) examples reached here.  /* #neg=288 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109548;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | else return 0.711024231703561;  // std dev = 0.084, 100.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=99 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.7194734122109548;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | | else return -0.12870952167072097;  // std dev = 0.217, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
%   else return -0.12544463852839194;  // std dev = 0.000, 279.000 (wgt'ed) examples reached here.  /* #neg=279 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5564306391292303;  // std dev = 0.015, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.11922810282755676;  // std dev = 0.296, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
%   else return -0.11231637819360694;  // std dev = 0.000, 277.000 (wgt'ed) examples reached here.  /* #neg=277 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.4172547971462778;  // std dev = 1.52e-07, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | else return 0.40693102305807083;  // std dev = 0.087, 101.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=99 */
%   | else if ( genre(A, E) )
%   | | then return -0.10096720008264237;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.41725479714627767;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | | else return -0.10208213293073677;  // std dev = 0.132, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
%   else return -0.1015963294878366;  // std dev = 0.000, 278.000 (wgt'ed) examples reached here.  /* #neg=278 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( actor(B) )
%   | | then return -0.09216426275909873;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return -0.28026975883622274;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.323106846119977;  // std dev = 0.025, 158.000 (wgt'ed) examples reached here.  /* #pos=158 */
%   | | else if ( actor(B) )
%   | | | then return -0.0917984575078636;  // std dev = 4.47e-08, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
%   | | | else return 0.32053640812694423;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   else return -0.09269127618926043;  // std dev = 1.46e-07, 289.000 (wgt'ed) examples reached here.  /* #neg=289 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.25376189478689415;  // std dev = 0.483, 159.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=158 */
%   | else if ( actor(A), director(B) )
%   | | then return 0.25505252813233764;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else return -0.09038283047771038;  // std dev = 0.324, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
%   else return -0.08518475138839678;  // std dev = 1.03e-07, 291.000 (wgt'ed) examples reached here.  /* #neg=291 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( actor(B) )
%   | | then return -0.07798549558263182;  // std dev = 3.73e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else return -0.2749539029452445;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.2114195424492494;  // std dev = 0.019, 158.000 (wgt'ed) examples reached here.  /* #pos=158 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.20967314744405408;  // std dev = 3.65e-08, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | | else return -0.08341919337518473;  // std dev = 0.306, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
%   else return -0.07877675473109141;  // std dev = 4.71e-08, 286.000 (wgt'ed) examples reached here.  /* #neg=286 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17831481133151386;  // std dev = 0.017, 158.000 (wgt'ed) examples reached here.  /* #pos=158 */
%   | else if ( genre(A, E) )
%   | | then return -0.07255937425254963;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( actor(B) )
%   | | | then return -0.07192615717485104;  // std dev = 0.000, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
%   | | | else return 0.1770344685111598;  // std dev = 2.98e-08, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   else return -0.07324622576333684;  // std dev = 1.13e-07, 264.000 (wgt'ed) examples reached here.  /* #neg=264 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.15348753948074625;  // std dev = 0.016, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.0735993722887187;  // std dev = 0.344, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
%   else return -0.06842697784420296;  // std dev = 0.000, 291.000 (wgt'ed) examples reached here.  /* #neg=291 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13474903859444076;  // std dev = 0.013, 158.000 (wgt'ed) examples reached here.  /* #pos=158 */
%   | else if ( genre(A, E) )
%   | | then return -0.06331751681360255;  // std dev = 3.73e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( actor(B) )
%   | | | then return -0.06279675121870605;  // std dev = 1.29e-08, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
%   | | | else return 0.13387857553939597;  // std dev = 2.58e-08, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   else return -0.064191840082026;  // std dev = 1.06e-07, 292.000 (wgt'ed) examples reached here.  /* #neg=292 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063388
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.739 seconds
Total inference time: 1.691 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.066944
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.585 seconds
Refined model CLL: -0.066944


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063388
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 11.192 seconds
Total inference time: 1.691 seconds
AUC ROC: 1.0
Total revision time: 11.192
Best scored revision CLL: -0.066944


Dataset: 4_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 00:08:11
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063388, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 11.192, 'Inference time': 1.691, 'parameter_0.6': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.13161, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 2.568, 'Inference time': 1.851}}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995091;  // std dev = 1.08e-06, 210.000 (wgt'ed) examples reached here.  /* #pos=210 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.1446986427018517;  // std dev = 5.913, 171.000 (wgt'ed) examples reached here.  /* #neg=122 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004874;  // std dev = 2.73e-07, 379.000 (wgt'ed) examples reached here.  /* #neg=379 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7075731579751916;  // std dev = 1.453, 213.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=210 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.12954708580159435;  // std dev = 5.899, 169.000 (wgt'ed) examples reached here.  /* #neg=120 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839227;  // std dev = 0.000, 427.000 (wgt'ed) examples reached here.  /* #neg=427 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13842034533112904;  // std dev = 0.172, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( movie(E, A) )
%   | | then return 0.33204327481410373;  // std dev = 0.385, 399.000 (wgt'ed) examples reached here.  /* #neg=140 #pos=259 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.1123163781936063;  // std dev = 0.000, 382.000 (wgt'ed) examples reached here.  /* #neg=382 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.46603215837063805;  // std dev = 1.166, 213.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=210 */
%   | else if ( genre(A, E) )
%   | | then return -0.09923835912904495;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.04268501481070163;  // std dev = 5.959, 178.000 (wgt'ed) examples reached here.  /* #neg=129 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783592;  // std dev = 1.09e-08, 400.000 (wgt'ed) examples reached here.  /* #neg=400 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11885190835685822;  // std dev = 0.258, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( genre(B, E) )
%   | | then return 0.3626692415504647;  // std dev = 4.95e-07, 210.000 (wgt'ed) examples reached here.  /* #pos=210 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.06404609291604049;  // std dev = 5.838, 161.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926093;  // std dev = 1.38e-07, 406.000 (wgt'ed) examples reached here.  /* #neg=406 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2734066402643272;  // std dev = 1.085, 214.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=210 */
%   | else if ( movie(E, A) )
%   | | then return 0.05513453666668003;  // std dev = 0.452, 165.000 (wgt'ed) examples reached here.  /* #neg=116 #pos=49 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.21e-07, 368.000 (wgt'ed) examples reached here.  /* #neg=368 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08559303788602632;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( genre(B, E) )
%   | | then return 0.23149773726632583;  // std dev = 3.58e-07, 210.000 (wgt'ed) examples reached here.  /* #pos=210 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.023823207024532948;  // std dev = 5.913, 171.000 (wgt'ed) examples reached here.  /* #neg=122 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109143;  // std dev = 1.17e-07, 396.000 (wgt'ed) examples reached here.  /* #neg=396 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18591466031354056;  // std dev = 0.851, 213.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=210 */
%   | else if ( genre(A, E) )
%   | | then return -0.07912723018969682;  // std dev = 5.27e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.024299568200859028;  // std dev = 5.891, 168.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0732462257633377;  // std dev = 0.000, 393.000 (wgt'ed) examples reached here.  /* #neg=393 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14529315227806353;  // std dev = 0.461, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( movie(E, B) )
%   | | then return 0.09772547825291113;  // std dev = 6.092, 381.000 (wgt'ed) examples reached here.  /* #neg=122 #pos=259 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420326;  // std dev = 0.000, 372.000 (wgt'ed) examples reached here.  /* #neg=372 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14599141159679452;  // std dev = 0.797, 213.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=210 */
%   | else if ( genre(A, E) )
%   | | then return -0.06424287129394565;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.012411250170596771;  // std dev = 5.838, 161.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202568;  // std dev = 9.17e-09, 370.000 (wgt'ed) examples reached here.  /* #neg=370 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.133348
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.486 seconds
Total inference time: 1.832 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.976805
   AUC PR    = 0.85606
   CLL	      = -0.137594
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.810811
   F1        = 0.895522


Total scoring time: 3.039 seconds
Parameter learned model CLL: -0.137594


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 10, 0], 'true,false,true': [1.08e-06, 0, 210], 'true,false,false,true': [5.913, 122, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.73e-07, 379, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.453, 3, 210], 'true,false,true': [5.27e-09, 12, 0], 'true,false,false,true': [5.899, 120, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 427, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.172, 13, 0], 'true,false,true': [0.385, 140, 259], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 382, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.166, 3, 210], 'true,false,true': [0.0, 12, 0], 'true,false,false,true': [5.959, 129, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.09e-08, 400, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.258, 14, 0], 'true,false,true': [4.95e-07, 0, 210], 'true,false,false,true': [5.838, 112, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.38e-07, 406, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [1.085, 4, 210], 'true,false,true': [0.452, 116, 49], 'true,false,false': [0.0, 0, 0], 'false,true': [1.21e-07, 368, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 19, 0], 'true,false,true': [3.58e-07, 0, 210], 'true,false,false,true': [5.913, 122, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.17e-07, 396, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.851, 3, 210], 'true,false,true': [5.27e-09, 10, 0], 'true,false,false,true': [5.891, 119, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 393, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.461, 15, 0], 'true,false,true': [6.092, 122, 259], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 372, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.797, 3, 210], 'true,false,true': [0.0, 13, 0], 'true,false,false,true': [5.838, 112, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.17e-09, 370, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.2236249108783992, 1.9685220911559503e-16], 'true': [-1.1102230246251566e-17, 0.21767554646220766], 'true,false': [5.549000412602687e-15, 0.20443897267535396], 'true,false,false': [0.20443897267535396, nan], 'false': [1.9685220911559503e-16, nan]}, {'': [0.18341722559439327, -1.310427176606742e-16], 'true': [0.009913123561305961, 0.1962509365916292], 'true,false': [2.3129646346357427e-18, 0.20587514442771757], 'true,false,false': [0.20587514442771757, nan], 'false': [-1.310427176606742e-16, nan]}, {'': [0.15001985641309912, -2.3250743971207467e-17], 'true': [0.002271390334389569, 0.14784981273334874], 'true,false': [0.14784981273334874, nan], 'false': [-2.3250743971207467e-17, nan]}, {'': [0.13862145740499818, 1.2212453270876723e-16], 'true': [0.0063787596055592125, 0.18809303780595826], 'true,false': [-2.3129646346357427e-18, 0.19950132559020195], 'true,false,false': [0.19950132559020195, nan], 'false': [1.2212453270876723e-16, nan]}, {'': [0.11415883708592821, 4.7034078875745546e-17], 'true': [0.004750630460869533, 0.11378364119009168], 'true,false': [1.167320208748736e-15, 0.2117202268430997], 'true,false,false': [0.2117202268430997, nan], 'false': [4.7034078875745546e-17, nan]}, {'': [0.10375664112572724, 3.982321718764148e-17], 'true': [0.005500122085166041, 0.20429120737688106], 'true,false': [0.20429120737688106, nan], 'false': [3.982321718764148e-17, nan]}, {'': [0.09982784530811664, 3.476455935694935e-17], 'true': [-7.304098846218135e-18, 0.10242527609500825], 'true,false': [6.0903663065151445e-16, 0.20443897267535363], 'true,false,false': [0.20443897267535363, nan], 'false': [3.476455935694935e-17, nan]}, {'': [0.09783079569356536, -6.892987735586214e-17], 'true': [0.003401125048517795, 0.19555783568185467], 'true,false': [2.7755575615628915e-18, 0.2065972222222225], 'true,false,false': [0.2065972222222225, nan], 'false': [-6.892987735586214e-17, nan]}, {'': [0.09640899875664555, -1.0565025556916813e-16], 'true': [0.014154400270996825, 0.09741032124602496], 'true,false': [0.09741032124602496, nan], 'false': [-1.0565025556916813e-16, nan]}, {'': [0.09470451241590455, 8.401687753920104e-17], 'true': [0.002978875041264636, 0.19630825069067884], 'true,false': [-1.6012832085939759e-18, 0.2117202268431001], 'true,false,false': [0.2117202268431001, nan], 'false': [8.401687753920104e-17, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995091;  // std dev = 1.08e-06, 210.000 (wgt'ed) examples reached here.  /* #pos=210 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.8581489350995122;  // std dev = 1.69e-07, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.14185106490048774;  // std dev = 3.65e-08, 124.000 (wgt'ed) examples reached here.  /* #neg=124 */
%   else return -0.14185106490048746;  // std dev = 2.53e-07, 366.000 (wgt'ed) examples reached here.  /* #neg=366 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109542;  // std dev = 2.38e-07, 80.000 (wgt'ed) examples reached here.  /* #pos=80 */
%   | | else if ( actor(A) )
%   | | | then return 0.7194734122109557;  // std dev = 0.000, 130.000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.7194734122109547;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.12544463852839108;  // std dev = 8.16e-08, 128.000 (wgt'ed) examples reached here.  /* #neg=128 */
%   else return -0.12544463852839224;  // std dev = 0.000, 390.000 (wgt'ed) examples reached here.  /* #neg=390 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 7.45e-09, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | else if ( actor(A), director(B) )
%   | | then return 0.5553664367462835;  // std dev = 5.46e-07, 259.000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | | else return -0.11231637819360621;  // std dev = 8.56e-08, 123.000 (wgt'ed) examples reached here.  /* #neg=123 */
%   else return -0.11231637819360621;  // std dev = 0.000, 402.000 (wgt'ed) examples reached here.  /* #neg=402 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.4175135841583109;  // std dev = 0.000, 80.000 (wgt'ed) examples reached here.  /* #pos=80 */
%   | | else return 0.40964828243640083;  // std dev = 0.063, 132.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=130 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783631;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.41751358415831047;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.1015963294878364;  // std dev = 0.000, 133.000 (wgt'ed) examples reached here.  /* #neg=133 */
%   else return -0.10159632948783609;  // std dev = 1.76e-07, 377.000 (wgt'ed) examples reached here.  /* #neg=377 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10082289999387342;  // std dev = 0.069, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( genre(B, E) )
%   | | then return 0.321774078477076;  // std dev = 0.012, 210.000 (wgt'ed) examples reached here.  /* #pos=210 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.32071184716014944;  // std dev = 2.98e-08, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.0926912761892608;  // std dev = 7.60e-08, 131.000 (wgt'ed) examples reached here.  /* #neg=131 */
%   else return -0.09269127618926058;  // std dev = 1.90e-07, 362.000 (wgt'ed) examples reached here.  /* #neg=362 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2557599698511387;  // std dev = 0.011, 259.000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.0855025579832054;  // std dev = 0.048, 132.000 (wgt'ed) examples reached here.  /* #neg=132 */
%   else return -0.08518475138839678;  // std dev = 1.23e-07, 386.000 (wgt'ed) examples reached here.  /* #neg=386 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08730643894964561;  // std dev = 0.071, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( genre(B, E) )
%   | | then return 0.21029250187445164;  // std dev = 0.009, 210.000 (wgt'ed) examples reached here.  /* #pos=210 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.20966031091976947;  // std dev = 5.58e-08, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.07875369428304367;  // std dev = 0.000, 131.000 (wgt'ed) examples reached here.  /* #neg=131 */
%   else return -0.07877675473109144;  // std dev = 1.19e-07, 410.000 (wgt'ed) examples reached here.  /* #neg=410 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17748870856443294;  // std dev = 0.008, 210.000 (wgt'ed) examples reached here.  /* #pos=210 */
%   | else if ( genre(A, E) )
%   | | then return -0.07210198138468503;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.17702505271850622;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.07322622055291289;  // std dev = 4.34e-08, 123.000 (wgt'ed) examples reached here.  /* #neg=123 */
%   else return -0.0732462257633377;  // std dev = 0.000, 391.000 (wgt'ed) examples reached here.  /* #neg=391 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.1529748302116161;  // std dev = 0.008, 259.000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.06968285697888811;  // std dev = 0.113, 146.000 (wgt'ed) examples reached here.  /* #neg=146 */
%   else return -0.06842697784420337;  // std dev = 0.000, 410.000 (wgt'ed) examples reached here.  /* #neg=410 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.130579999802868;  // std dev = 0.448, 213.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=210 */
%   | else if ( genre(A, E) )
%   | | then return -0.06317279240743298;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.13393163344499018;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.06409995513494059;  // std dev = 0.000, 123.000 (wgt'ed) examples reached here.  /* #neg=123 */
%   else return -0.06419184008202551;  // std dev = 2.14e-07, 430.000 (wgt'ed) examples reached here.  /* #neg=430 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063499
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.943 seconds
Total inference time: 1.72 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064731
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.559 seconds
Refined model CLL: -0.064731


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063499
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 12.027000000000001 seconds
Total inference time: 1.72 seconds
AUC ROC: 1.0
Total revision time: 12.027000000000001
Best scored revision CLL: -0.064731


Dataset: 4_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 00:08:27
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063499, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 12.027000000000001, 'Inference time': 1.72, 'parameter_0.8': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.133348, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 2.486, 'Inference time': 1.832}}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004877;  // std dev = 1.83e-08, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995086;  // std dev = 1.08e-06, 265.000 (wgt'ed) examples reached here.  /* #pos=265 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.11921088200216803;  // std dev = 6.603, 226.000 (wgt'ed) examples reached here.  /* #neg=167 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004875;  // std dev = 1.74e-07, 479.000 (wgt'ed) examples reached here.  /* #neg=479 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7038267816417103;  // std dev = 1.872, 270.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=265 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.14098879305138312;  // std dev = 6.436, 198.000 (wgt'ed) examples reached here.  /* #neg=139 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1254446385283923;  // std dev = 0.000, 440.000 (wgt'ed) examples reached here.  /* #neg=440 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12637434030055222;  // std dev = 0.149, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( movie(E, A) )
%   | | then return 0.36382850064275835;  // std dev = 0.373, 470.000 (wgt'ed) examples reached here.  /* #neg=146 #pos=324 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360595;  // std dev = 0.000, 463.000 (wgt'ed) examples reached here.  /* #neg=463 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.46106666622759523;  // std dev = 1.158, 268.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=265 */
%   | else if ( genre(A, E) )
%   | | then return -0.10032036318398461;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.03737090236831243;  // std dev = 6.549, 216.000 (wgt'ed) examples reached here.  /* #neg=157 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783562;  // std dev = 1.38e-08, 451.000 (wgt'ed) examples reached here.  /* #neg=451 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14339672983551063;  // std dev = 0.378, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( genre(B, E) )
%   | | then return 0.357353140547219;  // std dev = 2.38e-07, 265.000 (wgt'ed) examples reached here.  /* #pos=265 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.05242267398949765;  // std dev = 6.449, 200.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0926912761892612;  // std dev = 5.96e-08, 452.000 (wgt'ed) examples reached here.  /* #neg=452 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.27400422408803676;  // std dev = 0.930, 268.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=265 */
%   | else if ( movie(E, A) )
%   | | then return -0.003028532319647008;  // std dev = 0.423, 247.000 (wgt'ed) examples reached here.  /* #neg=188 #pos=59 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.48e-07, 487.000 (wgt'ed) examples reached here.  /* #neg=487 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.0969813911423042;  // std dev = 0.227, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( genre(B, E) )
%   | | then return 0.2282483962569016;  // std dev = 0.000, 265.000 (wgt'ed) examples reached here.  /* #pos=265 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.023933258311687324;  // std dev = 6.537, 214.000 (wgt'ed) examples reached here.  /* #neg=155 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109214;  // std dev = 1.07e-07, 512.000 (wgt'ed) examples reached here.  /* #neg=512 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18154700031477852;  // std dev = 1.076, 270.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=265 */
%   | else if ( genre(A, E) )
%   | | then return -0.07327773793104453;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.002468961556090093;  // std dev = 6.613, 228.000 (wgt'ed) examples reached here.  /* #neg=169 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0732462257633369;  // std dev = 6.97e-09, 501.000 (wgt'ed) examples reached here.  /* #neg=501 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14603445492647224;  // std dev = 0.592, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | else if ( movie(E, B) )
%   | | then return 0.10073538880314763;  // std dev = 6.706, 477.000 (wgt'ed) examples reached here.  /* #neg=153 #pos=324 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420353;  // std dev = 0.000, 487.000 (wgt'ed) examples reached here.  /* #neg=487 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14400280513656072;  // std dev = 0.900, 269.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=265 */
%   | else if ( genre(A, E) )
%   | | then return -0.05970885323739072;  // std dev = 3.73e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.0020454989229456793;  // std dev = 6.543, 215.000 (wgt'ed) examples reached here.  /* #neg=156 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202541;  // std dev = 1.11e-08, 480.000 (wgt'ed) examples reached here.  /* #neg=480 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.126997
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.176 seconds
Total inference time: 1.795 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.977686
   AUC PR    = 0.861626
   CLL	      = -0.131632
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.817901
   F1        = 0.89983


Total scoring time: 3.327 seconds
Parameter learned model CLL: -0.131632


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [1.83e-08, 25, 0], 'true,false,true': [1.08e-06, 0, 265], 'true,false,false,true': [6.603, 167, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.74e-07, 479, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.872, 5, 265], 'true,false,true': [5.27e-09, 11, 0], 'true,false,false,true': [6.436, 139, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 440, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.149, 16, 0], 'true,false,true': [0.373, 146, 324], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 463, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.158, 3, 265], 'true,false,true': [0.0, 11, 0], 'true,false,false,true': [6.549, 157, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.38e-08, 451, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.378, 19, 0], 'true,false,true': [2.38e-07, 0, 265], 'true,false,false,true': [6.449, 141, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.96e-08, 452, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.93, 3, 265], 'true,false,true': [0.423, 188, 59], 'true,false,false': [0.0, 0, 0], 'false,true': [1.48e-07, 487, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.227, 14, 0], 'true,false,true': [0.0, 0, 265], 'true,false,false,true': [6.537, 155, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.07e-07, 512, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [1.076, 5, 265], 'true,false,true': [0.0, 11, 0], 'true,false,false,true': [6.613, 169, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [6.97e-09, 501, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.592, 24, 0], 'true,false,true': [6.706, 153, 324], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 487, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.9, 4, 265], 'true,false,true': [3.73e-09, 12, 0], 'true,false,false,true': [6.543, 156, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.11e-08, 480, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.2336398053001649, 6.304397968643895e-17], 'true': [1.3322676295501878e-17, 0.22443908893691605], 'true,false': [4.397321081685148e-15, 0.1929086067820509], 'true,false,false': [0.1929086067820509, nan], 'false': [6.304397968643895e-17, nan]}, {'': [0.17717126570037514, -1.3322676295501878e-16], 'true': [0.012975303553032329, 0.20171745847655295], 'true,false': [2.523234146875356e-18, 0.20918783797571597], 'true,false,false': [0.20918783797571597, nan], 'false': [-1.3322676295501878e-16, nan]}, {'': [0.14188643515878727, -9.591559607992713e-18], 'true': [0.0013833840902022915, 0.13875844531152012], 'true,false': [0.13875844531152012, nan], 'false': [-9.591559607992713e-18, nan]}, {'': [0.13572942504713428, 1.9102728760734402e-16], 'true': [0.005000194696130488, 0.18979163503432667], 'true,false': [-6.308085367188389e-18, 0.19853823731138662], 'true,false,false': [0.19853823731138662, nan], 'false': [1.9102728760734402e-16, nan]}, {'': [0.11328341927885731, 7.859986015045356e-18], 'true': [0.007505773169542143, 0.11224304423660766], 'true,false': [2.1450346739927553e-16, 0.20797500000000224], 'true,false,false': [0.20797500000000224, nan], 'false': [7.859986015045356e-18, nan]}, {'': [0.10644789131034155, 4.468248723337386e-17], 'true': [0.0032264645166130163, 0.17850690714250947], 'true,false': [0.17850690714250947, nan], 'false': [4.468248723337386e-17, nan]}, {'': [0.09832048470502813, 2.2551405187698492e-17], 'true': [0.0036862306745484375, 0.09953215179833505], 'true,false': [-3.2845843445514063e-16, 0.19968992925146167], 'true,false,false': [0.19968992925146167, nan], 'false': [2.2551405187698492e-17, nan]}, {'': [0.09661410899847678, 4.875230846657374e-17], 'true': [0.004290525565832463, 0.1832329060109561], 'true,false': [-6.30808536718839e-19, 0.1918090181594359], 'true,false,false': [0.1918090181594359, nan], 'false': [4.875230846657374e-17, nan]}, {'': [0.09324660925996038, -1.2128103677630047e-16], 'true': [0.014616697263565848, 0.0942856884556151], 'true,false': [0.0942856884556151, nan], 'false': [-1.2128103677630047e-16, nan]}, {'': [0.09353681309838605, 1.2212453270876723e-16], 'true': [0.0030127734733503115, 0.18875371711033256], 'true,false': [1.1564823173178713e-18, 0.19911303407246966], 'true,false,false': [0.19911303407246966, nan], 'false': [1.2212453270876723e-16, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995086;  // std dev = 1.08e-06, 265.000 (wgt'ed) examples reached here.  /* #pos=265 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.8581489350995125;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.14185106490048804;  // std dev = 0.000, 150.000 (wgt'ed) examples reached here.  /* #neg=150 */
%   else return -0.14185106490048743;  // std dev = 1.98e-07, 474.000 (wgt'ed) examples reached here.  /* #neg=474 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109546;  // std dev = 0.000, 102.000 (wgt'ed) examples reached here.  /* #pos=102 */
%   | | else if ( actor(A) )
%   | | | then return 0.7194734122109564;  // std dev = 0.000, 163.000 (wgt'ed) examples reached here.  /* #pos=163 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 7.45e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.7194734122109543;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.12544463852839127;  // std dev = 5.58e-08, 156.000 (wgt'ed) examples reached here.  /* #neg=156 */
%   else return -0.12544463852839233;  // std dev = 0.000, 491.000 (wgt'ed) examples reached here.  /* #neg=491 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360635;  // std dev = 1.39e-08, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( actor(A), director(B) )
%   | | then return 0.5553664367462834;  // std dev = 5.59e-07, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | | else return -0.11231637819360618;  // std dev = 1.01e-07, 145.000 (wgt'ed) examples reached here.  /* #neg=145 */
%   else return -0.11231637819360592;  // std dev = 0.000, 474.000 (wgt'ed) examples reached here.  /* #neg=474 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.41751358415831163;  // std dev = 0.000, 102.000 (wgt'ed) examples reached here.  /* #pos=102 */
%   | | else return 0.40813207969482795;  // std dev = 0.069, 166.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=163 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783635;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.4175135841583105;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.10159632948783648;  // std dev = 0.000, 163.000 (wgt'ed) examples reached here.  /* #neg=163 */
%   else return -0.10159632948783541;  // std dev = 3.45e-07, 495.000 (wgt'ed) examples reached here.  /* #neg=495 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09823518109459195;  // std dev = 0.070, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( genre(B, E) )
%   | | then return 0.3219710948649834;  // std dev = 0.016, 265.000 (wgt'ed) examples reached here.  /* #pos=265 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.3207118471601497;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.09269127618926068;  // std dev = 7.88e-08, 160.000 (wgt'ed) examples reached here.  /* #neg=160 */
%   else return -0.09269127618926139;  // std dev = 0.000, 485.000 (wgt'ed) examples reached here.  /* #neg=485 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2558750837766341;  // std dev = 0.015, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.08667269100308309;  // std dev = 0.107, 160.000 (wgt'ed) examples reached here.  /* #neg=160 */
%   else return -0.08518475138839678;  // std dev = 1.44e-07, 467.000 (wgt'ed) examples reached here.  /* #neg=467 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08631334517027302;  // std dev = 0.072, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( genre(B, E) )
%   | | then return 0.21039069765408874;  // std dev = 0.012, 265.000 (wgt'ed) examples reached here.  /* #pos=265 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.20964123685003763;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.0786688411538344;  // std dev = 0.000, 148.000 (wgt'ed) examples reached here.  /* #neg=148 */
%   else return -0.07877675473109197;  // std dev = 1.52e-07, 482.000 (wgt'ed) examples reached here.  /* #neg=482 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17537081297390097;  // std dev = 0.412, 267.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=265 */
%   | else if ( genre(A, E) )
%   | | then return -0.07226343023488971;  // std dev = 7.45e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.177011061376424;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.07315260306975853;  // std dev = 0.000, 148.000 (wgt'ed) examples reached here.  /* #neg=148 */
%   else return -0.07324622576333696;  // std dev = 1.41e-07, 489.000 (wgt'ed) examples reached here.  /* #neg=489 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.1532524758711949;  // std dev = 0.011, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.07161421477016781;  // std dev = 0.192, 177.000 (wgt'ed) examples reached here.  /* #neg=177 */
%   else return -0.0684269778442035;  // std dev = 0.000, 464.000 (wgt'ed) examples reached here.  /* #neg=464 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13064811375367044;  // std dev = 0.517, 269.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=265 */
%   | else if ( genre(A, E) )
%   | | then return -0.06319160737779358;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.13388991659009794;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.06392362629907822;  // std dev = 2.58e-08, 145.000 (wgt'ed) examples reached here.  /* #neg=145 */
%   else return -0.06419184008202543;  // std dev = 2.37e-07, 471.000 (wgt'ed) examples reached here.  /* #neg=471 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063464
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 4.288 seconds
Total inference time: 1.801 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064696
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.761 seconds
Refined model CLL: -0.064696


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063464
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 13.552 seconds
Total inference time: 1.801 seconds
AUC ROC: 1.0
Total revision time: 13.552
Best scored revision CLL: -0.064696


Dataset: 4_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 00:08:45
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063464, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 13.552, 'Inference time': 1.801, 'parameter_1.0': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.126997, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 3.176, 'Inference time': 1.795}}


Starting fold 3

Target train facts examples: 737
Target train pos examples: 204
Target train neg examples: 10693

Target test facts examples: 341
Target test pos	 examples: 178
Target test neg examples: 3543

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995116;  // std dev = 2.46e-07, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.06492798797741087;  // std dev = 0.961, 13.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048766;  // std dev = 6.14e-08, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.719473412210955;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return -0.09065142728891094;  // std dev = 0.978, 23.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839155;  // std dev = 0.000, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( movie(E, A) )
%   | | then return 0.28639993950630427;  // std dev = 0.339, 67.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=40 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360628;  // std dev = 4.59e-08, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.483999893096622;  // std dev = 1.19e-07, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | else if ( genre(A, E) )
%   | | then return -0.11231637819360639;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.12520027335564862;  // std dev = 0.983, 30.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783624;  // std dev = 4.75e-09, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.3663233999850982;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.1025365924177322;  // std dev = 0.980, 25.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926107;  // std dev = 0.000, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.28611142091323133;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | else if ( movie(E, A) )
%   | | then return -0.053534804968684416;  // std dev = 0.266, 13.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839679;  // std dev = 1.83e-08, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08828612747293885;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.23139392857395358;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.08604263512467268;  // std dev = 0.981, 26.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109177;  // std dev = 1.29e-08, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.19281045181024406;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | else if ( genre(A, E) )
%   | | then return -0.08143336706768617;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.07375757304817375;  // std dev = 0.979, 24.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07554591899379184;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( movie(E, B) )
%   | | then return 0.08908252316677291;  // std dev = 1.267, 59.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=40 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420268;  // std dev = 3.09e-09, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15267874448975832;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | else if ( genre(A, E) )
%   | | then return -0.07043616586753958;  // std dev = 1.32e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.06937913766292682;  // std dev = 0.976, 21.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202625;  // std dev = 0.000, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.97199
   AUC PR    = 0.81824
   CLL	      = -0.108782
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total learning time: 1.348 seconds
Total inference time: 1.813 seconds
AUC ROC: 0.97199


Results scoring model
   AUC ROC   = 0.996802
   AUC PR    = 0.988041
   CLL	      = -0.078649
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.975
   F1        = 0.987342


Total scoring time: 1.715 seconds
Parameter learned model CLL: -0.078649


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [2.46e-07, 0, 39], 'true,false,false,true': [0.961, 12, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [6.14e-08, 59, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 39], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.978, 22, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 70, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [0.339, 27, 40], 'true,false,false': [0.0, 0, 0], 'false,true': [4.59e-08, 61, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.19e-07, 0, 39], 'true,false,true': [2.63e-09, 3, 0], 'true,false,false,true': [0.983, 29, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.75e-09, 52, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 39], 'true,false,false,true': [0.98, 24, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 60, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 39], 'true,false,true': [0.266, 12, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [1.83e-08, 71, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [1.86e-09, 3, 0], 'true,false,true': [0.0, 0, 39], 'true,false,false,true': [0.981, 25, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.29e-08, 54, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 39], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [0.979, 23, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 71, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [1.267, 19, 40], 'true,false,false': [0.0, 0, 0], 'false,true': [3.09e-09, 64, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 39], 'true,false,true': [1.32e-09, 3, 0], 'true,false,false,true': [0.976, 20, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 64, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.1920438957476001, 6.39789539614497e-17], 'true': [0.0, 0.17751479289940902], 'true,false': [1.548618783066885e-15, 0.07100591715976336], 'true,false,false': [0.07100591715976336, nan], 'false': [6.39789539614497e-17, nan]}, {'': [0.16857634523324078, -3.172065784643304e-17], 'true': [-9.109522253334617e-16, 0.041587901701323225], 'true,false': [nan, 0.041587901701323225], 'true,false,false': [0.041587901701323225, nan], 'false': [-3.172065784643304e-17, nan]}, {'': [0.11659180789933372, 3.45807171604557e-17], 'true': [0.0, 0.11515575583896746], 'true,false': [0.11515575583896746, nan], 'false': [3.45807171604557e-17, nan]}, {'': [0.10521516160739905, 2.1350442781253012e-17], 'true': [3.643808901333847e-16, 0.029306647867685172], 'true,false': [2.3129646346357427e-18, 0.03222222222222219], 'true,false,false': [0.03222222222222219, nan], 'false': [2.1350442781253012e-17, nan]}, {'': [0.06752023155560069, -1.8503717077085942e-18], 'true': [0.0, 0.06732762455177796], 'true,false': [-2.7328566760003855e-16, 0.03840000000000005], 'true,false,false': [0.03840000000000005, nan], 'false': [-1.8503717077085942e-18, nan]}, {'': [0.03938139655665885, 4.6910832026415064e-18], 'true': [-2.2773805633336544e-17, 0.07100591715976332], 'true,false': [0.07100591715976332, nan], 'false': [4.6910832026415064e-18, nan]}, {'': [0.038823217589216905, 3.0839528461809902e-18], 'true': [1.1564823173178713e-18, 0.03897673268175414], 'true,false': [-2.2773805633336544e-17, 0.03698224852071007], 'true,false,false': [0.03698224852071007, nan], 'false': [3.0839528461809902e-18, nan]}, {'': [0.031874938762026156, -3.1273888017610044e-18], 'true': [0.0, 0.03686315787238238], 'true,false': [0.0, 0.03993055555555553], 'true,false,false': [0.03993055555555553, nan], 'false': [-3.1273888017610044e-18, nan]}, {'': [0.027178732361078168, 9.540979117872439e-18], 'true': [0.0, 0.02721143797925051], 'true,false': [0.02721143797925051, nan], 'false': [9.540979117872439e-18, nan]}, {'': [0.026759639195270052, -3.469446951953614e-18], 'true': [-5.693451408334136e-18, 0.03968266188817061], 'true,false': [5.782411586589357e-19, 0.04535147392290253], 'true,false,false': [0.04535147392290253, nan], 'false': [-3.469446951953614e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995116;  // std dev = 2.46e-07, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | else if ( female(A) )
%   | | | then return 0.0010060779566550668;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return -0.14185106490048766;  // std dev = 5.77e-08, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.719473412210955;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | else if ( actor(A), actor(B) )
%   | | then return -0.13095428509919624;  // std dev = 0.030, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else return 0.2023790482341371;  // std dev = 0.803, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else return -0.1254446385283916;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14938001064331158;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( actor(B) )
%   | | then return -0.11576505276755829;  // std dev = 0.026, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else return 0.562270894206802;  // std dev = 0.273, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   else return -0.11231637819360629;  // std dev = 3.80e-08, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.41583541020950004;  // std dev = 4.21e-08, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | else if ( genre(A, E) )
%   | | then return -0.13137541596652927;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( female(B) )
%   | | | then return -0.11057062873003685;  // std dev = 0.016, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0.10542694931991815;  // std dev = 0.730, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else return -0.10159632948783624;  // std dev = 2.98e-08, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11709547480388766;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.31957433964875837;  // std dev = 8.69e-08, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | else if ( female(A) )
%   | | | then return -0.012105815905092581;  // std dev = 0.780, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | | else return -0.10683563805288825;  // std dev = 0.035, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   else return -0.09269127618926107;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2543959106075649;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | else if ( female(A) )
%   | | then return 0.04876054386106608;  // std dev = 0.750, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return -0.09521621933999196;  // std dev = 0.027, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else return -0.08518475138839679;  // std dev = 1.83e-08, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09686628161656312;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.20920917471699974;  // std dev = 5.16e-08, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | else if ( female(A), actor(B) )
%   | | | then return -0.12219985472280014;  // std dev = 0.032, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return -0.026859668419529657;  // std dev = 0.767, 13.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=1 */
%   else return -0.07877675473109175;  // std dev = 1.97e-08, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17669406436179208;  // std dev = 4.47e-08, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | else if ( genre(A, E) )
%   | | then return -0.08871672103209045;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( female(A), actor(B) )
%   | | | then return -0.10833305625713323;  // std dev = 0.039, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return 0.006520652807150097;  // std dev = 0.752, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   else return -0.07324622576333704;  // std dev = 7.45e-09, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.0818011903418598;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( actor(B) )
%   | | then return -0.09147826009741661;  // std dev = 0.042, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | else if ( female(A) )
%   | | | then return 0.1898447483101617;  // std dev = 0.542, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.15243850334777495;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.0684269778442027;  // std dev = 1.49e-08, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13223385306349206;  // std dev = 0.013, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | else if ( genre(A, E) )
%   | | then return -0.0758635550191933;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( female(A) )
%   | | | then return 0.06014957554318221;  // std dev = 0.686, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return -0.07908792894557934;  // std dev = 0.026, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else return -0.06419184008202625;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */


Results
   AUC ROC   = 0.999095
   AUC PR    = 0.987572
   CLL	      = -0.090487
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total learning time: 2.129 seconds
Total inference time: 1.807 seconds
AUC ROC: 0.999095


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.070056
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.975
   F1        = 0.987342


Total scoring time: 1.399 seconds
Refined model CLL: -0.070056


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.999095
   AUC PR    = 0.987572
   CLL	      = -0.090487
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total learning time: 6.591 seconds
Total inference time: 1.807 seconds
AUC ROC: 0.999095
Total revision time: 6.591
Best scored revision CLL: -0.070056


Dataset: 4_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 00:08:56
{'AUC ROC': 0.999095, 'AUC PR': 0.987572, 'CLL': -0.090487, 'Precision': [1.0, 0.5], 'Recall': 0.724719, 'F1': 0.840391, 'Learning time': 6.591, 'Inference time': 1.807, 'parameter_0.2': {'AUC ROC': 0.97199, 'AUC PR': 0.81824, 'CLL': -0.108782, 'Precision': [1.0, 0.5], 'Recall': 0.724719, 'F1': 0.840391, 'Learning time': 1.348, 'Inference time': 1.813}}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995125;  // std dev = 0.000, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.08827963632905915;  // std dev = 1.685, 56.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004877;  // std dev = 5.58e-08, 117.000 (wgt'ed) examples reached here.  /* #neg=117 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109538;  // std dev = 2.23e-07, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.07689529412540896;  // std dev = 1.684, 55.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839105;  // std dev = 8.30e-08, 124.000 (wgt'ed) examples reached here.  /* #neg=124 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13791680494006553;  // std dev = 0.144, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( movie(E, A) )
%   | | then return 0.33160746289163073;  // std dev = 0.331, 123.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=81 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.1123163781936062;  // std dev = 9.06e-08, 123.000 (wgt'ed) examples reached here.  /* #neg=123 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.47271966587384345;  // std dev = 1.58e-07, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   | else if ( genre(A, E) )
%   | | then return -0.0992833797427788;  // std dev = 3.73e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.08000890651057523;  // std dev = 1.658, 36.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783663;  // std dev = 0.000, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09075129735070216;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.3584841427151214;  // std dev = 1.33e-07, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.09147592900427692;  // std dev = 1.678, 49.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926085;  // std dev = 7.30e-08, 117.000 (wgt'ed) examples reached here.  /* #neg=117 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.28081276193046956;  // std dev = 0.000, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   | else if ( movie(E, A) )
%   | | then return -0.07392871999108583;  // std dev = 0.241, 48.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=3 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839682;  // std dev = 5.87e-08, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07804751314197869;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.2277171850978165;  // std dev = 1.19e-07, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.049172625846500694;  // std dev = 1.658, 36.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109155;  // std dev = 6.66e-08, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.19016112549307337;  // std dev = 0.000, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   | else if ( genre(A, E) )
%   | | then return -0.07261324016421525;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.0657305943327765;  // std dev = 1.678, 49.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333718;  // std dev = 0.000, 125.000 (wgt'ed) examples reached here.  /* #neg=125 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10927526125325286;  // std dev = 0.268, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( movie(E, B) )
%   | | then return 0.09226869767931763;  // std dev = 1.978, 118.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=81 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420264;  // std dev = 5.19e-09, 119.000 (wgt'ed) examples reached here.  /* #neg=119 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15040943678228777;  // std dev = 0.000, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   | else if ( genre(A, E) )
%   | | then return -0.06127722734972111;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.050978367315701566;  // std dev = 1.662, 38.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 129.000 (wgt'ed) examples reached here.  /* #neg=129 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.97199
   AUC PR    = 0.81824
   CLL	      = -0.109174
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total learning time: 1.783 seconds
Total inference time: 2.011 seconds
AUC ROC: 0.97199


Results scoring model
   AUC ROC   = 0.995281
   AUC PR    = 0.972616
   CLL	      = -0.082996
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.962963
   F1        = 0.981132


Total scoring time: 2.227 seconds
Parameter learned model CLL: -0.082996


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 3, 0], 'true,false,true': [0.0, 0, 78], 'true,false,false,true': [1.685, 53, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.58e-08, 117, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [2.23e-07, 0, 78], 'true,false,true': [0.0, 6, 0], 'true,false,false,true': [1.684, 52, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.3e-08, 124, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.144, 9, 0], 'true,false,true': [0.331, 42, 81], 'true,false,false': [0.0, 0, 0], 'false,true': [9.06e-08, 123, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.58e-07, 0, 78], 'true,false,true': [3.73e-09, 5, 0], 'true,false,false,true': [1.658, 33, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 100, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [1.33e-07, 0, 78], 'true,false,false,true': [1.678, 46, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.3e-08, 117, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 78], 'true,false,true': [0.241, 45, 3], 'true,false,false': [0.0, 0, 0], 'false,true': [5.87e-08, 108, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 4, 0], 'true,false,true': [1.19e-07, 0, 78], 'true,false,false,true': [1.658, 33, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [6.66e-08, 116, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 78], 'true,false,true': [0.0, 3, 0], 'true,false,false,true': [1.678, 46, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 125, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.268, 7, 0], 'true,false,true': [1.978, 37, 81], 'true,false,false': [0.0, 0, 0], 'false,true': [5.19e-09, 119, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 78], 'true,false,true': [0.0, 4, 0], 'true,false,false,true': [1.662, 35, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 129, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.24167510256273755, 2.6569439905559303e-17], 'true': [0.0, 0.23908442860325363], 'true,false': [-1.002047447866808e-15, 0.05070153061224475], 'true,false,false': [0.05070153061224475, nan], 'false': [2.6569439905559303e-17, nan]}, {'': [0.1785550761140073, 5.551115123125783e-17], 'true': [6.376665577334232e-16, 0.0467068004934234], 'true,false': [-2.3129646346357427e-18, 0.05157024793388429], 'true,false,false': [0.05157024793388429, nan], 'false': [5.551115123125783e-17, nan]}, {'': [0.11624210743247489, 6.679390554655414e-17], 'true': [0.0022938364736028757, 0.10954889683512224], 'true,false': [0.10954889683512224, nan], 'false': [6.679390554655414e-17, nan]}, {'': [0.09270453428680206, -4.884981308350689e-17], 'true': [3.188332788667116e-16, 0.06711295119411573], 'true,false': [2.7755575615628915e-18, 0.07638888888888909], 'true,false,false': [0.07638888888888909, nan], 'false': [-4.884981308350689e-17, nan]}, {'': [0.07022454069328235, 4.554761126667309e-17], 'true': [0.0, 0.07015259037642933], 'true,false': [2.277380563333654e-16, 0.05747605164514784], 'true,false,false': [0.05747605164514784, nan], 'false': [4.554761126667309e-17, nan]}, {'': [0.05186625512053049, 3.1867512743870234e-17], 'true': [-2.50511861966702e-16, 0.05824702697964545], 'true,false': [0.05824702697964545, nan], 'false': [3.1867512743870234e-17, nan]}, {'': [0.04086995357659819, 3.828355257328126e-17], 'true': [0.0, 0.040688185016360734], 'true,false': [1.8219044506669235e-16, 0.076388888888889], 'true,false,false': [0.076388888888889, nan], 'false': [3.828355257328126e-17, nan]}, {'': [0.03742922755394054, -1.4210854715202004e-17], 'true': [-1.708035422500241e-16, 0.05416270085112515], 'true,false': [-1.1564823173178713e-18, 0.057476051645148026], 'true,false,false': [0.057476051645148026, nan], 'false': [-1.4210854715202004e-17, nan]}, {'': [0.034024710084596364, 2.6122894697062506e-17], 'true': [0.01028506884615292, 0.033158275713472914], 'true,false': [0.033158275713472914, nan], 'false': [2.6122894697062506e-17, nan]}, {'': [0.03234633796798799, -1.5491484064537068e-17], 'true': [-4.839433697084016e-17, 0.06579861320276827], 'true,false': [0.0, 0.0727146814404431], 'true,false,false': [0.0727146814404431, nan], 'false': [-1.5491484064537068e-17, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995125;  // std dev = 0.000, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   | | else if ( actor(B) )
%   | | | then return -0.14185106490048768;  // std dev = 4.08e-08, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | | else return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.14185106490048763;  // std dev = 7.88e-08, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109538;  // std dev = 2.23e-07, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( actor(B) )
%   | | | then return -0.12544463852839144;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.1254446385283913;  // std dev = 0.000, 122.000 (wgt'ed) examples reached here.  /* #neg=122 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( actor(B) )
%   | | then return -0.11231637819360642;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | else return 0.5553664367462836;  // std dev = 3.42e-07, 81.000 (wgt'ed) examples reached here.  /* #pos=81 */
%   else return -0.11231637819360621;  // std dev = 8.69e-08, 117.000 (wgt'ed) examples reached here.  /* #neg=117 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.41751358415831047;  // std dev = 0.000, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( actor(B) )
%   | | | then return -0.10159632948783626;  // std dev = 2.98e-08, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   | | | else return 0.1675135841583102;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else return -0.10159632948783626;  // std dev = 4.59e-08, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.32071184716015005;  // std dev = 0.000, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   | | else if ( actor(B) )
%   | | | then return -0.09269127618926105;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | | else return 0.3774226176676641;  // std dev = 1.29e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.09269127618926089;  // std dev = 6.58e-08, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2551722425694895;  // std dev = 0.000, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   | else if ( actor(B) )
%   | | then return -0.08518475138839679;  // std dev = 2.11e-08, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | | else return 0.29360795727284605;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.0851847513883968;  // std dev = 6.23e-08, 118.000 (wgt'ed) examples reached here.  /* #neg=118 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14764001651946781;  // std dev = 0.109, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(B, E) )
%   | | then return 0.20975771563253573;  // std dev = 0.000, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   | | else if ( actor(B) )
%   | | | then return -0.07877675473109179;  // std dev = 0.000, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | | | else return 0.23657800937400486;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.07877675473109157;  // std dev = 6.66e-08, 114.000 (wgt'ed) examples reached here.  /* #neg=114 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17709649774527716;  // std dev = 3.65e-08, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   | else if ( genre(A, E) )
%   | | then return -0.06870689772390905;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( actor(B) )
%   | | | then return -0.07324622576333704;  // std dev = 1.05e-08, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | | | else return 0.19653217972513448;  // std dev = 3.73e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.07324622576333717;  // std dev = 3.16e-08, 124.000 (wgt'ed) examples reached here.  /* #neg=124 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.15328422161354094;  // std dev = 0.025, 81.000 (wgt'ed) examples reached here.  /* #pos=81 */
%   | else return -0.06795777530190453;  // std dev = 0.009, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   else return -0.06842697784420264;  // std dev = 5.96e-08, 127.000 (wgt'ed) examples reached here.  /* #neg=127 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13394433368397612;  // std dev = 5.37e-08, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   | else if ( genre(A, E) )
%   | | then return -0.060461094985931677;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( actor(B) )
%   | | | then return -0.06422003142830303;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | | else return 0.14705011417036173;  // std dev = 3.73e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.06419184008202626;  // std dev = 0.000, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */


Results
   AUC ROC   = 0.998096
   AUC PR    = 0.964754
   CLL	      = -0.098234
   Precision = 0.784141 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.879012


Total learning time: 2.32 seconds
Total inference time: 1.764 seconds
AUC ROC: 0.998096


Results scoring model
   AUC ROC   = 0.999996
   AUC PR    = 0.999771
   CLL	      = -0.064448
   Precision = 0.987805 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.993865


Total scoring time: 1.973 seconds
Refined model CLL: -0.064448


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.998096
   AUC PR    = 0.964754
   CLL	      = -0.098234
   Precision = 0.784141 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.879012


Total learning time: 8.303 seconds
Total inference time: 1.764 seconds
AUC ROC: 0.998096
Total revision time: 8.303
Best scored revision CLL: -0.064448


Dataset: 4_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 00:09:09
{'AUC ROC': 0.998096, 'AUC PR': 0.964754, 'CLL': -0.098234, 'Precision': [0.784141, 0.5], 'Recall': 1.0, 'F1': 0.879012, 'Learning time': 8.303, 'Inference time': 1.764, 'parameter_0.4': {'AUC ROC': 0.97199, 'AUC PR': 0.81824, 'CLL': -0.109174, 'Precision': [1.0, 0.5], 'Recall': 0.724719, 'F1': 0.840391, 'Learning time': 1.783, 'Inference time': 2.011}}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995107;  // std dev = 6.42e-07, 118.000 (wgt'ed) examples reached here.  /* #pos=118 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.07627729440868444;  // std dev = 1.933, 61.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048824;  // std dev = 0.000, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109552;  // std dev = 0.000, 118.000 (wgt'ed) examples reached here.  /* #pos=118 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.06830092761920835;  // std dev = 1.934, 62.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839152;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #neg=178 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( movie(E, A) )
%   | | then return 0.3256587306289437;  // std dev = 0.332, 187.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=122 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360651;  // std dev = 0.000, 182.000 (wgt'ed) examples reached here.  /* #neg=182 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.47420265808579337;  // std dev = 0.000, 118.000 (wgt'ed) examples reached here.  /* #pos=118 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783627;  // std dev = 3.73e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.10186187595074438;  // std dev = 1.935, 63.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783649;  // std dev = 0.000, 167.000 (wgt'ed) examples reached here.  /* #neg=167 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926097;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( genre(B, E) )
%   | | then return 0.3595117912607604;  // std dev = 1.69e-07, 118.000 (wgt'ed) examples reached here.  /* #pos=118 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.08725441695153642;  // std dev = 1.934, 62.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926058;  // std dev = 8.82e-08, 188.000 (wgt'ed) examples reached here.  /* #neg=188 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2815076313799702;  // std dev = 0.000, 118.000 (wgt'ed) examples reached here.  /* #pos=118 */
%   | else if ( movie(E, A) )
%   | | then return -0.06225167137452378;  // std dev = 0.264, 53.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=4 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 7.74e-08, 194.000 (wgt'ed) examples reached here.  /* #neg=194 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08045719003496063;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.22819997411135418;  // std dev = 0.000, 118.000 (wgt'ed) examples reached here.  /* #pos=118 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.06899233598810454;  // std dev = 1.934, 62.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109148;  // std dev = 8.16e-08, 178.000 (wgt'ed) examples reached here.  /* #neg=178 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.19050947571759377;  // std dev = 0.000, 118.000 (wgt'ed) examples reached here.  /* #pos=118 */
%   | else if ( genre(A, E) )
%   | | then return -0.07470202996701367;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.052999727550951614;  // std dev = 1.926, 55.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333673;  // std dev = 7.74e-09, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.06969975478981989;  // std dev = 1.86e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( movie(E, B) )
%   | | then return 0.08879723009243498;  // std dev = 2.374, 179.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=122 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420262;  // std dev = 5.67e-09, 180.000 (wgt'ed) examples reached here.  /* #neg=180 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14691120302908872;  // std dev = 0.496, 119.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=118 */
%   | else if ( genre(A, E) )
%   | | then return -0.06531362773833636;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.07708327643619518;  // std dev = 1.947, 76.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 158.000 (wgt'ed) examples reached here.  /* #neg=158 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.97199
   AUC PR    = 0.81824
   CLL	      = -0.109453
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total learning time: 2.264 seconds
Total inference time: 1.871 seconds
AUC ROC: 0.97199


Results scoring model
   AUC ROC   = 0.995753
   AUC PR    = 0.974906
   CLL	      = -0.082435
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.967213
   F1        = 0.983333


Total scoring time: 2.415 seconds
Parameter learned model CLL: -0.082435


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 11, 0], 'true,false,true': [6.42e-07, 0, 118], 'true,false,false,true': [1.933, 57, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 172, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 118], 'true,false,true': [0.0, 4, 0], 'true,false,false,true': [1.934, 58, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 178, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 7, 0], 'true,false,true': [0.332, 65, 122], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 182, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 118], 'true,false,true': [3.73e-09, 8, 0], 'true,false,false,true': [1.935, 59, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 167, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 8, 0], 'true,false,true': [1.69e-07, 0, 118], 'true,false,false,true': [1.934, 58, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.82e-08, 188, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 118], 'true,false,true': [0.264, 49, 4], 'true,false,false': [0.0, 0, 0], 'false,true': [7.74e-08, 194, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 4, 0], 'true,false,true': [0.0, 0, 118], 'true,false,false,true': [1.934, 58, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.16e-08, 178, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 118], 'true,false,true': [0.0, 4, 0], 'true,false,false,true': [1.926, 51, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.74e-09, 172, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [1.86e-09, 5, 0], 'true,false,true': [2.374, 57, 122], 'true,false,false': [0.0, 0, 0], 'false,true': [5.67e-09, 180, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.496, 1, 118], 'true,false,true': [0.0, 6, 0], 'true,false,false,true': [1.947, 72, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 158, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.22980609418282943, -1.8073398075293246e-16], 'true': [-1.0092936587501423e-17, 0.21703442464342967], 'true,false': [3.4924981927191367e-15, 0.061273851115291475], 'true,false,false': [0.061273851115291475, nan], 'false': [-1.8073398075293246e-16, nan]}, {'': [0.16441709576479321, -1.4969299208429077e-17], 'true': [-1.2043097216272884e-15, 0.05688190129756873], 'true,false': [0.0, 0.06035379812695119], 'true,false,false': [0.06035379812695119, nan], 'false': [-1.4969299208429077e-17, nan]}, {'': [0.11307586076067522, -2.4400506035717728e-18], 'true': [-1.982541115402065e-18, 0.11038722755093094], 'true,false': [0.11038722755093094, nan], 'false': [-2.4400506035717728e-18, nan]}, {'': [0.09764434090493068, -7.578767952531009e-17], 'true': [-3.6129291648818656e-16, 0.052761017557582925], 'true,false': [1.734723475976807e-18, 0.05946082136558322], 'true,false,false': [0.05946082136558322, nan], 'false': [-7.578767952531009e-17, nan]}, {'': [0.06668200452762091, 4.133809134242604e-17], 'true': [0.0, 0.06585871342149545], 'true,false': [2.408619443254577e-16, 0.06035379812695106], 'true,false,false': [0.06035379812695106, nan], 'false': [4.133809134242604e-17, nan]}, {'': [0.04680428281860126, 3.0903115118432194e-17], 'true': [-1.5053871520341106e-17, 0.06946551783368637], 'true,false': [0.06946551783368637, nan], 'false': [3.0903115118432194e-17, nan]}, {'': [0.04075167910661219, 3.742324802107269e-17], 'true': [0.0, 0.04073214272944882], 'true,false': [-7.526935760170553e-18, 0.06035379812695121], 'true,false,false': [0.06035379812695121, nan], 'false': [3.742324802107269e-17, nan]}, {'': [0.034302008721852295, 6.002950075008113e-17], 'true': [-6.774242184153498e-17, 0.06289571428353864], 'true,false': [0.0, 0.06743801652892549], 'true,false,false': [0.06743801652892549, nan], 'false': [6.002950075008113e-17, nan]}, {'': [0.031295999875541596, 3.20731096002823e-17], 'true': [6.938893903907229e-19, 0.03148754595161317], 'true,false': [0.03148754595161317, nan], 'false': [3.20731096002823e-17, nan]}, {'': [0.032107279960054184, -8.432073604748025e-18], 'true': [0.002069122738842016, 0.046222488003682116], 'true,false': [0.0, 0.049861495844875446], 'true,false,false': [0.049861495844875446, nan], 'false': [-8.432073604748025e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995107;  // std dev = 6.42e-07, 118.000 (wgt'ed) examples reached here.  /* #pos=118 */
%   | | else if ( actor(B) )
%   | | | then return -0.14185106490048766;  // std dev = 6.14e-08, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.1418510649004883;  // std dev = 0.000, 179.000 (wgt'ed) examples reached here.  /* #neg=179 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109551;  // std dev = 0.000, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | else return 0.708207838201096;  // std dev = 0.097, 75.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=74 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( actor(B) )
%   | | | then return -0.1254446385283916;  // std dev = 0.000, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.12544463852839133;  // std dev = 4.21e-08, 154.000 (wgt'ed) examples reached here.  /* #neg=154 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14062338665212717;  // std dev = 0.098, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( director(B) )
%   | | then return 0.5570527245387499;  // std dev = 0.015, 122.000 (wgt'ed) examples reached here.  /* #pos=122 */
%   | | else return -0.11231637819360626;  // std dev = 4.83e-08, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   else return -0.11231637819360664;  // std dev = 0.000, 199.000 (wgt'ed) examples reached here.  /* #neg=199 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.4171035428593726;  // std dev = 0.000, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | else return 0.4115547000652573;  // std dev = 0.071, 75.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=74 */
%   | else if ( genre(A, E) )
%   | | then return -0.09904160282380954;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( actor(B) )
%   | | | then return -0.10159632948783624;  // std dev = 3.65e-08, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   | | | else return 0.41710354285937257;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.10159632948783653;  // std dev = 0.000, 194.000 (wgt'ed) examples reached here.  /* #neg=194 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.0905481178060875;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.32273692995688585;  // std dev = 0.019, 118.000 (wgt'ed) examples reached here.  /* #pos=118 */
%   | | else if ( actor(B) )
%   | | | then return -0.09269127618926107;  // std dev = 0.000, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | | | else return 0.32043387315518257;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.09269127618926061;  // std dev = 8.30e-08, 175.000 (wgt'ed) examples reached here.  /* #neg=175 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2565544112700113;  // std dev = 0.017, 118.000 (wgt'ed) examples reached here.  /* #pos=118 */
%   | else if ( actor(B) )
%   | | then return -0.08509935020598293;  // std dev = 0.003, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   | | else return 0.25498255790562974;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.08518475138839678;  // std dev = 7.45e-08, 182.000 (wgt'ed) examples reached here.  /* #neg=182 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07708644202389615;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.21073408770247803;  // std dev = 0.015, 118.000 (wgt'ed) examples reached here.  /* #pos=118 */
%   | | else if ( actor(B) )
%   | | | then return -0.07878295260134352;  // std dev = 1.05e-08, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | | | else return 0.20962371604181262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.07877675473109148;  // std dev = 8.43e-08, 168.000 (wgt'ed) examples reached here.  /* #neg=168 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1778126070643751;  // std dev = 0.013, 118.000 (wgt'ed) examples reached here.  /* #pos=118 */
%   | else if ( genre(A, E) )
%   | | then return -0.07177788693303289;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( actor(B) )
%   | | | then return -0.0732516023622196;  // std dev = 0.000, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | | | else return 0.1769982091703769;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.07324622576333675;  // std dev = 9.19e-08, 165.000 (wgt'ed) examples reached here.  /* #neg=165 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.06714016626192368;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( actor(B) )
%   | | then return -0.06843168405779802;  // std dev = 1.83e-08, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   | | else return 0.15326683618615744;  // std dev = 0.012, 122.000 (wgt'ed) examples reached here.  /* #pos=122 */
%   else return -0.06842697784420262;  // std dev = 8.16e-08, 200.000 (wgt'ed) examples reached here.  /* #neg=200 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13443348306803335;  // std dev = 0.010, 118.000 (wgt'ed) examples reached here.  /* #pos=118 */
%   | else if ( genre(A, E) )
%   | | then return -0.06305526969646687;  // std dev = 1.86e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( actor(B) )
%   | | | then return -0.06419599236176586;  // std dev = 0.000, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | | | else return 0.1338795110810842;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.06419184008202626;  // std dev = 0.000, 195.000 (wgt'ed) examples reached here.  /* #neg=195 */


Results
   AUC ROC   = 0.991725
   AUC PR    = 0.81335
   CLL	      = -0.098202
   Precision = 0.784141 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.879012


Total learning time: 3.039 seconds
Total inference time: 1.906 seconds
AUC ROC: 0.991725


Results scoring model
   AUC ROC   = 0.999903
   AUC PR    = 0.99211
   CLL	      = -0.064301
   Precision = 0.99187 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.995918


Total scoring time: 2.494 seconds
Refined model CLL: -0.064301


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.991725
   AUC PR    = 0.81335
   CLL	      = -0.098202
   Precision = 0.784141 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.879012


Total learning time: 10.212 seconds
Total inference time: 1.906 seconds
AUC ROC: 0.991725
Total revision time: 10.212
Best scored revision CLL: -0.064301


Dataset: 4_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 00:09:23
{'AUC ROC': 0.991725, 'AUC PR': 0.81335, 'CLL': -0.098202, 'Precision': [0.784141, 0.5], 'Recall': 1.0, 'F1': 0.879012, 'Learning time': 10.212, 'Inference time': 1.906, 'parameter_0.6': {'AUC ROC': 0.97199, 'AUC PR': 0.81824, 'CLL': -0.109453, 'Precision': [1.0, 0.5], 'Recall': 0.724719, 'F1': 0.840391, 'Learning time': 2.264, 'Inference time': 1.871}}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995098;  // std dev = 9.54e-07, 154.000 (wgt'ed) examples reached here.  /* #pos=154 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.03596871195931121;  // std dev = 2.837, 85.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048846;  // std dev = 0.000, 228.000 (wgt'ed) examples reached here.  /* #neg=228 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109563;  // std dev = 0.000, 154.000 (wgt'ed) examples reached here.  /* #pos=154 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.04569202917193688;  // std dev = 2.859, 98.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839183;  // std dev = 0.000, 238.000 (wgt'ed) examples reached here.  /* #neg=238 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( movie(E, A) )
%   | | then return 0.3310475696746159;  // std dev = 0.339, 248.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=163 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360689;  // std dev = 0.000, 261.000 (wgt'ed) examples reached here.  /* #neg=261 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4684641071914285;  // std dev = 0.679, 155.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=154 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 3.73e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.0652416272384884;  // std dev = 2.831, 82.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783658;  // std dev = 0.000, 244.000 (wgt'ed) examples reached here.  /* #neg=244 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10963695163509762;  // std dev = 0.195, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( genre(B, E) )
%   | | then return 0.35959232093791377;  // std dev = 1.79e-07, 154.000 (wgt'ed) examples reached here.  /* #pos=154 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.058634480613326156;  // std dev = 2.835, 84.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926047;  // std dev = 8.16e-08, 238.000 (wgt'ed) examples reached here.  /* #neg=238 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.281562079660015;  // std dev = 2.27e-07, 154.000 (wgt'ed) examples reached here.  /* #pos=154 */
%   | else if ( movie(E, A) )
%   | | then return -0.0747467451060992;  // std dev = 0.273, 111.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=9 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 7.88e-08, 208.000 (wgt'ed) examples reached here.  /* #neg=208 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.0783057795084208;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.22823779627076826;  // std dev = 0.000, 154.000 (wgt'ed) examples reached here.  /* #pos=154 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.05340674148686537;  // std dev = 2.854, 95.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109143;  // std dev = 6.66e-08, 236.000 (wgt'ed) examples reached here.  /* #neg=236 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.19053675976302362;  // std dev = 0.000, 154.000 (wgt'ed) examples reached here.  /* #pos=154 */
%   | else if ( genre(A, E) )
%   | | then return -0.07283750182539121;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.05415102636533347;  // std dev = 2.866, 103.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333677;  // std dev = 7.62e-09, 246.000 (wgt'ed) examples reached here.  /* #neg=246 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.06806909463536003;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( movie(E, B) )
%   | | then return 0.0844552567390581;  // std dev = 3.259, 250.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=163 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420261;  // std dev = 4.56e-09, 203.000 (wgt'ed) examples reached here.  /* #neg=203 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1516757084193688;  // std dev = 1.62e-07, 154.000 (wgt'ed) examples reached here.  /* #pos=154 */
%   | else if ( genre(A, E) )
%   | | then return -0.06387598556146916;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.053415015524029566;  // std dev = 2.859, 98.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202625;  // std dev = 1.61e-09, 246.000 (wgt'ed) examples reached here.  /* #neg=246 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.97199
   AUC PR    = 0.81824
   CLL	      = -0.110828
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total learning time: 2.169 seconds
Total inference time: 1.755 seconds
AUC ROC: 0.97199


Results scoring model
   AUC ROC   = 0.992813
   AUC PR    = 0.955872
   CLL	      = -0.088216
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.944785
   F1        = 0.971609


Total scoring time: 2.559 seconds
Parameter learned model CLL: -0.088216


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 10, 0], 'true,false,true': [9.54e-07, 0, 154], 'true,false,false,true': [2.837, 76, 9], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 228, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 154], 'true,false,true': [0.0, 3, 0], 'true,false,false,true': [2.859, 89, 9], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 238, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 8, 0], 'true,false,true': [0.339, 85, 163], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 261, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.679, 1, 154], 'true,false,true': [3.73e-09, 10, 0], 'true,false,false,true': [2.831, 73, 9], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 244, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.195, 12, 0], 'true,false,true': [1.79e-07, 0, 154], 'true,false,false,true': [2.835, 75, 9], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.16e-08, 238, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [2.27e-07, 0, 154], 'true,false,true': [0.273, 102, 9], 'true,false,false': [0.0, 0, 0], 'false,true': [7.88e-08, 208, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 3, 0], 'true,false,true': [0.0, 0, 154], 'true,false,false,true': [2.854, 86, 9], 'true,false,false,false': [0.0, 0, 0], 'false,true': [6.66e-08, 236, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 154], 'true,false,true': [0.0, 5, 0], 'true,false,false,true': [2.866, 94, 9], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.62e-09, 246, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 6, 0], 'true,false,true': [3.259, 87, 163], 'true,false,false': [0.0, 0, 0], 'false,true': [4.56e-09, 203, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.62e-07, 0, 154], 'true,false,true': [0.0, 5, 0], 'true,false,false,true': [2.859, 89, 9], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.61e-09, 246, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.2260931275302064, -2.1814908554038162e-16], 'true': [-1.1102230246251566e-17, 0.21687295390487404], 'true,false': [5.905809751772262e-15, 0.09467128027681677], 'true,false,false': [0.09467128027681677, nan], 'false': [-2.1814908554038162e-16, nan]}, {'': [0.17304046941516832, -7.277092094181698e-17], 'true': [-2.5837917664003644e-15, 0.08110875295567281], 'true,false': [0.0, 0.0834027488546438], 'true,false,false': [0.0834027488546438, nan], 'false': [-7.277092094181698e-17, nan]}, {'': [0.11760238943762866, -1.0038798230327086e-16], 'true': [-1.734723475976807e-18, 0.11525315270744295], 'true,false': [0.11525315270744295, nan], 'false': [-1.0038798230327086e-16, nan]}, {'': [0.10191985476220422, -7.280150981148567e-17], 'true': [0.0029748268162220464, 0.0872171214564671], 'true,false': [1.3877787807814458e-18, 0.09770969660916144], 'true,false,false': [0.09770969660916144, nan], 'false': [-7.280150981148567e-17, nan]}, {'': [0.07504952486942416, 2.7988815746852685e-17], 'true': [0.003158715079471961, 0.07370918497780671], 'true,false': [2.0762612408574356e-16, 0.09566326530612239], 'true,false,false': [0.09566326530612239, nan], 'false': [2.7988815746852685e-17, nan]}, {'': [0.06203636253059794, 2.9890619893754213e-17], 'true': [3.3450875547147575e-16, 0.07432663812397254], 'true,false': [0.07432663812397254, nan], 'false': [2.9890619893754213e-17, nan]}, {'': [0.05129176317148822, 1.881733940042638e-17], 'true': [0.0, 0.05143787475496744], 'true,false': [-6.920870802858119e-17, 0.08576177285318547], 'true,false,false': [0.08576177285318547, nan], 'false': [1.881733940042638e-17, nan]}, {'': [0.04596533225943712, 5.77677020943171e-17], 'true': [-1.2688263138573217e-16, 0.0760671974548255], 'true,false': [-6.938893903907229e-19, 0.07974361391271559], 'true,false,false': [0.07974361391271559, nan], 'false': [5.77677020943171e-17, nan]}, {'': [0.042024243229055014, 2.0782499968352683e-17], 'true': [-1.1564823173178713e-18, 0.042487582619001076], 'true,false': [0.042487582619001076, nan], 'false': [2.0782499968352683e-17, nan]}, {'': [0.041956944133885905, 2.7078610356711136e-18], 'true': [1.7013807390359543e-16, 0.07935912607850831], 'true,false': [-6.938893903907229e-19, 0.08340274885464373], 'true,false,false': [0.08340274885464373, nan], 'false': [2.7078610356711136e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995098;  // std dev = 9.54e-07, 154.000 (wgt'ed) examples reached here.  /* #pos=154 */
%   | | else if ( actor(B) )
%   | | | then return -0.14185106490048766;  // std dev = 7.88e-08, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.1418510649004885;  // std dev = 0.000, 221.000 (wgt'ed) examples reached here.  /* #neg=221 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109563;  // std dev = 0.000, 154.000 (wgt'ed) examples reached here.  /* #pos=154 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( actor(B) )
%   | | | then return -0.12544463852839147;  // std dev = 0.000, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
%   | | | else return 0.7194734122109543;  // std dev = 2.98e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.12544463852839172;  // std dev = 0.000, 214.000 (wgt'ed) examples reached here.  /* #neg=214 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( actor(B) )
%   | | then return -0.11231637819360624;  // std dev = 6.14e-08, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
%   | | else return 0.5553664367462833;  // std dev = 5.53e-07, 163.000 (wgt'ed) examples reached here.  /* #pos=163 */
%   else return -0.11231637819360683;  // std dev = 0.000, 245.000 (wgt'ed) examples reached here.  /* #neg=245 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.41751358415830886;  // std dev = 4.66e-07, 154.000 (wgt'ed) examples reached here.  /* #pos=154 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783627;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( actor(B) )
%   | | | then return -0.1015963294878362;  // std dev = 5.27e-08, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
%   | | | else return 0.41751358415831025;  // std dev = 2.11e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.1015963294878366;  // std dev = 0.000, 269.000 (wgt'ed) examples reached here.  /* #neg=269 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12024005757337904;  // std dev = 0.067, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(B, E) )
%   | | then return 0.3207118471601497;  // std dev = 2.92e-07, 154.000 (wgt'ed) examples reached here.  /* #pos=154 */
%   | | else if ( actor(B) )
%   | | | then return -0.09269127618926107;  // std dev = 0.000, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
%   | | | else return 0.3207118471601498;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.09269127618926049;  // std dev = 7.60e-08, 234.000 (wgt'ed) examples reached here.  /* #neg=234 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.25517224256948984;  // std dev = 0.000, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | | else return 0.24961503548903305;  // std dev = 0.053, 93.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=92 */
%   | else if ( actor(B) )
%   | | then return -0.08505866577218128;  // std dev = 0.005, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
%   | | else return 0.25517224256948956;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.08518475138839678;  // std dev = 8.69e-08, 237.000 (wgt'ed) examples reached here.  /* #neg=237 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07680950996495794;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( genre(B, E) )
%   | | then return 0.21030890626904794;  // std dev = 0.006, 154.000 (wgt'ed) examples reached here.  /* #pos=154 */
%   | | else if ( actor(B) )
%   | | | then return -0.07878590537350767;  // std dev = 4.59e-08, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
%   | | | else return 0.20975771563253587;  // std dev = 7.45e-09, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.07877675473109144;  // std dev = 7.45e-08, 208.000 (wgt'ed) examples reached here.  /* #neg=208 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.177500699997105;  // std dev = 0.005, 154.000 (wgt'ed) examples reached here.  /* #pos=154 */
%   | else if ( genre(A, E) )
%   | | then return -0.07153693942476151;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( actor(B) )
%   | | | then return -0.07325416384769287;  // std dev = 0.000, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
%   | | | else return 0.17709649774527736;  // std dev = 7.45e-09, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.07324622576333664;  // std dev = 1.29e-07, 224.000 (wgt'ed) examples reached here.  /* #neg=224 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.06692871002847957;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( director(B), actor(A) )
%   | | then return 0.15303351261899797;  // std dev = 0.004, 163.000 (wgt'ed) examples reached here.  /* #pos=163 */
%   | | else if ( female(B) )
%   | | | then return -0.068433926147957;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | | | else return -0.0840103704631245;  // std dev = 0.771, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   else return -0.06842697784420285;  // std dev = 0.000, 271.000 (wgt'ed) examples reached here.  /* #neg=271 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13424831230962006;  // std dev = 0.004, 154.000 (wgt'ed) examples reached here.  /* #pos=154 */
%   | else if ( genre(A, E) )
%   | | then return -0.06286826885379497;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( actor(B) )
%   | | | then return -0.06357833618176253;  // std dev = 0.004, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
%   | | | else return 0.13397341941108154;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.06419184008202625;  // std dev = 2.36e-08, 237.000 (wgt'ed) examples reached here.  /* #neg=237 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.09546
   Precision = 0.784141 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.879012


Total learning time: 3.23 seconds
Total inference time: 1.741 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063998
   Precision = 0.993902 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.996942


Total scoring time: 2.558 seconds
Refined model CLL: -0.063998


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.09546
   Precision = 0.784141 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.879012


Total learning time: 10.516 seconds
Total inference time: 1.741 seconds
AUC ROC: 1.0
Total revision time: 10.516
Best scored revision CLL: -0.063998


Dataset: 4_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 00:09:38
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.09546, 'Precision': [0.784141, 0.5], 'Recall': 1.0, 'F1': 0.879012, 'Learning time': 10.516, 'Inference time': 1.741, 'parameter_0.8': {'AUC ROC': 0.97199, 'AUC PR': 0.81824, 'CLL': -0.110828, 'Precision': [1.0, 0.5], 'Recall': 0.724719, 'F1': 0.840391, 'Learning time': 2.169, 'Inference time': 1.755}}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995093;  // std dev = 1.09e-06, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.05710530218862326;  // std dev = 3.025, 118.000 (wgt'ed) examples reached here.  /* #neg=108 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048782;  // std dev = 1.07e-07, 303.000 (wgt'ed) examples reached here.  /* #neg=303 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7151404991302422;  // std dev = 0.843, 195.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=194 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.0407011868196847;  // std dev = 3.009, 106.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839205;  // std dev = 0.000, 318.000 (wgt'ed) examples reached here.  /* #neg=318 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12503207752382692;  // std dev = 0.108, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( movie(E, A) )
%   | | then return 0.3503070019725072;  // std dev = 0.331, 298.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=204 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360692;  // std dev = 0.000, 290.000 (wgt'ed) examples reached here.  /* #neg=290 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4691401657234178;  // std dev = 5.40e-07, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else if ( genre(A, E) )
%   | | then return -0.10044157571469717;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.07340689706083942;  // std dev = 2.997, 98.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783662;  // std dev = 0.000, 293.000 (wgt'ed) examples reached here.  /* #neg=293 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14912791545615095;  // std dev = 0.240, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(B, E) )
%   | | then return 0.35600719739217523;  // std dev = 4.13e-07, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.0733367874097685;  // std dev = 3.014, 109.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926042;  // std dev = 1.56e-07, 301.000 (wgt'ed) examples reached here.  /* #neg=301 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.279137524240589;  // std dev = 0.000, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else if ( movie(E, A) )
%   | | then return -0.0643393915618624;  // std dev = 0.281, 115.000 (wgt'ed) examples reached here.  /* #neg=105 #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 9.77e-08, 275.000 (wgt'ed) examples reached here.  /* #neg=275 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07542212160621427;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.22655245876994465;  // std dev = 8.43e-08, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.0688429526567934;  // std dev = 3.036, 128.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109141;  // std dev = 4.71e-08, 290.000 (wgt'ed) examples reached here.  /* #neg=290 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18678996035405052;  // std dev = 0.492, 195.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=194 */
%   | else if ( genre(A, E) )
%   | | then return -0.07032819862583028;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.053799490525874294;  // std dev = 3.025, 118.000 (wgt'ed) examples reached here.  /* #neg=108 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333696;  // std dev = 5.74e-09, 294.000 (wgt'ed) examples reached here.  /* #neg=294 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.06586664837137025;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( movie(E, B) )
%   | | then return 0.08364272884149929;  // std dev = 3.512, 311.000 (wgt'ed) examples reached here.  /* #neg=107 #pos=204 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420299;  // std dev = 0.000, 296.000 (wgt'ed) examples reached here.  /* #neg=296 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15124539279122473;  // std dev = 0.000, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else if ( genre(A, E) )
%   | | then return -0.061928037930680344;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.047806004954682006;  // std dev = 3.009, 106.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202598;  // std dev = 6.38e-09, 295.000 (wgt'ed) examples reached here.  /* #neg=295 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.97199
   AUC PR    = 0.81824
   CLL	      = -0.110207
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total learning time: 2.586 seconds
Total inference time: 1.853 seconds
AUC ROC: 0.97199


Results scoring model
   AUC ROC   = 0.993632
   AUC PR    = 0.960741
   CLL	      = -0.087266
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.95098
   F1        = 0.974874


Total scoring time: 3.227 seconds
Parameter learned model CLL: -0.087266


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 7, 0], 'true,false,true': [1.09e-06, 0, 194], 'true,false,false,true': [3.025, 108, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.07e-07, 303, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.843, 1, 194], 'true,false,true': [0.0, 9, 0], 'true,false,false,true': [3.009, 96, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 318, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.108, 9, 0], 'true,false,true': [0.331, 94, 204], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 290, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [5.4e-07, 0, 194], 'true,false,true': [0.0, 11, 0], 'true,false,false,true': [2.997, 88, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 293, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.24, 7, 0], 'true,false,true': [4.13e-07, 0, 194], 'true,false,false,true': [3.014, 99, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.56e-07, 301, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 194], 'true,false,true': [0.281, 105, 10], 'true,false,false': [0.0, 0, 0], 'false,true': [9.77e-08, 275, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 4, 0], 'true,false,true': [8.43e-08, 0, 194], 'true,false,false,true': [3.036, 118, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.71e-08, 290, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.492, 1, 194], 'true,false,true': [2.63e-09, 7, 0], 'true,false,false,true': [3.025, 108, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.74e-09, 294, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 4, 0], 'true,false,true': [3.512, 107, 204], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 296, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 194], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [3.009, 96, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [6.38e-09, 295, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.23054018730162304, 3.8106664871622534e-17], 'true': [-7.93016446160826e-18, 0.22633136094675016], 'true,false': [6.15315358802561e-15, 0.07756391841424845], 'true,false,false': [0.07756391841424845, nan], 'false': [3.8106664871622534e-17, nan]}, {'': [0.16736028992128948, -9.216945864812621e-17], 'true': [0.003642182338411897, 0.0792711183175667], 'true,false': [0.0, 0.08543965824136661], 'true,false,false': [0.08543965824136661, nan], 'false': [-9.216945864812621e-17, nan]}, {'': [0.11284402141896338, -1.0413126299932503e-16], 'true': [0.0012935120756525796, 0.10958913606277955], 'true,false': [0.10958913606277955, nan], 'false': [-1.0413126299932503e-16, nan]}, {'': [0.09814119463591889, -5.607952479335261e-17], 'true': [1.5016624827919643e-15, 0.08244789093630919], 'true,false': [-2.523234146875356e-18, 0.09162848812994552], 'true,false,false': [0.09162848812994552, nan], 'false': [-5.607952479335261e-17, nan]}, {'': [0.07369760452146888, 8.114586890947988e-17], 'true': [0.008238146382817038, 0.07243290794132969], 'true,false': [8.790219411465157e-16, 0.08332631933338978], 'true,false,false': [0.08332631933338978, nan], 'false': [8.114586890947988e-17, nan]}, {'': [0.056964724104820175, 3.47197018610049e-17], 'true': [-4.2119801346603875e-16, 0.07899241659397944], 'true,false': [0.07899241659397944, nan], 'false': [3.47197018610049e-17, nan]}, {'': [0.0493328584085923, 7.656710514656252e-18], 'true': [0.0, 0.04952778931997135], 'true,false': [3.6625914214438153e-17, 0.07202148437499954], 'true,false,false': [0.07202148437499954, nan], 'false': [7.656710514656252e-18, nan]}, {'': [0.0432487416782084, 3.398641912117826e-17], 'true': [0.0012419512705777928, 0.07323478133224327], 'true,false': [9.912705577010326e-19, 0.07756391841424821], 'true,false,false': [0.07756391841424821, nan], 'false': [3.398641912117826e-17, nan]}, {'': [0.03944104414328782, -5.326069915431494e-17], 'true': [0.0, 0.03966447615064317], 'true,false': [0.03966447615064317, nan], 'false': [-5.326069915431494e-17, nan]}, {'': [0.03911609305065291, 4.139814668093804e-17], 'true': [-5.036063204485246e-17, 0.08386106713751938], 'true,false': [0.0, 0.08543965824136675], 'true,false,false': [0.08543965824136675, nan], 'false': [4.139814668093804e-17, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995093;  // std dev = 1.09e-06, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | | else if ( actor(B) )
%   | | | then return -0.14185106490048768;  // std dev = 6.32e-08, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.1418510649004877;  // std dev = 1.58e-07, 319.000 (wgt'ed) examples reached here.  /* #neg=319 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.719473412210957;  // std dev = 0.000, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( actor(B) )
%   | | | then return -0.12544463852839133;  // std dev = 0.000, 111.000 (wgt'ed) examples reached here.  /* #neg=111 */
%   | | | else return 0.7194734122109544;  // std dev = 2.98e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.12544463852839197;  // std dev = 0.000, 289.000 (wgt'ed) examples reached here.  /* #neg=289 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12511659156683602;  // std dev = 0.109, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( director(B) )
%   | | then return 0.5553664367462833;  // std dev = 6.36e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | | else return -0.1123163781936062;  // std dev = 7.74e-08, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
%   else return -0.11231637819360692;  // std dev = 0.000, 293.000 (wgt'ed) examples reached here.  /* #neg=293 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4175135841583099;  // std dev = 3.04e-07, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else if ( genre(A, E) )
%   | | then return -0.10043393986968052;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( actor(B) )
%   | | | then return -0.10159632948783633;  // std dev = 0.000, 111.000 (wgt'ed) examples reached here.  /* #neg=111 */
%   | | | else return 0.4175135841583103;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.10159632948783663;  // std dev = 0.000, 308.000 (wgt'ed) examples reached here.  /* #neg=308 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( female(B) )
%   | | then return -0.09171716827390268;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.1463490168157371;  // std dev = 0.086, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(B, E) )
%   | | then return 0.320711847160149;  // std dev = 3.95e-07, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | | else if ( actor(B) )
%   | | | then return -0.09269127618926086;  // std dev = 6.91e-08, 114.000 (wgt'ed) examples reached here.  /* #neg=114 */
%   | | | else return 0.3207118471601498;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.09269127618926044;  // std dev = 1.66e-07, 293.000 (wgt'ed) examples reached here.  /* #neg=293 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.25517224256949106;  // std dev = 0.000, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else if ( actor(B) )
%   | | then return -0.08492239890872018;  // std dev = 0.011, 107.000 (wgt'ed) examples reached here.  /* #neg=107 */
%   | | else return 0.2551722425694896;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.08518475138839678;  // std dev = 1.01e-07, 293.000 (wgt'ed) examples reached here.  /* #neg=293 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07610493021137833;  // std dev = 0.005, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.209757715632535;  // std dev = 2.92e-07, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | | else if ( actor(B) )
%   | | | then return -0.07879579601115248;  // std dev = 0.000, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
%   | | | else return 0.2097577156325357;  // std dev = 1.97e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.07877675473109143;  // std dev = 4.21e-08, 286.000 (wgt'ed) examples reached here.  /* #neg=286 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17709649774527758;  // std dev = 0.000, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else if ( genre(A, E) )
%   | | then return -0.07032381883701118;  // std dev = 0.005, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( actor(B) )
%   | | | then return -0.07326274373852133;  // std dev = 5.77e-08, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
%   | | | else return 0.17709649774527736;  // std dev = 7.45e-09, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.07324622576333693;  // std dev = 1.02e-07, 288.000 (wgt'ed) examples reached here.  /* #neg=288 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( female(B) )
%   | | then return -0.06812118353331544;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else return -0.10225139114827815;  // std dev = 0.092, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( actor(B) )
%   | | then return -0.068441436131361;  // std dev = 0.000, 113.000 (wgt'ed) examples reached here.  /* #neg=113 */
%   | | else return 0.15274385809367153;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.06842697784420296;  // std dev = 0.000, 290.000 (wgt'ed) examples reached here.  /* #neg=290 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1317544258327127;  // std dev = 0.438, 195.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=194 */
%   | else if ( genre(A, E) )
%   | | then return -0.060515293494319104;  // std dev = 0.006, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( actor(B) )
%   | | | then return -0.06420459648704416;  // std dev = 4.34e-08, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
%   | | | else return 0.13400703000801095;  // std dev = 5.27e-09, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.0641918400820261;  // std dev = 8.56e-08, 275.000 (wgt'ed) examples reached here.  /* #neg=275 */


Results
   AUC ROC   = 0.988073
   AUC PR    = 0.631126
   CLL	      = -0.097787
   Precision = 0.784141 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.879012


Total learning time: 3.255 seconds
Total inference time: 1.812 seconds
AUC ROC: 0.988073


Results scoring model
   AUC ROC   = 0.999909
   AUC PR    = 0.981202
   CLL	      = -0.064105
   Precision = 0.995122 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.997555


Total scoring time: 3.066 seconds
Refined model CLL: -0.064105


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.988073
   AUC PR    = 0.631126
   CLL	      = -0.097787
   Precision = 0.784141 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.879012


Total learning time: 12.134 seconds
Total inference time: 1.812 seconds
AUC ROC: 0.988073
Total revision time: 12.134
Best scored revision CLL: -0.064105


Dataset: 4_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 00:09:55
{'AUC ROC': 0.988073, 'AUC PR': 0.631126, 'CLL': -0.097787, 'Precision': [0.784141, 0.5], 'Recall': 1.0, 'F1': 0.879012, 'Learning time': 12.134, 'Inference time': 1.812, 'parameter_1.0': {'AUC ROC': 0.97199, 'AUC PR': 0.81824, 'CLL': -0.110207, 'Precision': [1.0, 0.5], 'Recall': 0.724719, 'F1': 0.840391, 'Learning time': 2.586, 'Inference time': 1.853}}


Starting fold 4

Target train facts examples: 927
Target train pos examples: 337
Target train neg examples: 12345

Target test facts examples: 151
Target test pos	 examples: 45
Target test neg examples: 1891

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995124;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.221785298735876;  // std dev = 2.763, 33.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048763;  // std dev = 8.94e-08, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.08982109273641066;  // std dev = 2.978, 46.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839136;  // std dev = 0.000, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12671661823848968;  // std dev = 0.108, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( movie(E, A) )
%   | | then return 0.32723623224228465;  // std dev = 0.383, 103.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.1123163781936062;  // std dev = 8.16e-08, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.47380934860170526;  // std dev = 1.69e-07, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | else if ( genre(A, E) )
%   | | then return -0.10028947470799111;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.10440009539151714;  // std dev = 2.808, 35.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783627;  // std dev = 3.95e-09, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09159598457262473;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.3592391609416662;  // std dev = 5.96e-08, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.04976267764034613;  // std dev = 2.882, 39.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926108;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2813232946263219;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | else if ( movie(E, A) )
%   | | then return -0.03327392307000601;  // std dev = 0.420, 52.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=12 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839682;  // std dev = 5.96e-08, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08172239244385414;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.2280719171004096;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.06322613942064022;  // std dev = 2.847, 37.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109161;  // std dev = 5.48e-08, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18135486176249221;  // std dev = 0.503, 56.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=55 */
%   | else if ( genre(A, E) )
%   | | then return -0.07579552430102643;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.047063938431534814;  // std dev = 3.047, 53.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333707;  // std dev = 0.000, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07065378775074216;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( movie(E, B) )
%   | | then return 0.0743750139091428;  // std dev = 3.170, 105.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420265;  // std dev = 4.75e-09, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15406966019470558;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | else if ( genre(A, E) )
%   | | then return -0.06615293598241531;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.013744066199112653;  // std dev = 2.913, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.134792
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.676 seconds
Total inference time: 1.603 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.978492
   AUC PR    = 0.863494
   CLL	      = -0.132274
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.820896
   F1        = 0.901639


Total scoring time: 1.835 seconds
Parameter learned model CLL: -0.132274


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 5, 0], 'true,false,true': [0.0, 0, 55], 'true,false,false,true': [2.763, 21, 12], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.94e-08, 101, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 55], 'true,false,true': [0.0, 3, 0], 'true,false,false,true': [2.978, 34, 12], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 101, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.108, 8, 0], 'true,false,true': [0.383, 36, 67], 'true,false,false': [0.0, 0, 0], 'false,true': [8.16e-08, 102, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.69e-07, 0, 55], 'true,false,true': [0.0, 3, 0], 'true,false,false,true': [2.808, 23, 12], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.95e-09, 98, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [5.96e-08, 0, 55], 'true,false,false,true': [2.882, 27, 12], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 82, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 55], 'true,false,true': [0.42, 40, 12], 'true,false,false': [0.0, 0, 0], 'false,true': [5.96e-08, 109, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 55], 'true,false,false,true': [2.847, 25, 12], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.48e-08, 94, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.503, 1, 55], 'true,false,true': [0.0, 4, 0], 'true,false,false,true': [3.047, 41, 12], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 83, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 4, 0], 'true,false,true': [3.17, 38, 67], 'true,false,false': [0.0, 0, 0], 'false,true': [4.75e-09, 98, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 55], 'true,false,true': [0.0, 4, 0], 'true,false,false,true': [2.913, 29, 12], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 108, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.20141056769568647, 7.91446116564468e-17], 'true': [-2.7755575615628915e-18, 0.18168904958677592], 'true,false': [-1.291895883200182e-16, 0.23140495867768548], 'true,false,false': [0.23140495867768548, nan], 'false': [7.91446116564468e-17, nan]}, {'': [0.18950349993112883, -1.0992307174506501e-17], 'true': [-3.2297397080004555e-16, 0.18367493706373883], 'true,false': [0.0, 0.19281663516068107], 'true,false,false': [0.19281663516068107, nan], 'false': [-1.0992307174506501e-17, nan]}, {'': [0.15030257097181482, 6.530723674265627e-17], 'true': [0.00145156839345182, 0.1470116920555952], 'true,false': [0.1470116920555952, nan], 'false': [6.530723674265627e-17, nan]}, {'': [0.1219614537395372, 1.8126090197961738e-17], 'true': [5.167583532800728e-16, 0.21056538363464858], 'true,false': [-2.3129646346357427e-18, 0.2253061224489795], 'true,false,false': [0.2253061224489795, nan], 'false': [1.8126090197961738e-17, nan]}, {'': [0.11153770846541786, 0.0], 'true': [0.0, 0.11162991624548232], 'true,false': [6.45947941600091e-17, 0.21301775147928995], 'true,false,false': [0.21301775147928995, nan], 'false': [0.0, nan]}, {'': [0.11050957555966848, 3.2593703475233955e-17], 'true': [-1.453382868600205e-16, 0.17652154920009921], 'true,false': [0.17652154920009921, nan], 'false': [3.2593703475233955e-17, nan]}, {'': [0.09427786687290537, 3.188938474987152e-17], 'true': [0.0, 0.09466508758841], 'true,false': [-8.881784197001253e-17, 0.21913805697589464], 'true,false,false': [0.21913805697589464, nan], 'false': [3.188938474987152e-17, nan]}, {'': [0.09769024327751365, -6.6880905097900996e-18], 'true': [0.00451682071183186, 0.16291384497547912], 'true,false': [0.0, 0.17515129939480223], 'true,false,false': [0.17515129939480223, nan], 'false': [-6.6880905097900996e-18, nan]}, {'': [0.09292764950160273, 2.2657612747452175e-17], 'true': [0.0, 0.09569588425845023], 'true,false': [0.09569588425845023, nan], 'false': [2.2657612747452175e-17, nan]}, {'': [0.09049007641972978, -1.644774851296528e-17], 'true': [-5.652044489000796e-17, 0.18913487337740292], 'true,false': [0.0, 0.20701963117192157], 'true,false,false': [0.20701963117192157, nan], 'false': [-1.644774851296528e-17, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995124;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | | else if ( actor(B) )
%   | | | then return -0.14185106490048774;  // std dev = 1.49e-08, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else return -0.14185106490048763;  // std dev = 8.43e-08, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109543;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else return 0.6922179912193627;  // std dev = 0.149, 31.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=30 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( actor(B) )
%   | | | then return -0.12544463852839133;  // std dev = 2.11e-08, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | | else return 0.7194734122109542;  // std dev = 4.21e-08, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else return -0.12544463852839136;  // std dev = 0.000, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( actor(B) )
%   | | then return -0.1123163781936064;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else return 0.5583752795852979;  // std dev = 0.027, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   else return -0.11231637819360618;  // std dev = 8.43e-08, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.41678202775761686;  // std dev = 2.98e-08, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else return 0.40318483244497394;  // std dev = 0.111, 31.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=30 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.416782027757617;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.13864414816126303;  // std dev = 0.654, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   else return -0.10159632948783623;  // std dev = 4.83e-08, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.3251016999858511;  // std dev = 0.033, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | | else if ( actor(B) )
%   | | | then return -0.08962223192265474;  // std dev = 1.90e-08, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | | else return 0.3202159298889944;  // std dev = 1.49e-08, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else return -0.09269127618926098;  // std dev = 4.59e-08, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2581707313997596;  // std dev = 0.029, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | else if ( actor(B) )
%   | | then return -0.0831359707350975;  // std dev = 0.014, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | else return 0.25483382435264107;  // std dev = 2.58e-08, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else return -0.08518475138839682;  // std dev = 5.48e-08, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13508198383215317;  // std dev = 0.220, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.21187677161761556;  // std dev = 0.025, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.2095186330957031;  // std dev = 1.83e-08, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.09291077827800401;  // std dev = 0.599, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   else return -0.0787767547310916;  // std dev = 5.67e-08, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.17538560679303128;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else return 0.16576544106182217;  // std dev = 0.085, 31.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=30 */
%   | else if ( genre(A, E) )
%   | | then return -0.07589840370459547;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( actor(A) )
%   | | | then return 0.005851004373016903;  // std dev = 0.712, 39.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=12 */
%   | | | else return -0.6636254091392993;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.07324622576333707;  // std dev = 0.000, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07074345892294252;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( director(B), actor(A) )
%   | | then return 0.15881100151988042;  // std dev = 0.070, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | | else if ( actor(A) )
%   | | | then return -0.07056292735547619;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | | else return -0.2706908401745922;  // std dev = 0.467, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.06842697784420265;  // std dev = 4.47e-08, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13536124538775074;  // std dev = 0.022, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | else if ( genre(A, E) )
%   | | then return -0.06623175603472496;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( actor(B) )
%   | | | then return -0.06388038695146085;  // std dev = 0.036, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | | else return 0.154202923573615;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else return -0.06419184008202626;  // std dev = 0.000, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.065218
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.649 seconds
Total inference time: 1.423 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.067475
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.713 seconds
Refined model CLL: -0.067475


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.065218
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 7.873 seconds
Total inference time: 1.423 seconds
AUC ROC: 1.0
Total revision time: 7.873
Best scored revision CLL: -0.067475


Dataset: 4_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 00:10:06
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.065218, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 7.873, 'Inference time': 1.423, 'parameter_0.2': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.134792, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 1.676, 'Inference time': 1.603}}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.858148935099511;  // std dev = 5.72e-07, 111.000 (wgt'ed) examples reached here.  /* #pos=111 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.1225167511914658;  // std dev = 4.113, 87.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=23 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004884;  // std dev = 0.000, 202.000 (wgt'ed) examples reached here.  /* #neg=202 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7119295010436393;  // std dev = 0.841, 112.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=111 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.1452025630448958;  // std dev = 4.005, 76.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=23 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839166;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #neg=204 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360638;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( movie(E, A) )
%   | | then return 0.35316539697675836;  // std dev = 0.373, 197.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=134 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360644;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #neg=178 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.45725682674533136;  // std dev = 0.948, 113.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=111 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783633;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.007488534675130203;  // std dev = 4.215, 101.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=23 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783652;  // std dev = 0.000, 196.000 (wgt'ed) examples reached here.  /* #neg=196 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926098;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(B, E) )
%   | | then return 0.35881739997493156;  // std dev = 1.52e-07, 111.000 (wgt'ed) examples reached here.  /* #pos=111 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.001543657081604837;  // std dev = 4.202, 99.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=23 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926057;  // std dev = 9.19e-08, 199.000 (wgt'ed) examples reached here.  /* #neg=199 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.28103811189730976;  // std dev = 0.000, 111.000 (wgt'ed) examples reached here.  /* #pos=111 */
%   | else if ( movie(E, A) )
%   | | then return 0.06139821379692015;  // std dev = 0.439, 83.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=23 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 7.45e-08, 187.000 (wgt'ed) examples reached here.  /* #neg=187 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1385860732006651;  // std dev = 0.217, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.22787377703709644;  // std dev = 0.000, 111.000 (wgt'ed) examples reached here.  /* #pos=111 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.05011028384896864;  // std dev = 4.027, 78.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=23 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109148;  // std dev = 7.88e-08, 179.000 (wgt'ed) examples reached here.  /* #neg=179 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1858739806499581;  // std dev = 0.491, 112.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=111 */
%   | else if ( genre(A, E) )
%   | | then return -0.07935905536352036;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.016445650569646763;  // std dev = 4.096, 85.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=23 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333668;  // std dev = 8.01e-09, 189.000 (wgt'ed) examples reached here.  /* #neg=189 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.20844398926942762;  // std dev = 0.190, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( movie(E, B) )
%   | | then return 0.08597921830647644;  // std dev = 4.326, 203.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=134 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420262;  // std dev = 5.82e-09, 210.000 (wgt'ed) examples reached here.  /* #neg=210 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14390184050719312;  // std dev = 0.630, 113.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=111 */
%   | else if ( genre(A, E) )
%   | | then return -0.060717142699695914;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.044041337237345546;  // std dev = 4.208, 100.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=23 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 183.000 (wgt'ed) examples reached here.  /* #neg=183 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.128663
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.96 seconds
Total inference time: 1.516 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.979822
   AUC PR    = 0.868997
   CLL	      = -0.125501
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.828358
   F1        = 0.906122


Total scoring time: 2.061 seconds
Parameter learned model CLL: -0.125501


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 4, 0], 'true,false,true': [5.72e-07, 0, 111], 'true,false,false,true': [4.113, 64, 23], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 202, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.841, 1, 111], 'true,false,true': [0.0, 7, 0], 'true,false,false,true': [4.005, 53, 23], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 204, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 5, 0], 'true,false,true': [0.373, 63, 134], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 178, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.948, 2, 111], 'true,false,true': [0.0, 6, 0], 'true,false,false,true': [4.215, 78, 23], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 196, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 7, 0], 'true,false,true': [1.52e-07, 0, 111], 'true,false,false,true': [4.202, 76, 23], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.19e-08, 199, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 111], 'true,false,true': [0.439, 60, 23], 'true,false,false': [0.0, 0, 0], 'false,true': [7.45e-08, 187, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.217, 5, 0], 'true,false,true': [0.0, 0, 111], 'true,false,false,true': [4.027, 55, 23], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.88e-08, 179, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.491, 1, 111], 'true,false,true': [0.0, 4, 0], 'true,false,false,true': [4.096, 62, 23], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.01e-09, 189, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.19, 2, 0], 'true,false,true': [4.326, 69, 134], 'true,false,false': [0.0, 0, 0], 'false,true': [5.82e-09, 210, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.63, 2, 111], 'true,false,true': [0.0, 5, 0], 'true,false,false,true': [4.208, 77, 23], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 183, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.22331144005490106, -2.374338349693404e-16], 'true': [0.0, 0.21875318845016267], 'true,false': [2.944591517564379e-15, 0.19447747390672573], 'true,false,false': [0.19447747390672573, nan], 'false': [-2.374338349693404e-16, nan]}, {'': [0.17326095296711863, -5.442269728554689e-17], 'true': [0.006317076122738019, 0.19890336285327678], 'true,false': [-1.982541115402065e-18, 0.21104570637119133], 'true,false,false': [0.21104570637119133, nan], 'false': [-5.442269728554689e-17, nan]}, {'': [0.14105707494159225, -1.247441600702423e-17], 'true': [0.0, 0.13927400367256892], 'true,false': [0.13927400367256892, nan], 'false': [-1.247441600702423e-17, nan]}, {'': [0.1402405271558676, -9.289621226455392e-17], 'true': [0.00795362451702568, 0.16647228241022993], 'true,false': [-2.3129646346357427e-18, 0.17586511126360213], 'true,false,false': [0.17586511126360213, nan], 'false': [-9.289621226455392e-17, nan]}, {'': [0.1151577639114029, 4.2400477322367786e-17], 'true': [0.0, 0.11643789870169684], 'true,false': [2.0804179200183113e-16, 0.1783491480461175], 'true,false,false': [0.1783491480461175, nan], 'false': [4.2400477322367786e-17, nan]}, {'': [0.09427168380827751, 2.9685107610298305e-17], 'true': [-3.200642953874325e-17, 0.19274366224071454], 'true,false': [0.19274366224071454, nan], 'false': [2.9685107610298305e-17, nan]}, {'': [0.09345883688222727, 3.473323428994903e-17], 'true': [0.009406361796931101, 0.09346837690248647], 'true,false': [-8.801768123154394e-17, 0.20792241946088155], 'true,false,false': [0.20792241946088155, nan], 'false': [3.473323428994903e-17, nan]}, {'': [0.09228407239601837, 6.579099405186112e-17], 'true': [0.0021491040362289376, 0.188893648090365], 'true,false': [0.0, 0.1973702422145329], 'true,false,false': [0.1973702422145329, nan], 'false': [6.579099405186112e-17, nan]}, {'': [0.0922978789585025, 3.4364046000302466e-17], 'true': [0.018142165649317817, 0.09218276955665453], 'true,false': [0.09218276955665453, nan], 'false': [3.4364046000302466e-17, nan]}, {'': [0.09196022591490877, -4.853433987432378e-18], 'true': [0.003515343856745205, 0.16867927811736114], 'true,false': [-6.938893903907229e-19, 0.17709999999999984], 'true,false,false': [0.17709999999999984, nan], 'false': [-4.853433987432378e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(B, E) )
%   | | then return 0.858148935099511;  // std dev = 5.72e-07, 111.000 (wgt'ed) examples reached here.  /* #pos=111 */
%   | | else if ( actor(B) )
%   | | | then return -0.14185106490048768;  // std dev = 4.71e-08, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | | | else return 0.8581489350995121;  // std dev = 8.43e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   else return -0.1418510649004882;  // std dev = 0.000, 168.000 (wgt'ed) examples reached here.  /* #neg=168 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.719473412210955;  // std dev = 0.000, 111.000 (wgt'ed) examples reached here.  /* #pos=111 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.7194734122109543;  // std dev = 5.96e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.1276600949464009;  // std dev = 0.154, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
%   else return -0.12544463852839166;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #neg=204 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360638;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( director(B), actor(A) )
%   | | then return 0.5553664367462834;  // std dev = 4.92e-07, 134.000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | | else return -0.11437188014605147;  // std dev = 0.142, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   else return -0.11231637819360639;  // std dev = 0.000, 170.000 (wgt'ed) examples reached here.  /* #neg=170 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.4175135841583106;  // std dev = 0.000, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | | else return 0.39854699138195543;  // std dev = 0.107, 66.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=64 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783627;  // std dev = 3.73e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.41751358415831047;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.10712483244475762;  // std dev = 0.184, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   else return -0.10159632948783655;  // std dev = 0.000, 205.000 (wgt'ed) examples reached here.  /* #neg=205 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( female(B) )
%   | | then return -0.09269127618926094;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.13993827695469108;  // std dev = 0.164, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.323102307946524;  // std dev = 0.022, 111.000 (wgt'ed) examples reached here.  /* #pos=111 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.32071184716014955;  // std dev = 2.98e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.09551195294575143;  // std dev = 0.173, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   else return -0.09269127618926057;  // std dev = 9.19e-08, 197.000 (wgt'ed) examples reached here.  /* #neg=197 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.25680381655553197;  // std dev = 0.019, 111.000 (wgt'ed) examples reached here.  /* #pos=111 */
%   | else if ( actor(B) )
%   | | then return -0.08399008167609401;  // std dev = 0.006, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
%   | | else return 0.2551722425694895;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   else return -0.08518475138839678;  // std dev = 7.88e-08, 196.000 (wgt'ed) examples reached here.  /* #neg=196 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07718117687277153;  // std dev = 0.003, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.21091024461119695;  // std dev = 0.016, 111.000 (wgt'ed) examples reached here.  /* #pos=111 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.20975771563253573;  // std dev = 1.49e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.08668636273249558;  // std dev = 0.280, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   else return -0.07877675473109148;  // std dev = 8.30e-08, 175.000 (wgt'ed) examples reached here.  /* #neg=175 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.1763436509477836;  // std dev = 0.000, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | | else return 0.16490652509949114;  // std dev = 0.080, 66.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=64 */
%   | else if ( genre(A, E) )
%   | | then return -0.0721755594851532;  // std dev = 0.003, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.17709649774527747;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.07483966872774746;  // std dev = 0.155, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   else return -0.07324622576333664;  // std dev = 1.21e-07, 203.000 (wgt'ed) examples reached here.  /* #neg=203 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.15416391713786295;  // std dev = 0.022, 134.000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.069475606720008;  // std dev = 0.147, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   else return -0.06842697784420262;  // std dev = 7.96e-08, 193.000 (wgt'ed) examples reached here.  /* #neg=193 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.1333305451743492;  // std dev = 4.47e-08, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | | else return 0.13001100965141707;  // std dev = 0.055, 65.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=64 */
%   | else if ( genre(A, E) )
%   | | then return -0.06192212976708065;  // std dev = 0.003, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.13384231900198013;  // std dev = 1.83e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.06471506025058515;  // std dev = 0.140, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
%   else return -0.06419184008202626;  // std dev = 0.000, 218.000 (wgt'ed) examples reached here.  /* #neg=218 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064237
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.997 seconds
Total inference time: 1.423 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.065782
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.179 seconds
Refined model CLL: -0.065782


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064237
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 9.197 seconds
Total inference time: 1.423 seconds
AUC ROC: 1.0
Total revision time: 9.197
Best scored revision CLL: -0.065782


Dataset: 4_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 00:10:19
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.064237, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 9.197, 'Inference time': 1.423, 'parameter_0.4': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.128663, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 1.96, 'Inference time': 1.516}}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995096;  // std dev = 1.05e-06, 168.000 (wgt'ed) examples reached here.  /* #pos=168 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.12586547053258176;  // std dev = 4.990, 127.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=34 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004878;  // std dev = 1.23e-07, 306.000 (wgt'ed) examples reached here.  /* #neg=306 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7095331998493171;  // std dev = 1.188, 170.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=168 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.12784056879619593;  // std dev = 4.928, 119.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=34 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839202;  // std dev = 0.000, 311.000 (wgt'ed) examples reached here.  /* #neg=311 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.16274287794253162;  // std dev = 0.169, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( movie(E, A) )
%   | | then return 0.33482660945584275;  // std dev = 0.378, 308.000 (wgt'ed) examples reached here.  /* #neg=106 #pos=202 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360689;  // std dev = 0.000, 295.000 (wgt'ed) examples reached here.  /* #neg=295 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4743952313065961;  // std dev = 0.000, 168.000 (wgt'ed) examples reached here.  /* #pos=168 */
%   | else if ( genre(A, E) )
%   | | then return -0.09708525890204131;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.04475202534321892;  // std dev = 4.968, 124.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=34 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783662;  // std dev = 0.000, 289.000 (wgt'ed) examples reached here.  /* #neg=289 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1378815909293955;  // std dev = 0.170, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.3596452995170126;  // std dev = 0.000, 168.000 (wgt'ed) examples reached here.  /* #pos=168 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.0803077916950313;  // std dev = 4.816, 107.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=34 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0926912761892604;  // std dev = 1.86e-07, 336.000 (wgt'ed) examples reached here.  /* #neg=336 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2752545454549766;  // std dev = 0.758, 170.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=168 */
%   | else if ( movie(E, A) )
%   | | then return 0.003497942938143054;  // std dev = 0.429, 137.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=34 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 9.66e-08, 277.000 (wgt'ed) examples reached here.  /* #neg=277 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07860109103061565;  // std dev = 6.97e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( genre(B, E) )
%   | | then return 0.22938204129316353;  // std dev = 0.000, 168.000 (wgt'ed) examples reached here.  /* #pos=168 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.04792915721691598;  // std dev = 4.875, 113.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=34 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109143;  // std dev = 1.49e-08, 317.000 (wgt'ed) examples reached here.  /* #neg=317 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18279501262489176;  // std dev = 0.838, 171.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=168 */
%   | else if ( genre(A, E) )
%   | | then return -0.07309381671352473;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.018872052432833495;  // std dev = 4.944, 121.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=34 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333699;  // std dev = 5.43e-09, 304.000 (wgt'ed) examples reached here.  /* #neg=304 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09511045006850911;  // std dev = 0.254, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( movie(E, B) )
%   | | then return 0.09582739581165127;  // std dev = 5.166, 294.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=202 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420304;  // std dev = 0.000, 308.000 (wgt'ed) examples reached here.  /* #neg=308 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14912979523940545;  // std dev = 0.466, 169.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=168 */
%   | else if ( genre(A, E) )
%   | | then return -0.062484612414220146;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.003234948250686102;  // std dev = 4.920, 118.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=34 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202602;  // std dev = 5.96e-09, 287.000 (wgt'ed) examples reached here.  /* #neg=287 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.135975
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.298 seconds
Total inference time: 1.311 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.980162
   AUC PR    = 0.871363
   CLL	      = -0.131466
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.831683
   F1        = 0.908108


Total scoring time: 2.371 seconds
Parameter learned model CLL: -0.131466


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 11, 0], 'true,false,true': [1.05e-06, 0, 168], 'true,false,false,true': [4.99, 93, 34], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.23e-07, 306, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.188, 2, 168], 'true,false,true': [0.0, 9, 0], 'true,false,false,true': [4.928, 85, 34], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 311, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.169, 9, 0], 'true,false,true': [0.378, 106, 202], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 295, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 168], 'true,false,true': [0.0, 7, 0], 'true,false,false,true': [4.968, 90, 34], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 289, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.17, 4, 0], 'true,false,true': [0.0, 0, 168], 'true,false,false,true': [4.816, 73, 34], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.86e-07, 336, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.758, 2, 168], 'true,false,true': [0.429, 103, 34], 'true,false,false': [0.0, 0, 0], 'false,true': [9.66e-08, 277, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [6.97e-09, 10, 0], 'true,false,true': [0.0, 0, 168], 'true,false,false,true': [4.875, 79, 34], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.49e-08, 317, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.838, 3, 168], 'true,false,true': [0.0, 3, 0], 'true,false,false,true': [4.944, 87, 34], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.43e-09, 304, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.254, 10, 0], 'true,false,true': [5.166, 92, 202], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 308, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.466, 1, 168], 'true,false,true': [0.0, 9, 0], 'true,false,false,true': [4.92, 84, 34], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.96e-09, 287, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.22435815284720015, 4.9343245538895844e-17], 'true': [-1.0092936587501423e-17, 0.21586900316001625], 'true,false': [6.5133084111342514e-15, 0.1960443920887855], 'true,false,false': [0.1960443920887855, nan], 'false': [4.9343245538895844e-17, nan]}, {'': [0.17609758705281495, -8.567637489068732e-17], 'true': [0.008299857030733987, 0.19392576391324426], 'true,false': [0.0, 0.20408163265306076], 'true,false,false': [0.20408163265306076, nan], 'false': [-8.567637489068732e-17, nan]}, {'': [0.1461043309259591, -8.129090620984197e-17], 'true': [0.0031785398461604613, 0.14325177948584594], 'true,false': [0.14325177948584594, nan], 'false': [-8.129090620984197e-17, nan]}, {'': [0.1300380055475694, -5.531907112319119e-17], 'true': [-1.226532103395411e-15, 0.1893948021140523], 'true,false': [-1.982541115402065e-18, 0.1990114464099886], 'true,false,false': [0.1990114464099886, nan], 'false': [-5.531907112319119e-17, nan]}, {'': [0.1036621337835903, 1.030921380009074e-16], 'true': [0.007197191749482683, 0.10289757666049217], 'true,false': [-8.458842092382145e-17, 0.2167874923574105], 'true,false,false': [0.2167874923574105, nan], 'false': [1.030921380009074e-16, nan]}, {'': [0.10226328581604453, 3.366741302112388e-17], 'true': [0.0033800039174829042, 0.1840701174151859], 'true,false': [0.1840701174151859, nan], 'false': [3.366741302112388e-17, nan]}, {'': [0.0911602429673258, 7.004561669559347e-19], 'true': [4.8572257327350596e-18, 0.09250637864273833], 'true,false': [-2.9605947323337506e-16, 0.21035319915420156], 'true,false,false': [0.21035319915420156, nan], 'false': [7.004561669559347e-19, nan]}, {'': [0.09206108159374712, 2.921639538487254e-17], 'true': [0.004109810465551609, 0.1973470990979518], 'true,false': [-1.1564823173178713e-18, 0.20203538009698874], 'true,false,false': [0.20203538009698874, nan], 'false': [2.921639538487254e-17, nan]}, {'': [0.08914402496739776, -6.344131569286608e-17], 'true': [0.006472312846297361, 0.09075673595848525], 'true,false': [0.09075673595848525, nan], 'false': [-6.344131569286608e-17, nan]}, {'': [0.0881765141185329, 3.558903075453463e-17], 'true': [0.0012853883911539367, 0.19086225747963975], 'true,false': [-7.709882115452476e-19, 0.2051134731399023], 'true,false,false': [0.2051134731399023, nan], 'false': [3.558903075453463e-17, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995096;  // std dev = 1.05e-06, 168.000 (wgt'ed) examples reached here.  /* #pos=168 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.8581489350995115;  // std dev = 2.38e-07, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | | else return -0.14185106490048763;  // std dev = 8.43e-08, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
%   else return -0.1418510649004881;  // std dev = 0.000, 266.000 (wgt'ed) examples reached here.  /* #neg=266 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109544;  // std dev = 1.69e-07, 71.000 (wgt'ed) examples reached here.  /* #pos=71 */
%   | | else if ( actor(A) )
%   | | | then return 0.7194734122109544;  // std dev = 1.46e-07, 97.000 (wgt'ed) examples reached here.  /* #pos=97 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.7194734122109548;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
%   else return -0.12544463852839205;  // std dev = 0.000, 319.000 (wgt'ed) examples reached here.  /* #neg=319 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5553664367462836;  // std dev = 5.65e-07, 202.000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.11231637819360624;  // std dev = 6.99e-08, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
%   else return -0.11231637819360685;  // std dev = 0.000, 297.000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.4175135841583107;  // std dev = 0.000, 71.000 (wgt'ed) examples reached here.  /* #pos=71 */
%   | | else return 0.40702651519576305;  // std dev = 0.073, 99.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=97 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783634;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( actor(B) )
%   | | | then return -0.10159632948783615;  // std dev = 5.87e-08, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
%   | | | else return 0.41751358415831047;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   else return -0.10159632948783662;  // std dev = 0.000, 291.000 (wgt'ed) examples reached here.  /* #neg=291 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926098;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(B, E) )
%   | | then return 0.322033443917617;  // std dev = 0.015, 168.000 (wgt'ed) examples reached here.  /* #pos=168 */
%   | | else if ( actor(B) )
%   | | | then return -0.09269127618926101;  // std dev = 3.80e-08, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
%   | | | else return 0.3207118471601495;  // std dev = 2.11e-08, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   else return -0.0926912761892604;  // std dev = 1.72e-07, 320.000 (wgt'ed) examples reached here.  /* #neg=320 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25592235706106486;  // std dev = 0.014, 202.000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.08645565618029928;  // std dev = 0.116, 122.000 (wgt'ed) examples reached here.  /* #neg=122 */
%   else return -0.08518475138839678;  // std dev = 1.03e-07, 301.000 (wgt'ed) examples reached here.  /* #neg=301 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08724957261140844;  // std dev = 0.071, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( genre(B, E) )
%   | | then return 0.2104200433614169;  // std dev = 0.011, 168.000 (wgt'ed) examples reached here.  /* #pos=168 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.20963340416249854;  // std dev = 2.98e-08, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | | else return -0.08174995877067737;  // std dev = 0.139, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   else return -0.07877675473109143;  // std dev = 5.16e-08, 278.000 (wgt'ed) examples reached here.  /* #neg=278 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1775822600213393;  // std dev = 0.010, 168.000 (wgt'ed) examples reached here.  /* #pos=168 */
%   | else if ( genre(A, E) )
%   | | then return -0.07258755409850366;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.17700531581660275;  // std dev = 3.33e-08, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | | else return -0.07390498084863749;  // std dev = 0.093, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
%   else return -0.07324622576333693;  // std dev = 1.02e-07, 288.000 (wgt'ed) examples reached here.  /* #neg=288 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1530386774338895;  // std dev = 0.009, 202.000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.07164152074728458;  // std dev = 0.176, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
%   else return -0.0684269778442029;  // std dev = 0.000, 279.000 (wgt'ed) examples reached here.  /* #neg=279 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13123599199329414;  // std dev = 0.367, 170.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=168 */
%   | else if ( genre(A, E) )
%   | | then return -0.06345693666953618;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.13391080337113948;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | | else return -0.06470229943306924;  // std dev = 0.083, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
%   else return -0.06419184008202589;  // std dev = 1.29e-07, 316.000 (wgt'ed) examples reached here.  /* #neg=316 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063903
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.619 seconds
Total inference time: 1.626 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.06472
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.601 seconds
Refined model CLL: -0.06472


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063903
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 10.889 seconds
Total inference time: 1.626 seconds
AUC ROC: 1.0
Total revision time: 10.889
Best scored revision CLL: -0.06472


Dataset: 4_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 00:10:34
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063903, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 10.889, 'Inference time': 1.626, 'parameter_0.6': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.135975, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 2.298, 'Inference time': 1.311}}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( genre(B, E) )
%   | | then return 0.858148935099509;  // std dev = 1.07e-06, 224.000 (wgt'ed) examples reached here.  /* #pos=224 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.13765204068957412;  // std dev = 5.694, 161.000 (wgt'ed) examples reached here.  /* #neg=116 #pos=45 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048735;  // std dev = 3.01e-07, 399.000 (wgt'ed) examples reached here.  /* #neg=399 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7119962613194586;  // std dev = 1.190, 226.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=224 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.07492793692171497;  // std dev = 5.870, 192.000 (wgt'ed) examples reached here.  /* #neg=147 #pos=45 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839222;  // std dev = 0.000, 373.000 (wgt'ed) examples reached here.  /* #neg=373 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14735959706022558;  // std dev = 0.190, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( movie(E, A) )
%   | | then return 0.37291303270209175;  // std dev = 0.363, 383.000 (wgt'ed) examples reached here.  /* #neg=114 #pos=269 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360618;  // std dev = 0.000, 408.000 (wgt'ed) examples reached here.  /* #neg=408 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4554978149145653;  // std dev = 1.145, 227.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=224 */
%   | else if ( genre(A, E) )
%   | | then return -0.09844213623665457;  // std dev = 9.13e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.04887321506277923;  // std dev = 5.701, 162.000 (wgt'ed) examples reached here.  /* #neg=117 #pos=45 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783606;  // std dev = 9.31e-09, 380.000 (wgt'ed) examples reached here.  /* #neg=380 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1386850870693812;  // std dev = 0.337, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( genre(B, E) )
%   | | then return 0.3546741175805164;  // std dev = 3.77e-07, 224.000 (wgt'ed) examples reached here.  /* #pos=224 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.022470500346070572;  // std dev = 5.770, 173.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=45 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926079;  // std dev = 1.66e-07, 387.000 (wgt'ed) examples reached here.  /* #neg=387 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2734970163929136;  // std dev = 0.754, 226.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=224 */
%   | else if ( movie(E, A) )
%   | | then return 0.021900073979625137;  // std dev = 0.434, 175.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=45 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.28e-07, 377.000 (wgt'ed) examples reached here.  /* #neg=377 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12440561126094515;  // std dev = 0.362, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( genre(B, E) )
%   | | then return 0.22675475941161408;  // std dev = 0.000, 224.000 (wgt'ed) examples reached here.  /* #pos=224 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.030296571582567478;  // std dev = 5.708, 163.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=45 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109143;  // std dev = 2.20e-07, 388.000 (wgt'ed) examples reached here.  /* #neg=388 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17906893321182812;  // std dev = 1.053, 229.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=224 */
%   | else if ( genre(A, E) )
%   | | then return -0.07213893725277801;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.029813700391002118;  // std dev = 5.687, 160.000 (wgt'ed) examples reached here.  /* #neg=115 #pos=45 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333768;  // std dev = 0.000, 370.000 (wgt'ed) examples reached here.  /* #neg=370 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11569053204872909;  // std dev = 0.402, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( movie(E, B) )
%   | | then return 0.11118533686259396;  // std dev = 5.775, 378.000 (wgt'ed) examples reached here.  /* #neg=109 #pos=269 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420328;  // std dev = 0.000, 375.000 (wgt'ed) examples reached here.  /* #neg=375 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14486813993383474;  // std dev = 0.632, 226.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=224 */
%   | else if ( genre(A, E) )
%   | | then return -0.0605333691882474;  // std dev = 5.27e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.005918786939643798;  // std dev = 5.673, 158.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=45 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202566;  // std dev = 9.27e-09, 376.000 (wgt'ed) examples reached here.  /* #neg=376 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.133837
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.708 seconds
Total inference time: 1.37 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.979775
   AUC PR    = 0.871317
   CLL	      = -0.1311
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.832714
   F1        = 0.908722


Total scoring time: 3.437 seconds
Parameter learned model CLL: -0.1311


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 13, 0], 'true,false,true': [1.07e-06, 0, 224], 'true,false,false,true': [5.694, 116, 45], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.01e-07, 399, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.19, 2, 224], 'true,false,true': [7.45e-09, 14, 0], 'true,false,false,true': [5.87, 147, 45], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 373, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.19, 13, 0], 'true,false,true': [0.363, 114, 269], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 408, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.145, 3, 224], 'true,false,true': [9.13e-09, 16, 0], 'true,false,false,true': [5.701, 117, 45], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.31e-09, 380, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.337, 16, 0], 'true,false,true': [3.77e-07, 0, 224], 'true,false,false,true': [5.77, 128, 45], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.66e-07, 387, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.754, 2, 224], 'true,false,true': [0.434, 130, 45], 'true,false,false': [0.0, 0, 0], 'false,true': [1.28e-07, 377, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.362, 16, 0], 'true,false,true': [0.0, 0, 224], 'true,false,false,true': [5.708, 118, 45], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.2e-07, 388, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [1.053, 5, 224], 'true,false,true': [0.0, 16, 0], 'true,false,false,true': [5.687, 115, 45], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 370, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.402, 16, 0], 'true,false,true': [5.775, 109, 269], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 375, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.632, 2, 224], 'true,false,true': [5.27e-09, 14, 0], 'true,false,false,true': [5.673, 113, 45], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.27e-09, 376, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.21906643771622275, 2.270531298481523e-16], 'true': [-1.2810265668751807e-17, 0.21051779389442082], 'true,false': [5.075305255429287e-15, 0.20138111955557375], 'true,false,false': [0.20138111955557375, nan], 'false': [2.270531298481523e-16, nan]}, {'': [0.1898622493171249, -1.2382112017267162e-16], 'true': [0.0062616719708707145, 0.16979132614411904], 'true,false': [3.96508223080413e-18, 0.1794433593749992], 'true,false,false': [0.1794433593749992, nan], 'false': [-1.2382112017267162e-16, nan]}, {'': [0.13644095323434968, -1.959217102279688e-17], 'true': [0.0027630611742010067, 0.13209224485632357], 'true,false': [0.13209224485632357, nan], 'false': [-1.959217102279688e-17, nan]}, {'': [0.12769380644002803, 8.764918615461762e-17], 'true': [0.005780213876561042, 0.1843596483585475], 'true,false': [5.204170427930421e-18, 0.20061728395061773], 'true,false,false': [0.20061728395061773, nan], 'false': [8.764918615461762e-17, nan]}, {'': [0.11150057159196711, 7.114607496305912e-17], 'true': [0.007097857200991271, 0.11100048904938213], 'true,false': [6.344131569286609e-16, 0.19245547796451526], 'true,false,false': [0.19245547796451526, nan], 'false': [7.114607496305912e-17, nan]}, {'': [0.09933360684188747, 4.358435216035097e-17], 'true': [0.002514946731891181, 0.18869210336492542], 'true,false': [0.18869210336492542, nan], 'false': [4.358435216035097e-17, nan]}, {'': [0.09294324658698741, 1.2475702029292996e-16], 'true': [0.008193493680575486, 0.09358671339242645], 'true,false': [-5.551115123125783e-17, 0.19985697617524129], 'true,false,false': [0.19985697617524129, nan], 'false': [1.2475702029292996e-16, nan]}, {'': [0.08914770557459942, -6.721350203136083e-17], 'true': [0.004843087377067826, 0.18463034320847352], 'true,false': [0.0, 0.20214843750000044], 'true,false,false': [0.20214843750000044, nan], 'false': [-6.721350203136083e-17, nan]}, {'': [0.08707042144239614, -1.0125233984581428e-16], 'true': [0.010081440701883241, 0.08823895397769864], 'true,false': [0.08823895397769864, nan], 'false': [-1.0125233984581428e-16, nan]}, {'': [0.08712257635906852, 8.680999181909469e-17], 'true': [0.001765975303952458, 0.1874438063426412], 'true,false': [1.982541115402065e-18, 0.2036933183784644], 'true,false,false': [0.2036933183784644, nan], 'false': [8.680999181909469e-17, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( genre(B, E) )
%   | | then return 0.858148935099509;  // std dev = 1.07e-06, 224.000 (wgt'ed) examples reached here.  /* #pos=224 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.858148935099512;  // std dev = 2.23e-07, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.14185106490048766;  // std dev = 7.30e-08, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
%   else return -0.1418510649004873;  // std dev = 3.01e-07, 410.000 (wgt'ed) examples reached here.  /* #neg=410 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109545;  // std dev = 1.19e-07, 98.000 (wgt'ed) examples reached here.  /* #pos=98 */
%   | | else return 0.7062715676681532;  // std dev = 0.105, 128.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=126 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 7.45e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.719473412210955;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.1254446385283913;  // std dev = 0.000, 125.000 (wgt'ed) examples reached here.  /* #neg=125 */
%   else return -0.12544463852839224;  // std dev = 0.000, 381.000 (wgt'ed) examples reached here.  /* #neg=381 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5568922842163313;  // std dev = 0.027, 269.000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.11454447024376363;  // std dev = 0.194, 152.000 (wgt'ed) examples reached here.  /* #neg=152 */
%   else return -0.1123163781936062;  // std dev = 0.000, 405.000 (wgt'ed) examples reached here.  /* #neg=405 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.41617313934294076;  // std dev = 0.624, 225.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=224 */
%   | else if ( genre(A, E) )
%   | | then return -0.10139314191547764;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.41714255094126396;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.1013931419154778;  // std dev = 0.000, 124.000 (wgt'ed) examples reached here.  /* #neg=124 */
%   else return -0.10159632948783592;  // std dev = 2.21e-07, 401.000 (wgt'ed) examples reached here.  /* #neg=401 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( actor(B) )
%   | | then return -0.09252112291950124;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else return -0.2821238650030535;  // std dev = 7.45e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.3222929702755701;  // std dev = 0.021, 224.000 (wgt'ed) examples reached here.  /* #pos=224 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.32046031633145416;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.0925211229195013;  // std dev = 0.000, 131.000 (wgt'ed) examples reached here.  /* #neg=131 */
%   else return -0.0926912761892609;  // std dev = 1.50e-07, 402.000 (wgt'ed) examples reached here.  /* #neg=402 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2560421324480111;  // std dev = 0.020, 269.000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.08709157698448605;  // std dev = 0.202, 140.000 (wgt'ed) examples reached here.  /* #neg=140 */
%   else return -0.08518475138839678;  // std dev = 1.37e-07, 420.000 (wgt'ed) examples reached here.  /* #neg=420 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( female(B) )
%   | | then return -0.0785042055904869;  // std dev = 1.86e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.10102560818546469;  // std dev = 0.050, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( genre(B, E) )
%   | | then return 0.21055480783050565;  // std dev = 0.016, 224.000 (wgt'ed) examples reached here.  /* #pos=224 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.2094639467258456;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.07850420559048688;  // std dev = 0.000, 124.000 (wgt'ed) examples reached here.  /* #neg=124 */
%   else return -0.07877675473109143;  // std dev = 2.14e-07, 374.000 (wgt'ed) examples reached here.  /* #neg=374 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.17659667585869857;  // std dev = 0.000, 98.000 (wgt'ed) examples reached here.  /* #pos=98 */
%   | | else return 0.16978790423515777;  // std dev = 0.057, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   | else if ( genre(A, E) )
%   | | then return -0.07236274501615429;  // std dev = 0.002, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.17688100220139985;  // std dev = 5.96e-08, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.07300973868096702;  // std dev = 4.71e-08, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
%   else return -0.0732462257633377;  // std dev = 0.000, 390.000 (wgt'ed) examples reached here.  /* #neg=390 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1536196421214147;  // std dev = 0.021, 269.000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.07113412970514868;  // std dev = 0.270, 160.000 (wgt'ed) examples reached here.  /* #neg=160 */
%   else return -0.06842697784420332;  // std dev = 0.000, 389.000 (wgt'ed) examples reached here.  /* #neg=389 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13487774456004326;  // std dev = 0.017, 224.000 (wgt'ed) examples reached here.  /* #pos=224 */
%   | else if ( genre(A, E) )
%   | | then return -0.06315540873577222;  // std dev = 0.002, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.13375891487350136;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.06383476240934248;  // std dev = 0.000, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
%   else return -0.06419184008202553;  // std dev = 2.10e-07, 423.000 (wgt'ed) examples reached here.  /* #neg=423 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064188
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 4.245 seconds
Total inference time: 1.434 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064999
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.844 seconds
Refined model CLL: -0.064999


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064188
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 13.234 seconds
Total inference time: 1.434 seconds
AUC ROC: 1.0
Total revision time: 13.234
Best scored revision CLL: -0.064999


Dataset: 4_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 00:10:50
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.064188, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 13.234, 'Inference time': 1.434, 'parameter_0.8': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.133837, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 2.708, 'Inference time': 1.37}}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995086;  // std dev = 1.07e-06, 278.000 (wgt'ed) examples reached here.  /* #pos=278 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.13003833602117226;  // std dev = 6.554, 217.000 (wgt'ed) examples reached here.  /* #neg=158 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048724;  // std dev = 2.70e-07, 458.000 (wgt'ed) examples reached here.  /* #neg=458 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109576;  // std dev = 0.000, 278.000 (wgt'ed) examples reached here.  /* #pos=278 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.09921263129872883;  // std dev = 6.618, 229.000 (wgt'ed) examples reached here.  /* #neg=170 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839233;  // std dev = 0.000, 490.000 (wgt'ed) examples reached here.  /* #neg=490 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13235149477779193;  // std dev = 0.209, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else if ( movie(E, A) )
%   | | then return 0.3676390167504251;  // std dev = 0.367, 484.000 (wgt'ed) examples reached here.  /* #neg=147 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360597;  // std dev = 0.000, 457.000 (wgt'ed) examples reached here.  /* #neg=457 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.461351081720555;  // std dev = 0.668, 279.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=278 */
%   | else if ( genre(A, E) )
%   | | then return -0.09978217531085061;  // std dev = 5.27e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.04349618060281599;  // std dev = 6.543, 215.000 (wgt'ed) examples reached here.  /* #neg=156 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783537;  // std dev = 1.59e-08, 506.000 (wgt'ed) examples reached here.  /* #neg=506 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1575845558797844;  // std dev = 0.325, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( genre(B, E) )
%   | | then return 0.3528323315555883;  // std dev = 0.000, 278.000 (wgt'ed) examples reached here.  /* #pos=278 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.046286694217390865;  // std dev = 6.495, 207.000 (wgt'ed) examples reached here.  /* #neg=148 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926128;  // std dev = 0.000, 464.000 (wgt'ed) examples reached here.  /* #neg=464 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.27316059013467325;  // std dev = 0.755, 280.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=278 */
%   | else if ( movie(E, A) )
%   | | then return 0.03812810897829573;  // std dev = 0.441, 215.000 (wgt'ed) examples reached here.  /* #neg=156 #pos=59 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.53e-07, 514.000 (wgt'ed) examples reached here.  /* #neg=514 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12544071312664093;  // std dev = 0.364, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( genre(B, E) )
%   | | then return 0.22572575082298837;  // std dev = 1.12e-07, 278.000 (wgt'ed) examples reached here.  /* #pos=278 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.016226571876647354;  // std dev = 6.560, 218.000 (wgt'ed) examples reached here.  /* #neg=159 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109201;  // std dev = 1.43e-07, 489.000 (wgt'ed) examples reached here.  /* #neg=489 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17864297782169927;  // std dev = 1.156, 284.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=278 */
%   | else if ( genre(A, E) )
%   | | then return -0.07280855970517378;  // std dev = 3.73e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.0012660619838005085;  // std dev = 6.613, 228.000 (wgt'ed) examples reached here.  /* #neg=169 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333749;  // std dev = 0.000, 470.000 (wgt'ed) examples reached here.  /* #neg=470 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13502004029637468;  // std dev = 0.588, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | else if ( movie(E, B) )
%   | | then return 0.11578450322161313;  // std dev = 6.517, 471.000 (wgt'ed) examples reached here.  /* #neg=134 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.0684269778442036;  // std dev = 0.000, 534.000 (wgt'ed) examples reached here.  /* #neg=534 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14610418935848563;  // std dev = 0.444, 279.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=278 */
%   | else if ( genre(A, E) )
%   | | then return -0.059965051655770894;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( movie(F, B) )
%   | | | then return -8.914391811424427E-4;  // std dev = 6.519, 211.000 (wgt'ed) examples reached here.  /* #neg=152 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202537;  // std dev = 1.09e-08, 505.000 (wgt'ed) examples reached here.  /* #neg=505 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.133876
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.215 seconds
Total inference time: 1.538 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.978805
   AUC PR    = 0.865091
   CLL	      = -0.131391
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.824926
   F1        = 0.904065


Total scoring time: 3.448 seconds
Parameter learned model CLL: -0.131391


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 19, 0], 'true,false,true': [1.07e-06, 0, 278], 'true,false,false,true': [6.554, 158, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.7e-07, 458, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 278], 'true,false,true': [0.0, 17, 0], 'true,false,false,true': [6.618, 170, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 490, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.209, 23, 0], 'true,false,true': [0.367, 147, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 457, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.668, 1, 278], 'true,false,true': [5.27e-09, 15, 0], 'true,false,false,true': [6.543, 156, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.59e-08, 506, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.325, 12, 0], 'true,false,true': [0.0, 0, 278], 'true,false,false,true': [6.495, 148, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 464, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.755, 2, 278], 'true,false,true': [0.441, 156, 59], 'true,false,false': [0.0, 0, 0], 'false,true': [1.53e-07, 514, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.364, 16, 0], 'true,false,true': [1.12e-07, 0, 278], 'true,false,false,true': [6.56, 159, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.43e-07, 489, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [1.156, 6, 278], 'true,false,true': [3.73e-09, 14, 0], 'true,false,false,true': [6.613, 169, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 470, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.588, 27, 0], 'true,false,true': [6.517, 134, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 534, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.444, 1, 278], 'true,false,true': [0.0, 14, 0], 'true,false,false,true': [6.519, 152, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.09e-08, 505, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.22577556056867135, 1.5901884370176915e-16], 'true': [0.0, 0.21730843791450122], 'true,false': [4.089454594302735e-15, 0.19796555458812093], 'true,false,false': [0.19796555458812093, nan], 'false': [1.5901884370176915e-16, nan]}, {'': [0.18578942293049008, -1.3775828550450922e-16], 'true': [-4.702872783448145e-15, 0.18129202728654323], 'true,false': [0.0, 0.19126256173604864], 'true,false,false': [0.19126256173604864, nan], 'false': [-1.3775828550450922e-16, nan]}, {'': [0.13935564092616567, -9.717488180526534e-18], 'true': [0.0019066780085740399, 0.1345465140790812], 'true,false': [0.1345465140790812, nan], 'false': [-9.717488180526534e-18, nan]}, {'': [0.1307479326287497, 2.5100694469786146e-16], 'true': [0.0015976790084345361, 0.1873789140139913], 'true,false': [1.8503717077085942e-18, 0.19911303407247066], 'true,false,false': [0.19911303407247066, nan], 'false': [2.5100694469786146e-16, nan]}, {'': [0.1109182930273774, -9.570888143320315e-19], 'true': [0.008821725077054721, 0.10996554168876567], 'true,false': [-1.891372749865015e-15, 0.20378538588998366], 'true,false,false': [0.20378538588998366, nan], 'false': [-9.570888143320315e-19, nan]}, {'': [0.09934432398182547, 4.579129984835276e-17], 'true': [0.002037681877397774, 0.19482223340463703], 'true,false': [0.19482223340463703, nan], 'false': [4.579129984835276e-17, nan]}, {'': [0.0968118543124323, 4.177526309427992e-17], 'true': [0.0082741357868591, 0.0975702005864146], 'true,false': [4.472840962518616e-17, 0.19739500042083855], 'true,false,false': [0.19739500042083855, nan], 'false': [4.177526309427992e-17, nan]}, {'': [0.09401853420336483, -3.590508505170719e-17], 'true': [0.00470751213668892, 0.18101169742877893], 'true,false': [9.912705577010326e-19, 0.19180901815943274], 'true,false,false': [0.19180901815943274, nan], 'false': [-3.590508505170719e-17, nan]}, {'': [0.08919811223645051, -1.1809113819982938e-16], 'true': [0.012816640947081117, 0.09016626868989643], 'true,false': [0.09016626868989643, nan], 'false': [-1.1809113819982938e-16, nan]}, {'': [0.09042301934729219, 1.187169174846702e-16], 'true': [0.0007075993840165857, 0.18910304641205197], 'true,false': [-1.982541115402065e-18, 0.20143303160306483], 'true,false,false': [0.20143303160306483, nan], 'false': [1.187169174846702e-16, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995086;  // std dev = 1.07e-06, 278.000 (wgt'ed) examples reached here.  /* #pos=278 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.8581489350995125;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.14185106490048816;  // std dev = 0.000, 164.000 (wgt'ed) examples reached here.  /* #neg=164 */
%   else return -0.14185106490048777;  // std dev = 0.000, 504.000 (wgt'ed) examples reached here.  /* #neg=504 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109551;  // std dev = 0.000, 111.000 (wgt'ed) examples reached here.  /* #pos=111 */
%   | | else return 0.709474382024692;  // std dev = 0.091, 169.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=167 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.7194734122109543;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.12544463852839136;  // std dev = 3.65e-08, 159.000 (wgt'ed) examples reached here.  /* #neg=159 */
%   else return -0.1254446385283923;  // std dev = 0.000, 524.000 (wgt'ed) examples reached here.  /* #neg=524 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( actor(B) )
%   | | then return -0.11231637819360638;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else return -0.2257657213682376;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( director(B), actor(A) )
%   | | then return 0.556589312522231;  // std dev = 0.023, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | | else return -0.1123163781936063;  // std dev = 8.43e-08, 159.000 (wgt'ed) examples reached here.  /* #neg=159 */
%   else return -0.11231637819360578;  // std dev = 0.000, 513.000 (wgt'ed) examples reached here.  /* #neg=513 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.4172162157046675;  // std dev = 0.000, 111.000 (wgt'ed) examples reached here.  /* #pos=111 */
%   | | else return 0.4089129531449894;  // std dev = 0.080, 170.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=167 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.4172162157046663;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.10159632948783645;  // std dev = 0.000, 154.000 (wgt'ed) examples reached here.  /* #neg=154 */
%   else return -0.10159632948783529;  // std dev = 3.78e-07, 527.000 (wgt'ed) examples reached here.  /* #neg=527 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( actor(B) )
%   | | then return -0.09269127618926096;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else return -0.2593730948066267;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.322912507294385;  // std dev = 0.033, 278.000 (wgt'ed) examples reached here.  /* #pos=278 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.32051025352600726;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.09269127618926067;  // std dev = 8.30e-08, 173.000 (wgt'ed) examples reached here.  /* #neg=173 */
%   else return -0.0926912761892615;  // std dev = 0.000, 508.000 (wgt'ed) examples reached here.  /* #neg=508 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.2545785400418587;  // std dev = 0.000, 111.000 (wgt'ed) examples reached here.  /* #pos=111 */
%   | | else return 0.24975928338856795;  // std dev = 0.062, 170.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=167 */
%   | else if ( actor(A), director(B) )
%   | | then return 0.25503468037729604;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | else return -0.08518475138839679;  // std dev = 6.14e-08, 158.000 (wgt'ed) examples reached here.  /* #neg=158 */
%   else return -0.08518475138839678;  // std dev = 1.48e-07, 515.000 (wgt'ed) examples reached here.  /* #neg=515 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( actor(B) )
%   | | then return -0.07877675473109179;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else return -0.2575305707822508;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.21165263664579786;  // std dev = 0.031, 278.000 (wgt'ed) examples reached here.  /* #pos=278 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.2096605388914896;  // std dev = 6.32e-08, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.0787767547310915;  // std dev = 8.49e-08, 161.000 (wgt'ed) examples reached here.  /* #neg=161 */
%   else return -0.07877675473109215;  // std dev = 0.000, 515.000 (wgt'ed) examples reached here.  /* #neg=515 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.1764522022057772;  // std dev = 1.28e-07, 111.000 (wgt'ed) examples reached here.  /* #pos=111 */
%   | | else return 0.17068505514496318;  // std dev = 0.059, 171.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=167 */
%   | else if ( genre(A, E) )
%   | | then return -0.07324622576333704;  // std dev = 2.63e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.177025219940351;  // std dev = 8.56e-08, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.07324622576333684;  // std dev = 7.88e-08, 153.000 (wgt'ed) examples reached here.  /* #neg=153 */
%   else return -0.07324622576333689;  // std dev = 1.59e-07, 503.000 (wgt'ed) examples reached here.  /* #neg=503 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.15419745654655626;  // std dev = 0.033, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07117063575322032;  // std dev = 0.297, 189.000 (wgt'ed) examples reached here.  /* #neg=189 */
%   else return -0.06842697784420361;  // std dev = 0.000, 537.000 (wgt'ed) examples reached here.  /* #neg=537 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.1334004806322665;  // std dev = 8.16e-08, 111.000 (wgt'ed) examples reached here.  /* #pos=111 */
%   | | else return 0.13032980509252107;  // std dev = 0.048, 170.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=167 */
%   | else if ( genre(A, E) )
%   | | then return -0.06402722206646226;  // std dev = 2.63e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.13378999328847205;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.06402722206646236;  // std dev = 0.000, 155.000 (wgt'ed) examples reached here.  /* #neg=155 */
%   else return -0.06419184008202532;  // std dev = 2.44e-07, 536.000 (wgt'ed) examples reached here.  /* #neg=536 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064329
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 5.086 seconds
Total inference time: 1.617 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.06525
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 4.744 seconds
Refined model CLL: -0.06525


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064329
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 16.493000000000002 seconds
Total inference time: 1.617 seconds
AUC ROC: 1.0
Total revision time: 16.493000000000002
Best scored revision CLL: -0.06525


Dataset: 4_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 00:11:11
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.064329, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 16.493000000000002, 'Inference time': 1.617, 'parameter_1.0': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.133876, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 3.215, 'Inference time': 1.538}}


Starting fold 5

Target train facts examples: 915
Target train pos examples: 337
Target train neg examples: 12165

Target test facts examples: 163
Target test pos	 examples: 45
Target test neg examples: 2071

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995125;  // std dev = 0.000, 60.000 (wgt'ed) examples reached here.  /* #pos=60 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.058148935099512376;  // std dev = 2.366, 35.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048763;  // std dev = 8.16e-08, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.6792392193186044;  // std dev = 1.428, 63.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=60 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.056804385454730696;  // std dev = 2.358, 34.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839136;  // std dev = 0.000, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13936843495316875;  // std dev = 0.133, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( movie(E, A) )
%   | | then return 0.3675549265638645;  // std dev = 0.352, 96.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.1123163781936062;  // std dev = 7.74e-08, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4521337541542615;  // std dev = 0.934, 62.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=60 */
%   | else if ( genre(A, E) )
%   | | then return -0.09915364149157549;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.03623590312451479;  // std dev = 2.403, 40.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1015963294878363;  // std dev = 1.86e-09, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1534000824592444;  // std dev = 0.217, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.3642240930723969;  // std dev = 0.000, 60.000 (wgt'ed) examples reached here.  /* #pos=60 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.025774434332193764;  // std dev = 2.397, 39.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926096;  // std dev = 4.94e-08, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2759416664066032;  // std dev = 0.529, 61.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=60 */
%   | else if ( movie(E, A) )
%   | | then return 0.01844568281303628;  // std dev = 0.406, 33.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=7 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839682;  // std dev = 5.37e-08, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.0801159860843143;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.2319661067492015;  // std dev = 8.69e-08, 60.000 (wgt'ed) examples reached here.  /* #pos=60 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.06406866202575551;  // std dev = 2.454, 50.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.0787767547310916;  // std dev = 5.77e-08, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.19322200766849212;  // std dev = 7.30e-08, 60.000 (wgt'ed) examples reached here.  /* #pos=60 */
%   | else if ( genre(A, E) )
%   | | then return -0.07440675372944068;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.03476848237425643;  // std dev = 2.426, 44.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333707;  // std dev = 0.000, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.06944184588870199;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( movie(E, B) )
%   | | then return 0.08268188857744244;  // std dev = 2.616, 104.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420264;  // std dev = 5.10e-09, 111.000 (wgt'ed) examples reached here.  /* #neg=111 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15379870942952578;  // std dev = 0.000, 60.000 (wgt'ed) examples reached here.  /* #pos=60 */
%   | else if ( genre(A, E) )
%   | | then return -0.06508650559700384;  // std dev = 1.32e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.012268003007563642;  // std dev = 2.382, 37.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.971565
   AUC PR    = 0.823063
   CLL	      = -0.111205
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.875


Total learning time: 1.555 seconds
Total inference time: 1.495 seconds
AUC ROC: 0.971565


Results scoring model
   AUC ROC   = 0.987246
   AUC PR    = 0.921265
   CLL	      = -0.106969
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.895522
   F1        = 0.944882


Total scoring time: 1.789 seconds
Parameter learned model CLL: -0.106969


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 3, 0], 'true,false,true': [0.0, 0, 60], 'true,false,false,true': [2.366, 28, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.16e-08, 87, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.428, 3, 60], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [2.358, 27, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 103, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.133, 8, 0], 'true,false,true': [0.352, 29, 67], 'true,false,false': [0.0, 0, 0], 'false,true': [7.74e-08, 96, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.934, 2, 60], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [2.403, 33, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.86e-09, 105, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.217, 6, 0], 'true,false,true': [0.0, 0, 60], 'true,false,false,true': [2.397, 32, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.94e-08, 100, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.529, 1, 60], 'true,false,true': [0.406, 26, 7], 'true,false,false': [0.0, 0, 0], 'false,true': [5.37e-08, 96, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [1.86e-09, 3, 0], 'true,false,true': [8.69e-08, 0, 60], 'true,false,false,true': [2.454, 43, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.77e-08, 99, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [7.3e-08, 0, 60], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [2.426, 37, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 105, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 4, 0], 'true,false,true': [2.616, 37, 67], 'true,false,false': [0.0, 0, 0], 'false,true': [5.1e-09, 111, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 60], 'true,false,true': [1.32e-09, 3, 0], 'true,false,false,true': [2.382, 30, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 89, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.2162640566430646, 7.656710514656253e-17], 'true': [0.0, 0.2078670360110795], 'true,false': [-4.736951571734001e-16, 0.16000000000000017], 'true,false,false': [0.16000000000000017, nan], 'false': [7.656710514656253e-17, nan]}, {'': [0.16830907503081893, -1.0778864316749092e-17], 'true': [0.0323758055539763, 0.15974540698666692], 'true,false': [0.0, 0.16349480968858132], 'true,false,false': [0.16349480968858132, nan], 'false': [-1.0778864316749092e-17, nan]}, {'': [0.13278084145615981, 6.245004513516506e-17], 'true': [0.002195441324767757, 0.12389593548364299], 'true,false': [0.12389593548364299, nan], 'false': [6.245004513516506e-17, nan]}, {'': [0.12211559797532266, 2.1147105230955365e-18], 'true': [0.014067556318451838, 0.13767953024041812], 'true,false': [0.0, 0.14437499999999973], 'true,false,false': [0.14437499999999973, nan], 'false': [2.1147105230955365e-18, nan]}, {'': [0.09652778094663866, 2.4424906541753444e-17], 'true': [0.007877083593171514, 0.09432983336795409], 'true,false': [-1.6283271027835628e-16, 0.1472715318869166], 'true,false,false': [0.1472715318869166, nan], 'false': [2.4424906541753444e-17, nan]}, {'': [0.07595392915346834, 3.0068540250264654e-17], 'true': [0.004595040514227509, 0.16483257195275955], 'true,false': [0.16483257195275955, nan], 'false': [3.0068540250264654e-17, nan]}, {'': [0.07523999705086282, 3.364312195833808e-17], 'true': [1.1564823173178713e-18, 0.0764553514852007], 'true,false': [1.258252761241844e-16, 0.12039999999999987], 'true,false,false': [0.12039999999999987, nan], 'false': [3.364312195833808e-17, nan]}, {'': [0.06852208442885244, -4.229421046191073e-18], 'true': [8.881784197001253e-17, 0.12802976947904457], 'true,false': [0.0, 0.1337809917355375], 'true,false,false': [0.1337809917355375, nan], 'false': [-4.229421046191073e-18, nan]}, {'': [0.0641987543576102, 2.5005023077143166e-17], 'true': [0.0, 0.06581083978833584], 'true,false': [0.06581083978833584, nan], 'false': [2.5005023077143166e-17, nan]}, {'': [0.06377246670646701, -1.3098136807375442e-17], 'true': [-2.590520390792032e-17, 0.14208543386561226], 'true,false': [5.782411586589357e-19, 0.15339663988312624], 'true,false,false': [0.15339663988312624, nan], 'false': [-1.3098136807375442e-17, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995125;  // std dev = 0.000, 60.000 (wgt'ed) examples reached here.  /* #pos=60 */
%   | | else if ( actor(B) )
%   | | | then return -0.1418510649004877;  // std dev = 3.65e-08, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.14185106490048763;  // std dev = 8.69e-08, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109542;  // std dev = 5.96e-08, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return 0.6983504609424711;  // std dev = 0.132, 40.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=39 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( female(A), director(B) )
%   | | | then return 0.7194734122109543;  // std dev = 2.11e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.12975247045229843;  // std dev = 0.153, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   else return -0.12544463852839133;  // std dev = 0.000, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14184173923763946;  // std dev = 0.090, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( actor(B) )
%   | | then return -0.1118875980378918;  // std dev = 7.45e-09, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | else return 0.5583989487839809;  // std dev = 0.021, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   else return -0.1123163781936062;  // std dev = 7.74e-08, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.42011941066229863;  // std dev = 0.019, 60.000 (wgt'ed) examples reached here.  /* #pos=60 */
%   | else if ( genre(A, E) )
%   | | then return -0.1106919269927834;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( female(A), director(B) )
%   | | | then return 0.416776274383945;  // std dev = 2.11e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.10952159886773989;  // std dev = 0.269, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   else return -0.10159632948783627;  // std dev = 3.94e-08, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10025587664664279;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.32248114003904976;  // std dev = 0.017, 60.000 (wgt'ed) examples reached here.  /* #pos=60 */
%   | | else if ( actor(B) )
%   | | | then return -0.09170329912987497;  // std dev = 1.18e-08, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | | else return 0.3202120300261866;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.09269127618926093;  // std dev = 5.77e-08, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2562185650741675;  // std dev = 0.015, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else if ( actor(B) )
%   | | then return -0.08543989364397578;  // std dev = 0.015, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | else return -0.34060341620025975;  // std dev = 0.169, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.08518475138839682;  // std dev = 5.48e-08, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08470432428697584;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.2106384791775002;  // std dev = 0.013, 60.000 (wgt'ed) examples reached here.  /* #pos=60 */
%   | | else if ( actor(B) )
%   | | | then return -0.07797702391077842;  // std dev = 5.27e-09, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | | else return 0.20928706433588168;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.07877675473109158;  // std dev = 6.23e-08, 107.000 (wgt'ed) examples reached here.  /* #neg=107 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17774271301875896;  // std dev = 0.011, 60.000 (wgt'ed) examples reached here.  /* #pos=60 */
%   | else if ( genre(A, E) )
%   | | then return -0.07836406411566312;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( actor(B) )
%   | | | then return -0.07255201568700674;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | | else return 0.17675122032768775;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.07324622576333709;  // std dev = 4.71e-08, 111.000 (wgt'ed) examples reached here.  /* #neg=111 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12852403802219967;  // std dev = 0.152, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( director(B), actor(A) )
%   | | then return 0.15315561917354634;  // std dev = 0.010, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | | else if ( female(A) )
%   | | | then return -0.06781897759073449;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return -0.08720123241311516;  // std dev = 0.358, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else return -0.06842697784420265;  // std dev = 5.37e-08, 110.000 (wgt'ed) examples reached here.  /* #neg=110 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.13280554760215635;  // std dev = 7.45e-09, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return 0.12709316884392263;  // std dev = 0.051, 40.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=39 */
%   | else if ( genre(A, E) )
%   | | then return -0.06466570942445295;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( actor(B) )
%   | | | then return -0.06320965006220804;  // std dev = 0.002, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | | else return 0.13372440784643747;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.06419184008202626;  // std dev = 2.98e-08, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064453
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.364 seconds
Total inference time: 1.696 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.066887
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.666 seconds
Refined model CLL: -0.066887


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064453
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 7.3740000000000006 seconds
Total inference time: 1.696 seconds
AUC ROC: 1.0
Total revision time: 7.3740000000000006
Best scored revision CLL: -0.066887


Dataset: 4_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 00:11:22
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.064453, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 7.3740000000000006, 'Inference time': 1.696, 'parameter_0.2': {'AUC ROC': 0.971565, 'AUC PR': 0.823063, 'CLL': -0.111205, 'Precision': [1.0, 0.5], 'Recall': 0.777778, 'F1': 0.875, 'Learning time': 1.555, 'Inference time': 1.495}}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995106;  // std dev = 6.64e-07, 120.000 (wgt'ed) examples reached here.  /* #pos=120 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.06403128804068885;  // std dev = 3.334, 68.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=14 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048843;  // std dev = 0.000, 205.000 (wgt'ed) examples reached here.  /* #neg=205 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7056222966250643;  // std dev = 1.185, 122.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=120 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.06892429275523962;  // std dev = 3.307, 64.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=14 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839163;  // std dev = 0.000, 196.000 (wgt'ed) examples reached here.  /* #neg=196 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14051055997214398;  // std dev = 0.169, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( movie(E, A) )
%   | | then return 0.36808834400877777;  // std dev = 0.348, 190.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=134 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360658;  // std dev = 0.000, 196.000 (wgt'ed) examples reached here.  /* #neg=196 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4455145291525098;  // std dev = 1.315, 124.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=120 */
%   | else if ( genre(A, E) )
%   | | then return -0.09905167107062142;  // std dev = 2.63e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.034853580729545836;  // std dev = 3.389, 78.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=14 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783656;  // std dev = 0.000, 224.000 (wgt'ed) examples reached here.  /* #neg=224 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.16444877837489655;  // std dev = 0.337, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( genre(B, E) )
%   | | then return 0.35953703565151346;  // std dev = 2.15e-07, 120.000 (wgt'ed) examples reached here.  /* #pos=120 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.021863234996266717;  // std dev = 3.374, 75.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=14 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926051;  // std dev = 1.01e-07, 228.000 (wgt'ed) examples reached here.  /* #neg=228 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.28152469984998235;  // std dev = 1.93e-07, 120.000 (wgt'ed) examples reached here.  /* #pos=120 */
%   | else if ( movie(E, A) )
%   | | then return -0.03624446424344994;  // std dev = 0.368, 86.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=14 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 8.56e-08, 226.000 (wgt'ed) examples reached here.  /* #neg=226 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1332496553227662;  // std dev = 0.201, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.22821183074300225;  // std dev = 0.000, 120.000 (wgt'ed) examples reached here.  /* #pos=120 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.007321016508708249;  // std dev = 3.364, 73.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=14 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109147;  // std dev = 7.45e-08, 197.000 (wgt'ed) examples reached here.  /* #neg=197 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1717209758062284;  // std dev = 1.030, 125.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=120 */
%   | else if ( genre(A, E) )
%   | | then return -0.06655826397578693;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.05056857711820024;  // std dev = 3.455, 95.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=14 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333663;  // std dev = 8.79e-09, 221.000 (wgt'ed) examples reached here.  /* #neg=221 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1084880905954873;  // std dev = 0.323, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( movie(E, B) )
%   | | then return 0.0863362854418731;  // std dev = 3.675, 205.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=134 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420262;  // std dev = 5.35e-09, 227.000 (wgt'ed) examples reached here.  /* #neg=227 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14653755809405314;  // std dev = 0.626, 122.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=120 */
%   | else if ( genre(A, E) )
%   | | then return -0.05647380706531835;  // std dev = 1.86e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.011895985619445729;  // std dev = 3.364, 73.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=14 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 191.000 (wgt'ed) examples reached here.  /* #neg=191 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.971565
   AUC PR    = 0.823063
   CLL	      = -0.111704
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.875


Total learning time: 2.2 seconds
Total inference time: 1.427 seconds
AUC ROC: 0.971565


Results scoring model
   AUC ROC   = 0.987064
   AUC PR    = 0.91991
   CLL	      = -0.107782
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.895522
   F1        = 0.944882


Total scoring time: 1.973 seconds
Parameter learned model CLL: -0.107782


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 12, 0], 'true,false,true': [6.64e-07, 0, 120], 'true,false,false,true': [3.334, 54, 14], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 205, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.185, 2, 120], 'true,false,true': [0.0, 7, 0], 'true,false,false,true': [3.307, 50, 14], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 196, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.169, 12, 0], 'true,false,true': [0.348, 56, 134], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 196, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.315, 4, 120], 'true,false,true': [2.63e-09, 5, 0], 'true,false,false,true': [3.389, 64, 14], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 224, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.337, 13, 0], 'true,false,true': [2.15e-07, 0, 120], 'true,false,false,true': [3.374, 61, 14], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.01e-07, 228, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [1.93e-07, 0, 120], 'true,false,true': [0.368, 72, 14], 'true,false,false': [0.0, 0, 0], 'false,true': [8.56e-08, 226, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.201, 4, 0], 'true,false,true': [0.0, 0, 120], 'true,false,false,true': [3.364, 59, 14], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.45e-08, 197, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [1.03, 5, 120], 'true,false,true': [0.0, 4, 0], 'true,false,false,true': [3.455, 81, 14], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.79e-09, 221, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.323, 11, 0], 'true,false,true': [3.675, 71, 134], 'true,false,false': [0.0, 0, 0], 'false,true': [5.35e-09, 227, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.626, 2, 120], 'true,false,true': [1.86e-09, 9, 0], 'true,false,false,true': [3.364, 59, 14], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 191, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.22110000000000446, -2.38291771139058e-16], 'true': [-1.1564823173178714e-17, 0.20473064735174745], 'true,false': [3.671137468093851e-15, 0.1634948096885808], 'true,false,false': [0.1634948096885808, nan], 'false': [-2.38291771139058e-16, nan]}, {'': [0.16521196606592267, -4.7580986769649563e-17], 'true': [0.011511204178421462, 0.1574067879565277], 'true,false': [-1.982541115402065e-18, 0.17089843749999997], 'true,false,false': [0.17089843749999997, nan], 'false': [-4.7580986769649563e-17, nan]}, {'': [0.12867745629271726, -3.8517941670668696e-17], 'true': [0.0023847356584836715, 0.12128713497743879], 'true,false': [0.12128713497743879, nan], 'false': [-3.8517941670668696e-17, nan]}, {'': [0.12026835399668892, -7.731910350068054e-17], 'true': [0.013955691630414751, 0.13863307321951504], 'true,false': [1.3877787807814458e-18, 0.1472715318869165], 'true,false,false': [0.1472715318869165, nan], 'false': [-7.731910350068054e-17, nan]}, {'': [0.09590842950932849, 4.4798472923471226e-17], 'true': [0.008736091114129315, 0.09282302427486702], 'true,false': [3.848773152033876e-16, 0.15182222222222275], 'true,false,false': [0.15182222222222275, nan], 'false': [4.4798472923471226e-17, nan]}, {'': [0.08094999572784493, 3.2422442312062095e-17], 'true': [3.108624468950438e-16, 0.13508178397453727], 'true,false': [0.13508178397453727, nan], 'false': [3.2422442312062095e-17, nan]}, {'': [0.07189854972617467, 2.817824935596844e-17], 'true': [0.010063883239220063, 0.07167375084099613], 'true,false': [-9.62193288008469e-17, 0.1550009382623386], 'true,false,false': [0.1550009382623386, nan], 'false': [2.817824935596844e-17, nan]}, {'': [0.07028361515173151, 7.635923065295194e-17], 'true': [0.008479900935053632, 0.12058407540594387], 'true,false': [0.0, 0.12565096952908567], 'true,false,false': [0.12565096952908567, nan], 'false': [7.635923065295194e-17, nan]}, {'': [0.06483974948327058, 2.836693190672206e-17], 'true': [0.009500312111659881, 0.06587621089104324], 'true,false': [0.06587621089104324, nan], 'false': [2.836693190672206e-17, nan]}, {'': [0.06387616227478883, -3.48761159568112e-18], 'true': [0.0032098638314541155, 0.1381828071268105], 'true,false': [3.854941057726238e-19, 0.15500093826233882], 'true,false,false': [0.15500093826233882, nan], 'false': [-3.48761159568112e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995106;  // std dev = 6.64e-07, 120.000 (wgt'ed) examples reached here.  /* #pos=120 */
%   | | else if ( actor(B) )
%   | | | then return -0.14185106490048766;  // std dev = 6.50e-08, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return -0.14185106490048827;  // std dev = 0.000, 177.000 (wgt'ed) examples reached here.  /* #neg=177 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109551;  // std dev = 0.000, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | | else return 0.708207838201096;  // std dev = 0.097, 75.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=74 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( director(B), female(A) )
%   | | | then return 0.7194734122109542;  // std dev = 5.16e-08, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.1279062567706242;  // std dev = 0.154, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   else return -0.12544463852839166;  // std dev = 0.000, 201.000 (wgt'ed) examples reached here.  /* #neg=201 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( actor(B) )
%   | | then return -0.11231637819360638;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.2255444120276895;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( director(B), actor(A) )
%   | | then return 0.5569017136916629;  // std dev = 0.016, 134.000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | | else return -0.11701525626643526;  // std dev = 0.199, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   else return -0.11231637819360654;  // std dev = 0.000, 191.000 (wgt'ed) examples reached here.  /* #neg=191 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.41714025831093554;  // std dev = 8.43e-08, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | | else return 0.40386937654590893;  // std dev = 0.097, 76.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=74 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( actor(B) )
%   | | | then return -0.10094462061600613;  // std dev = 1.05e-08, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | | | else return 0.33576814421095685;  // std dev = 0.861, 16.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=14 */
%   else return -0.10159632948783648;  // std dev = 0.000, 173.000 (wgt'ed) examples reached here.  /* #neg=173 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12579405234141847;  // std dev = 0.066, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( genre(B, E) )
%   | | then return 0.32376813589665765;  // std dev = 0.029, 120.000 (wgt'ed) examples reached here.  /* #pos=120 */
%   | | else if ( actor(B) )
%   | | | then return -0.09214533899971214;  // std dev = 0.000, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   | | | else return 0.3384314142494503;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return -0.09269127618926065;  // std dev = 7.88e-08, 161.000 (wgt'ed) examples reached here.  /* #neg=161 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.2543713548655244;  // std dev = 5.16e-08, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | | else return 0.252467676928019;  // std dev = 0.057, 75.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=74 */
%   | else if ( female(A), director(B) )
%   | | then return 0.26722971476858526;  // std dev = 2.98e-08, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( actor(A) )
%   | | | then return -0.08472122444680462;  // std dev = 2.58e-08, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | | | else return -0.11939418090420809;  // std dev = 0.273, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return -0.08518475138839678;  // std dev = 8.02e-08, 213.000 (wgt'ed) examples reached here.  /* #neg=213 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( female(B) )
%   | | then return -0.07402827091779635;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.1263211454480128;  // std dev = 0.091, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( genre(B, E) )
%   | | then return 0.21190986436740786;  // std dev = 0.023, 120.000 (wgt'ed) examples reached here.  /* #pos=120 */
%   | | else if ( actor(B) )
%   | | | then return -0.0783400198682055;  // std dev = 0.002, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   | | | else return 0.18055287903813463;  // std dev = 0.546, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   else return -0.07877675473109148;  // std dev = 7.88e-08, 179.000 (wgt'ed) examples reached here.  /* #neg=179 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.17628629501966486;  // std dev = 2.58e-08, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | | else return 0.1743128193757495;  // std dev = 0.050, 75.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=74 */
%   | else if ( genre(A, E) )
%   | | then return -0.06615063554848384;  // std dev = 0.003, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( director(B), director(A) )
%   | | | then return -0.38902455114599643;  // std dev = 7.45e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.03387153335807531;  // std dev = 0.904, 94.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=14 */
%   else return -0.07324622576333666;  // std dev = 1.16e-07, 196.000 (wgt'ed) examples reached here.  /* #neg=196 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.1585735421549217;  // std dev = 0.142, 134.000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else if ( actor(B) )
%   | | then return -0.07009129505155302;  // std dev = 0.019, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
%   | | else return -0.29640243641278075;  // std dev = 0.009, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.06842697784420262;  // std dev = 8.09e-08, 197.000 (wgt'ed) examples reached here.  /* #neg=197 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13482173388516472;  // std dev = 0.018, 120.000 (wgt'ed) examples reached here.  /* #pos=120 */
%   | else if ( genre(A, E) )
%   | | then return -0.05875809354906293;  // std dev = 0.003, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( female(A), director(B) )
%   | | | then return 0.17062443636949087;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.06899743112612229;  // std dev = 0.175, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   else return -0.06419184008202626;  // std dev = 0.000, 183.000 (wgt'ed) examples reached here.  /* #neg=183 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.065275
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.168 seconds
Total inference time: 1.507 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.066798
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.165 seconds
Refined model CLL: -0.066798


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.065275
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 9.506 seconds
Total inference time: 1.507 seconds
AUC ROC: 1.0
Total revision time: 9.506
Best scored revision CLL: -0.066798


Dataset: 4_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 00:11:35
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.065275, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 9.506, 'Inference time': 1.507, 'parameter_0.4': {'AUC ROC': 0.971565, 'AUC PR': 0.823063, 'CLL': -0.111704, 'Precision': [1.0, 0.5], 'Recall': 0.777778, 'F1': 0.875, 'Learning time': 2.2, 'Inference time': 1.427}}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995095;  // std dev = 1.09e-06, 174.000 (wgt'ed) examples reached here.  /* #pos=174 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.0686752508889852;  // std dev = 4.702, 133.000 (wgt'ed) examples reached here.  /* #neg=105 #pos=28 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048788;  // std dev = 7.30e-08, 295.000 (wgt'ed) examples reached here.  /* #neg=295 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109566;  // std dev = 0.000, 174.000 (wgt'ed) examples reached here.  /* #pos=174 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.0585370156419642;  // std dev = 4.706, 134.000 (wgt'ed) examples reached here.  /* #neg=106 #pos=28 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.125444638528392;  // std dev = 0.000, 299.000 (wgt'ed) examples reached here.  /* #neg=299 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13535676226541968;  // std dev = 0.178, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( movie(E, A) )
%   | | then return 0.3629572707292941;  // std dev = 0.357, 292.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=202 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360693;  // std dev = 0.000, 288.000 (wgt'ed) examples reached here.  /* #neg=288 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.46108702310724003;  // std dev = 0.668, 175.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=174 */
%   | else if ( genre(A, E) )
%   | | then return -0.09951254957513767;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.008135653179979956;  // std dev = 4.720, 137.000 (wgt'ed) examples reached here.  /* #neg=109 #pos=28 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783649;  // std dev = 0.000, 327.000 (wgt'ed) examples reached here.  /* #neg=327 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11579333057951394;  // std dev = 0.186, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( genre(B, E) )
%   | | then return 0.35396248517449175;  // std dev = 0.000, 174.000 (wgt'ed) examples reached here.  /* #pos=174 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.009315563132206285;  // std dev = 4.672, 127.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=28 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926042;  // std dev = 1.55e-07, 298.000 (wgt'ed) examples reached here.  /* #neg=298 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.26852948070229055;  // std dev = 0.935, 177.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=174 */
%   | else if ( movie(E, A) )
%   | | then return 0.008941661705979086;  // std dev = 0.402, 134.000 (wgt'ed) examples reached here.  /* #neg=106 #pos=28 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.01e-07, 288.000 (wgt'ed) examples reached here.  /* #neg=288 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12478095787684887;  // std dev = 0.377, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( genre(B, E) )
%   | | then return 0.22720544110440954;  // std dev = 0.000, 174.000 (wgt'ed) examples reached here.  /* #pos=174 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.0036876983989123664;  // std dev = 4.702, 133.000 (wgt'ed) examples reached here.  /* #neg=105 #pos=28 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109144;  // std dev = 4.94e-08, 270.000 (wgt'ed) examples reached here.  /* #neg=270 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1870184794343098;  // std dev = 0.484, 175.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=174 */
%   | else if ( genre(A, E) )
%   | | then return -0.07352254336635781;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.009214369461508443;  // std dev = 4.720, 137.000 (wgt'ed) examples reached here.  /* #neg=109 #pos=28 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333696;  // std dev = 5.74e-09, 294.000 (wgt'ed) examples reached here.  /* #neg=294 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1629813980499759;  // std dev = 0.527, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( movie(E, B) )
%   | | then return 0.10605206817665543;  // std dev = 4.773, 293.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=202 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.068426977844203;  // std dev = 0.000, 299.000 (wgt'ed) examples reached here.  /* #neg=299 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14113518141595788;  // std dev = 0.772, 177.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=174 */
%   | else if ( genre(A, E) )
%   | | then return -0.05895028085433595;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.001094476845690111;  // std dev = 4.639, 121.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=28 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202591;  // std dev = 7.09e-09, 310.000 (wgt'ed) examples reached here.  /* #neg=310 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.971565
   AUC PR    = 0.823063
   CLL	      = -0.120166
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.875


Total learning time: 2.31 seconds
Total inference time: 1.486 seconds
AUC ROC: 0.971565


Results scoring model
   AUC ROC   = 0.983127
   AUC PR    = 0.893853
   CLL	      = -0.116268
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.861386
   F1        = 0.925532


Total scoring time: 2.896 seconds
Parameter learned model CLL: -0.116268


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 11, 0], 'true,false,true': [1.09e-06, 0, 174], 'true,false,false,true': [4.702, 105, 28], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.3e-08, 295, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 174], 'true,false,true': [0.0, 7, 0], 'true,false,false,true': [4.706, 106, 28], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 299, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.178, 15, 0], 'true,false,true': [0.357, 90, 202], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 288, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.668, 1, 174], 'true,false,true': [0.0, 12, 0], 'true,false,false,true': [4.72, 109, 28], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 327, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.186, 8, 0], 'true,false,true': [0.0, 0, 174], 'true,false,false,true': [4.672, 99, 28], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.55e-07, 298, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.935, 3, 174], 'true,false,true': [0.402, 106, 28], 'true,false,false': [0.0, 0, 0], 'false,true': [1.01e-07, 288, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.377, 17, 0], 'true,false,true': [0.0, 0, 174], 'true,false,false,true': [4.702, 105, 28], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.94e-08, 270, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.484, 1, 174], 'true,false,true': [0.0, 8, 0], 'true,false,false,true': [4.72, 109, 28], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.74e-09, 294, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.527, 17, 0], 'true,false,true': [4.773, 91, 202], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 299, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.772, 3, 174], 'true,false,true': [0.0, 14, 0], 'true,false,false,true': [4.639, 93, 28], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.09e-09, 310, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.23171551758237866, 1.8064645824409325e-17], 'true': [-1.0092936587501423e-17, 0.2250421755138032], 'true,false': [6.860412621132002e-15, 0.16620498614958557], 'true,false,false': [0.16620498614958557, nan], 'false': [1.8064645824409325e-17, nan]}, {'': [0.18204655003398854, -8.614439522175128e-17], 'true': [-3.103519995274001e-15, 0.15868393801862343], 'true,false': [-1.982541115402065e-18, 0.16529293829360694], 'true,false,false': [0.16529293829360694, nan], 'false': [-8.614439522175128e-17, nan]}, {'': [0.13313040221866557, -1.0793834961633466e-16], 'true': [0.0021234371927066785, 0.12772746570695856], 'true,false': [0.12772746570695856, nan], 'false': [-1.0793834961633466e-16, nan]}, {'': [0.1268341947241007, -1.9012993693886472e-17], 'true': [0.0025468441584666833, 0.15013086955999977], 'true,false': [0.0, 0.162608556662582], 'true,false,false': [0.162608556662582, nan], 'false': [-1.9012993693886472e-17, nan]}, {'': [0.10162301698400672, 8.047254138222611e-17], 'true': [0.004322489304663909, 0.10148554512657695], 'true,false': [-1.6334315764600004e-16, 0.17186434372868717], 'true,false,false': [0.17186434372868717, nan], 'false': [8.047254138222611e-17, nan]}, {'': [0.08891290810472945, 3.5465457731081387e-17], 'true': [0.004935503231207706, 0.16148686196684733], 'true,false': [0.16148686196684733, nan], 'false': [3.5465457731081387e-17, nan]}, {'': [0.08422358033636103, 9.046261682130906e-18], 'true': [0.00834735512447596, 0.08509431193564221], 'true,false': [0.0, 0.16620498614958526], 'true,false,false': [0.16620498614958526, nan], 'false': [9.046261682130906e-18, nan]}, {'': [0.08033671222539825, 3.398641912117826e-17], 'true': [0.0013382164255976343, 0.15385262931231022], 'true,false': [0.0, 0.16260855666258106], 'true,false,false': [0.16260855666258106, nan], 'false': [3.398641912117826e-17, nan]}, {'': [0.07814850254739529, -5.643943135218187e-17], 'true': [0.016307258424221167, 0.07776738978611149], 'true,false': [0.07776738978611149, nan], 'false': [-5.643943135218187e-17, nan]}, {'': [0.07628132050559677, 5.1571650176136306e-17], 'true': [0.003363628517336096, 0.15974742156033625], 'true,false': [-9.912705577010326e-19, 0.17785670377706497], 'true,false,false': [0.17785670377706497, nan], 'false': [5.1571650176136306e-17, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995095;  // std dev = 1.09e-06, 174.000 (wgt'ed) examples reached here.  /* #pos=174 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.8581489350995117;  // std dev = 1.69e-07, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return -0.14185106490048763;  // std dev = 8.30e-08, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
%   else return -0.14185106490048793;  // std dev = 0.000, 287.000 (wgt'ed) examples reached here.  /* #neg=287 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109546;  // std dev = 1.19e-07, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | | else if ( actor(A) )
%   | | | then return 0.719473412210955;  // std dev = 0.000, 109.000 (wgt'ed) examples reached here.  /* #pos=109 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.7194734122109546;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
%   else return -0.12544463852839194;  // std dev = 0.000, 274.000 (wgt'ed) examples reached here.  /* #neg=274 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360636;  // std dev = 9.13e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( actor(A), director(B) )
%   | | then return 0.5553664367462837;  // std dev = 5.53e-07, 202.000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | | else return -0.11231637819360621;  // std dev = 7.74e-08, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
%   else return -0.11231637819360692;  // std dev = 0.000, 290.000 (wgt'ed) examples reached here.  /* #neg=290 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4145472417946204;  // std dev = 0.518, 175.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=174 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783627;  // std dev = 5.27e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.41751358415831047;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return -0.10159632948783628;  // std dev = 3.33e-08, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
%   else return -0.1015963294878366;  // std dev = 0.000, 267.000 (wgt'ed) examples reached here.  /* #neg=267 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.103384448653517;  // std dev = 0.083, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( genre(B, E) )
%   | | then return 0.32135842532060316;  // std dev = 0.000, 174.000 (wgt'ed) examples reached here.  /* #pos=174 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.3207118471601495;  // std dev = 2.11e-08, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return -0.09269127618926108;  // std dev = 0.000, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
%   else return -0.09269127618926046;  // std dev = 1.10e-07, 257.000 (wgt'ed) examples reached here.  /* #neg=257 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25555223726516885;  // std dev = 0.002, 202.000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.08556738012546865;  // std dev = 0.048, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
%   else return -0.08518475138839678;  // std dev = 1.07e-07, 309.000 (wgt'ed) examples reached here.  /* #neg=309 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08566660164814928;  // std dev = 0.060, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( genre(B, E) )
%   | | then return 0.21007943172028054;  // std dev = 0.000, 174.000 (wgt'ed) examples reached here.  /* #pos=174 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.20969473488049642;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return -0.07874899146457068;  // std dev = 0.000, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
%   else return -0.07877675473109141;  // std dev = 4.94e-08, 285.000 (wgt'ed) examples reached here.  /* #neg=285 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17566138862624098;  // std dev = 0.292, 175.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=174 */
%   | else if ( genre(A, E) )
%   | | then return -0.07203600690762375;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.1770503029772851;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return -0.07322214071131496;  // std dev = 3.07e-08, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
%   else return -0.07324622576333696;  // std dev = 9.88e-08, 296.000 (wgt'ed) examples reached here.  /* #neg=296 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.15307971185533056;  // std dev = 0.002, 202.000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.06834415504032615;  // std dev = 0.002, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
%   else return -0.06842697784420292;  // std dev = 0.000, 282.000 (wgt'ed) examples reached here.  /* #neg=282 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( actor(A) )
%   | | then return 0.13432268510057932;  // std dev = 1.75e-07, 174.000 (wgt'ed) examples reached here.  /* #pos=174 */
%   | | else return -0.12648892685345425;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(A, E) )
%   | | then return -0.06319754345812753;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( actor(B) )
%   | | | then return -0.0641769465682236;  // std dev = 3.94e-08, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
%   | | | else return 0.1339366417628121;  // std dev = 2.58e-08, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   else return -0.064191840082026;  // std dev = 1.06e-07, 292.000 (wgt'ed) examples reached here.  /* #neg=292 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063765
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.625 seconds
Total inference time: 1.495 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.06443
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.414 seconds
Refined model CLL: -0.06443


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063765
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 11.245 seconds
Total inference time: 1.495 seconds
AUC ROC: 1.0
Total revision time: 11.245
Best scored revision CLL: -0.06443


Dataset: 4_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 00:11:50
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063765, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 11.245, 'Inference time': 1.495, 'parameter_0.6': {'AUC ROC': 0.971565, 'AUC PR': 0.823063, 'CLL': -0.120166, 'Precision': [1.0, 0.5], 'Recall': 0.777778, 'F1': 0.875, 'Learning time': 2.31, 'Inference time': 1.486}}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995088;  // std dev = 1.07e-06, 234.000 (wgt'ed) examples reached here.  /* #pos=234 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.07554023944733722;  // std dev = 5.234, 161.000 (wgt'ed) examples reached here.  /* #neg=126 #pos=35 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048727;  // std dev = 3.01e-07, 415.000 (wgt'ed) examples reached here.  /* #neg=415 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7052731088371867;  // std dev = 1.676, 238.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=234 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.06082360234566223;  // std dev = 5.251, 165.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=35 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839224;  // std dev = 0.000, 403.000 (wgt'ed) examples reached here.  /* #neg=403 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13191913044792056;  // std dev = 0.205, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else if ( movie(E, A) )
%   | | then return 0.34083844158119614;  // std dev = 0.365, 406.000 (wgt'ed) examples reached here.  /* #neg=137 #pos=269 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.1123163781936063;  // std dev = 0.000, 382.000 (wgt'ed) examples reached here.  /* #neg=382 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4625833173316354;  // std dev = 1.342, 238.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=234 */
%   | else if ( genre(A, E) )
%   | | then return -0.09982101945730636;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.01482247666517632;  // std dev = 5.306, 179.000 (wgt'ed) examples reached here.  /* #neg=144 #pos=35 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783597;  // std dev = 1.05e-08, 393.000 (wgt'ed) examples reached here.  /* #neg=393 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10431176877533446;  // std dev = 0.190, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( genre(B, E) )
%   | | then return 0.3619654193654327;  // std dev = 3.58e-07, 234.000 (wgt'ed) examples reached here.  /* #pos=234 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.043896871831377846;  // std dev = 5.117, 139.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=35 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926094;  // std dev = 1.41e-07, 409.000 (wgt'ed) examples reached here.  /* #neg=409 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2762030425345328;  // std dev = 0.947, 237.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=234 */
%   | else if ( movie(E, A) )
%   | | then return 0.0041146082608182755;  // std dev = 0.406, 165.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=35 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.21e-07, 381.000 (wgt'ed) examples reached here.  /* #neg=381 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09829879161062746;  // std dev = 0.233, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( genre(B, E) )
%   | | then return 0.23058476280825613;  // std dev = 2.89e-07, 234.000 (wgt'ed) examples reached here.  /* #pos=234 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.017414285796603743;  // std dev = 5.180, 150.000 (wgt'ed) examples reached here.  /* #neg=115 #pos=35 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109143;  // std dev = 1.15e-07, 393.000 (wgt'ed) examples reached here.  /* #neg=393 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1859574347715306;  // std dev = 0.853, 237.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=234 */
%   | else if ( genre(A, E) )
%   | | then return -0.07603139087206834;  // std dev = 3.73e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.0026371536034602667;  // std dev = 5.220, 158.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=35 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333771;  // std dev = 0.000, 418.000 (wgt'ed) examples reached here.  /* #neg=418 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07085935026328095;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( movie(E, B) )
%   | | then return 0.10943467319891628;  // std dev = 5.338, 380.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=269 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420336;  // std dev = 0.000, 409.000 (wgt'ed) examples reached here.  /* #neg=409 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13849945600123517;  // std dev = 1.157, 240.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=234 */
%   | else if ( genre(A, E) )
%   | | then return -0.06633360608411192;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.017126021361075123;  // std dev = 5.220, 158.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=35 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202565;  // std dev = 9.36e-09, 378.000 (wgt'ed) examples reached here.  /* #neg=378 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.971565
   AUC PR    = 0.823063
   CLL	      = -0.12189
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.875


Total learning time: 2.621 seconds
Total inference time: 1.504 seconds
AUC ROC: 0.971565


Results scoring model
   AUC ROC   = 0.984338
   AUC PR    = 0.90066
   CLL	      = -0.117288
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.869888
   F1        = 0.930417


Total scoring time: 3.278 seconds
Parameter learned model CLL: -0.117288


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 12, 0], 'true,false,true': [1.07e-06, 0, 234], 'true,false,false,true': [5.234, 126, 35], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.01e-07, 415, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.676, 4, 234], 'true,false,true': [0.0, 17, 0], 'true,false,false,true': [5.251, 130, 35], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 403, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.205, 23, 0], 'true,false,true': [0.365, 137, 269], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 382, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.342, 4, 234], 'true,false,true': [0.0, 16, 0], 'true,false,false,true': [5.306, 144, 35], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.05e-08, 393, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.19, 15, 0], 'true,false,true': [3.58e-07, 0, 234], 'true,false,false,true': [5.117, 104, 35], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.41e-07, 409, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.947, 3, 234], 'true,false,true': [0.406, 130, 35], 'true,false,false': [0.0, 0, 0], 'false,true': [1.21e-07, 381, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.233, 16, 0], 'true,false,true': [2.89e-07, 0, 234], 'true,false,false,true': [5.18, 115, 35], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.15e-07, 393, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.853, 3, 234], 'true,false,true': [3.73e-09, 12, 0], 'true,false,false,true': [5.22, 123, 35], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 418, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 19, 0], 'true,false,true': [5.338, 111, 269], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 409, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.157, 6, 234], 'true,false,true': [0.0, 21, 0], 'true,false,false,true': [5.22, 123, 35], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.36e-09, 378, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.2241003567784929, 2.1829927423954886e-16], 'true': [-1.1564823173178714e-17, 0.21723441756129175], 'true,false': [4.8584118684451296e-15, 0.17013232514177812], 'true,false,false': [0.17013232514177812, nan], 'false': [2.1829927423954886e-16, nan]}, {'': [0.18117829550343292, -1.2782716710324383e-16], 'true': [0.011796444030562342, 0.15445325924522774], 'true,false': [0.0, 0.16712580348943884], 'true,false,false': [0.16712580348943884, nan], 'false': [-1.2782716710324383e-16, nan]}, {'': [0.13762762625338962, -2.3250743971207467e-17], 'true': [0.0018252725057340644, 0.13333836046874029], 'true,false': [0.13333836046874029, nan], 'false': [-2.3250743971207467e-17, nan]}, {'': [0.1275096177484482, 1.0847980698627483e-16], 'true': [0.007569546999323799, 0.14493608109971812], 'true,false': [-5.204170427930421e-18, 0.15729846134639944], 'true,false,false': [0.15729846134639944, nan], 'false': [1.0847980698627483e-16, nan]}, {'': [0.09481665206230591, 4.8860671010398084e-17], 'true': [0.0024058151966466915, 0.0938578382079611], 'true,false': [5.465713352000771e-16, 0.1883960457533245], 'true,false,false': [0.1883960457533245, nan], 'false': [4.8860671010398084e-17, nan]}, {'': [0.08785433543490305, 3.8464419750792824e-17], 'true': [0.0037820475624491443, 0.16496691279082026], 'true,false': [0.16496691279082026, nan], 'false': [3.8464419750792824e-17, nan]}, {'': [0.07992020468456962, 3.389993968321089e-17], 'true': [0.003405483975114764, 0.08069527177364756], 'true,false': [3.567896215889392e-16, 0.17888888888888804], 'true,false,false': [0.17888888888888804, nan], 'false': [3.389993968321089e-17, nan]}, {'': [0.077577712433646, -7.011934892369409e-17], 'true': [0.0030670571213002387, 0.16068151820580234], 'true,false': [1.1564823173178713e-18, 0.17244832558884743], 'true,false,false': [0.17244832558884743, nan], 'false': [-7.011934892369409e-17, nan]}, {'': [0.07287612387455149, -1.2432326290423513e-16], 'true': [0.0, 0.07497202840655587], 'true,false': [0.07497202840655587, nan], 'false': [-1.2432326290423513e-16, nan]}, {'': [0.07470597425620136, 8.693809928281649e-17], 'true': [0.00558015820534559, 0.15246770401547993], 'true,false': [-3.96508223080413e-18, 0.17244832558884782], 'true,false,false': [0.17244832558884782, nan], 'false': [8.693809928281649e-17, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995088;  // std dev = 1.07e-06, 234.000 (wgt'ed) examples reached here.  /* #pos=234 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.8581489350995115;  // std dev = 2.38e-07, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | | else return -0.14185106490048785;  // std dev = 0.000, 129.000 (wgt'ed) examples reached here.  /* #neg=129 */
%   else return -0.1418510649004874;  // std dev = 2.76e-07, 381.000 (wgt'ed) examples reached here.  /* #neg=381 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109541;  // std dev = 2.80e-07, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   | | else return 0.7027973980516269;  // std dev = 0.118, 152.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=149 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 7.45e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( actor(B) )
%   | | | then return -0.12544463852839108;  // std dev = 7.88e-08, 131.000 (wgt'ed) examples reached here.  /* #neg=131 */
%   | | | else return 0.7194734122109548;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   else return -0.12544463852839227;  // std dev = 0.000, 407.000 (wgt'ed) examples reached here.  /* #neg=407 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360635;  // std dev = 1.67e-08, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else if ( director(B), actor(A) )
%   | | then return 0.5576451898099289;  // std dev = 0.034, 269.000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | | else return -0.11406186183541024;  // std dev = 0.162, 132.000 (wgt'ed) examples reached here.  /* #neg=132 */
%   else return -0.11231637819360632;  // std dev = 0.000, 378.000 (wgt'ed) examples reached here.  /* #neg=378 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.416959504936209;  // std dev = 1.88e-07, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   | | else if ( actor(A) )
%   | | | then return 0.42101904279717856;  // std dev = 4.95e-07, 149.000 (wgt'ed) examples reached here.  /* #pos=149 */
%   | | | else return -0.20564647646168205;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( actor(B) )
%   | | | then return -0.10143712206881676;  // std dev = 8.16e-08, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
%   | | | else return 0.4169595049362087;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   else return -0.10159632948783595;  // std dev = 2.13e-07, 396.000 (wgt'ed) examples reached here.  /* #neg=396 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11118761652866765;  // std dev = 0.160, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else if ( genre(B, E) )
%   | | then return 0.32208925959989887;  // std dev = 0.020, 234.000 (wgt'ed) examples reached here.  /* #pos=234 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.32033623327068744;  // std dev = 4.71e-08, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | | else return -0.09721535797531056;  // std dev = 0.329, 124.000 (wgt'ed) examples reached here.  /* #neg=124 */
%   else return -0.09269127618926079;  // std dev = 1.60e-07, 387.000 (wgt'ed) examples reached here.  /* #neg=387 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25595668951267203;  // std dev = 0.019, 269.000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.0874915584222206;  // std dev = 0.219, 140.000 (wgt'ed) examples reached here.  /* #neg=140 */
%   else return -0.08518475138839678;  // std dev = 1.30e-07, 426.000 (wgt'ed) examples reached here.  /* #neg=426 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08266868127812282;  // std dev = 0.067, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( genre(B, E) )
%   | | then return 0.21044772446504414;  // std dev = 0.015, 234.000 (wgt'ed) examples reached here.  /* #pos=234 */
%   | | else if ( actor(B) )
%   | | | then return -0.07816807450774894;  // std dev = 0.000, 144.000 (wgt'ed) examples reached here.  /* #neg=144 */
%   | | | else return 0.19667204969086238;  // std dev = 0.452, 36.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=35 */
%   else return -0.07877675473109153;  // std dev = 1.05e-07, 419.000 (wgt'ed) examples reached here.  /* #neg=419 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17361718677048932;  // std dev = 0.542, 237.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=234 */
%   | else if ( genre(A, E) )
%   | | then return -0.07158745967537496;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( actor(B) )
%   | | | then return -0.07271793941036735;  // std dev = 4.34e-08, 132.000 (wgt'ed) examples reached here.  /* #neg=132 */
%   | | | else return 0.1657480497519831;  // std dev = 0.460, 36.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=35 */
%   else return -0.0732462257633377;  // std dev = 0.000, 381.000 (wgt'ed) examples reached here.  /* #neg=381 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07618832550702638;  // std dev = 0.124, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else if ( director(B), actor(A) )
%   | | then return 0.15390645623793206;  // std dev = 0.016, 269.000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | | else return -0.07027939141124122;  // std dev = 0.253, 110.000 (wgt'ed) examples reached here.  /* #neg=110 */
%   else return -0.06842697784420335;  // std dev = 0.000, 400.000 (wgt'ed) examples reached here.  /* #neg=400 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13468005123703203;  // std dev = 0.011, 234.000 (wgt'ed) examples reached here.  /* #pos=234 */
%   | else if ( genre(A, E) )
%   | | then return -0.06236643116944198;  // std dev = 3.73e-09, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.1364791107535649;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | | else return -0.07235288341872388;  // std dev = 0.479, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
%   else return -0.06419184008202555;  // std dev = 2.06e-07, 416.000 (wgt'ed) examples reached here.  /* #neg=416 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063699
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 4.214 seconds
Total inference time: 1.574 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.065519
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 3.066 seconds
Refined model CLL: -0.065519


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063699
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 13.178999999999998 seconds
Total inference time: 1.574 seconds
AUC ROC: 1.0
Total revision time: 13.178999999999998
Best scored revision CLL: -0.065519


Dataset: 4_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 00:12:07
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063699, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 13.178999999999998, 'Inference time': 1.574, 'parameter_0.8': {'AUC ROC': 0.971565, 'AUC PR': 0.823063, 'CLL': -0.12189, 'Precision': [1.0, 0.5], 'Recall': 0.777778, 'F1': 0.875, 'Learning time': 2.621, 'Inference time': 1.504}}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048774;  // std dev = 1.05e-08, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995085;  // std dev = 1.08e-06, 288.000 (wgt'ed) examples reached here.  /* #pos=288 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.10562368257425973;  // std dev = 6.072, 198.000 (wgt'ed) examples reached here.  /* #neg=149 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004876;  // std dev = 1.03e-07, 488.000 (wgt'ed) examples reached here.  /* #neg=488 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7165498203398873;  // std dev = 0.843, 289.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=288 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.0849949000136552;  // std dev = 6.102, 204.000 (wgt'ed) examples reached here.  /* #neg=155 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839235;  // std dev = 0.000, 519.000 (wgt'ed) examples reached here.  /* #neg=519 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14098850258767906;  // std dev = 0.199, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( movie(E, A) )
%   | | then return 0.3355826689939154;  // std dev = 0.371, 512.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360575;  // std dev = 0.000, 524.000 (wgt'ed) examples reached here.  /* #neg=524 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4677977076090841;  // std dev = 0.952, 290.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=288 */
%   | else if ( genre(A, E) )
%   | | then return -0.09900902743512156;  // std dev = 7.45e-09, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.02041672769233521;  // std dev = 6.106, 205.000 (wgt'ed) examples reached here.  /* #neg=156 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783548;  // std dev = 1.50e-08, 479.000 (wgt'ed) examples reached here.  /* #neg=479 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14284698582753674;  // std dev = 0.382, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( genre(B, E) )
%   | | then return 0.35937470502080227;  // std dev = 4.69e-07, 288.000 (wgt'ed) examples reached here.  /* #pos=288 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.0026553982621310705;  // std dev = 6.163, 218.000 (wgt'ed) examples reached here.  /* #neg=169 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926147;  // std dev = 0.000, 503.000 (wgt'ed) examples reached here.  /* #neg=503 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2685466489660554;  // std dev = 1.418, 295.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=288 */
%   | else if ( movie(E, A) )
%   | | then return -0.0030993629500521815;  // std dev = 0.402, 235.000 (wgt'ed) examples reached here.  /* #neg=186 #pos=49 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.41e-07, 485.000 (wgt'ed) examples reached here.  /* #neg=485 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12096786174029285;  // std dev = 0.372, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( genre(B, E) )
%   | | then return 0.23040948378588352;  // std dev = 1.03e-07, 288.000 (wgt'ed) examples reached here.  /* #pos=288 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.022961454843089903;  // std dev = 6.082, 200.000 (wgt'ed) examples reached here.  /* #neg=151 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109189;  // std dev = 0.000, 469.000 (wgt'ed) examples reached here.  /* #neg=469 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18549318378387616;  // std dev = 0.958, 292.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=288 */
%   | else if ( genre(A, E) )
%   | | then return -0.07081694581737717;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.0012595062793293644;  // std dev = 6.163, 218.000 (wgt'ed) examples reached here.  /* #neg=169 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333685;  // std dev = 7.62e-09, 513.000 (wgt'ed) examples reached here.  /* #neg=513 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14654845918179807;  // std dev = 0.582, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else if ( movie(E, B) )
%   | | then return 0.10318544424210647;  // std dev = 6.311, 491.000 (wgt'ed) examples reached here.  /* #neg=154 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420355;  // std dev = 0.000, 501.000 (wgt'ed) examples reached here.  /* #neg=501 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1465814109979473;  // std dev = 0.775, 291.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=288 */
%   | else if ( genre(A, E) )
%   | | then return -0.057781265720040026;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.006492955396547278;  // std dev = 6.111, 206.000 (wgt'ed) examples reached here.  /* #neg=157 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202536;  // std dev = 1.08e-08, 515.000 (wgt'ed) examples reached here.  /* #neg=515 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.971565
   AUC PR    = 0.823063
   CLL	      = -0.124047
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.875


Total learning time: 3.123 seconds
Total inference time: 1.686 seconds
AUC ROC: 0.971565


Results scoring model
   AUC ROC   = 0.982257
   AUC PR    = 0.888508
   CLL	      = -0.120208
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.854599
   F1        = 0.9216


Total scoring time: 3.221 seconds
Parameter learned model CLL: -0.120208


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [1.05e-08, 21, 0], 'true,false,true': [1.08e-06, 0, 288], 'true,false,false,true': [6.072, 149, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.03e-07, 488, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.843, 1, 288], 'true,false,true': [0.0, 20, 0], 'true,false,false,true': [6.102, 155, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 519, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.199, 16, 0], 'true,false,true': [0.371, 175, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 524, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.952, 2, 288], 'true,false,true': [7.45e-09, 26, 0], 'true,false,false,true': [6.106, 156, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.5e-08, 479, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.382, 19, 0], 'true,false,true': [4.69e-07, 0, 288], 'true,false,false,true': [6.163, 169, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 503, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [1.418, 7, 288], 'true,false,true': [0.402, 186, 49], 'true,false,false': [0.0, 0, 0], 'false,true': [1.41e-07, 485, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.372, 17, 0], 'true,false,true': [1.03e-07, 0, 288], 'true,false,false,true': [6.082, 151, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 469, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.958, 4, 288], 'true,false,true': [0.0, 8, 0], 'true,false,false,true': [6.163, 169, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.62e-09, 513, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.582, 23, 0], 'true,false,true': [6.311, 154, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 501, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.775, 3, 288], 'true,false,true': [0.0, 15, 0], 'true,false,false,true': [6.111, 157, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.08e-08, 515, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.22287579410929698, 2.1840452943445702e-17], 'true': [5.28677630773884e-18, 0.21259039103118021], 'true,false': [4.046146134189459e-15, 0.18623099683705843], 'true,false,false': [0.18623099683705843, nan], 'false': [2.1840452943445702e-17, nan]}, {'': [0.1795723403164157, -1.5744203200850004e-16], 'true': [0.0024616481554289157, 0.1698080720785819], 'true,false': [0.0, 0.18250192233756168], 'true,false,false': [0.18250192233756168, nan], 'false': [-1.5744203200850004e-16, nan]}, {'': [0.13987149728710196, -5.084990952481633e-18], 'true': [0.0024662721518075408, 0.1372829838579544], 'true,false': [0.1372829838579544, nan], 'false': [-5.084990952481633e-18, nan]}, {'': [0.12635039099508222, 2.225081635991963e-16], 'true': [0.003126838219373818, 0.16284368940601032], 'true,false': [2.135044278125301e-18, 0.1818917311124344], 'true,false,false': [0.1818917311124344, nan], 'false': [2.225081635991963e-16, nan]}, {'': [0.1069435023783868, -3.178372078449752e-17], 'true': [0.007666501656200326, 0.10627496448222135], 'true,false': [7.648203058528857e-16, 0.17424880060600947], 'true,false,false': [0.17424880060600947, nan], 'false': [-3.178372078449752e-17, nan]}, {'': [0.09379425095485501, 4.1204153491242925e-17], 'true': [0.006812968183653509, 0.16191086240520114], 'true,false': [0.16191086240520114, nan], 'false': [4.1204153491242925e-17, nan]}, {'': [0.08589778196391451, -1.7043935559277458e-17], 'true': [0.008140486364802869, 0.08621824542892415], 'true,false': [3.700743415417188e-17, 0.18497500000000117], 'true,false,false': [0.18497500000000117, nan], 'false': [-1.7043935559277458e-17, nan]}, {'': [0.08398248622687192, 5.799995528256178e-17], 'true': [0.003144610319479639, 0.1682459040307373], 'true,false': [-8.673617379884035e-19, 0.17424880060601008], 'true,false,false': [0.17424880060601008, nan], 'false': [5.799995528256178e-17, nan]}, {'': [0.08081324496788733, -1.1966475714522646e-16], 'true': [0.014720919724484187, 0.08111847721731318], 'true,false': [0.08111847721731318, nan], 'false': [-1.1966475714522646e-16, nan]}, {'': [0.08019591045663726, 1.1727404376623014e-16], 'true': [0.0020628075250058195, 0.16914678486128532], 'true,false': [-2.7755575615628915e-18, 0.18128475822415097], 'true,false,false': [0.18128475822415097, nan], 'false': [1.1727404376623014e-16, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004877;  // std dev = 2.11e-08, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995085;  // std dev = 1.08e-06, 288.000 (wgt'ed) examples reached here.  /* #pos=288 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.8581489350995122;  // std dev = 1.69e-07, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.14185106490048818;  // std dev = 0.000, 169.000 (wgt'ed) examples reached here.  /* #neg=169 */
%   else return -0.141851064900488;  // std dev = 0.000, 526.000 (wgt'ed) examples reached here.  /* #neg=526 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109548;  // std dev = 0.000, 105.000 (wgt'ed) examples reached here.  /* #pos=105 */
%   | | else return 0.7014002988261578;  // std dev = 0.122, 187.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=183 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.7194734122109547;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.12544463852839136;  // std dev = 2.98e-08, 163.000 (wgt'ed) examples reached here.  /* #neg=163 */
%   else return -0.1254446385283923;  // std dev = 0.000, 515.000 (wgt'ed) examples reached here.  /* #neg=515 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11890703436560572;  // std dev = 0.109, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( director(B), actor(A) )
%   | | then return 0.557787409312462;  // std dev = 0.041, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | | else return -0.11231637819360615;  // std dev = 1.02e-07, 143.000 (wgt'ed) examples reached here.  /* #neg=143 */
%   else return -0.1123163781936059;  // std dev = 0.000, 473.000 (wgt'ed) examples reached here.  /* #neg=473 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( actor(A) )
%   | | then return 0.4197207860516586;  // std dev = 0.036, 288.000 (wgt'ed) examples reached here.  /* #pos=288 */
%   | | else return -0.20434469636368993;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( genre(A, E) )
%   | | then return -0.10099634810792323;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.4169249311753603;  // std dev = 5.96e-08, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.10159632948783645;  // std dev = 0.000, 153.000 (wgt'ed) examples reached here.  /* #neg=153 */
%   else return -0.10159632948783537;  // std dev = 3.55e-07, 504.000 (wgt'ed) examples reached here.  /* #neg=504 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10297899918339133;  // std dev = 0.107, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( genre(B, E) )
%   | | then return 0.3222101934508864;  // std dev = 0.032, 288.000 (wgt'ed) examples reached here.  /* #pos=288 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.3203127969928787;  // std dev = 1.12e-07, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.09269127618926067;  // std dev = 8.16e-08, 166.000 (wgt'ed) examples reached here.  /* #neg=166 */
%   else return -0.09269127618926143;  // std dev = 0.000, 495.000 (wgt'ed) examples reached here.  /* #neg=495 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.2560069746758125;  // std dev = 0.029, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.08634164449181887;  // std dev = 0.127, 178.000 (wgt'ed) examples reached here.  /* #neg=178 */
%   else return -0.08518475138839678;  // std dev = 1.44e-07, 505.000 (wgt'ed) examples reached here.  /* #neg=505 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.0998397638848905;  // std dev = 0.153, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else if ( genre(B, E) )
%   | | then return 0.2105120211638498;  // std dev = 0.024, 288.000 (wgt'ed) examples reached here.  /* #pos=288 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.20938202049374707;  // std dev = 6.99e-08, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.07869283877001423;  // std dev = 8.09e-08, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
%   else return -0.07877675473109204;  // std dev = 0.000, 494.000 (wgt'ed) examples reached here.  /* #neg=494 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17335967666519408;  // std dev = 0.622, 292.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=288 */
%   | else if ( genre(A, E) )
%   | | then return -0.07067546758610518;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.1768208941229492;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.07317342411263235;  // std dev = 0.000, 147.000 (wgt'ed) examples reached here.  /* #neg=147 */
%   else return -0.073246225763337;  // std dev = 1.28e-07, 482.000 (wgt'ed) examples reached here.  /* #neg=482 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.15354858116262288;  // std dev = 0.021, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.0690668839161404;  // std dev = 0.126, 187.000 (wgt'ed) examples reached here.  /* #neg=187 */
%   else return -0.06842697784420357;  // std dev = 0.000, 511.000 (wgt'ed) examples reached here.  /* #neg=511 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.12996009807911507;  // std dev = 0.628, 293.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=288 */
%   | else if ( genre(A, E) )
%   | | then return -0.06202988256513996;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( actor(B) )
%   | | | then return -0.06409338872734222;  // std dev = 0.000, 144.000 (wgt'ed) examples reached here.  /* #neg=144 */
%   | | | else return 0.12596864070382358;  // std dev = 0.274, 51.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=49 */
%   else return -0.06419184008202536;  // std dev = 2.44e-07, 515.000 (wgt'ed) examples reached here.  /* #neg=515 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.0638
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 4.373 seconds
Total inference time: 1.624 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064744
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 3.71 seconds
Refined model CLL: -0.064744


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.0638
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 14.427 seconds
Total inference time: 1.624 seconds
AUC ROC: 1.0
Total revision time: 14.427
Best scored revision CLL: -0.064744


Dataset: 4_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 00:12:26
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.0638, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 14.427, 'Inference time': 1.624, 'parameter_1.0': {'AUC ROC': 0.971565, 'AUC PR': 0.823063, 'CLL': -0.124047, 'Precision': [1.0, 0.5], 'Recall': 0.777778, 'F1': 0.875, 'Learning time': 3.123, 'Inference time': 1.686}}


Starting fold 1

Target train facts examples: 863
Target train pos examples: 326
Target train neg examples: 10928

Target test facts examples: 215
Target test pos	 examples: 56
Target test neg examples: 3308

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995122;  // std dev = 1.69e-07, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.16003572755234255;  // std dev = 3.342, 53.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=16 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048766;  // std dev = 7.74e-08, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7025750511961678;  // std dev = 0.836, 50.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=49 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.12324436162098455;  // std dev = 3.381, 56.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=16 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839127;  // std dev = 0.000, 129.000 (wgt'ed) examples reached here.  /* #neg=129 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( movie(E, A) )
%   | | then return 0.40695982712058315;  // std dev = 0.369, 89.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=65 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360626;  // std dev = 6.32e-08, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4449012554178006;  // std dev = 0.657, 50.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=49 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.12417740417657774;  // std dev = 3.170, 43.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=16 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783626;  // std dev = 4.56e-09, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.19018434309287896;  // std dev = 0.138, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.3514697345315114;  // std dev = 7.88e-08, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.10916691739273394;  // std dev = 3.147, 42.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=16 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926104;  // std dev = 2.98e-08, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2655392329439859;  // std dev = 0.521, 50.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=49 */
%   | else if ( movie(E, A) )
%   | | then return 0.1625252023389455;  // std dev = 0.489, 36.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839682;  // std dev = 5.58e-08, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.16138167542567428;  // std dev = 0.174, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.22625248676940576;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.002209127080987774;  // std dev = 3.283, 49.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=16 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109162;  // std dev = 5.16e-08, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18910341082343843;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | else if ( genre(A, E) )
%   | | then return -0.07797031605909743;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.01452694578911719;  // std dev = 3.314, 51.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=16 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333707;  // std dev = 0.000, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13172285965514036;  // std dev = 0.205, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( movie(E, B) )
%   | | then return 0.11291687967029297;  // std dev = 3.187, 91.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=65 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420265;  // std dev = 4.66e-09, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14705770768261497;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | else if ( genre(A, E) )
%   | | then return -0.0641673350115091;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.03064986956517541;  // std dev = 3.147, 42.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=16 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.163574
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.628 seconds
Total inference time: 1.81 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.970484
   AUC PR    = 0.815852
   CLL	      = -0.161544
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.753846
   F1        = 0.859649


Total scoring time: 1.538 seconds
Parameter learned model CLL: -0.161544


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 7, 0], 'true,false,true': [1.69e-07, 0, 49], 'true,false,false,true': [3.342, 37, 16], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.74e-08, 82, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.836, 1, 49], 'true,false,true': [0.0, 5, 0], 'true,false,false,true': [3.381, 40, 16], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 129, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [2.63e-09, 3, 0], 'true,false,true': [0.369, 24, 65], 'true,false,false': [0.0, 0, 0], 'false,true': [6.32e-08, 84, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.657, 1, 49], 'true,false,true': [0.0, 4, 0], 'true,false,false,true': [3.17, 27, 16], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.56e-09, 97, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.138, 2, 0], 'true,false,true': [7.88e-08, 0, 49], 'true,false,false,true': [3.147, 26, 16], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.98e-08, 92, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.521, 1, 49], 'true,false,true': [0.489, 20, 16], 'true,false,false': [0.0, 0, 0], 'false,true': [5.58e-08, 100, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.174, 3, 0], 'true,false,true': [0.0, 0, 49], 'true,false,false,true': [3.283, 33, 16], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.16e-08, 89, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 49], 'true,false,true': [0.0, 5, 0], 'true,false,false,true': [3.314, 35, 16], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 89, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.205, 4, 0], 'true,false,true': [3.187, 26, 65], 'true,false,false': [0.0, 0, 0], 'false,true': [4.66e-09, 91, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 49], 'true,false,true': [0.0, 7, 0], 'true,false,false,true': [3.147, 26, 16], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 83, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.24072047807423558, 7.311224796312007e-17], 'true': [-7.93016446160826e-18, 0.23116109188773482], 'true,false': [5.800348863347756e-16, 0.2107511569953715], 'true,false,false': [0.2107511569953715, nan], 'false': [7.311224796312007e-17, nan]}, {'': [0.20085191383631343, -3.4425520143415706e-18], 'true': [0.013992175644316944, 0.19200747068141358], 'true,false': [0.0, 0.20408163265306123], 'true,false,false': [0.20408163265306123, nan], 'false': [-3.4425520143415706e-18, nan]}, {'': [0.1404411440142465, 4.7580986769649563e-17], 'true': [2.3129646346357427e-18, 0.13638225285409303], 'true,false': [0.13638225285409303, nan], 'false': [4.7580986769649563e-17, nan]}, {'': [0.13880889514451739, 1.8312957107219077e-17], 'true': [0.008636022405607449, 0.21772455249770273], 'true,false': [0.0, 0.23363980530016273], 'true,false,false': [0.23363980530016273, nan], 'false': [1.8312957107219077e-17, nan]}, {'': [0.12487186624562872, 9.654113257610057e-18], 'true': [0.009504898094273344, 0.12343435113166551], 'true,false': [1.2688263138573217e-16, 0.23582766439909286], 'true,false,false': [0.23582766439909286, nan], 'false': [9.654113257610057e-18, nan]}, {'': [0.10565863069018736, 3.1086244689504386e-17], 'true': [0.005430953573027866, 0.23869403401741338], 'true,false': [0.23869403401741338, nan], 'false': [3.1086244689504386e-17, nan]}, {'': [0.12180302769106652, 2.993859841685815e-17], 'true': [0.010079291756687795, 0.12300286300671666], 'true,false': [-2.718913529694261e-17, 0.21990837151187012], 'true,false,false': [0.21990837151187012, nan], 'false': [2.993859841685815e-17, nan]}, {'': [0.115652141416561, -7.484649604214538e-18], 'true': [-9.06304509898087e-17, 0.1964057242979191], 'true,false': [0.0, 0.21530180699730905], 'true,false,false': [0.21530180699730905, nan], 'false': [-7.484649604214538e-18, nan]}, {'': [0.10978646691716534, 2.1350442781253012e-17], 'true': [0.010505635007165899, 0.11163051838934268], 'true,false': [0.11163051838934268, nan], 'false': [2.1350442781253012e-17, nan]}, {'': [0.10584138119597727, -1.203856291762218e-17], 'true': [0.0, 0.20323885139723102], 'true,false': [-4.956352788505163e-19, 0.2358276643990929], 'true,false,false': [0.2358276643990929, nan], 'false': [-1.203856291762218e-17, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995122;  // std dev = 1.69e-07, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | else if ( actor(B) )
%   | | | then return -0.1418510649004877;  // std dev = 2.58e-08, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else return -0.14185106490048763;  // std dev = 8.16e-08, 110.000 (wgt'ed) examples reached here.  /* #neg=110 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109547;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.7194734122109542;  // std dev = 5.96e-08, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return -0.12942109876584398;  // std dev = 0.153, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.1254446385283914;  // std dev = 0.000, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( actor(B) )
%   | | then return -0.11192053026770979;  // std dev = 2.36e-08, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | else return 0.5553664367462837;  // std dev = 2.06e-07, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   else return -0.11231637819360618;  // std dev = 9.19e-08, 118.000 (wgt'ed) examples reached here.  /* #neg=118 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.4175135841583098;  // std dev = 5.58e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return 0.3795803986055999;  // std dev = 0.149, 33.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=31 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783627;  // std dev = 3.73e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.4175135841583103;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return -0.11006159390405632;  // std dev = 0.268, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   else return -0.1015963294878363;  // std dev = 2.58e-08, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1852744345676392;  // std dev = 0.131, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.3259752336045528;  // std dev = 0.028, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.32071184716014967;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return -0.10678567020407403;  // std dev = 0.352, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   else return -0.09269127618926104;  // std dev = 2.36e-08, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.25788049885738457;  // std dev = 0.027, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else return -0.09633715310571861;  // std dev = 0.319, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   else return -0.08518475138839682;  // std dev = 5.87e-08, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13294456919074985;  // std dev = 0.168, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.21244277260911867;  // std dev = 0.021, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.20930914952067264;  // std dev = 2.11e-08, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return -0.08487120012959512;  // std dev = 0.223, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   else return -0.07877675473109161;  // std dev = 5.27e-08, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.17554880182996646;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return 0.15784727666520681;  // std dev = 0.092, 33.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=31 */
%   | else if ( genre(A, E) )
%   | | then return -0.0632237423020016;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.17676742582640964;  // std dev = 2.11e-08, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return -0.08305120968356927;  // std dev = 0.296, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   else return -0.07324622576333707;  // std dev = 0.000, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06466456922355782;  // std dev = 0.009, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | else return 0.1552751796519614;  // std dev = 0.028, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   else return -0.06842697784420264;  // std dev = 5.37e-08, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.13266192589729237;  // std dev = 1.67e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return 0.11512463311920329;  // std dev = 0.095, 33.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=31 */
%   | else if ( genre(A, E) )
%   | | then return -0.05605932158145701;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.1334900707753554;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return -0.06928184034025911;  // std dev = 0.236, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   else return -0.06419184008202626;  // std dev = 0.000, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.062744
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.412 seconds
Total inference time: 1.799 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.066878
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.64 seconds
Refined model CLL: -0.066878


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.062744
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 7.217999999999999 seconds
Total inference time: 1.799 seconds
AUC ROC: 1.0
Total revision time: 7.217999999999999
Best scored revision CLL: -0.066878


Dataset: 4_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 00:12:37
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.062744, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 7.217999999999999, 'Inference time': 1.799, 'parameter_0.2': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.163574, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 1.628, 'Inference time': 1.81}}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995113;  // std dev = 4.30e-07, 102.000 (wgt'ed) examples reached here.  /* #pos=102 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.1727556766725448;  // std dev = 4.381, 89.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=28 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048843;  // std dev = 0.000, 209.000 (wgt'ed) examples reached here.  /* #neg=209 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7112703243396987;  // std dev = 0.841, 103.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=102 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.14013961499647073;  // std dev = 4.413, 92.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=28 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1254446385283916;  // std dev = 0.000, 194.000 (wgt'ed) examples reached here.  /* #neg=194 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360638;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( movie(E, A) )
%   | | then return 0.3915226300597267;  // std dev = 0.368, 180.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=130 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 171.000 (wgt'ed) examples reached here.  /* #neg=171 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4533765390562284;  // std dev = 0.664, 103.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=102 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.11785245787681253;  // std dev = 4.205, 76.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=28 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783653;  // std dev = 0.000, 203.000 (wgt'ed) examples reached here.  /* #neg=203 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1188338243399991;  // std dev = 0.181, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( genre(B, E) )
%   | | then return 0.3510747364593061;  // std dev = 1.52e-07, 102.000 (wgt'ed) examples reached here.  /* #pos=102 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.08108787093797463;  // std dev = 4.252, 79.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=28 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0926912761892606;  // std dev = 8.69e-08, 181.000 (wgt'ed) examples reached here.  /* #neg=181 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.27579969379891617;  // std dev = 8.94e-08, 102.000 (wgt'ed) examples reached here.  /* #pos=102 */
%   | else if ( movie(E, A) )
%   | | then return 0.039718514970578316;  // std dev = 0.460, 88.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=28 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 7.15e-08, 188.000 (wgt'ed) examples reached here.  /* #neg=188 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14060632251857091;  // std dev = 0.291, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( genre(B, E) )
%   | | then return 0.22422841964241627;  // std dev = 8.43e-08, 102.000 (wgt'ed) examples reached here.  /* #pos=102 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.05201742928256645;  // std dev = 4.266, 80.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=28 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109147;  // std dev = 7.74e-08, 183.000 (wgt'ed) examples reached here.  /* #neg=183 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1876395548629297;  // std dev = 6.32e-08, 102.000 (wgt'ed) examples reached here.  /* #pos=102 */
%   | else if ( genre(A, E) )
%   | | then return -0.0832235182822214;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.012861981682675015;  // std dev = 4.358, 87.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=28 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333675;  // std dev = 7.09e-09, 165.000 (wgt'ed) examples reached here.  /* #neg=165 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1507872130604002;  // std dev = 0.308, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( movie(E, B) )
%   | | then return 0.12612874699249418;  // std dev = 4.172, 174.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=130 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420262;  // std dev = 5.67e-09, 176.000 (wgt'ed) examples reached here.  /* #neg=176 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13581254068337337;  // std dev = 0.626, 104.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=102 */
%   | else if ( genre(A, E) )
%   | | then return -0.0670230162558113;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.00206272847764819;  // std dev = 4.307, 83.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=28 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 197.000 (wgt'ed) examples reached here.  /* #neg=197 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.156229
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.133 seconds
Total inference time: 1.952 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.97551
   AUC PR    = 0.840906
   CLL	      = -0.149915
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.784615
   F1        = 0.87931


Total scoring time: 2.147 seconds
Parameter learned model CLL: -0.149915


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 7, 0], 'true,false,true': [4.3e-07, 0, 102], 'true,false,false,true': [4.381, 61, 28], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 209, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.841, 1, 102], 'true,false,true': [5.27e-09, 10, 0], 'true,false,false,true': [4.413, 64, 28], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 194, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 5, 0], 'true,false,true': [0.368, 50, 130], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 171, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.664, 1, 102], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [4.205, 48, 28], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 203, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.181, 11, 0], 'true,false,true': [1.52e-07, 0, 102], 'true,false,false,true': [4.252, 51, 28], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.69e-08, 181, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [8.94e-08, 0, 102], 'true,false,true': [0.46, 60, 28], 'true,false,false': [0.0, 0, 0], 'false,true': [7.15e-08, 188, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.291, 10, 0], 'true,false,true': [8.43e-08, 0, 102], 'true,false,false,true': [4.266, 52, 28], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.74e-08, 183, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [6.32e-08, 0, 102], 'true,false,true': [0.0, 9, 0], 'true,false,false,true': [4.358, 59, 28], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.09e-09, 165, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.308, 7, 0], 'true,false,true': [4.172, 44, 130], 'true,false,false': [0.0, 0, 0], 'false,true': [5.67e-09, 176, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.626, 2, 102], 'true,false,true': [0.0, 9, 0], 'true,false,false,true': [4.307, 55, 28], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 197, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.2254871951841692, -2.3798082058950725e-16], 'true': [-7.93016446160826e-18, 0.2173734272635114], 'true,false': [1.8111873656630004e-15, 0.21562933972983336], 'true,false,false': [0.21562933972983336, nan], 'false': [-2.3798082058950725e-16, nan]}, {'': [0.1907182728216733, -4.807151240645008e-17], 'true': [0.00686364636360123, 0.1972005771586293], 'true,false': [2.7755575615628915e-18, 0.21172022684309977], 'true,false,false': [0.21172022684309977, nan], 'false': [-4.807151240645008e-17, nan]}, {'': [0.13870091004353335, -2.5970129230997812e-18], 'true': [0.0, 0.13569280103981957], 'true,false': [0.13569280103981957, nan], 'false': [-2.5970129230997812e-18, nan]}, {'': [0.12875867297737112, -8.969289460025895e-17], 'true': [0.0042759031623319215, 0.23268698060941748], 'true,false': [nan, 0.23268698060941748], 'true,false,false': [0.23268698060941748, nan], 'false': [-8.969289460025895e-17, nan]}, {'': [0.11791218793389881, 4.171003628426002e-17], 'true': [0.002971312287783387, 0.1177960954950541], 'true,false': [2.2639842070787504e-16, 0.22880948565935014], 'true,false,false': [0.22880948565935014, nan], 'false': [4.171003628426002e-17, nan]}, {'': [0.11199029634469786, 2.7165031453594255e-17], 'true': [7.836868409118753e-17, 0.21187669945112003], 'true,false': [0.21187669945112003, nan], 'false': [2.7165031453594255e-17, nan]}, {'': [0.10628535970072034, 3.276067941516855e-17], 'true': [0.008466580048802819, 0.10730582241389545], 'true,false': [6.966105252550002e-17, 0.2274999999999995], 'true,false,false': [0.2274999999999995, nan], 'false': [3.276067941516855e-17, nan]}, {'': [0.10471838856701171, 5.113754537667388e-17], 'true': [3.918434204559376e-17, 0.19858133020516344], 'true,false': [0.0, 0.2182586867485803], 'true,false,false': [0.2182586867485803, nan], 'false': [5.113754537667388e-17, nan]}, {'': [0.09953984863870999, 3.154042683594195e-17], 'true': [0.013578173929590657, 0.10003245735964916], 'true,false': [0.10003245735964916, nan], 'false': [3.154042683594195e-17, nan]}, {'': [0.1020173876345247, -2.254259948477475e-18], 'true': [0.003763800026998033, 0.2020486970145832], 'true,false': [-3.0839528461809902e-18, 0.22354478153578194], 'true,false,false': [0.22354478153578194, nan], 'false': [-2.254259948477475e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995113;  // std dev = 4.30e-07, 102.000 (wgt'ed) examples reached here.  /* #pos=102 */
%   | | else if ( actor(B) )
%   | | | then return -0.14185106490048766;  // std dev = 5.58e-08, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   | | | else return 0.8581489350995117;  // std dev = 1.69e-07, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   else return -0.14185106490048843;  // std dev = 0.000, 209.000 (wgt'ed) examples reached here.  /* #neg=209 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 102.000 (wgt'ed) examples reached here.  /* #pos=102 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.7194734122109546;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return -0.13061403683708006;  // std dev = 0.216, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   else return -0.12544463852839155;  // std dev = 0.000, 181.000 (wgt'ed) examples reached here.  /* #neg=181 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13326218189525477;  // std dev = 0.147, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( actor(B) )
%   | | then return -0.11180201387493201;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | | else return 0.5553664367462834;  // std dev = 4.84e-07, 130.000 (wgt'ed) examples reached here.  /* #pos=130 */
%   else return -0.11231637819360653;  // std dev = 0.000, 188.000 (wgt'ed) examples reached here.  /* #neg=188 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415830914;  // std dev = 3.86e-07, 130.000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.11023010474628571;  // std dev = 0.379, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   else return -0.10159632948783648;  // std dev = 0.000, 171.000 (wgt'ed) examples reached here.  /* #neg=171 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10645639296811855;  // std dev = 0.089, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.32071184716015033;  // std dev = 8.43e-08, 102.000 (wgt'ed) examples reached here.  /* #pos=102 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.32071184716015005;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return -0.09633040598789923;  // std dev = 0.254, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   else return -0.09269127618926058;  // std dev = 8.82e-08, 187.000 (wgt'ed) examples reached here.  /* #neg=187 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2551722425694897;  // std dev = 0.000, 102.000 (wgt'ed) examples reached here.  /* #pos=102 */
%   | else if ( actor(A), director(B) )
%   | | then return 0.2551722425694897;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | else return -0.0912502427906321;  // std dev = 0.338, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   else return -0.08518475138839678;  // std dev = 7.45e-08, 193.000 (wgt'ed) examples reached here.  /* #neg=193 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09469729543022061;  // std dev = 0.126, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(B, E) )
%   | | then return 0.2097577156325356;  // std dev = 1.46e-07, 102.000 (wgt'ed) examples reached here.  /* #pos=102 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.209757715632536;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return -0.0849113348698258;  // std dev = 0.319, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   else return -0.07877675473109147;  // std dev = 7.45e-08, 193.000 (wgt'ed) examples reached here.  /* #neg=193 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17347476273280418;  // std dev = 0.371, 103.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=102 */
%   | else if ( genre(A, E) )
%   | | then return -0.06893327602427003;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.1770964977452775;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return -0.09171157560889392;  // std dev = 0.508, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   else return -0.07324622576333668;  // std dev = 1.12e-07, 189.000 (wgt'ed) examples reached here.  /* #neg=189 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.15311207018045067;  // std dev = 0.002, 130.000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.07014232366704286;  // std dev = 0.256, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
%   else return -0.06842697784420262;  // std dev = 8.43e-08, 208.000 (wgt'ed) examples reached here.  /* #neg=208 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13438504836290124;  // std dev = 0.000, 102.000 (wgt'ed) examples reached here.  /* #pos=102 */
%   | else if ( genre(A, E) )
%   | | then return -0.060524839924536465;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.13396430506804965;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return -0.06439899157190085;  // std dev = 0.194, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   else return -0.06419184008202626;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #neg=204 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.062786
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.06 seconds
Total inference time: 1.851 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.065871
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.917 seconds
Refined model CLL: -0.065871


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.062786
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 9.257 seconds
Total inference time: 1.851 seconds
AUC ROC: 1.0
Total revision time: 9.257
Best scored revision CLL: -0.065871


Dataset: 4_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 00:12:51
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.062786, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 9.257, 'Inference time': 1.851, 'parameter_0.4': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.156229, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 2.133, 'Inference time': 1.952}}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995098;  // std dev = 9.54e-07, 154.000 (wgt'ed) examples reached here.  /* #pos=154 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.1784614350995116;  // std dev = 5.279, 128.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=41 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048796;  // std dev = 0.000, 281.000 (wgt'ed) examples reached here.  /* #neg=281 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7086411295091697;  // std dev = 1.187, 156.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=154 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 7.45e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.16565236871849956;  // std dev = 5.239, 124.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=41 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839208;  // std dev = 0.000, 340.000 (wgt'ed) examples reached here.  /* #neg=340 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13659574839718897;  // std dev = 0.174, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( movie(E, A) )
%   | | then return 0.35277454053677376;  // std dev = 0.384, 288.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=195 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360696;  // std dev = 0.000, 279.000 (wgt'ed) examples reached here.  /* #neg=279 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4531116061695998;  // std dev = 1.328, 158.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=154 */
%   | else if ( genre(A, E) )
%   | | then return -0.09940157935056769;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.050112754995388455;  // std dev = 5.360, 137.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=41 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783662;  // std dev = 0.000, 296.000 (wgt'ed) examples reached here.  /* #neg=296 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.18824128896723433;  // std dev = 0.239, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.3606195326625539;  // std dev = 2.31e-07, 154.000 (wgt'ed) examples reached here.  /* #pos=154 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.0342074973331341;  // std dev = 5.385, 140.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=41 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926043;  // std dev = 1.41e-07, 284.000 (wgt'ed) examples reached here.  /* #neg=284 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2721086691541451;  // std dev = 0.911, 157.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=154 */
%   | else if ( movie(E, A) )
%   | | then return 0.05054520869409556;  // std dev = 0.450, 137.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=41 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.05e-07, 302.000 (wgt'ed) examples reached here.  /* #neg=302 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10796846416845254;  // std dev = 0.295, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( genre(B, E) )
%   | | then return 0.23051519698497924;  // std dev = 0.000, 154.000 (wgt'ed) examples reached here.  /* #pos=154 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.03304046588778116;  // std dev = 5.325, 133.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=41 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109143;  // std dev = 5.16e-08, 279.000 (wgt'ed) examples reached here.  /* #neg=279 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1802054140091349;  // std dev = 0.934, 158.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=154 */
%   | else if ( genre(A, E) )
%   | | then return -0.07249654758010594;  // std dev = 3.73e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.021833924203106838;  // std dev = 5.343, 135.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=41 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333693;  // std dev = 6.04e-09, 288.000 (wgt'ed) examples reached here.  /* #neg=288 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13615615100251663;  // std dev = 0.370, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( movie(E, B) )
%   | | then return 0.0925107057254392;  // std dev = 5.529, 292.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=195 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420289;  // std dev = 0.000, 277.000 (wgt'ed) examples reached here.  /* #neg=277 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14487462880898389;  // std dev = 0.760, 157.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=154 */
%   | else if ( genre(A, E) )
%   | | then return -0.059658286635535976;  // std dev = 1.86e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.014800761250516513;  // std dev = 5.392, 141.000 (wgt'ed) examples reached here.  /* #neg=100 #pos=41 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.064191840082026;  // std dev = 6.04e-09, 292.000 (wgt'ed) examples reached here.  /* #neg=292 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.142125
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.691 seconds
Total inference time: 1.743 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.974696
   AUC PR    = 0.83987
   CLL	      = -0.138996
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.789744
   F1        = 0.882521


Total scoring time: 2.543 seconds
Parameter learned model CLL: -0.138996


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 17, 0], 'true,false,true': [9.54e-07, 0, 154], 'true,false,false,true': [5.279, 87, 41], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 281, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.187, 2, 154], 'true,false,true': [7.45e-09, 15, 0], 'true,false,false,true': [5.239, 83, 41], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 340, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.174, 14, 0], 'true,false,true': [0.384, 93, 195], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 279, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.328, 4, 154], 'true,false,true': [0.0, 9, 0], 'true,false,false,true': [5.36, 96, 41], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 296, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.239, 6, 0], 'true,false,true': [2.31e-07, 0, 154], 'true,false,false,true': [5.385, 99, 41], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.41e-07, 284, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.911, 3, 154], 'true,false,true': [0.45, 96, 41], 'true,false,false': [0.0, 0, 0], 'false,true': [1.05e-07, 302, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.295, 16, 0], 'true,false,true': [0.0, 0, 154], 'true,false,false,true': [5.325, 92, 41], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.16e-08, 279, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.934, 4, 154], 'true,false,true': [3.73e-09, 14, 0], 'true,false,false,true': [5.343, 94, 41], 'true,false,false,false': [0.0, 0, 0], 'false,true': [6.04e-09, 288, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.37, 11, 0], 'true,false,true': [5.529, 97, 195], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 277, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.76, 3, 154], 'true,false,true': [1.86e-09, 5, 0], 'true,false,false,true': [5.392, 100, 41], 'true,false,false,false': [0.0, 0, 0], 'false,true': [6.04e-09, 292, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.2268431001890407, -2.2125441060145468e-17], 'true': [-3.2653618371328133e-18, 0.21333182435491674], 'true,false': [5.905809751772262e-15, 0.21771240234375122], 'true,false,false': [0.21771240234375122, nan], 'false': [-2.2125441060145468e-17, nan]}, {'': [0.1838610786038703, -9.665471037913128e-17], 'true': [0.009035052836917036, 0.2055931326326142], 'true,false': [3.7007434154171884e-18, 0.2213189386056206], 'true,false,false': [0.2213189386056206, nan], 'false': [-9.665471037913128e-17, nan]}, {'': [0.15108766348103997, -1.1301194946005178e-16], 'true': [0.0021614553307695928, 0.1472252580398147], 'true,false': [0.1472252580398147, nan], 'false': [-1.1301194946005178e-16, nan]}, {'': [0.14334675393683616, -5.551115123125783e-17], 'true': [0.011169478293217216, 0.19807339492256446], 'true,false': [0.0, 0.20970749640364528], 'true,false,false': [0.20970749640364528, nan], 'false': [-5.551115123125783e-17, nan]}, {'': [0.1259106193677802, 7.03662480396226e-17], 'true': [0.00948494618781788, 0.12519096499581348], 'true,false': [3.4604354014290595e-16, 0.2070918367346934], 'true,false,false': [0.2070918367346934, nan], 'false': [7.03662480396226e-17, nan]}, {'': [0.10947454818834805, 3.676235180878002e-17], 'true': [0.0052862887285425415, 0.20265784865275607], 'true,false': [0.20265784865275607, nan], 'false': [3.676235180878002e-17, nan]}, {'': [0.10612300480484026, 9.55030558817339e-18], 'true': [0.005436558980691, 0.10851534603634765], 'true,false': [-6.920870802858119e-17, 0.21323986658375327], 'true,false,false': [0.21323986658375327, nan], 'false': [9.55030558817339e-18, nan]}, {'': [0.10318447267639902, 3.623644594262664e-17], 'true': [0.005518712876055758, 0.1923558282833202], 'true,false': [9.912705577010326e-19, 0.21146776406035586], 'true,false,false': [0.21146776406035586, nan], 'false': [3.623644594262664e-17, nan]}, {'': [0.10316079298495599, -3.6873833308849965e-17], 'true': [0.012470974221156948, 0.10467892675222229], 'true,false': [0.10467892675222229, nan], 'false': [-3.6873833308849965e-17, nan]}, {'': [0.1043942942162969, 3.57400562721797e-17], 'true': [0.0036793287445508927, 0.19923103162968966], 'true,false': [6.938893903907229e-19, 0.20622705095317098], 'true,false,false': [0.20622705095317098, nan], 'false': [3.57400562721797e-17, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995098;  // std dev = 9.54e-07, 154.000 (wgt'ed) examples reached here.  /* #pos=154 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.8581489350995117;  // std dev = 2.46e-07, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | | else return -0.14185106490048763;  // std dev = 8.69e-08, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
%   else return -0.14185106490048796;  // std dev = 0.000, 284.000 (wgt'ed) examples reached here.  /* #neg=284 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109553;  // std dev = 0.000, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | | else return 0.7035315621970047;  // std dev = 0.115, 106.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=104 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 7.45e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.719473412210955;  // std dev = 0.000, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | | else return -0.1254446385283915;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
%   else return -0.12544463852839197;  // std dev = 0.000, 280.000 (wgt'ed) examples reached here.  /* #neg=280 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( actor(B) )
%   | | then return -0.11231637819360638;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else return -0.22472863606195403;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( director(B), actor(A) )
%   | | then return 0.5574640575010379;  // std dev = 0.027, 195.000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | | else return -0.11231637819360621;  // std dev = 7.88e-08, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
%   else return -0.11231637819360693;  // std dev = 0.000, 273.000 (wgt'ed) examples reached here.  /* #neg=273 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.4170035396372746;  // std dev = 0.000, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | | else return 0.41508532812298415;  // std dev = 0.059, 105.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=104 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( actor(B) )
%   | | | then return -0.10159632948783615;  // std dev = 5.67e-08, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
%   | | | else return 0.4170035396372742;  // std dev = 0.000, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   else return -0.10159632948783663;  // std dev = 0.000, 311.000 (wgt'ed) examples reached here.  /* #neg=311 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( actor(B) )
%   | | then return -0.09269127618926097;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else return -0.25961648893321415;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.3230006008319268;  // std dev = 0.023, 154.000 (wgt'ed) examples reached here.  /* #pos=154 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.32036608302468744;  // std dev = 2.98e-08, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | | else return -0.09333142694013696;  // std dev = 0.053, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
%   else return -0.09269127618926044;  // std dev = 1.32e-07, 276.000 (wgt'ed) examples reached here.  /* #neg=276 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.2563562140041311;  // std dev = 0.022, 195.000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.08791765458607169;  // std dev = 0.185, 110.000 (wgt'ed) examples reached here.  /* #neg=110 */
%   else return -0.08518475138839678;  // std dev = 9.42e-08, 259.000 (wgt'ed) examples reached here.  /* #neg=259 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( female(B) )
%   | | then return -0.0785786534442682;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.10523487473802406;  // std dev = 0.050, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( genre(B, E) )
%   | | then return 0.21092392685700492;  // std dev = 0.017, 154.000 (wgt'ed) examples reached here.  /* #pos=154 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.20935590226963802;  // std dev = 2.11e-08, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | | else return -0.07989228783987476;  // std dev = 0.080, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
%   else return -0.07877675473109141;  // std dev = 4.21e-08, 299.000 (wgt'ed) examples reached here.  /* #neg=299 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( actor(A) )
%   | | then return 0.17795172290280162;  // std dev = 0.015, 154.000 (wgt'ed) examples reached here.  /* #pos=154 */
%   | | else return -0.1823163994889067;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(A, E) )
%   | | then return -0.07197580811062392;  // std dev = 0.003, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.1768017305809994;  // std dev = 0.000, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | | else return -0.07389406762360054;  // std dev = 0.061, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
%   else return -0.07324622576333692;  // std dev = 1.04e-07, 284.000 (wgt'ed) examples reached here.  /* #neg=284 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.15320913128281446;  // std dev = 0.014, 195.000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.07147276977099898;  // std dev = 0.161, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
%   else return -0.06842697784420294;  // std dev = 0.000, 289.000 (wgt'ed) examples reached here.  /* #neg=289 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13271531743440182;  // std dev = 0.281, 155.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=154 */
%   | else if ( genre(A, E) )
%   | | then return -0.06296304280635476;  // std dev = 0.003, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.1337525673969001;  // std dev = 0.000, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | | else return -0.06409063531268551;  // std dev = 0.039, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
%   else return -0.06419184008202593;  // std dev = 1.22e-07, 306.000 (wgt'ed) examples reached here.  /* #neg=306 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063387
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.7 seconds
Total inference time: 2.298 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.065028
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.576 seconds
Refined model CLL: -0.065028


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063387
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 11.510000000000002 seconds
Total inference time: 2.298 seconds
AUC ROC: 1.0
Total revision time: 11.510000000000002
Best scored revision CLL: -0.065028


Dataset: 4_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 00:13:07
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063387, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 11.510000000000002, 'Inference time': 2.298, 'parameter_0.6': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.142125, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 2.691, 'Inference time': 1.743}}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995091;  // std dev = 1.08e-06, 213.000 (wgt'ed) examples reached here.  /* #pos=213 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.1298252356775469;  // std dev = 5.851, 173.000 (wgt'ed) examples reached here.  /* #neg=126 #pos=47 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048752;  // std dev = 2.37e-07, 356.000 (wgt'ed) examples reached here.  /* #neg=356 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7000945578362014;  // std dev = 1.868, 218.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=213 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.11327542096295219;  // std dev = 5.851, 173.000 (wgt'ed) examples reached here.  /* #neg=126 #pos=47 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839222;  // std dev = 0.000, 372.000 (wgt'ed) examples reached here.  /* #neg=372 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1203030931976057;  // std dev = 0.108, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( movie(E, A) )
%   | | then return 0.3639841640471562;  // std dev = 0.372, 378.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=260 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360633;  // std dev = 0.000, 375.000 (wgt'ed) examples reached here.  /* #neg=375 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.45706841072840426;  // std dev = 1.334, 217.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=213 */
%   | else if ( genre(A, E) )
%   | | then return -0.10086966201931699;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.06662509357905244;  // std dev = 5.738, 157.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=47 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783602;  // std dev = 9.86e-09, 386.000 (wgt'ed) examples reached here.  /* #neg=386 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09208251190908985;  // std dev = 1.18e-08, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( genre(B, E) )
%   | | then return 0.3590945845548911;  // std dev = 3.72e-07, 213.000 (wgt'ed) examples reached here.  /* #pos=213 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.0452770546875609;  // std dev = 5.776, 162.000 (wgt'ed) examples reached here.  /* #neg=115 #pos=47 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926104;  // std dev = 1.12e-07, 424.000 (wgt'ed) examples reached here.  /* #neg=424 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.28122553792262306;  // std dev = 2.15e-07, 213.000 (wgt'ed) examples reached here.  /* #pos=213 */
%   | else if ( movie(E, A) )
%   | | then return 0.0202051085678305;  // std dev = 0.437, 178.000 (wgt'ed) examples reached here.  /* #neg=131 #pos=47 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.26e-07, 404.000 (wgt'ed) examples reached here.  /* #neg=404 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12348708241356683;  // std dev = 0.315, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( genre(B, E) )
%   | | then return 0.22800400102358492;  // std dev = 1.03e-07, 213.000 (wgt'ed) examples reached here.  /* #pos=213 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.01452121064042707;  // std dev = 5.851, 173.000 (wgt'ed) examples reached here.  /* #neg=126 #pos=47 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109141;  // std dev = 1.21e-07, 400.000 (wgt'ed) examples reached here.  /* #neg=400 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1835341619789453;  // std dev = 0.846, 216.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=213 */
%   | else if ( genre(A, E) )
%   | | then return -0.07699935099979889;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.037529563096496944;  // std dev = 5.746, 158.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=47 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333718;  // std dev = 2.46e-09, 380.000 (wgt'ed) examples reached here.  /* #neg=380 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07170212415652731;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( movie(E, B) )
%   | | then return 0.09607718608048846;  // std dev = 6.011, 382.000 (wgt'ed) examples reached here.  /* #neg=122 #pos=260 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420335;  // std dev = 0.000, 397.000 (wgt'ed) examples reached here.  /* #neg=397 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13788217834953087;  // std dev = 1.152, 219.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=213 */
%   | else if ( genre(A, E) )
%   | | then return -0.06707368566027651;  // std dev = 4.56e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.02534063607888644;  // std dev = 5.893, 180.000 (wgt'ed) examples reached here.  /* #neg=133 #pos=47 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202553;  // std dev = 1.03e-08, 425.000 (wgt'ed) examples reached here.  /* #neg=425 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.134425
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.756 seconds
Total inference time: 1.73 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.978867
   AUC PR    = 0.863873
   CLL	      = -0.130612
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.819231
   F1        = 0.900634


Total scoring time: 2.884 seconds
Parameter learned model CLL: -0.130612


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 15, 0], 'true,false,true': [1.08e-06, 0, 213], 'true,false,false,true': [5.851, 126, 47], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.37e-07, 356, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.868, 5, 213], 'true,false,true': [5.27e-09, 12, 0], 'true,false,false,true': [5.851, 126, 47], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 372, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.108, 14, 0], 'true,false,true': [0.372, 118, 260], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 375, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.334, 4, 213], 'true,false,true': [0.0, 10, 0], 'true,false,false,true': [5.738, 110, 47], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.86e-09, 386, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [1.18e-08, 16, 0], 'true,false,true': [3.72e-07, 0, 213], 'true,false,false,true': [5.776, 115, 47], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.12e-07, 424, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [2.15e-07, 0, 213], 'true,false,true': [0.437, 131, 47], 'true,false,false': [0.0, 0, 0], 'false,true': [1.26e-07, 404, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.315, 13, 0], 'true,false,true': [1.03e-07, 0, 213], 'true,false,false,true': [5.851, 126, 47], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.21e-07, 400, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.846, 3, 213], 'true,false,true': [0.0, 15, 0], 'true,false,false,true': [5.746, 111, 47], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.46e-09, 380, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 13, 0], 'true,false,true': [6.011, 122, 260], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 397, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.152, 6, 213], 'true,false,true': [4.56e-09, 9, 0], 'true,false,false,true': [5.893, 133, 47], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.03e-08, 425, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.22798365681805816, 1.571776416885053e-16], 'true': [-1.4802973661668754e-17, 0.21987167440737027], 'true,false': [5.470845477213917e-15, 0.19786828828226902], 'true,false,false': [0.19786828828226902, nan], 'false': [1.571776416885053e-16, nan]}, {'': [0.18526611885614805, -1.2415397264625405e-16], 'true': [0.015998003866998362, 0.1884902887467701], 'true,false': [2.3129646346357427e-18, 0.19786828828226938], 'true,false,false': [0.19786828828226938, nan], 'false': [-1.2415397264625405e-16, nan]}, {'': [0.14175155895547212, -2.6053233644537006e-17], 'true': [0.0008292390152164189, 0.13859468458381413], 'true,false': [0.13859468458381413, nan], 'false': [-2.6053233644537006e-17, nan]}, {'': [0.1304931199439928, 9.779166538149047e-17], 'true': [0.008204448147557919, 0.1987645637099748], 'true,false': [-4.163336342344337e-18, 0.20974481723396554], 'true,false,false': [0.20974481723396554, nan], 'false': [9.779166538149047e-17, nan]}, {'': [0.1124158131909996, 2.93266459334947e-17], 'true': [8.673617379884035e-18, 0.1131361757405981], 'true,false': [6.504968707662889e-16, 0.2059518366102731], 'true,false,false': [0.2059518366102731, nan], 'false': [2.93266459334947e-17, nan]}, {'': [0.10377040078517903, 3.95723058282234e-17], 'true': [2.1683229025542963e-16, 0.19082989041421097], 'true,false': [0.19082989041421097, nan], 'false': [3.95723058282234e-17, nan]}, {'': [0.09900780749078865, 3.663735981263017e-17], 'true': [0.007627557692416289, 0.09995327465814423], 'true,false': [5.003822082817607e-17, 0.19786828828226843], 'true,false,false': [0.19786828828226843, nan], 'false': [3.663735981263017e-17, nan]}, {'': [0.09318950403206329, 5.843279076974508e-18], 'true': [0.003315883717217418, 0.19189988964400523], 'true,false': [-9.251858538542971e-19, 0.20898093254286132], 'true,false,false': [0.20898093254286132, nan], 'false': [5.843279076974508e-18, nan]}, {'': [0.09236130802504451, -1.1242056823660275e-16], 'true': [-3.2025664171879517e-18, 0.09457804159576923], 'true,false': [0.09457804159576923, nan], 'false': [-1.1242056823660275e-16, nan]}, {'': [0.09519043890921289, 1.0553649457613252e-16], 'true': [0.006054878467888322, 0.18382384224496215], 'true,false': [2.3129646346357427e-18, 0.19293209876543113], 'true,false,false': [0.19293209876543113, nan], 'false': [1.0553649457613252e-16, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995091;  // std dev = 1.08e-06, 213.000 (wgt'ed) examples reached here.  /* #pos=213 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.8581489350995121;  // std dev = 2.06e-07, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | | | else return -0.14185106490048763;  // std dev = 8.43e-08, 110.000 (wgt'ed) examples reached here.  /* #neg=110 */
%   else return -0.1418510649004873;  // std dev = 3.01e-07, 409.000 (wgt'ed) examples reached here.  /* #neg=409 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109543;  // std dev = 2.06e-07, 76.000 (wgt'ed) examples reached here.  /* #pos=76 */
%   | | else return 0.7013680254093984;  // std dev = 0.122, 140.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=137 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( actor(B) )
%   | | | then return -0.12544463852839133;  // std dev = 0.000, 113.000 (wgt'ed) examples reached here.  /* #neg=113 */
%   | | | else return 0.7194734122109548;  // std dev = 0.000, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   else return -0.12544463852839224;  // std dev = 0.000, 397.000 (wgt'ed) examples reached here.  /* #neg=397 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1366719300880099;  // std dev = 0.222, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else if ( director(B), actor(A) )
%   | | then return 0.5577198051335707;  // std dev = 0.036, 260.000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | | else return -0.11711645820856728;  // std dev = 0.252, 120.000 (wgt'ed) examples reached here.  /* #neg=120 */
%   else return -0.11231637819360621;  // std dev = 0.000, 401.000 (wgt'ed) examples reached here.  /* #neg=401 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.4169413657443642;  // std dev = 0.000, 76.000 (wgt'ed) examples reached here.  /* #pos=76 */
%   | | else return 0.4123879404903566;  // std dev = 0.074, 139.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=137 */
%   | else if ( genre(A, E) )
%   | | then return -0.09939475970475957;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.41694136574436375;  // std dev = 0.000, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | | | else return -0.10411554778827435;  // std dev = 0.182, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
%   else return -0.10159632948783595;  // std dev = 2.11e-07, 395.000 (wgt'ed) examples reached here.  /* #neg=395 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( actor(B) )
%   | | then return -0.09084487164494891;  // std dev = 3.73e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else return -0.27592477212573807;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.3235097669506961;  // std dev = 0.035, 213.000 (wgt'ed) examples reached here.  /* #pos=213 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.3203239373594644;  // std dev = 0.000, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | | | else return -0.09291577402653703;  // std dev = 0.098, 118.000 (wgt'ed) examples reached here.  /* #neg=118 */
%   else return -0.09269127618926087;  // std dev = 1.52e-07, 399.000 (wgt'ed) examples reached here.  /* #neg=399 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.2543029235567608;  // std dev = 0.000, 76.000 (wgt'ed) examples reached here.  /* #pos=76 */
%   | | else if ( actor(A) )
%   | | | then return 0.2586236503595924;  // std dev = 0.000, 137.000 (wgt'ed) examples reached here.  /* #pos=137 */
%   | | | else return -0.22431559067276385;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( director(B), actor(A) )
%   | | then return 0.2549075345568882;  // std dev = 0.000, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | | else return -0.08734318830964959;  // std dev = 0.182, 129.000 (wgt'ed) examples reached here.  /* #neg=129 */
%   else return -0.08518475138839678;  // std dev = 1.35e-07, 415.000 (wgt'ed) examples reached here.  /* #neg=415 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( actor(B) )
%   | | then return -0.07716172538159771;  // std dev = 2.63e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else return -0.18770265214315396;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.21110476647951099;  // std dev = 0.021, 213.000 (wgt'ed) examples reached here.  /* #pos=213 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.2095707120727787;  // std dev = 0.000, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | | | else return -0.0801876353678212;  // std dev = 0.148, 123.000 (wgt'ed) examples reached here.  /* #neg=123 */
%   else return -0.07877675473109143;  // std dev = 2.14e-07, 373.000 (wgt'ed) examples reached here.  /* #neg=373 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.17636075614824168;  // std dev = 0.000, 76.000 (wgt'ed) examples reached here.  /* #pos=76 */
%   | | else if ( actor(A) )
%   | | | then return 0.1790403311137124;  // std dev = 1.66e-07, 137.000 (wgt'ed) examples reached here.  /* #pos=137 */
%   | | | else return -0.16074301568732943;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(A, E) )
%   | | then return -0.0718433693078778;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.17695932736179917;  // std dev = 3.94e-08, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | | | else return -0.07565817261938947;  // std dev = 0.160, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
%   else return -0.0732462257633377;  // std dev = 0.000, 377.000 (wgt'ed) examples reached here.  /* #neg=377 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07693411138374444;  // std dev = 0.096, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( actor(A), director(B) )
%   | | then return 0.15333798941745466;  // std dev = 0.015, 260.000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | | else return -0.06920321632048054;  // std dev = 0.107, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
%   else return -0.0684269778442033;  // std dev = 0.000, 384.000 (wgt'ed) examples reached here.  /* #neg=384 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( actor(A) )
%   | | then return 0.13460893143270186;  // std dev = 0.013, 213.000 (wgt'ed) examples reached here.  /* #pos=213 */
%   | | else return -0.1312003307401328;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(A, E) )
%   | | then return -0.06253285230492665;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.13384481954306113;  // std dev = 3.16e-08, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | | | else return -0.0664169750711625;  // std dev = 0.159, 118.000 (wgt'ed) examples reached here.  /* #neg=118 */
%   else return -0.06419184008202555;  // std dev = 2.04e-07, 412.000 (wgt'ed) examples reached here.  /* #neg=412 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063195
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.978 seconds
Total inference time: 1.796 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064679
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.862 seconds
Refined model CLL: -0.064679


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063195
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 12.48 seconds
Total inference time: 1.796 seconds
AUC ROC: 1.0
Total revision time: 12.48
Best scored revision CLL: -0.064679


Dataset: 4_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 00:13:24
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063195, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 12.48, 'Inference time': 1.796, 'parameter_0.8': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.134425, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 2.756, 'Inference time': 1.73}}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048774;  // std dev = 1.49e-08, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995086;  // std dev = 1.08e-06, 267.000 (wgt'ed) examples reached here.  /* #pos=267 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.1531489350995135;  // std dev = 6.449, 200.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048732;  // std dev = 2.53e-07, 463.000 (wgt'ed) examples reached here.  /* #neg=463 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.6978879145643319;  // std dev = 2.207, 274.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=267 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.13644480653453414;  // std dev = 6.436, 198.000 (wgt'ed) examples reached here.  /* #neg=139 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839233;  // std dev = 0.000, 487.000 (wgt'ed) examples reached here.  /* #neg=487 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13905970234968532;  // std dev = 0.238, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | else if ( movie(E, A) )
%   | | then return 0.3362216760414101;  // std dev = 0.383, 497.000 (wgt'ed) examples reached here.  /* #neg=171 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.1123163781936058;  // std dev = 0.000, 507.000 (wgt'ed) examples reached here.  /* #neg=507 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4644981176047328;  // std dev = 1.501, 272.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=267 */
%   | else if ( genre(A, E) )
%   | | then return -0.09918122157890069;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.024962512477398786;  // std dev = 6.603, 226.000 (wgt'ed) examples reached here.  /* #neg=167 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783548;  // std dev = 1.50e-08, 480.000 (wgt'ed) examples reached here.  /* #neg=480 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11985442603590493;  // std dev = 0.311, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else if ( genre(B, E) )
%   | | then return 0.36429824148453466;  // std dev = 6.14e-07, 267.000 (wgt'ed) examples reached here.  /* #pos=267 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.04032117709764312;  // std dev = 6.513, 210.000 (wgt'ed) examples reached here.  /* #neg=151 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926135;  // std dev = 0.000, 478.000 (wgt'ed) examples reached here.  /* #neg=478 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2786740490185524;  // std dev = 0.941, 270.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=267 */
%   | else if ( movie(E, A) )
%   | | then return 0.02970957490479099;  // std dev = 0.440, 219.000 (wgt'ed) examples reached here.  /* #neg=160 #pos=59 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.55e-07, 525.000 (wgt'ed) examples reached here.  /* #neg=525 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09330291928058444;  // std dev = 0.230, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | else if ( genre(B, E) )
%   | | then return 0.23152344117856669;  // std dev = 0.000, 267.000 (wgt'ed) examples reached here.  /* #pos=267 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.019489065392451318;  // std dev = 6.549, 216.000 (wgt'ed) examples reached here.  /* #neg=157 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109202;  // std dev = 1.38e-07, 492.000 (wgt'ed) examples reached here.  /* #neg=492 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18564597363257102;  // std dev = 0.976, 271.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=267 */
%   | else if ( genre(A, E) )
%   | | then return -0.0766340317492917;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.0025455355211047334;  // std dev = 6.608, 227.000 (wgt'ed) examples reached here.  /* #neg=168 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333702;  // std dev = 5.67e-09, 479.000 (wgt'ed) examples reached here.  /* #neg=479 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1565626138704385;  // std dev = 0.585, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else if ( movie(E, B) )
%   | | then return 0.09766505922101085;  // std dev = 6.761, 484.000 (wgt'ed) examples reached here.  /* #neg=158 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420351;  // std dev = 0.000, 478.000 (wgt'ed) examples reached here.  /* #neg=478 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14748937991569822;  // std dev = 0.788, 270.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=267 */
%   | else if ( genre(A, E) )
%   | | then return -0.06167712188533516;  // std dev = 6.97e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.001321901778316106;  // std dev = 6.525, 212.000 (wgt'ed) examples reached here.  /* #neg=153 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202543;  // std dev = 1.09e-08, 469.000 (wgt'ed) examples reached here.  /* #neg=469 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.132843
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.004 seconds
Total inference time: 1.704 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.978388
   AUC PR    = 0.863056
   CLL	      = -0.130428
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.819018
   F1        = 0.900506


Total scoring time: 3.395 seconds
Parameter learned model CLL: -0.130428


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [1.49e-08, 23, 0], 'true,false,true': [1.08e-06, 0, 267], 'true,false,false,true': [6.449, 141, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.53e-07, 463, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [2.207, 7, 267], 'true,false,true': [0.0, 25, 0], 'true,false,false,true': [6.436, 139, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 487, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.238, 25, 0], 'true,false,true': [0.383, 171, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 507, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.501, 5, 267], 'true,false,true': [0.0, 18, 0], 'true,false,false,true': [6.603, 167, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.5e-08, 480, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.311, 20, 0], 'true,false,true': [6.14e-07, 0, 267], 'true,false,false,true': [6.513, 151, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 478, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.941, 3, 267], 'true,false,true': [0.44, 160, 59], 'true,false,false': [0.0, 0, 0], 'false,true': [1.55e-07, 525, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.23, 24, 0], 'true,false,true': [0.0, 0, 267], 'true,false,false,true': [6.549, 157, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.38e-07, 492, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.976, 4, 267], 'true,false,true': [0.0, 14, 0], 'true,false,false,true': [6.608, 168, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.67e-09, 479, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.585, 22, 0], 'true,false,true': [6.761, 158, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 478, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.788, 3, 267], 'true,false,true': [6.97e-09, 15, 0], 'true,false,false,true': [6.525, 153, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.09e-08, 469, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.22267388588088574, 1.3811845835509507e-16], 'true': [9.654113257610057e-18, 0.21076716386429672], 'true,false': [4.364382346990877e-15, 0.2079750000000004], 'true,false,false': [0.2079750000000004, nan], 'false': [1.3811845835509507e-16, nan]}, {'': [0.18254266597451496, -1.3860689917291483e-16], 'true': [0.017772042887169145, 0.1925633111682312], 'true,false': [-4.440892098500626e-18, 0.20918783797571905], 'true,false,false': [0.20918783797571905, nan], 'false': [-1.3860689917291483e-16, nan]}, {'': [0.1501322415254805, -1.7518312025643497e-18], 'true': [0.0022648170585708293, 0.1467516397553763], 'true,false': [0.1467516397553763, nan], 'false': [-1.7518312025643497e-18, nan]}, {'': [0.13953791386776696, 2.238949766327399e-16], 'true': [0.008281916801687713, 0.17973069861171767], 'true,false': [-9.25185853854297e-18, 0.19290860678205252], 'true,false,false': [0.19290860678205252, nan], 'false': [2.238949766327399e-16, nan]}, {'': [0.11488353423044645, -1.3006796941215223e-17], 'true': [0.004827976908254908, 0.11480439049292572], 'true,false': [1.4104406365275398e-15, 0.20201814058956663], 'true,false,false': [0.20201814058956663, nan], 'false': [-1.3006796941215223e-17, nan]}, {'': [0.10385920277612246, 4.567774729886358e-17], 'true': [0.0032780660355196077, 0.19363943081367935], 'true,false': [0.19363943081367935, nan], 'false': [4.567774729886358e-17, nan]}, {'': [0.09766279319918725, 3.8812674844619295e-17], 'true': [0.0022090645270619984, 0.09990161665143023], 'true,false': [-3.991813122247754e-17, 0.19853823731138343], 'true,false,false': [0.19853823731138343, nan], 'false': [3.8812674844619295e-17, nan]}, {'': [0.09608363616362443, 3.1521989843219477e-17], 'true': [0.0035159560610419356, 0.18152643619839642], 'true,false': [-4.956352788505163e-18, 0.1923577014884798], 'true,false,false': [0.1923577014884798, nan], 'false': [3.1521989843219477e-17, nan]}, {'': [0.0936990858667243, -1.2077740016842707e-16], 'true': [0.01554720216440923, 0.09444136987919945], 'true,false': [0.09444136987919945, nan], 'false': [-1.2077740016842707e-16, nan]}, {'': [0.09264321126026592, 1.1883410626051783e-16], 'true': [0.0022998244736129273, 0.18782285429550827], 'true,false': [3.23815048849004e-18, 0.2008499466002133], 'true,false,false': [0.2008499466002133, nan], 'false': [1.1883410626051783e-16, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995086;  // std dev = 1.08e-06, 267.000 (wgt'ed) examples reached here.  /* #pos=267 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.8581489350995125;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.14185106490048807;  // std dev = 0.000, 152.000 (wgt'ed) examples reached here.  /* #neg=152 */
%   else return -0.14185106490048768;  // std dev = 0.000, 497.000 (wgt'ed) examples reached here.  /* #neg=497 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109543;  // std dev = 2.23e-07, 95.000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | | else return 0.7002707292396078;  // std dev = 0.126, 176.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=172 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.7194734122109543;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.1254446385283915;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #neg=178 */
%   else return -0.12544463852839233;  // std dev = 0.000, 481.000 (wgt'ed) examples reached here.  /* #neg=481 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14174918004616577;  // std dev = 0.215, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( director(B), actor(A) )
%   | | then return 0.5578655147417858;  // std dev = 0.043, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | | else return -0.11231637819360617;  // std dev = 1.02e-07, 146.000 (wgt'ed) examples reached here.  /* #neg=146 */
%   else return -0.11231637819360583;  // std dev = 0.000, 495.000 (wgt'ed) examples reached here.  /* #neg=495 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.416905943983288;  // std dev = 5.96e-08, 95.000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | | else return 0.4074437044182769;  // std dev = 0.093, 176.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=172 */
%   | else if ( genre(A, E) )
%   | | then return -0.09894119095433652;  // std dev = 9.13e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.41690594398328773;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.10159632948783641;  // std dev = 0.000, 139.000 (wgt'ed) examples reached here.  /* #neg=139 */
%   else return -0.10159632948783548;  // std dev = 3.29e-07, 481.000 (wgt'ed) examples reached here.  /* #neg=481 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( actor(B) )
%   | | then return -0.09046371394667196;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else return -0.2737088909521603;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.3243406122738045;  // std dev = 0.049, 267.000 (wgt'ed) examples reached here.  /* #pos=267 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.3202999263498402;  // std dev = 1.60e-07, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.09269127618926074;  // std dev = 7.15e-08, 147.000 (wgt'ed) examples reached here.  /* #neg=147 */
%   else return -0.09269127618926146;  // std dev = 0.000, 499.000 (wgt'ed) examples reached here.  /* #neg=499 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.25715004243613404;  // std dev = 0.047, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.08915777105736386;  // std dev = 0.303, 166.000 (wgt'ed) examples reached here.  /* #neg=166 */
%   else return -0.08518475138839678;  // std dev = 1.41e-07, 485.000 (wgt'ed) examples reached here.  /* #neg=485 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( actor(B) )
%   | | then return -0.07673151536894976;  // std dev = 6.45e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else return -0.20771528872894807;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.21159057866389444;  // std dev = 0.037, 267.000 (wgt'ed) examples reached here.  /* #pos=267 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.20918520786349992;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.07848891090291779;  // std dev = 7.30e-08, 145.000 (wgt'ed) examples reached here.  /* #neg=145 */
%   else return -0.07877675473109176;  // std dev = 0.000, 452.000 (wgt'ed) examples reached here.  /* #neg=452 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.17574077420196543;  // std dev = 0.000, 95.000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | | else return 0.1758451889899922;  // std dev = 0.038, 174.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=172 */
%   | else if ( genre(A, E) )
%   | | then return -0.071469059948551;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.17667647646008952;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.07299646461813983;  // std dev = 1.49e-08, 175.000 (wgt'ed) examples reached here.  /* #neg=175 */
%   else return -0.07324622576333699;  // std dev = 1.33e-07, 485.000 (wgt'ed) examples reached here.  /* #neg=485 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.15380187361720787;  // std dev = 0.031, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.0696947770404106;  // std dev = 0.189, 169.000 (wgt'ed) examples reached here.  /* #neg=169 */
%   else return -0.06842697784420353;  // std dev = 0.000, 483.000 (wgt'ed) examples reached here.  /* #neg=483 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( director(A) )
%   | | then return -0.19149620989466226;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.1351055662213575;  // std dev = 0.026, 267.000 (wgt'ed) examples reached here.  /* #pos=267 */
%   | else if ( genre(A, E) )
%   | | then return -0.06264942167361512;  // std dev = 7.45e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.13359873852959053;  // std dev = 5.58e-08, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.06390989058644435;  // std dev = 2.58e-08, 125.000 (wgt'ed) examples reached here.  /* #neg=125 */
%   else return -0.06419184008202536;  // std dev = 2.46e-07, 515.000 (wgt'ed) examples reached here.  /* #neg=515 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.06344
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 4.44 seconds
Total inference time: 1.932 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064837
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.905 seconds
Refined model CLL: -0.064837


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.06344
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 13.744 seconds
Total inference time: 1.932 seconds
AUC ROC: 1.0
Total revision time: 13.744
Best scored revision CLL: -0.064837


Dataset: 4_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 00:13:42
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.06344, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 13.744, 'Inference time': 1.932, 'parameter_1.0': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.132843, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 3.004, 'Inference time': 1.704}}


Starting fold 2

Target train facts examples: 870
Target train pos examples: 324
Target train neg examples: 10813

Target test facts examples: 208
Target test pos	 examples: 58
Target test neg examples: 3423

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995124;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.04862512557570285;  // std dev = 2.545, 42.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=8 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048763;  // std dev = 8.69e-08, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109544;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.05212612991505576;  // std dev = 2.530, 40.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=8 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1254446385283913;  // std dev = 0.000, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( movie(E, A) )
%   | | then return 0.3481320790845118;  // std dev = 0.359, 95.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=64 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360625;  // std dev = 6.50e-08, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4686027592899375;  // std dev = 2.06e-07, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.03902120396374385;  // std dev = 2.582, 48.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=8 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783617;  // std dev = 6.18e-09, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13336667644399183;  // std dev = 0.182, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.3556357392799942;  // std dev = 8.94e-08, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.025472704220078923;  // std dev = 2.571, 46.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=8 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926108;  // std dev = 0.000, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.259991960225128;  // std dev = 0.761, 58.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=56 */
%   | else if ( movie(E, A) )
%   | | then return 0.010313501708967634;  // std dev = 0.398, 40.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=8 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.0851847513883968;  // std dev = 6.14e-08, 113.000 (wgt'ed) examples reached here.  /* #neg=113 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14291646163222896;  // std dev = 0.294, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( genre(B, E) )
%   | | then return 0.22970372535579683;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.01515870960503728;  // std dev = 2.558, 44.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=8 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109158;  // std dev = 5.87e-08, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18309747023258313;  // std dev = 0.480, 57.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=56 */
%   | else if ( genre(A, E) )
%   | | then return -0.07261629553983716;  // std dev = 1.86e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.015936174414903116;  // std dev = 2.513, 38.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=8 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333707;  // std dev = 0.000, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.06787530397751097;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( movie(E, B) )
%   | | then return 0.10685246724690041;  // std dev = 2.597, 93.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=64 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420267;  // std dev = 4.27e-09, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15063381925447872;  // std dev = 6.14e-08, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else if ( genre(A, E) )
%   | | then return -0.06370487464270458;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.004031579510515931;  // std dev = 2.513, 38.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=8 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.107166
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.575 seconds
Total inference time: 1.731 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.984823
   AUC PR    = 0.906054
   CLL	      = -0.111806
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.875
   F1        = 0.933333


Total scoring time: 1.579 seconds
Parameter learned model CLL: -0.111806


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 3, 0], 'true,false,true': [0.0, 0, 56], 'true,false,false,true': [2.545, 34, 8], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.69e-08, 103, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 56], 'true,false,true': [0.0, 5, 0], 'true,false,false,true': [2.53, 32, 8], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 116, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [2.63e-09, 3, 0], 'true,false,true': [0.359, 31, 64], 'true,false,false': [0.0, 0, 0], 'false,true': [6.5e-08, 87, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [2.06e-07, 0, 56], 'true,false,true': [0.0, 4, 0], 'true,false,false,true': [2.582, 40, 8], 'true,false,false,false': [0.0, 0, 0], 'false,true': [6.18e-09, 84, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.182, 5, 0], 'true,false,true': [8.94e-08, 0, 56], 'true,false,false,true': [2.571, 38, 8], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 78, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.761, 2, 56], 'true,false,true': [0.398, 32, 8], 'true,false,false': [0.0, 0, 0], 'false,true': [6.14e-08, 113, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.294, 8, 0], 'true,false,true': [0.0, 0, 56], 'true,false,false,true': [2.558, 36, 8], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.87e-08, 101, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.48, 1, 56], 'true,false,true': [1.86e-09, 5, 0], 'true,false,false,true': [2.513, 30, 8], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 83, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [2.597, 29, 64], 'true,false,false': [0.0, 0, 0], 'false,true': [4.27e-09, 83, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [6.14e-08, 0, 56], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [2.513, 30, 8], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 95, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.23213410449955824, 7.329627735389383e-17], 'true': [0.0, 0.22657226155768362], 'true,false': [-1.2688263138573217e-16, 0.15419501133786864], 'true,false,false': [0.15419501133786864, nan], 'false': [7.329627735389383e-17, nan]}, {'': [0.18137279328221442, -3.828355257328126e-18], 'true': [-1.9032394707859825e-16, 0.14533643237586125], 'true,false': [0.0, 0.15999999999999986], 'true,false,false': [0.15999999999999986, nan], 'false': [-3.828355257328126e-18, nan]}, {'': [0.13095742643263852, 4.8492499926156265e-17], 'true': [2.3129646346357427e-18, 0.1286027369111996], 'true,false': [0.1286027369111996, nan], 'false': [4.8492499926156265e-17, nan]}, {'': [0.12742024219954673, 3.700743415417188e-17], 'true': [7.61295788314393e-16, 0.1284831622643725], 'true,false': [0.0, 0.13888888888888898], 'true,false,false': [0.13888888888888898, nan], 'false': [3.700743415417188e-17, nan]}, {'': [0.10083419228674652, 0.0], 'true': [0.006617952743530236, 0.10075303612678724], 'true,false': [1.427429603089487e-16, 0.1436672967863897], 'true,false,false': [0.1436672967863897, nan], 'false': [0.0, nan]}, {'': [0.08560513300554587, 3.3404940563942766e-17], 'true': [0.00999583173628131, 0.15834391276917942], 'true,false': [0.15834391276917942, nan], 'false': [3.3404940563942766e-17, nan]}, {'': [0.07989929162137756, 3.407615224097015e-17], 'true': [0.010824549966839774, 0.08022810106488473], 'true,false': [-1.030921380009074e-16, 0.14876033057851254], 'true,false,false': [0.14876033057851254, nan], 'false': [3.407615224097015e-17, nan]}, {'': [0.07352702351929191, -6.6880905097900996e-18], 'true': [0.0040422912881298775, 0.14768460787241047], 'true,false': [6.938893903907229e-19, 0.16620498614958426], 'true,false,false': [0.16620498614958426, nan], 'false': [-6.6880905097900996e-18, nan]}, {'': [0.07161090918710852, 1.8726653427412278e-17], 'true': [0.0, 0.0725081962334763], 'true,false': [0.0725081962334763, nan], 'false': [1.8726653427412278e-17, nan]}, {'': [0.07190066482418532, -1.460819769243627e-17], 'true': [6.740639792367021e-17, 0.15806387969432195], 'true,false': [0.0, 0.16620498614958434], 'true,false,false': [0.16620498614958434, nan], 'false': [-1.460819769243627e-17, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995124;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else if ( actor(B) )
%   | | | then return -0.14185106490048774;  // std dev = 1.05e-08, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.14185106490048766;  // std dev = 7.88e-08, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109544;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.7194734122109543;  // std dev = 2.98e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.13000587233017533;  // std dev = 0.153, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   else return -0.12544463852839138;  // std dev = 0.000, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.15071701831329512;  // std dev = 0.094, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( director(B), actor(A) )
%   | | then return 0.5553664367462837;  // std dev = 1.98e-07, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | | else return -0.11535480287318396;  // std dev = 0.141, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   else return -0.11231637819360621;  // std dev = 7.30e-08, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.4175135841583098;  // std dev = 4.71e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0.4027603960619915;  // std dev = 0.094, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | else if ( genre(A, E) )
%   | | then return -0.0981445622644951;  // std dev = 4.56e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( actor(B) )
%   | | | then return -0.10090477152379317;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | | else return 0.4175135841583102;  // std dev = 1.49e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.10159632948783615;  // std dev = 5.96e-08, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.18230375590259154;  // std dev = 0.131, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.32307120120849814;  // std dev = 0.011, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.3207118471601497;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.09852429620920014;  // std dev = 0.221, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.09269127618926097;  // std dev = 4.83e-08, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.2565808122890927;  // std dev = 0.010, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else return -0.09577795328136725;  // std dev = 0.255, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   else return -0.08518475138839682;  // std dev = 5.37e-08, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.2109280211020914;  // std dev = 0.008, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.20952432739178883;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.08351856438610174;  // std dev = 0.196, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   else return -0.07877675473109161;  // std dev = 5.16e-08, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.17637798035044888;  // std dev = 1.49e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0.16897173711804225;  // std dev = 0.061, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | else if ( genre(A, E) )
%   | | then return -0.06951011052319168;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( actor(B) )
%   | | | then return -0.07136307067525968;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | | else return 0.17692529962137915;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.07324622576333707;  // std dev = 0.000, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.06514663087082882;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( director(B), actor(A) )
%   | | then return 0.15409640230089766;  // std dev = 0.011, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | | else if ( female(B) )
%   | | | then return -0.06677607023426332;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return -0.07629085008279653;  // std dev = 0.224, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else return -0.06842697784420265;  // std dev = 4.15e-08, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.13336169222849348;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0.12695742868809803;  // std dev = 0.058, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | else if ( genre(A, E) )
%   | | then return -0.06128966401851431;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( actor(B) )
%   | | | then return -0.06253824716328084;  // std dev = 0.001, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | | else return 0.1337337927831349;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.06419184008202626;  // std dev = 0.000, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063267
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.504 seconds
Total inference time: 1.815 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.066941
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.529 seconds
Refined model CLL: -0.066941


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063267
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 7.186999999999999 seconds
Total inference time: 1.815 seconds
AUC ROC: 1.0
Total revision time: 7.186999999999999
Best scored revision CLL: -0.066941


Dataset: 4_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 00:13:53
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063267, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 7.186999999999999, 'Inference time': 1.815, 'parameter_0.2': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.107166, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 1.575, 'Inference time': 1.731}}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.858148935099511;  // std dev = 5.72e-07, 111.000 (wgt'ed) examples reached here.  /* #pos=111 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.10139217834275562;  // std dev = 3.691, 74.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=18 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048827;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #neg=178 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7119295010436393;  // std dev = 0.841, 112.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=111 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.11808009367176935;  // std dev = 3.618, 66.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=18 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1254446385283915;  // std dev = 0.000, 175.000 (wgt'ed) examples reached here.  /* #neg=175 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13509213339187215;  // std dev = 0.102, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( movie(E, A) )
%   | | then return 0.3721493962406947;  // std dev = 0.357, 182.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=129 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360672;  // std dev = 0.000, 215.000 (wgt'ed) examples reached here.  /* #neg=215 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4585392039497763;  // std dev = 0.665, 112.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=111 */
%   | else if ( genre(A, E) )
%   | | then return -0.09953626542939426;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.010011887767307402;  // std dev = 3.699, 75.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=18 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1015963294878365;  // std dev = 0.000, 185.000 (wgt'ed) examples reached here.  /* #neg=185 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.17841176561736338;  // std dev = 0.293, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( genre(B, E) )
%   | | then return 0.35416822756154853;  // std dev = 0.000, 111.000 (wgt'ed) examples reached here.  /* #pos=111 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.01225374937719009;  // std dev = 3.748, 82.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=18 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926061;  // std dev = 8.43e-08, 177.000 (wgt'ed) examples reached here.  /* #neg=177 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2639334940442266;  // std dev = 0.907, 114.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=111 */
%   | else if ( movie(E, A) )
%   | | then return -0.009278923210746703;  // std dev = 0.393, 90.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=18 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 7.30e-08, 185.000 (wgt'ed) examples reached here.  /* #neg=185 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.2483184479004359;  // std dev = 0.280, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( genre(B, E) )
%   | | then return 0.2281355894308205;  // std dev = 0.000, 111.000 (wgt'ed) examples reached here.  /* #pos=111 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.0029542046710783394;  // std dev = 3.735, 80.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=18 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109147;  // std dev = 7.30e-08, 201.000 (wgt'ed) examples reached here.  /* #neg=201 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.19046302805412882;  // std dev = 0.000, 111.000 (wgt'ed) examples reached here.  /* #pos=111 */
%   | else if ( genre(A, E) )
%   | | then return -0.06077176401830785;  // std dev = 1.86e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.005212486648422215;  // std dev = 3.742, 81.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=18 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0732462257633367;  // std dev = 7.85e-09, 184.000 (wgt'ed) examples reached here.  /* #neg=184 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11640184971334869;  // std dev = 0.204, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( movie(E, B) )
%   | | then return 0.09737215046482885;  // std dev = 3.873, 189.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=129 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420262;  // std dev = 5.67e-09, 187.000 (wgt'ed) examples reached here.  /* #neg=187 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13892081268117767;  // std dev = 0.718, 114.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=111 */
%   | else if ( genre(A, E) )
%   | | then return -0.05141180990849194;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, B) )
%   | | | then return -7.898683609154032E-4;  // std dev = 3.691, 74.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=18 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 185.000 (wgt'ed) examples reached here.  /* #neg=185 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.116299
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.928 seconds
Total inference time: 1.798 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.982836
   AUC PR    = 0.89444
   CLL	      = -0.120474
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.860465
   F1        = 0.925


Total scoring time: 1.948 seconds
Parameter learned model CLL: -0.120474


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 5, 0], 'true,false,true': [5.72e-07, 0, 111], 'true,false,false,true': [3.691, 56, 18], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 178, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.841, 1, 111], 'true,false,true': [0.0, 3, 0], 'true,false,false,true': [3.618, 48, 18], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 175, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.102, 5, 0], 'true,false,true': [0.357, 53, 129], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 215, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.665, 1, 111], 'true,false,true': [0.0, 5, 0], 'true,false,false,true': [3.699, 57, 18], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 185, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.293, 9, 0], 'true,false,true': [0.0, 0, 111], 'true,false,false,true': [3.748, 64, 18], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.43e-08, 177, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.907, 3, 111], 'true,false,true': [0.393, 72, 18], 'true,false,false': [0.0, 0, 0], 'false,true': [7.3e-08, 185, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.28, 8, 0], 'true,false,true': [0.0, 0, 111], 'true,false,false,true': [3.735, 62, 18], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.3e-08, 201, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 111], 'true,false,true': [1.86e-09, 5, 0], 'true,false,false,true': [3.742, 63, 18], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.85e-09, 184, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.204, 4, 0], 'true,false,true': [3.873, 60, 129], 'true,false,false': [0.0, 0, 0], 'false,true': [5.67e-09, 187, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.718, 3, 111], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [3.691, 56, 18], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 185, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.21797783933518441, -1.9709577291098283e-16], 'true': [-2.7755575615628915e-18, 0.21107377647918624], 'true,false': [2.944591517564379e-15, 0.1840759678597511], 'true,false,false': [0.1840759678597511, nan], 'false': [-1.9709577291098283e-16, nan]}, {'': [0.16335580889146553, -1.2688263138573217e-17], 'true': [0.006317076122738019, 0.19218966135706272], 'true,false': [0.0, 0.19834710743801717], 'true,false,false': [0.19834710743801717, nan], 'false': [-1.2688263138573217e-17, nan]}, {'': [0.1307252097177525, -4.7507217797913675e-17], 'true': [0.0020749400994053173, 0.12738003988622298], 'true,false': [0.12738003988622298, nan], 'false': [-4.7507217797913675e-17, nan]}, {'': [0.12424718343999823, -9.121832418541827e-17], 'true': [0.003947736902855865, 0.17170317175012556], 'true,false': [0.0, 0.18240000000000003], 'true,false,false': [0.18240000000000003, nan], 'false': [-9.121832418541827e-17, nan]}, {'': [0.10736803548512742, 4.014365738757628e-17], 'true': [0.009558948007131288, 0.10560002301936407], 'true,false': [-5.12102872619892e-16, 0.17132659131469338], 'true,false,false': [0.17132659131469338, nan], 'false': [4.014365738757628e-17, nan]}, {'': [0.0906192356868171, 2.880578658486893e-17], 'true': [0.007210506006617072, 0.1545568969904484], 'true,false': [0.1545568969904484, nan], 'false': [2.880578658486893e-17, nan]}, {'': [0.08853381897170962, 2.6512788647764932e-17], 'true': [0.00983028448312144, 0.08603558392834507], 'true,false': [-2.2404500677120274e-16, 0.17437500000000036], 'true,false,false': [0.17437500000000036, nan], 'false': [2.6512788647764932e-17, nan]}, {'': [0.08087136313292495, 6.214835409586475e-17], 'true': [-7.201446646217232e-17, 0.16295973059589652], 'true,false': [6.938893903907229e-19, 0.1728395061728389], 'true,false,false': [0.1728395061728389, nan], 'false': [6.214835409586475e-17, nan]}, {'': [0.07885320163709317, 3.2653618371328135e-17], 'true': [0.010445709864546165, 0.07935384300961175], 'true,false': [0.07935384300961175, nan], 'false': [3.2653618371328135e-17, nan]}, {'': [0.07920342909729132, -4.200843876960052e-18], 'true': [0.004516798940877517, 0.17929752514304267], 'true,false': [0.0, 0.184075967859751], 'true,false,false': [0.184075967859751, nan], 'false': [-4.200843876960052e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( genre(B, E) )
%   | | then return 0.858148935099511;  // std dev = 5.72e-07, 111.000 (wgt'ed) examples reached here.  /* #pos=111 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return -0.14185106490048766;  // std dev = 7.30e-08, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
%   else return -0.14185106490048824;  // std dev = 0.000, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( actor(A) )
%   | | then return 0.719473412210955;  // std dev = 0.000, 111.000 (wgt'ed) examples reached here.  /* #pos=111 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.7194734122109542;  // std dev = 7.30e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return -0.12544463852839155;  // std dev = 0.000, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   else return -0.1254446385283917;  // std dev = 0.000, 207.000 (wgt'ed) examples reached here.  /* #neg=207 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( actor(B) )
%   | | then return -0.11231637819360628;  // std dev = 4.47e-08, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | | else return 0.5553664367462834;  // std dev = 4.77e-07, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   else return -0.1123163781936063;  // std dev = 4.71e-08, 162.000 (wgt'ed) examples reached here.  /* #neg=162 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.4175135841583106;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else return 0.4051538243095927;  // std dev = 0.079, 84.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=82 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( actor(B) )
%   | | | then return -0.10159632948783623;  // std dev = 3.80e-08, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | | | else return 0.4175135841583104;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else return -0.10159632948783649;  // std dev = 0.000, 170.000 (wgt'ed) examples reached here.  /* #neg=170 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10140752629191442;  // std dev = 0.048, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.3227054004761671;  // std dev = 0.012, 111.000 (wgt'ed) examples reached here.  /* #pos=111 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.3207118471601496;  // std dev = 2.98e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return -0.09877190744740316;  // std dev = 0.219, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   else return -0.09269127618926062;  // std dev = 8.30e-08, 177.000 (wgt'ed) examples reached here.  /* #neg=177 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2563426536076704;  // std dev = 0.012, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.08538332628095611;  // std dev = 0.048, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   else return -0.08518475138839678;  // std dev = 7.88e-08, 196.000 (wgt'ed) examples reached here.  /* #neg=196 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08717216315123875;  // std dev = 0.057, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( genre(B, E) )
%   | | then return 0.21074987854565186;  // std dev = 0.009, 111.000 (wgt'ed) examples reached here.  /* #pos=111 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.20956377488628822;  // std dev = 3.16e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return -0.08261369520620708;  // std dev = 0.194, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   else return -0.07877675473109147;  // std dev = 7.74e-08, 196.000 (wgt'ed) examples reached here.  /* #neg=196 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17265522338594816;  // std dev = 0.409, 113.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=111 */
%   | else if ( genre(A, E) )
%   | | then return -0.07207983158769259;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( actor(B) )
%   | | | then return -0.07256248702936714;  // std dev = 0.000, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   | | | else return 0.12252537010565996;  // std dev = 0.611, 21.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=18 */
%   else return -0.07324622576333671;  // std dev = 1.04e-07, 175.000 (wgt'ed) examples reached here.  /* #neg=175 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.15478283822915;  // std dev = 0.024, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.07304128488884913;  // std dev = 0.227, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
%   else return -0.06842697784420262;  // std dev = 7.07e-08, 163.000 (wgt'ed) examples reached here.  /* #neg=163 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13027286240177505;  // std dev = 0.364, 113.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=111 */
%   | else if ( genre(A, E) )
%   | | then return -0.06295609595222756;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.14010371032180144;  // std dev = 1.29e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return -0.06583400481459815;  // std dev = 0.148, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   else return -0.06419184008202626;  // std dev = 0.000, 188.000 (wgt'ed) examples reached here.  /* #neg=188 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063296
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.213 seconds
Total inference time: 1.778 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.065412
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.812 seconds
Refined model CLL: -0.065412


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063296
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 8.901 seconds
Total inference time: 1.778 seconds
AUC ROC: 1.0
Total revision time: 8.901
Best scored revision CLL: -0.065412


Dataset: 4_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 00:14:07
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063296, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 8.901, 'Inference time': 1.778, 'parameter_0.4': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.116299, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 1.928, 'Inference time': 1.798}}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995096;  // std dev = 1.02e-06, 164.000 (wgt'ed) examples reached here.  /* #pos=164 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.11676962475468358;  // std dev = 4.716, 116.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=30 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048788;  // std dev = 6.66e-08, 294.000 (wgt'ed) examples reached here.  /* #neg=294 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.70929367665988;  // std dev = 1.188, 166.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=164 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.10648970710324653;  // std dev = 4.702, 114.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=30 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.125444638528392;  // std dev = 0.000, 299.000 (wgt'ed) examples reached here.  /* #neg=299 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1384897070192403;  // std dev = 0.172, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( movie(E, A) )
%   | | then return 0.3517436600337715;  // std dev = 0.369, 286.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=194 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360696;  // std dev = 0.000, 279.000 (wgt'ed) examples reached here.  /* #neg=279 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.45815441426265185;  // std dev = 1.155, 167.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=164 */
%   | else if ( genre(A, E) )
%   | | then return -0.09923215905265781;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.018843373656030178;  // std dev = 4.756, 122.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=30 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783663;  // std dev = 0.000, 311.000 (wgt'ed) examples reached here.  /* #neg=311 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1124527053403105;  // std dev = 0.185, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( genre(B, E) )
%   | | then return 0.3595447310468331;  // std dev = 0.000, 164.000 (wgt'ed) examples reached here.  /* #pos=164 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.03747481437444196;  // std dev = 4.687, 112.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=30 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926044;  // std dev = 1.21e-07, 266.000 (wgt'ed) examples reached here.  /* #neg=266 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.28152990292089386;  // std dev = 0.000, 164.000 (wgt'ed) examples reached here.  /* #pos=164 */
%   | else if ( movie(E, A) )
%   | | then return 0.02674808461126466;  // std dev = 0.429, 119.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=30 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.05e-07, 308.000 (wgt'ed) examples reached here.  /* #neg=308 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09976874732570079;  // std dev = 0.230, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( genre(B, E) )
%   | | then return 0.2282154450392795;  // std dev = 1.69e-07, 164.000 (wgt'ed) examples reached here.  /* #pos=164 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.005967832274049265;  // std dev = 4.750, 121.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=30 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109141;  // std dev = 3.33e-08, 318.000 (wgt'ed) examples reached here.  /* #neg=318 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18460134611264795;  // std dev = 0.691, 166.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=164 */
%   | else if ( genre(A, E) )
%   | | then return -0.07652749507152443;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.022424377969918353;  // std dev = 4.694, 113.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=30 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333696;  // std dev = 5.74e-09, 296.000 (wgt'ed) examples reached here.  /* #neg=296 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1290793165389448;  // std dev = 0.414, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( movie(E, B) )
%   | | then return 0.10308764734639878;  // std dev = 4.855, 278.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=194 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.0684269778442029;  // std dev = 0.000, 279.000 (wgt'ed) examples reached here.  /* #neg=279 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13634886377351377;  // std dev = 1.019, 169.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=164 */
%   | else if ( genre(A, E) )
%   | | then return -0.06320401201736717;  // std dev = 2.63e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.0126543343703183;  // std dev = 4.730, 118.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=30 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202614;  // std dev = 4.37e-09, 266.000 (wgt'ed) examples reached here.  /* #neg=266 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.12322
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.303 seconds
Total inference time: 1.751 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.981192
   AUC PR    = 0.883067
   CLL	      = -0.126998
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.845361
   F1        = 0.916201


Total scoring time: 2.705 seconds
Parameter learned model CLL: -0.126998


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 4, 0], 'true,false,true': [1.02e-06, 0, 164], 'true,false,false,true': [4.716, 86, 30], 'true,false,false,false': [0.0, 0, 0], 'false,true': [6.66e-08, 294, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.188, 2, 164], 'true,false,true': [0.0, 8, 0], 'true,false,false,true': [4.702, 84, 30], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 299, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.172, 13, 0], 'true,false,true': [0.369, 92, 194], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 279, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.155, 3, 164], 'true,false,true': [2.63e-09, 6, 0], 'true,false,false,true': [4.756, 92, 30], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 311, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.185, 9, 0], 'true,false,true': [0.0, 0, 164], 'true,false,false,true': [4.687, 82, 30], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.21e-07, 266, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 164], 'true,false,true': [0.429, 89, 30], 'true,false,false': [0.0, 0, 0], 'false,true': [1.05e-07, 308, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.23, 15, 0], 'true,false,true': [1.69e-07, 0, 164], 'true,false,false,true': [4.75, 91, 30], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.33e-08, 318, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.691, 2, 164], 'true,false,true': [0.0, 13, 0], 'true,false,false,true': [4.694, 83, 30], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.74e-09, 296, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.414, 14, 0], 'true,false,true': [4.855, 84, 194], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 279, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.019, 5, 164], 'true,false,true': [2.63e-09, 10, 0], 'true,false,false,true': [4.73, 88, 30], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.37e-09, 266, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.21647490577266912, 1.5105075164968118e-17], 'true': [0.0, 0.21280612244898464], 'true,false': [6.325563379327721e-15, 0.19173602853745658], 'true,false,false': [0.19173602853745658, nan], 'false': [1.5105075164968118e-17, nan]}, {'': [0.17630471203716125, -8.614439522175128e-17], 'true': [0.008497415302964908, 0.18448681902489844], 'true,false': [0.0, 0.1939058171745158], 'true,false,false': [0.1939058171745158, nan], 'false': [-8.614439522175128e-17, nan]}, {'': [0.14039256180052098, -1.1301194946005178e-16], 'true': [0.0022834771393825436, 0.13622117119858285], 'true,false': [0.13622117119858285, nan], 'false': [-1.1301194946005178e-16, nan]}, {'': [0.13008467479091215, -5.140582493441239e-17], 'true': [0.007982911283673805, 0.17736469271977012], 'true,false': [1.1564823173178713e-18, 0.18543402311206597], 'true,false,false': [0.18543402311206597, nan], 'false': [-5.140582493441239e-17, nan]}, {'': [0.1049714036141118, 5.5093774154331073e-17], 'true': [0.0037825673158014966, 0.10459249242137111], 'true,false': [0.0, 0.19610969387755064], 'true,false,false': [0.19610969387755064, nan], 'false': [5.5093774154331073e-17, nan]}, {'': [0.09331991420784666, 3.604620209821937e-17], 'true': [-6.173923161330138e-16, 0.1843109949591882], 'true,false': [0.1843109949591882, nan], 'false': [3.604620209821937e-17, nan]}, {'': [0.08943990552232921, 3.4912673730350835e-18], 'true': [0.003533034306283707, 0.09123225426454681], 'true,false': [1.7330310628295127e-16, 0.18646267331466426], 'true,false,false': [0.18646267331466426, nan], 'false': [3.4912673730350835e-18, nan]}, {'': [0.08477783104973838, 3.300663046182898e-17], 'true': [0.002873115600529965, 0.175790114077239], 'true,false': [-2.135044278125301e-18, 0.19500352416007624], 'true,false,false': [0.19500352416007624, nan], 'false': [3.300663046182898e-17, nan]}, {'': [0.08377587071296691, -3.820122235269356e-17], 'true': [0.012244600641197497, 0.08479384643829666], 'true,false': [0.08479384643829666, nan], 'false': [-3.820122235269356e-17, nan]}, {'': [0.08464243160327767, 1.8364591384777024e-17], 'true': [0.006144558769620657, 0.17497216992513379], 'true,false': [6.938893903907229e-19, 0.18960068945705316], 'true,false,false': [0.18960068945705316, nan], 'false': [1.8364591384777024e-17, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995096;  // std dev = 1.02e-06, 164.000 (wgt'ed) examples reached here.  /* #pos=164 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.8581489350995117;  // std dev = 1.98e-07, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return -0.14185106490048766;  // std dev = 5.77e-08, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   else return -0.14185106490048802;  // std dev = 0.000, 276.000 (wgt'ed) examples reached here.  /* #neg=276 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109548;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else return 0.7038267816417076;  // std dev = 0.114, 108.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=106 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.7194734122109546;  // std dev = 0.000, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return -0.1254446385283915;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
%   else return -0.1254446385283919;  // std dev = 0.000, 266.000 (wgt'ed) examples reached here.  /* #neg=266 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13480911756471964;  // std dev = 0.174, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( actor(A), director(B) )
%   | | then return 0.5574756569279296;  // std dev = 0.027, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | | else return -0.11231637819360624;  // std dev = 6.23e-08, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
%   else return -0.11231637819360693;  // std dev = 0.000, 271.000 (wgt'ed) examples reached here.  /* #neg=271 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.41569504150030645;  // std dev = 0.620, 165.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=164 */
%   | else if ( genre(A, E) )
%   | | then return -0.09956163467271621;  // std dev = 8.33e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.4170007196849022;  // std dev = 2.98e-08, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return -0.10159632948783615;  // std dev = 6.05e-08, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
%   else return -0.10159632948783663;  // std dev = 0.000, 309.000 (wgt'ed) examples reached here.  /* #neg=309 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( female(B) )
%   | | then return -0.09098503988615303;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return -0.1282783336450622;  // std dev = 0.167, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.3228576389543055;  // std dev = 0.021, 164.000 (wgt'ed) examples reached here.  /* #pos=164 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.32036417145817725;  // std dev = 6.66e-08, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return -0.09269127618926107;  // std dev = 1.05e-08, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
%   else return -0.09269127618926046;  // std dev = 1.10e-07, 257.000 (wgt'ed) examples reached here.  /* #neg=257 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.2547094450426539;  // std dev = 7.88e-08, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else return 0.25292309162427107;  // std dev = 0.049, 107.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=106 */
%   | else if ( actor(B) )
%   | | then return -0.08493806235713314;  // std dev = 0.010, 110.000 (wgt'ed) examples reached here.  /* #neg=110 */
%   | | else if ( actor(A) )
%   | | | then return 0.2549349917962991;  // std dev = 4.71e-08, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return -0.08518475138839687;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.08518475138839678;  // std dev = 1.03e-07, 298.000 (wgt'ed) examples reached here.  /* #neg=298 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( female(B) )
%   | | then return -0.07744424479315705;  // std dev = 1.86e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.11287084539185906;  // std dev = 0.208, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.21130577982893334;  // std dev = 0.018, 164.000 (wgt'ed) examples reached here.  /* #pos=164 */
%   | | else if ( actor(B) )
%   | | | then return -0.07879465905563325;  // std dev = 0.000, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
%   | | | else return 0.20959011092941274;  // std dev = 3.65e-08, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   else return -0.07877675473109143;  // std dev = 5.37e-08, 268.000 (wgt'ed) examples reached here.  /* #neg=268 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( director(A) )
%   | | then return -0.2798180240375854;  // std dev = 5.27e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.17823143476224015;  // std dev = 0.016, 164.000 (wgt'ed) examples reached here.  /* #pos=164 */
%   | else if ( genre(A, E) )
%   | | then return -0.07074172882352406;  // std dev = 0.006, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.17697355789327937;  // std dev = 0.000, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return -0.07351909856394731;  // std dev = 0.022, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
%   else return -0.07324622576333675;  // std dev = 1.21e-07, 243.000 (wgt'ed) examples reached here.  /* #neg=243 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.15345698739650726;  // std dev = 0.015, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else if ( actor(B) )
%   | | then return -0.06810097333563009;  // std dev = 0.014, 119.000 (wgt'ed) examples reached here.  /* #neg=119 */
%   | | else return -0.22702571811708075;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.06842697784420294;  // std dev = 0.000, 289.000 (wgt'ed) examples reached here.  /* #neg=289 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1288691177622914;  // std dev = 0.043, 167.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=164 */
%   | else if ( genre(A, E) )
%   | | then return -0.060410011267924335;  // std dev = 0.006, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.13384070123464464;  // std dev = 0.000, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return -0.06439338573730546;  // std dev = 0.011, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
%   else return -0.064191840082026;  // std dev = 1.06e-07, 291.000 (wgt'ed) examples reached here.  /* #neg=291 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063588
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.811 seconds
Total inference time: 1.883 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.065275
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.441 seconds
Refined model CLL: -0.065275


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063588
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 11.259999999999998 seconds
Total inference time: 1.883 seconds
AUC ROC: 1.0
Total revision time: 11.259999999999998
Best scored revision CLL: -0.065275


Dataset: 4_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 00:14:22
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063588, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 11.259999999999998, 'Inference time': 1.883, 'parameter_0.6': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.12322, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 2.303, 'Inference time': 1.751}}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995091;  // std dev = 1.08e-06, 213.000 (wgt'ed) examples reached here.  /* #pos=213 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.13863673997756093;  // std dev = 5.753, 164.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=46 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048743;  // std dev = 2.72e-07, 377.000 (wgt'ed) examples reached here.  /* #neg=377 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.6925896560510687;  // std dev = 2.200, 220.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=213 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.10478873571419837;  // std dev = 5.817, 174.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=46 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839224;  // std dev = 0.000, 386.000 (wgt'ed) examples reached here.  /* #neg=386 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1273861473500946;  // std dev = 0.178, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else if ( movie(E, A) )
%   | | then return 0.36094417393651707;  // std dev = 0.374, 379.000 (wgt'ed) examples reached here.  /* #neg=120 #pos=259 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360632;  // std dev = 0.000, 380.000 (wgt'ed) examples reached here.  /* #neg=380 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.46275195708743444;  // std dev = 1.159, 216.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=213 */
%   | else if ( genre(A, E) )
%   | | then return -0.10022907826007768;  // std dev = 8.33e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.06452072874445033;  // std dev = 5.688, 155.000 (wgt'ed) examples reached here.  /* #neg=109 #pos=46 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783612;  // std dev = 8.64e-09, 372.000 (wgt'ed) examples reached here.  /* #neg=372 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12398831783946207;  // std dev = 0.308, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else if ( genre(B, E) )
%   | | then return 0.3602141668485657;  // std dev = 3.10e-07, 213.000 (wgt'ed) examples reached here.  /* #pos=213 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.05281781124647722;  // std dev = 5.688, 155.000 (wgt'ed) examples reached here.  /* #neg=109 #pos=46 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0926912761892609;  // std dev = 1.44e-07, 402.000 (wgt'ed) examples reached here.  /* #neg=402 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2719633191530291;  // std dev = 1.077, 217.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=213 */
%   | else if ( movie(E, A) )
%   | | then return 0.03432065959516052;  // std dev = 0.440, 168.000 (wgt'ed) examples reached here.  /* #neg=122 #pos=46 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.19e-07, 352.000 (wgt'ed) examples reached here.  /* #neg=352 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1479033267657763;  // std dev = 0.487, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else if ( genre(B, E) )
%   | | then return 0.2303010305203793;  // std dev = 0.000, 213.000 (wgt'ed) examples reached here.  /* #pos=213 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.032609145781896984;  // std dev = 5.703, 157.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=46 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109141;  // std dev = 1.13e-07, 392.000 (wgt'ed) examples reached here.  /* #neg=392 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18320828956970073;  // std dev = 0.948, 217.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=213 */
%   | else if ( genre(A, E) )
%   | | then return -0.07361221708641238;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.011157833242913624;  // std dev = 5.852, 180.000 (wgt'ed) examples reached here.  /* #neg=134 #pos=46 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333717;  // std dev = 2.63e-09, 375.000 (wgt'ed) examples reached here.  /* #neg=375 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12000972163534207;  // std dev = 0.459, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else if ( movie(E, B) )
%   | | then return 0.09643799354430486;  // std dev = 5.974, 381.000 (wgt'ed) examples reached here.  /* #neg=122 #pos=259 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420328;  // std dev = 0.000, 373.000 (wgt'ed) examples reached here.  /* #neg=373 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1439901210785562;  // std dev = 0.895, 217.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=213 */
%   | else if ( genre(A, E) )
%   | | then return -0.06145048690385208;  // std dev = 2.63e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.032354178708738954;  // std dev = 5.868, 183.000 (wgt'ed) examples reached here.  /* #neg=137 #pos=46 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202568;  // std dev = 9.22e-09, 374.000 (wgt'ed) examples reached here.  /* #neg=374 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.127425
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.597 seconds
Total inference time: 1.762 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.978194
   AUC PR    = 0.865023
   CLL	      = -0.131955
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.822394
   F1        = 0.902542


Total scoring time: 2.864 seconds
Parameter learned model CLL: -0.131955


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 16, 0], 'true,false,true': [1.08e-06, 0, 213], 'true,false,false,true': [5.753, 118, 46], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.72e-07, 377, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [2.2, 7, 213], 'true,false,true': [5.27e-09, 12, 0], 'true,false,false,true': [5.817, 128, 46], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 386, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.178, 22, 0], 'true,false,true': [0.374, 120, 259], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 380, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.159, 3, 213], 'true,false,true': [8.33e-09, 10, 0], 'true,false,false,true': [5.688, 109, 46], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.64e-09, 372, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.308, 18, 0], 'true,false,true': [3.1e-07, 0, 213], 'true,false,false,true': [5.688, 109, 46], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.44e-07, 402, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [1.077, 4, 213], 'true,false,true': [0.44, 122, 46], 'true,false,false': [0.0, 0, 0], 'false,true': [1.19e-07, 352, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.487, 22, 0], 'true,false,true': [0.0, 0, 213], 'true,false,false,true': [5.703, 111, 46], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.13e-07, 392, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.948, 4, 213], 'true,false,true': [0.0, 10, 0], 'true,false,false,true': [5.852, 134, 46], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.63e-09, 375, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.459, 20, 0], 'true,false,true': [5.974, 122, 259], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 373, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.895, 4, 213], 'true,false,true': [2.63e-09, 9, 0], 'true,false,false,true': [5.868, 137, 46], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.22e-09, 374, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.22470847982182174, 1.9554060698968273e-16], 'true': [-6.938893903907228e-18, 0.21503000795052749], 'true,false': [5.470845477213917e-15, 0.20181439619274344], 'true,false,false': [0.20181439619274344, nan], 'false': [1.9554060698968273e-16, nan]}, {'': [0.1868912863980874, -1.2425293954354083e-16], 'true': [0.021991834505896563, 0.18512973842437513], 'true,false': [2.3129646346357427e-18, 0.19447747390672632], 'true,false,false': [0.19447747390672632, nan], 'false': [-1.2425293954354083e-16, nan]}, {'': [0.14438970011839397, -2.337311630789803e-17], 'true': [0.0014382869687223228, 0.139604721058095], 'true,false': [0.139604721058095, nan], 'false': [-2.337311630789803e-17, nan]}, {'': [0.1300104499537351, 7.401486830834377e-17], 'true': [0.006215413737598535, 0.19759613385767552], 'true,false': [6.938893903907228e-18, 0.2086992715920926], 'true,false,false': [0.2086992715920926, nan], 'false': [7.401486830834377e-17, nan]}, {'': [0.11160580932170051, 5.192087776853966e-17], 'true': [0.005262742623738399, 0.11093954528621204], 'true,false': [4.503439874535846e-16, 0.20869927159209103], 'true,false,false': [0.20869927159209103, nan], 'false': [5.192087776853966e-17, nan]}, {'': [0.10122861473903705, 4.0371746350005693e-17], 'true': [0.005345455988532602, 0.19324687583006706], 'true,false': [0.19324687583006706, nan], 'false': [4.0371746350005693e-17, nan]}, {'': [0.09716900262693134, 3.285353848380565e-17], 'true': [0.010768619042692485, 0.09744479392337943], 'true,false': [-2.9188962149769376e-16, 0.2071483630167556], 'true,false,false': [0.2071483630167556, nan], 'false': [3.285353848380565e-17, nan]}, {'': [0.09615957210454588, 7.105427357601002e-18], 'true': [0.004138235196809859, 0.1804284053893278], 'true,false': [0.0, 0.190246913580247], 'true,false,false': [0.190246913580247, nan], 'false': [7.105427357601002e-18, nan]}, {'': [0.09174174419114878, -1.0000936629331169e-16], 'true': [0.010511367777913755, 0.09366916687248147], 'true,false': [0.09366916687248147, nan], 'false': [-1.0000936629331169e-16, nan]}, {'': [0.09403966569397074, 8.489940776545314e-17], 'true': [0.003690284146392329, 0.1793980243175596], 'true,false': [7.709882115452476e-19, 0.18818119382483786], 'true,false,false': [0.18818119382483786, nan], 'false': [8.489940776545314e-17, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995091;  // std dev = 1.08e-06, 213.000 (wgt'ed) examples reached here.  /* #pos=213 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.8581489350995121;  // std dev = 2.06e-07, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | | | else return -0.14185106490048802;  // std dev = 0.000, 143.000 (wgt'ed) examples reached here.  /* #neg=143 */
%   else return -0.14185106490048754;  // std dev = 2.29e-07, 352.000 (wgt'ed) examples reached here.  /* #neg=352 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109541;  // std dev = 2.53e-07, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   | | else return 0.7004151103145794;  // std dev = 0.125, 133.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=130 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.719473412210955;  // std dev = 0.000, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | | | else return -0.12544463852839108;  // std dev = 7.88e-08, 123.000 (wgt'ed) examples reached here.  /* #neg=123 */
%   else return -0.12544463852839222;  // std dev = 0.000, 376.000 (wgt'ed) examples reached here.  /* #neg=376 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( actor(B) )
%   | | then return -0.11231637819360639;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return -0.22418613595902454;  // std dev = 1.05e-08, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( actor(A), director(B) )
%   | | then return 0.5577260374107054;  // std dev = 0.038, 259.000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | | else return -0.11231637819360618;  // std dev = 9.66e-08, 131.000 (wgt'ed) examples reached here.  /* #neg=131 */
%   else return -0.11231637819360611;  // std dev = 0.000, 423.000 (wgt'ed) examples reached here.  /* #neg=423 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.41693985067070427;  // std dev = 0.000, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   | | else if ( actor(A) )
%   | | | then return 0.4215801482114453;  // std dev = 0.000, 130.000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | | | else return -0.1876089468049641;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.41693985067070327;  // std dev = 0.000, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | | | else return -0.10159632948783633;  // std dev = 0.000, 114.000 (wgt'ed) examples reached here.  /* #neg=114 */
%   else return -0.10159632948783595;  // std dev = 2.13e-07, 396.000 (wgt'ed) examples reached here.  /* #neg=396 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10240291439976738;  // std dev = 0.089, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( genre(B, E) )
%   | | then return 0.3222436943401547;  // std dev = 0.022, 213.000 (wgt'ed) examples reached here.  /* #pos=213 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.32032291034724547;  // std dev = 0.000, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | | | else return -0.09269127618926087;  // std dev = 6.83e-08, 117.000 (wgt'ed) examples reached here.  /* #neg=117 */
%   else return -0.09269127618926071;  // std dev = 1.72e-07, 377.000 (wgt'ed) examples reached here.  /* #neg=377 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2559850008690435;  // std dev = 0.021, 259.000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.0864987829509187;  // std dev = 0.107, 131.000 (wgt'ed) examples reached here.  /* #neg=131 */
%   else return -0.08518475138839678;  // std dev = 1.21e-07, 347.000 (wgt'ed) examples reached here.  /* #neg=347 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09478572802113702;  // std dev = 0.099, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( genre(B, E) )
%   | | then return 0.21053511501807076;  // std dev = 0.017, 213.000 (wgt'ed) examples reached here.  /* #pos=213 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.2093916738373773;  // std dev = 8.16e-08, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | | | else return -0.07868144694257855;  // std dev = 5.37e-08, 114.000 (wgt'ed) examples reached here.  /* #neg=114 */
%   else return -0.07877675473109143;  // std dev = 2.14e-07, 376.000 (wgt'ed) examples reached here.  /* #neg=376 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.1763823903467974;  // std dev = 1.07e-07, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   | | else return 0.17387346497380837;  // std dev = 0.037, 132.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=130 */
%   | else if ( genre(A, E) )
%   | | then return -0.07143212137087566;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.1768279768829827;  // std dev = 0.000, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | | | else return -0.0731635403258907;  // std dev = 0.000, 123.000 (wgt'ed) examples reached here.  /* #neg=123 */
%   else return -0.07324622576333771;  // std dev = 0.000, 399.000 (wgt'ed) examples reached here.  /* #neg=399 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.15336476585140055;  // std dev = 0.017, 259.000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.07053443552095917;  // std dev = 0.154, 130.000 (wgt'ed) examples reached here.  /* #neg=130 */
%   else return -0.06842697784420333;  // std dev = 0.000, 390.000 (wgt'ed) examples reached here.  /* #neg=390 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( actor(A) )
%   | | then return 0.13465138672776852;  // std dev = 0.014, 213.000 (wgt'ed) examples reached here.  /* #pos=213 */
%   | | else return -0.13781241272676184;  // std dev = 5.27e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(A, E) )
%   | | then return -0.06256963428745216;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( actor(B) )
%   | | | then return -0.06399727442674227;  // std dev = 0.000, 127.000 (wgt'ed) examples reached here.  /* #neg=127 */
%   | | | else return 0.13375238693268363;  // std dev = 4.34e-08, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   else return -0.06419184008202564;  // std dev = 1.86e-07, 384.000 (wgt'ed) examples reached here.  /* #neg=384 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063441
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 4.472 seconds
Total inference time: 1.84 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064634
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.961 seconds
Refined model CLL: -0.064634


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063441
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 12.894 seconds
Total inference time: 1.84 seconds
AUC ROC: 1.0
Total revision time: 12.894
Best scored revision CLL: -0.064634


Dataset: 4_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 00:14:39
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063441, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 12.894, 'Inference time': 1.84, 'parameter_0.8': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.127425, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 2.597, 'Inference time': 1.762}}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995086;  // std dev = 1.08e-06, 265.000 (wgt'ed) examples reached here.  /* #pos=265 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.15022814302030554;  // std dev = 6.463, 202.000 (wgt'ed) examples reached here.  /* #neg=143 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004875;  // std dev = 1.84e-07, 477.000 (wgt'ed) examples reached here.  /* #neg=477 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.710015374329547;  // std dev = 1.455, 268.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=265 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 7.45e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.11981259481102467;  // std dev = 6.513, 210.000 (wgt'ed) examples reached here.  /* #neg=151 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839233;  // std dev = 0.000, 467.000 (wgt'ed) examples reached here.  /* #neg=467 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13259207823945698;  // std dev = 0.230, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | else if ( movie(E, A) )
%   | | then return 0.3566542385783168;  // std dev = 0.375, 475.000 (wgt'ed) examples reached here.  /* #neg=151 #pos=324 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360593;  // std dev = 0.000, 467.000 (wgt'ed) examples reached here.  /* #neg=467 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.45883793315158916;  // std dev = 1.335, 269.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=265 */
%   | else if ( genre(A, E) )
%   | | then return -0.09976056681542535;  // std dev = 5.27e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.035631295549202115;  // std dev = 6.554, 217.000 (wgt'ed) examples reached here.  /* #neg=158 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783541;  // std dev = 1.55e-08, 495.000 (wgt'ed) examples reached here.  /* #neg=495 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11925938190324313;  // std dev = 0.364, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | else if ( genre(B, E) )
%   | | then return 0.3580916720914512;  // std dev = 6.14e-07, 265.000 (wgt'ed) examples reached here.  /* #pos=265 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.026658669383807104;  // std dev = 6.565, 219.000 (wgt'ed) examples reached here.  /* #neg=160 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926137;  // std dev = 0.000, 483.000 (wgt'ed) examples reached here.  /* #neg=483 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2764677240987749;  // std dev = 0.767, 267.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=265 */
%   | else if ( movie(E, A) )
%   | | then return 0.020056202503472377;  // std dev = 0.428, 234.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=59 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.44e-07, 467.000 (wgt'ed) examples reached here.  /* #neg=467 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13924002160490803;  // std dev = 0.416, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( genre(B, E) )
%   | | then return 0.2282505754110318;  // std dev = 2.63e-07, 265.000 (wgt'ed) examples reached here.  /* #pos=265 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.048054623253828754;  // std dev = 6.429, 197.000 (wgt'ed) examples reached here.  /* #neg=138 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.078776754731092;  // std dev = 1.46e-07, 487.000 (wgt'ed) examples reached here.  /* #neg=487 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1851488115210996;  // std dev = 0.830, 268.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=265 */
%   | else if ( genre(A, E) )
%   | | then return -0.07323059045029867;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.008816383633869482;  // std dev = 6.565, 219.000 (wgt'ed) examples reached here.  /* #neg=160 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333724;  // std dev = 0.000, 443.000 (wgt'ed) examples reached here.  /* #neg=443 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09230883125192922;  // std dev = 0.251, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( movie(E, B) )
%   | | then return 0.10572458998993643;  // std dev = 6.620, 467.000 (wgt'ed) examples reached here.  /* #neg=143 #pos=324 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420354;  // std dev = 0.000, 497.000 (wgt'ed) examples reached here.  /* #neg=497 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14111791476962843;  // std dev = 1.021, 270.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=265 */
%   | else if ( genre(A, E) )
%   | | then return -0.06275944043593298;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.00315087532720509;  // std dev = 6.489, 206.000 (wgt'ed) examples reached here.  /* #neg=147 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202539;  // std dev = 1.11e-08, 489.000 (wgt'ed) examples reached here.  /* #neg=489 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.129678
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.124 seconds
Total inference time: 1.833 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.977686
   AUC PR    = 0.861626
   CLL	      = -0.13407
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.817901
   F1        = 0.89983


Total scoring time: 3.16 seconds
Parameter learned model CLL: -0.13407


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 18, 0], 'true,false,true': [1.08e-06, 0, 265], 'true,false,false,true': [6.463, 143, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.84e-07, 477, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.455, 3, 265], 'true,false,true': [7.45e-09, 15, 0], 'true,false,false,true': [6.513, 151, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 467, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.23, 28, 0], 'true,false,true': [0.375, 151, 324], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 467, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.335, 4, 265], 'true,false,true': [5.27e-09, 15, 0], 'true,false,false,true': [6.554, 158, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.55e-08, 495, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.364, 28, 0], 'true,false,true': [6.14e-07, 0, 265], 'true,false,false,true': [6.565, 160, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 483, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.767, 2, 265], 'true,false,true': [0.428, 175, 59], 'true,false,false': [0.0, 0, 0], 'false,true': [1.44e-07, 467, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.416, 17, 0], 'true,false,true': [2.63e-07, 0, 265], 'true,false,false,true': [6.429, 138, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.46e-07, 487, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.83, 3, 265], 'true,false,true': [0.0, 13, 0], 'true,false,false,true': [6.565, 160, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 443, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.251, 11, 0], 'true,false,true': [6.62, 143, 324], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 497, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.021, 5, 265], 'true,false,true': [0.0, 20, 0], 'true,false,false,true': [6.489, 147, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.11e-08, 489, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.22176214262940014, 7.075635209351103e-17], 'true': [-3.0839528461809902e-18, 0.21244537780447717], 'true,false': [4.397321081685148e-15, 0.20676894422115524], 'true,false,false': [0.20676894422115524, nan], 'false': [7.075635209351103e-17, nan]}, {'': [0.18333300587790688, -1.3503354989016894e-16], 'true': [0.007901812450009897, 0.19229300031503688], 'true,false': [3.7007434154171884e-18, 0.20201814058956669], 'true,false,false': [0.20201814058956669, nan], 'false': [-1.3503354989016894e-16, nan]}, {'': [0.14519595462681772, -7.607523937474306e-18], 'true': [0.0018910784568067893, 0.14031907622424664], 'true,false': [0.14031907622424664, nan], 'false': [-7.607523937474306e-18, nan]}, {'': [0.13620756225876515, 2.4043617826225614e-16], 'true': [0.006622191284246801, 0.18627461993253341], 'true,false': [1.8503717077085942e-18, 0.1979655545881213], 'true,false,false': [0.1979655545881213, nan], 'false': [2.4043617826225614e-16, nan]}, {'': [0.11571525298195455, -1.838878715735249e-17], 'true': [0.004740119543793777, 0.11627386351224608], 'true,false': [1.4210854715202005e-15, 0.1968265882696354], 'true,false,false': [0.1968265882696354, nan], 'false': [-1.838878715735249e-17, nan]}, {'': [0.10303333682656847, 4.4694203132661547e-17], 'true': [0.0022052533407392674, 0.1830420151905928], 'true,false': [0.1830420151905928, nan], 'false': [4.4694203132661547e-17, nan]}, {'': [0.0971970288004056, 4.377059973881521e-17], 'true': [0.010184614481194986, 0.09740055114410966], 'true,false': [2.6142610089286704e-16, 0.2097966966425287], 'true,false,false': [0.2097966966425287, nan], 'false': [4.377059973881521e-17, nan]}, {'': [0.09589592365988225, -1.0024587129798252e-18], 'true': [0.0025730976690238896, 0.18615358322795708], 'true,false': [0.0, 0.1968265882696382], 'true,false,false': [0.1968265882696382, nan], 'false': [-1.0024587129798252e-18, nan]}, {'': [0.0926869380035422, -1.1973431412456416e-16], 'true': [0.005709968058605567, 0.09383315738212913], 'true,false': [0.09383315738212913, nan], 'false': [-1.1973431412456416e-16, nan]}, {'': [0.09227232562451616, 1.2260131560277803e-16], 'true': [0.0038592424254545775, 0.18664219622159697], 'true,false': [-3.469446951953614e-18, 0.2043783579979254], 'true,false,false': [0.2043783579979254, nan], 'false': [1.2260131560277803e-16, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995086;  // std dev = 1.08e-06, 265.000 (wgt'ed) examples reached here.  /* #pos=265 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.8581489350995125;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.14185106490048774;  // std dev = 4.71e-08, 125.000 (wgt'ed) examples reached here.  /* #neg=125 */
%   else return -0.14185106490048752;  // std dev = 1.63e-07, 481.000 (wgt'ed) examples reached here.  /* #neg=481 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109546;  // std dev = 0.000, 102.000 (wgt'ed) examples reached here.  /* #pos=102 */
%   | | else return 0.7092319812929038;  // std dev = 0.092, 165.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=163 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.7194734122109543;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.1254446385283911;  // std dev = 7.88e-08, 138.000 (wgt'ed) examples reached here.  /* #neg=138 */
%   else return -0.12544463852839233;  // std dev = 0.000, 485.000 (wgt'ed) examples reached here.  /* #neg=485 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( actor(B) )
%   | | then return -0.11231637819360636;  // std dev = 1.49e-08, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else return -0.22572335361306425;  // std dev = 7.45e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( director(B), actor(A) )
%   | | then return 0.5566379916693451;  // std dev = 0.023, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | | else return -0.11231637819360632;  // std dev = 8.16e-08, 156.000 (wgt'ed) examples reached here.  /* #neg=156 */
%   else return -0.11231637819360599;  // std dev = 0.000, 448.000 (wgt'ed) examples reached here.  /* #neg=448 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.4172043795713258;  // std dev = 0.000, 102.000 (wgt'ed) examples reached here.  /* #pos=102 */
%   | | else return 0.4123218638479017;  // std dev = 0.067, 165.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=163 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783633;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.4172043795713248;  // std dev = 1.84e-07, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.10159632948783646;  // std dev = 0.000, 156.000 (wgt'ed) examples reached here.  /* #neg=156 */
%   else return -0.10159632948783566;  // std dev = 2.84e-07, 444.000 (wgt'ed) examples reached here.  /* #neg=444 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( actor(B) )
%   | | then return -0.09269127618926093;  // std dev = 1.18e-08, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else return -0.2599899918251807;  // std dev = 7.45e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(B, E) )
%   | | then return 0.32253364287017305;  // std dev = 0.026, 265.000 (wgt'ed) examples reached here.  /* #pos=265 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.32050222978112447;  // std dev = 2.98e-08, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.0926912761892607;  // std dev = 8.69e-08, 157.000 (wgt'ed) examples reached here.  /* #neg=157 */
%   else return -0.09269127618926132;  // std dev = 0.000, 470.000 (wgt'ed) examples reached here.  /* #neg=470 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2564156379409025;  // std dev = 0.023, 265.000 (wgt'ed) examples reached here.  /* #pos=265 */
%   | else if ( actor(A), director(B) )
%   | | then return 0.25502920498564136;  // std dev = 8.43e-08, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | else return -0.0851847513883968;  // std dev = 7.15e-08, 156.000 (wgt'ed) examples reached here.  /* #neg=156 */
%   else return -0.08518475138839678;  // std dev = 1.30e-07, 426.000 (wgt'ed) examples reached here.  /* #neg=426 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( actor(B) )
%   | | then return -0.07877675473109179;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else return -0.2593028934890635;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.2106360593995054;  // std dev = 0.020, 265.000 (wgt'ed) examples reached here.  /* #pos=265 */
%   | | else if ( actor(B) )
%   | | | then return -0.07877675473109151;  // std dev = 8.43e-08, 153.000 (wgt'ed) examples reached here.  /* #neg=153 */
%   | | | else return 0.20965667076727945;  // std dev = 7.88e-08, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   else return -0.07877675473109179;  // std dev = 0.000, 456.000 (wgt'ed) examples reached here.  /* #neg=456 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.17638267898102497;  // std dev = 1.55e-07, 102.000 (wgt'ed) examples reached here.  /* #pos=102 */
%   | | else if ( actor(A) )
%   | | | then return 0.1785905263196997;  // std dev = 1.84e-07, 163.000 (wgt'ed) examples reached here.  /* #pos=163 */
%   | | | else return -0.2126713370397672;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(A, E) )
%   | | then return -0.07324622576333704;  // std dev = 3.73e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( actor(B) )
%   | | | then return -0.07324622576333734;  // std dev = 0.000, 158.000 (wgt'ed) examples reached here.  /* #neg=158 */
%   | | | else return 0.1770223825884916;  // std dev = 1.49e-08, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   else return -0.07324622576333717;  // std dev = 6.99e-08, 454.000 (wgt'ed) examples reached here.  /* #neg=454 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.15313278742208777;  // std dev = 0.014, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.07041746152049613;  // std dev = 0.190, 167.000 (wgt'ed) examples reached here.  /* #neg=167 */
%   else return -0.06842697784420348;  // std dev = 0.000, 460.000 (wgt'ed) examples reached here.  /* #neg=460 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.13347630012029651;  // std dev = 3.65e-08, 102.000 (wgt'ed) examples reached here.  /* #pos=102 */
%   | | else return 0.1312914253104379;  // std dev = 0.033, 165.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=163 */
%   | else if ( genre(A, E) )
%   | | then return -0.0640723729174769;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.133911496432779;  // std dev = 5.96e-08, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.064636944436502;  // std dev = 0.057, 145.000 (wgt'ed) examples reached here.  /* #neg=145 */
%   else return -0.06419184008202537;  // std dev = 2.45e-07, 498.000 (wgt'ed) examples reached here.  /* #neg=498 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063564
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 4.784 seconds
Total inference time: 1.837 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.06526
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 3.439 seconds
Refined model CLL: -0.06526


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063564
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 14.507000000000001 seconds
Total inference time: 1.837 seconds
AUC ROC: 1.0
Total revision time: 14.507000000000001
Best scored revision CLL: -0.06526


Dataset: 4_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 00:14:58
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063564, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 14.507000000000001, 'Inference time': 1.837, 'parameter_1.0': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.129678, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 3.124, 'Inference time': 1.833}}


Starting fold 3

Target train facts examples: 737
Target train pos examples: 204
Target train neg examples: 10693

Target test facts examples: 341
Target test pos	 examples: 178
Target test neg examples: 3543

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995115;  // std dev = 2.60e-07, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.07733493586822972;  // std dev = 1.368, 31.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048766;  // std dev = 6.83e-08, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.719473412210955;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return -0.02158417720177823;  // std dev = 1.333, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839158;  // std dev = 0.000, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.33731409521299516;  // std dev = 0.335, 60.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=40 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360629;  // std dev = 3.94e-08, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.47129748002794736;  // std dev = 4.21e-08, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return -0.09008312469655388;  // std dev = 1.354, 24.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1015963294878362;  // std dev = 5.59e-09, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.35749943313529675;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.060880922796685624;  // std dev = 1.342, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926107;  // std dev = 0.000, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2801468393553552;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | else if ( movie(E, A) )
%   | | then return -0.04171968191333845;  // std dev = 0.314, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839679;  // std dev = 1.67e-08, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12093870862442084;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.2272543292639144;  // std dev = 5.16e-08, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.07058400084442337;  // std dev = 1.359, 26.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109175;  // std dev = 2.11e-08, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18982702302870558;  // std dev = 4.71e-08, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return -0.04794111755306245;  // std dev = 1.348, 22.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333704;  // std dev = 9.31e-10, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10865929799550693;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, B) )
%   | | then return 0.07033626845157366;  // std dev = 1.621, 65.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=40 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420268;  // std dev = 2.95e-09, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15299545885915045;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return -0.07012116473594124;  // std dev = 1.363, 28.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202625;  // std dev = 0.000, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.97199
   AUC PR    = 0.81824
   CLL	      = -0.112661
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total learning time: 1.484 seconds
Total inference time: 1.897 seconds
AUC ROC: 0.97199


Results scoring model
   AUC ROC   = 0.993534
   AUC PR    = 0.965523
   CLL	      = -0.087055
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.95
   F1        = 0.974359


Total scoring time: 1.753 seconds
Parameter learned model CLL: -0.087055


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [2.6e-07, 0, 38], 'true,false,false,true': [1.368, 29, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [6.83e-08, 68, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 38], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.333, 16, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 68, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.335, 20, 40], 'true,false,false': [0.0, 0, 0], 'false,true': [3.94e-08, 56, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [4.21e-08, 0, 38], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.354, 22, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.59e-09, 61, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 38], 'true,false,false,true': [1.342, 18, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 52, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 38], 'true,false,true': [0.314, 16, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [1.67e-08, 58, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [5.16e-08, 0, 38], 'true,false,false,true': [1.359, 24, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.11e-08, 58, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [4.71e-08, 0, 38], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.348, 20, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.31e-10, 56, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [1.621, 25, 40], 'true,false,false': [0.0, 0, 0], 'false,true': [2.95e-09, 65, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 38], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.363, 26, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 61, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.24364629279563216, 6.857259857978908e-17], 'true': [nan, 0.24364629279563216], 'true,false': [1.7763568394002505e-15, 0.060353798126951116], 'true,false,false': [0.060353798126951116, nan], 'false': [6.857259857978908e-17, nan]}, {'': [0.15152593734715603, -3.591898020846095e-17], 'true': [-7.47939721852737e-16, 0.09876543209876538], 'true,false': [nan, 0.09876543209876538], 'true,false,false': [0.09876543209876538, nan], 'false': [-3.591898020846095e-17, nan]}, {'': [0.11242936205892635, 2.7755575615628914e-17], 'true': [nan, 0.11242936205892635], 'true,false': [0.11242936205892635, nan], 'false': [2.7755575615628914e-17, nan]}, {'': [0.10433970080430749, 3.276067941516855e-17], 'true': [4.674623261579606e-17, 0.07638888888888894], 'true,false': [nan, 0.07638888888888894], 'true,false,false': [0.07638888888888894, nan], 'false': [3.276067941516855e-17, nan]}, {'': [0.07148476619610411, -2.135044278125301e-18], 'true': [0.0, 0.07058026542646431], 'true,false': [-1.1686558153949016e-16, 0.09000000000000005], 'true,false,false': [0.09000000000000005, nan], 'false': [-2.135044278125301e-18, nan]}, {'': [0.05434203663739314, 4.785444071660158e-18], 'true': [-3.5059674461847047e-17, 0.09876543209876543], 'true,false': [0.09876543209876543, nan], 'false': [4.785444071660158e-18, nan]}, {'': [0.05025234632537679, 7.656710514656252e-18], 'true': [0.0, 0.05024341430297578], 'true,false': [7.011934892369409e-17, 0.07100591715976333], 'true,false,false': [0.07100591715976333, nan], 'false': [7.656710514656252e-18, nan]}, {'': [0.043431409117723405, 9.912705577010326e-19], 'true': [5.843279076974508e-17, 0.08264462809917346], 'true,false': [nan, 0.08264462809917346], 'true,false,false': [0.08264462809917346, nan], 'false': [9.912705577010326e-19, nan]}, {'': [0.04026774835306619, 9.394194823751325e-18], 'true': [0.0, 0.040401806525280914], 'true,false': [0.040401806525280914, nan], 'false': [9.394194823751325e-18, nan]}, {'': [0.04029808128334901, -2.7300566179307128e-18], 'true': [-1.7529837230923523e-17, 0.0663265306122449], 'true,false': [nan, 0.0663265306122449], 'true,false,false': [0.0663265306122449, nan], 'false': [-2.7300566179307128e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.8581489350995115;  // std dev = 2.60e-07, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | else if ( actor(A), actor(B) )
%   | | then return -0.1418510649004877;  // std dev = 2.11e-08, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | else return 0.2581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   else return -0.14185106490048766;  // std dev = 5.58e-08, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.719473412210955;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | else if ( actor(A), actor(B) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else return 0.49040032115077253;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.12544463852839147;  // std dev = 0.000, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.11231637819360636;  // std dev = 1.49e-08, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else return 0.564650784132845;  // std dev = 0.256, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   else return -0.11231637819360629;  // std dev = 3.80e-08, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.415257412149558;  // std dev = 1.23e-07, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | else if ( actor(A), actor(B) )
%   | | then return -0.10159632948783635;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else return 0.19068442095672872;  // std dev = 0.857, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return -0.10159632948783617;  // std dev = 5.27e-08, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.2742664811163931;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.3191826518696109;  // std dev = 7.60e-08, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else if ( female(B) )
%   | | | then return -0.09269127618926098;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0.028433074840467917;  // std dev = 0.852, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   else return -0.09269127618926107;  // std dev = 0.000, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.25412851768289285;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | else if ( actor(A), actor(B) )
%   | | then return -0.0903633187332219;  // std dev = 0.024, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | else return 0.1716822598064991;  // std dev = 0.790, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return -0.08518475138839679;  // std dev = 1.83e-08, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.2543268868589048;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.2090201700733987;  // std dev = 2.11e-08, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else if ( female(A), actor(B) )
%   | | | then return -0.08300722798786672;  // std dev = 0.013, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return -0.018122614296814974;  // std dev = 0.813, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   else return -0.07877675473109175;  // std dev = 1.97e-08, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1765553537915591;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | else if ( actor(A), actor(B) )
%   | | then return -0.0811523471640744;  // std dev = 0.025, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else return 0.2826130565736545;  // std dev = 0.602, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.07324622576333704;  // std dev = 0.000, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.6591752568003266;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( actor(B) )
%   | | then return -0.07425529912878608;  // std dev = 0.017, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( female(A) )
%   | | | then return 0.17416490679770158;  // std dev = 0.295, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.16408874456622377;  // std dev = 0.300, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   else return -0.06842697784420271;  // std dev = 1.05e-08, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.1311781080224681;  // std dev = 7.45e-09, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.10800606573328722;  // std dev = 0.122, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | else if ( female(B) )
%   | | then return -0.06517342765063684;  // std dev = 0.006, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( female(A), actor(B) )
%   | | | then return -0.07033508080044033;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.06561265965221688;  // std dev = 0.587, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   else return -0.06419184008202625;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */


Results
   AUC ROC   = 0.999728
   AUC PR    = 0.995364
   CLL	      = -0.101289
   Precision = 0.626761 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.770563


Total learning time: 2.146 seconds
Total inference time: 1.682 seconds
AUC ROC: 0.999728


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.069203
   Precision = 0.930233 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.963855


Total scoring time: 1.432 seconds
Refined model CLL: -0.069203


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.999728
   AUC PR    = 0.995364
   CLL	      = -0.101289
   Precision = 0.626761 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.770563


Total learning time: 6.8149999999999995 seconds
Total inference time: 1.682 seconds
AUC ROC: 0.999728
Total revision time: 6.8149999999999995
Best scored revision CLL: -0.069203


Dataset: 4_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 00:15:09
{'AUC ROC': 0.999728, 'AUC PR': 0.995364, 'CLL': -0.101289, 'Precision': [0.626761, 0.5], 'Recall': 1.0, 'F1': 0.770563, 'Learning time': 6.8149999999999995, 'Inference time': 1.682, 'parameter_0.2': {'AUC ROC': 0.97199, 'AUC PR': 0.81824, 'CLL': -0.112661, 'Precision': [1.0, 0.5], 'Recall': 0.724719, 'F1': 0.840391, 'Learning time': 1.484, 'Inference time': 1.897}}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995127;  // std dev = 0.000, 76.000 (wgt'ed) examples reached here.  /* #pos=76 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.022803445852868674;  // std dev = 2.099, 42.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048763;  // std dev = 8.69e-08, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109538;  // std dev = 2.06e-07, 76.000 (wgt'ed) examples reached here.  /* #pos=76 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.04981210732051664;  // std dev = 2.134, 56.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839133;  // std dev = 0.000, 110.000 (wgt'ed) examples reached here.  /* #neg=110 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, A) )
%   | | then return 0.3445443071606184;  // std dev = 0.337, 120.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=81 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360617;  // std dev = 9.31e-08, 122.000 (wgt'ed) examples reached here.  /* #neg=122 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.46069262566964464;  // std dev = 0.673, 77.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=76 */
%   | else if ( genre(A, E) )
%   | | then return -0.1015963294878363;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.03121723726954051;  // std dev = 2.065, 34.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783634;  // std dev = 0.000, 113.000 (wgt'ed) examples reached here.  /* #neg=113 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.35827493905619456;  // std dev = 1.79e-07, 76.000 (wgt'ed) examples reached here.  /* #pos=76 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.06263765763315149;  // std dev = 2.108, 45.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926089;  // std dev = 6.32e-08, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2806712925362666;  // std dev = 0.000, 76.000 (wgt'ed) examples reached here.  /* #pos=76 */
%   | else if ( movie(E, A) )
%   | | then return -0.07749009286357533;  // std dev = 0.278, 59.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.0851847513883968;  // std dev = 6.66e-08, 127.000 (wgt'ed) examples reached here.  /* #neg=127 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07933697663264215;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.22761887013163223;  // std dev = 1.07e-07, 76.000 (wgt'ed) examples reached here.  /* #pos=76 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.035493904639330734;  // std dev = 2.099, 42.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109155;  // std dev = 6.66e-08, 115.000 (wgt'ed) examples reached here.  /* #neg=115 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.19009017001331494;  // std dev = 0.000, 76.000 (wgt'ed) examples reached here.  /* #pos=76 */
%   | else if ( genre(A, E) )
%   | | then return -0.07373199693968328;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.04791977985009369;  // std dev = 2.119, 49.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333707;  // std dev = 0.000, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.06885201322931293;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( movie(E, B) )
%   | | then return 0.08795475036724544;  // std dev = 2.362, 122.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=81 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420265;  // std dev = 4.84e-09, 107.000 (wgt'ed) examples reached here.  /* #neg=107 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15091157004440342;  // std dev = 0.000, 76.000 (wgt'ed) examples reached here.  /* #pos=76 */
%   | else if ( genre(A, E) )
%   | | then return -0.06456671687695816;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.030135783499377948;  // std dev = 2.092, 40.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 130.000 (wgt'ed) examples reached here.  /* #neg=130 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.97199
   AUC PR    = 0.81824
   CLL	      = -0.112104
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total learning time: 1.797 seconds
Total inference time: 2.446 seconds
AUC ROC: 0.97199


Results scoring model
   AUC ROC   = 0.991968
   AUC PR    = 0.951869
   CLL	      = -0.091987
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.938272
   F1        = 0.968153


Total scoring time: 2.063 seconds
Parameter learned model CLL: -0.091987


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 3, 0], 'true,false,true': [0.0, 0, 76], 'true,false,false,true': [2.099, 37, 5], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.69e-08, 103, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [2.06e-07, 0, 76], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [2.134, 51, 5], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 110, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.337, 39, 81], 'true,false,false': [0.0, 0, 0], 'false,true': [9.31e-08, 122, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.673, 1, 76], 'true,false,true': [0.0, 3, 0], 'true,false,false,true': [2.065, 29, 5], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 113, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 4, 0], 'true,false,true': [1.79e-07, 0, 76], 'true,false,false,true': [2.108, 40, 5], 'true,false,false,false': [0.0, 0, 0], 'false,true': [6.32e-08, 109, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 76], 'true,false,true': [0.278, 54, 5], 'true,false,false': [0.0, 0, 0], 'false,true': [6.66e-08, 127, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [1.07e-07, 0, 76], 'true,false,false,true': [2.099, 37, 5], 'true,false,false,false': [0.0, 0, 0], 'false,true': [6.66e-08, 115, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 76], 'true,false,true': [0.0, 6, 0], 'true,false,false,true': [2.119, 44, 5], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 99, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 5, 0], 'true,false,true': [2.362, 41, 81], 'true,false,false': [0.0, 0, 0], 'false,true': [4.84e-09, 107, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 76], 'true,false,true': [2.63e-09, 6, 0], 'true,false,false,true': [2.092, 35, 5], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 130, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.2212963595382845, 7.329627735389383e-17], 'true': [0.0, 0.21523987359954205], 'true,false': [-1.3088945132422897e-15, 0.10487528344671208], 'true,false,false': [0.10487528344671208, nan], 'false': [7.329627735389383e-17, nan]}, {'': [0.18033145961266708, -8.074349270001138e-18], 'true': [5.609547913895527e-16, 0.07870030148399444], 'true,false': [0.0, 0.08131377551020423], 'true,false,false': [0.08131377551020423, nan], 'false': [-8.074349270001138e-18, nan]}, {'': [0.11447316016668335, 7.098147206619854e-17], 'true': [0.0, 0.11370213055797049], 'true,false': [0.11370213055797049, nan], 'false': [7.098147206619854e-17, nan]}, {'': [0.09579202923202128, -1.1789979022568034e-17], 'true': [0.0058903092218076485, 0.11563137015518554], 'true,false': [-1.1564823173178713e-18, 0.12543252595155718], 'true,false,false': [0.12543252595155718, nan], 'false': [-1.1789979022568034e-17, nan]}, {'': [0.07830114121648098, 3.66679164096382e-17], 'true': [0.0, 0.07811558867801559], 'true,false': [4.2071609354216456e-16, 0.0987654320987656], 'true,false,false': [0.0987654320987656, nan], 'false': [3.66679164096382e-17, nan]}, {'': [0.06535043338336433, 3.496765431890257e-17], 'true': [-3.5059674461847047e-17, 0.0773140013430977], 'true,false': [0.0773140013430977, nan], 'false': [3.496765431890257e-17, nan]}, {'': [0.05313078878689459, 3.8616453030440226e-17], 'true': [0.0, 0.05319870305203141], 'true,false': [1.5192525600133721e-16, 0.1048752834467119], 'true,false,false': [0.1048752834467119, nan], 'false': [3.8616453030440226e-17, nan]}, {'': [0.04842710893871242, -6.7286243916676156e-18], 'true': [-9.933574430856664e-17, 0.08169740795114773], 'true,false': [-1.1564823173178713e-18, 0.09162848812994594], 'true,false,false': [0.09162848812994594, nan], 'false': [-6.7286243916676156e-18, nan]}, {'': [0.04484768282039141, 2.490219868318108e-17], 'true': [-6.938893903907229e-19, 0.045717656895134934], 'true,false': [0.045717656895134934, nan], 'false': [2.490219868318108e-17, nan]}, {'': [0.0439970816084097, -1.4518301091252048e-17], 'true': [-2.6294755846385285e-17, 0.09524315567182419], 'true,false': [1.1564823173178713e-18, 0.10937499999999985], 'true,false,false': [0.10937499999999985, nan], 'false': [-1.4518301091252048e-17, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995127;  // std dev = 0.000, 76.000 (wgt'ed) examples reached here.  /* #pos=76 */
%   | | else if ( actor(B) )
%   | | | then return -0.1418510649004877;  // std dev = 3.65e-08, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.14185106490048763;  // std dev = 7.88e-08, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109538;  // std dev = 2.06e-07, 76.000 (wgt'ed) examples reached here.  /* #pos=76 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( actor(B) )
%   | | | then return -0.12544463852839127;  // std dev = 3.94e-08, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.12544463852839127;  // std dev = 0.000, 126.000 (wgt'ed) examples reached here.  /* #neg=126 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( actor(B) )
%   | | then return -0.1123163781936064;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | else return 0.5553664367462836;  // std dev = 3.42e-07, 81.000 (wgt'ed) examples reached here.  /* #pos=81 */
%   else return -0.11231637819360621;  // std dev = 8.16e-08, 111.000 (wgt'ed) examples reached here.  /* #neg=111 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4175135841583105;  // std dev = 0.000, 76.000 (wgt'ed) examples reached here.  /* #pos=76 */
%   | else if ( genre(A, E) )
%   | | then return -0.1015963294878363;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( actor(B) )
%   | | | then return -0.10159632948783624;  // std dev = 3.33e-08, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | | | else return 0.4175135841583102;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.10159632948783637;  // std dev = 0.000, 120.000 (wgt'ed) examples reached here.  /* #neg=120 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.32071184716015005;  // std dev = 0.000, 76.000 (wgt'ed) examples reached here.  /* #pos=76 */
%   | | else if ( actor(B) )
%   | | | then return -0.09269127618926105;  // std dev = 0.000, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
%   | | | else return 0.32071184716014967;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.09269127618926083;  // std dev = 7.30e-08, 122.000 (wgt'ed) examples reached here.  /* #neg=122 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2551722425694895;  // std dev = 0.000, 76.000 (wgt'ed) examples reached here.  /* #pos=76 */
%   | else if ( actor(B) )
%   | | then return -0.08518475138839679;  // std dev = 2.24e-08, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return 0.25517224256948945;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.0851847513883968;  // std dev = 6.41e-08, 120.000 (wgt'ed) examples reached here.  /* #neg=120 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07877675473109177;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.20975771563253573;  // std dev = 0.000, 76.000 (wgt'ed) examples reached here.  /* #pos=76 */
%   | | else if ( actor(B) )
%   | | | then return -0.07877675473109179;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | | | else return 0.20975771563253573;  // std dev = 5.27e-09, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.07877675473109155;  // std dev = 6.75e-08, 118.000 (wgt'ed) examples reached here.  /* #neg=118 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1770964977452772;  // std dev = 2.98e-08, 76.000 (wgt'ed) examples reached here.  /* #pos=76 */
%   | else if ( genre(A, E) )
%   | | then return -0.07324622576333704;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( actor(B) )
%   | | | then return -0.07324622576333704;  // std dev = 1.05e-08, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | | else return 0.17709649774527736;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.07324622576333707;  // std dev = 4.83e-08, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.06842697784420272;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( actor(B) )
%   | | then return -0.06842697784420274;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | else return 0.1527438580936706;  // std dev = 7.74e-08, 81.000 (wgt'ed) examples reached here.  /* #pos=81 */
%   else return -0.06842697784420265;  // std dev = 5.67e-08, 121.000 (wgt'ed) examples reached here.  /* #neg=121 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.13400703000801117;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else return 0.1249807080280156;  // std dev = 0.064, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   | else if ( genre(A, E) )
%   | | then return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( actor(B) )
%   | | | then return -0.06419184008202625;  // std dev = 0.000, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | | | else return 0.13400703000801117;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.06419184008202626;  // std dev = 4.08e-08, 138.000 (wgt'ed) examples reached here.  /* #neg=138 */


Results
   AUC ROC   = 0.989899
   AUC PR    = 0.694359
   CLL	      = -0.098394
   Precision = 0.784141 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.879012


Total learning time: 2.41 seconds
Total inference time: 1.906 seconds
AUC ROC: 0.989899


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063903
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.804 seconds
Refined model CLL: -0.063903


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.989899
   AUC PR    = 0.694359
   CLL	      = -0.098394
   Precision = 0.784141 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.879012


Total learning time: 8.074 seconds
Total inference time: 1.906 seconds
AUC ROC: 0.989899
Total revision time: 8.074
Best scored revision CLL: -0.063903


Dataset: 4_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 00:15:23
{'AUC ROC': 0.989899, 'AUC PR': 0.694359, 'CLL': -0.098394, 'Precision': [0.784141, 0.5], 'Recall': 1.0, 'F1': 0.879012, 'Learning time': 8.074, 'Inference time': 1.906, 'parameter_0.4': {'AUC ROC': 0.97199, 'AUC PR': 0.81824, 'CLL': -0.112104, 'Precision': [1.0, 0.5], 'Recall': 0.724719, 'F1': 0.840391, 'Learning time': 1.797, 'Inference time': 2.446}}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995107;  // std dev = 6.19e-07, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.02894783909403609;  // std dev = 2.492, 62.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048827;  // std dev = 0.000, 176.000 (wgt'ed) examples reached here.  /* #neg=176 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7121896359114779;  // std dev = 0.841, 116.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=115 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.011090935916632474;  // std dev = 2.472, 55.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839166;  // std dev = 0.000, 203.000 (wgt'ed) examples reached here.  /* #neg=203 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( movie(E, A) )
%   | | then return 0.35078625984853923;  // std dev = 0.336, 178.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=122 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360638;  // std dev = 2.11e-08, 169.000 (wgt'ed) examples reached here.  /* #neg=169 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.46975575991677937;  // std dev = 0.000, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.08258467194758398;  // std dev = 2.508, 69.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783652;  // std dev = 0.000, 184.000 (wgt'ed) examples reached here.  /* #neg=184 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.3564328314089236;  // std dev = 0.000, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.055287977217770935;  // std dev = 2.487, 60.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926065;  // std dev = 7.88e-08, 160.000 (wgt'ed) examples reached here.  /* #neg=160 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.27942543530045705;  // std dev = 1.69e-07, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   | else if ( movie(E, A) )
%   | | then return -0.05561388491453972;  // std dev = 0.296, 71.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=7 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 8.30e-08, 213.000 (wgt'ed) examples reached here.  /* #neg=213 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.131767231912647;  // std dev = 0.227, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.2267527115733054;  // std dev = 7.30e-08, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.06084270322223391;  // std dev = 2.516, 73.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109148;  // std dev = 8.16e-08, 180.000 (wgt'ed) examples reached here.  /* #neg=180 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18946479168669814;  // std dev = 0.000, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   | else if ( genre(A, E) )
%   | | then return -0.07167227673284275;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.0459173801589194;  // std dev = 2.506, 68.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0732462257633367;  // std dev = 7.85e-09, 182.000 (wgt'ed) examples reached here.  /* #neg=182 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10216802401541375;  // std dev = 0.263, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( movie(E, B) )
%   | | then return 0.0869078980133093;  // std dev = 2.833, 183.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=122 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420262;  // std dev = 5.74e-09, 192.000 (wgt'ed) examples reached here.  /* #neg=192 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15060494336189323;  // std dev = 6.99e-08, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   | else if ( genre(A, E) )
%   | | then return -0.06093247497347007;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.05953254329244521;  // std dev = 2.518, 74.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 173.000 (wgt'ed) examples reached here.  /* #neg=173 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.97199
   AUC PR    = 0.81824
   CLL	      = -0.111003
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total learning time: 2.314 seconds
Total inference time: 1.99 seconds
AUC ROC: 0.97199


Results scoring model
   AUC ROC   = 0.992652
   AUC PR    = 0.954658
   CLL	      = -0.089979
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.942623
   F1        = 0.970464


Total scoring time: 2.411 seconds
Parameter learned model CLL: -0.089979


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 3, 0], 'true,false,true': [6.19e-07, 0, 115], 'true,false,false,true': [2.492, 55, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 176, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.841, 1, 115], 'true,false,true': [0.0, 4, 0], 'true,false,false,true': [2.472, 48, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 203, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 6, 0], 'true,false,true': [0.336, 56, 122], 'true,false,false': [0.0, 0, 0], 'false,true': [2.11e-08, 169, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 115], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [2.508, 62, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 184, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 5, 0], 'true,false,true': [0.0, 0, 115], 'true,false,false,true': [2.487, 53, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.88e-08, 160, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [1.69e-07, 0, 115], 'true,false,true': [0.296, 64, 7], 'true,false,false': [0.0, 0, 0], 'false,true': [8.3e-08, 213, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.227, 5, 0], 'true,false,true': [7.3e-08, 0, 115], 'true,false,false,true': [2.516, 66, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.16e-08, 180, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 115], 'true,false,true': [0.0, 5, 0], 'true,false,false,true': [2.506, 61, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.85e-09, 182, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.263, 8, 0], 'true,false,true': [2.833, 61, 122], 'true,false,false': [0.0, 0, 0], 'false,true': [5.74e-09, 192, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [6.99e-08, 0, 115], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [2.518, 67, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 173, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.21839506172839912, -1.8924256101565169e-16], 'true': [0.0, 0.21417855660889676], 'true,false': [3.3364615418300357e-15, 0.10015608740894924], 'true,false,false': [0.10015608740894924, nan], 'false': [-1.8924256101565169e-16, nan]}, {'': [0.15866049804219004, -3.500210520985715e-17], 'true': [0.006101140675793815, 0.10437036853851966], 'true,false': [0.0, 0.111074380165289], 'true,false,false': [0.111074380165289, nan], 'false': [-3.500210520985715e-17, nan]}, {'': [0.11579366607681588, 2.6277468038465243e-18], 'true': [0.0, 0.11270343031590417], 'true,false': [0.11270343031590417, nan], 'false': [2.6277468038465243e-18, nan]}, {'': [0.10582902911883552, -8.688701931849052e-17], 'true': [-9.267948727305654e-17, 0.08986016217304289], 'true,false': [0.0, 0.09115731989077902], 'true,false,false': [0.09115731989077902, nan], 'false': [-8.688701931849052e-17, nan]}, {'': [0.07404478815478287, 3.8857805861880476e-17], 'true': [0.0, 0.0735258808392242], 'true,false': [-4.788440175774588e-16, 0.10305555555555537], 'true,false,false': [0.10305555555555537, nan], 'false': [3.8857805861880476e-17, nan]}, {'': [0.059926249708462116, 3.2316350951530376e-17], 'true': [2.4714529939481746e-16, 0.08758717962199544], 'true,false': [0.08758717962199544, nan], 'false': [3.2316350951530376e-17, nan]}, {'': [0.05373364836852104, 3.700743415417188e-17], 'true': [0.010329707130825228, 0.05330941867080545], 'true,false': [4.633974363652827e-17, 0.08669544004503645], 'true,false,false': [0.08669544004503645, nan], 'false': [3.700743415417188e-17, nan]}, {'': [0.04677543408230365, 6.161127774018726e-17], 'true': [-1.0040277787914459e-16, 0.08606165994008055], 'true,false': [-6.938893903907229e-19, 0.09234429065743915], 'true,false,false': [0.09234429065743915, nan], 'false': [6.161127774018726e-17, nan]}, {'': [0.04382500069205001, 3.2959746043559335e-17], 'true': [0.008634162010538063, 0.04386602819822425], 'true,false': [0.04386602819822425, nan], 'false': [3.2959746043559335e-17, nan]}, {'': [0.04376530086871237, -5.775726717703127e-18], 'true': [4.247809833348425e-17, 0.08339265334615037], 'true,false': [0.0, 0.0856464572680788], 'true,false,false': [0.0856464572680788, nan], 'false': [-5.775726717703127e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995107;  // std dev = 6.19e-07, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   | | else if ( actor(B) )
%   | | | then return -0.14185106490048768;  // std dev = 5.37e-08, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.14185106490048818;  // std dev = 0.000, 163.000 (wgt'ed) examples reached here.  /* #neg=163 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109551;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | else return 0.7085004505130403;  // std dev = 0.096, 77.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=76 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( actor(B) )
%   | | | then return -0.12544463852839155;  // std dev = 0.000, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | | | else return 0.7194734122109543;  // std dev = 2.11e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.12544463852839155;  // std dev = 0.000, 181.000 (wgt'ed) examples reached here.  /* #neg=181 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( actor(B) )
%   | | then return -0.11231637819360629;  // std dev = 3.94e-08, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | | else return 0.5570533446526409;  // std dev = 0.014, 122.000 (wgt'ed) examples reached here.  /* #pos=122 */
%   else return -0.11231637819360667;  // std dev = 0.000, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4188680711293316;  // std dev = 0.014, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783627;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( actor(B) )
%   | | | then return -0.10159632948783621;  // std dev = 4.21e-08, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | | | else return 0.41710339209222014;  // std dev = 2.11e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.10159632948783652;  // std dev = 0.000, 198.000 (wgt'ed) examples reached here.  /* #neg=198 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926098;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.32163082842066415;  // std dev = 0.012, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   | | else if ( actor(B) )
%   | | | then return -0.09269127618926107;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | | | else return 0.32043377095211995;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.09269127618926062;  // std dev = 8.30e-08, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.25579954765215185;  // std dev = 0.011, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   | else if ( actor(B) )
%   | | then return -0.08518475138839679;  // std dev = 2.11e-08, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
%   | | else return 0.25498248816065416;  // std dev = 7.45e-09, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.08518475138839678;  // std dev = 6.32e-08, 157.000 (wgt'ed) examples reached here.  /* #neg=157 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07877675473109177;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.21020094097489153;  // std dev = 0.009, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   | | else if ( actor(B) )
%   | | | then return -0.07877675473109177;  // std dev = 1.05e-08, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   | | | else return 0.20962366676832028;  // std dev = 1.05e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.07877675473109151;  // std dev = 7.45e-08, 142.000 (wgt'ed) examples reached here.  /* #neg=142 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17742164309397562;  // std dev = 0.008, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   | else if ( genre(A, E) )
%   | | then return -0.07324622576333704;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( actor(B) )
%   | | | then return -0.07324622576333704;  // std dev = 0.000, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   | | | else return 0.17699817302601972;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.07324622576333677;  // std dev = 8.82e-08, 161.000 (wgt'ed) examples reached here.  /* #neg=161 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06842697784420268;  // std dev = 2.58e-08, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   | else return 0.15297211935479163;  // std dev = 0.007, 122.000 (wgt'ed) examples reached here.  /* #pos=122 */
%   else return -0.06842697784420262;  // std dev = 8.16e-08, 199.000 (wgt'ed) examples reached here.  /* #neg=199 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.13336029871639057;  // std dev = 1.83e-08, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | else return 0.12157358272093;  // std dev = 0.081, 78.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=76 */
%   | else if ( genre(A, E) )
%   | | then return -0.0641918400820262;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( actor(B) )
%   | | | then return -0.06419184008202625;  // std dev = 0.000, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | | | else return 0.13391366430527518;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.06419184008202626;  // std dev = 0.000, 147.000 (wgt'ed) examples reached here.  /* #neg=147 */


Results
   AUC ROC   = 0.991725
   AUC PR    = 0.81335
   CLL	      = -0.099632
   Precision = 0.784141 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.879012


Total learning time: 2.566 seconds
Total inference time: 1.955 seconds
AUC ROC: 0.991725


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.06392
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.606 seconds
Refined model CLL: -0.06392


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.991725
   AUC PR    = 0.81335
   CLL	      = -0.099632
   Precision = 0.784141 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.879012


Total learning time: 9.896999999999998 seconds
Total inference time: 1.955 seconds
AUC ROC: 0.991725
Total revision time: 9.896999999999998
Best scored revision CLL: -0.06392


Dataset: 4_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 00:15:37
{'AUC ROC': 0.991725, 'AUC PR': 0.81335, 'CLL': -0.099632, 'Precision': [0.784141, 0.5], 'Recall': 1.0, 'F1': 0.879012, 'Learning time': 9.896999999999998, 'Inference time': 1.955, 'parameter_0.6': {'AUC ROC': 0.97199, 'AUC PR': 0.81824, 'CLL': -0.111003, 'Precision': [1.0, 0.5], 'Recall': 0.724719, 'F1': 0.840391, 'Learning time': 2.314, 'Inference time': 1.99}}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995098;  // std dev = 9.54e-07, 154.000 (wgt'ed) examples reached here.  /* #pos=154 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.04294996599938877;  // std dev = 2.848, 91.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048813;  // std dev = 0.000, 262.000 (wgt'ed) examples reached here.  /* #neg=262 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109563;  // std dev = 0.000, 154.000 (wgt'ed) examples reached here.  /* #pos=154 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.050988492988602786;  // std dev = 2.869, 105.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839166;  // std dev = 0.000, 203.000 (wgt'ed) examples reached here.  /* #neg=203 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12877379538775874;  // std dev = 0.107, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( movie(E, A) )
%   | | then return 0.34699154183269904;  // std dev = 0.334, 240.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=163 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.1123163781936068;  // std dev = 0.000, 232.000 (wgt'ed) examples reached here.  /* #neg=232 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4559969265379171;  // std dev = 1.157, 157.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=154 */
%   | else if ( genre(A, E) )
%   | | then return -0.1001040051088255;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.09658029727389944;  // std dev = 2.879, 114.000 (wgt'ed) examples reached here.  /* #neg=105 #pos=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783656;  // std dev = 0.000, 226.000 (wgt'ed) examples reached here.  /* #neg=226 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.15764266451160808;  // std dev = 0.229, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.35879205709885453;  // std dev = 2.46e-07, 154.000 (wgt'ed) examples reached here.  /* #pos=154 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.049485685151409234;  // std dev = 2.826, 80.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0926912761892605;  // std dev = 1.23e-07, 249.000 (wgt'ed) examples reached here.  /* #neg=249 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2810209752783639;  // std dev = 0.000, 154.000 (wgt'ed) examples reached here.  /* #pos=154 */
%   | else if ( movie(E, A) )
%   | | then return -0.06791634932824576;  // std dev = 0.274, 109.000 (wgt'ed) examples reached here.  /* #neg=100 #pos=9 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 8.56e-08, 229.000 (wgt'ed) examples reached here.  /* #neg=229 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10456692097941941;  // std dev = 0.226, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( genre(B, E) )
%   | | then return 0.22786186978919754;  // std dev = 0.000, 154.000 (wgt'ed) examples reached here.  /* #pos=154 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.04884790917794983;  // std dev = 2.849, 92.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109147;  // std dev = 7.30e-08, 199.000 (wgt'ed) examples reached here.  /* #neg=199 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1902655359185284;  // std dev = 1.46e-07, 154.000 (wgt'ed) examples reached here.  /* #pos=154 */
%   | else if ( genre(A, E) )
%   | | then return -0.06746489309109827;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.04592821824614987;  // std dev = 2.854, 95.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333677;  // std dev = 7.62e-09, 247.000 (wgt'ed) examples reached here.  /* #neg=247 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.06334231283937458;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( movie(E, B) )
%   | | then return 0.09829121439974312;  // std dev = 3.139, 235.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=163 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420267;  // std dev = 4.17e-09, 240.000 (wgt'ed) examples reached here.  /* #neg=240 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1497144440074969;  // std dev = 0.000, 154.000 (wgt'ed) examples reached here.  /* #pos=154 */
%   | else if ( genre(A, E) )
%   | | then return -0.05968654610314641;  // std dev = 1.86e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.03997163649289036;  // std dev = 2.835, 84.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202626;  // std dev = 9.31e-10, 231.000 (wgt'ed) examples reached here.  /* #neg=231 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.97199
   AUC PR    = 0.81824
   CLL	      = -0.11039
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total learning time: 2.531 seconds
Total inference time: 1.806 seconds
AUC ROC: 0.97199


Results scoring model
   AUC ROC   = 0.992893
   AUC PR    = 0.955898
   CLL	      = -0.088843
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.944785
   F1        = 0.971609


Total scoring time: 2.395 seconds
Parameter learned model CLL: -0.088843


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 7, 0], 'true,false,true': [9.54e-07, 0, 154], 'true,false,false,true': [2.848, 82, 9], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 262, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 154], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [2.869, 96, 9], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 203, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.107, 7, 0], 'true,false,true': [0.334, 77, 163], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 232, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.157, 3, 154], 'true,false,true': [0.0, 3, 0], 'true,false,false,true': [2.879, 105, 9], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 226, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.229, 6, 0], 'true,false,true': [2.46e-07, 0, 154], 'true,false,false,true': [2.826, 71, 9], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.23e-07, 249, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 154], 'true,false,true': [0.274, 100, 9], 'true,false,false': [0.0, 0, 0], 'false,true': [8.56e-08, 229, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.226, 8, 0], 'true,false,true': [0.0, 0, 154], 'true,false,false,true': [2.849, 83, 9], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.3e-08, 199, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [1.46e-07, 0, 154], 'true,false,true': [2.63e-09, 7, 0], 'true,false,false,true': [2.854, 86, 9], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.62e-09, 247, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 5, 0], 'true,false,true': [3.139, 72, 163], 'true,false,false': [0.0, 0, 0], 'false,true': [4.17e-09, 240, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 154], 'true,false,true': [1.86e-09, 5, 0], 'true,false,false,true': [2.835, 75, 9], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.31e-10, 231, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.22844230284706993, -8.474984920802722e-17], 'true': [-7.93016446160826e-18, 0.2226738858808883], 'true,false': [5.905809751772262e-15, 0.08911967153725407], 'true,false,false': [0.08911967153725407, nan], 'false': [-8.474984920802722e-17, nan]}, {'': [0.1756785292386411, -3.500210520985715e-17], 'true': [-2.5837917664003644e-15, 0.07700422076643867], 'true,false': [0.0, 0.07836734693877538], 'true,false,false': [0.07836734693877538, nan], 'false': [-3.500210520985715e-17, nan]}, {'': [0.11445191763494551, -6.508203937457814e-17], 'true': [0.0016250794842142913, 0.11132784781230337], 'true,false': [0.11132784781230337, nan], 'false': [-6.508203937457814e-17, nan]}, {'': [0.10987370031278262, -7.663486364669222e-17], 'true': [0.008528946437624413, 0.0708505126379877], 'true,false': [0.0, 0.07271468144044323], 'true,false,false': [0.07271468144044323, nan], 'false': [-7.663486364669222e-17, nan]}, {'': [0.07352955161292704, 6.063868728876357e-17], 'true': [0.008765488662613938, 0.07163972179386974], 'true,false': [3.921826788286267e-16, 0.0998437499999997], 'true,false,false': [0.0998437499999997, nan], 'false': [6.063868728876357e-17, nan]}, {'': [0.06075283832618965, 3.199769415950233e-17], 'true': [-4.613913868572079e-16, 0.07529200008771396], 'true,false': [0.07529200008771396, nan], 'false': [3.199769415950233e-17, nan]}, {'': [0.051128554216384466, 2.6779248835179654e-17], 'true': [0.00639201840773242, 0.050932525993808334], 'true,false': [-4.0371746350005693e-17, 0.08825614366729685], 'true,false,false': [0.08825614366729685, nan], 'false': [2.6779248835179654e-17, nan]}, {'': [0.04537676780917763, 5.843279076974508e-17], 'true': [1.3841741605716237e-16, 0.07990580784400377], 'true,false': [9.912705577010326e-19, 0.0857617728531857], 'true,false,false': [0.0857617728531857, nan], 'false': [5.843279076974508e-17, nan]}, {'': [0.041580170658128225, 1.6653345369377347e-17], 'true': [0.0, 0.04192057603338774], 'true,false': [0.04192057603338774, nan], 'false': [1.6653345369377347e-17, nan]}, {'': [0.041525734889870304, 4.806160279762582e-19], 'true': [-1.4418480839287746e-17, 0.09030953365056993], 'true,false': [6.938893903907229e-19, 0.09566326530612218], 'true,false,false': [0.09566326530612218, nan], 'false': [4.806160279762582e-19, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995098;  // std dev = 9.54e-07, 154.000 (wgt'ed) examples reached here.  /* #pos=154 */
%   | | else if ( actor(B) )
%   | | | then return -0.14185106490048763;  // std dev = 8.30e-08, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.1418510649004884;  // std dev = 0.000, 234.000 (wgt'ed) examples reached here.  /* #neg=234 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109563;  // std dev = 0.000, 154.000 (wgt'ed) examples reached here.  /* #pos=154 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( actor(B) )
%   | | | then return -0.1254446385283915;  // std dev = 0.000, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
%   | | | else return 0.7194734122109543;  // std dev = 2.98e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.12544463852839177;  // std dev = 0.000, 228.000 (wgt'ed) examples reached here.  /* #neg=228 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14111685828337303;  // std dev = 0.100, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( actor(B) )
%   | | then return -0.11231637819360621;  // std dev = 7.45e-08, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
%   | | else return 0.5553664367462833;  // std dev = 5.53e-07, 163.000 (wgt'ed) examples reached here.  /* #pos=163 */
%   else return -0.11231637819360682;  // std dev = 0.000, 242.000 (wgt'ed) examples reached here.  /* #neg=242 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.41751358415830886;  // std dev = 4.66e-07, 154.000 (wgt'ed) examples reached here.  /* #pos=154 */
%   | else if ( genre(A, E) )
%   | | then return -0.09899757789545373;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( actor(B) )
%   | | | then return -0.10159632948783617;  // std dev = 5.05e-08, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   | | | else return 0.41751358415831025;  // std dev = 2.11e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.10159632948783658;  // std dev = 0.000, 245.000 (wgt'ed) examples reached here.  /* #neg=245 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09051111305985;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(B, E) )
%   | | then return 0.3207118471601497;  // std dev = 2.92e-07, 154.000 (wgt'ed) examples reached here.  /* #pos=154 */
%   | | else if ( actor(B) )
%   | | | then return -0.09269127618926108;  // std dev = 0.000, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
%   | | | else return 0.3207118471601498;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.0926912761892605;  // std dev = 6.83e-08, 221.000 (wgt'ed) examples reached here.  /* #neg=221 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.25517224256949045;  // std dev = 0.000, 154.000 (wgt'ed) examples reached here.  /* #pos=154 */
%   | else if ( actor(B) )
%   | | then return -0.08507572770563675;  // std dev = 0.004, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
%   | | else return 0.25517224256948956;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.08518475138839678;  // std dev = 9.06e-08, 250.000 (wgt'ed) examples reached here.  /* #neg=250 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07705878435316747;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.2097577156325352;  // std dev = 2.51e-07, 154.000 (wgt'ed) examples reached here.  /* #pos=154 */
%   | | else if ( actor(B) )
%   | | | then return -0.07878466704968813;  // std dev = 2.79e-08, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
%   | | | else return 0.20975771563253587;  // std dev = 7.45e-09, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.07877675473109143;  // std dev = 6.32e-08, 242.000 (wgt'ed) examples reached here.  /* #neg=242 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17403343506502647;  // std dev = 0.473, 155.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=154 */
%   | else if ( genre(A, E) )
%   | | then return -0.07175382795339923;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( actor(B) )
%   | | | then return -0.07325308962187284;  // std dev = 1.83e-08, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
%   | | | else return 0.17709649774527736;  // std dev = 7.45e-09, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.07324622576333681;  // std dev = 1.17e-07, 255.000 (wgt'ed) examples reached here.  /* #neg=255 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.06711905579676536;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( actor(B) )
%   | | then return -0.06843298587004677;  // std dev = 2.24e-08, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
%   | | else return 0.15311877008653266;  // std dev = 0.001, 163.000 (wgt'ed) examples reached here.  /* #pos=163 */
%   else return -0.06842697784420272;  // std dev = 0.000, 250.000 (wgt'ed) examples reached here.  /* #neg=250 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.13431929463109338;  // std dev = 0.000, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   | | else return 0.12513097873569745;  // std dev = 0.064, 99.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=97 */
%   | else if ( genre(A, E) )
%   | | then return -0.06303660366672359;  // std dev = 1.86e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( actor(B) )
%   | | | then return -0.06419714094152126;  // std dev = 0.000, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
%   | | | else return 0.13396352776112286;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.06419184008202625;  // std dev = 2.11e-08, 236.000 (wgt'ed) examples reached here.  /* #neg=236 */


Results
   AUC ROC   = 0.988073
   AUC PR    = 0.631126
   CLL	      = -0.098228
   Precision = 0.784141 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.879012


Total learning time: 3.295 seconds
Total inference time: 1.768 seconds
AUC ROC: 0.988073


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064014
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.579 seconds
Refined model CLL: -0.064014


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.988073
   AUC PR    = 0.631126
   CLL	      = -0.098228
   Precision = 0.784141 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.879012


Total learning time: 10.8 seconds
Total inference time: 1.768 seconds
AUC ROC: 0.988073
Total revision time: 10.8
Best scored revision CLL: -0.064014


Dataset: 4_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 00:15:52
{'AUC ROC': 0.988073, 'AUC PR': 0.631126, 'CLL': -0.098228, 'Precision': [0.784141, 0.5], 'Recall': 1.0, 'F1': 0.879012, 'Learning time': 10.8, 'Inference time': 1.768, 'parameter_0.8': {'AUC ROC': 0.97199, 'AUC PR': 0.81824, 'CLL': -0.11039, 'Precision': [1.0, 0.5], 'Recall': 0.724719, 'F1': 0.840391, 'Learning time': 2.531, 'Inference time': 1.806}}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995093;  // std dev = 1.09e-06, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.050941973991396765;  // std dev = 3.015, 110.000 (wgt'ed) examples reached here.  /* #neg=100 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048763;  // std dev = 1.93e-07, 333.000 (wgt'ed) examples reached here.  /* #neg=333 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7108517994483105;  // std dev = 1.189, 196.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=194 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.05639725703939183;  // std dev = 3.034, 126.000 (wgt'ed) examples reached here.  /* #neg=116 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839213;  // std dev = 0.000, 311.000 (wgt'ed) examples reached here.  /* #neg=311 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( movie(E, A) )
%   | | then return 0.3434402058309858;  // std dev = 0.334, 303.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=204 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360696;  // std dev = 0.000, 270.000 (wgt'ed) examples reached here.  /* #neg=270 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.46843788403159003;  // std dev = 0.677, 195.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=194 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783627;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.07874825137204428;  // std dev = 3.009, 106.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783662;  // std dev = 0.000, 286.000 (wgt'ed) examples reached here.  /* #neg=286 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12933656348683964;  // std dev = 0.258, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( genre(B, E) )
%   | | then return 0.3587304012593997;  // std dev = 2.73e-07, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.08398016901053983;  // std dev = 3.036, 128.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926042;  // std dev = 1.60e-07, 305.000 (wgt'ed) examples reached here.  /* #neg=305 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.280979283935194;  // std dev = 0.000, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else if ( movie(E, A) )
%   | | then return -0.07266162044794888;  // std dev = 0.264, 132.000 (wgt'ed) examples reached here.  /* #neg=122 #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.01e-07, 287.000 (wgt'ed) examples reached here.  /* #neg=287 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1768987280104135;  // std dev = 0.273, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.22783290039687645;  // std dev = 1.26e-07, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.06129246717046887;  // std dev = 3.032, 124.000 (wgt'ed) examples reached here.  /* #neg=114 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109143;  // std dev = 3.33e-08, 302.000 (wgt'ed) examples reached here.  /* #neg=302 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1902446314448483;  // std dev = 1.19e-07, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else if ( genre(A, E) )
%   | | then return -0.06536889833409025;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.05771220699889286;  // std dev = 3.038, 130.000 (wgt'ed) examples reached here.  /* #neg=120 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333699;  // std dev = 5.43e-09, 304.000 (wgt'ed) examples reached here.  /* #neg=304 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.15086565286627848;  // std dev = 0.310, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( movie(E, B) )
%   | | then return 0.08139766741816733;  // std dev = 3.534, 317.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=204 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420301;  // std dev = 0.000, 303.000 (wgt'ed) examples reached here.  /* #neg=303 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15186295773465017;  // std dev = 0.000, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else if ( genre(A, E) )
%   | | then return -0.05333563777729251;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.058053722935532404;  // std dev = 3.034, 126.000 (wgt'ed) examples reached here.  /* #neg=116 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202602;  // std dev = 5.96e-09, 287.000 (wgt'ed) examples reached here.  /* #neg=287 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.97199
   AUC PR    = 0.81824
   CLL	      = -0.108615
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total learning time: 2.343 seconds
Total inference time: 1.857 seconds
AUC ROC: 0.97199


Results scoring model
   AUC ROC   = 0.993632
   AUC PR    = 0.960741
   CLL	      = -0.085436
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.95098
   F1        = 0.974874


Total scoring time: 3.173 seconds
Parameter learned model CLL: -0.085436


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 9, 0], 'true,false,true': [1.09e-06, 0, 194], 'true,false,false,true': [3.015, 100, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.93e-07, 333, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.189, 2, 194], 'true,false,true': [0.0, 8, 0], 'true,false,false,true': [3.034, 116, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 311, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 4, 0], 'true,false,true': [0.334, 99, 204], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 270, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.677, 1, 194], 'true,false,true': [0.0, 7, 0], 'true,false,false,true': [3.009, 96, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 286, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.258, 11, 0], 'true,false,true': [2.73e-07, 0, 194], 'true,false,false,true': [3.036, 118, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.6e-07, 305, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 194], 'true,false,true': [0.264, 122, 10], 'true,false,false': [0.0, 0, 0], 'false,true': [1.01e-07, 287, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.273, 5, 0], 'true,false,true': [1.26e-07, 0, 194], 'true,false,false,true': [3.032, 114, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.33e-08, 302, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [1.19e-07, 0, 194], 'true,false,true': [0.0, 8, 0], 'true,false,false,true': [3.038, 120, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.43e-09, 304, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.31, 6, 0], 'true,false,true': [3.534, 113, 204], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 303, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 194], 'true,false,true': [0.0, 11, 0], 'true,false,false,true': [3.034, 116, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.96e-09, 287, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.22696975573906492, 1.1202250338560137e-16], 'true': [-9.25185853854297e-18, 0.22074099722992158], 'true,false': [6.15315358802561e-15, 0.08264462809917324], 'true,false,false': [0.08264462809917324, nan], 'false': [1.1202250338560137e-16, nan]}, {'': [0.17579179333911746, -1.1137928735789351e-16], 'true': [0.007210224043012122, 0.06897173506729783], 'true,false': [0.0, 0.07306626354245375], 'true,false,false': [0.07306626354245375, nan], 'false': [-1.1137928735789351e-16, nan]}, {'': [0.11274323874399382, -9.539694137519864e-17], 'true': [0.0, 0.11152522616353272], 'true,false': [0.11152522616353272, nan], 'false': [-9.539694137519864e-17, nan]}, {'': [0.10081218702860512, -5.589934110000789e-17], 'true': [0.0023513891897083685, 0.08017727121488755], 'true,false': [0.0, 0.08543965824136739], 'true,false,false': [0.08543965824136739, nan], 'false': [-5.589934110000789e-17, nan]}, {'': [0.07638362547112817, 8.444975138132338e-17], 'true': [0.006042946865049369, 0.07556929671580735], 'true,false': [3.8457209925160063e-16, 0.07202148437499996], 'true,false,false': [0.07202148437499996, nan], 'false': [8.444975138132338e-17, nan]}, {'': [0.058395608571065044, 3.558903075453463e-17], 'true': [-1.8312957107219076e-16, 0.0697961246632656], 'true,false': [0.0697961246632656, nan], 'false': [3.558903075453463e-17, nan]}, {'': [0.049571789309720886, 3.676235180878002e-18], 'true': [0.014956486687781578, 0.0487962610060644], 'true,false': [8.240830698248585e-17, 0.07414151925078033], 'true,false,false': [0.07414151925078033, nan], 'false': [3.676235180878002e-18, nan]}, {'': [0.04279170029869444, 2.921639538487254e-17], 'true': [7.325182842887631e-17, 0.06689283363606613], 'true,false': [0.0, 0.07100591715976323], 'true,false,false': [0.07100591715976323, nan], 'false': [2.921639538487254e-17, nan]}, {'': [0.03994152157811126, -5.93584587423351e-17], 'true': [0.015977154926499648, 0.039393008282672885], 'true,false': [0.039393008282672885, nan], 'false': [-5.93584587423351e-17, nan]}, {'': [0.03846544670912035, 3.558903075453463e-17], 'true': [-5.036063204485246e-17, 0.06720127306110306], 'true,false': [0.0, 0.07306626354245423], 'true,false,false': [0.07306626354245423, nan], 'false': [3.558903075453463e-17, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995093;  // std dev = 1.09e-06, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | | else if ( actor(B) )
%   | | | then return -0.14185106490048763;  // std dev = 8.16e-08, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.14185106490048774;  // std dev = 1.52e-07, 317.000 (wgt'ed) examples reached here.  /* #neg=317 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.719473412210957;  // std dev = 0.000, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( actor(B) )
%   | | | then return -0.12544463852839133;  // std dev = 0.000, 107.000 (wgt'ed) examples reached here.  /* #neg=107 */
%   | | | else return 0.7194734122109544;  // std dev = 2.98e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.125444638528392;  // std dev = 0.000, 300.000 (wgt'ed) examples reached here.  /* #neg=300 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360638;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( actor(B) )
%   | | then return -0.11231637819360617;  // std dev = 9.77e-08, 128.000 (wgt'ed) examples reached here.  /* #neg=128 */
%   | | else return 0.5553664367462833;  // std dev = 6.36e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.11231637819360693;  // std dev = 0.000, 291.000 (wgt'ed) examples reached here.  /* #neg=291 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4175135841583099;  // std dev = 3.04e-07, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783634;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( actor(B) )
%   | | | then return -0.1015963294878363;  // std dev = 1.49e-08, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
%   | | | else return 0.4175135841583103;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.10159632948783656;  // std dev = 0.000, 321.000 (wgt'ed) examples reached here.  /* #neg=321 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926097;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( genre(B, E) )
%   | | then return 0.320711847160149;  // std dev = 3.95e-07, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | | else if ( actor(B) )
%   | | | then return -0.09269127618926094;  // std dev = 5.37e-08, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
%   | | | else return 0.3207118471601498;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.09269127618926043;  // std dev = 1.48e-07, 290.000 (wgt'ed) examples reached here.  /* #neg=290 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2524944107842949;  // std dev = 0.521, 195.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=194 */
%   | else if ( actor(B) )
%   | | then return -0.08518475138839679;  // std dev = 6.50e-08, 122.000 (wgt'ed) examples reached here.  /* #neg=122 */
%   | | else return 0.2551722425694896;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.08518475138839678;  // std dev = 1.07e-07, 315.000 (wgt'ed) examples reached here.  /* #neg=315 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07877675473109179;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(B, E) )
%   | | then return 0.21020193645824017;  // std dev = 0.000, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | | else if ( actor(B) )
%   | | | then return -0.07877675473109158;  // std dev = 5.87e-08, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
%   | | | else return 0.2097577156325357;  // std dev = 1.97e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.07877675473109143;  // std dev = 1.49e-08, 321.000 (wgt'ed) examples reached here.  /* #neg=321 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17742224411051918;  // std dev = 0.000, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else if ( genre(A, E) )
%   | | then return -0.07324622576333704;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( actor(B) )
%   | | | then return -0.07324622576333707;  // std dev = 0.000, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
%   | | | else return 0.17709649774527736;  // std dev = 7.45e-09, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.07324622576333704;  // std dev = 8.69e-08, 321.000 (wgt'ed) examples reached here.  /* #neg=321 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06842697784420264;  // std dev = 5.37e-08, 113.000 (wgt'ed) examples reached here.  /* #neg=113 */
%   | else return 0.15297881341431582;  // std dev = 0.000762, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.06842697784420282;  // std dev = 0.000, 265.000 (wgt'ed) examples reached here.  /* #neg=265 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1315838991873346;  // std dev = 0.509, 195.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=194 */
%   | else if ( genre(A, E) )
%   | | then return -0.06419184008202619;  // std dev = 3.73e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( actor(B) )
%   | | | then return -0.06419184008202626;  // std dev = 0.000, 144.000 (wgt'ed) examples reached here.  /* #neg=144 */
%   | | | else return 0.1339797659883346;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.0641918400820261;  // std dev = 8.43e-08, 274.000 (wgt'ed) examples reached here.  /* #neg=274 */


Results
   AUC ROC   = 0.988073
   AUC PR    = 0.631126
   CLL	      = -0.099705
   Precision = 0.784141 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.879012


Total learning time: 3.095 seconds
Total inference time: 1.862 seconds
AUC ROC: 0.988073


Results scoring model
   AUC ROC   = 0.999909
   AUC PR    = 0.981202
   CLL	      = -0.064303
   Precision = 0.995122 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.997555


Total scoring time: 2.983 seconds
Refined model CLL: -0.064303


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.988073
   AUC PR    = 0.631126
   CLL	      = -0.099705
   Precision = 0.784141 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.879012


Total learning time: 11.594000000000001 seconds
Total inference time: 1.862 seconds
AUC ROC: 0.988073
Total revision time: 11.594000000000001
Best scored revision CLL: -0.064303


Dataset: 4_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 00:16:08
{'AUC ROC': 0.988073, 'AUC PR': 0.631126, 'CLL': -0.099705, 'Precision': [0.784141, 0.5], 'Recall': 1.0, 'F1': 0.879012, 'Learning time': 11.594000000000001, 'Inference time': 1.862, 'parameter_1.0': {'AUC ROC': 0.97199, 'AUC PR': 0.81824, 'CLL': -0.108615, 'Precision': [1.0, 0.5], 'Recall': 0.724719, 'F1': 0.840391, 'Learning time': 2.343, 'Inference time': 1.857}}


Starting fold 4

Target train facts examples: 927
Target train pos examples: 337
Target train neg examples: 12345

Target test facts examples: 151
Target test pos	 examples: 45
Target test neg examples: 1891

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995125;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.08891816586874314;  // std dev = 2.631, 39.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048763;  // std dev = 8.94e-08, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.6907625963072397;  // std dev = 1.198, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.05152200499063422;  // std dev = 2.676, 44.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839144;  // std dev = 0.000, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( movie(E, A) )
%   | | then return 0.2986599709714025;  // std dev = 0.379, 111.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360621;  // std dev = 7.45e-08, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4881093667435444;  // std dev = 1.79e-07, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.07715590932289301;  // std dev = 2.543, 32.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783637;  // std dev = 0.000, 119.000 (wgt'ed) examples reached here.  /* #neg=119 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.36919289296156654;  // std dev = 5.16e-08, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.02126142070428256;  // std dev = 2.691, 46.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.092691276189261;  // std dev = 3.65e-08, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.28804996841100566;  // std dev = 6.66e-08, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( movie(E, A) )
%   | | then return 0.01726254814747481;  // std dev = 0.415, 40.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=9 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 3.49e-08, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10318283191689755;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.23273643675613637;  // std dev = 8.43e-08, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.008764893250811836;  // std dev = 2.641, 40.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.0787767547310916;  // std dev = 5.37e-08, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1848314833385712;  // std dev = 0.523, 59.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=58 */
%   | else if ( genre(A, E) )
%   | | then return -0.0940180698127643;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.03022425304184014;  // std dev = 2.704, 48.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333707;  // std dev = 0.000, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.37622629016205766;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, B) )
%   | | then return 0.079739651169975;  // std dev = 2.877, 106.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420264;  // std dev = 5.10e-09, 114.000 (wgt'ed) examples reached here.  /* #neg=114 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15574542411424547;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( genre(A, E) )
%   | | then return -0.06089497135726658;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.011989795105111696;  // std dev = 2.659, 42.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 111.000 (wgt'ed) examples reached here.  /* #neg=111 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.114571
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.696 seconds
Total inference time: 1.617 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.982835
   AUC PR    = 0.89677
   CLL	      = -0.116679
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.865672
   F1        = 0.928


Total scoring time: 1.559 seconds
Parameter learned model CLL: -0.116679


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 58], 'true,false,false,true': [2.631, 30, 9], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.94e-08, 101, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.198, 2, 58], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [2.676, 35, 9], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 86, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 3, 0], 'true,false,true': [0.379, 44, 67], 'true,false,false': [0.0, 0, 0], 'false,true': [7.45e-08, 91, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.79e-07, 0, 58], 'true,false,true': [0.0, 4, 0], 'true,false,false,true': [2.543, 23, 9], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 119, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [2.63e-09, 3, 0], 'true,false,true': [5.16e-08, 0, 58], 'true,false,false,true': [2.691, 37, 9], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.65e-08, 94, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [6.66e-08, 0, 58], 'true,false,true': [0.415, 31, 9], 'true,false,false': [0.0, 0, 0], 'false,true': [3.49e-08, 89, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [8.43e-08, 0, 58], 'true,false,false,true': [2.641, 31, 9], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.37e-08, 94, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.523, 1, 58], 'true,false,true': [0.0, 4, 0], 'true,false,false,true': [2.704, 39, 9], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 105, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [2.877, 39, 67], 'true,false,false': [0.0, 0, 0], 'false,true': [5.1e-09, 114, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 58], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [2.659, 33, 9], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 111, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.21362525241789693, 7.91446116564468e-17], 'true': [nan, 0.21362525241789693], 'true,false': [-3.675221047035001e-16, 0.17751479289940844], 'true,false,false': [0.17751479289940844, nan], 'false': [7.91446116564468e-17, nan]}, {'': [0.18236798194348605, -1.8073398075293247e-17], 'true': [0.023905017545852777, 0.16270661157024827], 'true,false': [nan, 0.16270661157024827], 'true,false,false': [0.16270661157024827, nan], 'false': [-1.8073398075293247e-17, nan]}, {'': [0.14465612990948118, 6.100126508929432e-17], 'true': [0.0, 0.14345917681256654], 'true,false': [0.14345917681256654, nan], 'false': [6.100126508929432e-17, nan]}, {'': [0.11476900666592613, -2.052513154769197e-17], 'true': [5.512831570552502e-16, 0.18374152291255685], 'true,false': [0.0, 0.2021484374999997], 'true,false,false': [0.2021484374999997, nan], 'false': [-2.052513154769197e-17, nan]}, {'': [0.106806010642668, 1.4173059888831785e-17], 'true': [2.3129646346357427e-18, 0.10721323602128253], 'true,false': [4.594026308793751e-17, 0.1573724007561438], 'true,false,false': [0.1573724007561438, nan], 'false': [1.4173059888831785e-17, nan]}, {'': [0.08810244629165695, 1.3721857607726653e-17], 'true': [7.656710514656253e-17, 0.17245407541014335], 'true,false': [0.17245407541014335, nan], 'false': [1.3721857607726653e-17, nan]}, {'': [0.08279709723776218, 3.0708296425802203e-17], 'true': [0.0, 0.08329120630324531], 'true,false': [1.2250736823450003e-16, 0.1743749999999998], 'true,false,false': [0.1743749999999998, nan], 'false': [3.0708296425802203e-17, nan]}, {'': [0.08052789229743422, -4.229421046191073e-18], 'true': [0.0046400269299267894, 0.14091396930590808], 'true,false': [0.0, 0.15234375000000025], 'true,false,false': [0.15234375000000025, nan], 'false': [-4.229421046191073e-18, nan]}, {'': [0.07928078226938555, 2.6294755846385285e-17], 'true': [0.0, 0.0780856773583835], 'true,false': [0.0780856773583835, nan], 'false': [2.6294755846385285e-17, nan]}, {'': [0.07645789756799992, -1.7503516154000216e-17], 'true': [-6.125368411725002e-17, 0.16081805852740397], 'true,false': [0.0, 0.1683673469387752], 'true,false,false': [0.1683673469387752, nan], 'false': [-1.7503516154000216e-17, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.8581489350995118;  // std dev = 1.46e-07, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else return 0.7993254056877469;  // std dev = 0.235, 34.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=32 */
%   | else if ( actor(A), director(B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.1418510649004877;  // std dev = 2.36e-08, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   else return -0.14185106490048763;  // std dev = 8.69e-08, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.725069963392075;  // std dev = 0.048, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.1254446385283913;  // std dev = 3.65e-08, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   else return -0.1254446385283914;  // std dev = 0.000, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( actor(B) )
%   | | then return -0.1123163781936064;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | else return 0.5609018965119585;  // std dev = 0.059, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   else return -0.11231637819360618;  // std dev = 8.43e-08, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4227242707755088;  // std dev = 0.054, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783633;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( actor(B) )
%   | | | then return -0.10159632948783635;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | | else return 0.4148088352611686;  // std dev = 2.98e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.10159632948783626;  // std dev = 4.59e-08, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13548797713129918;  // std dev = 0.191, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.3242649719690523;  // std dev = 0.049, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.3188787001622267;  // std dev = 2.58e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.10260556739049947;  // std dev = 0.217, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   else return -0.09269127618926104;  // std dev = 2.36e-08, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( actor(A) )
%   | | then return 0.2576061353572518;  // std dev = 0.043, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else return -0.27864369353495405;  // std dev = 7.45e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( actor(A), director(B) )
%   | | then return 0.25392099380035577;  // std dev = 2.11e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.08776231936836598;  // std dev = 0.147, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   else return -0.08518475138839682;  // std dev = 5.67e-08, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07554619855938904;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.21148207428641788;  // std dev = 0.037, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.20887345857948159;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.08209748093814485;  // std dev = 0.137, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   else return -0.07877675473109157;  // std dev = 6.50e-08, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.1736182016495458;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else return 0.17023633663872406;  // std dev = 0.068, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | else if ( genre(A, E) )
%   | | then return -0.07043640966010237;  // std dev = 1.32e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.17644766498270326;  // std dev = 7.45e-09, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.08228796803296821;  // std dev = 0.179, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   else return -0.07324622576333707;  // std dev = 0.000, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11660455618619758;  // std dev = 0.080, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( director(B), actor(A) )
%   | | then return 0.15426222402940132;  // std dev = 0.031, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | | else return -0.0706082121406798;  // std dev = 0.122, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   else return -0.06842697784420265;  // std dev = 4.59e-08, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13547303068075225;  // std dev = 0.028, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( genre(A, E) )
%   | | then return -0.059131151476149495;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( actor(B) )
%   | | | then return -0.06258678912609629;  // std dev = 0.000, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | | else return 0.1333899085183915;  // std dev = 5.27e-09, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.06419184008202626;  // std dev = 0.000, 107.000 (wgt'ed) examples reached here.  /* #neg=107 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063865
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.999 seconds
Total inference time: 1.641 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.06565
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.769 seconds
Refined model CLL: -0.06565


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063865
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 8.023 seconds
Total inference time: 1.641 seconds
AUC ROC: 1.0
Total revision time: 8.023
Best scored revision CLL: -0.06565


Dataset: 4_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 00:16:20
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063865, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 8.023, 'Inference time': 1.641, 'parameter_0.2': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.114571, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 1.696, 'Inference time': 1.617}}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995108;  // std dev = 5.84e-07, 113.000 (wgt'ed) examples reached here.  /* #pos=113 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.1239717199096386;  // std dev = 3.927, 79.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=21 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048846;  // std dev = 0.000, 230.000 (wgt'ed) examples reached here.  /* #neg=230 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.719473412210955;  // std dev = 0.000, 113.000 (wgt'ed) examples reached here.  /* #pos=113 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.12237789338791544;  // std dev = 3.888, 75.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=21 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839158;  // std dev = 0.000, 187.000 (wgt'ed) examples reached here.  /* #neg=187 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.123836570229513;  // std dev = 0.109, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( movie(E, A) )
%   | | then return 0.3672290761964271;  // std dev = 0.363, 191.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=134 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360651;  // std dev = 0.000, 187.000 (wgt'ed) examples reached here.  /* #neg=187 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4579701512986063;  // std dev = 0.667, 114.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=113 */
%   | else if ( genre(A, E) )
%   | | then return -0.10054964507282525;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( movie(F, B) )
%   | | | then return -5.662590843131785E-4;  // std dev = 4.012, 90.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=21 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783653;  // std dev = 0.000, 208.000 (wgt'ed) examples reached here.  /* #neg=208 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1488593834361724;  // std dev = 0.337, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( genre(B, E) )
%   | | then return 0.3536984275451538;  // std dev = 0.000, 113.000 (wgt'ed) examples reached here.  /* #pos=113 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.010387907093985448;  // std dev = 3.984, 86.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926055;  // std dev = 9.31e-08, 205.000 (wgt'ed) examples reached here.  /* #neg=205 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.27284492103282654;  // std dev = 0.537, 114.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=113 */
%   | else if ( movie(E, A) )
%   | | then return 0.0028535677793639588;  // std dev = 0.421, 90.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=21 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 8.16e-08, 217.000 (wgt'ed) examples reached here.  /* #neg=217 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14508327203287918;  // std dev = 0.351, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( genre(B, E) )
%   | | then return 0.22629259832056106;  // std dev = 0.000, 113.000 (wgt'ed) examples reached here.  /* #pos=113 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.010880295866519637;  // std dev = 3.976, 85.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=21 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109146;  // std dev = 7.15e-08, 205.000 (wgt'ed) examples reached here.  /* #neg=205 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17681514623706768;  // std dev = 0.814, 116.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=113 */
%   | else if ( genre(A, E) )
%   | | then return -0.07025551396756115;  // std dev = 4.56e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.004813611288839432;  // std dev = 4.012, 90.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=21 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333664;  // std dev = 8.54e-09, 205.000 (wgt'ed) examples reached here.  /* #neg=205 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09456247172069328;  // std dev = 0.244, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( movie(E, B) )
%   | | then return 0.11531374315923665;  // std dev = 3.972, 188.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=134 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420262;  // std dev = 5.82e-09, 196.000 (wgt'ed) examples reached here.  /* #neg=196 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14435654786243748;  // std dev = 0.451, 114.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=113 */
%   | else if ( genre(A, E) )
%   | | then return -0.060222959353687974;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.0026735256645544782;  // std dev = 3.952, 82.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=21 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 186.000 (wgt'ed) examples reached here.  /* #neg=186 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.126089
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.081 seconds
Total inference time: 1.612 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.980863
   AUC PR    = 0.879131
   CLL	      = -0.124816
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.843284
   F1        = 0.91498


Total scoring time: 2.221 seconds
Parameter learned model CLL: -0.124816


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 4, 0], 'true,false,true': [5.84e-07, 0, 113], 'true,false,false,true': [3.927, 58, 21], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 230, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 113], 'true,false,true': [0.0, 8, 0], 'true,false,false,true': [3.888, 54, 21], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 187, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.109, 10, 0], 'true,false,true': [0.363, 57, 134], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 187, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.667, 1, 113], 'true,false,true': [2.63e-09, 6, 0], 'true,false,false,true': [4.012, 69, 21], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 208, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.337, 14, 0], 'true,false,true': [0.0, 0, 113], 'true,false,false,true': [3.984, 65, 21], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.31e-08, 205, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.537, 1, 113], 'true,false,true': [0.421, 69, 21], 'true,false,false': [0.0, 0, 0], 'false,true': [8.16e-08, 217, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.351, 11, 0], 'true,false,true': [0.0, 0, 113], 'true,false,false,true': [3.976, 64, 21], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.15e-08, 205, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.814, 3, 113], 'true,false,true': [4.56e-09, 8, 0], 'true,false,false,true': [4.012, 69, 21], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.54e-09, 205, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.244, 9, 0], 'true,false,true': [3.972, 54, 134], 'true,false,false': [0.0, 0, 0], 'false,true': [5.82e-09, 196, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.451, 1, 113], 'true,false,true': [0.0, 5, 0], 'true,false,false,true': [3.952, 61, 21], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 186, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.2162640566430699, -2.0852884636437723e-16], 'true': [0.0, 0.21082899305556013], 'true,false': [3.0182346297774167e-15, 0.195161031885916], 'true,false,false': [0.195161031885916, nan], 'false': [-2.0852884636437723e-16, nan]}, {'': [0.17355414237001515, -4.0371746350005693e-17], 'true': [-8.803184336850799e-16, 0.187517724545688], 'true,false': [0.0, 0.20160000000000003], 'true,false,false': [0.20160000000000003, nan], 'false': [-4.0371746350005693e-17, nan]}, {'': [0.13653603193966193, -2.6122894697062506e-17], 'true': [0.0011944334208975089, 0.13162469248620226], 'true,false': [0.13162469248620226, nan], 'false': [-2.6122894697062506e-17, nan]}, {'': [0.13266503495620888, -8.753681540313734e-17], 'true': [0.003907144056232744, 0.16829407615405909], 'true,false': [1.1564823173178713e-18, 0.1788888888888884], 'true,false,false': [0.1788888888888884, nan], 'false': [-8.753681540313734e-17, nan]}, {'': [0.10977736827624289, 4.224263215646937e-17], 'true': [0.00813538013021862, 0.10868236989366005], 'true,false': [-8.017185735346263e-16, 0.18455922120064858], 'true,false,false': [0.18455922120064858, nan], 'false': [4.224263215646937e-17, nan]}, {'': [0.09758279653793829, 3.0697410819128755e-17], 'true': [0.0025287449907826273, 0.1772489691113621], 'true,false': [0.1772489691113621, nan], 'false': [3.0697410819128755e-17, nan]}, {'': [0.09089140813641992, 2.4912321528174245e-17], 'true': [0.011176601631648077, 0.09122602388866069], 'true,false': [-1.6505970631595249e-16, 0.18602076124567477], 'true,false,false': [0.18602076124567477, nan], 'false': [2.4912321528174245e-17, nan]}, {'': [0.0871560025456379, 7.365382017025429e-17], 'true': [0.005714583560514383, 0.16460677870583793], 'true,false': [2.6020852139652106e-18, 0.1788888888888884], 'true,false,false': [0.1788888888888884, nan], 'false': [7.365382017025429e-17, nan]}, {'': [0.08231138834014536, 3.341997880249196e-17], 'true': [0.006616988214709147, 0.08392271008531282], 'true,false': [0.08392271008531282, nan], 'false': [3.341997880249196e-17, nan]}, {'': [0.08435733111556737, -4.178258694825858e-18], 'true': [0.0017810409124394727, 0.17974205976983967], 'true,false': [0.0, 0.19051160023795366], 'true,false,false': [0.19051160023795366, nan], 'false': [-4.178258694825858e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995108;  // std dev = 5.84e-07, 113.000 (wgt'ed) examples reached here.  /* #pos=113 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return -0.14185106490048768;  // std dev = 5.16e-08, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   else return -0.1418510649004883;  // std dev = 0.000, 180.000 (wgt'ed) examples reached here.  /* #neg=180 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.719473412210955;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | else return 0.7064746729688105;  // std dev = 0.104, 65.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=64 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.7194734122109543;  // std dev = 7.30e-08, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return -0.1254446385283916;  // std dev = 0.000, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   else return -0.1254446385283918;  // std dev = 0.000, 230.000 (wgt'ed) examples reached here.  /* #neg=230 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( actor(A), director(B) )
%   | | then return 0.5568983695726276;  // std dev = 0.019, 134.000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | | else return -0.1123163781936063;  // std dev = 3.80e-08, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   else return -0.11231637819360654;  // std dev = 0.000, 190.000 (wgt'ed) examples reached here.  /* #neg=190 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4189329602040677;  // std dev = 0.017, 113.000 (wgt'ed) examples reached here.  /* #pos=113 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( actor(B) )
%   | | | then return -0.1015963294878362;  // std dev = 3.94e-08, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | | | else return 0.4171410713810786;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   else return -0.10159632948783653;  // std dev = 0.000, 201.000 (wgt'ed) examples reached here.  /* #neg=201 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12443879514266108;  // std dev = 0.174, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.3216751417203776;  // std dev = 0.015, 113.000 (wgt'ed) examples reached here.  /* #pos=113 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.3204593133487818;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return -0.09445487806017311;  // std dev = 0.075, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   else return -0.0926912761892606;  // std dev = 8.82e-08, 186.000 (wgt'ed) examples reached here.  /* #neg=186 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2556998765124811;  // std dev = 0.013, 134.000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.09261277998954219;  // std dev = 0.298, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
%   else return -0.08518475138839678;  // std dev = 7.30e-08, 189.000 (wgt'ed) examples reached here.  /* #neg=189 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07598025151198154;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.2102441199770715;  // std dev = 0.011, 113.000 (wgt'ed) examples reached here.  /* #pos=113 */
%   | | else if ( actor(B) )
%   | | | then return -0.07811228644053078;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | | | else return 0.20952002940803277;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   else return -0.07877675473109147;  // std dev = 7.60e-08, 192.000 (wgt'ed) examples reached here.  /* #neg=192 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17745336850258184;  // std dev = 0.010, 113.000 (wgt'ed) examples reached here.  /* #pos=113 */
%   | else if ( genre(A, E) )
%   | | then return -0.07081478795419384;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( actor(B) )
%   | | | then return -0.0726694938452362;  // std dev = 1.83e-08, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
%   | | | else return 0.17692214655039656;  // std dev = 2.58e-08, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   else return -0.07324622576333664;  // std dev = 1.20e-07, 201.000 (wgt'ed) examples reached here.  /* #neg=201 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.15295148924289967;  // std dev = 0.009, 134.000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.07696835756638502;  // std dev = 0.341, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
%   else return -0.06842697784420262;  // std dev = 7.96e-08, 191.000 (wgt'ed) examples reached here.  /* #neg=191 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( actor(A) )
%   | | then return 0.13422583473686678;  // std dev = 0.008, 113.000 (wgt'ed) examples reached here.  /* #pos=113 */
%   | | else return -0.24576899835458996;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(A, E) )
%   | | then return -0.06168624678826438;  // std dev = 1.32e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.13386434059793478;  // std dev = 1.83e-08, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return -0.0665725867700833;  // std dev = 0.138, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   else return -0.06419184008202626;  // std dev = 1.49e-08, 227.000 (wgt'ed) examples reached here.  /* #neg=227 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.06385
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.906 seconds
Total inference time: 1.388 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.065284
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.254 seconds
Refined model CLL: -0.065284


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.06385
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 9.462 seconds
Total inference time: 1.388 seconds
AUC ROC: 1.0
Total revision time: 9.462
Best scored revision CLL: -0.065284


Dataset: 4_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 00:16:33
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.06385, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 9.462, 'Inference time': 1.388, 'parameter_0.4': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.126089, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 2.081, 'Inference time': 1.612}}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995096;  // std dev = 1.04e-06, 166.000 (wgt'ed) examples reached here.  /* #pos=166 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.1581489350995109;  // std dev = 5.020, 120.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=36 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048774;  // std dev = 1.46e-07, 314.000 (wgt'ed) examples reached here.  /* #neg=314 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.6995929874876777;  // std dev = 1.670, 170.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=166 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.14287140054568967;  // std dev = 5.002, 118.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=36 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.125444638528392;  // std dev = 0.000, 295.000 (wgt'ed) examples reached here.  /* #neg=295 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.16197273422420086;  // std dev = 0.167, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( movie(E, A) )
%   | | then return 0.35564094286300857;  // std dev = 0.376, 296.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=202 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360668;  // std dev = 0.000, 322.000 (wgt'ed) examples reached here.  /* #neg=322 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4676796402411508;  // std dev = 0.667, 167.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=166 */
%   | else if ( genre(A, E) )
%   | | then return -0.09715279042997894;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.053374072015496696;  // std dev = 5.038, 122.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=36 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1015963294878366;  // std dev = 0.000, 272.000 (wgt'ed) examples reached here.  /* #neg=272 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1130381822442976;  // std dev = 0.255, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( genre(B, E) )
%   | | then return 0.35868814778130265;  // std dev = 4.50e-07, 166.000 (wgt'ed) examples reached here.  /* #pos=166 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.03408935052878902;  // std dev = 5.071, 126.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=36 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926044;  // std dev = 1.75e-07, 303.000 (wgt'ed) examples reached here.  /* #neg=303 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.27451910888413245;  // std dev = 0.759, 168.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=166 */
%   | else if ( movie(E, A) )
%   | | then return 0.012359877624909027;  // std dev = 0.430, 141.000 (wgt'ed) examples reached here.  /* #neg=105 #pos=36 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.03e-07, 301.000 (wgt'ed) examples reached here.  /* #neg=301 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1123632811581984;  // std dev = 0.308, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( genre(B, E) )
%   | | then return 0.22894643775474616;  // std dev = 1.52e-07, 166.000 (wgt'ed) examples reached here.  /* #pos=166 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.032210666066891436;  // std dev = 5.046, 123.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=36 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109144;  // std dev = 4.71e-08, 272.000 (wgt'ed) examples reached here.  /* #neg=272 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1824793777629716;  // std dev = 0.829, 169.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=166 */
%   | else if ( genre(A, E) )
%   | | then return -0.07313758010218253;  // std dev = 3.73e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.002018703349478408;  // std dev = 5.145, 136.000 (wgt'ed) examples reached here.  /* #neg=100 #pos=36 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333703;  // std dev = 4.93e-09, 317.000 (wgt'ed) examples reached here.  /* #neg=317 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1995233079900898;  // std dev = 0.454, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( movie(E, B) )
%   | | then return 0.11624883127058669;  // std dev = 5.067, 281.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=202 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420299;  // std dev = 0.000, 296.000 (wgt'ed) examples reached here.  /* #neg=296 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.138779129741858;  // std dev = 0.864, 170.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=166 */
%   | else if ( genre(A, E) )
%   | | then return -0.05667253913278475;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.028782467921725015;  // std dev = 5.158, 138.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=36 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202594;  // std dev = 6.91e-09, 304.000 (wgt'ed) examples reached here.  /* #neg=304 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.135064
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.552 seconds
Total inference time: 1.507 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.978069
   AUC PR    = 0.861864
   CLL	      = -0.133237
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.821782
   F1        = 0.902174


Total scoring time: 2.737 seconds
Parameter learned model CLL: -0.133237


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 7, 0], 'true,false,true': [1.04e-06, 0, 166], 'true,false,false,true': [5.02, 84, 36], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.46e-07, 314, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.67, 4, 166], 'true,false,true': [0.0, 9, 0], 'true,false,false,true': [5.002, 82, 36], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 295, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.167, 9, 0], 'true,false,true': [0.376, 94, 202], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 322, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.667, 1, 166], 'true,false,true': [0.0, 11, 0], 'true,false,false,true': [5.038, 86, 36], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 272, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.255, 16, 0], 'true,false,true': [4.5e-07, 0, 166], 'true,false,false,true': [5.071, 90, 36], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.75e-07, 303, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.759, 2, 166], 'true,false,true': [0.43, 105, 36], 'true,false,false': [0.0, 0, 0], 'false,true': [1.03e-07, 301, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.308, 15, 0], 'true,false,true': [1.52e-07, 0, 166], 'true,false,false,true': [5.046, 87, 36], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.71e-08, 272, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.829, 3, 166], 'true,false,true': [3.73e-09, 10, 0], 'true,false,false,true': [5.145, 100, 36], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.93e-09, 317, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.454, 12, 0], 'true,false,true': [5.067, 79, 202], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 296, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.864, 4, 166], 'true,false,true': [0.0, 8, 0], 'true,false,false,true': [5.158, 102, 36], 'true,false,false,false': [0.0, 0, 0], 'false,true': [6.91e-09, 304, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.2141201411781198, 6.788624863950002e-17], 'true': [-7.93016446160826e-18, 0.20744290674361093], 'true,false': [6.5061744479238086e-15, 0.21000000000000138], 'true,false,false': [0.21000000000000138, nan], 'false': [6.788624863950002e-17, nan]}, {'': [0.17677854893447886, -8.129090620984197e-17], 'true': [0.016402098417882083, 0.2017242008804266], 'true,false': [0.0, 0.2120080436656134], 'true,false,false': [0.2120080436656134, nan], 'false': [-8.129090620984197e-17, nan]}, {'': [0.14500131802467295, -4.13747711040431e-17], 'true': [0.0030821921177964506, 0.1414104748830797], 'true,false': [0.1414104748830797, nan], 'false': [-4.13747711040431e-17, nan]}, {'': [0.13177962423740758, -6.040919398695704e-17], 'true': [0.00266260605461359, 0.19252388650132382], 'true,false': [-1.261617073437678e-18, 0.20800859983875203], 'true,false,false': [0.20800859983875203, nan], 'false': [-6.040919398695704e-17, nan]}, {'': [0.1136202488214639, 1.0112922600545981e-16], 'true': [0.004058892714202173, 0.11390941995981779], 'true,false': [1.2199077089857142e-15, 0.20408163265306203], 'true,false,false': [0.20408163265306203, nan], 'false': [1.0112922600545981e-16, nan]}, {'': [0.1032729850218281, 3.540910643322758e-17], 'true': [0.0034333382304733836, 0.184864474652467], 'true,false': [0.184864474652467, nan], 'false': [3.540910643322758e-17, nan]}, {'': [0.09618140580033886, 8.163404592832034e-18], 'true': [0.006341098651168434, 0.09757072809706276], 'true,false': [1.3911228260363408e-16, 0.20701963117192174], 'true,false,false': [0.20701963117192174, nan], 'false': [8.163404592832034e-18, nan]}, {'': [0.09528010153999093, 2.4515965843457714e-17], 'true': [0.004062450707518524, 0.18162810185074707], 'true,false': [1.3877787807814458e-18, 0.1946366782006927], 'true,false,false': [0.1946366782006927, nan], 'false': [2.4515965843457714e-17, nan]}, {'': [0.0922380963265224, -5.326069915431494e-17], 'true': [0.017211193435113976, 0.091358322462133], 'true,false': [0.091358322462133, nan], 'false': [-5.326069915431494e-17, nan]}, {'': [0.09369254102405476, 4.747664250041788e-17], 'true': [0.004391625809350571, 0.18229162686812939], 'true,false': [0.0, 0.1928166351606802], 'true,false,false': [0.1928166351606802, nan], 'false': [4.747664250041788e-17, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995096;  // std dev = 1.04e-06, 166.000 (wgt'ed) examples reached here.  /* #pos=166 */
%   | | else if ( actor(B) )
%   | | | then return -0.14185106490048766;  // std dev = 7.88e-08, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
%   | | | else return 0.8581489350995115;  // std dev = 2.53e-07, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   else return -0.14185106490048777;  // std dev = 1.33e-07, 310.000 (wgt'ed) examples reached here.  /* #neg=310 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109545;  // std dev = 1.46e-07, 68.000 (wgt'ed) examples reached here.  /* #pos=68 */
%   | | else if ( actor(A) )
%   | | | then return 0.7194734122109545;  // std dev = 1.19e-07, 98.000 (wgt'ed) examples reached here.  /* #pos=98 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.7194734122109548;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | | else return -0.12707708009955618;  // std dev = 0.154, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
%   else return -0.12544463852839188;  // std dev = 0.000, 256.000 (wgt'ed) examples reached here.  /* #neg=256 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5553664367462837;  // std dev = 5.53e-07, 202.000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.11652050824161975;  // std dev = 0.245, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
%   else return -0.11231637819360682;  // std dev = 0.000, 304.000 (wgt'ed) examples reached here.  /* #neg=304 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.4175135841583107;  // std dev = 0.000, 68.000 (wgt'ed) examples reached here.  /* #pos=68 */
%   | | else return 0.4071390476397678;  // std dev = 0.073, 100.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=98 */
%   | else if ( genre(A, E) )
%   | | then return -0.10121324176886495;  // std dev = 5.27e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.41751358415831047;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | | else return -0.10359834314982865;  // std dev = 0.186, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
%   else return -0.10159632948783662;  // std dev = 0.000, 298.000 (wgt'ed) examples reached here.  /* #neg=298 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11140442573688869;  // std dev = 0.084, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( genre(B, E) )
%   | | then return 0.32204862853494653;  // std dev = 0.014, 166.000 (wgt'ed) examples reached here.  /* #pos=166 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.3207118471601495;  // std dev = 2.11e-08, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | | else return -0.09362364288288205;  // std dev = 0.123, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
%   else return -0.09269127618926044;  // std dev = 1.72e-07, 301.000 (wgt'ed) examples reached here.  /* #neg=301 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.2559219295850287;  // std dev = 0.013, 202.000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.08794895510721436;  // std dev = 0.153, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
%   else return -0.08518475138839678;  // std dev = 1.07e-07, 314.000 (wgt'ed) examples reached here.  /* #neg=314 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.0903949815837978;  // std dev = 0.065, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( genre(B, E) )
%   | | then return 0.2104291317819399;  // std dev = 0.011, 166.000 (wgt'ed) examples reached here.  /* #pos=166 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.20963347498983187;  // std dev = 5.16e-08, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | | else return -0.0791274416013373;  // std dev = 0.108, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
%   else return -0.07877675473109143;  // std dev = 3.94e-08, 292.000 (wgt'ed) examples reached here.  /* #neg=292 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.17669493990647447;  // std dev = 4.71e-08, 68.000 (wgt'ed) examples reached here.  /* #pos=68 */
%   | | else if ( actor(A) )
%   | | | then return 0.1782092291087223;  // std dev = 0.000, 98.000 (wgt'ed) examples reached here.  /* #pos=98 */
%   | | | else return -0.1124031653364106;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(A, E) )
%   | | then return -0.07077942344564501;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.17700536777120668;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | | else return -0.07385004764994459;  // std dev = 0.102, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
%   else return -0.0732462257633369;  // std dev = 1.06e-07, 279.000 (wgt'ed) examples reached here.  /* #neg=279 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.15303823706036235;  // std dev = 0.008, 202.000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.07192006393303237;  // std dev = 0.193, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
%   else return -0.06842697784420305;  // std dev = 0.000, 314.000 (wgt'ed) examples reached here.  /* #neg=314 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( director(A) )
%   | | then return -0.09528489833479481;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.13430753163035195;  // std dev = 0.007, 166.000 (wgt'ed) examples reached here.  /* #pos=166 */
%   | else if ( genre(A, E) )
%   | | then return -0.06194990360172782;  // std dev = 2.63e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.1339108897831377;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | | else return -0.06755902177654782;  // std dev = 0.179, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
%   else return -0.06419184008202598;  // std dev = 1.11e-07, 295.000 (wgt'ed) examples reached here.  /* #neg=295 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063568
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.747 seconds
Total inference time: 1.667 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064434
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.596 seconds
Refined model CLL: -0.064434


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063568
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 11.632 seconds
Total inference time: 1.667 seconds
AUC ROC: 1.0
Total revision time: 11.632
Best scored revision CLL: -0.064434


Dataset: 4_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 00:16:49
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063568, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 11.632, 'Inference time': 1.667, 'parameter_0.6': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.135064, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 2.552, 'Inference time': 1.507}}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995091;  // std dev = 1.08e-06, 219.000 (wgt'ed) examples reached here.  /* #pos=219 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.16870794131069292;  // std dev = 5.871, 161.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=50 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004874;  // std dev = 2.81e-07, 383.000 (wgt'ed) examples reached here.  /* #neg=383 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7156328756166874;  // std dev = 0.843, 220.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=219 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.12043747008282227;  // std dev = 5.983, 176.000 (wgt'ed) examples reached here.  /* #neg=126 #pos=50 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839224;  // std dev = 0.000, 396.000 (wgt'ed) examples reached here.  /* #neg=396 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14355118861330035;  // std dev = 0.169, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( movie(E, A) )
%   | | then return 0.36411246987588214;  // std dev = 0.372, 388.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=269 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360621;  // std dev = 0.000, 400.000 (wgt'ed) examples reached here.  /* #neg=400 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4535946190053782;  // std dev = 1.324, 223.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=219 */
%   | else if ( genre(A, E) )
%   | | then return -0.09878065465471807;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.02773255293130103;  // std dev = 6.046, 186.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=50 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783615;  // std dev = 8.33e-09, 370.000 (wgt'ed) examples reached here.  /* #neg=370 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.127549546213941;  // std dev = 0.352, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else if ( genre(B, E) )
%   | | then return 0.35629330456993097;  // std dev = 0.000, 219.000 (wgt'ed) examples reached here.  /* #pos=219 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.0586830036431888;  // std dev = 5.895, 164.000 (wgt'ed) examples reached here.  /* #neg=114 #pos=50 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0926912761892608;  // std dev = 1.59e-07, 390.000 (wgt'ed) examples reached here.  /* #neg=390 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2768775887187946;  // std dev = 0.539, 220.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=219 */
%   | else if ( movie(E, A) )
%   | | then return 0.02660826320668478;  // std dev = 0.441, 183.000 (wgt'ed) examples reached here.  /* #neg=133 #pos=50 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.25e-07, 398.000 (wgt'ed) examples reached here.  /* #neg=398 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12505964113324886;  // std dev = 0.300, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( genre(B, E) )
%   | | then return 0.22711745335425534;  // std dev = 3.32e-07, 219.000 (wgt'ed) examples reached here.  /* #pos=219 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.005015809484783282;  // std dev = 6.052, 187.000 (wgt'ed) examples reached here.  /* #neg=137 #pos=50 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109143;  // std dev = 8.69e-08, 363.000 (wgt'ed) examples reached here.  /* #neg=363 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18323569980796378;  // std dev = 0.827, 222.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=219 */
%   | else if ( genre(A, E) )
%   | | then return -0.07339793017195806;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.03786908831438973;  // std dev = 5.911, 166.000 (wgt'ed) examples reached here.  /* #neg=116 #pos=50 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333767;  // std dev = 0.000, 352.000 (wgt'ed) examples reached here.  /* #neg=352 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1556707149010144;  // std dev = 0.523, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else if ( movie(E, B) )
%   | | then return 0.1069150340091866;  // std dev = 6.038, 384.000 (wgt'ed) examples reached here.  /* #neg=115 #pos=269 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420339;  // std dev = 0.000, 415.000 (wgt'ed) examples reached here.  /* #neg=415 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14503652463946012;  // std dev = 0.627, 221.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=219 */
%   | else if ( genre(A, E) )
%   | | then return -0.05926195911004225;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.012511593276582259;  // std dev = 5.895, 164.000 (wgt'ed) examples reached here.  /* #neg=114 #pos=50 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202557;  // std dev = 9.94e-09, 410.000 (wgt'ed) examples reached here.  /* #neg=410 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.139218
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.721 seconds
Total inference time: 1.525 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.977472
   AUC PR    = 0.856318
   CLL	      = -0.136067
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.814126
   F1        = 0.897541


Total scoring time: 3.422 seconds
Parameter learned model CLL: -0.136067


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 16, 0], 'true,false,true': [1.08e-06, 0, 219], 'true,false,false,true': [5.871, 111, 50], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.81e-07, 383, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.843, 1, 219], 'true,false,true': [5.27e-09, 11, 0], 'true,false,false,true': [5.983, 126, 50], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 396, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.169, 11, 0], 'true,false,true': [0.372, 119, 269], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 400, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.324, 4, 219], 'true,false,true': [0.0, 10, 0], 'true,false,false,true': [6.046, 136, 50], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.33e-09, 370, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.352, 21, 0], 'true,false,true': [0.0, 0, 219], 'true,false,false,true': [5.895, 114, 50], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.59e-07, 390, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.539, 1, 219], 'true,false,true': [0.441, 133, 50], 'true,false,false': [0.0, 0, 0], 'false,true': [1.25e-07, 398, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.3, 11, 0], 'true,false,true': [3.32e-07, 0, 219], 'true,false,false,true': [6.052, 137, 50], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.69e-08, 363, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.827, 3, 219], 'true,false,true': [0.0, 10, 0], 'true,false,false,true': [5.911, 116, 50], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 352, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.523, 18, 0], 'true,false,true': [6.038, 115, 269], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 415, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.627, 2, 219], 'true,false,true': [0.0, 12, 0], 'true,false,false,true': [5.895, 114, 50], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.94e-09, 410, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.21785404550556414, 2.0639132990420664e-16], 'true': [-6.938893903907228e-18, 0.20677977839335543], 'true,false': [5.320959299756001e-15, 0.214112109872305], 'true,false,false': [0.214112109872305, nan], 'false': [2.0639132990420664e-16, nan]}, {'': [0.1835436164531452, -1.2560098864446215e-16], 'true': [0.0032301889716875886, 0.19476669936071406], 'true,false': [2.523234146875356e-18, 0.20338326446281177], 'true,false,false': [0.20338326446281177, nan], 'false': [-1.2560098864446215e-16, nan]}, {'': [0.14177070495748695, -1.9984014443252817e-17], 'true': [0.0026016356852112802, 0.13861109125747123], 'true,false': [0.13861109125747123, nan], 'false': [-1.9984014443252817e-17, nan]}, {'': [0.13833272883305908, 6.961398424676658e-17], 'true': [0.007866051709764251, 0.18730117134526647], 'true,false': [-1.3877787807814458e-18, 0.19655451497282933], 'true,false,false': [0.19655451497282933, nan], 'false': [6.961398424676658e-17, nan]}, {'': [0.11315468458637797, 6.490534605500916e-17], 'true': [0.005887899397536589, 0.1124333345433462], 'true,false': [-5.191179804640001e-16, 0.21192742415229052], 'true,false,false': [0.21192742415229052, nan], 'false': [6.490534605500916e-17, nan]}, {'': [0.10458153856921516, 3.9053071217970333e-17], 'true': [0.0013182722480278256, 0.19453051074740496], 'true,false': [0.19453051074740496, nan], 'false': [3.9053071217970333e-17, nan]}, {'': [0.10159650936398966, 2.0797566301518085e-17], 'true': [0.008200704442126665, 0.10247985144246186], 'true,false': [5.028955435745001e-16, 0.19588778632503162], 'true,false,false': [0.19588778632503162, nan], 'false': [2.0797566301518085e-17, nan]}, {'': [0.0954736369306549, -6.623489635547809e-17], 'true': [0.003077133732529077, 0.19918481954965683], 'true,false': [0.0, 0.2104804761213531], 'true,false,false': [0.2104804761213531, nan], 'false': [-6.623489635547809e-17, nan]}, {'': [0.09432510134966196, -1.20920676417005e-16], 'true': [0.015176640071988696, 0.09494781492590089], 'true,false': [0.09494781492590089, nan], 'false': [-1.20920676417005e-16, nan]}, {'': [0.0933430578134702, 1.001908583198312e-16], 'true': [0.0017798669943528465, 0.19780511396583814], 'true,false': [0.0, 0.21192742415229082], 'true,false,false': [0.21192742415229082, nan], 'false': [1.001908583198312e-16, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 7.45e-09, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995091;  // std dev = 1.08e-06, 219.000 (wgt'ed) examples reached here.  /* #pos=219 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.8581489350995122;  // std dev = 1.46e-07, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | | | else return -0.1418510649004879;  // std dev = 0.000, 132.000 (wgt'ed) examples reached here.  /* #neg=132 */
%   else return -0.14185106490048727;  // std dev = 3.01e-07, 420.000 (wgt'ed) examples reached here.  /* #neg=420 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.719473412210954;  // std dev = 2.92e-07, 89.000 (wgt'ed) examples reached here.  /* #pos=89 */
%   | | else return 0.7130236560984415;  // std dev = 0.074, 131.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=130 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.7194734122109547;  // std dev = 0.000, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | | | else return -0.12544463852839108;  // std dev = 8.02e-08, 123.000 (wgt'ed) examples reached here.  /* #neg=123 */
%   else return -0.12544463852839227;  // std dev = 0.000, 408.000 (wgt'ed) examples reached here.  /* #neg=408 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5561358500184298;  // std dev = 0.013, 269.000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.11492867615500006;  // std dev = 0.195, 131.000 (wgt'ed) examples reached here.  /* #neg=131 */
%   else return -0.11231637819360646;  // std dev = 0.000, 354.000 (wgt'ed) examples reached here.  /* #neg=354 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( actor(A) )
%   | | then return 0.41825795857138537;  // std dev = 0.011, 219.000 (wgt'ed) examples reached here.  /* #pos=219 */
%   | | else return -0.20689305034375224;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(A, E) )
%   | | then return -0.10135814128713865;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.41732647781909543;  // std dev = 0.000, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | | | else return -0.10135814128713842;  // std dev = 7.45e-08, 122.000 (wgt'ed) examples reached here.  /* #neg=122 */
%   else return -0.10159632948783599;  // std dev = 2.02e-07, 390.000 (wgt'ed) examples reached here.  /* #neg=390 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( actor(B) )
%   | | then return -0.09249180747876191;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return -0.17499253263333706;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.32121674770442454;  // std dev = 0.010, 219.000 (wgt'ed) examples reached here.  /* #pos=219 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.3205850014881067;  // std dev = 0.000, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | | | else return -0.09249180747876194;  // std dev = 0.000, 128.000 (wgt'ed) examples reached here.  /* #neg=128 */
%   else return -0.09269127618926087;  // std dev = 1.46e-07, 399.000 (wgt'ed) examples reached here.  /* #neg=399 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.25478876161636543;  // std dev = 1.19e-07, 89.000 (wgt'ed) examples reached here.  /* #pos=89 */
%   | | else return 0.2468312338903483;  // std dev = 0.060, 133.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=130 */
%   | else if ( director(B), actor(A) )
%   | | then return 0.25508568754276323;  // std dev = 0.000, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | | else return -0.08501543808744035;  // std dev = 0.000, 132.000 (wgt'ed) examples reached here.  /* #neg=132 */
%   else return -0.08518475138839678;  // std dev = 1.25e-07, 392.000 (wgt'ed) examples reached here.  /* #neg=392 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( female(B) )
%   | | then return -0.07863134900741466;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return -0.10537530261606406;  // std dev = 0.046, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( genre(B, E) )
%   | | then return 0.21090899480149966;  // std dev = 0.017, 219.000 (wgt'ed) examples reached here.  /* #pos=219 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.2096965724978901;  // std dev = 4.71e-08, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | | | else return -0.07863134900741466;  // std dev = 0.000, 118.000 (wgt'ed) examples reached here.  /* #neg=118 */
%   else return -0.07877675473109141;  // std dev = 1.25e-07, 406.000 (wgt'ed) examples reached here.  /* #neg=406 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.17669077911596578;  // std dev = 1.33e-07, 89.000 (wgt'ed) examples reached here.  /* #pos=89 */
%   | | else if ( actor(A) )
%   | | | then return 0.17879639478336082;  // std dev = 0.000, 130.000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | | | else return -0.1702034962397864;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(A, E) )
%   | | then return -0.07222408849052389;  // std dev = 0.003, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( actor(B) )
%   | | | then return -0.07312007216235789;  // std dev = 4.47e-08, 128.000 (wgt'ed) examples reached here.  /* #neg=128 */
%   | | | else return 0.17214632295918492;  // std dev = 0.248, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   else return -0.07324622576333727;  // std dev = 0.000, 426.000 (wgt'ed) examples reached here.  /* #neg=426 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.15337646562472193;  // std dev = 0.012, 269.000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.07011753439091452;  // std dev = 0.116, 114.000 (wgt'ed) examples reached here.  /* #neg=114 */
%   else return -0.06842697784420333;  // std dev = 0.000, 392.000 (wgt'ed) examples reached here.  /* #neg=392 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.13365771588651415;  // std dev = 9.19e-08, 89.000 (wgt'ed) examples reached here.  /* #pos=89 */
%   | | else return 0.13093734632035825;  // std dev = 0.033, 132.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=130 */
%   | else if ( genre(A, E) )
%   | | then return -0.06324790787384554;  // std dev = 0.003, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.13447304764004311;  // std dev = 1.05e-08, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | | | else return -0.06454091159199893;  // std dev = 0.032, 118.000 (wgt'ed) examples reached here.  /* #neg=118 */
%   else return -0.06419184008202557;  // std dev = 2.01e-07, 407.000 (wgt'ed) examples reached here.  /* #neg=407 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064002
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 4.549 seconds
Total inference time: 1.521 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064674
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 3.201 seconds
Refined model CLL: -0.064674


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064002
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 13.893 seconds
Total inference time: 1.521 seconds
AUC ROC: 1.0
Total revision time: 13.893
Best scored revision CLL: -0.064674


Dataset: 4_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 00:17:07
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.064002, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 13.893, 'Inference time': 1.521, 'parameter_0.8': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.139218, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 2.721, 'Inference time': 1.525}}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995086;  // std dev = 1.07e-06, 278.000 (wgt'ed) examples reached here.  /* #pos=278 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.15612873307931152;  // std dev = 6.436, 198.000 (wgt'ed) examples reached here.  /* #neg=139 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048735;  // std dev = 2.38e-07, 466.000 (wgt'ed) examples reached here.  /* #neg=466 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7045455314558454;  // std dev = 1.873, 283.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=278 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 7.45e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.11768186635854679;  // std dev = 6.519, 211.000 (wgt'ed) examples reached here.  /* #neg=152 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839235;  // std dev = 0.000, 509.000 (wgt'ed) examples reached here.  /* #neg=509 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13009358345497657;  // std dev = 0.179, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( movie(E, A) )
%   | | then return 0.3647674360562818;  // std dev = 0.371, 486.000 (wgt'ed) examples reached here.  /* #neg=149 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360589;  // std dev = 0.000, 481.000 (wgt'ed) examples reached here.  /* #neg=481 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.465771797129454;  // std dev = 0.670, 279.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=278 */
%   | else if ( genre(A, E) )
%   | | then return -0.09998517711733436;  // std dev = 5.27e-09, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.045244843336220184;  // std dev = 6.501, 208.000 (wgt'ed) examples reached here.  /* #neg=149 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783537;  // std dev = 1.58e-08, 505.000 (wgt'ed) examples reached here.  /* #neg=505 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10031225656262613;  // std dev = 0.193, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else if ( genre(B, E) )
%   | | then return 0.35589323788764093;  // std dev = 0.000, 278.000 (wgt'ed) examples reached here.  /* #pos=278 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.002919423749889663;  // std dev = 6.679, 242.000 (wgt'ed) examples reached here.  /* #neg=183 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0926912761892615;  // std dev = 0.000, 510.000 (wgt'ed) examples reached here.  /* #neg=510 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2732139515900352;  // std dev = 0.943, 281.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=278 */
%   | else if ( movie(E, A) )
%   | | then return 0.04686896007858428;  // std dev = 0.446, 208.000 (wgt'ed) examples reached here.  /* #neg=149 #pos=59 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.48e-07, 483.000 (wgt'ed) examples reached here.  /* #neg=483 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11777158773734055;  // std dev = 0.445, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | else if ( genre(B, E) )
%   | | then return 0.22752475993423346;  // std dev = 0.000, 278.000 (wgt'ed) examples reached here.  /* #pos=278 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.03282518805174693;  // std dev = 6.482, 205.000 (wgt'ed) examples reached here.  /* #neg=146 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109205;  // std dev = 1.30e-07, 498.000 (wgt'ed) examples reached here.  /* #neg=498 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18478889406581275;  // std dev = 0.844, 281.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=278 */
%   | else if ( genre(A, E) )
%   | | then return -0.07808972995948181;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.015729986848216002;  // std dev = 6.531, 213.000 (wgt'ed) examples reached here.  /* #neg=154 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333692;  // std dev = 6.91e-09, 498.000 (wgt'ed) examples reached here.  /* #neg=498 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13349219149464603;  // std dev = 0.526, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else if ( movie(E, B) )
%   | | then return 0.09643130247751715;  // std dev = 6.757, 493.000 (wgt'ed) examples reached here.  /* #neg=156 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420357;  // std dev = 0.000, 514.000 (wgt'ed) examples reached here.  /* #neg=514 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15044874087001145;  // std dev = 0.000, 278.000 (wgt'ed) examples reached here.  /* #pos=278 */
%   | else if ( genre(A, E) )
%   | | then return -0.06415359296422289;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.009066164394280323;  // std dev = 6.543, 215.000 (wgt'ed) examples reached here.  /* #neg=156 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202537;  // std dev = 1.09e-08, 505.000 (wgt'ed) examples reached here.  /* #neg=505 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.134543
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.391 seconds
Total inference time: 1.59 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.978805
   AUC PR    = 0.865091
   CLL	      = -0.132039
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.824926
   F1        = 0.904065


Total scoring time: 3.096 seconds
Parameter learned model CLL: -0.132039


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 18, 0], 'true,false,true': [1.07e-06, 0, 278], 'true,false,false,true': [6.436, 139, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.38e-07, 466, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.873, 5, 278], 'true,false,true': [7.45e-09, 16, 0], 'true,false,false,true': [6.519, 152, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 509, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.179, 19, 0], 'true,false,true': [0.371, 149, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 481, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.67, 1, 278], 'true,false,true': [5.27e-09, 17, 0], 'true,false,false,true': [6.501, 149, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.58e-08, 505, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.193, 22, 0], 'true,false,true': [0.0, 0, 278], 'true,false,false,true': [6.679, 183, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 510, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.943, 3, 278], 'true,false,true': [0.446, 149, 59], 'true,false,false': [0.0, 0, 0], 'false,true': [1.48e-07, 483, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.445, 31, 0], 'true,false,true': [0.0, 0, 278], 'true,false,false,true': [6.482, 146, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.3e-07, 498, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.844, 3, 278], 'true,false,true': [0.0, 18, 0], 'true,false,false,true': [6.531, 154, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [6.91e-09, 498, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.526, 22, 0], 'true,false,true': [6.757, 156, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 514, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 278], 'true,false,true': [0.0, 20, 0], 'true,false,false,true': [6.543, 156, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.09e-08, 505, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.21680817584291107, 1.2198158553821462e-16], 'true': [-3.0839528461809902e-18, 0.20674299131417545], 'true,false': [4.089454594302735e-15, 0.2091878379757172], 'true,false,false': [0.2091878379757172, nan], 'false': [1.2198158553821462e-16, nan]}, {'': [0.18204141126972048, -1.3959582234972498e-16], 'true': [0.012389994285435506, 0.1911078218836367], 'true,false': [3.469446951953614e-18, 0.20143303160306417], 'true,false,false': [0.20143303160306417, nan], 'false': [-1.3959582234972498e-16, nan]}, {'': [0.14117257824504975, -5.539574343244025e-18], 'true': [0.0016854881434927363, 0.1374121908170217], 'true,false': [0.1374121908170217, nan], 'false': [-5.539574343244025e-18, nan]}, {'': [0.1314200561277661, 2.497452190047877e-16], 'true': [0.001609027815204702, 0.18931507459889893], 'true,false': [1.6326809185664067e-18, 0.2031943417159761], 'true,false,false': [0.2031943417159761, nan], 'false': [2.497452190047877e-16, nan]}, {'': [0.11637504985781441, -3.657205257588751e-17], 'true': [0.0016902878551848686, 0.11783179209548303], 'true,false': [-1.610222746506702e-15, 0.18436240693941522], 'true,false,false': [0.18436240693941522, nan], 'false': [-3.657205257588751e-17, nan]}, {'': [0.09911929628466006, 4.50525285355136e-17], 'true': [0.0031674742860640127, 0.19930642020031364], 'true,false': [0.19930642020031364, nan], 'false': [4.50525285355136e-17, nan]}, {'': [0.09474741039006535, 3.3886325249603174e-17], 'true': [0.006391181615621969, 0.09625741864644619], 'true,false': [-5.239613698950379e-16, 0.20497323022010813], 'true,false,false': [0.20497323022010813, nan], 'false': [3.3886325249603174e-17, nan]}, {'': [0.0926956197457671, 4.726250626918337e-17], 'true': [0.0025379497896898446, 0.18529597248637694], 'true,false': [-2.3129646346357427e-18, 0.20026890608124542], 'true,false,false': [0.20026890608124542, nan], 'false': [4.726250626918337e-17, nan]}, {'': [0.09134144049836386, -1.1836619017404393e-16], 'true': [0.012586065057674317, 0.09259757646430798], 'true,false': [0.09259757646430798, nan], 'false': [-1.1836619017404393e-16, nan]}, {'': [0.09025048568609392, 1.187169174846702e-16], 'true': [0.0, 0.18240352979797952], 'true,false': [0.0, 0.19911303407247286], 'true,false,false': [0.19911303407247286, nan], 'false': [1.187169174846702e-16, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995086;  // std dev = 1.07e-06, 278.000 (wgt'ed) examples reached here.  /* #pos=278 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.8581489350995125;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.14185106490048816;  // std dev = 0.000, 160.000 (wgt'ed) examples reached here.  /* #neg=160 */
%   else return -0.1418510649004878;  // std dev = 0.000, 507.000 (wgt'ed) examples reached here.  /* #neg=507 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109551;  // std dev = 0.000, 111.000 (wgt'ed) examples reached here.  /* #pos=111 */
%   | | else return 0.6997092472813811;  // std dev = 0.128, 171.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=167 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.7194734122109543;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.12544463852839144;  // std dev = 0.000, 170.000 (wgt'ed) examples reached here.  /* #neg=170 */
%   else return -0.1254446385283923;  // std dev = 0.000, 512.000 (wgt'ed) examples reached here.  /* #neg=512 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14025313150122778;  // std dev = 0.168, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( director(B), actor(A) )
%   | | then return 0.5577822191545396;  // std dev = 0.045, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | | else return -0.11231637819360632;  // std dev = 8.16e-08, 160.000 (wgt'ed) examples reached here.  /* #neg=160 */
%   else return -0.11231637819360567;  // std dev = 0.000, 554.000 (wgt'ed) examples reached here.  /* #neg=554 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4198170880716632;  // std dev = 0.039, 278.000 (wgt'ed) examples reached here.  /* #pos=278 */
%   | else if ( genre(A, E) )
%   | | then return -0.09907464647128929;  // std dev = 9.13e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.4169261928956809;  // std dev = 1.03e-07, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.10159632948783649;  // std dev = 0.000, 179.000 (wgt'ed) examples reached here.  /* #neg=179 */
%   else return -0.10159632948783533;  // std dev = 3.67e-07, 516.000 (wgt'ed) examples reached here.  /* #neg=516 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10218754512351705;  // std dev = 0.180, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( genre(B, E) )
%   | | then return 0.322275899143685;  // std dev = 0.035, 278.000 (wgt'ed) examples reached here.  /* #pos=278 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.32031365226348985;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.09269127618926067;  // std dev = 7.88e-08, 165.000 (wgt'ed) examples reached here.  /* #neg=165 */
%   else return -0.09269127618926129;  // std dev = 0.000, 466.000 (wgt'ed) examples reached here.  /* #neg=466 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2560057908904822;  // std dev = 0.032, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.08892320297341577;  // std dev = 0.339, 171.000 (wgt'ed) examples reached here.  /* #neg=171 */
%   else return -0.08518475138839678;  // std dev = 1.49e-07, 498.000 (wgt'ed) examples reached here.  /* #neg=498 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( female(B) )
%   | | then return -0.07601717167848919;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.10121698966618552;  // std dev = 0.059, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( genre(B, E) )
%   | | then return 0.21055163528587678;  // std dev = 0.027, 278.000 (wgt'ed) examples reached here.  /* #pos=278 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.20938272519557222;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.07850587851509741;  // std dev = 1.05e-08, 155.000 (wgt'ed) examples reached here.  /* #neg=155 */
%   else return -0.07877675473109233;  // std dev = 0.000, 550.000 (wgt'ed) examples reached here.  /* #neg=550 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.17594657301295272;  // std dev = 0.000, 111.000 (wgt'ed) examples reached here.  /* #pos=111 */
%   | | else return 0.1717596735061522;  // std dev = 0.053, 170.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=167 */
%   | else if ( genre(A, E) )
%   | | then return -0.07015600793479863;  // std dev = 0.004, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.17682141117230707;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.07301119057090054;  // std dev = 0.000, 140.000 (wgt'ed) examples reached here.  /* #neg=140 */
%   else return -0.07324622576333684;  // std dev = 1.74e-07, 514.000 (wgt'ed) examples reached here.  /* #neg=514 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.1535288155435474;  // std dev = 0.027, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else if ( actor(B) )
%   | | then return -0.06793277794408165;  // std dev = 0.011, 164.000 (wgt'ed) examples reached here.  /* #neg=164 */
%   | | else return -0.16056617449558064;  // std dev = 0.092, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return -0.06842697784420354;  // std dev = 0.000, 493.000 (wgt'ed) examples reached here.  /* #neg=493 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.12847321041472276;  // std dev = 0.047, 283.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=278 */
%   | else if ( genre(A, E) )
%   | | then return -0.061307945147538394;  // std dev = 0.003, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.13372891590835567;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.06386978394091951;  // std dev = 0.012, 169.000 (wgt'ed) examples reached here.  /* #neg=169 */
%   else return -0.06419184008202537;  // std dev = 2.45e-07, 498.000 (wgt'ed) examples reached here.  /* #neg=498 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064245
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 4.618 seconds
Total inference time: 1.486 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.065133
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 3.454 seconds
Refined model CLL: -0.065133


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064245
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 14.559000000000001 seconds
Total inference time: 1.486 seconds
AUC ROC: 1.0
Total revision time: 14.559000000000001
Best scored revision CLL: -0.065133


Dataset: 4_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 00:17:25
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.064245, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 14.559000000000001, 'Inference time': 1.486, 'parameter_1.0': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.134543, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 3.391, 'Inference time': 1.59}}


Starting fold 5

Target train facts examples: 915
Target train pos examples: 337
Target train neg examples: 12165

Target test facts examples: 163
Target test pos	 examples: 45
Target test neg examples: 2071

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995126;  // std dev = 0.000, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.012818806835971608;  // std dev = 1.867, 31.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048763;  // std dev = 8.94e-08, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109542;  // std dev = 8.43e-08, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.006964459076666403;  // std dev = 1.862, 30.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839136;  // std dev = 0.000, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( movie(E, A) )
%   | | then return 0.37423966746295034;  // std dev = 0.326, 93.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360621;  // std dev = 7.30e-08, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4516308659403269;  // std dev = 0.665, 64.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=63 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.06568835819207447;  // std dev = 1.871, 32.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783627;  // std dev = 3.95e-09, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.3535449848763611;  // std dev = 0.000, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.051724030939401644;  // std dev = 1.867, 31.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926097;  // std dev = 4.83e-08, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2774716553279005;  // std dev = 0.000, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | else if ( movie(E, A) )
%   | | then return -0.06922010043749098;  // std dev = 0.295, 41.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=4 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839682;  // std dev = 5.37e-08, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11597884707322523;  // std dev = 0.234, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(B, E) )
%   | | then return 0.22539312881697882;  // std dev = 6.32e-08, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.018285704805650695;  // std dev = 1.809, 22.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109158;  // std dev = 6.14e-08, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1884822151345832;  // std dev = 4.71e-08, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | else if ( genre(A, E) )
%   | | then return -0.0718176039344115;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.023192042549424842;  // std dev = 1.852, 28.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333707;  // std dev = 0.000, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11405720446528521;  // std dev = 0.257, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( movie(E, B) )
%   | | then return 0.08384419682417102;  // std dev = 2.144, 99.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420265;  // std dev = 4.56e-09, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15030268033866537;  // std dev = 4.71e-08, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | else if ( genre(A, E) )
%   | | then return -0.060371159747594126;  // std dev = 1.86e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.07205495671941138;  // std dev = 1.895, 39.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.971565
   AUC PR    = 0.823063
   CLL	      = -0.101363
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.875


Total learning time: 1.504 seconds
Total inference time: 1.475 seconds
AUC ROC: 0.971565


Results scoring model
   AUC ROC   = 0.99297
   AUC PR    = 0.956897
   CLL	      = -0.094443
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.940299
   F1        = 0.969231


Total scoring time: 1.706 seconds
Parameter learned model CLL: -0.094443


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 6, 0], 'true,false,true': [0.0, 0, 63], 'true,false,false,true': [1.867, 27, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.94e-08, 99, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [8.43e-08, 0, 63], 'true,false,true': [0.0, 3, 0], 'true,false,false,true': [1.862, 26, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 101, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 4, 0], 'true,false,true': [0.326, 26, 67], 'true,false,false': [0.0, 0, 0], 'false,true': [7.3e-08, 89, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.665, 1, 63], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [1.871, 28, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.95e-09, 98, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 4, 0], 'true,false,true': [0.0, 0, 63], 'true,false,false,true': [1.867, 27, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.83e-08, 100, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 63], 'true,false,true': [0.295, 37, 4], 'true,false,false': [0.0, 0, 0], 'false,true': [5.37e-08, 95, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.234, 7, 0], 'true,false,true': [6.32e-08, 0, 63], 'true,false,false,true': [1.809, 18, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [6.14e-08, 105, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [4.71e-08, 0, 63], 'true,false,true': [0.0, 5, 0], 'true,false,false,true': [1.852, 24, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 95, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.257, 6, 0], 'true,false,true': [2.144, 32, 67], 'true,false,false': [0.0, 0, 0], 'false,true': [4.56e-09, 88, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [4.71e-08, 0, 63], 'true,false,true': [1.86e-09, 5, 0], 'true,false,false,true': [1.895, 35, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 91, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.22109999999999919, 8.074349270001139e-17], 'true': [-6.938893903907228e-18, 0.204730647351742], 'true,false': [-7.894919286223335e-16, 0.11238293444328809], 'true,false,false': [0.11238293444328809, nan], 'false': [8.074349270001139e-17, nan]}, {'': [0.15911063090367616, -1.0992307174506501e-17], 'true': [1.1278456123176193e-16, 0.10621063339124172], 'true,false': [0.0, 0.1155555555555556], 'true,false,false': [0.1155555555555556, nan], 'false': [-1.0992307174506501e-17, nan]}, {'': [0.11115209579019723, 5.98771968337163e-17], 'true': [0.0, 0.10617048942022028], 'true,false': [0.10617048942022028, nan], 'false': [5.98771968337163e-17, nan]}, {'': [0.10138595098536853, 1.8126090197961738e-17], 'true': [0.00691459672239067, 0.1030125609634646], 'true,false': [0.0, 0.10937500000000011], 'true,false,false': [0.10937500000000011, nan], 'false': [1.8126090197961738e-17, nan]}, {'': [0.07419553834052078, 2.3314683517128286e-17], 'true': [0.0, 0.07336469007410831], 'true,false': [-3.806478941571965e-16, 0.11238293444328812], 'true,false,false': [0.11238293444328812, nan], 'false': [2.3314683517128286e-17, nan]}, {'': [0.0631250422359715, 3.0385051200267444e-17], 'true': [-1.1278456123176193e-16, 0.08731152055188597], 'true,false': [0.08731152055188597, nan], 'false': [3.0385051200267444e-17, nan]}, {'': [0.049589670704993545, 3.595007889262412e-17], 'true': [0.007791431427111875, 0.04673109875481537], 'true,false': [6.344131569286608e-17, 0.14876033057851232], 'true,false,false': [0.14876033057851232, nan], 'false': [3.595007889262412e-17, nan]}, {'': [0.046642229483803366, -8.18059070776431e-18], 'true': [3.52451753849256e-17, 0.10420007297856551], 'true,false': [0.0, 0.12244897959183676], 'true,false,false': [0.12244897959183676, nan], 'false': [-8.18059070776431e-18, nan]}, {'': [0.0465065357843734, 2.0185873175002847e-17], 'true': [0.01098969892583918, 0.046421073372566964], 'true,false': [0.046421073372566964, nan], 'false': [2.0185873175002847e-17, nan]}, {'': [0.04538311007339777, -1.342027831964475e-17], 'true': [3.52451753849256e-17, 0.08159883141296259], 'true,false': [6.938893903907229e-19, 0.09204470742932298], 'true,false,false': [0.09204470742932298, nan], 'false': [-1.342027831964475e-17, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995126;  // std dev = 0.000, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | | else if ( actor(B) )
%   | | | then return -0.1418510649004877;  // std dev = 1.83e-08, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.14185106490048763;  // std dev = 8.30e-08, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109542;  // std dev = 4.21e-08, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else return 0.6782578975407427;  // std dev = 0.182, 41.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=39 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( actor(B) )
%   | | | then return -0.12544463852839136;  // std dev = 1.49e-08, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.12544463852839133;  // std dev = 0.000, 111.000 (wgt'ed) examples reached here.  /* #neg=111 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.18434277183532835;  // std dev = 0.088, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( director(B), actor(A) )
%   | | then return 0.5612763507223999;  // std dev = 0.041, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | | else if ( female(A) )
%   | | | then return -0.11231637819360636;  // std dev = 1.05e-08, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return -0.13077844403027913;  // std dev = 0.323, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else return -0.11231637819360618;  // std dev = 8.82e-08, 113.000 (wgt'ed) examples reached here.  /* #neg=113 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4222965459229373;  // std dev = 0.039, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | else if ( genre(A, E) )
%   | | then return -0.09520822706447779;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( actor(B) )
%   | | | then return -0.10048115294154715;  // std dev = 0.004, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | | else return 0.4160770212588475;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.10159632948783627;  // std dev = 4.21e-08, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.0873167399043491;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.3239648277956129;  // std dev = 0.035, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | | else if ( actor(B) )
%   | | | then return -0.09178252936684475;  // std dev = 0.003, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | | else return 0.31973808446927554;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.09269127618926098;  // std dev = 4.59e-08, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.25253076360286636;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else return 0.24769686157745036;  // std dev = 0.079, 40.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=39 */
%   | else if ( actor(B) )
%   | | then return -0.08376254061971733;  // std dev = 0.009, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | else return 0.08470329383160413;  // std dev = 0.759, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.08518475138839682;  // std dev = 5.87e-08, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07461101777026201;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.21264747252714664;  // std dev = 0.030, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | | else if ( actor(B) )
%   | | | then return -0.0780938945419212;  // std dev = 0.003, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | | else return 0.23877321769655158;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.0787767547310916;  // std dev = 5.58e-08, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17921555601786135;  // std dev = 0.026, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | else if ( genre(A, E) )
%   | | then return -0.06962027346174117;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.1981034381226131;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.08921658264656612;  // std dev = 0.589, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   else return -0.07324622576333707;  // std dev = 0.000, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.15519581971545443;  // std dev = 0.036, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else if ( actor(A) )
%   | | then return -0.06704565899271003;  // std dev = 0.003, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | else if ( female(B) )
%   | | | then return -0.06566922126034214;  // std dev = 0.001, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.18209841262279777;  // std dev = 0.523, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.06842697784420265;  // std dev = 4.47e-08, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.13184426702584814;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else return 0.12676634129606273;  // std dev = 0.065, 40.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=39 */
%   | else if ( genre(A, E) )
%   | | then return -0.0562534489451497;  // std dev = 0.006, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( actor(A) )
%   | | | then return -0.0416606661593132;  // std dev = 0.400, 40.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=4 */
%   | | | else return -0.2803437910700663;  // std dev = 0.596, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.06419184008202626;  // std dev = 0.000, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064421
   Precision = 0.978261 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.989011


Total learning time: 2.258 seconds
Total inference time: 1.604 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.067025
   Precision = 0.905405 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.950355


Total scoring time: 1.654 seconds
Refined model CLL: -0.067025


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064421
   Precision = 0.978261 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.989011


Total learning time: 7.122 seconds
Total inference time: 1.604 seconds
AUC ROC: 1.0
Total revision time: 7.122
Best scored revision CLL: -0.067025


Dataset: 4_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 00:17:36
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.064421, 'Precision': [0.978261, 0.5], 'Recall': 1.0, 'F1': 0.989011, 'Learning time': 7.122, 'Inference time': 1.604, 'parameter_0.2': {'AUC ROC': 0.971565, 'AUC PR': 0.823063, 'CLL': -0.101363, 'Precision': [1.0, 0.5], 'Recall': 0.777778, 'F1': 0.875, 'Learning time': 1.504, 'Inference time': 1.475}}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995106;  // std dev = 6.64e-07, 121.000 (wgt'ed) examples reached here.  /* #pos=121 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.03870449065506793;  // std dev = 3.264, 72.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=13 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004884;  // std dev = 0.000, 199.000 (wgt'ed) examples reached here.  /* #neg=199 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7125478544180098;  // std dev = 0.841, 122.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=121 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.011908424724707881;  // std dev = 3.307, 82.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=13 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1254446385283916;  // std dev = 0.000, 193.000 (wgt'ed) examples reached here.  /* #neg=193 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12181529696585312;  // std dev = 0.109, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( movie(E, A) )
%   | | then return 0.34599233845513716;  // std dev = 0.352, 199.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=134 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360658;  // std dev = 0.000, 196.000 (wgt'ed) examples reached here.  /* #neg=196 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4598599885825765;  // std dev = 0.949, 123.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=121 */
%   | else if ( genre(A, E) )
%   | | then return -0.10073259549379585;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.02685996197679567;  // std dev = 3.176, 58.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=13 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783653;  // std dev = 0.000, 201.000 (wgt'ed) examples reached here.  /* #neg=201 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12256492899511708;  // std dev = 0.259, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( genre(B, E) )
%   | | then return 0.3597270278483931;  // std dev = 0.000, 121.000 (wgt'ed) examples reached here.  /* #pos=121 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.007536254489291576;  // std dev = 3.237, 67.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=13 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926054;  // std dev = 9.66e-08, 210.000 (wgt'ed) examples reached here.  /* #neg=210 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2683978649845832;  // std dev = 0.937, 124.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=121 */
%   | else if ( movie(E, A) )
%   | | then return -0.04499785398504518;  // std dev = 0.351, 89.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=13 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 7.60e-08, 199.000 (wgt'ed) examples reached here.  /* #neg=199 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.20035873929763964;  // std dev = 0.243, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.23064477999748062;  // std dev = 1.49e-07, 121.000 (wgt'ed) examples reached here.  /* #pos=121 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.03470721763333844;  // std dev = 3.307, 82.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=13 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109147;  // std dev = 7.74e-08, 186.000 (wgt'ed) examples reached here.  /* #neg=186 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1884024165560902;  // std dev = 0.470, 122.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=121 */
%   | else if ( genre(A, E) )
%   | | then return -0.06551202054472696;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.007334902735727271;  // std dev = 3.264, 72.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=13 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333666;  // std dev = 8.43e-09, 200.000 (wgt'ed) examples reached here.  /* #neg=200 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09841389433454664;  // std dev = 0.238, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( movie(E, B) )
%   | | then return 0.09944990594088512;  // std dev = 3.472, 194.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=134 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420262;  // std dev = 5.74e-09, 195.000 (wgt'ed) examples reached here.  /* #neg=195 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14415125882573088;  // std dev = 0.631, 123.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=121 */
%   | else if ( genre(A, E) )
%   | | then return -0.0561632264327337;  // std dev = 1.86e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.04941042568895024;  // std dev = 3.318, 85.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=13 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 198.000 (wgt'ed) examples reached here.  /* #neg=198 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.971565
   AUC PR    = 0.823063
   CLL	      = -0.109594
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.875


Total learning time: 1.998 seconds
Total inference time: 1.598 seconds
AUC ROC: 0.971565


Results scoring model
   AUC ROC   = 0.988177
   AUC PR    = 0.926285
   CLL	      = -0.104884
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.902985
   F1        = 0.94902


Total scoring time: 2.217 seconds
Parameter learned model CLL: -0.104884


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 10, 0], 'true,false,true': [6.64e-07, 0, 121], 'true,false,false,true': [3.264, 59, 13], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 199, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.841, 1, 121], 'true,false,true': [0.0, 7, 0], 'true,false,false,true': [3.307, 69, 13], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 193, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.109, 12, 0], 'true,false,true': [0.352, 65, 134], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 196, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.949, 2, 121], 'true,false,true': [0.0, 10, 0], 'true,false,false,true': [3.176, 45, 13], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 201, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.259, 13, 0], 'true,false,true': [0.0, 0, 121], 'true,false,false,true': [3.237, 54, 13], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.66e-08, 210, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.937, 3, 121], 'true,false,true': [0.351, 76, 13], 'true,false,false': [0.0, 0, 0], 'false,true': [7.6e-08, 199, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.243, 4, 0], 'true,false,true': [1.49e-07, 0, 121], 'true,false,false,true': [3.307, 69, 13], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.74e-08, 186, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.47, 1, 121], 'true,false,true': [0.0, 4, 0], 'true,false,false,true': [3.264, 59, 13], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.43e-09, 200, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.238, 7, 0], 'true,false,true': [3.472, 60, 134], 'true,false,false': [0.0, 0, 0], 'false,true': [5.74e-09, 195, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.631, 2, 121], 'true,false,true': [1.86e-09, 8, 0], 'true,false,false,true': [3.318, 72, 13], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 198, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.22436846319979092, -2.410132395166169e-16], 'true': [-1.1102230246251566e-17, 0.21224730865258581], 'true,false': [3.640797489018695e-15, 0.14795524691357972], 'true,false,false': [0.14795524691357972, nan], 'false': [-2.410132395166169e-16, nan]}, {'': [0.17921843291587625, -4.6019607238348455e-17], 'true': [0.005803565439953474, 0.1242775125185078], 'true,false': [-1.982541115402065e-18, 0.13340273646638873], 'true,false,false': [0.13340273646638873, nan], 'false': [-4.6019607238348455e-17, nan]}, {'': [0.12832593195414999, -3.8517941670668696e-17], 'true': [0.0009925240362591594, 0.12355822506981264], 'true,false': [0.12355822506981264, nan], 'false': [-3.8517941670668696e-17, nan]}, {'': [0.10504110057984142, -9.058536121319685e-17], 'true': [0.007321546319163707, 0.15036859606059935], 'true,false': [0.0, 0.17390011890606422], 'true,false,false': [0.17390011890606422, nan], 'false': [-9.058536121319685e-17, nan]}, {'': [0.08886806557666392, 4.4408920985006264e-17], 'true': [0.0051490774997215525, 0.08667049573587872], 'true,false': [-6.459479416000911e-16, 0.1563822677656489], 'true,false,false': [0.1563822677656489, nan], 'false': [4.4408920985006264e-17, nan]}, {'': [0.07942318502216934, 2.901085290477796e-17], 'true': [0.007086678683370168, 0.12302873202363993], 'true,false': [0.12302873202363993, nan], 'false': [2.901085290477796e-17, nan]}, {'': [0.07174328774355772, 3.223228136008519e-17], 'true': [0.014752560754067827, 0.07084002684946847], 'true,false': [1.8350793795457133e-16, 0.13340273646638923], 'true,false,false': [0.13340273646638923, nan], 'false': [3.223228136008519e-17, nan]}, {'': [0.06432966415019617, 7.105427357601002e-17], 'true': [0.0018111666129111469, 0.14033688872881564], 'true,false': [0.0, 0.14795524691357986], 'true,false,false': [0.14795524691357986, nan], 'false': [7.105427357601002e-17, nan]}, {'': [0.061567496062195914, 3.302201816833799e-17], 'true': [0.008125517883056486, 0.062132379120105746], 'true,false': [0.062132379120105746, nan], 'false': [3.302201816833799e-17, nan]}, {'': [0.062064905711769154, -2.2428747972225387e-18], 'true': [0.0032345616216730723, 0.11840965728560789], 'true,false': [4.336808689942018e-19, 0.1295501730103808], 'true,false,false': [0.1295501730103808, nan], 'false': [-2.2428747972225387e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995106;  // std dev = 6.64e-07, 121.000 (wgt'ed) examples reached here.  /* #pos=121 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.14185106490048766;  // std dev = 6.83e-08, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
%   else return -0.14185106490048843;  // std dev = 0.000, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109553;  // std dev = 0.000, 121.000 (wgt'ed) examples reached here.  /* #pos=121 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( actor(B) )
%   | | | then return -0.1254446385283916;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | | | else return 0.7194734122109542;  // std dev = 4.21e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else return -0.12544463852839163;  // std dev = 0.000, 198.000 (wgt'ed) examples reached here.  /* #neg=198 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13151669825345078;  // std dev = 0.105, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( director(B) )
%   | | then return 0.5553664367462834;  // std dev = 4.92e-07, 134.000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | | else return -0.11231637819360626;  // std dev = 5.05e-08, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   else return -0.1123163781936066;  // std dev = 0.000, 199.000 (wgt'ed) examples reached here.  /* #neg=199 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.4175135841583106;  // std dev = 0.000, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | else return 0.40952963535718107;  // std dev = 0.070, 78.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=77 */
%   | else if ( genre(A, E) )
%   | | then return -0.09985718654392796;  // std dev = 3.73e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.41751358415831036;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.11085230634854433;  // std dev = 0.403, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
%   else return -0.10159632948783649;  // std dev = 0.000, 175.000 (wgt'ed) examples reached here.  /* #neg=175 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( actor(B) )
%   | | then return -0.09123320509562059;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return -0.2800195340966015;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.3218202865171691;  // std dev = 0.009, 121.000 (wgt'ed) examples reached here.  /* #pos=121 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.3207118471601497;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.09888030473507886;  // std dev = 0.310, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   else return -0.09269127618926061;  // std dev = 8.56e-08, 179.000 (wgt'ed) examples reached here.  /* #neg=179 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.25585524603675924;  // std dev = 0.008, 134.000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.08982416935266298;  // std dev = 0.287, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
%   else return -0.08518475138839678;  // std dev = 7.30e-08, 192.000 (wgt'ed) examples reached here.  /* #neg=192 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07729167227517512;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(B, E) )
%   | | then return 0.21030417029053625;  // std dev = 0.007, 121.000 (wgt'ed) examples reached here.  /* #pos=121 */
%   | | else if ( actor(B) )
%   | | | then return -0.07733148410165933;  // std dev = 3.07e-08, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   | | | else return 0.2096445238195734;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else return -0.07877675473109146;  // std dev = 7.74e-08, 196.000 (wgt'ed) examples reached here.  /* #neg=196 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17440983984983854;  // std dev = 0.375, 122.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=121 */
%   | else if ( genre(A, E) )
%   | | then return -0.07195637992992296;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( actor(B) )
%   | | | then return -0.07199099823971498;  // std dev = 0.000, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   | | | else return 0.17701347247484284;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else return -0.07324622576333664;  // std dev = 1.21e-07, 203.000 (wgt'ed) examples reached here.  /* #neg=203 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.1533740200860331;  // std dev = 0.006, 134.000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.07162087064196615;  // std dev = 0.225, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
%   else return -0.06842697784420261;  // std dev = 6.99e-08, 216.000 (wgt'ed) examples reached here.  /* #neg=216 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.13397437695826964;  // std dev = 2.58e-08, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | else return 0.12601799691120644;  // std dev = 0.055, 79.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=77 */
%   | else if ( genre(A, E) )
%   | | then return -0.06293820337089132;  // std dev = 1.86e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.1338774620831394;  // std dev = 1.29e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.06707964522944022;  // std dev = 0.278, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   else return -0.06419184008202626;  // std dev = 0.000, 201.000 (wgt'ed) examples reached here.  /* #neg=201 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063723
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.184 seconds
Total inference time: 1.636 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.065897
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.15 seconds
Refined model CLL: -0.065897


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063723
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 9.549 seconds
Total inference time: 1.636 seconds
AUC ROC: 1.0
Total revision time: 9.549
Best scored revision CLL: -0.065897


Dataset: 4_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 00:17:49
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063723, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 9.549, 'Inference time': 1.636, 'parameter_0.4': {'AUC ROC': 0.971565, 'AUC PR': 0.823063, 'CLL': -0.109594, 'Precision': [1.0, 0.5], 'Recall': 0.777778, 'F1': 0.875, 'Learning time': 1.998, 'Inference time': 1.598}}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995094;  // std dev = 1.08e-06, 179.000 (wgt'ed) examples reached here.  /* #pos=179 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.05306418933680007;  // std dev = 4.303, 118.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=23 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048768;  // std dev = 1.74e-07, 325.000 (wgt'ed) examples reached here.  /* #neg=325 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109567;  // std dev = 0.000, 179.000 (wgt'ed) examples reached here.  /* #pos=179 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.04814709777220538;  // std dev = 4.299, 117.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=23 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839202;  // std dev = 0.000, 266.000 (wgt'ed) examples reached here.  /* #neg=266 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14111685828337303;  // std dev = 0.141, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( movie(E, A) )
%   | | then return 0.3647128152858819;  // std dev = 0.349, 289.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=202 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360682;  // std dev = 0.000, 304.000 (wgt'ed) examples reached here.  /* #neg=304 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.46076422365164454;  // std dev = 0.666, 180.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=179 */
%   | else if ( genre(A, E) )
%   | | then return -0.09899757789545373;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.0067315772014568094;  // std dev = 4.285, 114.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=23 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783662;  // std dev = 0.000, 295.000 (wgt'ed) examples reached here.  /* #neg=295 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12350755185089098;  // std dev = 0.181, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.3536349235838254;  // std dev = 0.000, 179.000 (wgt'ed) examples reached here.  /* #pos=179 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.026274938780046497;  // std dev = 4.340, 127.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=23 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926042;  // std dev = 2.05e-07, 344.000 (wgt'ed) examples reached here.  /* #neg=344 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.27155078576912933;  // std dev = 0.761, 181.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=179 */
%   | else if ( movie(E, A) )
%   | | then return -0.009311924418744677;  // std dev = 0.384, 125.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=23 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.05e-07, 310.000 (wgt'ed) examples reached here.  /* #neg=310 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1237277795439693;  // std dev = 0.307, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( genre(B, E) )
%   | | then return 0.2264817150432875;  // std dev = 9.42e-08, 179.000 (wgt'ed) examples reached here.  /* #pos=179 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.019565136954003123;  // std dev = 4.232, 104.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=23 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109143;  // std dev = 1.49e-08, 317.000 (wgt'ed) examples reached here.  /* #neg=317 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18658694749825488;  // std dev = 0.481, 180.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=179 */
%   | else if ( genre(A, E) )
%   | | then return -0.07149439280621908;  // std dev = 5.89e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.004756123494148553;  // std dev = 4.290, 115.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=23 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333693;  // std dev = 6.11e-09, 286.000 (wgt'ed) examples reached here.  /* #neg=286 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.06689136228542612;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( movie(E, B) )
%   | | then return 0.08926625204988246;  // std dev = 4.587, 302.000 (wgt'ed) examples reached here.  /* #neg=100 #pos=202 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420296;  // std dev = 0.000, 291.000 (wgt'ed) examples reached here.  /* #neg=291 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14024746707147515;  // std dev = 0.929, 183.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=179 */
%   | else if ( genre(A, E) )
%   | | then return -0.06283523360845646;  // std dev = 4.56e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.0044404472815254255;  // std dev = 4.227, 103.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=23 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0641918400820259;  // std dev = 7.21e-09, 312.000 (wgt'ed) examples reached here.  /* #neg=312 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.971565
   AUC PR    = 0.823063
   CLL	      = -0.117024
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.875


Total learning time: 2.595 seconds
Total inference time: 1.444 seconds
AUC ROC: 0.971565


Results scoring model
   AUC ROC   = 0.986249
   AUC PR    = 0.913354
   CLL	      = -0.112317
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.886139
   F1        = 0.939633


Total scoring time: 2.59 seconds
Parameter learned model CLL: -0.112317


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 16, 0], 'true,false,true': [1.08e-06, 0, 179], 'true,false,false,true': [4.303, 95, 23], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.74e-07, 325, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 179], 'true,false,true': [5.27e-09, 11, 0], 'true,false,false,true': [4.299, 94, 23], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 266, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.141, 8, 0], 'true,false,true': [0.349, 87, 202], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 304, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.666, 1, 179], 'true,false,true': [0.0, 11, 0], 'true,false,false,true': [4.285, 91, 23], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 295, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.181, 6, 0], 'true,false,true': [0.0, 0, 179], 'true,false,false,true': [4.34, 104, 23], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.05e-07, 344, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.761, 2, 179], 'true,false,true': [0.384, 102, 23], 'true,false,false': [0.0, 0, 0], 'false,true': [1.05e-07, 310, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.307, 11, 0], 'true,false,true': [9.42e-08, 0, 179], 'true,false,false,true': [4.232, 81, 23], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.49e-08, 317, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.481, 1, 179], 'true,false,true': [5.89e-09, 12, 0], 'true,false,false,true': [4.29, 92, 23], 'true,false,false,false': [0.0, 0, 0], 'false,true': [6.11e-09, 286, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 10, 0], 'true,false,true': [4.587, 100, 202], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 291, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.929, 4, 179], 'true,false,true': [4.56e-09, 11, 0], 'true,false,false,true': [4.227, 80, 23], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.21e-09, 312, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.2288683154875568, 9.29171269840131e-17], 'true': [-6.938893903907228e-18, 0.21755149701278126], 'true,false': [6.510000484059019e-15, 0.15692329790290244], 'true,false,false': [0.15692329790290244, nan], 'false': [9.29171269840131e-17, nan]}, {'': [0.17566166234588898, -9.683148184700613e-17], 'true': [-3.2550002420295093e-15, 0.1467314167644347], 'true,false': [2.523234146875356e-18, 0.15793702973190027], 'true,false,false': [0.15793702973190027, nan], 'false': [-9.683148184700613e-17, nan]}, {'': [0.12557835461638178, -6.573688961596321e-17], 'true': [0.00248840296020314, 0.12209373851658123], 'true,false': [0.12209373851658123, nan], 'false': [-6.573688961596321e-17, nan]}, {'': [0.11664460645083993, -5.419393747322798e-17], 'true': [0.002466350525062724, 0.14756041350499186], 'true,false': [0.0, 0.16104955370883373], 'true,false,false': [0.16104955370883373, nan], 'false': [-5.419393747322798e-17, nan]}, {'': [0.09676410042769616, 1.2264091551091845e-16], 'true': [0.005443824864454584, 0.09659201209314554], 'true,false': [-8.137500605073773e-16, 0.1483042966085928], 'true,false,false': [0.1483042966085928, nan], 'false': [1.2264091551091845e-16, nan]}, {'': [0.08126720101236291, 3.581364595565021e-17], 'true': [0.0032024088288649063, 0.14764495794600135], 'true,false': [0.14764495794600135, nan], 'false': [3.581364595565021e-17, nan]}, {'': [0.07353650898099107, 7.004561669559347e-19], 'true': [0.008543257432496947, 0.07325030646242753], 'true,false': [4.9618906128498613e-17, 0.17224482248520667], 'true,false,false': [0.17224482248520667, nan], 'false': [7.004561669559347e-19, nan]}, {'': [0.07032268755051063, 3.8042607137505364e-17], 'true': [0.0012876513717717684, 0.14526297447425546], 'true,false': [2.8912057932946786e-18, 0.16000000000000023], 'true,false,false': [0.16000000000000023, nan], 'false': [3.8042607137505364e-17, nan]}, {'': [0.06819948613558012, -4.883455228591754e-17], 'true': [0.0, 0.06967617032631736], 'true,false': [0.06967617032631736, nan], 'false': [-4.883455228591754e-17, nan]}, {'': [0.0679918886992747, 5.2664425527090757e-17], 'true': [0.004711481559622919, 0.15709701692066447], 'true,false': [1.8924256101565167e-18, 0.17343764728061062], 'true,false,false': [0.17343764728061062, nan], 'false': [5.2664425527090757e-17, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995094;  // std dev = 1.08e-06, 179.000 (wgt'ed) examples reached here.  /* #pos=179 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.8581489350995121;  // std dev = 8.43e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.14185106490048766;  // std dev = 7.74e-08, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
%   else return -0.14185106490048793;  // std dev = 0.000, 285.000 (wgt'ed) examples reached here.  /* #neg=285 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109546;  // std dev = 8.43e-08, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | | else if ( actor(A) )
%   | | | then return 0.7194734122109552;  // std dev = 0.000, 116.000 (wgt'ed) examples reached here.  /* #pos=116 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( actor(B) )
%   | | | then return -0.12544463852839144;  // std dev = 0.000, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
%   | | | else return 0.6842684934301482;  // std dev = 0.827, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   else return -0.12544463852839205;  // std dev = 0.000, 319.000 (wgt'ed) examples reached here.  /* #neg=319 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( actor(B) )
%   | | then return -0.1123163781936062;  // std dev = 8.02e-08, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
%   | | else return 0.5563542417708934;  // std dev = 0.039, 202.000 (wgt'ed) examples reached here.  /* #pos=202 */
%   else return -0.11231637819360668;  // std dev = 0.000, 319.000 (wgt'ed) examples reached here.  /* #neg=319 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4143907640670505;  // std dev = 0.517, 180.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=179 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783627;  // std dev = 5.27e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.42585778601478624;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.10694385549066403;  // std dev = 0.321, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
%   else return -0.10159632948783662;  // std dev = 0.000, 298.000 (wgt'ed) examples reached here.  /* #neg=298 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 5.27e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( genre(B, E) )
%   | | then return 0.32117715041975764;  // std dev = 4.30e-07, 179.000 (wgt'ed) examples reached here.  /* #pos=179 */
%   | | else if ( actor(B) )
%   | | | then return -0.09224252985373665;  // std dev = 6.14e-08, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
%   | | | else return 0.3263743608658982;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   else return -0.09269127618926044;  // std dev = 1.26e-07, 271.000 (wgt'ed) examples reached here.  /* #neg=271 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2558930900015515;  // std dev = 0.016, 202.000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.09379091497114979;  // std dev = 0.428, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
%   else return -0.08518475138839678;  // std dev = 1.03e-07, 300.000 (wgt'ed) examples reached here.  /* #neg=300 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08170932368529296;  // std dev = 0.044, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( genre(B, E) )
%   | | then return 0.20991504215355117;  // std dev = 0.000, 179.000 (wgt'ed) examples reached here.  /* #pos=179 */
%   | | else if ( actor(B) )
%   | | | then return -0.07780224619293195;  // std dev = 0.000, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
%   | | | else return 0.21300656710629873;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   else return -0.07877675473109143;  // std dev = 3.33e-08, 303.000 (wgt'ed) examples reached here.  /* #neg=303 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17558437477148622;  // std dev = 0.292, 180.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=179 */
%   | else if ( genre(A, E) )
%   | | then return -0.0724668092145191;  // std dev = 5.89e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.17947573374863002;  // std dev = 2.58e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.07678893904902234;  // std dev = 0.336, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
%   else return -0.07324622576333699;  // std dev = 9.42e-08, 306.000 (wgt'ed) examples reached here.  /* #neg=306 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07614581209628254;  // std dev = 0.089, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( director(B), actor(A) )
%   | | then return 0.1532134842488337;  // std dev = 0.007, 202.000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | | else if ( actor(B) )
%   | | | then return -0.06740947944466226;  // std dev = 0.000, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
%   | | | else return -0.39189083105460415;  // std dev = 7.45e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.06842697784420307;  // std dev = 0.000, 317.000 (wgt'ed) examples reached here.  /* #neg=317 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13277261466895623;  // std dev = 0.260, 180.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=179 */
%   | else if ( genre(A, E) )
%   | | then return -0.06309073300788916;  // std dev = 2.63e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.13556877252591198;  // std dev = 1.67e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.06615149512664072;  // std dev = 0.239, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
%   else return -0.06419184008202586;  // std dev = 1.36e-07, 320.000 (wgt'ed) examples reached here.  /* #neg=320 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063679
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.373 seconds
Total inference time: 1.697 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.065399
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.338 seconds
Refined model CLL: -0.065399


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063679
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 10.896 seconds
Total inference time: 1.697 seconds
AUC ROC: 1.0
Total revision time: 10.896
Best scored revision CLL: -0.065399


Dataset: 4_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 00:18:04
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063679, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 10.896, 'Inference time': 1.697, 'parameter_0.6': {'AUC ROC': 0.971565, 'AUC PR': 0.823063, 'CLL': -0.117024, 'Precision': [1.0, 0.5], 'Recall': 0.777778, 'F1': 0.875, 'Learning time': 2.595, 'Inference time': 1.444}}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( genre(B, E) )
%   | | then return 0.858148935099509;  // std dev = 1.08e-06, 232.000 (wgt'ed) examples reached here.  /* #pos=232 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.08654399682790603;  // std dev = 5.343, 162.000 (wgt'ed) examples reached here.  /* #neg=125 #pos=37 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048735;  // std dev = 3.00e-07, 397.000 (wgt'ed) examples reached here.  /* #neg=397 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7051527672831717;  // std dev = 1.675, 236.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=232 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.08295279640921456;  // std dev = 5.318, 157.000 (wgt'ed) examples reached here.  /* #neg=120 #pos=37 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839224;  // std dev = 0.000, 388.000 (wgt'ed) examples reached here.  /* #neg=388 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13344666059365232;  // std dev = 0.176, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( movie(E, A) )
%   | | then return 0.35305021775724393;  // std dev = 0.364, 396.000 (wgt'ed) examples reached here.  /* #neg=127 #pos=269 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360613;  // std dev = 0.000, 419.000 (wgt'ed) examples reached here.  /* #neg=419 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4623463925985267;  // std dev = 1.159, 235.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=232 */
%   | else if ( genre(A, E) )
%   | | then return -0.09968384439145889;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else if ( movie(F, B) )
%   | | | then return -3.370342664981697E-4;  // std dev = 5.380, 170.000 (wgt'ed) examples reached here.  /* #neg=133 #pos=37 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783615;  // std dev = 8.33e-09, 370.000 (wgt'ed) examples reached here.  /* #neg=370 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12381481230208619;  // std dev = 0.310, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else if ( genre(B, E) )
%   | | then return 0.35923216685399517;  // std dev = 3.63e-07, 232.000 (wgt'ed) examples reached here.  /* #pos=232 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.04263673496059361;  // std dev = 5.231, 142.000 (wgt'ed) examples reached here.  /* #neg=105 #pos=37 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0926912761892608;  // std dev = 1.59e-07, 389.000 (wgt'ed) examples reached here.  /* #neg=389 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.26983987351594035;  // std dev = 1.204, 237.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=232 */
%   | else if ( movie(E, A) )
%   | | then return -0.010137821307284025;  // std dev = 0.403, 178.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=37 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.21e-07, 380.000 (wgt'ed) examples reached here.  /* #neg=380 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11715348946487728;  // std dev = 0.309, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( genre(B, E) )
%   | | then return 0.23009579902095995;  // std dev = 1.93e-07, 232.000 (wgt'ed) examples reached here.  /* #pos=232 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.012087763122659871;  // std dev = 5.402, 175.000 (wgt'ed) examples reached here.  /* #neg=138 #pos=37 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109148;  // std dev = 1.13e-07, 415.000 (wgt'ed) examples reached here.  /* #neg=415 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18365098453413525;  // std dev = 0.962, 236.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=232 */
%   | else if ( genre(A, E) )
%   | | then return -0.07232360939186303;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.0069696270643579425;  // std dev = 5.343, 162.000 (wgt'ed) examples reached here.  /* #neg=125 #pos=37 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0732462257633377;  // std dev = 0.000, 385.000 (wgt'ed) examples reached here.  /* #neg=385 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14719127753471684;  // std dev = 0.384, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( movie(E, B) )
%   | | then return 0.09789850214870238;  // std dev = 5.583, 396.000 (wgt'ed) examples reached here.  /* #neg=127 #pos=269 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420336;  // std dev = 0.000, 404.000 (wgt'ed) examples reached here.  /* #neg=404 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15194644838015453;  // std dev = 9.42e-08, 232.000 (wgt'ed) examples reached here.  /* #pos=232 */
%   | else if ( genre(A, E) )
%   | | then return -0.05890893024616096;  // std dev = 5.27e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.014421028246337167;  // std dev = 5.353, 164.000 (wgt'ed) examples reached here.  /* #neg=127 #pos=37 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202555;  // std dev = 1.01e-08, 415.000 (wgt'ed) examples reached here.  /* #neg=415 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.971565
   AUC PR    = 0.823063
   CLL	      = -0.122302
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.875


Total learning time: 2.608 seconds
Total inference time: 1.463 seconds
AUC ROC: 0.971565


Results scoring model
   AUC ROC   = 0.983217
   AUC PR    = 0.894518
   CLL	      = -0.118327
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.862454
   F1        = 0.926148


Total scoring time: 2.842 seconds
Parameter learned model CLL: -0.118327


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 13, 0], 'true,false,true': [1.08e-06, 0, 232], 'true,false,false,true': [5.343, 125, 37], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3e-07, 397, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.675, 4, 232], 'true,false,true': [0.0, 21, 0], 'true,false,false,true': [5.318, 120, 37], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 388, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.176, 16, 0], 'true,false,true': [0.364, 127, 269], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 419, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.159, 3, 232], 'true,false,true': [0.0, 19, 0], 'true,false,false,true': [5.38, 133, 37], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.33e-09, 370, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.31, 18, 0], 'true,false,true': [3.63e-07, 0, 232], 'true,false,false,true': [5.231, 105, 37], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.59e-07, 389, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [1.204, 5, 232], 'true,false,true': [0.403, 141, 37], 'true,false,false': [0.0, 0, 0], 'false,true': [1.21e-07, 380, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.309, 13, 0], 'true,false,true': [1.93e-07, 0, 232], 'true,false,false,true': [5.402, 138, 37], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.13e-07, 415, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.962, 4, 232], 'true,false,true': [0.0, 17, 0], 'true,false,false,true': [5.343, 125, 37], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 385, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.384, 10, 0], 'true,false,true': [5.583, 127, 269], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 404, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [9.42e-08, 0, 232], 'true,false,true': [5.27e-09, 15, 0], 'true,false,false,true': [5.353, 127, 37], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.01e-08, 415, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.2241003567784929, 2.259597490924752e-16], 'true': [-1.2810265668751807e-17, 0.21660568424850254], 'true,false': [5.022802097614501e-15, 0.17623075750647893], 'true,false,false': [0.17623075750647893, nan], 'false': [2.259597490924752e-16, nan]}, {'': [0.17956382295739973, -1.2590158011213115e-16], 'true': [0.011894690526563055, 0.1633970578771017], 'true,false': [-2.64338815386942e-18, 0.18012901131891715], 'true,false,false': [0.18012901131891715, nan], 'false': [-1.2590158011213115e-16, nan]}, {'': [0.13607025504636236, -1.6958060519334134e-17], 'true': [0.0019347849486580047, 0.13229844426601206], 'true,false': [0.13229844426601206, nan], 'false': [-1.6958060519334134e-17, nan]}, {'': [0.1270350211989803, 6.961398424676658e-17], 'true': [0.005717443366587936, 0.15405149730102546], 'true,false': [-2.921639538487254e-18, 0.17027681660899638], 'true,false,false': [0.17027681660899638, nan], 'false': [6.961398424676658e-17, nan]}, {'': [0.09833052738833452, 6.507219784435365e-17], 'true': [0.005355329619057069, 0.09675990835913595], 'true,false': [5.665965780845627e-16, 0.19267010513786978], 'true,false,false': [0.19267010513786978, nan], 'false': [6.507219784435365e-17, nan]}, {'': [0.09244515317714504, 3.8565641908031756e-17], 'true': [0.0061136812039066365, 0.16262623407608276], 'true,false': [0.16262623407608276, nan], 'false': [3.8565641908031756e-17, nan]}, {'': [0.08540048678710786, 3.1032739965426065e-17], 'true': [0.007353521599979352, 0.08606393024059174], 'true,false': [1.607909208077813e-16, 0.16672653061224363], 'true,false,false': [0.16672653061224363, nan], 'false': [3.1032739965426065e-17, nan]}, {'': [0.07958160481528713, -6.805522956143817e-17], 'true': [0.003923755430874755, 0.1600341766345748], 'true,false': [-2.44902137784961e-18, 0.1762307575064778], 'true,false,false': [0.1762307575064778, nan], 'false': [-6.805522956143817e-17, nan]}, {'': [0.07859136971832041, -1.1596884069104358e-16], 'true': [0.014774157224577988, 0.07872338346606716], 'true,false': [0.07872338346606716, nan], 'false': [-1.1596884069104358e-16, nan]}, {'': [0.07689298394197935, 1.0165897574880951e-16], 'true': [3.828355257328126e-17, 0.1602214460219638], 'true,false': [1.8503717077085942e-18, 0.1747099940511598], 'true,false,false': [0.1747099940511598, nan], 'false': [1.0165897574880951e-16, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( genre(B, E) )
%   | | then return 0.858148935099509;  // std dev = 1.08e-06, 232.000 (wgt'ed) examples reached here.  /* #pos=232 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.8581489350995115;  // std dev = 2.60e-07, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | | else return -0.14185106490048777;  // std dev = 2.11e-08, 124.000 (wgt'ed) examples reached here.  /* #neg=124 */
%   else return -0.14185106490048732;  // std dev = 3.01e-07, 400.000 (wgt'ed) examples reached here.  /* #neg=400 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109541;  // std dev = 2.53e-07, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   | | else return 0.7083560694380701;  // std dev = 0.096, 152.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=150 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.7194734122109548;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | | else return -0.12544463852839108;  // std dev = 8.02e-08, 126.000 (wgt'ed) examples reached here.  /* #neg=126 */
%   else return -0.12544463852839224;  // std dev = 0.000, 394.000 (wgt'ed) examples reached here.  /* #neg=394 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1329080012935769;  // std dev = 0.145, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( actor(B) )
%   | | then return -0.1123163781936062;  // std dev = 9.06e-08, 123.000 (wgt'ed) examples reached here.  /* #neg=123 */
%   | | else return 0.5568962912845857;  // std dev = 0.022, 269.000 (wgt'ed) examples reached here.  /* #pos=269 */
%   else return -0.1123163781936062;  // std dev = 0.000, 404.000 (wgt'ed) examples reached here.  /* #neg=404 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.41714157668447854;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   | | else if ( actor(A) )
%   | | | then return 0.41984705038103526;  // std dev = 0.000, 150.000 (wgt'ed) examples reached here.  /* #pos=150 */
%   | | | else return -0.20320161810018897;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(A, E) )
%   | | then return -0.0997321978599809;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.4171415766844771;  // std dev = 8.94e-08, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | | else return -0.10215075800776062;  // std dev = 0.079, 143.000 (wgt'ed) examples reached here.  /* #neg=143 */
%   else return -0.10159632948783588;  // std dev = 2.31e-07, 407.000 (wgt'ed) examples reached here.  /* #neg=407 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10067468080881578;  // std dev = 0.108, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( genre(B, E) )
%   | | then return 0.32164580208367366;  // std dev = 0.013, 232.000 (wgt'ed) examples reached here.  /* #pos=232 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.32045965589010256;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | | else return -0.09321958291661933;  // std dev = 0.073, 128.000 (wgt'ed) examples reached here.  /* #neg=128 */
%   else return -0.0926912761892609;  // std dev = 1.50e-07, 402.000 (wgt'ed) examples reached here.  /* #neg=402 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.2556982861494767;  // std dev = 0.013, 269.000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.08818423833433885;  // std dev = 0.170, 131.000 (wgt'ed) examples reached here.  /* #neg=131 */
%   else return -0.08518475138839678;  // std dev = 1.33e-07, 409.000 (wgt'ed) examples reached here.  /* #neg=409 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09423130454000239;  // std dev = 0.136, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else if ( genre(B, E) )
%   | | then return 0.21022646101294035;  // std dev = 0.010, 232.000 (wgt'ed) examples reached here.  /* #pos=232 */
%   | | else if ( actor(B) )
%   | | | then return -0.07848101282242635;  // std dev = 5.05e-08, 135.000 (wgt'ed) examples reached here.  /* #neg=135 */
%   | | | else return 0.20952049659427088;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   else return -0.07877675473109143;  // std dev = 2.22e-07, 393.000 (wgt'ed) examples reached here.  /* #neg=393 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( actor(A) )
%   | | then return 0.17744030119953133;  // std dev = 0.009, 232.000 (wgt'ed) examples reached here.  /* #pos=232 */
%   | | else return -0.13555680246435944;  // std dev = 5.27e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(A, E) )
%   | | then return -0.07023885144868805;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.1769224892864634;  // std dev = 1.49e-08, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | | else return -0.0759049767668446;  // std dev = 0.166, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
%   else return -0.0732462257633377;  // std dev = 0.000, 385.000 (wgt'ed) examples reached here.  /* #neg=385 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1529506367720099;  // std dev = 0.008, 269.000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.07137019813815333;  // std dev = 0.201, 145.000 (wgt'ed) examples reached here.  /* #neg=145 */
%   else return -0.06842697784420337;  // std dev = 0.000, 407.000 (wgt'ed) examples reached here.  /* #neg=407 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13421692160806542;  // std dev = 0.007, 232.000 (wgt'ed) examples reached here.  /* #pos=232 */
%   | else if ( genre(A, E) )
%   | | then return -0.061535246430445056;  // std dev = 3.73e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.13386467258904852;  // std dev = 3.33e-08, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | | else return -0.0644484586541918;  // std dev = 0.086, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
%   else return -0.06419184008202555;  // std dev = 2.05e-07, 414.000 (wgt'ed) examples reached here.  /* #neg=414 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063647
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.9 seconds
Total inference time: 1.585 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064683
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 3.121 seconds
Refined model CLL: -0.064683


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063647
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 12.471 seconds
Total inference time: 1.585 seconds
AUC ROC: 1.0
Total revision time: 12.471
Best scored revision CLL: -0.064683


Dataset: 4_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 00:18:20
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063647, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 12.471, 'Inference time': 1.585, 'parameter_0.8': {'AUC ROC': 0.971565, 'AUC PR': 0.823063, 'CLL': -0.122302, 'Precision': [1.0, 0.5], 'Recall': 0.777778, 'F1': 0.875, 'Learning time': 2.608, 'Inference time': 1.463}}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048774;  // std dev = 1.05e-08, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995085;  // std dev = 1.08e-06, 288.000 (wgt'ed) examples reached here.  /* #pos=288 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.08087620782678483;  // std dev = 6.171, 220.000 (wgt'ed) examples reached here.  /* #neg=171 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048735;  // std dev = 2.38e-07, 466.000 (wgt'ed) examples reached here.  /* #neg=466 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7050550154406616;  // std dev = 1.873, 293.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=288 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 7.45e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.06105941907468833;  // std dev = 6.210, 230.000 (wgt'ed) examples reached here.  /* #neg=181 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839233;  // std dev = 0.000, 471.000 (wgt'ed) examples reached here.  /* #neg=471 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13579091857787653;  // std dev = 0.224, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | else if ( movie(E, A) )
%   | | then return 0.32401661765332423;  // std dev = 0.374, 529.000 (wgt'ed) examples reached here.  /* #neg=192 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.1123163781936058;  // std dev = 0.000, 507.000 (wgt'ed) examples reached here.  /* #neg=507 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.47351618206883384;  // std dev = 0.959, 290.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=288 */
%   | else if ( genre(A, E) )
%   | | then return -0.09947365167786869;  // std dev = 9.13e-09, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.019416369532694138;  // std dev = 6.151, 215.000 (wgt'ed) examples reached here.  /* #neg=166 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783541;  // std dev = 1.56e-08, 496.000 (wgt'ed) examples reached here.  /* #neg=496 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09091114211251418;  // std dev = 1.05e-08, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else if ( genre(B, E) )
%   | | then return 0.36337700706744147;  // std dev = 0.000, 288.000 (wgt'ed) examples reached here.  /* #pos=288 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.025002098188543518;  // std dev = 6.116, 207.000 (wgt'ed) examples reached here.  /* #neg=158 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926133;  // std dev = 0.000, 473.000 (wgt'ed) examples reached here.  /* #neg=473 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2783984085022401;  // std dev = 0.956, 291.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=288 */
%   | else if ( movie(E, A) )
%   | | then return 0.0153780953234651;  // std dev = 0.412, 221.000 (wgt'ed) examples reached here.  /* #neg=172 #pos=49 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.49e-07, 494.000 (wgt'ed) examples reached here.  /* #neg=494 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12929315628539706;  // std dev = 0.442, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else if ( genre(B, E) )
%   | | then return 0.23102861766645855;  // std dev = 0.000, 288.000 (wgt'ed) examples reached here.  /* #pos=288 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.008321465196269041;  // std dev = 6.155, 216.000 (wgt'ed) examples reached here.  /* #neg=167 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109201;  // std dev = 1.43e-07, 490.000 (wgt'ed) examples reached here.  /* #neg=490 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18578186575814046;  // std dev = 0.981, 292.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=288 */
%   | else if ( genre(A, E) )
%   | | then return -0.07534198010503444;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.01320375695547736;  // std dev = 6.235, 237.000 (wgt'ed) examples reached here.  /* #neg=188 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333734;  // std dev = 0.000, 494.000 (wgt'ed) examples reached here.  /* #neg=494 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10284838058113306;  // std dev = 0.441, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | else if ( movie(E, B) )
%   | | then return 0.11349323195587772;  // std dev = 6.204, 481.000 (wgt'ed) examples reached here.  /* #neg=144 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420355;  // std dev = 0.000, 504.000 (wgt'ed) examples reached here.  /* #neg=504 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14379870071324294;  // std dev = 0.932, 292.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=288 */
%   | else if ( genre(A, E) )
%   | | then return -0.06382981757820891;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.013899640812313367;  // std dev = 6.167, 219.000 (wgt'ed) examples reached here.  /* #neg=170 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202536;  // std dev = 1.09e-08, 509.000 (wgt'ed) examples reached here.  /* #neg=509 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.971565
   AUC PR    = 0.823063
   CLL	      = -0.121697
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.875


Total learning time: 3.175 seconds
Total inference time: 1.525 seconds
AUC ROC: 0.971565


Results scoring model
   AUC ROC   = 0.982257
   AUC PR    = 0.888508
   CLL	      = -0.118241
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.854599
   F1        = 0.9216


Total scoring time: 2.818 seconds
Parameter learned model CLL: -0.118241


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [1.05e-08, 21, 0], 'true,false,true': [1.08e-06, 0, 288], 'true,false,false,true': [6.171, 171, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.38e-07, 466, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.873, 5, 288], 'true,false,true': [7.45e-09, 15, 0], 'true,false,false,true': [6.21, 181, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 471, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.224, 24, 0], 'true,false,true': [0.374, 192, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 507, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.959, 2, 288], 'true,false,true': [9.13e-09, 19, 0], 'true,false,false,true': [6.151, 166, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.56e-08, 496, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [1.05e-08, 21, 0], 'true,false,true': [0.0, 0, 288], 'true,false,false,true': [6.116, 158, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 473, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.956, 3, 288], 'true,false,true': [0.412, 172, 49], 'true,false,false': [0.0, 0, 0], 'false,true': [1.49e-07, 494, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.442, 22, 0], 'true,false,true': [0.0, 0, 288], 'true,false,false,true': [6.155, 167, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.43e-07, 490, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.981, 4, 288], 'true,false,true': [0.0, 9, 0], 'true,false,false,true': [6.235, 188, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 494, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.441, 25, 0], 'true,false,true': [6.204, 144, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 504, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.932, 4, 288], 'true,false,true': [0.0, 13, 0], 'true,false,false,true': [6.167, 170, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.09e-08, 509, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.23121701251782517, 1.2198158553821462e-16], 'true': [5.28677630773884e-18, 0.22330507161014587], 'true,false': [4.046146134189459e-15, 0.17311983471074482], 'true,false,false': [0.17311983471074482, nan], 'false': [1.2198158553821462e-16, nan]}, {'': [0.185643422238255, -1.3577249727900003e-16], 'true': [0.011974473528514879, 0.1593905377353033], 'true,false': [3.7007434154171884e-18, 0.1676559546313798], 'true,false,false': [0.1676559546313798, nan], 'false': [-1.3577249727900003e-16, nan]}, {'': [0.14254135513000776, -1.7518312025643497e-18], 'true': [0.0020940053757603633, 0.13973757712605356], 'true,false': [0.13973757712605356, nan], 'false': [-1.7518312025643497e-18, nan]}, {'': [0.12757797029787193, 2.399514279028564e-16], 'true': [0.003170800956613744, 0.16273210998579296], 'true,false': [4.382459307730881e-18, 0.17596538669550996], 'true,false,false': [0.17596538669550996, nan], 'false': [2.399514279028564e-16, nan]}, {'': [0.10302627715710219, -7.511022576745245e-18], 'true': [5.28677630773884e-18, 0.10341543078492993], 'true,false': [-1.282924384011292e-15, 0.18068099605591761], 'true,false,false': [0.18068099605591761, nan], 'false': [-7.511022576745245e-18, nan]}, {'': [0.09191636755007648, 4.49483005921116e-17], 'true': [0.003143186789588678, 0.16948882774987983], 'true,false': [0.16948882774987983, nan], 'false': [4.49483005921116e-17, nan]}, {'': [0.08684513910191982, 4.1690007455312e-17], 'true': [0.008884967403898764, 0.08731374656254129], 'true,false': [-3.7007434154171886e-16, 0.17539008916323623], 'true,false,false': [0.17539008916323623, nan], 'false': [4.1690007455312e-17, nan]}, {'': [0.08415087252036224, -1.4383456189475712e-17], 'true': [0.003295800390465673, 0.15814096497587185], 'true,false': [-2.3129646346357427e-18, 0.16400505616977556], 'true,false,false': [0.16400505616977556, nan], 'false': [-1.4383456189475712e-17, nan]}, {'': [0.0786420789329103, -1.1983359630874705e-16], 'true': [0.007788834432685588, 0.08001224455794059], 'true,false': [0.08001224455794059, nan], 'false': [-1.1983359630874705e-16, nan]}, {'': [0.0806608588184424, 1.1865644899726624e-16], 'true': [0.0029759543848575255, 0.16408242644637822], 'true,false': [-5.337610695313253e-19, 0.17368278392860728], 'true,false,false': [0.17368278392860728, nan], 'false': [1.1865644899726624e-16, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048774;  // std dev = 1.49e-08, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995085;  // std dev = 1.08e-06, 288.000 (wgt'ed) examples reached here.  /* #pos=288 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.8581489350995122;  // std dev = 1.69e-07, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.14185106490048802;  // std dev = 0.000, 147.000 (wgt'ed) examples reached here.  /* #neg=147 */
%   else return -0.14185106490048757;  // std dev = 1.19e-07, 486.000 (wgt'ed) examples reached here.  /* #neg=486 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( actor(A) )
%   | | then return 0.7194734122109577;  // std dev = 0.000, 288.000 (wgt'ed) examples reached here.  /* #pos=288 */
%   | | else return -0.12544463852839138;  // std dev = 5.27e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.7194734122109547;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.12544463852839144;  // std dev = 0.000, 167.000 (wgt'ed) examples reached here.  /* #neg=167 */
%   else return -0.12544463852839233;  // std dev = 0.000, 480.000 (wgt'ed) examples reached here.  /* #neg=480 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360638;  // std dev = 1.29e-08, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else if ( director(B), actor(A) )
%   | | then return 0.5553664367462832;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | | else return -0.11231637819360617;  // std dev = 1.01e-07, 133.000 (wgt'ed) examples reached here.  /* #neg=133 */
%   else return -0.1123163781936059;  // std dev = 0.000, 471.000 (wgt'ed) examples reached here.  /* #neg=471 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.41751358415830964;  // std dev = 2.73e-07, 105.000 (wgt'ed) examples reached here.  /* #pos=105 */
%   | | else if ( actor(A) )
%   | | | then return 0.4175135841583097;  // std dev = 3.58e-07, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | | else return -0.10159632948783633;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783634;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.41751358415831047;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.10159632948783648;  // std dev = 0.000, 159.000 (wgt'ed) examples reached here.  /* #neg=159 */
%   else return -0.10159632948783541;  // std dev = 3.44e-07, 494.000 (wgt'ed) examples reached here.  /* #neg=494 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926094;  // std dev = 9.13e-09, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( genre(B, E) )
%   | | then return 0.3207118471601507;  // std dev = 0.000, 288.000 (wgt'ed) examples reached here.  /* #pos=288 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.32071184716014944;  // std dev = 2.98e-08, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.09269127618926064;  // std dev = 8.56e-08, 173.000 (wgt'ed) examples reached here.  /* #neg=173 */
%   else return -0.09269127618926153;  // std dev = 0.000, 516.000 (wgt'ed) examples reached here.  /* #neg=516 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25517224256948756;  // std dev = 4.21e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.08518475138839678;  // std dev = 6.66e-08, 173.000 (wgt'ed) examples reached here.  /* #neg=173 */
%   else return -0.08518475138839678;  // std dev = 1.49e-07, 527.000 (wgt'ed) examples reached here.  /* #neg=527 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07877675473109179;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else if ( genre(B, E) )
%   | | then return 0.20975771563253479;  // std dev = 2.95e-07, 288.000 (wgt'ed) examples reached here.  /* #pos=288 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.20975771563253606;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.07877675473109153;  // std dev = 7.81e-08, 146.000 (wgt'ed) examples reached here.  /* #neg=146 */
%   else return -0.07877675473109211;  // std dev = 0.000, 506.000 (wgt'ed) examples reached here.  /* #neg=506 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1745156449256006;  // std dev = 0.431, 291.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=288 */
%   | else if ( genre(A, E) )
%   | | then return -0.07324622576333704;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( actor(B) )
%   | | | then return -0.07324622576333674;  // std dev = 9.77e-08, 168.000 (wgt'ed) examples reached here.  /* #neg=168 */
%   | | | else return 0.16265364831208834;  // std dev = 0.421, 52.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=49 */
%   else return -0.07324622576333702;  // std dev = 1.21e-07, 479.000 (wgt'ed) examples reached here.  /* #neg=479 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1533026796853522;  // std dev = 0.010, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.0688205382846279;  // std dev = 0.034, 174.000 (wgt'ed) examples reached here.  /* #neg=174 */
%   else return -0.06842697784420348;  // std dev = 0.000, 461.000 (wgt'ed) examples reached here.  /* #neg=461 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13349793349238567;  // std dev = 0.215, 289.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=288 */
%   | else if ( genre(A, E) )
%   | | then return -0.06416820246985913;  // std dev = 2.63e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.13562646264328393;  // std dev = 2.36e-08, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.06435192363615257;  // std dev = 0.022, 171.000 (wgt'ed) examples reached here.  /* #neg=171 */
%   else return -0.06419184008202539;  // std dev = 2.43e-07, 489.000 (wgt'ed) examples reached here.  /* #neg=489 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063761
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 4.396 seconds
Total inference time: 1.613 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064335
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 3.503 seconds
Refined model CLL: -0.064335


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063761
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 13.892 seconds
Total inference time: 1.613 seconds
AUC ROC: 1.0
Total revision time: 13.892
Best scored revision CLL: -0.064335


Dataset: 4_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 00:18:38
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063761, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 13.892, 'Inference time': 1.613, 'parameter_1.0': {'AUC ROC': 0.971565, 'AUC PR': 0.823063, 'CLL': -0.121697, 'Precision': [1.0, 0.5], 'Recall': 0.777778, 'F1': 0.875, 'Learning time': 3.175, 'Inference time': 1.525}}


Starting fold 1

Target train facts examples: 863
Target train pos examples: 326
Target train neg examples: 10928

Target test facts examples: 215
Target test pos	 examples: 56
Target test neg examples: 3308

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.09727936988212106;  // std dev = 2.893, 46.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=11 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048763;  // std dev = 8.69e-08, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.6892977675416921;  // std dev = 1.173, 56.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=54 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.12088973090439974;  // std dev = 2.824, 40.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=11 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839133;  // std dev = 0.000, 110.000 (wgt'ed) examples reached here.  /* #neg=110 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( movie(E, A) )
%   | | then return 0.48661203052719976;  // std dev = 0.297, 77.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=65 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360622;  // std dev = 6.83e-08, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.40779305101225105;  // std dev = 1.088, 57.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=54 */
%   | else if ( genre(A, E) )
%   | | then return -0.1015963294878363;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.03883687833757382;  // std dev = 2.796, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1015963294878362;  // std dev = 5.74e-09, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.18507758057292661;  // std dev = 0.131, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.3448280610922246;  // std dev = 0.000, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.02404981413701721;  // std dev = 2.810, 39.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=11 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926086;  // std dev = 7.15e-08, 118.000 (wgt'ed) examples reached here.  /* #neg=118 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.26223212468195384;  // std dev = 0.509, 55.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=54 */
%   | else if ( movie(E, A) )
%   | | then return 0.03713938438244575;  // std dev = 0.429, 41.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=11 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839682;  // std dev = 5.67e-08, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.15171594448969872;  // std dev = 0.173, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.22288853885821616;  // std dev = 5.16e-08, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.00511237496764545;  // std dev = 2.824, 40.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=11 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109161;  // std dev = 5.58e-08, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1706178225333034;  // std dev = 0.624, 56.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=54 */
%   | else if ( genre(A, E) )
%   | | then return -0.07038027589242055;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.015082240619067743;  // std dev = 2.861, 43.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=11 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333707;  // std dev = 4.27e-09, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11215520787083713;  // std dev = 0.207, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( movie(E, B) )
%   | | then return 0.11233294607896344;  // std dev = 2.824, 90.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=65 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420268;  // std dev = 4.27e-09, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1323883192037926;  // std dev = 0.586, 56.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=54 */
%   | else if ( genre(A, E) )
%   | | then return -0.0593344242930977;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.06431248998279081;  // std dev = 2.664, 31.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=11 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.142589
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.662 seconds
Total inference time: 1.807 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.981528
   AUC PR    = 0.877763
   CLL	      = -0.134553
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.830769
   F1        = 0.907563


Total scoring time: 1.703 seconds
Parameter learned model CLL: -0.134553


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 4, 0], 'true,false,true': [0.0, 0, 54], 'true,false,false,true': [2.893, 35, 11], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.69e-08, 105, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.173, 2, 54], 'true,false,true': [0.0, 5, 0], 'true,false,false,true': [2.824, 29, 11], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 110, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [2.63e-09, 3, 0], 'true,false,true': [0.297, 12, 65], 'true,false,false': [0.0, 0, 0], 'false,true': [6.83e-08, 83, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.088, 3, 54], 'true,false,true': [0.0, 3, 0], 'true,false,false,true': [2.796, 27, 11], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.74e-09, 88, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.131, 2, 0], 'true,false,true': [0.0, 0, 54], 'true,false,false,true': [2.81, 28, 11], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.15e-08, 118, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.509, 1, 54], 'true,false,true': [0.429, 30, 11], 'true,false,false': [0.0, 0, 0], 'false,true': [5.67e-08, 102, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.173, 3, 0], 'true,false,true': [5.16e-08, 0, 54], 'true,false,false,true': [2.824, 29, 11], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.58e-08, 95, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.624, 2, 54], 'true,false,true': [0.0, 3, 0], 'true,false,false,true': [2.861, 32, 11], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.27e-09, 86, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.207, 5, 0], 'true,false,true': [2.824, 25, 65], 'true,false,false': [0.0, 0, 0], 'false,true': [4.27e-09, 79, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.586, 2, 54], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [2.664, 20, 11], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 104, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.2343749999999994, 7.190015778524824e-17], 'true': [0.0, 0.22749999999999931], 'true,false': [0.0, 0.1819470699432887], 'true,false,false': [0.1819470699432887, nan], 'false': [7.190015778524824e-17, nan]}, {'': [0.18294754539427244, -8.074349270001138e-18], 'true': [0.02458537734255049, 0.18321537003099783], 'true,false': [0.0, 0.1993750000000002], 'true,false,false': [0.1993750000000002, nan], 'false': [-8.074349270001138e-18, nan]}, {'': [0.09780532940168078, 5.617996028223683e-17], 'true': [2.3129646346357427e-18, 0.08816410519711564], 'true,false': [0.08816410519711564, nan], 'false': [5.617996028223683e-17, nan]}, {'': [0.12738099608995412, 3.154042683594195e-17], 'true': [0.020756558772501675, 0.19196645913688776], 'true,false': [-1.1564823173178713e-18, 0.205678670360111], 'true,false,false': [0.205678670360111, nan], 'false': [3.154042683594195e-17, nan]}, {'': [0.11106043250831941, 4.327988062098068e-17], 'true': [0.008535229237671312, 0.10997412028848795], 'true,false': [-2.4671622769447924e-16, 0.20249835634451013], 'true,false,false': [0.20249835634451013, nan], 'false': [4.327988062098068e-17, nan]}, {'': [0.09377709873278477, 3.1565164425617195e-17], 'true': [0.00470693468221163, 0.18423364435610134], 'true,false': [0.18423364435610134, nan], 'false': [3.1565164425617195e-17, nan]}, {'': [0.09614338546201494, 3.272236283105724e-17], 'true': [0.010008009628337094, 0.09643403670520695], 'true,false': [4.9343245538895844e-17, 0.1993750000000003], 'true,false,false': [0.1993750000000003, nan], 'false': [3.272236283105724e-17, nan]}, {'': [0.09303173619156405, 1.871887657798229e-17], 'true': [0.0069563745017774525, 0.17814395326741067], 'true,false': [-5.782411586589357e-19, 0.19037317468902118], 'true,false,false': [0.19037317468902118, nan], 'false': [1.871887657798229e-17, nan]}, {'': [0.08689704892451434, 1.8269492810287385e-17], 'true': [0.00855357070184061, 0.08859709957797221], 'true,false': [0.08859709957797221, nan], 'false': [1.8269492810287385e-17, nan]}, {'': [0.08524754250353242, -1.6012832085939756e-17], 'true': [0.006124189595001379, 0.2159241864743011], 'true,false': [0.0, 0.2289281997918837], 'true,false,false': [0.2289281997918837, nan], 'false': [-1.6012832085939756e-17, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | else if ( actor(B) )
%   | | | then return -0.1418510649004877;  // std dev = 2.58e-08, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.14185106490048763;  // std dev = 8.69e-08, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( actor(B) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | | else return 0.7194734122109542;  // std dev = 4.21e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.12544463852839147;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( actor(B) )
%   | | then return -0.1123163781936064;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | else return 0.5553664367462837;  // std dev = 1.98e-07, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   else return -0.1123163781936062;  // std dev = 8.02e-08, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.41751358415830997;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else return 0.39665033210431944;  // std dev = 0.112, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( actor(B) )
%   | | | then return -0.10159632948783635;  // std dev = 0.000, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | | else return 0.41751358415831014;  // std dev = 2.58e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.10159632948783623;  // std dev = 5.05e-08, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12412534276399832;  // std dev = 0.172, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.32316185240255524;  // std dev = 0.017, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | else if ( actor(B) )
%   | | | then return -0.09269127618926097;  // std dev = 5.27e-09, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | | else return 0.3207118471601497;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.09269127618926104;  // std dev = 2.36e-08, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.2565616458342832;  // std dev = 0.015, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else if ( actor(A) )
%   | | then return -0.0851847513883968;  // std dev = 1.97e-08, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | else return -0.24828209508660037;  // std dev = 0.573, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.08518475138839682;  // std dev = 5.96e-08, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.0657664980263677;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.21098633864177185;  // std dev = 0.013, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.20952750183214278;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.10627808629006456;  // std dev = 0.603, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   else return -0.07877675473109158;  // std dev = 5.96e-08, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1779976330445695;  // std dev = 0.011, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | else if ( genre(A, E) )
%   | | then return -0.061839289825631756;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.17692762843434195;  // std dev = 7.45e-09, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.10571366460636662;  // std dev = 0.825, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.07324622576333707;  // std dev = 0.000, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.15329009349475328;  // std dev = 0.010, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else return -0.07396996419949632;  // std dev = 0.230, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   else return -0.06842697784420265;  // std dev = 4.89e-08, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13455671599806315;  // std dev = 0.009, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | else if ( genre(A, E) )
%   | | then return -0.05441357635829397;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.13382881430621896;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.09393999646989278;  // std dev = 0.783, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   else return -0.06419184008202626;  // std dev = 0.000, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.062021
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.261 seconds
Total inference time: 1.646 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.069634
   Precision = 0.8125 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.896552


Total scoring time: 1.548 seconds
Refined model CLL: -0.069634


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.062021
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 7.174 seconds
Total inference time: 1.646 seconds
AUC ROC: 1.0
Total revision time: 7.174
Best scored revision CLL: -0.069634


Dataset: 4_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 00:18:49
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.062021, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 7.174, 'Inference time': 1.646, 'parameter_0.2': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.142589, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 1.662, 'Inference time': 1.807}}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995111;  // std dev = 5.20e-07, 108.000 (wgt'ed) examples reached here.  /* #pos=108 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.12975387337111682;  // std dev = 4.003, 81.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=22 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048846;  // std dev = 0.000, 213.000 (wgt'ed) examples reached here.  /* #neg=213 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109548;  // std dev = 0.000, 108.000 (wgt'ed) examples reached here.  /* #pos=108 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.1066688744288572;  // std dev = 4.021, 83.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=22 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839163;  // std dev = 0.000, 195.000 (wgt'ed) examples reached here.  /* #neg=195 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.16991733837313955;  // std dev = 0.081, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( movie(E, A) )
%   | | then return 0.35955410865737075;  // std dev = 0.369, 189.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=130 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.1123163781936066;  // std dev = 0.000, 200.000 (wgt'ed) examples reached here.  /* #neg=200 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.45966046863942744;  // std dev = 0.662, 109.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=108 */
%   | else if ( genre(A, E) )
%   | | then return -0.09645816320400945;  // std dev = 3.73e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.05495399077957783;  // std dev = 3.964, 77.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=22 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783652;  // std dev = 0.000, 199.000 (wgt'ed) examples reached here.  /* #neg=199 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1271760694014345;  // std dev = 0.245, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( genre(B, E) )
%   | | then return 0.3550676885320307;  // std dev = 0.000, 108.000 (wgt'ed) examples reached here.  /* #pos=108 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.0010990945887007792;  // std dev = 4.084, 91.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=22 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926054;  // std dev = 5.58e-08, 194.000 (wgt'ed) examples reached here.  /* #neg=194 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.26875926656069343;  // std dev = 0.751, 110.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=108 */
%   | else if ( movie(E, A) )
%   | | then return 0.028793970105202543;  // std dev = 0.428, 87.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=22 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 7.30e-08, 189.000 (wgt'ed) examples reached here.  /* #neg=189 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11929124696794197;  // std dev = 0.211, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.22781964117964262;  // std dev = 0.000, 108.000 (wgt'ed) examples reached here.  /* #pos=108 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.028835857266448484;  // std dev = 3.994, 80.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=22 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109144;  // std dev = 7.45e-08, 210.000 (wgt'ed) examples reached here.  /* #neg=210 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1858574045881441;  // std dev = 0.475, 109.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=108 */
%   | else if ( genre(A, E) )
%   | | then return -0.07233620912401381;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.03791946808183972;  // std dev = 3.954, 76.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=22 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333668;  // std dev = 8.01e-09, 186.000 (wgt'ed) examples reached here.  /* #neg=186 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.06762982972521998;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( movie(E, B) )
%   | | then return 0.10260678110977921;  // std dev = 4.100, 187.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=130 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420261;  // std dev = 4.47e-09, 191.000 (wgt'ed) examples reached here.  /* #neg=191 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1372303512531791;  // std dev = 0.788, 111.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=108 */
%   | else if ( genre(A, E) )
%   | | then return -0.06348804956884076;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.028922233316485326;  // std dev = 4.062, 88.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=22 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 189.000 (wgt'ed) examples reached here.  /* #neg=189 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.131366
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.075 seconds
Total inference time: 1.717 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.980138
   AUC PR    = 0.873292
   CLL	      = -0.128144
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.830769
   F1        = 0.907563


Total scoring time: 2.26 seconds
Parameter learned model CLL: -0.128144


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 7, 0], 'true,false,true': [5.2e-07, 0, 108], 'true,false,false,true': [4.003, 59, 22], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 213, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 108], 'true,false,true': [0.0, 5, 0], 'true,false,false,true': [4.021, 61, 22], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 195, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.081, 2, 0], 'true,false,true': [0.369, 59, 130], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 200, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.662, 1, 108], 'true,false,true': [3.73e-09, 6, 0], 'true,false,false,true': [3.964, 55, 22], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 199, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.245, 10, 0], 'true,false,true': [0.0, 0, 108], 'true,false,false,true': [4.084, 69, 22], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.58e-08, 194, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.751, 2, 108], 'true,false,true': [0.428, 65, 22], 'true,false,false': [0.0, 0, 0], 'false,true': [7.3e-08, 189, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.211, 6, 0], 'true,false,true': [0.0, 0, 108], 'true,false,false,true': [3.994, 58, 22], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.45e-08, 210, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.475, 1, 108], 'true,false,true': [0.0, 11, 0], 'true,false,false,true': [3.954, 54, 22], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.01e-09, 186, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 4, 0], 'true,false,true': [4.1, 57, 130], 'true,false,false': [0.0, 0, 0], 'false,true': [4.47e-09, 191, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.788, 3, 108], 'true,false,true': [0.0, 9, 0], 'true,false,false,true': [4.062, 66, 22], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 189, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.22334443981674734, -2.376815489338363e-16], 'true': [-7.93016446160826e-18, 0.21471963270905509], 'true,false': [2.500057773970723e-15, 0.19783569577808352], 'true,false,false': [0.19783569577808352, nan], 'false': [-2.376815489338363e-16, nan]}, {'': [0.18073623845219333, -4.7824991830006746e-17], 'true': [-6.579099405186112e-16, 0.18662218451657742], 'true,false': [0.0, 0.19480330962403797], 'true,false,false': [0.19480330962403797, nan], 'false': [-4.7824991830006746e-17, nan]}, {'': [0.13742637709013292, -4.218847493575595e-17], 'true': [0.0033178706136041645, 0.13591001720417079], 'true,false': [0.13591001720417079, nan], 'false': [-4.218847493575595e-17, nan]}, {'': [0.12719023325157117, -9.149576685353049e-17], 'true': [0.004017485659662215, 0.19086621572629928], 'true,false': [2.3129646346357427e-18, 0.20408163265306076], 'true,false,false': [0.20408163265306076, nan], 'false': [-9.149576685353049e-17, nan]}, {'': [0.11438629913445779, 1.602383746881669e-17], 'true': [0.006022882413938532, 0.11492057132140318], 'true,false': [-3.1250722174634037e-16, 0.18331119430020537], 'true,false,false': [0.18331119430020537, nan], 'false': [1.602383746881669e-17, nan]}, {'': [0.09782691617486283, 2.819614030794048e-17], 'true': [0.005125673812404553, 0.18288224756356783], 'true,false': [0.18288224756356783, nan], 'false': [2.819614030794048e-17, nan]}, {'': [0.0938900008893132, 2.6433881538694202e-17], 'true': [0.007422937592293018, 0.0945194907110105], 'true,false': [-1.1513423959075697e-16, 0.19937500000000014], 'true,false,false': [0.19937500000000014, nan], 'false': [2.6433881538694202e-17, nan]}, {'': [0.08796855193410125, 6.446456272017038e-17], 'true': [0.0020697007916232442, 0.18101599249871503], 'true,false': [-2.523234146875356e-18, 0.20567867036011142], 'true,false,false': [0.20567867036011142, nan], 'false': [6.446456272017038e-17, nan]}, {'': [0.08862124442294567, 2.0344400974806533e-17], 'true': [0.0, 0.0899099644720827], 'true,false': [0.0899099644720827, nan], 'false': [2.0344400974806533e-17, nan]}, {'': [0.08949976281637027, -4.11193712824132e-18], 'true': [0.005598657668984989, 0.17020366438062753], 'true,false': [-7.709882115452476e-19, 0.18749999999999964], 'true,false,false': [0.18749999999999964, nan], 'false': [-4.11193712824132e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995111;  // std dev = 5.20e-07, 108.000 (wgt'ed) examples reached here.  /* #pos=108 */
%   | | else if ( actor(B) )
%   | | | then return -0.14185106490048766;  // std dev = 6.32e-08, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   | | | else return 0.8581489350995121;  // std dev = 5.96e-08, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else return -0.14185106490048846;  // std dev = 0.000, 228.000 (wgt'ed) examples reached here.  /* #neg=228 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( actor(A) )
%   | | then return 0.7194734122109548;  // std dev = 0.000, 108.000 (wgt'ed) examples reached here.  /* #pos=108 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.7194734122109542;  // std dev = 7.30e-08, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return -0.12786779398558934;  // std dev = 0.154, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   else return -0.1254446385283916;  // std dev = 0.000, 193.000 (wgt'ed) examples reached here.  /* #neg=193 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5553664367462834;  // std dev = 4.77e-07, 130.000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.11600237685914745;  // std dev = 0.200, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
%   else return -0.1123163781936066;  // std dev = 0.000, 200.000 (wgt'ed) examples reached here.  /* #neg=200 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.41275418994157753;  // std dev = 0.516, 109.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=108 */
%   | else if ( genre(A, E) )
%   | | then return -0.10126038546549052;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.4175135841583106;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return -0.10570621492420457;  // std dev = 0.185, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   else return -0.10159632948783652;  // std dev = 0.000, 194.000 (wgt'ed) examples reached here.  /* #neg=194 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09240992209465812;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.32174959214805987;  // std dev = 2.15e-07, 108.000 (wgt'ed) examples reached here.  /* #pos=108 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.32071184716014955;  // std dev = 4.71e-08, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return -0.09421573393663246;  // std dev = 0.123, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   else return -0.0926912761892606;  // std dev = 3.33e-08, 159.000 (wgt'ed) examples reached here.  /* #neg=159 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.2557604093827539;  // std dev = 0.003, 130.000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.08434355110083343;  // std dev = 0.002, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   else return -0.08518475138839678;  // std dev = 8.02e-08, 210.000 (wgt'ed) examples reached here.  /* #neg=210 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07861525445787211;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.21027759223525544;  // std dev = 1.33e-07, 108.000 (wgt'ed) examples reached here.  /* #pos=108 */
%   | | else if ( actor(B) )
%   | | | then return -0.07798918891789793;  // std dev = 3.41e-08, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | | | else return 0.1398382422328352;  // std dev = 0.835, 26.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=22 */
%   else return -0.07877675473109144;  // std dev = 7.60e-08, 203.000 (wgt'ed) examples reached here.  /* #neg=203 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17140851696314366;  // std dev = 0.468, 110.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=108 */
%   | else if ( genre(A, E) )
%   | | then return -0.07310610676056982;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.18742752589568912;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return -0.07866537303266555;  // std dev = 0.276, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   else return -0.07324622576333668;  // std dev = 1.08e-07, 185.000 (wgt'ed) examples reached here.  /* #neg=185 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.06830431507753554;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( director(B), actor(A) )
%   | | then return 0.15495774132362053;  // std dev = 0.029, 130.000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | | else return -0.07047895510983666;  // std dev = 0.187, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   else return -0.06842697784420261;  // std dev = 5.77e-08, 177.000 (wgt'ed) examples reached here.  /* #neg=177 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( actor(A) )
%   | | then return 0.1347150781688223;  // std dev = 0.000, 108.000 (wgt'ed) examples reached here.  /* #pos=108 */
%   | | else return -0.17041280609289963;  // std dev = 3.73e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(A, E) )
%   | | then return -0.06408360360143234;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( actor(B) )
%   | | | then return -0.06314349736345282;  // std dev = 0.000, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   | | | else return 0.14073506639560085;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else return -0.06419184008202626;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #neg=178 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063256
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.948 seconds
Total inference time: 1.705 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.065681
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.384 seconds
Refined model CLL: -0.065681


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063256
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 9.667 seconds
Total inference time: 1.705 seconds
AUC ROC: 1.0
Total revision time: 9.667
Best scored revision CLL: -0.065681


Dataset: 4_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 00:19:03
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063256, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 9.667, 'Inference time': 1.705, 'parameter_0.4': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.131366, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 2.075, 'Inference time': 1.717}}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995098;  // std dev = 9.68e-07, 156.000 (wgt'ed) examples reached here.  /* #pos=156 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.15585885876363334;  // std dev = 5.233, 131.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=39 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048793;  // std dev = 0.000, 287.000 (wgt'ed) examples reached here.  /* #neg=287 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7035315621970063;  // std dev = 1.450, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 7.45e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.1772280706447744;  // std dev = 5.077, 115.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=39 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.125444638528392;  // std dev = 0.000, 292.000 (wgt'ed) examples reached here.  /* #neg=292 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.16049306013718406;  // std dev = 0.147, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( movie(E, A) )
%   | | then return 0.37594654471266736;  // std dev = 0.373, 276.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=195 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360685;  // std dev = 0.000, 249.000 (wgt'ed) examples reached here.  /* #neg=249 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.445037133407144;  // std dev = 1.461, 161.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=156 */
%   | else if ( genre(A, E) )
%   | | then return -0.09728265613589449;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.09066894419338309;  // std dev = 5.065, 114.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=39 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783662;  // std dev = 0.000, 291.000 (wgt'ed) examples reached here.  /* #neg=291 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1062548651224921;  // std dev = 0.180, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( genre(B, E) )
%   | | then return 0.3583197976054389;  // std dev = 0.000, 156.000 (wgt'ed) examples reached here.  /* #pos=156 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.03580458271739335;  // std dev = 5.207, 128.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=39 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926043;  // std dev = 1.41e-07, 284.000 (wgt'ed) examples reached here.  /* #neg=284 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.27727484217006465;  // std dev = 0.536, 157.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=156 */
%   | else if ( movie(E, A) )
%   | | then return 0.05537398569782889;  // std dev = 0.458, 123.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=39 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 9.54e-08, 264.000 (wgt'ed) examples reached here.  /* #neg=264 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14739803897937007;  // std dev = 0.338, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( genre(B, E) )
%   | | then return 0.22824301190168528;  // std dev = 0.000, 156.000 (wgt'ed) examples reached here.  /* #pos=156 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.029893022525841795;  // std dev = 5.161, 123.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=39 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109143;  // std dev = 5.37e-08, 273.000 (wgt'ed) examples reached here.  /* #neg=273 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17583759984575476;  // std dev = 1.042, 161.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=156 */
%   | else if ( genre(A, E) )
%   | | then return -0.07423736054210563;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.061207256232449936;  // std dev = 5.017, 110.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=39 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333695;  // std dev = 5.96e-09, 292.000 (wgt'ed) examples reached here.  /* #neg=292 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.17370541023970218;  // std dev = 0.428, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( movie(E, B) )
%   | | then return 0.08036692595870416;  // std dev = 5.490, 291.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=195 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.0684269778442031;  // std dev = 0.000, 322.000 (wgt'ed) examples reached here.  /* #neg=322 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14585857458662063;  // std dev = 0.750, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   | else if ( genre(A, E) )
%   | | then return -0.0588952998842389;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.02351784184504847;  // std dev = 5.225, 130.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=39 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.064191840082026;  // std dev = 6.25e-09, 291.000 (wgt'ed) examples reached here.  /* #neg=291 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.148185
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.462 seconds
Total inference time: 2.04 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.977563
   AUC PR    = 0.852938
   CLL	      = -0.141937
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.8
   F1        = 0.888889


Total scoring time: 2.545 seconds
Parameter learned model CLL: -0.141937


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 6, 0], 'true,false,true': [9.68e-07, 0, 156], 'true,false,false,true': [5.233, 92, 39], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 287, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.45, 3, 156], 'true,false,true': [7.45e-09, 13, 0], 'true,false,false,true': [5.077, 76, 39], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 292, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.147, 7, 0], 'true,false,true': [0.373, 81, 195], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 249, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.461, 5, 156], 'true,false,true': [0.0, 9, 0], 'true,false,false,true': [5.065, 75, 39], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 291, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.18, 11, 0], 'true,false,true': [0.0, 0, 156], 'true,false,false,true': [5.207, 89, 39], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.41e-07, 284, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.536, 1, 156], 'true,false,true': [0.458, 84, 39], 'true,false,false': [0.0, 0, 0], 'false,true': [9.54e-08, 264, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.338, 11, 0], 'true,false,true': [0.0, 0, 156], 'true,false,false,true': [5.161, 84, 39], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.37e-08, 273, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [1.042, 5, 156], 'true,false,true': [0.0, 9, 0], 'true,false,false,true': [5.017, 71, 39], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.96e-09, 292, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.428, 12, 0], 'true,false,true': [5.49, 96, 195], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 322, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.75, 3, 156], 'true,false,true': [0.0, 10, 0], 'true,false,false,true': [5.225, 91, 39], 'true,false,false,false': [0.0, 0, 0], 'false,true': [6.25e-09, 291, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.2226001467693324, -3.0946983264812726e-18], 'true': [-6.938893903907228e-18, 0.21780038606757887], 'true,false': [6.012284687200848e-15, 0.209078725016026], 'true,false,false': [0.209078725016026, nan], 'false': [-3.0946983264812726e-18, nan]}, {'': [0.17752353410632798, -7.908437983631252e-17], 'true': [0.013215414257095708, 0.20971795465320814], 'true,false': [4.270088556250602e-18, 0.22412098298676736], 'true,false,false': [0.22412098298676736, nan], 'false': [-7.908437983631252e-17, nan]}, {'': [0.1426623828735495, -9.095803093314535e-17], 'true': [0.0030946569107901984, 0.13908422125637324], 'true,false': [0.13908422125637324, nan], 'false': [-9.095803093314535e-17, nan]}, {'': [0.13216726812524898, -5.493887132165723e-17], 'true': [0.013253291039117363, 0.21099645235003164], 'true,false': [0.0, 0.22506925207756137], 'true,false,false': [0.22506925207756137, nan], 'false': [-5.493887132165723e-17, nan]}, {'': [0.12048178151241042, 7.03662480396226e-17], 'true': [0.002953975122662066, 0.12123430386633396], 'true,false': [-8.198570028001156e-16, 0.2118530273437494], 'true,false,false': [0.2118530273437494, nan], 'false': [7.03662480396226e-17, nan]}, {'': [0.10543422328734854, 3.448420000729653e-17], 'true': [0.001831885774151026, 0.21006503943714708], 'true,false': [0.21006503943714708, nan], 'false': [3.448420000729653e-17, nan]}, {'': [0.10459656110992967, 1.057355261547768e-17], 'true': [0.010374412279123436, 0.10516096796968749], 'true,false': [-1.0248212535001446e-16, 0.2165377751338485], 'true,false,false': [0.2165377751338485, nan], 'false': [1.057355261547768e-17, nan]}, {'': [0.09813653400203493, 3.497962954298438e-17], 'true': [0.006744688820847436, 0.21281804513986477], 'true,false': [0.0, 0.2288429752066121], 'true,false,false': [0.2288429752066121, nan], 'false': [3.497962954298438e-17, nan]}, {'': [0.10251600714486811, -7.447458798727759e-17], 'true': [0.015262488326065323, 0.10355754576062043], 'true,false': [0.10355754576062043, nan], 'false': [-7.447458798727759e-17, nan]}, {'': [0.10058477647026667, 3.8915033852840536e-17], 'true': [0.003542301448685034, 0.1950830119335974], 'true,false': [-1.3877787807814458e-18, 0.2100000000000001], 'true,false,false': [0.2100000000000001, nan], 'false': [3.8915033852840536e-17, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995098;  // std dev = 9.68e-07, 156.000 (wgt'ed) examples reached here.  /* #pos=156 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.8581489350995116;  // std dev = 2.46e-07, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return -0.14185106490048766;  // std dev = 7.15e-08, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
%   else return -0.14185106490048793;  // std dev = 0.000, 287.000 (wgt'ed) examples reached here.  /* #neg=287 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109546;  // std dev = 8.43e-08, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | | else if ( actor(A) )
%   | | | then return 0.7194734122109542;  // std dev = 2.23e-07, 93.000 (wgt'ed) examples reached here.  /* #pos=93 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.719473412210955;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return -0.1254446385283914;  // std dev = 0.000, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
%   else return -0.12544463852839202;  // std dev = 0.000, 303.000 (wgt'ed) examples reached here.  /* #neg=303 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5553664367462837;  // std dev = 5.53e-07, 195.000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.11231637819360625;  // std dev = 6.32e-08, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
%   else return -0.11231637819360686;  // std dev = 0.000, 296.000 (wgt'ed) examples reached here.  /* #neg=296 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( actor(A) )
%   | | then return 0.41751358415831247;  // std dev = 0.000, 156.000 (wgt'ed) examples reached here.  /* #pos=156 */
%   | | else return -0.10159632948783633;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783634;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.41751358415831047;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return -0.10159632948783617;  // std dev = 5.77e-08, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
%   else return -0.10159632948783662;  // std dev = 0.000, 284.000 (wgt'ed) examples reached here.  /* #neg=284 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.092691276189261;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( genre(B, E) )
%   | | then return 0.3207118471601493;  // std dev = 2.86e-07, 156.000 (wgt'ed) examples reached here.  /* #pos=156 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.32071184716014944;  // std dev = 2.98e-08, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return -0.09269127618926107;  // std dev = 0.000, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
%   else return -0.09269127618926043;  // std dev = 1.48e-07, 291.000 (wgt'ed) examples reached here.  /* #neg=291 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2530043636270821;  // std dev = 0.339, 157.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=156 */
%   | else if ( actor(A), director(B) )
%   | | then return 0.2551722425694896;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | else return -0.08518475138839679;  // std dev = 4.71e-08, 123.000 (wgt'ed) examples reached here.  /* #neg=123 */
%   else return -0.08518475138839678;  // std dev = 9.88e-08, 282.000 (wgt'ed) examples reached here.  /* #neg=282 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08255084520556107;  // std dev = 0.037, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( genre(B, E) )
%   | | then return 0.2101172880865893;  // std dev = 0.000, 156.000 (wgt'ed) examples reached here.  /* #pos=156 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.2097577156325354;  // std dev = 6.14e-08, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return -0.07877675473109165;  // std dev = 4.15e-08, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
%   else return -0.07877675473109141;  // std dev = 3.33e-08, 318.000 (wgt'ed) examples reached here.  /* #neg=318 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17385636405314203;  // std dev = 0.389, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   | else if ( genre(A, E) )
%   | | then return -0.0729904481728476;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.17709649774527753;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return -0.07324622576333704;  // std dev = 0.000, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
%   else return -0.07324622576333698;  // std dev = 9.77e-08, 298.000 (wgt'ed) examples reached here.  /* #neg=298 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.15326744260416927;  // std dev = 0.004, 195.000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.06840738365080205;  // std dev = 0.000566, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
%   else return -0.068426977844203;  // std dev = 0.000, 299.000 (wgt'ed) examples reached here.  /* #neg=299 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.12993254085104428;  // std dev = 0.418, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   | else if ( genre(A, E) )
%   | | then return -0.06398198787520974;  // std dev = 4.56e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.13394628011553603;  // std dev = 2.58e-08, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return -0.06419301713972371;  // std dev = 0.000, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
%   else return -0.06419184008202598;  // std dev = 1.08e-07, 293.000 (wgt'ed) examples reached here.  /* #neg=293 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063496
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.405 seconds
Total inference time: 1.916 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064575
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.514 seconds
Refined model CLL: -0.064575


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063496
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 10.925999999999998 seconds
Total inference time: 1.916 seconds
AUC ROC: 1.0
Total revision time: 10.925999999999998
Best scored revision CLL: -0.064575


Dataset: 4_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 00:19:19
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063496, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 10.925999999999998, 'Inference time': 1.916, 'parameter_0.6': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.148185, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 2.462, 'Inference time': 2.04}}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995091;  // std dev = 1.08e-06, 212.000 (wgt'ed) examples reached here.  /* #pos=212 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.1473055616055365;  // std dev = 5.841, 166.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=48 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004874;  // std dev = 2.83e-07, 385.000 (wgt'ed) examples reached here.  /* #neg=385 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7115769818302156;  // std dev = 1.189, 214.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=212 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 7.45e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.11671152642675615;  // std dev = 5.889, 173.000 (wgt'ed) examples reached here.  /* #neg=125 #pos=48 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1254446385283922;  // std dev = 0.000, 359.000 (wgt'ed) examples reached here.  /* #neg=359 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14335740006346598;  // std dev = 0.238, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else if ( movie(E, A) )
%   | | then return 0.3660808557226561;  // std dev = 0.371, 375.000 (wgt'ed) examples reached here.  /* #neg=115 #pos=260 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360636;  // std dev = 0.000, 371.000 (wgt'ed) examples reached here.  /* #neg=371 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4598561486393449;  // std dev = 0.940, 214.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=212 */
%   | else if ( genre(A, E) )
%   | | then return -0.09879790764134011;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.034313752154425725;  // std dev = 5.915, 177.000 (wgt'ed) examples reached here.  /* #neg=129 #pos=48 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783628;  // std dev = 6.04e-09, 353.000 (wgt'ed) examples reached here.  /* #neg=353 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14631029620111952;  // std dev = 0.234, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(B, E) )
%   | | then return 0.35533657470150104;  // std dev = 0.000, 212.000 (wgt'ed) examples reached here.  /* #pos=212 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.029595998517592145;  // std dev = 5.908, 176.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=48 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0926912761892609;  // std dev = 1.44e-07, 402.000 (wgt'ed) examples reached here.  /* #neg=402 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.27120511154131033;  // std dev = 0.922, 215.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=212 */
%   | else if ( movie(E, A) )
%   | | then return 0.061287415235374496;  // std dev = 0.450, 162.000 (wgt'ed) examples reached here.  /* #neg=114 #pos=48 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.23e-07, 396.000 (wgt'ed) examples reached here.  /* #neg=396 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12519761303083254;  // std dev = 0.293, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( genre(B, E) )
%   | | then return 0.22754871331683324;  // std dev = 0.000, 212.000 (wgt'ed) examples reached here.  /* #pos=212 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.023780465796780986;  // std dev = 5.862, 169.000 (wgt'ed) examples reached here.  /* #neg=121 #pos=48 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109141;  // std dev = 6.99e-08, 348.000 (wgt'ed) examples reached here.  /* #neg=348 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18780382611293744;  // std dev = 0.475, 213.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=212 */
%   | else if ( genre(A, E) )
%   | | then return -0.07449058900900228;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.006782856827631319;  // std dev = 5.968, 186.000 (wgt'ed) examples reached here.  /* #neg=138 #pos=48 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333722;  // std dev = 0.000, 406.000 (wgt'ed) examples reached here.  /* #neg=406 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.06951508439968336;  // std dev = 5.27e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( movie(E, B) )
%   | | then return 0.09404540984225268;  // std dev = 6.087, 387.000 (wgt'ed) examples reached here.  /* #neg=127 #pos=260 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420333;  // std dev = 0.000, 393.000 (wgt'ed) examples reached here.  /* #neg=393 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14607140489195572;  // std dev = 0.649, 214.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=212 */
%   | else if ( genre(A, E) )
%   | | then return -0.0651510114342062;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.029505920622406496;  // std dev = 5.748, 154.000 (wgt'ed) examples reached here.  /* #neg=106 #pos=48 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202566;  // std dev = 9.27e-09, 376.000 (wgt'ed) examples reached here.  /* #neg=376 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.136879
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.629 seconds
Total inference time: 1.745 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.9779
   AUC PR    = 0.86032
   CLL	      = -0.134044
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.815385
   F1        = 0.898305


Total scoring time: 2.913 seconds
Parameter learned model CLL: -0.134044


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 14, 0], 'true,false,true': [1.08e-06, 0, 212], 'true,false,false,true': [5.841, 118, 48], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.83e-07, 385, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.189, 2, 212], 'true,false,true': [7.45e-09, 13, 0], 'true,false,false,true': [5.889, 125, 48], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 359, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.238, 22, 0], 'true,false,true': [0.371, 115, 260], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 371, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.94, 2, 212], 'true,false,true': [0.0, 8, 0], 'true,false,false,true': [5.915, 129, 48], 'true,false,false,false': [0.0, 0, 0], 'false,true': [6.04e-09, 353, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.234, 7, 0], 'true,false,true': [0.0, 0, 212], 'true,false,false,true': [5.908, 128, 48], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.44e-07, 402, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.922, 3, 212], 'true,false,true': [0.45, 114, 48], 'true,false,false': [0.0, 0, 0], 'false,true': [1.23e-07, 396, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.293, 11, 0], 'true,false,true': [0.0, 0, 212], 'true,false,false,true': [5.862, 121, 48], 'true,false,false,false': [0.0, 0, 0], 'false,true': [6.99e-08, 348, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.475, 1, 212], 'true,false,true': [0.0, 7, 0], 'true,false,false,true': [5.968, 138, 48], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 406, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [5.27e-09, 10, 0], 'true,false,true': [6.087, 127, 260], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 393, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.649, 2, 212], 'true,false,true': [0.0, 13, 0], 'true,false,false,true': [5.748, 106, 48], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.27e-09, 376, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.2233444398167466, 2.0762612408574356e-16], 'true': [-1.1895246692412391e-17, 0.21471963270905434], 'true,false': [5.496651352106436e-15, 0.20554507185368068], 'true,false,false': [0.20554507185368068, nan], 'false': [2.0762612408574356e-16, nan]}, {'': [0.1851272183472496, -1.2122769516798366e-16], 'true': [0.006609482952333307, 0.19027481590134426], 'true,false': [4.270088556250602e-18, 0.20047445621303728], 'true,false,false': [0.20047445621303728, nan], 'false': [-1.2122769516798366e-16, nan]}, {'': [0.14395813343215036, -2.6334131042321772e-17], 'true': [0.002569453436600273, 0.13787106848034036], 'true,false': [0.13787106848034036, nan], 'false': [-2.6334131042321772e-17, nan]}, {'': [0.13649236572109194, 3.7741292621818353e-17], 'true': [0.004133002360375584, 0.18983065319989106], 'true,false': [0.0, 0.1976443550703825], 'true,false,false': [0.1976443550703825, nan], 'false': [3.7741292621818353e-17, nan]}, {'': [0.11652859670117795, 5.192087776853966e-17], 'true': [0.007830775314656825, 0.11627025177145381], 'true,false': [-1.508227505151156e-16, 0.19834710743801676], 'true,false,false': [0.19834710743801676, nan], 'false': [5.192087776853966e-17, nan]}, {'': [0.10009556701787146, 3.812887155278315e-17], 'true': [0.003952504952603634, 0.20256268309974845], 'true,false': [0.20256268309974845, nan], 'false': [3.812887155278315e-17, nan]}, {'': [0.09972704744962332, 1.403730261020313e-17], 'true': [0.007788475261964659, 0.10044989634446726], 'true,false': [-1.6758083390568402e-16, 0.20335422429186756], 'true,false,false': [0.20335422429186756, nan], 'false': [1.403730261020313e-17, nan]}, {'': [0.09803148585684934, 0.0], 'true': [0.001059657755229362, 0.18468305536661242], 'true,false': [0.0, 0.1914672216441212], 'true,false,false': [0.1914672216441212, nan], 'false': [0.0, nan]}, {'': [0.09398271540997703, -1.1073980296515557e-16], 'true': [2.7755575615628915e-18, 0.09573735455535613], 'true,false': [0.09573735455535613, nan], 'false': [-1.1073980296515557e-16, nan]}, {'': [0.09188648319508036, 8.680999181909469e-17], 'true': [0.0019702592168883886, 0.19848127516041417], 'true,false': [-3.736327486719277e-18, 0.21453870804520092], 'true,false,false': [0.21453870804520092, nan], 'false': [8.680999181909469e-17, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995091;  // std dev = 1.08e-06, 212.000 (wgt'ed) examples reached here.  /* #pos=212 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.8581489350995121;  // std dev = 1.69e-07, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | | else return -0.14185106490048785;  // std dev = 0.000, 130.000 (wgt'ed) examples reached here.  /* #neg=130 */
%   else return -0.14185106490048743;  // std dev = 2.63e-07, 372.000 (wgt'ed) examples reached here.  /* #neg=372 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109542;  // std dev = 2.23e-07, 77.000 (wgt'ed) examples reached here.  /* #pos=77 */
%   | | else return 0.7132607794849312;  // std dev = 0.072, 136.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=135 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 7.45e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.7194734122109548;  // std dev = 0.000, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | | else return -0.12544463852839108;  // std dev = 7.88e-08, 128.000 (wgt'ed) examples reached here.  /* #neg=128 */
%   else return -0.12544463852839227;  // std dev = 0.000, 406.000 (wgt'ed) examples reached here.  /* #neg=406 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5561627193306701;  // std dev = 0.012, 260.000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.11423422484564803;  // std dev = 0.160, 119.000 (wgt'ed) examples reached here.  /* #neg=119 */
%   else return -0.11231637819360632;  // std dev = 0.000, 378.000 (wgt'ed) examples reached here.  /* #neg=378 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.4173199441549151;  // std dev = 0.000, 77.000 (wgt'ed) examples reached here.  /* #pos=77 */
%   | | else if ( actor(A) )
%   | | | then return 0.4188314043475018;  // std dev = 1.46e-07, 135.000 (wgt'ed) examples reached here.  /* #pos=135 */
%   | | | else return -0.20704595260594047;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(A, E) )
%   | | then return -0.10142141266776704;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.41731994415491475;  // std dev = 0.000, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | | else return -0.10142141266776696;  // std dev = 7.60e-08, 133.000 (wgt'ed) examples reached here.  /* #neg=133 */
%   else return -0.10159632948783587;  // std dev = 2.35e-07, 409.000 (wgt'ed) examples reached here.  /* #neg=409 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10286482270748971;  // std dev = 0.109, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( genre(B, E) )
%   | | then return 0.32123316897984855;  // std dev = 0.007, 212.000 (wgt'ed) examples reached here.  /* #pos=212 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.3205805721915099;  // std dev = 1.26e-07, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | | else return -0.09254480050316206;  // std dev = 0.000, 113.000 (wgt'ed) examples reached here.  /* #neg=113 */
%   else return -0.09269127618926096;  // std dev = 1.30e-07, 411.000 (wgt'ed) examples reached here.  /* #neg=411 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.25544578290079434;  // std dev = 0.007, 260.000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.08551233156043163;  // std dev = 0.076, 148.000 (wgt'ed) examples reached here.  /* #neg=148 */
%   else return -0.08518475138839678;  // std dev = 1.23e-07, 375.000 (wgt'ed) examples reached here.  /* #neg=375 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08130432821545784;  // std dev = 0.070, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else if ( genre(B, E) )
%   | | then return 0.21002266375472206;  // std dev = 0.005, 212.000 (wgt'ed) examples reached here.  /* #pos=212 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.2096342668223575;  // std dev = 2.98e-08, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | | else return -0.0786372387930682;  // std dev = 0.000, 115.000 (wgt'ed) examples reached here.  /* #neg=115 */
%   else return -0.07877675473109141;  // std dev = 1.19e-07, 399.000 (wgt'ed) examples reached here.  /* #neg=399 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( actor(A) )
%   | | then return 0.17729082461139922;  // std dev = 0.005, 212.000 (wgt'ed) examples reached here.  /* #pos=212 */
%   | | else return -0.13948764465172828;  // std dev = 7.45e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(A, E) )
%   | | then return -0.07224980893290377;  // std dev = 5.27e-09, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.17700594861092514;  // std dev = 0.000, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | | else return -0.07312518269788713;  // std dev = 0.000, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
%   else return -0.0732462257633372;  // std dev = 3.65e-08, 391.000 (wgt'ed) examples reached here.  /* #neg=391 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07743942612008418;  // std dev = 0.088, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( actor(A), director(B) )
%   | | then return 0.1528513773314635;  // std dev = 0.004, 260.000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | | else return -0.06832101616066573;  // std dev = 2.79e-08, 129.000 (wgt'ed) examples reached here.  /* #neg=129 */
%   else return -0.06842697784420339;  // std dev = 0.000, 413.000 (wgt'ed) examples reached here.  /* #neg=413 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13179448362206686;  // std dev = 0.351, 214.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=212 */
%   | else if ( genre(A, E) )
%   | | then return -0.06283647566583705;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.1339329581505302;  // std dev = 2.11e-08, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | | else return -0.06409834177824532;  // std dev = 4.34e-08, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
%   else return -0.06419184008202569;  // std dev = 1.73e-07, 366.000 (wgt'ed) examples reached here.  /* #neg=366 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.06345
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.966 seconds
Total inference time: 1.894 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064578
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.625 seconds
Refined model CLL: -0.064578


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.06345
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 12.133 seconds
Total inference time: 1.894 seconds
AUC ROC: 1.0
Total revision time: 12.133
Best scored revision CLL: -0.064578


Dataset: 4_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 00:19:35
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.06345, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 12.133, 'Inference time': 1.894, 'parameter_0.8': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.136879, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 2.629, 'Inference time': 1.745}}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048774;  // std dev = 1.05e-08, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995086;  // std dev = 1.08e-06, 267.000 (wgt'ed) examples reached here.  /* #pos=267 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.1516812734079712;  // std dev = 6.456, 201.000 (wgt'ed) examples reached here.  /* #neg=142 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048757;  // std dev = 1.19e-07, 486.000 (wgt'ed) examples reached here.  /* #neg=486 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7100854338694093;  // std dev = 1.455, 270.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=267 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 7.45e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.17970415446035679;  // std dev = 6.235, 173.000 (wgt'ed) examples reached here.  /* #neg=114 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839233;  // std dev = 0.000, 487.000 (wgt'ed) examples reached here.  /* #neg=487 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14219958088363432;  // std dev = 0.218, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( movie(E, A) )
%   | | then return 0.35232663899087263;  // std dev = 0.377, 478.000 (wgt'ed) examples reached here.  /* #neg=152 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360578;  // std dev = 0.000, 513.000 (wgt'ed) examples reached here.  /* #neg=513 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.46490084047857233;  // std dev = 0.947, 269.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=267 */
%   | else if ( genre(A, E) )
%   | | then return -0.09890104414736937;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.05586361972487201;  // std dev = 6.415, 195.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1015963294878354;  // std dev = 1.56e-08, 499.000 (wgt'ed) examples reached here.  /* #neg=499 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14220927180804557;  // std dev = 0.378, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( genre(B, E) )
%   | | then return 0.3576767931133797;  // std dev = 0.000, 267.000 (wgt'ed) examples reached here.  /* #pos=267 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.01591977194547003;  // std dev = 6.549, 216.000 (wgt'ed) examples reached here.  /* #neg=157 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926142;  // std dev = 0.000, 490.000 (wgt'ed) examples reached here.  /* #neg=490 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.27035415198533297;  // std dev = 1.195, 272.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=267 */
%   | else if ( movie(E, A) )
%   | | then return -0.01731597788384012;  // std dev = 0.419, 254.000 (wgt'ed) examples reached here.  /* #neg=195 #pos=59 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.40e-07, 445.000 (wgt'ed) examples reached here.  /* #neg=445 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.17530767139084918;  // std dev = 0.479, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( genre(B, E) )
%   | | then return 0.2290836249191149;  // std dev = 4.93e-07, 267.000 (wgt'ed) examples reached here.  /* #pos=267 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.03367868926533742;  // std dev = 6.469, 203.000 (wgt'ed) examples reached here.  /* #neg=144 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109196;  // std dev = 1.55e-07, 480.000 (wgt'ed) examples reached here.  /* #neg=480 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18252939634357693;  // std dev = 1.039, 272.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=267 */
%   | else if ( genre(A, E) )
%   | | then return -0.06640754935424038;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.03453529026094387;  // std dev = 6.436, 198.000 (wgt'ed) examples reached here.  /* #neg=139 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333685;  // std dev = 7.62e-09, 513.000 (wgt'ed) examples reached here.  /* #neg=513 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1468313160348021;  // std dev = 0.547, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else if ( movie(E, B) )
%   | | then return 0.09681330786456359;  // std dev = 6.723, 477.000 (wgt'ed) examples reached here.  /* #neg=151 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420353;  // std dev = 0.000, 486.000 (wgt'ed) examples reached here.  /* #neg=486 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1436007102017168;  // std dev = 0.967, 272.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=267 */
%   | else if ( genre(A, E) )
%   | | then return -0.05434793356704703;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.012714629549679498;  // std dev = 6.531, 213.000 (wgt'ed) examples reached here.  /* #neg=154 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202539;  // std dev = 1.10e-08, 493.000 (wgt'ed) examples reached here.  /* #neg=493 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.136294
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.925 seconds
Total inference time: 1.796 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.978388
   AUC PR    = 0.863056
   CLL	      = -0.132895
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.819018
   F1        = 0.900506


Total scoring time: 3.391 seconds
Parameter learned model CLL: -0.132895


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [1.05e-08, 22, 0], 'true,false,true': [1.08e-06, 0, 267], 'true,false,false,true': [6.456, 142, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.19e-07, 486, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.455, 3, 267], 'true,false,true': [7.45e-09, 15, 0], 'true,false,false,true': [6.235, 114, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 487, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.218, 19, 0], 'true,false,true': [0.377, 152, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 513, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.947, 2, 267], 'true,false,true': [0.0, 15, 0], 'true,false,false,true': [6.415, 136, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.56e-08, 499, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.378, 19, 0], 'true,false,true': [0.0, 0, 267], 'true,false,false,true': [6.549, 157, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 490, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [1.195, 5, 267], 'true,false,true': [0.419, 195, 59], 'true,false,false': [0.0, 0, 0], 'false,true': [1.4e-07, 445, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.479, 17, 0], 'true,false,true': [4.93e-07, 0, 267], 'true,false,false,true': [6.469, 144, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.55e-07, 480, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [1.039, 5, 267], 'true,false,true': [0.0, 11, 0], 'true,false,false,true': [6.436, 139, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.62e-09, 513, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.547, 21, 0], 'true,false,true': [6.723, 151, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 486, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.967, 5, 267], 'true,false,true': [0.0, 17, 0], 'true,false,false,true': [6.531, 154, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.1e-08, 493, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.22267388588088574, 2.924044180082717e-17], 'true': [5.046468293750712e-18, 0.21135583315070772], 'true,false': [4.364382346990877e-15, 0.20737110467562728], 'true,false,false': [0.20737110467562728, nan], 'false': [2.924044180082717e-17, nan]}, {'': [0.16678311315191896, -1.3860689917291483e-16], 'true': [0.007843938223378451, 0.21363780712609276], 'true,false': [3.7007434154171884e-18, 0.2247318654148154], 'true,false,false': [0.2247318654148154, nan], 'false': [-1.3860689917291483e-16, nan]}, {'': [0.145929010131837, -6.92536779493275e-18], 'true': [0.0025004162484372205, 0.14228091640552473], 'true,false': [0.14228091640552473, nan], 'false': [-6.92536779493275e-18, nan]}, {'': [0.13192270055055502, 2.456285008389124e-16], 'true': [0.0033313108984014206, 0.1975349357186487], 'true,false': [-3.7007434154171884e-18, 0.21101906640368], 'true,false,false': [0.21101906640368, nan], 'false': [2.456285008389124e-16, nan]}, {'': [0.11787812339867394, -2.1751308237554086e-17], 'true': [0.007507070835801129, 0.1176611991635366], 'true,false': [-1.2507681116376296e-15, 0.1985382373113869], 'true,false,false': [0.1985382373113869, nan], 'false': [-2.1751308237554086e-17, nan]}, {'': [0.10797188817991421, 4.390994434472529e-17], 'true': [0.005247102642459017, 0.17518338638048606], 'true,false': [0.17518338638048606, nan], 'false': [4.390994434472529e-17, nan]}, {'': [0.09890103457414827, 4.9960036108132046e-17], 'true': [0.013488543599782825, 0.09841604106921735], 'true,false': [9.114639962465705e-16, 0.20616855541265458], 'true,false,false': [0.20616855541265458, nan], 'false': [4.9960036108132046e-17, nan]}, {'': [0.09434866571215395, 5.799995528256178e-17], 'true': [0.003965366095006071, 0.19868601332783134], 'true,false': [-1.261617073437678e-18, 0.20918783797571566], 'true,false,false': [0.20918783797571566, nan], 'false': [5.799995528256178e-17, nan]}, {'': [0.09376688803625687, -1.2061682242841206e-16], 'true': [0.01425489657696738, 0.09476416946041792], 'true,false': [0.09476416946041792, nan], 'false': [-1.2061682242841206e-16, nan]}, {'': [0.09319868135092074, 1.2160657876218752e-16], 'true': [0.0034376422998501533, 0.18558506813051914], 'true,false': [-1.224510688924805e-18, 0.20026890608124395], 'true,false,false': [0.20026890608124395, nan], 'false': [1.2160657876218752e-16, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048774;  // std dev = 1.05e-08, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995086;  // std dev = 1.08e-06, 267.000 (wgt'ed) examples reached here.  /* #pos=267 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.8581489350995125;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.141851064900488;  // std dev = 0.000, 142.000 (wgt'ed) examples reached here.  /* #neg=142 */
%   else return -0.1418510649004879;  // std dev = 0.000, 518.000 (wgt'ed) examples reached here.  /* #neg=518 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109543;  // std dev = 2.23e-07, 95.000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | | else return 0.7097617104783204;  // std dev = 0.090, 174.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=172 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.7194734122109543;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.12544463852839144;  // std dev = 0.000, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
%   else return -0.12544463852839227;  // std dev = 0.000, 467.000 (wgt'ed) examples reached here.  /* #neg=467 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5566310309443246;  // std dev = 0.022, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.11645438338157782;  // std dev = 0.295, 192.000 (wgt'ed) examples reached here.  /* #neg=192 */
%   else return -0.11231637819360572;  // std dev = 0.000, 533.000 (wgt'ed) examples reached here.  /* #neg=533 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.41720607203698773;  // std dev = 1.88e-07, 95.000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | | else return 0.40534935558870894;  // std dev = 0.093, 176.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=172 */
%   | else if ( genre(A, E) )
%   | | then return -0.10121925724791396;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( actor(B) )
%   | | | then return -0.101219257247914;  // std dev = 0.000, 119.000 (wgt'ed) examples reached here.  /* #neg=119 */
%   | | | else return 0.392120975458685;  // std dev = 0.876, 62.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=59 */
%   else return -0.10159632948783548;  // std dev = 3.28e-07, 480.000 (wgt'ed) examples reached here.  /* #neg=480 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( actor(B) )
%   | | then return -0.09237546736691568;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else return -0.28025554409666925;  // std dev = 7.45e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.32354092481971913;  // std dev = 0.037, 267.000 (wgt'ed) examples reached here.  /* #pos=267 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.3259908542375776;  // std dev = 7.88e-08, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.09417895445342674;  // std dev = 0.099, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
%   else return -0.09269127618926103;  // std dev = 1.21e-07, 422.000 (wgt'ed) examples reached here.  /* #neg=422 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.2574049757590922;  // std dev = 0.034, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.08676293698387408;  // std dev = 0.169, 168.000 (wgt'ed) examples reached here.  /* #neg=168 */
%   else return -0.08518475138839678;  // std dev = 1.53e-07, 526.000 (wgt'ed) examples reached here.  /* #neg=526 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08629758153933693;  // std dev = 0.130, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( genre(B, E) )
%   | | then return 0.21107124612774308;  // std dev = 0.028, 267.000 (wgt'ed) examples reached here.  /* #pos=267 */
%   | | else if ( actor(B) )
%   | | | then return -0.07828274989419805;  // std dev = 0.000, 136.000 (wgt'ed) examples reached here.  /* #neg=136 */
%   | | | else return 0.19633312709765244;  // std dev = 0.565, 62.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=59 */
%   else return -0.078776754731092;  // std dev = 1.44e-07, 488.000 (wgt'ed) examples reached here.  /* #neg=488 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17387726683985633;  // std dev = 0.649, 270.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=267 */
%   | else if ( genre(A, E) )
%   | | then return -0.0723992596538196;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.18151700042438113;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.0743269654185873;  // std dev = 0.123, 143.000 (wgt'ed) examples reached here.  /* #neg=143 */
%   else return -0.07324622576333713;  // std dev = 8.16e-08, 459.000 (wgt'ed) examples reached here.  /* #neg=459 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1543934479851956;  // std dev = 0.026, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.0753320904691697;  // std dev = 0.403, 166.000 (wgt'ed) examples reached here.  /* #neg=166 */
%   else return -0.06842697784420351;  // std dev = 0.000, 478.000 (wgt'ed) examples reached here.  /* #neg=478 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13107508076316188;  // std dev = 0.602, 270.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=267 */
%   | else if ( genre(A, E) )
%   | | then return -0.0630833958794442;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.136813302850583;  // std dev = 3.94e-08, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.06589178485648092;  // std dev = 0.153, 150.000 (wgt'ed) examples reached here.  /* #neg=150 */
%   else return -0.06419184008202539;  // std dev = 2.45e-07, 495.000 (wgt'ed) examples reached here.  /* #neg=495 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063354
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 4.724 seconds
Total inference time: 1.836 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.065563
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.79 seconds
Refined model CLL: -0.065563


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063354
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 13.829999999999998 seconds
Total inference time: 1.836 seconds
AUC ROC: 1.0
Total revision time: 13.829999999999998
Best scored revision CLL: -0.065563


Dataset: 4_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 00:19:54
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063354, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 13.829999999999998, 'Inference time': 1.836, 'parameter_1.0': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.136294, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 2.925, 'Inference time': 1.796}}


Starting fold 2

Target train facts examples: 870
Target train pos examples: 324
Target train neg examples: 10813

Target test facts examples: 208
Target test pos	 examples: 58
Target test neg examples: 3423

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995121;  // std dev = 2.06e-07, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.23592671287729014;  // std dev = 3.252, 45.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=17 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048763;  // std dev = 8.43e-08, 107.000 (wgt'ed) examples reached here.  /* #neg=107 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109548;  // std dev = 0.000, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.25193706640655944;  // std dev = 3.126, 40.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=17 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( movie(E, A) )
%   | | then return 0.41968366013063935;  // std dev = 0.364, 84.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=64 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360621;  // std dev = 7.30e-08, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.43709921468256424;  // std dev = 0.652, 48.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=47 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.04939603556063222;  // std dev = 3.350, 50.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=17 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783628;  // std dev = 3.48e-09, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.22392710143020303;  // std dev = 0.161, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.34651233921942476;  // std dev = 6.66e-08, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.02603164165813626;  // std dev = 3.383, 52.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=17 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926104;  // std dev = 2.98e-08, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2619089480023581;  // std dev = 0.513, 48.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=47 */
%   | else if ( movie(E, A) )
%   | | then return 0.05739179966756583;  // std dev = 0.473, 48.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839682;  // std dev = 5.37e-08, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07960370374443508;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.22394437410419668;  // std dev = 7.88e-08, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.06763770335226402;  // std dev = 3.230, 44.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=17 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109158;  // std dev = 5.96e-08, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17767365921459408;  // std dev = 0.464, 48.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=47 */
%   | else if ( genre(A, E) )
%   | | then return -0.07396312368870317;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.09141066194769096;  // std dev = 3.126, 40.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=17 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333707;  // std dev = 0.000, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.06905412380931467;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, B) )
%   | | then return 0.0991454883062464;  // std dev = 3.288, 91.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=64 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420265;  // std dev = 4.66e-09, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14885750774841022;  // std dev = 4.47e-08, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | else if ( genre(A, E) )
%   | | then return -0.06474488360143792;  // std dev = 1.32e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.06238768922771761;  // std dev = 3.413, 54.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=17 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.157819
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.7 seconds
Total inference time: 1.845 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.968363
   AUC PR    = 0.800711
   CLL	      = -0.16278
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.734375
   F1        = 0.846847


Total scoring time: 1.636 seconds
Parameter learned model CLL: -0.16278


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [2.06e-07, 0, 47], 'true,false,false,true': [3.252, 28, 17], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.43e-08, 107, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 47], 'true,false,true': [0.0, 6, 0], 'true,false,false,true': [3.126, 23, 17], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 99, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [2.63e-09, 3, 0], 'true,false,true': [0.364, 20, 64], 'true,false,false': [0.0, 0, 0], 'false,true': [7.3e-08, 89, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.652, 1, 47], 'true,false,true': [0.0, 4, 0], 'true,false,false,true': [3.35, 33, 17], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.48e-09, 101, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.161, 3, 0], 'true,false,true': [6.66e-08, 0, 47], 'true,false,false,true': [3.383, 35, 17], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.98e-08, 92, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.513, 1, 47], 'true,false,true': [0.473, 31, 17], 'true,false,false': [0.0, 0, 0], 'false,true': [5.37e-08, 96, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 4, 0], 'true,false,true': [7.88e-08, 0, 47], 'true,false,false,true': [3.23, 27, 17], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.96e-08, 102, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.464, 1, 47], 'true,false,true': [0.0, 5, 0], 'true,false,false,true': [3.126, 23, 17], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 103, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [3.288, 27, 64], 'true,false,false': [0.0, 0, 0], 'false,true': [4.66e-09, 92, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [4.47e-08, 0, 47], 'true,false,true': [1.32e-09, 3, 0], 'true,false,false,true': [3.413, 37, 17], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 100, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.21459128222915874, 6.640586315514955e-17], 'true': [0.0, 0.21172022684309946], 'true,false': [9.070758328852342e-16, 0.2350617283950612], 'true,false,false': [0.2350617283950612, nan], 'false': [6.640586315514955e-17, nan]}, {'': [0.17984977522793003, -1.1214373986112692e-17], 'true': [-7.558965274043619e-16, 0.22865315136706385], 'true,false': [-2.3129646346357427e-18, 0.2443750000000005], 'true,false,false': [0.2443750000000005, nan], 'false': [-1.1214373986112692e-17, nan]}, {'': [0.1376248284146706, 5.98771968337163e-17], 'true': [2.3129646346357427e-18, 0.13278055117608634], 'true,false': [0.13278055117608634, nan], 'false': [5.98771968337163e-17, nan]}, {'': [0.15463976875169952, 1.0992307174506501e-17], 'true': [0.008864862794476217, 0.20934147423202495], 'true,false': [0.0, 0.22439999999999954], 'true,false,false': [0.22439999999999954, nan], 'false': [1.0992307174506501e-17, nan]}, {'': [0.14190665870746338, 9.654113257610057e-18], 'true': [0.008611420913335546, 0.1411903391665505], 'true,false': [9.448706592554524e-17, 0.2200443786982244], 'true,false,false': [0.2200443786982244, nan], 'false': [9.654113257610057e-18, nan]}, {'': [0.12522167155382433, 3.0068540250264654e-17], 'true': [0.005482901707650238, 0.2240468094185009], 'true,false': [0.2240468094185009, nan], 'false': [3.0068540250264654e-17, nan]}, {'': [0.11774913176173536, 3.483052626275001e-17], 'true': [0.0, 0.12073667019809504], 'true,false': [1.3228189229576333e-16, 0.2370867768595037], 'true,false,false': [0.2370867768595037, nan], 'false': [3.483052626275001e-17, nan]}, {'': [0.11145981435515376, -4.311545726699637e-18], 'true': [0.004477346465291428, 0.2199233075531565], 'true,false': [0.0, 0.24437499999999973], 'true,false,false': [0.24437499999999973, nan], 'false': [-4.311545726699637e-18, nan]}, {'': [0.11784926712537881, 2.1118372751022e-17], 'true': [0.0, 0.11883680195691187], 'true,false': [0.11883680195691187, nan], 'false': [2.1118372751022e-17, nan]}, {'': [0.12306755143489874, -1.4988010832439614e-17], 'true': [4.2519179666495357e-17, 0.20435375333198663], 'true,false': [5.782411586589357e-19, 0.21570644718792828], 'true,false,false': [0.21570644718792828, nan], 'false': [-1.4988010832439614e-17, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995121;  // std dev = 2.06e-07, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.14185106490048774;  // std dev = 1.49e-08, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   else return -0.14185106490048766;  // std dev = 7.88e-08, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109548;  // std dev = 0.000, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.7194734122109542;  // std dev = 7.30e-08, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   else return -0.12544463852839138;  // std dev = 0.000, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( director(B), actor(A) )
%   | | then return 0.5553664367462837;  // std dev = 2.15e-07, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | | else return -0.11231637819360642;  // std dev = 0.000, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   else return -0.11231637819360622;  // std dev = 6.83e-08, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.4175135841583099;  // std dev = 3.65e-08, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return 0.3711508018161086;  // std dev = 0.164, 27.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=25 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.4175135841583103;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.10159632948783635;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   else return -0.10159632948783627;  // std dev = 3.94e-08, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1660825027239989;  // std dev = 0.201, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.32612845410442576;  // std dev = 0.035, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | | else if ( actor(B) )
%   | | | then return -0.09269127618926097;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | | else return 0.32071184716014967;  // std dev = 1.49e-08, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else return -0.09269127618926101;  // std dev = 3.33e-08, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.2578891027657984;  // std dev = 0.033, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else return -0.08732094906215435;  // std dev = 0.054, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   else return -0.08518475138839682;  // std dev = 4.59e-08, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09561097520999762;  // std dev = 0.054, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(B, E) )
%   | | then return 0.21253620870379258;  // std dev = 0.027, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.2093077255874629;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.08017192155642372;  // std dev = 0.035, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   else return -0.0787767547310916;  // std dev = 5.77e-08, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17913434737280554;  // std dev = 0.023, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | else if ( genre(A, E) )
%   | | then return -0.06721847725681925;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( actor(B) )
%   | | | then return -0.07300687340466042;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | | else return 0.17676638099379538;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else return -0.07324622576333707;  // std dev = 0.000, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10822585405309827;  // std dev = 0.156, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( actor(B) )
%   | | then return -0.06821742733731667;  // std dev = 9.13e-09, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else return 0.15381259164438277;  // std dev = 0.022, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   else return -0.06842697784420267;  // std dev = 3.80e-08, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.13238852059360748;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return 0.12388386500303163;  // std dev = 0.070, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | else if ( genre(A, E) )
%   | | then return -0.0570186999185405;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.1336586293128723;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.06637539583333671;  // std dev = 0.077, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   else return -0.06419184008202626;  // std dev = 0.000, 111.000 (wgt'ed) examples reached here.  /* #neg=111 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063533
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.379 seconds
Total inference time: 1.54 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.065532
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.593 seconds
Refined model CLL: -0.065532


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063533
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 7.308 seconds
Total inference time: 1.54 seconds
AUC ROC: 1.0
Total revision time: 7.308
Best scored revision CLL: -0.065532


Dataset: 4_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 00:20:05
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063533, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 7.308, 'Inference time': 1.54, 'parameter_0.2': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.157819, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 1.7, 'Inference time': 1.845}}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995113;  // std dev = 4.30e-07, 102.000 (wgt'ed) examples reached here.  /* #pos=102 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.2043027812533572;  // std dev = 4.202, 78.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=27 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048827;  // std dev = 0.000, 176.000 (wgt'ed) examples reached here.  /* #neg=176 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7112703243396987;  // std dev = 0.841, 103.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=102 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.12173873333363104;  // std dev = 4.377, 93.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=27 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839166;  // std dev = 0.000, 200.000 (wgt'ed) examples reached here.  /* #neg=200 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1448202126277646;  // std dev = 0.136, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( movie(E, A) )
%   | | then return 0.3203615016176261;  // std dev = 0.393, 203.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=129 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360664;  // std dev = 0.000, 205.000 (wgt'ed) examples reached here.  /* #neg=205 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.47097454896604907;  // std dev = 0.676, 103.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=102 */
%   | else if ( genre(A, E) )
%   | | then return -0.09866773978957079;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.07051213489596642;  // std dev = 4.315, 87.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=27 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783649;  // std dev = 0.000, 181.000 (wgt'ed) examples reached here.  /* #neg=181 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1273415288543331;  // std dev = 0.309, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( genre(B, E) )
%   | | then return 0.3633727135717499;  // std dev = 8.43e-08, 102.000 (wgt'ed) examples reached here.  /* #pos=102 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.07237852314337347;  // std dev = 4.268, 83.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=27 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926054;  // std dev = 9.66e-08, 210.000 (wgt'ed) examples reached here.  /* #neg=210 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2788082172984252;  // std dev = 0.544, 103.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=102 */
%   | else if ( movie(E, A) )
%   | | then return 0.054814180040457995;  // std dev = 0.454, 88.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=27 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 7.30e-08, 192.000 (wgt'ed) examples reached here.  /* #neg=192 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14338483454258552;  // std dev = 0.289, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( genre(B, E) )
%   | | then return 0.23095328746144358;  // std dev = 5.16e-08, 102.000 (wgt'ed) examples reached here.  /* #pos=102 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.012621171543714733;  // std dev = 4.377, 93.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=27 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109147;  // std dev = 7.45e-08, 193.000 (wgt'ed) examples reached here.  /* #neg=193 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1924933739883712;  // std dev = 7.60e-08, 102.000 (wgt'ed) examples reached here.  /* #pos=102 */
%   | else if ( genre(A, E) )
%   | | then return -0.07400776429739724;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.0337133935608452;  // std dev = 4.304, 86.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=27 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333668;  // std dev = 8.01e-09, 189.000 (wgt'ed) examples reached here.  /* #neg=189 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.16729281692165515;  // std dev = 0.359, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( movie(E, B) )
%   | | then return 0.07273483605442022;  // std dev = 4.637, 203.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=129 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420262;  // std dev = 5.67e-09, 182.000 (wgt'ed) examples reached here.  /* #neg=182 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15458052865003136;  // std dev = 0.000, 102.000 (wgt'ed) examples reached here.  /* #pos=102 */
%   | else if ( genre(A, E) )
%   | | then return -0.05907829019669254;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.03529562762112801;  // std dev = 4.229, 80.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=27 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 195.000 (wgt'ed) examples reached here.  /* #neg=195 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.138516
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.161 seconds
Total inference time: 1.803 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.974037
   AUC PR    = 0.840243
   CLL	      = -0.143679
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.790698
   F1        = 0.883117


Total scoring time: 2.034 seconds
Parameter learned model CLL: -0.143679


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 9, 0], 'true,false,true': [4.3e-07, 0, 102], 'true,false,false,true': [4.202, 51, 27], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 176, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.841, 1, 102], 'true,false,true': [0.0, 7, 0], 'true,false,false,true': [4.377, 66, 27], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 200, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.136, 7, 0], 'true,false,true': [0.393, 74, 129], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 205, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.676, 1, 102], 'true,false,true': [0.0, 6, 0], 'true,false,false,true': [4.315, 60, 27], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 181, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.309, 16, 0], 'true,false,true': [8.43e-08, 0, 102], 'true,false,false,true': [4.268, 56, 27], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.66e-08, 210, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.544, 1, 102], 'true,false,true': [0.454, 61, 27], 'true,false,false': [0.0, 0, 0], 'false,true': [7.3e-08, 192, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.289, 8, 0], 'true,false,true': [5.16e-08, 0, 102], 'true,false,false,true': [4.377, 66, 27], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.45e-08, 193, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [7.6e-08, 0, 102], 'true,false,true': [2.63e-09, 7, 0], 'true,false,false,true': [4.304, 59, 27], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.01e-09, 189, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.359, 8, 0], 'true,false,true': [4.637, 74, 129], 'true,false,false': [0.0, 0, 0], 'false,true': [5.67e-09, 182, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 102], 'true,false,true': [0.0, 9, 0], 'true,false,false,true': [4.229, 53, 27], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 195, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.21667926429831627, -1.8924256101565169e-16], 'true': [-9.25185853854297e-18, 0.20305555555555993], 'true,false': [1.8111873656630004e-15, 0.22633136094674688], 'true,false,false': [0.22633136094674688, nan], 'false': [-1.8924256101565169e-16, nan]}, {'': [0.1918744333069009, -3.552713678800501e-17], 'true': [0.00686364636360123, 0.19559048844386895], 'true,false': [-1.982541115402065e-18, 0.2060353798126949], 'true,false,false': [0.2060353798126949, nan], 'false': [-3.552713678800501e-17, nan]}, {'': [0.15610958956589074, -4.982464305634849e-17], 'true': [0.0026412481323079113, 0.1541884670971864], 'true,false': [0.1541884670971864, nan], 'false': [-4.982464305634849e-17, nan]}, {'': [0.1403524467146288, -8.832713566078593e-17], 'true': [0.004436828357293959, 0.2019499055602157], 'true,false': [0.0, 0.21403091557669365], 'true,false,false': [0.21403091557669365, nan], 'false': [-8.832713566078593e-17, nan]}, {'': [0.11988857929762795, 4.4408920985006264e-17], 'true': [0.005966931108997979, 0.11941566700430747], 'true,false': [6.966105252550002e-17, 0.21948033096240321], 'true,false,false': [0.21948033096240321, nan], 'false': [4.4408920985006264e-17, nan]}, {'': [0.10898434214329024, 2.7755575615628914e-17], 'true': [0.0028752558148581247, 0.20612338329968038], 'true,false': [0.20612338329968038, nan], 'false': [2.7755575615628914e-17, nan]}, {'': [0.1089883638555035, 2.8762254523967783e-17], 'true': [0.010418458791474267, 0.1101548696939917], 'true,false': [2.6122894697062506e-17, 0.2060353798126956], 'true,false,false': [0.2060353798126956, nan], 'false': [2.8762254523967783e-17, nan]}, {'': [0.10232432170253987, 6.579099405186112e-17], 'true': [5.659960517696876e-17, 0.19998246122136323], 'true,false': [9.912705577010326e-19, 0.21538669551108738], 'true,false,false': [0.21538669551108738, nan], 'false': [6.579099405186112e-17, nan]}, {'': [0.10461620205098231, 3.294068314821893e-17], 'true': [0.016071957199202985, 0.10592124087665503], 'true,false': [0.10592124087665503, nan], 'false': [3.294068314821893e-17, nan]}, {'': [0.09815903183925309, -2.2773805633336544e-18], 'true': [-1.2190684191962504e-16, 0.20179271988161654], 'true,false': [-7.709882115452476e-19, 0.22359374999999998], 'true,false,false': [0.22359374999999998, nan], 'false': [-2.2773805633336544e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995113;  // std dev = 4.30e-07, 102.000 (wgt'ed) examples reached here.  /* #pos=102 */
%   | | else if ( actor(B) )
%   | | | then return -0.14185106490048768;  // std dev = 5.37e-08, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | | | else return 0.8581489350995118;  // std dev = 1.58e-07, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   else return -0.14185106490048832;  // std dev = 0.000, 186.000 (wgt'ed) examples reached here.  /* #neg=186 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109551;  // std dev = 0.000, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | | else return 0.6922179912193626;  // std dev = 0.149, 62.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=60 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return -0.13836813430011274;  // std dev = 0.332, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   else return -0.1254446385283916;  // std dev = 0.000, 190.000 (wgt'ed) examples reached here.  /* #neg=190 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5584919014007634;  // std dev = 0.038, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.11576320425895734;  // std dev = 0.209, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
%   else return -0.11231637819360651;  // std dev = 0.000, 186.000 (wgt'ed) examples reached here.  /* #neg=186 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.41675368021189724;  // std dev = 0.000, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | | else return 0.40317531126697853;  // std dev = 0.111, 62.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=60 */
%   | else if ( genre(A, E) )
%   | | then return -0.10128215385519511;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.4167536802118972;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return -0.1020260373591666;  // std dev = 0.131, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   else return -0.10159632948783652;  // std dev = 0.000, 199.000 (wgt'ed) examples reached here.  /* #neg=199 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( female(B) )
%   | | then return -0.09242815747298345;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.12309575469021379;  // std dev = 0.168, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.32546307419307025;  // std dev = 0.044, 102.000 (wgt'ed) examples reached here.  /* #pos=102 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.32019671485499557;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return -0.09839644016850294;  // std dev = 0.207, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   else return -0.09269127618926058;  // std dev = 9.06e-08, 193.000 (wgt'ed) examples reached here.  /* #neg=193 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2576641436495868;  // std dev = 0.042, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else if ( actor(B) )
%   | | then return -0.0834595125206595;  // std dev = 0.002, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | | else return -0.21642521348676916;  // std dev = 0.044, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.08518475138839678;  // std dev = 7.30e-08, 184.000 (wgt'ed) examples reached here.  /* #neg=184 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11637543608585521;  // std dev = 0.062, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(B, E) )
%   | | then return 0.21217592800269108;  // std dev = 0.034, 102.000 (wgt'ed) examples reached here.  /* #pos=102 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.20903884077918725;  // std dev = 2.58e-08, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return -0.08057498979222465;  // std dev = 0.123, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   else return -0.07877675473109146;  // std dev = 6.99e-08, 213.000 (wgt'ed) examples reached here.  /* #neg=213 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.17535057877747942;  // std dev = 5.37e-08, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | | else return 0.16919533519087115;  // std dev = 0.066, 62.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=60 */
%   | else if ( genre(A, E) )
%   | | then return -0.06946689100227907;  // std dev = 0.003, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.17656905733857242;  // std dev = 2.36e-08, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return -0.07295769706374455;  // std dev = 0.083, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   else return -0.07324622576333666;  // std dev = 1.19e-07, 200.000 (wgt'ed) examples reached here.  /* #neg=200 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.15446626034866143;  // std dev = 0.033, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else if ( actor(B) )
%   | | then return -0.06687365517447715;  // std dev = 0.004, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | | else return -0.14599523598234534;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.06842697784420262;  // std dev = 7.60e-08, 177.000 (wgt'ed) examples reached here.  /* #neg=177 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.1326201568906565;  // std dev = 0.000, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | | else return 0.13259894037653386;  // std dev = 0.043, 61.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=60 */
%   | else if ( genre(A, E) )
%   | | then return -0.06115458113213984;  // std dev = 0.002, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( actor(B) )
%   | | | then return -0.06295738246226301;  // std dev = 0.000, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   | | | else return 0.13344884233865043;  // std dev = 1.67e-08, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   else return -0.06419184008202626;  // std dev = 0.000, 180.000 (wgt'ed) examples reached here.  /* #neg=180 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063346
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.46 seconds
Total inference time: 1.771 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.065354
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.177 seconds
Refined model CLL: -0.065354


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063346
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 9.832 seconds
Total inference time: 1.771 seconds
AUC ROC: 1.0
Total revision time: 9.832
Best scored revision CLL: -0.065354


Dataset: 4_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 00:20:19
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063346, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 9.832, 'Inference time': 1.771, 'parameter_0.4': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.138516, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 2.161, 'Inference time': 1.803}}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995097;  // std dev = 9.97e-07, 161.000 (wgt'ed) examples reached here.  /* #pos=161 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.10626923585139075;  // std dev = 4.981, 133.000 (wgt'ed) examples reached here.  /* #neg=100 #pos=33 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048796;  // std dev = 0.000, 284.000 (wgt'ed) examples reached here.  /* #neg=284 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.6989905503748509;  // std dev = 1.669, 165.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=161 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.12202508618528997;  // std dev = 4.884, 119.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=33 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839202;  // std dev = 0.000, 303.000 (wgt'ed) examples reached here.  /* #neg=303 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12948900682343395;  // std dev = 0.145, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( movie(E, A) )
%   | | then return 0.3828614984140031;  // std dev = 0.362, 272.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=194 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360696;  // std dev = 0.000, 281.000 (wgt'ed) examples reached here.  /* #neg=281 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.45686911287842713;  // std dev = 0.938, 163.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=161 */
%   | else if ( genre(A, E) )
%   | | then return -0.10003959500352866;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.01280293964799127;  // std dev = 4.987, 134.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=33 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783662;  // std dev = 0.000, 301.000 (wgt'ed) examples reached here.  /* #neg=301 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12674874407213524;  // std dev = 0.249, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( genre(B, E) )
%   | | then return 0.35506009232231805;  // std dev = 0.000, 161.000 (wgt'ed) examples reached here.  /* #pos=161 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.041546186102715;  // std dev = 4.884, 119.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=33 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926044;  // std dev = 1.37e-07, 279.000 (wgt'ed) examples reached here.  /* #neg=279 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2784968110803867;  // std dev = 0.000, 161.000 (wgt'ed) examples reached here.  /* #pos=161 */
%   | else if ( movie(E, A) )
%   | | then return 0.006168174469069243;  // std dev = 0.416, 142.000 (wgt'ed) examples reached here.  /* #neg=109 #pos=33 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 9.42e-08, 259.000 (wgt'ed) examples reached here.  /* #neg=259 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12905136080400376;  // std dev = 0.298, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( genre(B, E) )
%   | | then return 0.22610669945221593;  // std dev = 0.000, 161.000 (wgt'ed) examples reached here.  /* #pos=161 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.035191015398233584;  // std dev = 4.876, 118.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=33 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109143;  // std dev = 4.94e-08, 280.000 (wgt'ed) examples reached here.  /* #neg=280 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1773729984964727;  // std dev = 0.947, 165.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=161 */
%   | else if ( genre(A, E) )
%   | | then return -0.07266491963293997;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.057382980122288284;  // std dev = 4.777, 107.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=33 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333684;  // std dev = 7.03e-09, 263.000 (wgt'ed) examples reached here.  /* #neg=263 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13303952499372854;  // std dev = 0.451, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( movie(E, B) )
%   | | then return 0.08671648592546631;  // std dev = 5.171, 291.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=194 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.0684269778442029;  // std dev = 0.000, 281.000 (wgt'ed) examples reached here.  /* #neg=281 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14353086890649422;  // std dev = 0.775, 164.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=161 */
%   | else if ( genre(A, E) )
%   | | then return -0.05996473899085807;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.008586848151762286;  // std dev = 4.907, 122.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=33 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202594;  // std dev = 6.84e-09, 302.000 (wgt'ed) examples reached here.  /* #neg=302 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.127448
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.581 seconds
Total inference time: 1.743 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.979022
   AUC PR    = 0.870778
   CLL	      = -0.131998
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.829897
   F1        = 0.907042


Total scoring time: 2.478 seconds
Parameter learned model CLL: -0.131998


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 11, 0], 'true,false,true': [9.97e-07, 0, 161], 'true,false,false,true': [4.981, 100, 33], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 284, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.669, 4, 161], 'true,false,true': [0.0, 6, 0], 'true,false,false,true': [4.884, 86, 33], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 303, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.145, 13, 0], 'true,false,true': [0.362, 78, 194], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 281, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.938, 2, 161], 'true,false,true': [0.0, 9, 0], 'true,false,false,true': [4.987, 101, 33], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 301, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.249, 11, 0], 'true,false,true': [0.0, 0, 161], 'true,false,false,true': [4.884, 86, 33], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.37e-07, 279, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 161], 'true,false,true': [0.416, 109, 33], 'true,false,false': [0.0, 0, 0], 'false,true': [9.42e-08, 259, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.298, 10, 0], 'true,false,true': [0.0, 0, 161], 'true,false,false,true': [4.876, 85, 33], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.94e-08, 280, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.947, 4, 161], 'true,false,true': [0.0, 9, 0], 'true,false,false,true': [4.777, 74, 33], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.03e-09, 263, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.451, 16, 0], 'true,false,true': [5.171, 97, 194], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 281, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.775, 3, 161], 'true,false,true': [0.0, 7, 0], 'true,false,false,true': [4.907, 89, 33], 'true,false,false,false': [0.0, 0, 0], 'false,true': [6.84e-09, 302, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.23148615963451158, -1.2509555207044018e-17], 'true': [-1.0092936587501423e-17, 0.22444351890416514], 'true,false': [6.178632484870436e-15, 0.1865566171066777], 'true,false,false': [0.1865566171066777, nan], 'false': [-1.2509555207044018e-17, nan]}, {'': [0.1780864276193949, -8.500717548285028e-17], 'true': [0.016886792067125723, 0.19358839679582612], 'true,false': [-2.3129646346357427e-18, 0.2004095755949431], 'true,false,false': [0.2004095755949431, nan], 'false': [-8.500717548285028e-17, nan]}, {'': [0.13650897616311797, -1.1378798259503384e-16], 'true': [0.0016219454573188651, 0.1309819598906396], 'true,false': [0.1309819598906396, nan], 'false': [-1.1378798259503384e-16, nan]}, {'': [0.13518113687962294, -5.458903908455919e-17], 'true': [0.0053965900180924595, 0.17468896937419445], 'true,false': [0.0, 0.18562040543551028], 'true,false,false': [0.18562040543551028, nan], 'false': [-5.458903908455919e-17, nan]}, {'': [0.1096981292003957, 6.685213911721373e-17], 'true': [0.005627257078552633, 0.10919392527328386], 'true,false': [-7.502625160199816e-16, 0.2004095755949446], 'true,false,false': [0.2004095755949446, nan], 'false': [6.685213911721373e-17, nan]}, {'': [0.09950340739200023, 3.429260307722491e-17], 'true': [-6.509630653702782e-16, 0.1729139688150601], 'true,false': [0.1729139688150601, nan], 'false': [3.429260307722491e-17, nan]}, {'': [0.09366493520204697, 8.723180907769087e-18], 'true': [0.008909955642025447, 0.09409713761758576], 'true,false': [-2.3169871818264136e-16, 0.20145073254811965], 'true,false,false': [0.20145073254811965, nan], 'false': [8.723180907769087e-18, nan]}, {'': [0.08901382654563626, 4.896801173251641e-17], 'true': [0.005439467158873173, 0.19795545217814275], 'true,false': [0.0, 0.21329373744431857], 'true,false,false': [0.21329373744431857, nan], 'false': [4.896801173251641e-17, nan]}, {'': [0.09013855341232287, -4.029991050240782e-17], 'true': [0.012722475086963517, 0.091878223933494], 'true,false': [0.091878223933494, nan], 'false': [-4.029991050240782e-17, nan]}, {'': [0.09018551021158391, 4.6320563279062825e-17], 'true': [0.0036615852130090936, 0.18675384211948184], 'true,false': [-9.912705577010326e-19, 0.19732598763773135], 'true,false,false': [0.19732598763773135, nan], 'false': [4.6320563279062825e-17, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995097;  // std dev = 9.97e-07, 161.000 (wgt'ed) examples reached here.  /* #pos=161 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.8581489350995116;  // std dev = 2.23e-07, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return -0.14185106490048766;  // std dev = 6.99e-08, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
%   else return -0.1418510649004878;  // std dev = 1.15e-07, 305.000 (wgt'ed) examples reached here.  /* #neg=305 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109546;  // std dev = 1.19e-07, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | | else return 0.7022301866856616;  // std dev = 0.119, 98.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=96 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.7194734122109547;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return -0.12544463852839144;  // std dev = 0.000, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
%   else return -0.12544463852839197;  // std dev = 0.000, 282.000 (wgt'ed) examples reached here.  /* #neg=282 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.127274459002364;  // std dev = 0.148, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( director(B), actor(A) )
%   | | then return 0.557471400937299;  // std dev = 0.030, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | | else return -0.11231637819360624;  // std dev = 6.32e-08, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
%   else return -0.11231637819360689;  // std dev = 0.000, 253.000 (wgt'ed) examples reached here.  /* #neg=253 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.41700175436391534;  // std dev = 0.000, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | | else return 0.40845842401373084;  // std dev = 0.088, 98.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=96 */
%   | else if ( genre(A, E) )
%   | | then return -0.10023915112355068;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.4170017543639144;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return -0.10159632948783616;  // std dev = 5.58e-08, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
%   else return -0.10159632948783663;  // std dev = 0.000, 304.000 (wgt'ed) examples reached here.  /* #neg=304 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12011337942188141;  // std dev = 0.067, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( genre(B, E) )
%   | | then return 0.32372806459207226;  // std dev = 0.035, 161.000 (wgt'ed) examples reached here.  /* #pos=161 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.32036487283788356;  // std dev = 6.32e-08, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return -0.09269127618926094;  // std dev = 5.37e-08, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
%   else return -0.09269127618926043;  // std dev = 1.48e-07, 292.000 (wgt'ed) examples reached here.  /* #neg=292 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.25429718112233557;  // std dev = 0.000, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | | else return 0.2487486375262583;  // std dev = 0.073, 98.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=96 */
%   | else if ( actor(A), director(B) )
%   | | then return 0.25493547044037945;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | else return -0.08476821855029462;  // std dev = 0.010, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
%   else return -0.08518475138839678;  // std dev = 9.54e-08, 262.000 (wgt'ed) examples reached here.  /* #neg=262 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11092710644863465;  // std dev = 0.082, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( genre(B, E) )
%   | | then return 0.21225794287478467;  // std dev = 0.033, 161.000 (wgt'ed) examples reached here.  /* #pos=161 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.20959044909363464;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return -0.07880698823050471;  // std dev = 3.49e-08, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
%   else return -0.07877675473109143;  // std dev = 3.33e-08, 303.000 (wgt'ed) examples reached here.  /* #neg=303 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.17618974909795587;  // std dev = 0.000, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | | else if ( actor(A) )
%   | | | then return 0.18078418440796337;  // std dev = 0.000, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | | else return -0.2807531596543378;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(A, E) )
%   | | then return -0.06845818118020973;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.176973805960042;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return -0.07327245255553876;  // std dev = 0.000, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
%   else return -0.07324622576333704;  // std dev = 8.43e-08, 324.000 (wgt'ed) examples reached here.  /* #neg=324 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.153878930388051;  // std dev = 0.023, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.0711267830720681;  // std dev = 0.224, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
%   else return -0.06842697784420287;  // std dev = 0.000, 274.000 (wgt'ed) examples reached here.  /* #neg=274 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.13325879524317405;  // std dev = 0.000, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | | else if ( actor(A) )
%   | | | then return 0.13637776732408827;  // std dev = 4.47e-08, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | | else return -0.2154115878684976;  // std dev = 5.27e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(A, E) )
%   | | then return -0.06007518752363921;  // std dev = 1.86e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.133791962679907;  // std dev = 3.65e-08, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return -0.06405143265439708;  // std dev = 2.11e-08, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
%   else return -0.06419184008202591;  // std dev = 1.24e-07, 308.000 (wgt'ed) examples reached here.  /* #neg=308 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063502
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.857 seconds
Total inference time: 1.841 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064945
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 3.397 seconds
Refined model CLL: -0.064945


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063502
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 12.313 seconds
Total inference time: 1.841 seconds
AUC ROC: 1.0
Total revision time: 12.313
Best scored revision CLL: -0.064945


Dataset: 4_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 00:20:36
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063502, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 12.313, 'Inference time': 1.841, 'parameter_0.6': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.127448, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 2.581, 'Inference time': 1.743}}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995091;  // std dev = 1.08e-06, 210.000 (wgt'ed) examples reached here.  /* #pos=210 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.13498509329160285;  // std dev = 5.953, 177.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048727;  // std dev = 2.98e-07, 416.000 (wgt'ed) examples reached here.  /* #neg=416 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7075731579751916;  // std dev = 1.453, 213.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=210 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 7.45e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.14337918232284175;  // std dev = 5.846, 162.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839224;  // std dev = 0.000, 399.000 (wgt'ed) examples reached here.  /* #neg=399 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14803759638179537;  // std dev = 0.229, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( movie(E, A) )
%   | | then return 0.35589734357497954;  // std dev = 0.377, 381.000 (wgt'ed) examples reached here.  /* #neg=122 #pos=259 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360644;  // std dev = 0.000, 356.000 (wgt'ed) examples reached here.  /* #neg=356 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4633092614171805;  // std dev = 0.943, 212.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=210 */
%   | else if ( genre(A, E) )
%   | | then return -0.09838197930802312;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.04561083860262694;  // std dev = 5.926, 173.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783591;  // std dev = 1.12e-08, 403.000 (wgt'ed) examples reached here.  /* #neg=403 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12252125340193139;  // std dev = 0.178, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.35779929056035664;  // std dev = 0.000, 210.000 (wgt'ed) examples reached here.  /* #pos=210 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.06811493755508931;  // std dev = 5.797, 156.000 (wgt'ed) examples reached here.  /* #neg=107 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926064;  // std dev = 1.83e-07, 368.000 (wgt'ed) examples reached here.  /* #neg=368 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2677634682743334;  // std dev = 1.196, 215.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=210 */
%   | else if ( movie(E, A) )
%   | | then return 0.04205169898334881;  // std dev = 0.452, 167.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=49 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.28e-07, 380.000 (wgt'ed) examples reached here.  /* #neg=380 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11091699956162727;  // std dev = 0.308, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( genre(B, E) )
%   | | then return 0.22961410486885767;  // std dev = 0.000, 210.000 (wgt'ed) examples reached here.  /* #pos=210 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.06634583167907401;  // std dev = 5.715, 147.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109144;  // std dev = 2.25e-07, 409.000 (wgt'ed) examples reached here.  /* #neg=409 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18696543906572763;  // std dev = 0.681, 212.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=210 */
%   | else if ( genre(A, E) )
%   | | then return -0.07550129559640388;  // std dev = 6.45e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.004713027725078323;  // std dev = 5.920, 172.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333768;  // std dev = 0.000, 360.000 (wgt'ed) examples reached here.  /* #neg=360 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.237074667790477;  // std dev = 0.418, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( movie(E, B) )
%   | | then return 0.0949315883715715;  // std dev = 6.087, 379.000 (wgt'ed) examples reached here.  /* #neg=120 #pos=259 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420326;  // std dev = 0.000, 368.000 (wgt'ed) examples reached here.  /* #neg=368 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1495585760617167;  // std dev = 0.433, 211.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=210 */
%   | else if ( genre(A, E) )
%   | | then return -0.0563763430841926;  // std dev = 6.97e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.0055184963036670484;  // std dev = 5.877, 166.000 (wgt'ed) examples reached here.  /* #neg=117 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202566;  // std dev = 9.27e-09, 375.000 (wgt'ed) examples reached here.  /* #neg=375 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.134879
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.533 seconds
Total inference time: 1.671 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.976772
   AUC PR    = 0.856104
   CLL	      = -0.138808
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.810811
   F1        = 0.895522


Total scoring time: 2.531 seconds
Parameter learned model CLL: -0.138808


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 14, 0], 'true,false,true': [1.08e-06, 0, 210], 'true,false,false,true': [5.953, 128, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.98e-07, 416, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.453, 3, 210], 'true,false,true': [7.45e-09, 13, 0], 'true,false,false,true': [5.846, 113, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 399, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.229, 19, 0], 'true,false,true': [0.377, 122, 259], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 356, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.943, 2, 210], 'true,false,true': [0.0, 18, 0], 'true,false,false,true': [5.926, 124, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.12e-08, 403, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.178, 6, 0], 'true,false,true': [0.0, 0, 210], 'true,false,false,true': [5.797, 107, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.83e-07, 368, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [1.196, 5, 210], 'true,false,true': [0.452, 118, 49], 'true,false,false': [0.0, 0, 0], 'false,true': [1.28e-07, 380, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.308, 17, 0], 'true,false,true': [0.0, 0, 210], 'true,false,false,true': [5.715, 98, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.25e-07, 409, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.681, 2, 210], 'true,false,true': [6.45e-09, 12, 0], 'true,false,false,true': [5.92, 123, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 360, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.418, 11, 0], 'true,false,true': [6.087, 120, 259], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 368, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.433, 1, 210], 'true,false,true': [6.97e-09, 15, 0], 'true,false,false,true': [5.877, 117, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.27e-09, 375, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.228717483100233, 2.135044278125301e-16], 'true': [-1.1895246692412391e-17, 0.22135421883033563], 'true,false': [5.549000412602687e-15, 0.2001978997095352], 'true,false,false': [0.2001978997095352, nan], 'false': [2.135044278125301e-16, nan]}, {'': [0.18026718017807866, -1.2688263138573217e-16], 'true': [0.009913123561305961, 0.2002782000311367], 'true,false': [4.270088556250602e-18, 0.21098155768937565], 'true,false,false': [0.21098155768937565, nan], 'false': [-1.2688263138573217e-16, nan]}, {'': [0.14694051393779742, -2.993859841685815e-17], 'true': [0.0027646784291710993, 0.14206773987371857], 'true,false': [0.14206773987371857, nan], 'false': [-2.993859841685815e-17, nan]}, {'': [0.13656905873995298, 1.2562325042904997e-16], 'true': [0.004198334656727172, 0.1856514468937629], 'true,false': [-4.625929269271485e-18, 0.2030137993250701], 'true,false,false': [0.2030137993250701, nan], 'false': [1.2562325042904997e-16, nan]}, {'': [0.1126443537409759, 9.050731179009428e-17], 'true': [0.005290299873263358, 0.1123503712707545], 'true,false': [-1.6917684184764292e-17, 0.21544214332675884], 'true,false,false': [0.21544214332675884, nan], 'false': [9.050731179009428e-17, nan]}, {'': [0.10555590368354616, 4.324026516961136e-17], 'true': [0.0066532827716220926, 0.2042119403968597], 'true,false': [0.2042119403968597, nan], 'false': [4.324026516961136e-17, nan]}, {'': [0.09700209590817331, 1.2378036655967516e-16], 'true': [0.005589589556645382, 0.09795986670093637], 'true,false': [-3.214359995105215e-16, 0.2222222222222222], 'true,false,false': [0.2222222222222222, nan], 'false': [1.2378036655967516e-16, nan]}, {'': [0.09858316263288858, -6.661338147750939e-17], 'true': [0.002186741437342051, 0.19083083781413948], 'true,false': [3.469446951953614e-18, 0.2037249864791784], 'true,false,false': [0.2037249864791784, nan], 'false': [-6.661338147750939e-17, nan]}, {'': [0.09848097361858771, -9.71445146547012e-17], 'true': [0.015875063575728574, 0.09776950740867504], 'true,false': [0.09776950740867504, nan], 'false': [-9.71445146547012e-17, nan]}, {'': [0.09497676796012577, 8.585724723767877e-17], 'true': [0.0008866809795817955, 0.19100401712147996], 'true,false': [3.23815048849004e-18, 0.20804906372477916], 'true,false,false': [0.20804906372477916, nan], 'false': [8.585724723767877e-17, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995091;  // std dev = 1.08e-06, 210.000 (wgt'ed) examples reached here.  /* #pos=210 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.8581489350995122;  // std dev = 1.69e-07, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.1418510649004877;  // std dev = 5.58e-08, 120.000 (wgt'ed) examples reached here.  /* #neg=120 */
%   else return -0.1418510649004875;  // std dev = 2.44e-07, 360.000 (wgt'ed) examples reached here.  /* #neg=360 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109541;  // std dev = 2.53e-07, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   | | else if ( actor(A) )
%   | | | then return 0.7194734122109556;  // std dev = 0.000, 127.000 (wgt'ed) examples reached here.  /* #pos=127 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.7194734122109547;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.1254446385283911;  // std dev = 7.60e-08, 107.000 (wgt'ed) examples reached here.  /* #neg=107 */
%   else return -0.12544463852839222;  // std dev = 0.000, 377.000 (wgt'ed) examples reached here.  /* #neg=377 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5553664367462834;  // std dev = 5.59e-07, 259.000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.11231637819360625;  // std dev = 8.02e-08, 134.000 (wgt'ed) examples reached here.  /* #neg=134 */
%   else return -0.11231637819360632;  // std dev = 0.000, 378.000 (wgt'ed) examples reached here.  /* #neg=378 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.41505334760074825;  // std dev = 0.518, 211.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=210 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783635;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.41751358415831047;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.10159632948783638;  // std dev = 0.000, 128.000 (wgt'ed) examples reached here.  /* #neg=128 */
%   else return -0.1015963294878359;  // std dev = 2.27e-07, 404.000 (wgt'ed) examples reached here.  /* #neg=404 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.102887282517425;  // std dev = 0.096, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else if ( genre(B, E) )
%   | | then return 0.3212480601092615;  // std dev = 0.000, 210.000 (wgt'ed) examples reached here.  /* #pos=210 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.32071184716014944;  // std dev = 2.98e-08, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.09269127618926087;  // std dev = 6.83e-08, 117.000 (wgt'ed) examples reached here.  /* #neg=117 */
%   else return -0.09269127618926079;  // std dev = 1.60e-07, 388.000 (wgt'ed) examples reached here.  /* #neg=388 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25546887846367256;  // std dev = 0.002, 259.000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.08652182064232543;  // std dev = 0.096, 142.000 (wgt'ed) examples reached here.  /* #neg=142 */
%   else return -0.08518475138839678;  // std dev = 1.21e-07, 384.000 (wgt'ed) examples reached here.  /* #neg=384 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08256159431441432;  // std dev = 0.044, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( genre(B, E) )
%   | | then return 0.21002759788598996;  // std dev = 2.27e-07, 210.000 (wgt'ed) examples reached here.  /* #pos=210 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.20970854967320937;  // std dev = 7.30e-08, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.07867977694094484;  // std dev = 6.91e-08, 130.000 (wgt'ed) examples reached here.  /* #neg=130 */
%   else return -0.0787767547310915;  // std dev = 1.12e-07, 416.000 (wgt'ed) examples reached here.  /* #neg=416 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17453295582580186;  // std dev = 0.412, 212.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=210 */
%   | else if ( genre(A, E) )
%   | | then return -0.07221320011756939;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.17706043600987154;  // std dev = 1.49e-08, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.07316209138245781;  // std dev = 0.000, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
%   else return -0.0732462257633377;  // std dev = 0.000, 387.000 (wgt'ed) examples reached here.  /* #neg=387 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.15315067682111128;  // std dev = 0.003, 259.000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.06870480194405969;  // std dev = 0.066, 155.000 (wgt'ed) examples reached here.  /* #neg=155 */
%   else return -0.06842697784420321;  // std dev = 0.000, 353.000 (wgt'ed) examples reached here.  /* #neg=353 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13195228031810485;  // std dev = 0.367, 212.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=210 */
%   | else if ( genre(A, E) )
%   | | then return -0.06332257191992534;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.13393530153321356;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.06410576485653394;  // std dev = 0.000, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
%   else return -0.06419184008202565;  // std dev = 1.81e-07, 378.000 (wgt'ed) examples reached here.  /* #neg=378 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063504
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.601 seconds
Total inference time: 1.724 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.06472
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.786 seconds
Refined model CLL: -0.06472


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063504
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 11.450999999999999 seconds
Total inference time: 1.724 seconds
AUC ROC: 1.0
Total revision time: 11.450999999999999
Best scored revision CLL: -0.06472


Dataset: 4_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 00:20:51
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063504, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 11.450999999999999, 'Inference time': 1.724, 'parameter_0.8': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.134879, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 2.533, 'Inference time': 1.671}}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048774;  // std dev = 1.05e-08, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995086;  // std dev = 1.08e-06, 265.000 (wgt'ed) examples reached here.  /* #pos=265 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.12391470086527898;  // std dev = 6.582, 222.000 (wgt'ed) examples reached here.  /* #neg=163 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004874;  // std dev = 2.15e-07, 471.000 (wgt'ed) examples reached here.  /* #neg=471 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7038267816417103;  // std dev = 1.872, 270.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=265 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 7.45e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.16478983566402824;  // std dev = 6.323, 183.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839233;  // std dev = 0.000, 479.000 (wgt'ed) examples reached here.  /* #neg=479 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14043230240749813;  // std dev = 0.218, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else if ( movie(E, A) )
%   | | then return 0.35292048335890974;  // std dev = 0.377, 478.000 (wgt'ed) examples reached here.  /* #neg=154 #pos=324 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360596;  // std dev = 0.000, 459.000 (wgt'ed) examples reached here.  /* #neg=459 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4713075074922565;  // std dev = 4.46e-07, 265.000 (wgt'ed) examples reached here.  /* #pos=265 */
%   | else if ( genre(A, E) )
%   | | then return -0.09905865502906418;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.05456965318507486;  // std dev = 6.456, 201.000 (wgt'ed) examples reached here.  /* #neg=142 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1015963294878354;  // std dev = 1.56e-08, 498.000 (wgt'ed) examples reached here.  /* #neg=498 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12574479448584594;  // std dev = 0.399, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | else if ( genre(B, E) )
%   | | then return 0.3575063733475427;  // std dev = 0.000, 265.000 (wgt'ed) examples reached here.  /* #pos=265 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.012034376924221789;  // std dev = 6.603, 226.000 (wgt'ed) examples reached here.  /* #neg=167 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926114;  // std dev = 9.19e-08, 439.000 (wgt'ed) examples reached here.  /* #neg=439 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.26618563273675844;  // std dev = 1.417, 272.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=265 */
%   | else if ( movie(E, A) )
%   | | then return 0.028097869621028473;  // std dev = 0.434, 224.000 (wgt'ed) examples reached here.  /* #neg=165 #pos=59 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.46e-07, 476.000 (wgt'ed) examples reached here.  /* #neg=476 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10086265085830047;  // std dev = 0.225, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( genre(B, E) )
%   | | then return 0.2297195037368752;  // std dev = 0.000, 265.000 (wgt'ed) examples reached here.  /* #pos=265 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.02434423074146997;  // std dev = 6.513, 210.000 (wgt'ed) examples reached here.  /* #neg=151 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109191;  // std dev = 1.60e-07, 475.000 (wgt'ed) examples reached here.  /* #neg=475 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1843578790898702;  // std dev = 0.967, 269.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=265 */
%   | else if ( genre(A, E) )
%   | | then return -0.0754877271873536;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.004757774457729122;  // std dev = 6.623, 230.000 (wgt'ed) examples reached here.  /* #neg=171 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333772;  // std dev = 0.000, 429.000 (wgt'ed) examples reached here.  /* #neg=429 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12720523601986547;  // std dev = 0.407, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( movie(E, B) )
%   | | then return 0.0986969065693663;  // std dev = 6.726, 478.000 (wgt'ed) examples reached here.  /* #neg=154 #pos=324 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420344;  // std dev = 0.000, 438.000 (wgt'ed) examples reached here.  /* #neg=438 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14980076942868115;  // std dev = 0.458, 266.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=265 */
%   | else if ( genre(A, E) )
%   | | then return -0.06250357439069121;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.009402754776103955;  // std dev = 6.476, 204.000 (wgt'ed) examples reached here.  /* #neg=145 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202539;  // std dev = 1.10e-08, 495.000 (wgt'ed) examples reached here.  /* #neg=495 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.128948
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.212 seconds
Total inference time: 1.818 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.977686
   AUC PR    = 0.861626
   CLL	      = -0.133421
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.817901
   F1        = 0.89983


Total scoring time: 3.384 seconds
Parameter learned model CLL: -0.133421


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [1.05e-08, 22, 0], 'true,false,true': [1.08e-06, 0, 265], 'true,false,false,true': [6.582, 163, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.15e-07, 471, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.872, 5, 265], 'true,false,true': [7.45e-09, 16, 0], 'true,false,false,true': [6.323, 124, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 479, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.218, 20, 0], 'true,false,true': [0.377, 154, 324], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 459, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [4.46e-07, 0, 265], 'true,false,true': [0.0, 15, 0], 'true,false,false,true': [6.456, 142, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.56e-08, 498, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.399, 28, 0], 'true,false,true': [0.0, 0, 265], 'true,false,false,true': [6.603, 167, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.19e-08, 439, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [1.417, 7, 265], 'true,false,true': [0.434, 165, 59], 'true,false,false': [0.0, 0, 0], 'false,true': [1.46e-07, 476, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.225, 13, 0], 'true,false,true': [0.0, 0, 265], 'true,false,false,true': [6.513, 151, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.6e-07, 475, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.967, 4, 265], 'true,false,true': [0.0, 16, 0], 'true,false,false,true': [6.623, 171, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 429, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.407, 14, 0], 'true,false,true': [6.726, 154, 324], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 438, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.458, 1, 265], 'true,false,true': [0.0, 20, 0], 'true,false,false,true': [6.476, 145, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.1e-08, 495, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.23135621678162693, 9.805791470150003e-17], 'true': [5.046468293750712e-18, 0.22267665673001386], 'true,false': [4.397321081685148e-15, 0.1951343235127025], 'true,false,false': [0.1951343235127025, nan], 'false': [9.805791470150003e-17, nan]}, {'': [0.17260737378895682, -1.372133675528377e-16], 'true': [0.012975303553032329, 0.20712339152174314], 'true,false': [3.469446951953614e-18, 0.21845979276777328], 'true,false,false': [0.21845979276777328, nan], 'false': [-1.372133675528377e-16, nan]}, {'': [0.1459612495786593, -9.675146184097225e-18], 'true': [0.002371515583203909, 0.142194209475562], 'true,false': [0.142194209475562, nan], 'false': [-9.675146184097225e-18, nan]}, {'': [0.132536157824031, 2.4433823995766495e-16], 'true': [7.507621358974644e-16, 0.19449551776207694], 'true,false': [-1.8503717077085942e-18, 0.20737110467562572], 'true,false,false': [0.20737110467562572, nan], 'false': [2.4433823995766495e-16, nan]}, {'': [0.1177253612682515, 1.922026192972936e-17], 'true': [0.005693867801330894, 0.11844244000939592], 'true,false': [-1.1261432038461965e-15, 0.19290860678204935], 'true,false,false': [0.19290860678204935, nan], 'false': [1.922026192972936e-17, nan]}, {'': [0.10302069556769577, 4.47821051949643e-17], 'true': [0.007383898374718599, 0.1880653402213384], 'true,false': [0.1880653402213384, nan], 'false': [4.47821051949643e-17, nan]}, {'': [0.09865503260733957, 5.422562983432343e-17], 'true': [0.0038998515417833822, 0.09971665829269188], 'true,false': [0.0, 0.202018140589567], 'true,false,false': [0.202018140589567, nan], 'false': [5.422562983432343e-17, nan]}, {'': [0.09650067157712622, -7.142693585001007e-17], 'true': [0.003479444198797898, 0.17861810943759202], 'true,false': [-1.734723475976807e-18, 0.1907183364839338], 'true,false,false': [0.1907183364839338, nan], 'false': [-7.142693585001007e-17, nan]}, {'': [0.09370839876275891, -1.2572388589362503e-16], 'true': [0.011837803041132685, 0.09465415855448028], 'true,false': [0.09465415855448028, nan], 'false': [-1.2572388589362503e-16, nan]}, {'': [0.09155469705550104, 1.2111523905001707e-16], 'true': [0.00079018763864349, 0.18763594572120085], 'true,false': [-1.3877787807814458e-18, 0.20556997308727382], 'true,false,false': [0.20556997308727382, nan], 'false': [1.2111523905001707e-16, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995086;  // std dev = 1.08e-06, 265.000 (wgt'ed) examples reached here.  /* #pos=265 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.8581489350995125;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.14185106490048804;  // std dev = 0.000, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
%   else return -0.14185106490048746;  // std dev = 1.88e-07, 476.000 (wgt'ed) examples reached here.  /* #neg=476 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109546;  // std dev = 0.000, 102.000 (wgt'ed) examples reached here.  /* #pos=102 */
%   | | else return 0.7092319812929038;  // std dev = 0.092, 165.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=163 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.7194734122109543;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.12544463852839127;  // std dev = 5.16e-08, 153.000 (wgt'ed) examples reached here.  /* #neg=153 */
%   else return -0.12544463852839235;  // std dev = 0.000, 494.000 (wgt'ed) examples reached here.  /* #neg=494 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1341254119281175;  // std dev = 0.228, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | else if ( director(B), actor(A) )
%   | | then return 0.5566379916693448;  // std dev = 0.023, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | | else return -0.11231637819360617;  // std dev = 1.00e-07, 138.000 (wgt'ed) examples reached here.  /* #neg=138 */
%   else return -0.11231637819360592;  // std dev = 0.000, 474.000 (wgt'ed) examples reached here.  /* #neg=474 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4163994356085429;  // std dev = 0.621, 266.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=265 */
%   | else if ( genre(A, E) )
%   | | then return -0.09962294506164121;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.41720437957132483;  // std dev = 1.93e-07, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.10159632948783645;  // std dev = 0.000, 159.000 (wgt'ed) examples reached here.  /* #neg=159 */
%   else return -0.10159632948783562;  // std dev = 2.95e-07, 452.000 (wgt'ed) examples reached here.  /* #neg=452 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( actor(B) )
%   | | then return -0.09103652928796514;  // std dev = 1.05e-08, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else return -0.2788154329333075;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.3220523622439823;  // std dev = 0.018, 265.000 (wgt'ed) examples reached here.  /* #pos=265 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.32050222978112447;  // std dev = 4.21e-08, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.09269127618926074;  // std dev = 7.45e-08, 153.000 (wgt'ed) examples reached here.  /* #neg=153 */
%   else return -0.09269127618926137;  // std dev = 0.000, 483.000 (wgt'ed) examples reached here.  /* #neg=483 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.2558944126232616;  // std dev = 0.017, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.0882538212881694;  // std dev = 0.279, 178.000 (wgt'ed) examples reached here.  /* #neg=178 */
%   else return -0.08518475138839678;  // std dev = 1.48e-07, 514.000 (wgt'ed) examples reached here.  /* #neg=514 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( actor(B) )
%   | | then return -0.07724836159889416;  // std dev = 1.29e-08, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | else return -0.21124880589052483;  // std dev = 5.27e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.21043590242397717;  // std dev = 0.013, 265.000 (wgt'ed) examples reached here.  /* #pos=265 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.20951334122617146;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.07855431706192076;  // std dev = 0.000, 149.000 (wgt'ed) examples reached here.  /* #neg=149 */
%   else return -0.07877675473109204;  // std dev = 0.000, 494.000 (wgt'ed) examples reached here.  /* #neg=494 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( director(A) )
%   | | then return -0.17818937148869435;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.1775938748865002;  // std dev = 0.012, 265.000 (wgt'ed) examples reached here.  /* #pos=265 */
%   | else if ( genre(A, E) )
%   | | then return -0.07191871667014361;  // std dev = 7.45e-09, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.17691723996552855;  // std dev = 4.94e-08, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.07305322749228078;  // std dev = 0.000, 160.000 (wgt'ed) examples reached here.  /* #neg=160 */
%   else return -0.07324622576333703;  // std dev = 1.23e-07, 478.000 (wgt'ed) examples reached here.  /* #neg=478 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1530276743928804;  // std dev = 0.011, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.07076206028966688;  // std dev = 0.188, 164.000 (wgt'ed) examples reached here.  /* #neg=164 */
%   else return -0.0684269778442035;  // std dev = 0.000, 466.000 (wgt'ed) examples reached here.  /* #neg=466 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.13358060518552456;  // std dev = 0.000, 102.000 (wgt'ed) examples reached here.  /* #pos=102 */
%   | | else return 0.1297215454287536;  // std dev = 0.037, 166.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=163 */
%   | else if ( genre(A, E) )
%   | | then return -0.06295780639179173;  // std dev = 5.89e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.13385216998020158;  // std dev = 4.21e-08, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.06389281240612003;  // std dev = 0.000, 153.000 (wgt'ed) examples reached here.  /* #neg=153 */
%   else return -0.06419184008202541;  // std dev = 2.40e-07, 477.000 (wgt'ed) examples reached here.  /* #neg=477 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063477
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 4.527 seconds
Total inference time: 1.754 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064821
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 3.124 seconds
Refined model CLL: -0.064821


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063477
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 14.247000000000002 seconds
Total inference time: 1.754 seconds
AUC ROC: 1.0
Total revision time: 14.247000000000002
Best scored revision CLL: -0.064821


Dataset: 4_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 00:21:10
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063477, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 14.247000000000002, 'Inference time': 1.754, 'parameter_1.0': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.128948, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 3.212, 'Inference time': 1.818}}


Starting fold 3

Target train facts examples: 737
Target train pos examples: 204
Target train neg examples: 10693

Target test facts examples: 341
Target test pos	 examples: 178
Target test neg examples: 3543

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995115;  // std dev = 2.60e-07, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.03470820775763064;  // std dev = 1.637, 28.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048768;  // std dev = 5.37e-08, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109548;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.01767834639517642;  // std dev = 1.625, 25.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1254446385283916;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( movie(E, A) )
%   | | then return 0.3107429532066397;  // std dev = 0.352, 64.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=40 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360626;  // std dev = 5.05e-08, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.47792303852881457;  // std dev = 1.40e-07, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.018401733741363457;  // std dev = 1.589, 19.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783627;  // std dev = 2.95e-09, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926094;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.3620937115947847;  // std dev = 8.43e-08, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.04320535927406835;  // std dev = 1.615, 23.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926104;  // std dev = 0.000, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2832530766102413;  // std dev = 2.98e-08, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | else if ( movie(E, A) )
%   | | then return -0.03709299316660114;  // std dev = 0.337, 23.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=3 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839679;  // std dev = 7.45e-09, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.0823382813890662;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.22941186190427848;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.04241830244103885;  // std dev = 1.625, 25.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109177;  // std dev = 0.000, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.19138326865191857;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return -0.0203664458677634;  // std dev = 1.610, 22.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333704;  // std dev = 1.86e-09, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07632702883744981;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, B) )
%   | | then return 0.1141161323984143;  // std dev = 1.666, 55.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=40 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420268;  // std dev = 2.63e-09, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14848332884600524;  // std dev = 1.83e-08, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | else if ( genre(A, E) )
%   | | then return -0.07111689365955086;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.06607462849439609;  // std dev = 1.640, 29.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202623;  // std dev = 0.000, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.97199
   AUC PR    = 0.81824
   CLL	      = -0.11329
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total learning time: 1.427 seconds
Total inference time: 1.892 seconds
AUC ROC: 0.97199


Results scoring model
   AUC ROC   = 0.990143
   AUC PR    = 0.944572
   CLL	      = -0.095334
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.925
   F1        = 0.961039


Total scoring time: 1.458 seconds
Parameter learned model CLL: -0.095334


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [2.6e-07, 0, 37], 'true,false,false,true': [1.637, 25, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.37e-08, 51, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 37], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [1.625, 22, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 59, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [0.352, 24, 40], 'true,false,false': [0.0, 0, 0], 'false,true': [5.05e-08, 65, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.4e-07, 0, 37], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [1.589, 16, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.95e-09, 49, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [2.63e-09, 3, 0], 'true,false,true': [8.43e-08, 0, 37], 'true,false,false,true': [1.615, 20, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 62, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [2.98e-08, 0, 37], 'true,false,true': [0.337, 20, 3], 'true,false,false': [0.0, 0, 0], 'false,true': [7.45e-09, 68, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 37], 'true,false,false,true': [1.625, 22, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 50, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 37], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.61, 19, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.86e-09, 49, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [1.666, 15, 40], 'true,false,false': [0.0, 0, 0], 'false,true': [2.63e-09, 60, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.83e-08, 0, 37], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [1.64, 26, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 51, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.2405881042548461, 5.659960517696876e-17], 'true': [0.0, 0.23668639053254525], 'true,false': [1.8243664837083652e-15, 0.0956632653061223], 'true,false,false': [0.0956632653061223, nan], 'false': [5.659960517696876e-17, nan]}, {'': [0.17527397376646917, -3.95164127408954e-17], 'true': [-7.681543089298381e-16, 0.10196795760799346], 'true,false': [0.0, 0.10560000000000005], 'true,false,false': [0.10560000000000005, nan], 'false': [-3.95164127408954e-17, nan]}, {'': [0.1251821872918612, 3.928481471750554e-17], 'true': [0.0, 0.12367051858761596], 'true,false': [0.12367051858761596, nan], 'false': [3.928481471750554e-17, nan]}, {'': [0.10148768723731702, 1.1328806373726087e-17], 'true': [5.281060873892637e-16, 0.1266445531598518], 'true,false': [0.0, 0.13296398891966776], 'true,false,false': [0.13296398891966776, nan], 'false': [1.1328806373726087e-17, nan]}, {'': [0.08245562170663745, -2.1488187573390126e-17], 'true': [2.3129646346357427e-18, 0.0823092341076014], 'true,false': [1.9203857723245952e-16, 0.11342155009451807], 'true,false,false': [0.11342155009451807, nan], 'false': [-2.1488187573390126e-17, nan]}, {'': [0.06773686791475123, 8.163404592832033e-19], 'true': [2.400482215405744e-17, 0.11342155009451801], 'true,false': [0.11342155009451801, nan], 'false': [8.163404592832033e-19, nan]}, {'': [0.06004171507069498, -2.220446049250313e-18], 'true': [0.0, 0.06036154146186303], 'true,false': [-6.00120553851436e-18, 0.10560000000000012], 'true,false,false': [0.10560000000000012, nan], 'false': [-2.220446049250313e-18, nan]}, {'': [0.05439865579585123, 2.2657612747452172e-18], 'true': [-6.00120553851436e-18, 0.11776859504132221], 'true,false': [nan, 0.11776859504132221], 'true,false,false': [0.11776859504132221, nan], 'false': [2.2657612747452172e-18, nan]}, {'': [0.05020199083007992, 7.401486830834377e-18], 'true': [0.0, 0.05046710077004793], 'true,false': [0.05046710077004793, nan], 'false': [7.401486830834377e-18, nan]}, {'': [0.05154546936947163, -3.2653618371328133e-18], 'true': [9.00180830777154e-18, 0.08965599164568422], 'true,false': [0.0, 0.09274673008323439], 'true,false,false': [0.09274673008323439, nan], 'false': [-3.2653618371328133e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995115;  // std dev = 2.60e-07, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | else if ( actor(B) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | | else return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.14185106490048766;  // std dev = 5.96e-08, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109548;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( actor(B) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.12544463852839158;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( actor(B) )
%   | | then return -0.11231637819360636;  // std dev = 1.29e-08, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else return 0.5553664367462842;  // std dev = 1.40e-07, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   else return -0.11231637819360628;  // std dev = 4.59e-08, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4175135841583102;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( actor(B) )
%   | | | then return -0.10159632948783633;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | | else return 0.41751358415830997;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.10159632948783624;  // std dev = 3.33e-08, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.3207118471601495;  // std dev = 2.98e-08, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | else if ( actor(B) )
%   | | | then return -0.09269127618926094;  // std dev = 1.05e-08, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | | else return 0.32071184716014967;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.09269127618926107;  // std dev = 0.000, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2551722425694896;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | else if ( actor(B) )
%   | | then return -0.08518475138839682;  // std dev = 1.58e-08, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | else return 0.25517224256948945;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.08518475138839679;  // std dev = 2.11e-08, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07877675473109173;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.20975771563253542;  // std dev = 5.58e-08, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | else if ( actor(B) )
%   | | | then return -0.07877675473109176;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | | else return 0.20975771563253554;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.07877675473109175;  // std dev = 2.11e-08, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1770964977452775;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | else if ( actor(B) )
%   | | then return -0.07324622576333704;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else return 0.17709649774527736;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.07324622576333704;  // std dev = 1.29e-08, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.06842697784420272;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( actor(B) )
%   | | then return -0.06842697784420275;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | else return 0.1527438580936709;  // std dev = 3.94e-08, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   else return -0.0684269778442027;  // std dev = 1.39e-08, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13400703000801112;  // std dev = 1.05e-08, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | else if ( genre(A, E) )
%   | | then return -0.0641918400820262;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( actor(B) )
%   | | | then return -0.06419184008202619;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | | else return 0.13400703000801117;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.06419184008202625;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */


Results
   AUC ROC   = 0.993085
   AUC PR    = 0.784141
   CLL	      = -0.098419
   Precision = 0.784141 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.879012


Total learning time: 1.758 seconds
Total inference time: 1.962 seconds
AUC ROC: 0.993085


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063706
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.478 seconds
Refined model CLL: -0.063706


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.993085
   AUC PR    = 0.784141
   CLL	      = -0.098419
   Precision = 0.784141 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.879012


Total learning time: 6.1209999999999996 seconds
Total inference time: 1.962 seconds
AUC ROC: 0.993085
Total revision time: 6.1209999999999996
Best scored revision CLL: -0.063706


Dataset: 4_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 00:21:21
{'AUC ROC': 0.993085, 'AUC PR': 0.784141, 'CLL': -0.098419, 'Precision': [0.784141, 0.5], 'Recall': 1.0, 'F1': 0.879012, 'Learning time': 6.1209999999999996, 'Inference time': 1.962, 'parameter_0.2': {'AUC ROC': 0.97199, 'AUC PR': 0.81824, 'CLL': -0.11329, 'Precision': [1.0, 0.5], 'Recall': 0.724719, 'F1': 0.840391, 'Learning time': 1.427, 'Inference time': 1.892}}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995125;  // std dev = 0.000, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.06868033319317068;  // std dev = 1.667, 41.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048788;  // std dev = 0.000, 131.000 (wgt'ed) examples reached here.  /* #neg=131 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109538;  // std dev = 2.23e-07, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.07119449283472164;  // std dev = 1.677, 48.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839105;  // std dev = 8.30e-08, 125.000 (wgt'ed) examples reached here.  /* #neg=125 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, A) )
%   | | then return 0.3093786047736743;  // std dev = 0.338, 129.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=81 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360621;  // std dev = 8.43e-08, 113.000 (wgt'ed) examples reached here.  /* #neg=113 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4782634708654753;  // std dev = 0.000, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.09558057704395453;  // std dev = 1.672, 44.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783628;  // std dev = 3.48e-09, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.36233025101446353;  // std dev = 1.46e-07, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.08986559865025995;  // std dev = 1.678, 49.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926079;  // std dev = 7.60e-08, 130.000 (wgt'ed) examples reached here.  /* #neg=130 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.28341295770763936;  // std dev = 0.000, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   | else if ( movie(E, A) )
%   | | then return -0.07514076940369604;  // std dev = 0.242, 48.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=3 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.0851847513883968;  // std dev = 6.05e-08, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07950874705234241;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.2295228106997879;  // std dev = 1.23e-07, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.056121016827663704;  // std dev = 1.666, 40.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109154;  // std dev = 7.52e-08, 133.000 (wgt'ed) examples reached here.  /* #neg=133 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.19146321996145768;  // std dev = 2.98e-08, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return -0.05964114238136733;  // std dev = 1.675, 46.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333713;  // std dev = 3.84e-09, 117.000 (wgt'ed) examples reached here.  /* #neg=117 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07388085232027417;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( movie(E, B) )
%   | | then return 0.07381695131406588;  // std dev = 2.097, 130.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=81 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420267;  // std dev = 4.84e-09, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15370788831626628;  // std dev = 5.16e-08, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   | else if ( genre(A, E) )
%   | | then return -0.06898218972052407;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.07086020806704488;  // std dev = 1.683, 54.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.97199
   AUC PR    = 0.81824
   CLL	      = -0.109511
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total learning time: 2.064 seconds
Total inference time: 2.045 seconds
AUC ROC: 0.97199


Results scoring model
   AUC ROC   = 0.995112
   AUC PR    = 0.972721
   CLL	      = -0.082069
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.962963
   F1        = 0.981132


Total scoring time: 2.01 seconds
Parameter learned model CLL: -0.082069


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 78], 'true,false,false,true': [1.667, 38, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 131, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [2.23e-07, 0, 78], 'true,false,true': [0.0, 4, 0], 'true,false,false,true': [1.677, 45, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.3e-08, 125, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.338, 48, 81], 'true,false,false': [0.0, 0, 0], 'false,true': [8.43e-08, 113, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 78], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [1.672, 41, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.48e-09, 101, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 5, 0], 'true,false,true': [1.46e-07, 0, 78], 'true,false,false,true': [1.678, 46, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.6e-08, 130, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 78], 'true,false,true': [0.242, 45, 3], 'true,false,false': [0.0, 0, 0], 'false,true': [6.05e-08, 112, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [1.23e-07, 0, 78], 'true,false,false,true': [1.666, 37, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.52e-08, 133, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [2.98e-08, 0, 78], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.675, 43, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.84e-09, 117, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 4, 0], 'true,false,true': [2.097, 49, 81], 'true,false,false': [0.0, 0, 0], 'false,true': [4.84e-09, 98, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [5.16e-08, 0, 78], 'true,false,true': [0.0, 4, 0], 'true,false,false,true': [1.683, 51, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 106, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.21937500000000168, -4.0679927619853064e-17], 'true': [0.0, 0.21735753124779492], 'true,false': [-1.002047447866808e-15, 0.06781677572873274], 'true,false,false': [0.06781677572873274, nan], 'false': [-4.0679927619853064e-17, nan]}, {'': [0.17334353483832798, 5.5067062021407764e-17], 'true': [6.376665577334232e-16, 0.05429551443605585], 'true,false': [0.0, 0.05859375000000016], 'true,false,false': [0.05859375000000016, nan], 'false': [5.5067062021407764e-17, nan]}, {'': [0.1149096760855332, 6.287988812036285e-17], 'true': [0.0, 0.11443255139406085], 'true,false': [0.11443255139406085, nan], 'false': [6.287988812036285e-17, nan]}, {'': [0.09945628609813881, 1.0992307174506501e-17], 'true': [-2.7328566760003855e-16, 0.06077225602425607], 'true,false': [0.0, 0.06353305785123954], 'true,false,false': [0.06353305785123954, nan], 'false': [1.0992307174506501e-17, nan]}, {'': [0.07082364329915453, 4.4408920985006264e-17], 'true': [0.0, 0.07063055253363205], 'true,false': [2.7328566760003855e-16, 0.05747605164514773], 'true,false,false': [0.05747605164514773, nan], 'false': [4.4408920985006264e-17, nan]}, {'': [0.05257658704955908, 3.271192840413408e-17], 'true': [-1.25255930983351e-16, 0.05842829919887415], 'true,false': [0.05842829919887415, nan], 'false': [3.271192840413408e-17, nan]}, {'': [0.04184098011161624, 4.2572461846528557e-17], 'true': [0.0, 0.04179964637734432], 'true,false': [1.9357734788336063e-16, 0.06937500000000016], 'true,false,false': [0.06937500000000016, nan], 'false': [4.2572461846528557e-17, nan]}, {'': [0.0373292619966625, 1.423362852083534e-17], 'true': [1.1386902816668272e-17, 0.06096408317580321], 'true,false': [nan, 0.06096408317580321], 'true,false,false': [0.06096408317580321, nan], 'false': [1.423362852083534e-17, nan]}, {'': [0.03344761888570957, 2.3790493384824782e-17], 'true': [0.0, 0.03382559307052977], 'true,false': [0.03382559307052977, nan], 'false': [2.3790493384824782e-17, nan]}, {'': [0.03315425510687429, -1.6234393284613138e-17], 'true': [3.416070845000482e-17, 0.048850801175731845], 'true,false': [0.0, 0.052469135802469175], 'true,false,false': [0.052469135802469175, nan], 'false': [-1.6234393284613138e-17, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995125;  // std dev = 0.000, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   | | else if ( actor(B) )
%   | | | then return -0.14185106490048768;  // std dev = 5.05e-08, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   | | | else return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.14185106490048766;  // std dev = 7.60e-08, 113.000 (wgt'ed) examples reached here.  /* #neg=113 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109538;  // std dev = 2.23e-07, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( actor(B) )
%   | | | then return -0.12544463852839152;  // std dev = 0.000, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.12544463852839127;  // std dev = 0.000, 127.000 (wgt'ed) examples reached here.  /* #neg=127 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360638;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( actor(B) )
%   | | then return -0.11231637819360636;  // std dev = 1.05e-08, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | | else return 0.5553664367462836;  // std dev = 3.42e-07, 81.000 (wgt'ed) examples reached here.  /* #pos=81 */
%   else return -0.11231637819360621;  // std dev = 8.69e-08, 117.000 (wgt'ed) examples reached here.  /* #neg=117 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.41751358415831047;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | else return 0.403907115427447;  // std dev = 0.091, 46.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=45 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783633;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( actor(B) )
%   | | | then return -0.10159632948783634;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | | else return 0.4175135841583102;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.10159632948783638;  // std dev = 0.000, 124.000 (wgt'ed) examples reached here.  /* #neg=124 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926098;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.3224261455308146;  // std dev = 0.013, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   | | else if ( actor(B) )
%   | | | then return -0.09269127618926101;  // std dev = 0.000, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
%   | | | else return 0.32071184716014967;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.09269127618926104;  // std dev = 2.79e-08, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.25484656087347096;  // std dev = 5.16e-08, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | else return 0.24609578454741804;  // std dev = 0.076, 46.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=45 */
%   | else if ( actor(B) )
%   | | then return -0.08518475138839679;  // std dev = 2.24e-08, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | | else return 0.25517224256948945;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.0851847513883968;  // std dev = 6.50e-08, 122.000 (wgt'ed) examples reached here.  /* #neg=122 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07877675473109177;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.21167781581112977;  // std dev = 0.016, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   | | else if ( actor(B) )
%   | | | then return -0.07877675473109179;  // std dev = 5.27e-09, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | | else return 0.20975771563253576;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.07877675473109154;  // std dev = 7.15e-08, 125.000 (wgt'ed) examples reached here.  /* #neg=125 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17850411640346486;  // std dev = 0.014, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   | else if ( actor(B) )
%   | | then return -0.07324622576333704;  // std dev = 1.05e-08, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | else return 0.17709649774527736;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.0732462257633371;  // std dev = 0.000, 114.000 (wgt'ed) examples reached here.  /* #neg=114 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.06842697784420272;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( actor(B) )
%   | | then return -0.06842697784420271;  // std dev = 1.05e-08, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | | else return 0.1537717002669796;  // std dev = 0.013, 81.000 (wgt'ed) examples reached here.  /* #pos=81 */
%   else return -0.06842697784420264;  // std dev = 5.58e-08, 119.000 (wgt'ed) examples reached here.  /* #neg=119 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13484464343413374;  // std dev = 0.011, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   | else if ( genre(A, E) )
%   | | then return -0.0641918400820262;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( actor(B) )
%   | | | then return -0.06419184008202625;  // std dev = 0.000, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | | | else return 0.13388779466646872;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.06419184008202626;  // std dev = 0.000, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */


Results
   AUC ROC   = 0.991725
   AUC PR    = 0.81335
   CLL	      = -0.098349
   Precision = 0.784141 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.879012


Total learning time: 2.786 seconds
Total inference time: 2.102 seconds
AUC ROC: 0.991725


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.06373
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.883 seconds
Refined model CLL: -0.06373


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.991725
   AUC PR    = 0.81335
   CLL	      = -0.098349
   Precision = 0.784141 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.879012


Total learning time: 8.742999999999999 seconds
Total inference time: 2.102 seconds
AUC ROC: 0.991725
Total revision time: 8.742999999999999
Best scored revision CLL: -0.06373


Dataset: 4_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 00:21:34
{'AUC ROC': 0.991725, 'AUC PR': 0.81335, 'CLL': -0.098349, 'Precision': [0.784141, 0.5], 'Recall': 1.0, 'F1': 0.879012, 'Learning time': 8.742999999999999, 'Inference time': 2.102, 'parameter_0.4': {'AUC ROC': 0.97199, 'AUC PR': 0.81824, 'CLL': -0.109511, 'Precision': [1.0, 0.5], 'Recall': 0.724719, 'F1': 0.840391, 'Learning time': 2.064, 'Inference time': 2.045}}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995107;  // std dev = 6.31e-07, 117.000 (wgt'ed) examples reached here.  /* #pos=117 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.07691599996542275;  // std dev = 2.162, 77.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048832;  // std dev = 0.000, 187.000 (wgt'ed) examples reached here.  /* #neg=187 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109552;  // std dev = 0.000, 117.000 (wgt'ed) examples reached here.  /* #pos=117 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.06329906546840706;  // std dev = 2.157, 72.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1254446385283916;  // std dev = 0.000, 192.000 (wgt'ed) examples reached here.  /* #neg=192 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( movie(E, A) )
%   | | then return 0.2935634328960151;  // std dev = 0.343, 202.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=122 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.1123163781936065;  // std dev = 0.000, 184.000 (wgt'ed) examples reached here.  /* #neg=184 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.48221106630691835;  // std dev = 2.86e-07, 117.000 (wgt'ed) examples reached here.  /* #pos=117 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783627;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.09211756023012505;  // std dev = 2.157, 72.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783646;  // std dev = 0.000, 157.000 (wgt'ed) examples reached here.  /* #neg=157 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926097;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.3650766743145375;  // std dev = 3.37e-07, 117.000 (wgt'ed) examples reached here.  /* #pos=117 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.07904680219719079;  // std dev = 2.156, 71.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926057;  // std dev = 9.19e-08, 197.000 (wgt'ed) examples reached here.  /* #neg=197 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.28526902702316836;  // std dev = 0.000, 117.000 (wgt'ed) examples reached here.  /* #pos=117 */
%   | else if ( movie(E, A) )
%   | | then return -0.06135690226263139;  // std dev = 0.260, 68.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 6.50e-08, 162.000 (wgt'ed) examples reached here.  /* #neg=162 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08052341333677536;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( genre(B, E) )
%   | | then return 0.23081010723351267;  // std dev = 0.000, 117.000 (wgt'ed) examples reached here.  /* #pos=117 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.051838743868902123;  // std dev = 2.144, 62.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109148;  // std dev = 8.30e-08, 165.000 (wgt'ed) examples reached here.  /* #neg=165 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.19239031880334903;  // std dev = 7.88e-08, 117.000 (wgt'ed) examples reached here.  /* #pos=117 */
%   | else if ( genre(A, E) )
%   | | then return -0.07475932059420336;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.05310923726770126;  // std dev = 2.152, 68.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333671;  // std dev = 7.74e-09, 179.000 (wgt'ed) examples reached here.  /* #neg=179 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.0697497808859649;  // std dev = 2.63e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( movie(E, B) )
%   | | then return 0.07092070308007715;  // std dev = 2.675, 200.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=122 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420262;  // std dev = 5.59e-09, 166.000 (wgt'ed) examples reached here.  /* #neg=166 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15474448715711228;  // std dev = 9.88e-08, 117.000 (wgt'ed) examples reached here.  /* #pos=117 */
%   | else if ( genre(A, E) )
%   | | then return -0.06535767096293467;  // std dev = 3.23e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.0601286051058765;  // std dev = 2.158, 73.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 163.000 (wgt'ed) examples reached here.  /* #neg=163 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.97199
   AUC PR    = 0.81824
   CLL	      = -0.109735
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total learning time: 2.211 seconds
Total inference time: 1.859 seconds
AUC ROC: 0.97199


Results scoring model
   AUC ROC   = 0.994656
   AUC PR    = 0.968142
   CLL	      = -0.082993
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.959016
   F1        = 0.979079


Total scoring time: 2.336 seconds
Parameter learned model CLL: -0.082993


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 8, 0], 'true,false,true': [6.31e-07, 0, 117], 'true,false,false,true': [2.162, 72, 5], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 187, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 117], 'true,false,true': [0.0, 5, 0], 'true,false,false,true': [2.157, 67, 5], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 192, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [2.63e-09, 3, 0], 'true,false,true': [0.343, 80, 122], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 184, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [2.86e-07, 0, 117], 'true,false,true': [0.0, 6, 0], 'true,false,false,true': [2.157, 67, 5], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 157, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [2.63e-09, 6, 0], 'true,false,true': [3.37e-07, 0, 117], 'true,false,false,true': [2.156, 66, 5], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.19e-08, 197, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 117], 'true,false,true': [0.26, 63, 5], 'true,false,false': [0.0, 0, 0], 'false,true': [6.5e-08, 162, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 8, 0], 'true,false,true': [0.0, 0, 117], 'true,false,false,true': [2.144, 57, 5], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.3e-08, 165, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [7.88e-08, 0, 117], 'true,false,true': [0.0, 8, 0], 'true,false,false,true': [2.152, 63, 5], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.74e-09, 179, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [2.63e-09, 8, 0], 'true,false,true': [2.675, 78, 122], 'true,false,false': [0.0, 0, 0], 'false,true': [5.59e-09, 166, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [9.88e-08, 0, 117], 'true,false,true': [3.23e-09, 7, 0], 'true,false,false,true': [2.158, 68, 5], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 163, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.23919223605529258, -2.1610758340297165e-16], 'true': [-6.938893903907228e-18, 0.23339355935806536], 'true,false': [3.4008883079115908e-15, 0.060718502276944], 'true,false,false': [0.060718502276944, nan], 'false': [-2.1610758340297165e-16, nan]}, {'': [0.17226361850244695, -2.7755575615628914e-17], 'true': [-1.1538728187557183e-15, 0.0606601846684489], 'true,false': [0.0, 0.0646219135802471], 'true,false,false': [0.0646219135802471, nan], 'false': [-2.7755575615628914e-17, nan]}, {'': [0.118294812746236, -2.172175482962263e-17], 'true': [2.3129646346357427e-18, 0.11764086023917354], 'true,false': [0.11764086023917354, nan], 'false': [-2.172175482962263e-17, nan]}, {'': [0.10322889401743957, -7.354343602612502e-17], 'true': [6.983967060889873e-16, 0.05965737682436826], 'true,false': [0.0, 0.06462191358024708], 'true,false,false': [0.06462191358024708, nan], 'false': [-7.354343602612502e-17, nan]}, {'': [0.07140488675709385, 4.283093902107203e-17], 'true': [1.1564823173178713e-18, 0.07108200923397887], 'true,false': [9.71682373689026e-16, 0.06546320174568525], 'true,false,false': [0.06546320174568525, nan], 'false': [4.283093902107203e-17, nan]}, {'': [0.05279778334246572, 2.6042268478861695e-17], 'true': [-1.0627775962223721e-16, 0.06765456562825779], 'true,false': [0.06765456562825779, nan], 'false': [2.6042268478861695e-17, nan]}, {'': [0.04376032449210937, 4.171747122833921e-17], 'true': [-8.673617379884035e-19, 0.043767277756663975], 'true,false': [-1.518253708889103e-16, 0.07414151925078044], 'true,false,false': [0.07414151925078044, nan], 'false': [4.171747122833921e-17, nan]}, {'': [0.03867509994389755, 5.954268735419834e-17], 'true': [5.3138879811118606e-17, 0.06099615833313504], 'true,false': [0.0, 0.0681228373702422], 'true,false,false': [0.0681228373702422, nan], 'false': [5.954268735419834e-17, nan]}, {'': [0.035128272830717684, 3.076521634503446e-17], 'true': [8.673617379884035e-19, 0.035772319703206386], 'true,false': [0.035772319703206386, nan], 'false': [3.076521634503446e-17, nan]}, {'': [0.034826107824412256, -7.492302620169768e-18], 'true': [8.350395398890066e-17, 0.058221361260206626], 'true,false': [1.4869058365515489e-18, 0.0638018389941826], 'true,false,false': [0.0638018389941826, nan], 'false': [-7.492302620169768e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995107;  // std dev = 6.31e-07, 117.000 (wgt'ed) examples reached here.  /* #pos=117 */
%   | | else if ( actor(B) )
%   | | | then return -0.14185106490048766;  // std dev = 6.14e-08, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.14185106490048824;  // std dev = 0.000, 171.000 (wgt'ed) examples reached here.  /* #neg=171 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109552;  // std dev = 0.000, 117.000 (wgt'ed) examples reached here.  /* #pos=117 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( actor(B) )
%   | | | then return -0.12544463852839158;  // std dev = 0.000, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.1254446385283915;  // std dev = 0.000, 174.000 (wgt'ed) examples reached here.  /* #neg=174 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( actor(B) )
%   | | then return -0.11231637819360629;  // std dev = 4.08e-08, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | | else return 0.5553664367462834;  // std dev = 4.54e-07, 122.000 (wgt'ed) examples reached here.  /* #pos=122 */
%   else return -0.11231637819360653;  // std dev = 0.000, 183.000 (wgt'ed) examples reached here.  /* #neg=183 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4175135841583094;  // std dev = 3.32e-07, 117.000 (wgt'ed) examples reached here.  /* #pos=117 */
%   | else if ( genre(A, E) )
%   | | then return -0.1015963294878363;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( actor(B) )
%   | | | then return -0.10159632948783615;  // std dev = 5.77e-08, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
%   | | | else return 0.4175135841583102;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.10159632948783649;  // std dev = 0.000, 167.000 (wgt'ed) examples reached here.  /* #neg=167 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.32071184716015;  // std dev = 1.93e-07, 117.000 (wgt'ed) examples reached here.  /* #pos=117 */
%   | | else if ( actor(B) )
%   | | | then return -0.09269127618926107;  // std dev = 1.05e-08, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
%   | | | else return 0.32071184716014967;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.09269127618926058;  // std dev = 8.94e-08, 191.000 (wgt'ed) examples reached here.  /* #neg=191 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2551722425694898;  // std dev = 0.000, 117.000 (wgt'ed) examples reached here.  /* #pos=117 */
%   | else if ( actor(B) )
%   | | then return -0.08518475138839679;  // std dev = 2.11e-08, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
%   | | else return 0.25517224256948945;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.08518475138839678;  // std dev = 6.50e-08, 153.000 (wgt'ed) examples reached here.  /* #neg=153 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07877675473109177;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.20975771563253542;  // std dev = 1.81e-07, 117.000 (wgt'ed) examples reached here.  /* #pos=117 */
%   | | else if ( actor(B) )
%   | | | then return -0.07877675473109168;  // std dev = 3.73e-08, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
%   | | | else return 0.20975771563253573;  // std dev = 5.27e-09, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.07877675473109147;  // std dev = 7.88e-08, 192.000 (wgt'ed) examples reached here.  /* #neg=192 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1770964977452781;  // std dev = 0.000, 117.000 (wgt'ed) examples reached here.  /* #pos=117 */
%   | else if ( genre(A, E) )
%   | | then return -0.07324622576333704;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( actor(B) )
%   | | | then return -0.07324622576333704;  // std dev = 0.000, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | | | else return 0.17709649774527736;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.07324622576333668;  // std dev = 1.14e-07, 189.000 (wgt'ed) examples reached here.  /* #neg=189 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.20499014972561938;  // std dev = 0.193, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( actor(B) )
%   | | then return -0.06842697784420268;  // std dev = 2.11e-08, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | | else return 0.1527438580936714;  // std dev = 0.000, 122.000 (wgt'ed) examples reached here.  /* #pos=122 */
%   else return -0.06842697784420262;  // std dev = 7.45e-08, 174.000 (wgt'ed) examples reached here.  /* #neg=174 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1340070300080111;  // std dev = 5.16e-08, 117.000 (wgt'ed) examples reached here.  /* #pos=117 */
%   | else if ( genre(A, E) )
%   | | then return -0.05646046706712683;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( actor(B) )
%   | | | then return -0.06419184008202625;  // std dev = 0.000, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   | | | else return 0.13400703000801117;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.06419184008202626;  // std dev = 0.000, 158.000 (wgt'ed) examples reached here.  /* #neg=158 */


Results
   AUC ROC   = 0.988073
   AUC PR    = 0.631126
   CLL	      = -0.097452
   Precision = 0.784141 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.879012


Total learning time: 2.589 seconds
Total inference time: 1.887 seconds
AUC ROC: 0.988073


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063667
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.811 seconds
Refined model CLL: -0.063667


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.988073
   AUC PR    = 0.631126
   CLL	      = -0.097452
   Precision = 0.784141 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.879012


Total learning time: 9.947 seconds
Total inference time: 1.887 seconds
AUC ROC: 0.988073
Total revision time: 9.947
Best scored revision CLL: -0.063667


Dataset: 4_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 00:21:49
{'AUC ROC': 0.988073, 'AUC PR': 0.631126, 'CLL': -0.097452, 'Precision': [0.784141, 0.5], 'Recall': 1.0, 'F1': 0.879012, 'Learning time': 9.947, 'Inference time': 1.887, 'parameter_0.6': {'AUC ROC': 0.97199, 'AUC PR': 0.81824, 'CLL': -0.109735, 'Precision': [1.0, 0.5], 'Recall': 0.724719, 'F1': 0.840391, 'Learning time': 2.211, 'Inference time': 1.859}}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995097;  // std dev = 9.83e-07, 157.000 (wgt'ed) examples reached here.  /* #pos=157 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.07935106490048767;  // std dev = 2.372, 96.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=6 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004884;  // std dev = 0.000, 234.000 (wgt'ed) examples reached here.  /* #neg=234 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7141258296113402;  // std dev = 0.842, 158.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=157 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.05838935527323633;  // std dev = 2.357, 81.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=6 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839186;  // std dev = 0.000, 248.000 (wgt'ed) examples reached here.  /* #neg=248 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1313602836162422;  // std dev = 0.104, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( movie(E, A) )
%   | | then return 0.37044364040866085;  // std dev = 0.317, 228.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=163 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360675;  // std dev = 0.000, 227.000 (wgt'ed) examples reached here.  /* #neg=227 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.46438083740984953;  // std dev = 1.69e-07, 157.000 (wgt'ed) examples reached here.  /* #pos=157 */
%   | else if ( genre(A, E) )
%   | | then return -0.0998712468675762;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.08304985987343977;  // std dev = 2.337, 67.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=6 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783658;  // std dev = 0.000, 239.000 (wgt'ed) examples reached here.  /* #neg=239 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09124500833691002;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.3527211835345538;  // std dev = 0.000, 157.000 (wgt'ed) examples reached here.  /* #pos=157 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.10106210574281657;  // std dev = 2.375, 100.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=6 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926047;  // std dev = 8.43e-08, 239.000 (wgt'ed) examples reached here.  /* #neg=239 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.27344182734109307;  // std dev = 0.547, 158.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=157 */
%   | else if ( movie(E, A) )
%   | | then return -0.07250026934840739;  // std dev = 0.258, 83.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=6 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 8.69e-08, 233.000 (wgt'ed) examples reached here.  /* #neg=233 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07854570363520567;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.22561096516453466;  // std dev = 0.000, 157.000 (wgt'ed) examples reached here.  /* #pos=157 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.07444935394059218;  // std dev = 2.369, 93.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=6 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109143;  // std dev = 6.14e-08, 249.000 (wgt'ed) examples reached here.  /* #neg=249 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18863972399434223;  // std dev = 9.42e-08, 157.000 (wgt'ed) examples reached here.  /* #pos=157 */
%   | else if ( genre(A, E) )
%   | | then return -0.07304575265348578;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.07204196028746893;  // std dev = 2.377, 103.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=6 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0732462257633368;  // std dev = 7.39e-09, 253.000 (wgt'ed) examples reached here.  /* #neg=253 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.06825147130368256;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( movie(E, B) )
%   | | then return 0.07827008930900282;  // std dev = 2.916, 252.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=163 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420267;  // std dev = 1.61e-09, 242.000 (wgt'ed) examples reached here.  /* #neg=242 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15112777134044347;  // std dev = 0.000, 157.000 (wgt'ed) examples reached here.  /* #pos=157 */
%   | else if ( genre(A, E) )
%   | | then return -0.06403696795098206;  // std dev = 2.63e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.07492700526484648;  // std dev = 2.380, 107.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=6 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202625;  // std dev = 9.31e-10, 227.000 (wgt'ed) examples reached here.  /* #neg=227 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.97199
   AUC PR    = 0.81824
   CLL	      = -0.109303
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total learning time: 2.237 seconds
Total inference time: 1.762 seconds
AUC ROC: 0.97199


Results scoring model
   AUC ROC   = 0.995193
   AUC PR    = 0.971045
   CLL	      = -0.083035
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.96319
   F1        = 0.98125


Total scoring time: 2.888 seconds
Parameter learned model CLL: -0.083035


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 8, 0], 'true,false,true': [9.83e-07, 0, 157], 'true,false,false,true': [2.372, 90, 6], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 234, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.842, 1, 157], 'true,false,true': [0.0, 7, 0], 'true,false,false,true': [2.357, 75, 6], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 248, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.104, 6, 0], 'true,false,true': [0.317, 65, 163], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 227, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.69e-07, 0, 157], 'true,false,true': [5.27e-09, 11, 0], 'true,false,false,true': [2.337, 61, 6], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 239, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 3, 0], 'true,false,true': [0.0, 0, 157], 'true,false,false,true': [2.375, 94, 6], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.43e-08, 239, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.547, 1, 157], 'true,false,true': [0.258, 77, 6], 'true,false,false': [0.0, 0, 0], 'false,true': [8.69e-08, 233, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 4, 0], 'true,false,true': [0.0, 0, 157], 'true,false,false,true': [2.369, 87, 6], 'true,false,false,false': [0.0, 0, 0], 'false,true': [6.14e-08, 249, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [9.42e-08, 0, 157], 'true,false,true': [0.0, 5, 0], 'true,false,false,true': [2.377, 97, 6], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.39e-09, 253, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [2.916, 89, 163], 'true,false,false': [0.0, 0, 0], 'false,true': [1.61e-09, 242, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 157], 'true,false,true': [2.63e-09, 9, 0], 'true,false,false,true': [2.38, 101, 6], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.31e-10, 227, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.23449450242950554, -1.8978171361113786e-16], 'true': [-6.938893903907228e-18, 0.2291865206455394], 'true,false': [6.155019876648002e-15, 0.05859375000000027], 'true,false,false': [0.05859375000000027, nan], 'false': [-1.8978171361113786e-16, nan]}, {'': [0.1645994969741775, -7.699933880464796e-17], 'true': [0.004489672426572971, 0.0634605312413402], 'true,false': [-1.982541115402065e-18, 0.06858710562414297], 'true,false,false': [0.06858710562414297, nan], 'false': [-7.699933880464796e-17, nan]}, {'': [0.1045459804109672, -7.23845848654287e-17], 'true': [0.0018133516687314892, 0.10079287632905692], 'true,false': [0.10079287632905692, nan], 'false': [-7.23845848654287e-17, nan]}, {'': [0.09028738170372103, -7.432455394980127e-17], 'true': [1.8102999637200006e-16, 0.07006872009637168], 'true,false': [2.523234146875356e-18, 0.08153263533080864], 'true,false,false': [0.08153263533080864, nan], 'false': [-7.432455394980127e-17, nan]}, {'': [0.07089050924447692, 2.972982157992051e-17], 'true': [0.0, 0.07089301270193327], 'true,false': [-4.752037404765001e-16, 0.05639999999999998], 'true,false,false': [0.05639999999999998, nan], 'false': [2.972982157992051e-17, nan]}, {'': [0.05127012603992033, 3.240135865858826e-17], 'true': [0.0018929528803988183, 0.06680548561885184], 'true,false': [0.06680548561885184, nan], 'false': [3.240135865858826e-17, nan]}, {'': [0.04337527480847542, 1.5159671822190893e-17], 'true': [0.0, 0.04348550865805096], 'true,false': [-3.960031170637501e-17, 0.06035379812695071], 'true,false,false': [0.06035379812695071, nan], 'false': [1.5159671822190893e-17, nan]}, {'': [0.03773634381572911, 5.441409290652941e-17], 'true': [5.657187386625001e-17, 0.05231935408933592], 'true,false': [0.0, 0.0548590819115849], 'true,false,false': [0.0548590819115849, nan], 'false': [5.441409290652941e-17, nan]}, {'': [0.03364093126930974, 2.75261906931857e-18], 'true': [0.0, 0.03373887894697071], 'true,false': [0.03373887894697071, nan], 'false': [2.75261906931857e-18, nan]}, {'': [0.03314309190053048, 1.467255098623555e-18], 'true': [-1.8951577745193756e-16, 0.04883220627168188], 'true,false': [7.709882115452476e-19, 0.05293038693335673], 'true,false,false': [0.05293038693335673, nan], 'false': [1.467255098623555e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995097;  // std dev = 9.83e-07, 157.000 (wgt'ed) examples reached here.  /* #pos=157 */
%   | | else if ( actor(B) )
%   | | | then return -0.14185106490048766;  // std dev = 7.60e-08, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.1418510649004885;  // std dev = 0.000, 223.000 (wgt'ed) examples reached here.  /* #neg=223 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109563;  // std dev = 0.000, 157.000 (wgt'ed) examples reached here.  /* #pos=157 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( actor(B) )
%   | | | then return -0.1254446385283914;  // std dev = 0.000, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
%   | | | else return 0.7194734122109544;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.1254446385283918;  // std dev = 0.000, 231.000 (wgt'ed) examples reached here.  /* #neg=231 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1276766342414819;  // std dev = 0.152, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( actor(B) )
%   | | then return -0.11231637819360621;  // std dev = 7.30e-08, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
%   | | else return 0.5553664367462833;  // std dev = 5.53e-07, 163.000 (wgt'ed) examples reached here.  /* #pos=163 */
%   else return -0.11231637819360696;  // std dev = 0.000, 279.000 (wgt'ed) examples reached here.  /* #neg=279 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4175135841583089;  // std dev = 4.58e-07, 157.000 (wgt'ed) examples reached here.  /* #pos=157 */
%   | else if ( genre(A, E) )
%   | | then return -0.10020288426175773;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( actor(B) )
%   | | | then return -0.10159632948783616;  // std dev = 5.37e-08, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
%   | | | else return 0.41751358415831025;  // std dev = 1.49e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.10159632948783655;  // std dev = 0.000, 212.000 (wgt'ed) examples reached here.  /* #neg=212 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( female(B) )
%   | | then return -0.09152333610493132;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.13924488842893148;  // std dev = 0.165, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.32071184716014967;  // std dev = 2.98e-07, 157.000 (wgt'ed) examples reached here.  /* #pos=157 */
%   | | else if ( actor(B) )
%   | | | then return -0.0926912761892609;  // std dev = 6.14e-08, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
%   | | | else return 0.3207118471601498;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.09269127618926051;  // std dev = 6.32e-08, 212.000 (wgt'ed) examples reached here.  /* #neg=212 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2551722425694905;  // std dev = 0.000, 157.000 (wgt'ed) examples reached here.  /* #pos=157 */
%   | else if ( actor(B) )
%   | | then return -0.08505519127842397;  // std dev = 0.006, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
%   | | else return 0.25517224256948956;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.08518475138839678;  // std dev = 9.42e-08, 261.000 (wgt'ed) examples reached here.  /* #neg=261 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07450411674861786;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.20975771563253517;  // std dev = 2.56e-07, 157.000 (wgt'ed) examples reached here.  /* #pos=157 */
%   | | else if ( actor(B) )
%   | | | then return -0.0787861575480699;  // std dev = 4.21e-08, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
%   | | | else return 0.20975771563253587;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.07877675473109143;  // std dev = 6.50e-08, 239.000 (wgt'ed) examples reached here.  /* #neg=239 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1770964977452782;  // std dev = 0.000, 157.000 (wgt'ed) examples reached here.  /* #pos=157 */
%   | else if ( genre(A, E) )
%   | | then return -0.0707874559170624;  // std dev = 0.003, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( actor(B) )
%   | | | then return -0.07325438260477116;  // std dev = 0.000, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
%   | | | else return 0.17709649774527736;  // std dev = 5.27e-09, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.07324622576333668;  // std dev = 1.26e-07, 231.000 (wgt'ed) examples reached here.  /* #neg=231 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.06656705497058396;  // std dev = 0.003, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( actor(B) )
%   | | then return -0.06843411762746439;  // std dev = 3.41e-08, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
%   | | else return 0.15274385809367147;  // std dev = 0.000, 163.000 (wgt'ed) examples reached here.  /* #pos=163 */
%   else return -0.06842697784420261;  // std dev = 6.14e-08, 228.000 (wgt'ed) examples reached here.  /* #neg=228 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.13400703000801095;  // std dev = 4.47e-08, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | | else return 0.12933827794994318;  // std dev = 0.046, 96.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=95 */
%   | else if ( genre(A, E) )
%   | | then return -0.0639473056692088;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( actor(B) )
%   | | | then return -0.06419813948108201;  // std dev = 1.67e-08, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   | | | else return 0.13400703000801117;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.06419184008202625;  // std dev = 0.000, 216.000 (wgt'ed) examples reached here.  /* #neg=216 */


Results
   AUC ROC   = 0.988073
   AUC PR    = 0.631126
   CLL	      = -0.098039
   Precision = 0.784141 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.879012


Total learning time: 3.246 seconds
Total inference time: 1.806 seconds
AUC ROC: 0.988073


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063895
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.425 seconds
Refined model CLL: -0.063895


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.988073
   AUC PR    = 0.631126
   CLL	      = -0.098039
   Precision = 0.784141 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.879012


Total learning time: 10.796 seconds
Total inference time: 1.806 seconds
AUC ROC: 0.988073
Total revision time: 10.796
Best scored revision CLL: -0.063895


Dataset: 4_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 00:22:04
{'AUC ROC': 0.988073, 'AUC PR': 0.631126, 'CLL': -0.098039, 'Precision': [0.784141, 0.5], 'Recall': 1.0, 'F1': 0.879012, 'Learning time': 10.796, 'Inference time': 1.806, 'parameter_0.8': {'AUC ROC': 0.97199, 'AUC PR': 0.81824, 'CLL': -0.109303, 'Precision': [1.0, 0.5], 'Recall': 0.724719, 'F1': 0.840391, 'Learning time': 2.237, 'Inference time': 1.762}}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995093;  // std dev = 1.09e-06, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.05988385178573357;  // std dev = 3.030, 122.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048804;  // std dev = 0.000, 272.000 (wgt'ed) examples reached here.  /* #neg=272 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.719473412210957;  // std dev = 0.000, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.04622101532498723;  // std dev = 3.019, 113.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839194;  // std dev = 0.000, 272.000 (wgt'ed) examples reached here.  /* #neg=272 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( movie(E, A) )
%   | | then return 0.32842832358324775;  // std dev = 0.338, 312.000 (wgt'ed) examples reached here.  /* #neg=108 #pos=204 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360678;  // std dev = 0.000, 306.000 (wgt'ed) examples reached here.  /* #neg=306 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.47351215279592035;  // std dev = 6.42e-07, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else if ( genre(A, E) )
%   | | then return -0.1015963294878363;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.08262921663435982;  // std dev = 3.019, 113.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1015963294878366;  // std dev = 0.000, 267.000 (wgt'ed) examples reached here.  /* #neg=267 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926097;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( genre(B, E) )
%   | | then return 0.35903319413102064;  // std dev = 0.000, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.060711055559801774;  // std dev = 3.002, 101.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926043;  // std dev = 1.52e-07, 297.000 (wgt'ed) examples reached here.  /* #neg=297 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2783158707648938;  // std dev = 0.558, 195.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=194 */
%   | else if ( movie(E, A) )
%   | | then return -0.07657002938107473;  // std dev = 0.256, 141.000 (wgt'ed) examples reached here.  /* #neg=131 #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.10e-07, 317.000 (wgt'ed) examples reached here.  /* #neg=317 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13465764605161434;  // std dev = 0.396, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( genre(B, E) )
%   | | then return 0.22848035735858493;  // std dev = 1.74e-07, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.05593817405972702;  // std dev = 3.023, 116.000 (wgt'ed) examples reached here.  /* #neg=106 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109143;  // std dev = 5.58e-08, 266.000 (wgt'ed) examples reached here.  /* #neg=266 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.19071171695899802;  // std dev = 1.33e-07, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else if ( genre(A, E) )
%   | | then return -0.07010175330902936;  // std dev = 3.73e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.04850302862988183;  // std dev = 3.022, 115.000 (wgt'ed) examples reached here.  /* #neg=105 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333704;  // std dev = 4.75e-09, 321.000 (wgt'ed) examples reached here.  /* #neg=321 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.0656674462656041;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( movie(E, B) )
%   | | then return 0.07634851547558141;  // std dev = 3.586, 324.000 (wgt'ed) examples reached here.  /* #neg=120 #pos=204 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420294;  // std dev = 0.000, 288.000 (wgt'ed) examples reached here.  /* #neg=288 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15284588856355463;  // std dev = 1.33e-07, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else if ( genre(A, E) )
%   | | then return -0.061751500595309476;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.05472015526573915;  // std dev = 3.026, 119.000 (wgt'ed) examples reached here.  /* #neg=109 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0641918400820259;  // std dev = 7.21e-09, 311.000 (wgt'ed) examples reached here.  /* #neg=311 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.97199
   AUC PR    = 0.81824
   CLL	      = -0.110015
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total learning time: 2.883 seconds
Total inference time: 1.733 seconds
AUC ROC: 0.97199


Results scoring model
   AUC ROC   = 0.993632
   AUC PR    = 0.960741
   CLL	      = -0.086139
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.95098
   F1        = 0.974874


Total scoring time: 3.242 seconds
Parameter learned model CLL: -0.086139


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 12, 0], 'true,false,true': [1.09e-06, 0, 194], 'true,false,false,true': [3.03, 112, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 272, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 194], 'true,false,true': [0.0, 4, 0], 'true,false,false,true': [3.019, 103, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 272, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 6, 0], 'true,false,true': [0.338, 108, 204], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 306, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [6.42e-07, 0, 194], 'true,false,true': [0.0, 12, 0], 'true,false,false,true': [3.019, 103, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 267, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 10, 0], 'true,false,true': [0.0, 0, 194], 'true,false,false,true': [3.002, 91, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.52e-07, 297, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.558, 1, 194], 'true,false,true': [0.256, 131, 10], 'true,false,false': [0.0, 0, 0], 'false,true': [1.1e-07, 317, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.396, 14, 0], 'true,false,true': [1.74e-07, 0, 194], 'true,false,false,true': [3.023, 106, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.58e-08, 266, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [1.33e-07, 0, 194], 'true,false,true': [3.73e-09, 6, 0], 'true,false,false,true': [3.022, 105, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.75e-09, 321, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 5, 0], 'true,false,true': [3.586, 120, 204], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 288, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.33e-07, 0, 194], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [3.026, 109, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.21e-09, 311, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.23512790005949283, -4.89804275569922e-17], 'true': [-1.1564823173178714e-17, 0.22880948565935402], 'true,false': [6.15315358802561e-15, 0.07524858908895424], 'true,false,false': [0.07524858908895424, nan], 'false': [-4.89804275569922e-17, nan]}, {'': [0.1679490100280995, -7.18379604169219e-17], 'true': [-3.516087764586063e-15, 0.07811360229886441], 'true,false': [0.0, 0.08066410838750053], 'true,false,false': [0.08066410838750053, nan], 'false': [-7.18379604169219e-17, nan]}, {'': [0.1154510477960872, -7.11123244531146e-17], 'true': [0.0, 0.11400605474154642], 'true,false': [0.11400605474154642, nan], 'false': [-7.11123244531146e-17, nan]}, {'': [0.1027751144751986, -6.154045230131954e-17], 'true': [2.124303024437413e-15, 0.07295157464519503], 'true,false': [0.0, 0.08066410838750136], 'true,false,false': [0.08066410838750136, nan], 'false': [-6.154045230131954e-17, nan]}, {'': [0.07091741957198526, 7.775299297038134e-17], 'true': [0.0, 0.07021079333041311], 'true,false': [-4.3951097057325786e-16, 0.08920694049602962], 'true,false,false': [0.08920694049602962, nan], 'false': [7.775299297038134e-17, nan]}, {'': [0.05910828039586101, 3.7824633015620474e-17], 'true': [0.0015959068509096015, 0.06555416810924913], 'true,false': [0.06555416810924913, nan], 'false': [3.7824633015620474e-17, nan]}, {'': [0.04953630209045917, 1.1686558153949016e-17], 'true': [0.011194122803182058, 0.04842034307088571], 'true,false': [1.5566013541136214e-16, 0.0787752675386444], 'true,false,false': [0.0787752675386444, nan], 'false': [1.1686558153949016e-17, nan]}, {'': [0.04265305131675224, 2.3518743200782132e-17], 'true': [9.156478553609538e-17, 0.07548012410914597], 'true,false': [2.3129646346357427e-18, 0.07939508506616225], 'true,false,false': [0.07939508506616225, nan], 'false': [2.3518743200782132e-17, nan]}, {'': [0.03939253205657418, -4.70302809042601e-17], 'true': [0.0, 0.03969392883640118], 'true,false': [0.03969392883640118, nan], 'false': [-4.70302809042601e-17, nan]}, {'': [0.03928247426832898, 5.2119794725168124e-17], 'true': [9.156478553609538e-17, 0.07570050504798635], 'true,false': [0.0, 0.07697196525669059], 'true,false,false': [0.07697196525669059, nan], 'false': [5.2119794725168124e-17, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995093;  // std dev = 1.09e-06, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | | else if ( actor(B) )
%   | | | then return -0.14185106490048763;  // std dev = 8.43e-08, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.14185106490048777;  // std dev = 1.33e-07, 310.000 (wgt'ed) examples reached here.  /* #neg=310 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.719473412210957;  // std dev = 0.000, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( actor(B) )
%   | | | then return -0.12544463852839136;  // std dev = 0.000, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
%   | | | else return 0.7194734122109544;  // std dev = 2.98e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.12544463852839188;  // std dev = 0.000, 255.000 (wgt'ed) examples reached here.  /* #neg=255 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1267166182384897;  // std dev = 0.108, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( actor(B) )
%   | | then return -0.1123163781936062;  // std dev = 8.16e-08, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
%   | | else return 0.5553664367462833;  // std dev = 6.36e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.11231637819360685;  // std dev = 0.000, 300.000 (wgt'ed) examples reached here.  /* #neg=300 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4143159837940739;  // std dev = 0.622, 195.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=194 */
%   | else if ( genre(A, E) )
%   | | then return -0.10028947470799111;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( actor(B) )
%   | | | then return -0.10159632948783626;  // std dev = 4.71e-08, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
%   | | | else return 0.4175135841583103;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.10159632948783659;  // std dev = 0.000, 257.000 (wgt'ed) examples reached here.  /* #neg=257 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.0915959845726247;  // std dev = 3.73e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.32140886181101713;  // std dev = 4.66e-07, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | | else if ( actor(B) )
%   | | | then return -0.09269127618926101;  // std dev = 3.80e-08, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
%   | | | else return 0.3207118471601498;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.09269127618926046;  // std dev = 1.53e-07, 278.000 (wgt'ed) examples reached here.  /* #neg=278 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2556477932031651;  // std dev = 0.000, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else if ( actor(B) )
%   | | then return -0.08510266171322992;  // std dev = 0.003, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
%   | | else return 0.2551722425694896;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.08518475138839678;  // std dev = 9.66e-08, 271.000 (wgt'ed) examples reached here.  /* #neg=271 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11765060221703745;  // std dev = 0.218, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.21009358155615776;  // std dev = 0.000, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | | else if ( actor(B) )
%   | | | then return -0.07878271226507017;  // std dev = 0.000, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
%   | | | else return 0.2097577156325357;  // std dev = 1.97e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.07877675473109143;  // std dev = 4.21e-08, 287.000 (wgt'ed) examples reached here.  /* #neg=287 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1749387610174097;  // std dev = 0.468, 195.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=194 */
%   | else if ( genre(A, E) )
%   | | then return -0.06987240095391523;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( actor(B) )
%   | | | then return -0.07325139387357879;  // std dev = 0.000, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
%   | | | else return 0.17709649774527736;  // std dev = 7.45e-09, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.07324622576333693;  // std dev = 1.04e-07, 286.000 (wgt'ed) examples reached here.  /* #neg=286 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.06546561087009409;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( actor(B) )
%   | | then return -0.06843150156549256;  // std dev = 0.000, 111.000 (wgt'ed) examples reached here.  /* #neg=111 */
%   | | else return 0.15321792715630772;  // std dev = 0.002, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.06842697784420296;  // std dev = 0.000, 290.000 (wgt'ed) examples reached here.  /* #neg=290 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13439892824164443;  // std dev = 0.000, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else if ( genre(A, E) )
%   | | then return -0.061572569517838495;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( actor(B) )
%   | | | then return -0.06419583134989469;  // std dev = 0.000, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
%   | | | else return 0.13395202424304395;  // std dev = 7.45e-09, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.06419184008202586;  // std dev = 1.37e-07, 321.000 (wgt'ed) examples reached here.  /* #neg=321 */


Results
   AUC ROC   = 0.988073
   AUC PR    = 0.631126
   CLL	      = -0.098062
   Precision = 0.784141 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.879012


Total learning time: 3.023 seconds
Total inference time: 1.89 seconds
AUC ROC: 0.988073


Results scoring model
   AUC ROC   = 0.999909
   AUC PR    = 0.981202
   CLL	      = -0.064136
   Precision = 0.995122 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.997555


Total scoring time: 3.142 seconds
Refined model CLL: -0.064136


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.988073
   AUC PR    = 0.631126
   CLL	      = -0.098062
   Precision = 0.784141 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.879012


Total learning time: 12.29 seconds
Total inference time: 1.89 seconds
AUC ROC: 0.988073
Total revision time: 12.29
Best scored revision CLL: -0.064136


Dataset: 4_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 00:22:20
{'AUC ROC': 0.988073, 'AUC PR': 0.631126, 'CLL': -0.098062, 'Precision': [0.784141, 0.5], 'Recall': 1.0, 'F1': 0.879012, 'Learning time': 12.29, 'Inference time': 1.89, 'parameter_1.0': {'AUC ROC': 0.97199, 'AUC PR': 0.81824, 'CLL': -0.110015, 'Precision': [1.0, 0.5], 'Recall': 0.724719, 'F1': 0.840391, 'Learning time': 2.883, 'Inference time': 1.733}}


Starting fold 4

Target train facts examples: 927
Target train pos examples: 337
Target train neg examples: 12345

Target test facts examples: 151
Target test pos	 examples: 45
Target test neg examples: 1891

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995124;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.10304689428318584;  // std dev = 3.010, 49.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048763;  // std dev = 8.56e-08, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7043855898763233;  // std dev = 0.837, 56.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=55 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.13085065963758877;  // std dev = 2.928, 42.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1254446385283913;  // std dev = 0.000, 115.000 (wgt'ed) examples reached here.  /* #neg=115 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14045664979291267;  // std dev = 0.138, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( movie(E, A) )
%   | | then return 0.3831037919121141;  // std dev = 0.363, 94.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360624;  // std dev = 7.30e-08, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.45177968359351134;  // std dev = 0.659, 56.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=55 */
%   | else if ( genre(A, E) )
%   | | then return -0.09905648214259438;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.051200827053954956;  // std dev = 2.928, 42.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783633;  // std dev = 0.000, 110.000 (wgt'ed) examples reached here.  /* #neg=110 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12919009603446294;  // std dev = 0.244, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( genre(B, E) )
%   | | then return 0.3549346364890115;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.008535353256742246;  // std dev = 3.029, 51.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926097;  // std dev = 4.59e-08, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.25958335997557846;  // std dev = 0.745, 57.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=55 */
%   | else if ( movie(E, A) )
%   | | then return 0.004212435109516769;  // std dev = 0.425, 50.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=12 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839682;  // std dev = 4.94e-08, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08078071120767005;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.22935867787013806;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.08129101571670146;  // std dev = 2.847, 37.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109161;  // std dev = 5.37e-08, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18267989924264302;  // std dev = 0.481, 56.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=55 */
%   | else if ( genre(A, E) )
%   | | then return -0.07498185466061363;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.03607651700308878;  // std dev = 3.055, 54.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333707;  // std dev = 0.000, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.26736889220255605;  // std dev = 0.228, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( movie(E, B) )
%   | | then return 0.12774561458735584;  // std dev = 2.880, 92.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420265;  // std dev = 4.84e-09, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14025063858366288;  // std dev = 0.421, 56.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=55 */
%   | else if ( genre(A, E) )
%   | | then return -0.054427657945013724;  // std dev = 1.32e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.04983073583508326;  // std dev = 3.047, 53.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.12873
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.699 seconds
Total inference time: 1.398 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.976497
   AUC PR    = 0.859383
   CLL	      = -0.131469
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.820896
   F1        = 0.901639


Total scoring time: 1.551 seconds
Parameter learned model CLL: -0.131469


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 5, 0], 'true,false,true': [0.0, 0, 55], 'true,false,false,true': [3.01, 37, 12], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.56e-08, 93, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.837, 1, 55], 'true,false,true': [0.0, 8, 0], 'true,false,false,true': [2.928, 30, 12], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 115, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.138, 8, 0], 'true,false,true': [0.363, 27, 67], 'true,false,false': [0.0, 0, 0], 'false,true': [7.3e-08, 97, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.659, 1, 55], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [2.928, 30, 12], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 110, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.244, 10, 0], 'true,false,true': [0.0, 0, 55], 'true,false,false,true': [3.029, 39, 12], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.59e-08, 98, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.745, 2, 55], 'true,false,true': [0.425, 38, 12], 'true,false,false': [0.0, 0, 0], 'false,true': [4.94e-08, 84, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [0.0, 0, 55], 'true,false,false,true': [2.847, 25, 12], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.37e-08, 93, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.481, 1, 55], 'true,false,true': [0.0, 5, 0], 'true,false,false,true': [3.055, 42, 12], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 109, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.228, 4, 0], 'true,false,true': [2.88, 25, 67], 'true,false,false': [0.0, 0, 0], 'false,true': [4.84e-09, 102, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.421, 1, 55], 'true,false,true': [1.32e-09, 3, 0], 'true,false,false,true': [3.047, 41, 12], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 90, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.23684875010520934, 7.879002110243047e-17], 'true': [-2.7755575615628915e-18, 0.22919748520709987], 'true,false': [-1.291895883200182e-16, 0.18492294877134477], 'true,false,false': [0.18492294877134477, nan], 'false': [7.879002110243047e-17, nan]}, {'': [0.1857543898741728, -5.792467954566034e-18], 'true': [0.012520331054076461, 0.18025694184202246], 'true,false': [0.0, 0.20408163265306106], 'true,false,false': [0.20408163265306106, nan], 'false': [-5.792467954566034e-18, nan]}, {'': [0.14169844278505847, 5.493887132165723e-17], 'true': [0.002375624657048183, 0.13205644616756257], 'true,false': [0.13205644616756257, nan], 'false': [5.493887132165723e-17, nan]}, {'': [0.1313864899553308, -6.0557619525008536e-18], 'true': [0.007755802530386134, 0.1957847866198782], 'true,false': [0.0, 0.20408163265306126], 'true,false,false': [0.20408163265306126, nan], 'false': [-6.0557619525008536e-18, nan]}, {'': [0.11729309638274502, 2.1524732110079565e-17], 'true': [0.005968944462136641, 0.11955105448276515], 'true,false': [-4.844609562000683e-17, 0.17993079584775068], 'true,false,false': [0.17993079584775068, nan], 'false': [2.1524732110079565e-17, nan]}, {'': [0.10567905140246707, 2.9077269692563625e-17], 'true': [0.00974916788446493, 0.1802987856390077], 'true,false': [0.1802987856390077, nan], 'false': [2.9077269692563625e-17, nan]}, {'': [0.09272316127560623, 3.1038493161563513e-17], 'true': [0.0, 0.09340280626621678], 'true,false': [-6.45947941600091e-17, 0.21913805697589508], 'true,false,false': [0.21913805697589508, nan], 'false': [3.1038493161563513e-17, nan]}, {'': [0.09554911814541789, -2.0371064672021222e-18], 'true': [0.004129561995781239, 0.15830949310462333], 'true,false': [-6.938893903907229e-19, 0.17283950617283972], 'true,false,false': [0.17283950617283972, nan], 'false': [-2.0371064672021222e-18, nan]}, {'': [0.09317550438176446, 2.3401759832785162e-17], 'true': [0.012992189039432084, 0.09015692408877853], 'true,false': [0.09015692408877853, nan], 'false': [2.3401759832785162e-17, nan]}, {'': [0.09352072143296095, -1.295260195396016e-17], 'true': [0.003159872473694453, 0.16576926547925466], 'true,false': [5.782411586589357e-19, 0.17515129939480253], 'true,false,false': [0.17515129939480253, nan], 'false': [-1.295260195396016e-17, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995124;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.14185106490048774;  // std dev = 1.49e-08, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   else return -0.14185106490048763;  // std dev = 8.94e-08, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109544;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | else return 0.6612032018151374;  // std dev = 0.214, 29.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=27 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( actor(B) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | | else return 0.7194734122109542;  // std dev = 4.21e-08, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else return -0.1254446385283914;  // std dev = 0.000, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13334109518025525;  // std dev = 0.094, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( director(B), actor(A) )
%   | | then return 0.5611446834932308;  // std dev = 0.058, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | | else return -0.11643073249214449;  // std dev = 0.113, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   else return -0.1123163781936062;  // std dev = 8.16e-08, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.416109011078545;  // std dev = 5.96e-08, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | else return 0.40797706265342815;  // std dev = 0.116, 28.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | else if ( genre(A, E) )
%   | | then return -0.09969331896841732;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( actor(B) )
%   | | | then return -0.10122140888231163;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | | else return 0.41610901107854564;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else return -0.10159632948783634;  // std dev = 0.000, 113.000 (wgt'ed) examples reached here.  /* #neg=113 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09109562451008851;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.3269333639605578;  // std dev = 0.054, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.3197597652577398;  // std dev = 2.58e-08, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.09923551734671081;  // std dev = 0.189, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   else return -0.092691276189261;  // std dev = 3.94e-08, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2585488860092506;  // std dev = 0.050, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.08966625227053392;  // std dev = 0.163, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   else return -0.0851847513883968;  // std dev = 5.37e-08, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( actor(B) )
%   | | then return -0.07719437755163118;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.23383644049385222;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.2129147831589334;  // std dev = 0.041, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | | else if ( actor(B) )
%   | | | then return -0.07771187379727086;  // std dev = 1.05e-08, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | | else return 0.20863306754696567;  // std dev = 2.36e-08, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else return -0.07877675473109157;  // std dev = 6.50e-08, 113.000 (wgt'ed) examples reached here.  /* #neg=113 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17941405450145467;  // std dev = 0.036, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | else if ( genre(A, E) )
%   | | then return -0.07187176808103533;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( actor(B) )
%   | | | then return -0.07232165320656848;  // std dev = 1.29e-08, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | | else return 0.17627118122262675;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else return -0.07324622576333707;  // std dev = 0.000, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1540759741804708;  // std dev = 0.033, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.07582859438421369;  // std dev = 0.216, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   else return -0.06842697784420267;  // std dev = 4.01e-08, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13543157728008162;  // std dev = 0.029, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | else if ( genre(A, E) )
%   | | then return -0.06262101545933106;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( actor(B) )
%   | | | then return -0.06299036801055345;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | | else return 0.13329142237862057;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else return -0.06419184008202626;  // std dev = 0.000, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064021
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.52 seconds
Total inference time: 1.476 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.066635
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.627 seconds
Refined model CLL: -0.066635


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064021
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 7.396999999999999 seconds
Total inference time: 1.476 seconds
AUC ROC: 1.0
Total revision time: 7.396999999999999
Best scored revision CLL: -0.066635


Dataset: 4_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 00:22:31
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.064021, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 7.396999999999999, 'Inference time': 1.476, 'parameter_0.2': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.12873, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 1.699, 'Inference time': 1.398}}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( genre(B, E) )
%   | | then return 0.858148935099511;  // std dev = 5.72e-07, 111.000 (wgt'ed) examples reached here.  /* #pos=111 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.1568502338008104;  // std dev = 4.016, 77.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=23 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048838;  // std dev = 0.000, 194.000 (wgt'ed) examples reached here.  /* #neg=194 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7045191104279576;  // std dev = 1.184, 113.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=111 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.10855130639616073;  // std dev = 4.096, 85.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=23 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839158;  // std dev = 0.000, 186.000 (wgt'ed) examples reached here.  /* #neg=186 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13483325037316773;  // std dev = 0.142, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( movie(E, A) )
%   | | then return 0.341182825979229;  // std dev = 0.378, 202.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=134 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360658;  // std dev = 0.000, 197.000 (wgt'ed) examples reached here.  /* #neg=197 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.450536039985762;  // std dev = 1.329, 115.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=111 */
%   | else if ( genre(A, E) )
%   | | then return -0.09955947120868969;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.0959228195369156;  // std dev = 3.930, 70.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=23 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783653;  // std dev = 0.000, 200.000 (wgt'ed) examples reached here.  /* #neg=200 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12325702858398713;  // std dev = 0.250, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( genre(B, E) )
%   | | then return 0.36484721218440014;  // std dev = 0.000, 111.000 (wgt'ed) examples reached here.  /* #pos=111 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.005345595369740562;  // std dev = 4.138, 90.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=23 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926053;  // std dev = 9.77e-08, 218.000 (wgt'ed) examples reached here.  /* #neg=218 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2707633864433755;  // std dev = 0.932, 114.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=111 */
%   | else if ( movie(E, A) )
%   | | then return -0.0026489338079381105;  // std dev = 0.419, 98.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=23 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 6.99e-08, 174.000 (wgt'ed) examples reached here.  /* #neg=174 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10714758807675889;  // std dev = 0.221, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( genre(B, E) )
%   | | then return 0.23325938108476846;  // std dev = 9.42e-08, 111.000 (wgt'ed) examples reached here.  /* #pos=111 */
%   | | else if ( movie(F, A) )
%   | | | then return -7.162079068301938E-4;  // std dev = 4.153, 92.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=23 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109147;  // std dev = 7.60e-08, 189.000 (wgt'ed) examples reached here.  /* #neg=189 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.181333984426744;  // std dev = 0.832, 114.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=111 */
%   | else if ( genre(A, E) )
%   | | then return -0.07345824412439474;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( movie(F, A) )
%   | | | then return -5.816868378084672E-4;  // std dev = 4.153, 92.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=23 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333668;  // std dev = 8.38e-09, 230.000 (wgt'ed) examples reached here.  /* #neg=230 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14381647127509675;  // std dev = 0.445, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( movie(E, B) )
%   | | then return 0.09641398165313624;  // std dev = 4.279, 200.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=134 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420262;  // std dev = 5.74e-09, 200.000 (wgt'ed) examples reached here.  /* #neg=200 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15433407051076073;  // std dev = 1.15e-07, 111.000 (wgt'ed) examples reached here.  /* #pos=111 */
%   | else if ( genre(A, E) )
%   | | then return -0.0599728560397798;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.0015624684330003832;  // std dev = 4.105, 86.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=23 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 210.000 (wgt'ed) examples reached here.  /* #neg=210 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.129868
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.04 seconds
Total inference time: 1.566 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.978258
   AUC PR    = 0.865733
   CLL	      = -0.130276
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.828358
   F1        = 0.906122


Total scoring time: 2.53 seconds
Parameter learned model CLL: -0.130276


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 10, 0], 'true,false,true': [5.72e-07, 0, 111], 'true,false,false,true': [4.016, 54, 23], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 194, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.184, 2, 111], 'true,false,true': [0.0, 6, 0], 'true,false,false,true': [4.096, 62, 23], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 186, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.142, 10, 0], 'true,false,true': [0.378, 68, 134], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 197, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.329, 4, 111], 'true,false,true': [0.0, 8, 0], 'true,false,false,true': [3.93, 47, 23], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 200, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.25, 12, 0], 'true,false,true': [0.0, 0, 111], 'true,false,false,true': [4.138, 67, 23], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.77e-08, 218, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.932, 3, 111], 'true,false,true': [0.419, 75, 23], 'true,false,false': [0.0, 0, 0], 'false,true': [6.99e-08, 174, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.221, 9, 0], 'true,false,true': [9.42e-08, 0, 111], 'true,false,false,true': [4.153, 69, 23], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.6e-08, 189, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.832, 3, 111], 'true,false,true': [0.0, 6, 0], 'true,false,false,true': [4.153, 69, 23], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.38e-09, 230, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.445, 14, 0], 'true,false,true': [4.279, 66, 134], 'true,false,false': [0.0, 0, 0], 'false,true': [5.74e-09, 200, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.15e-07, 0, 111], 'true,false,true': [0.0, 9, 0], 'true,false,false,true': [4.105, 63, 23], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 210, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.21875318845016267, -2.3120108347864086e-16], 'true': [-1.1102230246251566e-17, 0.20473064735174745], 'true,false': [2.944591517564379e-15, 0.2094788328554572], 'true,false,false': [0.2094788328554572, nan], 'false': [-2.3120108347864086e-16, nan]}, {'': [0.18298129609715294, -2.1488187573390126e-17], 'true': [0.012411528370840334, 0.18772894767206655], 'true,false': [-2.3129646346357427e-18, 0.19737024221453192], 'true,false,false': [0.19737024221453192, nan], 'false': [-2.1488187573390126e-17, nan]}, {'': [0.1465198722536191, -3.8322419124117076e-17], 'true': [0.002028038131002835, 0.14298466424757478], 'true,false': [0.14298466424757478, nan], 'false': [-3.8322419124117076e-17, nan]}, {'': [0.12439011597030032, -9.103828801926283e-17], 'true': [0.01535697486753591, 0.20150268239647248], 'true,false': [0.0, 0.22061224489795875], 'true,false,false': [0.22061224489795875, nan], 'false': [-9.103828801926283e-17, nan]}, {'': [0.11652608031660186, 4.379778904484563e-17], 'true': [0.005207992670146632, 0.11714285234190344], 'true,false': [-8.641735975460678e-16, 0.1902469135802471], 'true,false,false': [0.1902469135802471, nan], 'false': [4.379778904484563e-17, nan]}, {'': [0.10369885867431926, 2.807460522040626e-17], 'true': [0.007619754927634927, 0.17526628141073491], 'true,false': [0.17526628141073491, nan], 'false': [2.807460522040626e-17, nan]}, {'': [0.09682169199393945, 3.054581866693552e-17], 'true': [0.005430922322885871, 0.09854161985496834], 'true,false': [8.001607384685813e-17, 0.18750000000000047], 'true,false,false': [0.18750000000000047, nan], 'false': [3.054581866693552e-17, nan]}, {'': [0.09341244364785002, 6.950961545479241e-17], 'true': [0.006078694900389103, 0.1763256630483416], 'true,false': [0.0, 0.1874999999999999], 'true,false,false': [0.1874999999999999, nan], 'false': [6.950961545479241e-17, nan]}, {'': [0.09001893680419232, 3.3306690738754695e-17], 'true': [0.014139082273698438, 0.09155506219517053], 'true,false': [0.09155506219517053, nan], 'false': [3.3306690738754695e-17, nan]}, {'': [0.08840103034593061, -5.286776307738841e-19], 'true': [1.200241107702872e-16, 0.1776487808842249], 'true,false': [-7.709882115452476e-19, 0.1959167117360735], 'true,false,false': [0.1959167117360735, nan], 'false': [-5.286776307738841e-19, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.858148935099511;  // std dev = 5.72e-07, 111.000 (wgt'ed) examples reached here.  /* #pos=111 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.8581489350995121;  // std dev = 8.43e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.14185106490048766;  // std dev = 5.77e-08, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   else return -0.1418510649004885;  // std dev = 0.000, 219.000 (wgt'ed) examples reached here.  /* #neg=219 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.719473412210955;  // std dev = 0.000, 111.000 (wgt'ed) examples reached here.  /* #pos=111 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.7194734122109543;  // std dev = 5.96e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.1254446385283916;  // std dev = 0.000, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   else return -0.12544463852839158;  // std dev = 0.000, 189.000 (wgt'ed) examples reached here.  /* #neg=189 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13791680494006556;  // std dev = 0.144, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( actor(A), director(B) )
%   | | then return 0.5553664367462834;  // std dev = 4.92e-07, 134.000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | | else return -0.11231637819360624;  // std dev = 5.67e-08, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
%   else return -0.11231637819360644;  // std dev = 0.000, 177.000 (wgt'ed) examples reached here.  /* #neg=177 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.4175135841583106;  // std dev = 0.000, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | else return 0.40779942738440056;  // std dev = 0.077, 64.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=63 */
%   | else if ( genre(A, E) )
%   | | then return -0.0992833797427788;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( actor(B) )
%   | | | then return -0.10159632948783621;  // std dev = 4.21e-08, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | | | else return 0.41751358415831047;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   else return -0.10159632948783653;  // std dev = 0.000, 208.000 (wgt'ed) examples reached here.  /* #neg=208 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( actor(B) )
%   | | then return -0.09075129735070217;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return -0.2783833281686572;  // std dev = 5.27e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.3219150679916426;  // std dev = 0.011, 111.000 (wgt'ed) examples reached here.  /* #pos=111 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.32071184716014955;  // std dev = 2.98e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.0957386216451195;  // std dev = 0.091, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   else return -0.09269127618926057;  // std dev = 9.31e-08, 200.000 (wgt'ed) examples reached here.  /* #neg=200 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.2558524391339343;  // std dev = 0.010, 134.000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.09295039060575128;  // std dev = 0.278, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
%   else return -0.08518475138839678;  // std dev = 7.45e-08, 187.000 (wgt'ed) examples reached here.  /* #neg=187 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( actor(B) )
%   | | then return -0.07668972679172995;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.2101819947057034;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.21036117435743673;  // std dev = 0.008, 111.000 (wgt'ed) examples reached here.  /* #pos=111 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.20964498890605973;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.07884055501029899;  // std dev = 0.046, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   else return -0.07877675473109146;  // std dev = 6.50e-08, 230.000 (wgt'ed) examples reached here.  /* #neg=230 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( actor(A) )
%   | | then return 0.17753909058073555;  // std dev = 0.007, 111.000 (wgt'ed) examples reached here.  /* #pos=111 */
%   | | else return -0.17740762379237493;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(A, E) )
%   | | then return -0.0714326874044684;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.17701381363020957;  // std dev = 2.58e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.07327650394449853;  // std dev = 0.043, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   else return -0.07324622576333666;  // std dev = 1.19e-07, 200.000 (wgt'ed) examples reached here.  /* #neg=200 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.15301120581745342;  // std dev = 0.007, 134.000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.0721388556230798;  // std dev = 0.166, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
%   else return -0.06842697784420262;  // std dev = 7.81e-08, 186.000 (wgt'ed) examples reached here.  /* #neg=186 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( actor(A) )
%   | | then return 0.13427708468089036;  // std dev = 0.006, 111.000 (wgt'ed) examples reached here.  /* #pos=111 */
%   | | else return -0.1438644446368021;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(A, E) )
%   | | then return -0.06247606024994633;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.13391976958868224;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.06410892790309515;  // std dev = 0.038, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   else return -0.06419184008202626;  // std dev = 0.000, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063745
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.169 seconds
Total inference time: 1.445 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064558
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.256 seconds
Refined model CLL: -0.064558


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063745
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 9.995000000000001 seconds
Total inference time: 1.445 seconds
AUC ROC: 1.0
Total revision time: 9.995000000000001
Best scored revision CLL: -0.064558


Dataset: 4_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 00:22:45
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063745, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 9.995000000000001, 'Inference time': 1.445, 'parameter_0.4': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.129868, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 2.04, 'Inference time': 1.566}}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 7.45e-09, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995096;  // std dev = 1.05e-06, 168.000 (wgt'ed) examples reached here.  /* #pos=168 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.1368374596896748;  // std dev = 4.952, 122.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=34 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.141851064900488;  // std dev = 0.000, 280.000 (wgt'ed) examples reached here.  /* #neg=280 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.704650288513775;  // std dev = 1.451, 171.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=168 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.08526639634257879;  // std dev = 5.068, 139.000 (wgt'ed) examples reached here.  /* #neg=105 #pos=34 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839197;  // std dev = 0.000, 284.000 (wgt'ed) examples reached here.  /* #neg=284 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.15735926968918917;  // std dev = 0.123, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( movie(E, A) )
%   | | then return 0.3546100982883552;  // std dev = 0.372, 298.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=202 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360685;  // std dev = 0.000, 298.000 (wgt'ed) examples reached here.  /* #neg=298 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4706813414733092;  // std dev = 4.38e-07, 168.000 (wgt'ed) examples reached here.  /* #pos=168 */
%   | else if ( genre(A, E) )
%   | | then return -0.09755820919865109;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.0559746487113185;  // std dev = 4.936, 120.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=34 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783659;  // std dev = 0.000, 258.000 (wgt'ed) examples reached here.  /* #neg=258 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.16237553270128754;  // std dev = 0.267, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( genre(B, E) )
%   | | then return 0.35707306460662913;  // std dev = 0.000, 168.000 (wgt'ed) examples reached here.  /* #pos=168 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.03249996415599985;  // std dev = 4.983, 126.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=34 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926043;  // std dev = 1.41e-07, 285.000 (wgt'ed) examples reached here.  /* #neg=285 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.26748213137794213;  // std dev = 1.052, 172.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=168 */
%   | else if ( movie(E, A) )
%   | | then return 0.021628406188645727;  // std dev = 0.431, 134.000 (wgt'ed) examples reached here.  /* #neg=100 #pos=34 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 9.77e-08, 269.000 (wgt'ed) examples reached here.  /* #neg=269 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14850468617117707;  // std dev = 0.379, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( genre(B, E) )
%   | | then return 0.22923323146972327;  // std dev = 0.000, 168.000 (wgt'ed) examples reached here.  /* #pos=168 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.017548220630526225;  // std dev = 5.118, 148.000 (wgt'ed) examples reached here.  /* #neg=114 #pos=34 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109141;  // std dev = 4.94e-08, 285.000 (wgt'ed) examples reached here.  /* #neg=285 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18849312001772833;  // std dev = 0.465, 169.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=168 */
%   | else if ( genre(A, E) )
%   | | then return -0.06840418778866202;  // std dev = 2.63e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.025815092778728455;  // std dev = 4.983, 126.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=34 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333696;  // std dev = 5.74e-09, 294.000 (wgt'ed) examples reached here.  /* #neg=294 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13094782794968957;  // std dev = 0.429, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( movie(E, B) )
%   | | then return 0.10140613454600747;  // std dev = 5.140, 295.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=202 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420296;  // std dev = 0.000, 290.000 (wgt'ed) examples reached here.  /* #neg=290 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14268630321264056;  // std dev = 0.751, 171.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=168 */
%   | else if ( genre(A, E) )
%   | | then return -0.05674243632230585;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.018251869514443797;  // std dev = 5.050, 136.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=34 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202601;  // std dev = 6.04e-09, 288.000 (wgt'ed) examples reached here.  /* #neg=288 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.128266
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.409 seconds
Total inference time: 1.344 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.979208
   AUC PR    = 0.869415
   CLL	      = -0.127401
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.831683
   F1        = 0.908108


Total scoring time: 2.419 seconds
Parameter learned model CLL: -0.127401


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [7.45e-09, 20, 0], 'true,false,true': [1.05e-06, 0, 168], 'true,false,false,true': [4.952, 88, 34], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 280, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.451, 3, 168], 'true,false,true': [0.0, 9, 0], 'true,false,false,true': [5.068, 105, 34], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 284, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.123, 5, 0], 'true,false,true': [0.372, 96, 202], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 298, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [4.38e-07, 0, 168], 'true,false,true': [0.0, 11, 0], 'true,false,false,true': [4.936, 86, 34], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 258, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.267, 8, 0], 'true,false,true': [0.0, 0, 168], 'true,false,false,true': [4.983, 92, 34], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.41e-07, 285, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [1.052, 4, 168], 'true,false,true': [0.431, 100, 34], 'true,false,false': [0.0, 0, 0], 'false,true': [9.77e-08, 269, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.379, 13, 0], 'true,false,true': [0.0, 0, 168], 'true,false,false,true': [5.118, 114, 34], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.94e-08, 285, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.465, 1, 168], 'true,false,true': [2.63e-09, 8, 0], 'true,false,false,true': [4.983, 92, 34], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.74e-09, 294, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.429, 15, 0], 'true,false,true': [5.14, 93, 202], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 290, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.751, 3, 168], 'true,false,true': [0.0, 6, 0], 'true,false,false,true': [5.05, 102, 34], 'true,false,false,false': [0.0, 0, 0], 'false,true': [6.04e-09, 288, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.22701352757544682, -2.5376526277146434e-17], 'true': [2.7755575615628915e-18, 0.2113674197384115], 'true,false': [6.5133084111342514e-15, 0.20102123085192286], 'true,false,false': [0.20102123085192286, nan], 'false': [-2.5376526277146434e-17, nan]}, {'': [0.18768370868925965, -7.81847200440251e-17], 'true': [0.012304599783945908, 0.17607260790482898], 'true,false': [0.0, 0.18477304487345236], 'true,false,false': [0.18477304487345236, nan], 'false': [-7.81847200440251e-17, nan]}, {'': [0.1402757140330954, -8.643347037350212e-17], 'true': [0.0030432931114242694, 0.13825298044518053], 'true,false': [0.13825298044518053, nan], 'false': [-8.643347037350212e-17, nan]}, {'': [0.12729847380424136, -6.712976427966062e-17], 'true': [1.1419436824715897e-15, 0.1878182402014963], 'true,false': [-3.784851220313033e-18, 0.20305555555555438], 'true,false,false': [0.20305555555555438, nan], 'false': [-6.712976427966062e-17, nan]}, {'': [0.11128568969383265, 7.011934892369409e-17], 'true': [0.00890007829567805, 0.11023956138775176], 'true,false': [-9.30472630162036e-16, 0.19702695893172006], 'true,false,false': [0.19702695893172006, nan], 'false': [7.011934892369409e-17, nan]}, {'': [0.09968934034878174, 3.549411900288604e-17], 'true': [0.006433302654934544, 0.1854160307922504], 'true,false': [0.1854160307922504, nan], 'false': [3.549411900288604e-17, nan]}, {'': [0.09721155050635193, 8.570142646229279e-18], 'true': [0.011027755889991097, 0.0980414633444945], 'true,false': [0.0, 0.17695398100803414], 'true,false,false': [0.17695398100803414, nan], 'false': [8.570142646229279e-18, nan]}, {'': [0.08985390625998685, 3.398641912117826e-17], 'true': [0.001281063982328454, 0.18576250086970675], 'true,false': [8.673617379884035e-19, 0.1970269589317208], 'true,false,false': [0.1970269589317208, nan], 'false': [3.398641912117826e-17, nan]}, {'': [0.08829160400863906, -4.8237276242334385e-17], 'true': [0.012262379216833671, 0.0895451566065606], 'true,false': [0.0895451566065606, nan], 'false': [-4.8237276242334385e-17, nan]}, {'': [0.0898486195949746, 3.623644594262664e-17], 'true': [0.003297810747448854, 0.1796374193298084], 'true,false': [-5.782411586589357e-19, 0.18749999999999864], 'true,false,false': [0.18749999999999864, nan], 'false': [3.623644594262664e-17, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995096;  // std dev = 1.05e-06, 168.000 (wgt'ed) examples reached here.  /* #pos=168 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.8581489350995115;  // std dev = 2.38e-07, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | | else return -0.14185106490048766;  // std dev = 7.30e-08, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
%   else return -0.14185106490048793;  // std dev = 0.000, 288.000 (wgt'ed) examples reached here.  /* #neg=288 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109544;  // std dev = 1.69e-07, 70.000 (wgt'ed) examples reached here.  /* #pos=70 */
%   | | else return 0.7109388864459105;  // std dev = 0.084, 99.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=98 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.7194734122109548;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
%   else return -0.12544463852839202;  // std dev = 0.000, 303.000 (wgt'ed) examples reached here.  /* #neg=303 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5563883832693794;  // std dev = 0.015, 202.000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.11881383161364968;  // std dev = 0.270, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
%   else return -0.11231637819360653;  // std dev = 0.000, 341.000 (wgt'ed) examples reached here.  /* #neg=341 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.41726507183107053;  // std dev = 0.000, 70.000 (wgt'ed) examples reached here.  /* #pos=70 */
%   | | else return 0.40683659945576445;  // std dev = 0.088, 100.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=98 */
%   | else if ( genre(A, E) )
%   | | then return -0.1010048108676934;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.41726507183106964;  // std dev = 1.03e-07, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | | else return -0.10100481086769346;  // std dev = 1.83e-08, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
%   else return -0.10159632948783662;  // std dev = 0.000, 301.000 (wgt'ed) examples reached here.  /* #neg=301 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11100791098127609;  // std dev = 0.056, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( genre(B, E) )
%   | | then return 0.3229607244661242;  // std dev = 0.026, 168.000 (wgt'ed) examples reached here.  /* #pos=168 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.3205433734371977;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | | else return -0.09219578278308037;  // std dev = 0.000, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
%   else return -0.09269127618926044;  // std dev = 1.80e-07, 310.000 (wgt'ed) examples reached here.  /* #neg=310 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2564295547316483;  // std dev = 0.025, 202.000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.0884546424132693;  // std dev = 0.243, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
%   else return -0.08518475138839678;  // std dev = 1.13e-07, 339.000 (wgt'ed) examples reached here.  /* #neg=339 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( actor(B) )
%   | | then return -0.07680456309889093;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return -0.24188879932197346;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.21088833479154775;  // std dev = 0.020, 168.000 (wgt'ed) examples reached here.  /* #pos=168 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.20944919325611067;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | | else return -0.07814911334363121;  // std dev = 4.08e-08, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
%   else return -0.07877675473109143;  // std dev = 3.65e-08, 301.000 (wgt'ed) examples reached here.  /* #neg=301 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.17630942198261415;  // std dev = 7.60e-08, 70.000 (wgt'ed) examples reached here.  /* #pos=70 */
%   | | else return 0.17149205652510255;  // std dev = 0.053, 100.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=98 */
%   | else if ( genre(A, E) )
%   | | then return -0.07153263437242448;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( actor(B) )
%   | | | then return -0.07270147429369919;  // std dev = 7.45e-09, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | | | else return 0.17687017814150155;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   else return -0.07324622576333695;  // std dev = 1.01e-07, 291.000 (wgt'ed) examples reached here.  /* #neg=291 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1537187530314426;  // std dev = 0.021, 202.000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else if ( actor(B) )
%   | | then return -0.0678218088690721;  // std dev = 0.003, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
%   | | else return -0.1573894965848684;  // std dev = 0.072, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return -0.068426977844203;  // std dev = 0.000, 299.000 (wgt'ed) examples reached here.  /* #neg=299 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( actor(A) )
%   | | then return 0.13497596490793498;  // std dev = 0.018, 168.000 (wgt'ed) examples reached here.  /* #pos=168 */
%   | | else return -0.20259751851219956;  // std dev = 7.45e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(A, E) )
%   | | then return -0.06281210942062782;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.13374007215531183;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | | else return -0.06401399832351862;  // std dev = 0.014, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
%   else return -0.06419184008202593;  // std dev = 1.22e-07, 306.000 (wgt'ed) examples reached here.  /* #neg=306 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064004
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.716 seconds
Total inference time: 1.723 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064865
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.411 seconds
Refined model CLL: -0.064865


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064004
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 10.955 seconds
Total inference time: 1.723 seconds
AUC ROC: 1.0
Total revision time: 10.955
Best scored revision CLL: -0.064865


Dataset: 4_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 00:23:00
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.064004, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 10.955, 'Inference time': 1.723, 'parameter_0.6': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.128266, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 2.409, 'Inference time': 1.344}}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( genre(B, E) )
%   | | then return 0.858148935099509;  // std dev = 1.07e-06, 224.000 (wgt'ed) examples reached here.  /* #pos=224 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.16016235791830408;  // std dev = 5.604, 149.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=45 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048735;  // std dev = 2.94e-07, 393.000 (wgt'ed) examples reached here.  /* #neg=393 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7083070943597765;  // std dev = 1.454, 227.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=224 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.09465570128256669;  // std dev = 5.782, 175.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=45 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839227;  // std dev = 0.000, 418.000 (wgt'ed) examples reached here.  /* #neg=418 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14320147959076093;  // std dev = 0.167, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( movie(E, A) )
%   | | then return 0.34901572423566085;  // std dev = 0.374, 399.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=269 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360628;  // std dev = 0.000, 387.000 (wgt'ed) examples reached here.  /* #neg=387 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4593624058451697;  // std dev = 1.334, 228.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=224 */
%   | else if ( genre(A, E) )
%   | | then return -0.09881179118239276;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.008483783977746677;  // std dev = 5.846, 187.000 (wgt'ed) examples reached here.  /* #neg=142 #pos=45 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783612;  // std dev = 8.64e-09, 373.000 (wgt'ed) examples reached here.  /* #neg=373 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11474698621010951;  // std dev = 0.258, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( genre(B, E) )
%   | | then return 0.360122117685762;  // std dev = 0.000, 224.000 (wgt'ed) examples reached here.  /* #pos=224 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.07667114051634284;  // std dev = 5.571, 145.000 (wgt'ed) examples reached here.  /* #neg=100 #pos=45 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926079;  // std dev = 1.60e-07, 387.000 (wgt'ed) examples reached here.  /* #neg=387 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2723660367650871;  // std dev = 1.080, 228.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=224 */
%   | else if ( movie(E, A) )
%   | | then return 0.03138408061793506;  // std dev = 0.436, 169.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=45 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.25e-07, 400.000 (wgt'ed) examples reached here.  /* #neg=400 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11310374891395553;  // std dev = 0.311, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( genre(B, E) )
%   | | then return 0.230175179520236;  // std dev = 0.000, 224.000 (wgt'ed) examples reached here.  /* #pos=224 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.0035662872262757846;  // std dev = 5.782, 175.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=45 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109141;  // std dev = 1.25e-07, 407.000 (wgt'ed) examples reached here.  /* #neg=407 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18550245567273388;  // std dev = 0.837, 227.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=224 */
%   | else if ( genre(A, E) )
%   | | then return -0.07545427754031421;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.010453708647186552;  // std dev = 5.752, 170.000 (wgt'ed) examples reached here.  /* #neg=125 #pos=45 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333721;  // std dev = 1.61e-09, 394.000 (wgt'ed) examples reached here.  /* #neg=394 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12698407114978513;  // std dev = 0.406, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( movie(E, B) )
%   | | then return 0.09824136240840566;  // std dev = 5.943, 393.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=269 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420335;  // std dev = 0.000, 396.000 (wgt'ed) examples reached here.  /* #neg=396 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14564954934954744;  // std dev = 0.789, 227.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=224 */
%   | else if ( genre(A, E) )
%   | | then return -0.062490404420218346;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.00594477693308948;  // std dev = 5.734, 167.000 (wgt'ed) examples reached here.  /* #neg=122 #pos=45 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202557;  // std dev = 9.99e-09, 409.000 (wgt'ed) examples reached here.  /* #neg=409 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.131868
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.548 seconds
Total inference time: 1.484 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.979547
   AUC PR    = 0.870647
   CLL	      = -0.130016
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.832714
   F1        = 0.908722


Total scoring time: 3.126 seconds
Parameter learned model CLL: -0.130016


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 16, 0], 'true,false,true': [1.07e-06, 0, 224], 'true,false,false,true': [5.604, 104, 45], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.94e-07, 393, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.454, 3, 224], 'true,false,true': [0.0, 17, 0], 'true,false,false,true': [5.782, 130, 45], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 418, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.167, 11, 0], 'true,false,true': [0.374, 130, 269], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 387, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.334, 4, 224], 'true,false,true': [7.45e-09, 14, 0], 'true,false,false,true': [5.846, 142, 45], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.64e-09, 373, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.258, 16, 0], 'true,false,true': [0.0, 0, 224], 'true,false,false,true': [5.571, 100, 45], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.6e-07, 387, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [1.08, 4, 224], 'true,false,true': [0.436, 124, 45], 'true,false,false': [0.0, 0, 0], 'false,true': [1.25e-07, 400, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.311, 16, 0], 'true,false,true': [0.0, 0, 224], 'true,false,false,true': [5.782, 130, 45], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.25e-07, 407, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.837, 3, 224], 'true,false,true': [0.0, 9, 0], 'true,false,false,true': [5.752, 125, 45], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.61e-09, 394, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.406, 14, 0], 'true,false,true': [5.943, 124, 269], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 396, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.789, 3, 224], 'true,false,true': [0.0, 9, 0], 'true,false,false,true': [5.734, 122, 45], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.99e-09, 409, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.21332134997786517, 2.1921960995143041e-16], 'true': [-6.938893903907228e-18, 0.20107957363310675], 'true,false': [5.075305255429287e-15, 0.21080131525607057], 'true,false,false': [0.21080131525607057, nan], 'false': [2.1921960995143041e-16, nan]}, {'': [0.18613420236294584, -1.2961455407107092e-16], 'true': [0.00930993685839808, 0.1780166853583671], 'true,false': [0.0, 0.19102040816326682], 'true,false,false': [0.19102040816326682, nan], 'false': [-1.2961455407107092e-16, nan]}, {'': [0.142394077454515, -2.2950346762277136e-17], 'true': [0.0025437053021667307, 0.13974946605205998], 'true,false': [0.13974946605205998, nan], 'false': [-2.2950346762277136e-17, nan]}, {'': [0.13646135886649377, 7.500702471998377e-17], 'true': [0.007799672937502173, 0.17075159103043225], 'true,false': [3.96508223080413e-18, 0.18273327804627001], 'true,false,false': [0.18273327804627001, nan], 'false': [7.500702471998377e-17, nan]}, {'': [0.10441369743154832, 6.65560056106037e-17], 'true': [0.004164808663788138, 0.10326974745849885], 'true,false': [-8.564577618536922e-16, 0.2140309155766937], 'true,false,false': [0.2140309155766937, nan], 'false': [6.65560056106037e-17, nan]}, {'': [0.09823708268010027, 3.8857805861880476e-17], 'true': [0.00511187531836793, 0.1905221091820405], 'true,false': [0.1905221091820405, nan], 'false': [3.8857805861880476e-17, nan]}, {'': [0.09514523345071427, 3.8189489790545927e-17], 'true': [0.006038399105986374, 0.09642516272268659], 'true,false': [-4.282288809268461e-16, 0.1910204081632647], 'true,false,false': [0.1910204081632647, nan], 'false': [3.8189489790545927e-17, nan]}, {'': [0.09131071611538918, 2.254259948477475e-18], 'true': [0.0030877767957732407, 0.18520288992996306], 'true,false': [0.0, 0.19463667820069128], 'true,false,false': [0.19463667820069128, nan], 'false': [2.254259948477475e-18, nan]}, {'': [0.08888238623812875, -1.1214373986112693e-16], 'true': [0.011757939285802143, 0.0898849302558242], 'true,false': [0.0898849302558242, nan], 'false': [-1.1214373986112693e-16, nan]}, {'': [0.08905792892270356, 9.935003105447611e-17], 'true': [0.002743653101290949, 0.1869406626962446], 'true,false': [0.0, 0.1968518053712929], 'true,false,false': [0.1968518053712929, nan], 'false': [9.935003105447611e-17, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( genre(B, E) )
%   | | then return 0.858148935099509;  // std dev = 1.07e-06, 224.000 (wgt'ed) examples reached here.  /* #pos=224 */
%   | | else if ( actor(B) )
%   | | | then return -0.14185106490048763;  // std dev = 8.69e-08, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
%   | | | else return 0.858148935099512;  // std dev = 2.23e-07, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.14185106490048724;  // std dev = 2.98e-07, 430.000 (wgt'ed) examples reached here.  /* #neg=430 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109573;  // std dev = 0.000, 224.000 (wgt'ed) examples reached here.  /* #pos=224 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.719473412210955;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.12680500650436197;  // std dev = 0.154, 114.000 (wgt'ed) examples reached here.  /* #neg=114 */
%   else return -0.12544463852839222;  // std dev = 0.000, 371.000 (wgt'ed) examples reached here.  /* #neg=371 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462832;  // std dev = 3.37e-07, 269.000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.12532716170000152;  // std dev = 0.441, 127.000 (wgt'ed) examples reached here.  /* #neg=127 */
%   else return -0.11231637819360638;  // std dev = 0.000, 369.000 (wgt'ed) examples reached here.  /* #neg=369 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.41751358415831014;  // std dev = 1.74e-07, 89.000 (wgt'ed) examples reached here.  /* #pos=89 */
%   | | else return 0.4084076068730813;  // std dev = 0.075, 137.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=135 */
%   | else if ( genre(A, E) )
%   | | then return -0.100414917098109;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.41751358415831047;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.1042400157209122;  // std dev = 0.261, 134.000 (wgt'ed) examples reached here.  /* #neg=134 */
%   else return -0.10159632948783577;  // std dev = 2.58e-07, 425.000 (wgt'ed) examples reached here.  /* #neg=425 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( female(B) )
%   | | then return -0.09170121264404141;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.11273911404439646;  // std dev = 0.060, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( genre(B, E) )
%   | | then return 0.32190938144618475;  // std dev = 0.015, 224.000 (wgt'ed) examples reached here.  /* #pos=224 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.32071184716014944;  // std dev = 2.98e-08, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.09309531364905634;  // std dev = 0.173, 135.000 (wgt'ed) examples reached here.  /* #neg=135 */
%   else return -0.09269127618926057;  // std dev = 1.95e-07, 361.000 (wgt'ed) examples reached here.  /* #neg=361 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25585275127167645;  // std dev = 0.014, 269.000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else if ( actor(B) )
%   | | then return -0.08381887866736072;  // std dev = 0.003, 141.000 (wgt'ed) examples reached here.  /* #neg=141 */
%   | | else return -0.2469068782151262;  // std dev = 0.053, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.08518475138839678;  // std dev = 1.37e-07, 424.000 (wgt'ed) examples reached here.  /* #neg=424 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( actor(B) )
%   | | then return -0.07709118605444508;  // std dev = 0.002, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else return -0.2143429284298468;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.21035767849060025;  // std dev = 0.011, 224.000 (wgt'ed) examples reached here.  /* #pos=224 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.20964493718672364;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.07891866084173947;  // std dev = 0.119, 131.000 (wgt'ed) examples reached here.  /* #neg=131 */
%   else return -0.07877675473109143;  // std dev = 2.21e-07, 392.000 (wgt'ed) examples reached here.  /* #neg=392 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.1767356586184339;  // std dev = 9.88e-08, 89.000 (wgt'ed) examples reached here.  /* #pos=89 */
%   | | else return 0.17283066058161756;  // std dev = 0.043, 137.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=135 */
%   | else if ( genre(A, E) )
%   | | then return -0.07174599930729957;  // std dev = 0.002, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.17701377569247947;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return -0.07340579186591997;  // std dev = 0.112, 128.000 (wgt'ed) examples reached here.  /* #neg=128 */
%   else return -0.07324622576333772;  // std dev = 0.000, 423.000 (wgt'ed) examples reached here.  /* #neg=423 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.1533529770471191;  // std dev = 0.013, 269.000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.06941247827589898;  // std dev = 0.175, 143.000 (wgt'ed) examples reached here.  /* #neg=143 */
%   else return -0.06842697784420337;  // std dev = 0.000, 409.000 (wgt'ed) examples reached here.  /* #neg=409 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.1336909624525619;  // std dev = 7.15e-08, 89.000 (wgt'ed) examples reached here.  /* #pos=89 */
%   | | else return 0.13036622712574253;  // std dev = 0.040, 137.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=135 */
%   | else if ( genre(A, E) )
%   | | then return -0.06310453078261137;  // std dev = 0.003, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else if ( actor(B) )
%   | | | then return -0.06315804433856266;  // std dev = 2.79e-08, 135.000 (wgt'ed) examples reached here.  /* #neg=135 */
%   | | | else return 0.1338801083234567;  // std dev = 3.16e-08, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.06419184008202555;  // std dev = 2.08e-07, 419.000 (wgt'ed) examples reached here.  /* #neg=419 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063969
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 4.178 seconds
Total inference time: 1.476 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.065394
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 3.703 seconds
Refined model CLL: -0.065394


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063969
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 13.555 seconds
Total inference time: 1.476 seconds
AUC ROC: 1.0
Total revision time: 13.555
Best scored revision CLL: -0.065394


Dataset: 4_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 00:23:17
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063969, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 13.555, 'Inference time': 1.476, 'parameter_0.8': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.131868, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 2.548, 'Inference time': 1.484}}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048774;  // std dev = 1.05e-08, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995086;  // std dev = 1.07e-06, 278.000 (wgt'ed) examples reached here.  /* #pos=278 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.11921088200216803;  // std dev = 6.603, 226.000 (wgt'ed) examples reached here.  /* #neg=167 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048735;  // std dev = 2.42e-07, 465.000 (wgt'ed) examples reached here.  /* #neg=465 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7045455314558454;  // std dev = 1.873, 283.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=278 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.11489839599324415;  // std dev = 6.554, 217.000 (wgt'ed) examples reached here.  /* #neg=158 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839233;  // std dev = 0.000, 484.000 (wgt'ed) examples reached here.  /* #neg=484 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14337540347783936;  // std dev = 0.271, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | else if ( movie(E, A) )
%   | | then return 0.3408075802260538;  // std dev = 0.378, 511.000 (wgt'ed) examples reached here.  /* #neg=174 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360599;  // std dev = 0.000, 455.000 (wgt'ed) examples reached here.  /* #neg=455 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.466940653382263;  // std dev = 1.163, 281.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=278 */
%   | else if ( genre(A, E) )
%   | | then return -0.09879630468505357;  // std dev = 1.05e-08, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.04737545530867761;  // std dev = 6.543, 215.000 (wgt'ed) examples reached here.  /* #neg=156 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783527;  // std dev = 1.65e-08, 530.000 (wgt'ed) examples reached here.  /* #neg=530 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09034190339993123;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( genre(B, E) )
%   | | then return 0.36113468037519786;  // std dev = 0.000, 278.000 (wgt'ed) examples reached here.  /* #pos=278 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.023307319218549713;  // std dev = 6.613, 228.000 (wgt'ed) examples reached here.  /* #neg=169 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926155;  // std dev = 0.000, 521.000 (wgt'ed) examples reached here.  /* #neg=521 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2747928307779038;  // std dev = 1.094, 282.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=278 */
%   | else if ( movie(E, A) )
%   | | then return -2.989431254189404E-4;  // std dev = 0.421, 253.000 (wgt'ed) examples reached here.  /* #neg=194 #pos=59 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.49e-07, 492.000 (wgt'ed) examples reached here.  /* #neg=492 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11165694176623389;  // std dev = 0.322, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( genre(B, E) )
%   | | then return 0.23034393028009814;  // std dev = 0.000, 278.000 (wgt'ed) examples reached here.  /* #pos=278 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.018010139503107217;  // std dev = 6.618, 229.000 (wgt'ed) examples reached here.  /* #neg=170 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109204;  // std dev = 1.37e-07, 494.000 (wgt'ed) examples reached here.  /* #neg=494 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18678718711432496;  // std dev = 0.850, 281.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=278 */
%   | else if ( genre(A, E) )
%   | | then return -0.07503750053365399;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.042095402897828205;  // std dev = 6.495, 207.000 (wgt'ed) examples reached here.  /* #neg=148 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333698;  // std dev = 6.32e-09, 488.000 (wgt'ed) examples reached here.  /* #neg=488 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1304504616056299;  // std dev = 0.480, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else if ( movie(E, B) )
%   | | then return 0.11661955476267429;  // std dev = 6.548, 475.000 (wgt'ed) examples reached here.  /* #neg=138 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420348;  // std dev = 0.000, 457.000 (wgt'ed) examples reached here.  /* #neg=457 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1443585253989201;  // std dev = 0.797, 281.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=278 */
%   | else if ( genre(A, E) )
%   | | then return -0.06196293020079769;  // std dev = 2.63e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.008719937884365326;  // std dev = 6.587, 223.000 (wgt'ed) examples reached here.  /* #neg=164 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202536;  // std dev = 1.08e-08, 513.000 (wgt'ed) examples reached here.  /* #neg=513 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.130875
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.972 seconds
Total inference time: 1.517 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.978805
   AUC PR    = 0.865091
   CLL	      = -0.129023
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.824926
   F1        = 0.904065


Total scoring time: 3.306 seconds
Parameter learned model CLL: -0.129023


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [1.05e-08, 22, 0], 'true,false,true': [1.07e-06, 0, 278], 'true,false,false,true': [6.603, 167, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.42e-07, 465, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.873, 5, 278], 'true,false,true': [0.0, 17, 0], 'true,false,false,true': [6.554, 158, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 484, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.271, 29, 0], 'true,false,true': [0.378, 174, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 455, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.163, 3, 278], 'true,false,true': [1.05e-08, 18, 0], 'true,false,false,true': [6.543, 156, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.65e-08, 530, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 16, 0], 'true,false,true': [0.0, 0, 278], 'true,false,false,true': [6.613, 169, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 521, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [1.094, 4, 278], 'true,false,true': [0.421, 194, 59], 'true,false,false': [0.0, 0, 0], 'false,true': [1.49e-07, 492, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.322, 17, 0], 'true,false,true': [0.0, 0, 278], 'true,false,false,true': [6.618, 170, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.37e-07, 494, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.85, 3, 278], 'true,false,true': [0.0, 16, 0], 'true,false,false,true': [6.495, 148, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [6.32e-09, 488, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.48, 18, 0], 'true,false,true': [6.548, 138, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 457, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.797, 3, 278], 'true,false,true': [2.63e-09, 12, 0], 'true,false,false,true': [6.587, 164, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.08e-08, 513, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.2302078966010811, 1.2606403376388874e-16], 'true': [5.046468293750712e-18, 0.22155690980096004], 'true,false': [4.089454594302735e-15, 0.1929086067820509], 'true,false,false': [0.1929086067820509, nan], 'false': [1.2606403376388874e-16, nan]}, {'': [0.1829527968977992, -1.3579587408638277e-16], 'true': [0.012389994285435506, 0.18747514761958908], 'true,false': [0.0, 0.1979655545881196], 'true,false,false': [0.1979655545881196, nan], 'false': [-1.3579587408638277e-16, nan]}, {'': [0.14741904096486122, -9.760202414287091e-18], 'true': [0.0025322405104673865, 0.14305165048779686], 'true,false': [0.14305165048779686, nan], 'false': [-9.760202414287091e-18, nan]}, {'': [0.13261308078250306, 2.731567592662649e-16], 'true': [0.004813064945283905, 0.18525400305208464], 'true,false': [6.1679056923619804e-18, 0.1991130340724725], 'true,false,false': [0.1991130340724725, nan], 'false': [2.731567592662649e-16, nan]}, {'': [0.11382667382692287, -4.261892608925745e-17], 'true': [-6.938893903907228e-18, 0.11468101843015562], 'true,false': [-9.968045573612915e-16, 0.19180901815943524], 'true,false,false': [0.19180901815943524, nan], 'false': [-4.261892608925745e-17, nan]}, {'': [0.10473710893928458, 4.5131017261185224e-17], 'true': [0.004241375455241534, 0.17686335639472284], 'true,false': [0.17686335639472284, nan], 'false': [4.5131017261185224e-17, nan]}, {'': [0.09648859330596185, 3.7756572497373744e-17], 'true': [0.006088669224196778, 0.09755493752756951], 'true,false': [-2.81150003358313e-16, 0.19126256173604644], 'true,false,false': [0.19126256173604644, nan], 'false': [3.7756572497373744e-17, nan]}, {'': [0.09131741058714628, 3.913081152367355e-17], 'true': [0.00257119184192139, 0.19007778611657306], 'true,false': [0.0, 0.20378538588998327], 'true,false,false': [0.20378538588998327, nan], 'false': [3.913081152367355e-17, nan]}, {'': [0.08959413315339175, -1.2438384871073963e-16], 'true': [0.012793026775278986, 0.09027571871098741], 'true,false': [0.09027571871098741, nan], 'false': [-1.2438384871073963e-16, nan]}, {'': [0.0914029662780622, 1.1773125251385675e-16], 'true': [0.002260535464810498, 0.18477623508526023], 'true,false': [5.782411586589357e-19, 0.19457459430111368], 'true,false,false': [0.19457459430111368, nan], 'false': [1.1773125251385675e-16, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995086;  // std dev = 1.07e-06, 278.000 (wgt'ed) examples reached here.  /* #pos=278 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.8581489350995125;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.14185106490048813;  // std dev = 0.000, 155.000 (wgt'ed) examples reached here.  /* #neg=155 */
%   else return -0.14185106490048782;  // std dev = 0.000, 508.000 (wgt'ed) examples reached here.  /* #neg=508 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109551;  // std dev = 0.000, 111.000 (wgt'ed) examples reached here.  /* #pos=111 */
%   | | else return 0.7144441380994128;  // std dev = 0.065, 168.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=167 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( actor(B) )
%   | | | then return -0.12544463852839136;  // std dev = 3.65e-08, 158.000 (wgt'ed) examples reached here.  /* #neg=158 */
%   | | | else return 0.6917711810391725;  // std dev = 1.175, 61.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=59 */
%   else return -0.12544463852839227;  // std dev = 0.000, 492.000 (wgt'ed) examples reached here.  /* #neg=492 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5571773959066387;  // std dev = 0.044, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.11758107903248227;  // std dev = 0.295, 152.000 (wgt'ed) examples reached here.  /* #neg=152 */
%   else return -0.11231637819360579;  // std dev = 0.000, 509.000 (wgt'ed) examples reached here.  /* #neg=509 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4178080564142976;  // std dev = 0.010, 278.000 (wgt'ed) examples reached here.  /* #pos=278 */
%   | else if ( genre(A, E) )
%   | | then return -0.10111680337262262;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.4238233608912489;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.10191275034581064;  // std dev = 0.101, 128.000 (wgt'ed) examples reached here.  /* #neg=128 */
%   else return -0.10159632948783552;  // std dev = 3.18e-07, 471.000 (wgt'ed) examples reached here.  /* #neg=471 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( actor(B) )
%   | | then return -0.09228962848749937;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else return -0.2834971917024968;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.32091161843147337;  // std dev = 0.009, 278.000 (wgt'ed) examples reached here.  /* #pos=278 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.3249926807288509;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.09452077656009496;  // std dev = 0.187, 165.000 (wgt'ed) examples reached here.  /* #neg=165 */
%   else return -0.09269127618926119;  // std dev = 7.30e-08, 448.000 (wgt'ed) examples reached here.  /* #neg=448 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25579577597577907;  // std dev = 0.021, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.08901558401139648;  // std dev = 0.301, 180.000 (wgt'ed) examples reached here.  /* #neg=180 */
%   else return -0.08518475138839678;  // std dev = 1.49e-07, 525.000 (wgt'ed) examples reached here.  /* #neg=525 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( actor(B) )
%   | | then return -0.0781826894741983;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else return -0.21421673535637484;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.2097733318066609;  // std dev = 0.007, 278.000 (wgt'ed) examples reached here.  /* #pos=278 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.21220095199379316;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.07850904314290805;  // std dev = 0.082, 152.000 (wgt'ed) examples reached here.  /* #neg=152 */
%   else return -0.07877675473109227;  // std dev = 0.000, 539.000 (wgt'ed) examples reached here.  /* #neg=539 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.17666781536565562;  // std dev = 2.98e-08, 111.000 (wgt'ed) examples reached here.  /* #pos=111 */
%   | | else return 0.171087121184612;  // std dev = 0.047, 170.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=167 */
%   | else if ( genre(A, E) )
%   | | then return -0.072730630119237;  // std dev = 6.45e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.17888643210746594;  // std dev = 2.98e-08, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.07296559791186553;  // std dev = 0.078, 169.000 (wgt'ed) examples reached here.  /* #neg=169 */
%   else return -0.07324622576333692;  // std dev = 1.52e-07, 498.000 (wgt'ed) examples reached here.  /* #neg=498 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.15339475868372815;  // std dev = 0.013, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06901607007845763;  // std dev = 0.126, 178.000 (wgt'ed) examples reached here.  /* #neg=178 */
%   else return -0.06842697784420357;  // std dev = 0.000, 514.000 (wgt'ed) examples reached here.  /* #neg=514 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.13363997790749427;  // std dev = 1.12e-07, 111.000 (wgt'ed) examples reached here.  /* #pos=111 */
%   | | else if ( actor(A) )
%   | | | then return 0.134873185576087;  // std dev = 5.58e-08, 167.000 (wgt'ed) examples reached here.  /* #pos=167 */
%   | | | else return -0.19594425286631292;  // std dev = 5.27e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(A, E) )
%   | | then return -0.06373121122659976;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.13514758475725674;  // std dev = 3.33e-08, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.06489127309841233;  // std dev = 0.119, 152.000 (wgt'ed) examples reached here.  /* #neg=152 */
%   else return -0.06419184008202537;  // std dev = 2.44e-07, 497.000 (wgt'ed) examples reached here.  /* #neg=497 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.06391
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 4.751 seconds
Total inference time: 1.584 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064815
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 3.262 seconds
Refined model CLL: -0.064815


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.06391
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 14.291 seconds
Total inference time: 1.584 seconds
AUC ROC: 1.0
Total revision time: 14.291
Best scored revision CLL: -0.064815


Dataset: 4_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 00:23:35
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.06391, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 14.291, 'Inference time': 1.584, 'parameter_1.0': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.130875, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 2.972, 'Inference time': 1.517}}


Starting fold 5

Target train facts examples: 915
Target train pos examples: 337
Target train neg examples: 12165

Target test facts examples: 163
Target test pos	 examples: 45
Target test neg examples: 2071

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995124;  // std dev = 0.000, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.07554023944733845;  // std dev = 2.798, 46.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048763;  // std dev = 8.69e-08, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7049058596120001;  // std dev = 0.838, 58.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=57 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.07597511749717845;  // std dev = 2.780, 44.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1348467354619709;  // std dev = 0.101, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( movie(E, A) )
%   | | then return 0.35966216347046354;  // std dev = 0.364, 98.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360618;  // std dev = 9.06e-08, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.45777834689392827;  // std dev = 0.666, 58.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=57 */
%   | else if ( genre(A, E) )
%   | | then return -0.09955826231229832;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.0696621006594883;  // std dev = 2.673, 35.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783631;  // std dev = 0.000, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13002161295733825;  // std dev = 0.175, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.3588186319387163;  // std dev = 0.000, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.03507365269905435;  // std dev = 2.714, 38.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0926912761892609;  // std dev = 6.05e-08, 107.000 (wgt'ed) examples reached here.  /* #neg=107 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.26268602650700434;  // std dev = 0.753, 59.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=57 */
%   | else if ( movie(E, A) )
%   | | then return 0.005381008072668895;  // std dev = 0.420, 43.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.0851847513883968;  // std dev = 6.32e-08, 117.000 (wgt'ed) examples reached here.  /* #neg=117 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08118596892137175;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.23111962519418935;  // std dev = 0.000, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.05042929436072109;  // std dev = 2.673, 35.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109161;  // std dev = 5.16e-08, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18417475331779387;  // std dev = 0.485, 58.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=57 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return 0.12589104933870765;  // std dev = 2.509, 27.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333707;  // std dev = 0.000, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07533217190168806;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( movie(E, B) )
%   | | then return 0.07549671107092647;  // std dev = 2.965, 101.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420265;  // std dev = 4.66e-09, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13163782284631784;  // std dev = 0.803, 60.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=57 */
%   | else if ( genre(A, E) )
%   | | then return -0.0702497372829039;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.02894363664344993;  // std dev = 2.622, 32.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.971565
   AUC PR    = 0.823063
   CLL	      = -0.139248
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.875


Total learning time: 1.582 seconds
Total inference time: 1.716 seconds
AUC ROC: 0.971565


Results scoring model
   AUC ROC   = 0.98175
   AUC PR    = 0.886117
   CLL	      = -0.134715
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.850746
   F1        = 0.919355


Total scoring time: 1.643 seconds
Parameter learned model CLL: -0.134715


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 4, 0], 'true,false,true': [0.0, 0, 57], 'true,false,false,true': [2.798, 36, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.69e-08, 95, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.838, 1, 57], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [2.78, 34, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 99, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.101, 5, 0], 'true,false,true': [0.364, 31, 67], 'true,false,false': [0.0, 0, 0], 'false,true': [9.06e-08, 116, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.666, 1, 57], 'true,false,true': [1.86e-09, 3, 0], 'true,false,false,true': [2.673, 25, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 108, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.175, 5, 0], 'true,false,true': [0.0, 0, 57], 'true,false,false,true': [2.714, 28, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [6.05e-08, 107, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.753, 2, 57], 'true,false,true': [0.42, 33, 10], 'true,false,false': [0.0, 0, 0], 'false,true': [6.32e-08, 117, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 3, 0], 'true,false,true': [0.0, 0, 57], 'true,false,false,true': [2.673, 25, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.16e-08, 90, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.485, 1, 57], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [2.509, 17, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 91, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 4, 0], 'true,false,true': [2.965, 34, 67], 'true,false,false': [0.0, 0, 0], 'false,true': [4.66e-09, 95, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.803, 3, 57], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [2.622, 22, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 87, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.23408157917722003, 7.946859544685331e-17], 'true': [0.0, 0.2273541332830608], 'true,false': [-3.739698609263685e-16, 0.170132325141777], 'true,false,false': [0.170132325141777, nan], 'false': [7.946859544685331e-17, nan]}, {'': [0.18092187433459161, -1.1214373986112692e-17], 'true': [0.012096174557227859, 0.17259869092564878], 'true,false': [0.0, 0.17561983471074402], 'true,false,false': [0.17561983471074402, nan], 'false': [-1.1214373986112692e-17, nan]}, {'': [0.13734043204801374, 7.082457226057034e-17], 'true': [0.0020304679945605834, 0.1323731739181424], 'true,false': [0.1323731739181424, nan], 'false': [7.082457226057034e-17, nan]}, {'': [0.11839435259062824, -2.05596856412066e-18], 'true': [0.007644625805142036, 0.19005214834433767], 'true,false': [1.1564823173178713e-18, 0.20408163265306148], 'true,false,false': [0.20408163265306148, nan], 'false': [-2.05596856412066e-18, nan]}, {'': [0.10401941621093931, 3.4240523189373984e-17], 'true': [0.0060963006862577275, 0.1027169216496994], 'true,false': [-2.49313240617579e-16, 0.19390581717451516], 'true,false,false': [0.19390581717451516, nan], 'false': [3.4240523189373984e-17, nan]}, {'': [0.09597683431836156, 3.416070845000482e-17], 'true': [0.009599644026090664, 0.1761988207791979], 'true,false': [0.1761988207791979, nan], 'false': [3.416070845000482e-17, nan]}, {'': [0.08445468073472559, 2.960594732333751e-17], 'true': [-1.1564823173178713e-18, 0.08533525560940303], 'true,false': [-7.011934892369409e-17, 0.20408163265306142], 'true,false,false': [0.20408163265306142, nan], 'false': [2.960594732333751e-17, nan]}, {'': [0.07757983339233182, -7.93016446160826e-18], 'true': [0.004058706795184589, 0.23319615912208477], 'true,false': [nan, 0.23319615912208477], 'true,false,false': [0.23319615912208477, nan], 'false': [-7.93016446160826e-18, nan]}, {'': [0.08453846236262788, 2.162013258480568e-17], 'true': [0.0, 0.08701987829935978], 'true,false': [0.08701987829935978, nan], 'false': [2.162013258480568e-17, nan]}, {'': [0.08290773589210704, -1.2761184191093753e-17], 'true': [0.01073643670098231, 0.20275062009305966], 'true,false': [0.0, 0.2148437499999998], 'true,false,false': [0.2148437499999998, nan], 'false': [-1.2761184191093753e-17, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995124;  // std dev = 0.000, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   | | else if ( actor(B) )
%   | | | then return -0.14185106490048768;  // std dev = 4.08e-08, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | | | else return 0.7672398441904213;  // std dev = 0.953, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   else return -0.14185106490048766;  // std dev = 7.88e-08, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109543;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else return 0.69306972312535;  // std dev = 0.147, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( actor(B) )
%   | | | then return -0.12544463852839144;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | | | else return 0.7374506595744975;  // std dev = 2.98e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.12544463852839138;  // std dev = 0.000, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( director(B), actor(A) )
%   | | then return 0.56105454453803;  // std dev = 0.049, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | | else if ( female(A) )
%   | | | then return -0.11231637819360636;  // std dev = 1.05e-08, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return -0.12886312219546311;  // std dev = 0.306, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else return -0.11231637819360618;  // std dev = 8.82e-08, 114.000 (wgt'ed) examples reached here.  /* #neg=114 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.4161309116121927;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else return 0.4029780379013954;  // std dev = 0.109, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.43395197618607073;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.10954828683491562;  // std dev = 0.290, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   else return -0.10159632948783628;  // std dev = 3.33e-08, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926094;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.32448711931746094;  // std dev = 0.033, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   | | else if ( actor(B) )
%   | | | then return -0.09123240524953372;  // std dev = 0.003, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | | else return 0.33187940482552003;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.09269127618926097;  // std dev = 4.59e-08, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.08396931785526057;  // std dev = 0.004, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | else return 0.2585018962091502;  // std dev = 0.032, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   else return -0.08518475138839682;  // std dev = 5.05e-08, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1176663516149451;  // std dev = 0.213, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.21145594524299205;  // std dev = 0.025, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   | | else if ( actor(B) )
%   | | | then return -0.07767197261056617;  // std dev = 0.003, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | | else return 0.21583955371006874;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.07877675473109165;  // std dev = 4.28e-08, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.17882080039629866;  // std dev = 0.024, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else if ( actor(A) )
%   | | then return -0.07232841854124926;  // std dev = 0.004, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.17886724240336663;  // std dev = 0.216, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.07324622576333707;  // std dev = 0.000, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10783793581315305;  // std dev = 0.166, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( actor(B) )
%   | | then return -0.06754096627827144;  // std dev = 0.003, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | | else return 0.15405191359704237;  // std dev = 0.021, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   else return -0.06842697784420265;  // std dev = 5.05e-08, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.1321449274344366;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else return 0.11439539092273512;  // std dev = 0.088, 33.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=31 */
%   | else if ( genre(A, E) )
%   | | then return -0.05405202649021654;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( actor(B) )
%   | | | then return -0.06344784886631423;  // std dev = 0.003, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | | else return 0.1371943897762795;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.06419184008202626;  // std dev = 0.000, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064038
   Precision = 0.978261 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.989011


Total learning time: 2.801 seconds
Total inference time: 1.47 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.067568
   Precision = 0.893333 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.943662


Total scoring time: 1.531 seconds
Refined model CLL: -0.067568


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064038
   Precision = 0.978261 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.989011


Total learning time: 7.5569999999999995 seconds
Total inference time: 1.47 seconds
AUC ROC: 1.0
Total revision time: 7.5569999999999995
Best scored revision CLL: -0.067568


Dataset: 4_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 00:23:47
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.064038, 'Precision': [0.978261, 0.5], 'Recall': 1.0, 'F1': 0.989011, 'Learning time': 7.5569999999999995, 'Inference time': 1.47, 'parameter_0.2': {'AUC ROC': 0.971565, 'AUC PR': 0.823063, 'CLL': -0.139248, 'Precision': [1.0, 0.5], 'Recall': 0.777778, 'F1': 0.875, 'Learning time': 1.582, 'Inference time': 1.716}}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995107;  // std dev = 6.31e-07, 117.000 (wgt'ed) examples reached here.  /* #pos=117 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.08481560176617904;  // std dev = 3.626, 75.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=17 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048832;  // std dev = 0.000, 187.000 (wgt'ed) examples reached here.  /* #neg=187 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.6915422369799024;  // std dev = 1.662, 121.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=117 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.0772372457515668;  // std dev = 3.619, 74.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=17 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839147;  // std dev = 0.000, 170.000 (wgt'ed) examples reached here.  /* #neg=170 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14240646154410477;  // std dev = 0.163, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( movie(E, A) )
%   | | then return 0.38765898386399367;  // std dev = 0.348, 185.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=134 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360668;  // std dev = 0.000, 207.000 (wgt'ed) examples reached here.  /* #neg=207 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4600833666992128;  // std dev = 0.662, 118.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=117 */
%   | else if ( genre(A, E) )
%   | | then return -0.09888260854979232;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.010226452884577863;  // std dev = 3.611, 73.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=17 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783652;  // std dev = 0.000, 198.000 (wgt'ed) examples reached here.  /* #neg=198 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1096121245029916;  // std dev = 0.182, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( genre(B, E) )
%   | | then return 0.35493108260445877;  // std dev = 0.000, 117.000 (wgt'ed) examples reached here.  /* #pos=117 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.05095585564179537;  // std dev = 3.748, 98.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=17 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926058;  // std dev = 8.94e-08, 190.000 (wgt'ed) examples reached here.  /* #neg=190 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2693485754533459;  // std dev = 0.756, 119.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=117 */
%   | else if ( movie(E, A) )
%   | | then return 0.02600902877759611;  // std dev = 0.422, 72.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 7.45e-08, 193.000 (wgt'ed) examples reached here.  /* #neg=193 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13534429519394853;  // std dev = 0.289, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( genre(B, E) )
%   | | then return 0.22763510312209712;  // std dev = 1.23e-07, 117.000 (wgt'ed) examples reached here.  /* #pos=117 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.022744238311181306;  // std dev = 3.588, 70.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=17 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109146;  // std dev = 7.15e-08, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.19010188603199754;  // std dev = 8.43e-08, 117.000 (wgt'ed) examples reached here.  /* #pos=117 */
%   | else if ( genre(A, E) )
%   | | then return -0.07395047082946883;  // std dev = 3.73e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.016725023565039875;  // std dev = 3.671, 82.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=17 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333671;  // std dev = 7.68e-09, 178.000 (wgt'ed) examples reached here.  /* #neg=178 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14667109276194673;  // std dev = 0.375, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( movie(E, B) )
%   | | then return 0.08830944879914554;  // std dev = 3.882, 200.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=134 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420262;  // std dev = 5.74e-09, 193.000 (wgt'ed) examples reached here.  /* #neg=193 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14708445848953616;  // std dev = 0.445, 118.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=117 */
%   | else if ( genre(A, E) )
%   | | then return -0.06019100540891243;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.015952894146153692;  // std dev = 3.640, 77.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=17 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202626;  // std dev = 9.31e-10, 229.000 (wgt'ed) examples reached here.  /* #neg=229 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.971565
   AUC PR    = 0.823063
   CLL	      = -0.121223
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.875


Total learning time: 2.105 seconds
Total inference time: 1.72 seconds
AUC ROC: 0.971565


Results scoring model
   AUC ROC   = 0.984592
   AUC PR    = 0.903083
   CLL	      = -0.116683
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.873134
   F1        = 0.932271


Total scoring time: 2.012 seconds
Parameter learned model CLL: -0.116683


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 7, 0], 'true,false,true': [6.31e-07, 0, 117], 'true,false,false,true': [3.626, 58, 17], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 187, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.662, 4, 117], 'true,false,true': [0.0, 5, 0], 'true,false,false,true': [3.619, 57, 17], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 170, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.163, 11, 0], 'true,false,true': [0.348, 51, 134], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 207, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.662, 1, 117], 'true,false,true': [0.0, 7, 0], 'true,false,false,true': [3.611, 56, 17], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 198, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.182, 10, 0], 'true,false,true': [0.0, 0, 117], 'true,false,false,true': [3.748, 81, 17], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.94e-08, 190, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.756, 2, 117], 'true,false,true': [0.422, 55, 17], 'true,false,false': [0.0, 0, 0], 'false,true': [7.45e-08, 193, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.289, 9, 0], 'true,false,true': [1.23e-07, 0, 117], 'true,false,false,true': [3.588, 53, 17], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.15e-08, 206, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [8.43e-08, 0, 117], 'true,false,true': [3.73e-09, 7, 0], 'true,false,false,true': [3.671, 65, 17], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.68e-09, 178, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.375, 10, 0], 'true,false,true': [3.882, 66, 134], 'true,false,false': [0.0, 0, 0], 'false,true': [5.74e-09, 193, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.445, 1, 117], 'true,false,true': [0.0, 6, 0], 'true,false,false,true': [3.64, 60, 17], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.31e-10, 229, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.21994394080958, -2.1610758340297165e-16], 'true': [-7.93016446160826e-18, 0.21082899305556013], 'true,false': [3.4008883079115908e-15, 0.17528888888888836], 'true,false,false': [0.17528888888888836, nan], 'false': [-2.1610758340297165e-16, nan]}, {'': [0.17422856219800878, -5.224578939412501e-18], 'true': [0.02281940358129146, 0.16818980180622073], 'true,false': [0.0, 0.17695398100803497], 'true,false,false': [0.17695398100803497, nan], 'false': [-5.224578939412501e-18, nan]}, {'': [0.1295752166063112, -3.8616453030440226e-17], 'true': [0.0024144349761065272, 0.1213674384537682], 'true,false': [0.1213674384537682, nan], 'false': [-3.8616453030440226e-17, nan]}, {'': [0.11928022511443602, -9.195786668612408e-17], 'true': [0.0037124567794192395, 0.16396422149009085], 'true,false': [-1.982541115402065e-18, 0.1786451491837121], 'true,false,false': [0.1786451491837121, nan], 'false': [-9.195786668612408e-17, nan]}, {'': [0.10496312118063442, 4.207160935421646e-17], 'true': [0.003316951158391465, 0.10621798725964107], 'true,false': [-2.429205934222565e-16, 0.14337775926697213], 'true,false,false': [0.14337775926697213, nan], 'false': [4.207160935421646e-17, nan]}, {'': [0.08416642101387736, 2.8762254523967783e-17], 'true': [0.004802901949850013, 0.17844410544733036], 'true,false': [0.17844410544733036, nan], 'false': [2.8762254523967783e-17, nan]}, {'': [0.07906919999262452, 2.4791387928522914e-17], 'true': [0.009309550068099375, 0.07866325961144566], 'true,false': [1.2905156525557376e-16, 0.18387755102040834], 'true,false,false': [0.18387755102040834, nan], 'false': [2.4791387928522914e-17, nan]}, {'': [0.07647669613590152, 5.98771968337163e-17], 'true': [6.073014835556412e-17, 0.15164865242195058], 'true,false': [1.982541115402065e-18, 0.16433670434265316], 'true,false,false': [0.16433670434265316, nan], 'false': [5.98771968337163e-17, nan]}, {'': [0.07494292029714639, 3.2788970157323275e-17], 'true': [0.014060926259935264, 0.07535769357460956], 'true,false': [0.07535769357460956, nan], 'false': [3.2788970157323275e-17, nan]}, {'': [0.07364408531170646, 1.4544406436137421e-18], 'true': [0.0016805242941763392, 0.15973068055247794], 'true,false': [-5.782411586589357e-19, 0.17203575645134098], 'true,false,false': [0.17203575645134098, nan], 'false': [1.4544406436137421e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995107;  // std dev = 6.31e-07, 117.000 (wgt'ed) examples reached here.  /* #pos=117 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.14185106490048766;  // std dev = 7.30e-08, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
%   else return -0.1418510649004884;  // std dev = 0.000, 200.000 (wgt'ed) examples reached here.  /* #neg=200 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.719473412210955;  // std dev = 0.000, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | else return 0.6956729037394233;  // std dev = 0.140, 71.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=69 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.7194734122109542;  // std dev = 7.30e-08, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.1254446385283916;  // std dev = 0.000, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   else return -0.12544463852839174;  // std dev = 0.000, 217.000 (wgt'ed) examples reached here.  /* #neg=217 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1246548271163446;  // std dev = 0.105, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( actor(B) )
%   | | then return -0.11231637819360632;  // std dev = 2.79e-08, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | | else return 0.5583886145537003;  // std dev = 0.034, 134.000 (wgt'ed) examples reached here.  /* #pos=134 */
%   else return -0.1123163781936067;  // std dev = 0.000, 216.000 (wgt'ed) examples reached here.  /* #neg=216 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.41677878636684834;  // std dev = 1.74e-07, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | else return 0.41364584728163817;  // std dev = 0.074, 70.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=69 */
%   | else if ( genre(A, E) )
%   | | then return -0.10047566658373984;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.4167787863668486;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.10484141069263155;  // std dev = 0.110, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   else return -0.10159632948783655;  // std dev = 0.000, 216.000 (wgt'ed) examples reached here.  /* #neg=216 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( female(B) )
%   | | then return -0.09175216557317366;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.13817455653466962;  // std dev = 0.161, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.3236878879288802;  // std dev = 0.031, 117.000 (wgt'ed) examples reached here.  /* #pos=117 */
%   | | else if ( actor(B) )
%   | | | then return -0.092418726628113;  // std dev = 3.65e-08, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | | | else return 0.3202137327463372;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else return -0.09269127618926051;  // std dev = 6.50e-08, 213.000 (wgt'ed) examples reached here.  /* #neg=213 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.2569032369319375;  // std dev = 0.029, 134.000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.0914066756677624;  // std dev = 0.263, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   else return -0.08518475138839678;  // std dev = 8.16e-08, 216.000 (wgt'ed) examples reached here.  /* #neg=216 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07498128151459225;  // std dev = 0.003, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.21124346546346104;  // std dev = 0.024, 117.000 (wgt'ed) examples reached here.  /* #pos=117 */
%   | | else if ( actor(B) )
%   | | | then return -0.07811208297791071;  // std dev = 0.000, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   | | | else return 0.20917479558323213;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else return -0.07877675473109144;  // std dev = 7.74e-08, 199.000 (wgt'ed) examples reached here.  /* #neg=199 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.17586403728055422;  // std dev = 0.000, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | else return 0.16852082323495013;  // std dev = 0.066, 71.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=69 */
%   | else if ( genre(A, E) )
%   | | then return -0.07020560921329436;  // std dev = 0.005, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( actor(B) )
%   | | | then return -0.07266931715321015;  // std dev = 2.11e-08, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   | | | else return 0.1766688353588482;  // std dev = 1.83e-08, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else return -0.07324622576333671;  // std dev = 1.00e-07, 175.000 (wgt'ed) examples reached here.  /* #neg=175 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.1541856664145593;  // std dev = 0.025, 134.000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else if ( actor(B) )
%   | | then return -0.06774656930527281;  // std dev = 0.006, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
%   | | else return -0.2555377769315047;  // std dev = 0.016, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.06842697784420261;  // std dev = 6.05e-08, 186.000 (wgt'ed) examples reached here.  /* #neg=186 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.13300182265179863;  // std dev = 1.49e-08, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | else return 0.127340178148702;  // std dev = 0.057, 71.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=69 */
%   | else if ( genre(A, E) )
%   | | then return -0.06210484823360315;  // std dev = 0.004, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( actor(B) )
%   | | | then return -0.06375635605650046;  // std dev = 2.36e-08, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   | | | else return 0.09613356267885927;  // std dev = 0.475, 19.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   else return -0.06419184008202626;  // std dev = 0.000, 188.000 (wgt'ed) examples reached here.  /* #neg=188 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063917
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.322 seconds
Total inference time: 1.525 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.0658
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.893 seconds
Refined model CLL: -0.0658


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063917
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 9.332 seconds
Total inference time: 1.525 seconds
AUC ROC: 1.0
Total revision time: 9.332
Best scored revision CLL: -0.0658


Dataset: 4_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 00:24:00
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063917, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 9.332, 'Inference time': 1.525, 'parameter_0.4': {'AUC ROC': 0.971565, 'AUC PR': 0.823063, 'CLL': -0.121223, 'Precision': [1.0, 0.5], 'Recall': 0.777778, 'F1': 0.875, 'Learning time': 2.105, 'Inference time': 1.72}}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995095;  // std dev = 1.08e-06, 175.000 (wgt'ed) examples reached here.  /* #pos=175 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.09293154379516366;  // std dev = 4.545, 115.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=27 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048766;  // std dev = 1.88e-07, 331.000 (wgt'ed) examples reached here.  /* #neg=331 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7146727414681194;  // std dev = 0.843, 176.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=175 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.06245566281297143;  // std dev = 4.601, 125.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=27 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839208;  // std dev = 0.000, 287.000 (wgt'ed) examples reached here.  /* #neg=287 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.15390157399975987;  // std dev = 0.182, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( movie(E, A) )
%   | | then return 0.3593842886275799;  // std dev = 0.359, 293.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=202 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360658;  // std dev = 0.000, 336.000 (wgt'ed) examples reached here.  /* #neg=336 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.44844567133037444;  // std dev = 1.472, 180.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=175 */
%   | else if ( genre(A, E) )
%   | | then return -0.09786305070883451;  // std dev = 6.45e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.007359205247324511;  // std dev = 4.620, 129.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=27 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783663;  // std dev = 0.000, 290.000 (wgt'ed) examples reached here.  /* #neg=290 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11366089033310975;  // std dev = 0.255, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( genre(B, E) )
%   | | then return 0.3587826658965695;  // std dev = 0.000, 175.000 (wgt'ed) examples reached here.  /* #pos=175 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.025656292453271636;  // std dev = 4.527, 112.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=27 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926046;  // std dev = 1.55e-07, 280.000 (wgt'ed) examples reached here.  /* #neg=280 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2810146250198499;  // std dev = 0.000, 175.000 (wgt'ed) examples reached here.  /* #pos=175 */
%   | else if ( movie(E, A) )
%   | | then return 0.005382519527059943;  // std dev = 0.412, 123.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=27 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.03e-07, 290.000 (wgt'ed) examples reached here.  /* #neg=290 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13483644380173893;  // std dev = 0.465, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else if ( genre(B, E) )
%   | | then return 0.22785745733152615;  // std dev = 0.000, 175.000 (wgt'ed) examples reached here.  /* #pos=175 */
%   | | else if ( movie(F, A) )
%   | | | then return 6.041021219621285E-4;  // std dev = 4.585, 122.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=27 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109143;  // std dev = 4.21e-08, 291.000 (wgt'ed) examples reached here.  /* #neg=291 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1821844504433553;  // std dev = 0.823, 178.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=175 */
%   | else if ( genre(A, E) )
%   | | then return -0.07161279437944638;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.008002265579484512;  // std dev = 4.563, 118.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=27 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333699;  // std dev = 5.43e-09, 303.000 (wgt'ed) examples reached here.  /* #neg=303 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1042600234035121;  // std dev = 0.242, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( movie(E, B) )
%   | | then return 0.08880225309200614;  // std dev = 4.865, 304.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=202 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420301;  // std dev = 0.000, 301.000 (wgt'ed) examples reached here.  /* #neg=301 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14679545329413804;  // std dev = 0.643, 177.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=175 */
%   | else if ( genre(A, E) )
%   | | then return -0.060765216207780866;  // std dev = 4.56e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.025317364190699305;  // std dev = 4.611, 127.000 (wgt'ed) examples reached here.  /* #neg=100 #pos=27 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202589;  // std dev = 7.39e-09, 314.000 (wgt'ed) examples reached here.  /* #neg=314 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.971565
   AUC PR    = 0.823063
   CLL	      = -0.121111
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.875


Total learning time: 2.342 seconds
Total inference time: 1.596 seconds
AUC ROC: 0.971565


Results scoring model
   AUC ROC   = 0.983555
   AUC PR    = 0.897549
   CLL	      = -0.117567
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.866337
   F1        = 0.928382


Total scoring time: 2.678 seconds
Parameter learned model CLL: -0.117567


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 11, 0], 'true,false,true': [1.08e-06, 0, 175], 'true,false,false,true': [4.545, 88, 27], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.88e-07, 331, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.843, 1, 175], 'true,false,true': [5.27e-09, 12, 0], 'true,false,false,true': [4.601, 98, 27], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 287, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.182, 11, 0], 'true,false,true': [0.359, 91, 202], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 336, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.472, 5, 175], 'true,false,true': [6.45e-09, 12, 0], 'true,false,false,true': [4.62, 102, 27], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 290, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.255, 16, 0], 'true,false,true': [0.0, 0, 175], 'true,false,false,true': [4.527, 85, 27], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.55e-07, 280, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 175], 'true,false,true': [0.412, 96, 27], 'true,false,false': [0.0, 0, 0], 'false,true': [1.03e-07, 290, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.465, 22, 0], 'true,false,true': [0.0, 0, 175], 'true,false,false,true': [4.585, 95, 27], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.21e-08, 291, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.823, 3, 175], 'true,false,true': [0.0, 19, 0], 'true,false,false,true': [4.563, 91, 27], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.43e-09, 303, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.242, 7, 0], 'true,false,true': [4.865, 102, 202], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 301, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.643, 2, 175], 'true,false,true': [4.56e-09, 13, 0], 'true,false,false,true': [4.611, 100, 27], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.39e-09, 314, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.22072604055143352, 1.0733273954080064e-16], 'true': [-1.0092936587501423e-17, 0.2113674197384115], 'true,false': [6.658800495123225e-15, 0.17965973534971752], 'true,false,false': [0.17965973534971752, nan], 'false': [1.0733273954080064e-16, nan]}, {'': [0.181178546093963, -1.0521974310036327e-16], 'true': [0.004033126926695148, 0.15733261147990132], 'true,false': [2.3129646346357427e-18, 0.16934400000000022], 'true,false,false': [0.16934400000000022, nan], 'false': [-1.0521974310036327e-16, nan]}, {'': [0.1333586272276996, -3.700743415417188e-17], 'true': [0.0030263248929132376, 0.12871847071013906], 'true,false': [0.12871847071013906, nan], 'false': [-3.700743415417188e-17, nan]}, {'': [0.12645843491932124, -5.3596973602593766e-17], 'true': [0.012044748417368625, 0.1520479669527032], 'true,false': [3.469446951953614e-18, 0.16549486208761502], 'true,false,false': [0.16549486208761502, nan], 'false': [-5.3596973602593766e-17, nan]}, {'': [0.09871947061359886, 8.564577618536922e-17], 'true': [0.004067101788459345, 0.09780392916505304], 'true,false': [-2.6391587328232294e-16, 0.18295599489795802], 'true,false,false': [0.18295599489795802, nan], 'false': [8.564577618536922e-17, nan]}, {'': [0.08841716861414366, 3.675221047035001e-17], 'true': [-1.0150610510858574e-17, 0.16959890263642938], 'true,false': [0.16959890263642938, nan], 'false': [3.675221047035001e-17, nan]}, {'': [0.08288055959952664, 6.104319035739692e-18], 'true': [0.009813620183456901, 0.08328973852817263], 'true,false': [-2.334640417497472e-16, 0.17233270626175884], 'true,false,false': [0.17233270626175884, nan], 'false': [6.104319035739692e-18, nan]}, {'': [0.07701356190910498, 3.004563961031777e-17], 'true': [0.0038063953614808034, 0.15274280412345878], 'true,false': [-4.382459307730881e-18, 0.17645791439241484], 'true,false,false': [0.17645791439241484, nan], 'false': [3.004563961031777e-17, nan]}, {'': [0.07710465503726245, -5.0162900780405746e-17], 'true': [0.008331962314685287, 0.07784929369642928], 'true,false': [0.07784929369642928, nan], 'false': [-5.0162900780405746e-17, nan]}, {'': [0.07600364155056674, 5.445042859626564e-17], 'true': [0.0023358731085875643, 0.1519618631202529], 'true,false': [1.6012832085939759e-18, 0.16740033480066996], 'true,false,false': [0.16740033480066996, nan], 'false': [5.445042859626564e-17, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995095;  // std dev = 1.08e-06, 175.000 (wgt'ed) examples reached here.  /* #pos=175 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.8581489350995118;  // std dev = 1.58e-07, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return -0.14185106490048766;  // std dev = 7.60e-08, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
%   else return -0.1418510649004877;  // std dev = 1.58e-07, 319.000 (wgt'ed) examples reached here.  /* #neg=319 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109545;  // std dev = 1.19e-07, 66.000 (wgt'ed) examples reached here.  /* #pos=66 */
%   | | else return 0.7042496635489848;  // std dev = 0.112, 111.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=109 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return -0.12544463852839136;  // std dev = 0.000, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
%   else return -0.12544463852839202;  // std dev = 0.000, 313.000 (wgt'ed) examples reached here.  /* #neg=313 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5573932060565372;  // std dev = 0.027, 202.000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.11344175213653278;  // std dev = 0.112, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
%   else return -0.11231637819360689;  // std dev = 0.000, 295.000 (wgt'ed) examples reached here.  /* #neg=295 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.41577760064659813;  // std dev = 0.624, 176.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=175 */
%   | else if ( genre(A, E) )
%   | | then return -0.10149365757074835;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.4170207645457105;  // std dev = 2.98e-08, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return -0.10149365757074842;  // std dev = 1.49e-08, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
%   else return -0.10159632948783663;  // std dev = 0.000, 311.000 (wgt'ed) examples reached here.  /* #neg=311 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.0926053031744034;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( genre(B, E) )
%   | | then return 0.3227196571268249;  // std dev = 0.021, 175.000 (wgt'ed) examples reached here.  /* #pos=175 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.3203777593316602;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return -0.09260530317440348;  // std dev = 0.000, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
%   else return -0.09269127618926044;  // std dev = 1.33e-07, 277.000 (wgt'ed) examples reached here.  /* #neg=277 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( actor(A) )
%   | | then return 0.25654248628170384;  // std dev = 0.019, 175.000 (wgt'ed) examples reached here.  /* #pos=175 */
%   | | else return -0.26349709130451987;  // std dev = 7.45e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( actor(B) )
%   | | then return -0.08511178203909091;  // std dev = 3.49e-08, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
%   | | else return 0.25494426457756886;  // std dev = 4.47e-08, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   else return -0.08518475138839678;  // std dev = 9.77e-08, 274.000 (wgt'ed) examples reached here.  /* #neg=274 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( actor(B) )
%   | | then return -0.07871409365022439;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.21562136154630304;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.21072558354784252;  // std dev = 0.016, 175.000 (wgt'ed) examples reached here.  /* #pos=175 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.20959666217119585;  // std dev = 1.49e-08, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return -0.07903036361163912;  // std dev = 0.028, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
%   else return -0.07877675473109144;  // std dev = 4.47e-08, 279.000 (wgt'ed) examples reached here.  /* #neg=279 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.17642178633773206;  // std dev = 0.000, 66.000 (wgt'ed) examples reached here.  /* #pos=66 */
%   | | else if ( actor(A) )
%   | | | then return 0.17864466058323494;  // std dev = 1.25e-07, 109.000 (wgt'ed) examples reached here.  /* #pos=109 */
%   | | | else return -0.18138540609307588;  // std dev = 5.27e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(A, E) )
%   | | then return -0.07319186480478425;  // std dev = 3.73e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( actor(B) )
%   | | | then return -0.07317041358603601;  // std dev = 4.47e-08, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
%   | | | else return 0.17697836366647068;  // std dev = 1.49e-08, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   else return -0.07324622576333696;  // std dev = 9.88e-08, 296.000 (wgt'ed) examples reached here.  /* #neg=296 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.15319776696717635;  // std dev = 0.011, 202.000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.07071795206814514;  // std dev = 0.131, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
%   else return -0.06842697784420297;  // std dev = 0.000, 293.000 (wgt'ed) examples reached here.  /* #neg=293 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.13349539575036568;  // std dev = 0.000, 66.000 (wgt'ed) examples reached here.  /* #pos=66 */
%   | | else return 0.12992697477652682;  // std dev = 0.037, 111.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=109 */
%   | else if ( genre(A, E) )
%   | | then return -0.06400960233844777;  // std dev = 3.73e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( actor(B) )
%   | | | then return -0.06399194131816895;  // std dev = 3.49e-08, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
%   | | | else return 0.1338740232833877;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   else return -0.06419184008202604;  // std dev = 9.77e-08, 284.000 (wgt'ed) examples reached here.  /* #neg=284 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063821
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 4.085 seconds
Total inference time: 1.623 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064954
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.438 seconds
Refined model CLL: -0.064954


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063821
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 11.543000000000001 seconds
Total inference time: 1.623 seconds
AUC ROC: 1.0
Total revision time: 11.543000000000001
Best scored revision CLL: -0.064954


Dataset: 4_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 00:24:15
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063821, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 11.543000000000001, 'Inference time': 1.623, 'parameter_0.6': {'AUC ROC': 0.971565, 'AUC PR': 0.823063, 'CLL': -0.121111, 'Precision': [1.0, 0.5], 'Recall': 0.777778, 'F1': 0.875, 'Learning time': 2.342, 'Inference time': 1.596}}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( genre(B, E) )
%   | | then return 0.858148935099509;  // std dev = 1.07e-06, 231.000 (wgt'ed) examples reached here.  /* #pos=231 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.10814893509951096;  // std dev = 5.339, 152.000 (wgt'ed) examples reached here.  /* #neg=114 #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048732;  // std dev = 3.01e-07, 402.000 (wgt'ed) examples reached here.  /* #neg=402 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7122208967539672;  // std dev = 1.190, 233.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=231 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.07903533907032434;  // std dev = 5.393, 162.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839224;  // std dev = 0.000, 394.000 (wgt'ed) examples reached here.  /* #neg=394 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1194369896508512;  // std dev = 0.110, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( movie(E, A) )
%   | | then return 0.3491158320228417;  // std dev = 0.366, 398.000 (wgt'ed) examples reached here.  /* #neg=129 #pos=269 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360636;  // std dev = 0.000, 370.000 (wgt'ed) examples reached here.  /* #neg=370 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.450276219668604;  // std dev = 1.763, 238.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=231 */
%   | else if ( genre(A, E) )
%   | | then return -0.10094824041608048;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.01279120067239915;  // std dev = 5.398, 163.000 (wgt'ed) examples reached here.  /* #neg=125 #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783592;  // std dev = 1.10e-08, 399.000 (wgt'ed) examples reached here.  /* #neg=399 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13439494075439143;  // std dev = 0.303, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( genre(B, E) )
%   | | then return 0.36129177079574465;  // std dev = 0.000, 231.000 (wgt'ed) examples reached here.  /* #pos=231 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.01645083136093319;  // std dev = 5.378, 159.000 (wgt'ed) examples reached here.  /* #neg=121 #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926065;  // std dev = 1.85e-07, 370.000 (wgt'ed) examples reached here.  /* #neg=370 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2827109997851803;  // std dev = 0.000, 231.000 (wgt'ed) examples reached here.  /* #pos=231 */
%   | else if ( movie(E, A) )
%   | | then return -0.010270083452452899;  // std dev = 0.399, 186.000 (wgt'ed) examples reached here.  /* #neg=148 #pos=38 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.37e-07, 428.000 (wgt'ed) examples reached here.  /* #neg=428 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1407338424911132;  // std dev = 0.416, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( genre(B, E) )
%   | | then return 0.2290356167014953;  // std dev = 2.11e-07, 231.000 (wgt'ed) examples reached here.  /* #pos=231 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.006471233627092134;  // std dev = 5.454, 175.000 (wgt'ed) examples reached here.  /* #neg=137 #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109143;  // std dev = 2.16e-07, 378.000 (wgt'ed) examples reached here.  /* #neg=378 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.19111208510116237;  // std dev = 2.27e-07, 231.000 (wgt'ed) examples reached here.  /* #pos=231 */
%   | else if ( genre(A, E) )
%   | | then return -0.07089118284741844;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.0023594467504865434;  // std dev = 5.427, 169.000 (wgt'ed) examples reached here.  /* #neg=131 #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333772;  // std dev = 0.000, 425.000 (wgt'ed) examples reached here.  /* #neg=425 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10428003905021048;  // std dev = 0.348, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( movie(E, B) )
%   | | then return 0.09275977695739199;  // std dev = 5.683, 403.000 (wgt'ed) examples reached here.  /* #neg=134 #pos=269 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420333;  // std dev = 0.000, 392.000 (wgt'ed) examples reached here.  /* #neg=392 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14903053941115382;  // std dev = 0.459, 232.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=231 */
%   | else if ( genre(A, E) )
%   | | then return -0.060185501909453785;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.006251472915596503;  // std dev = 5.398, 163.000 (wgt'ed) examples reached here.  /* #neg=125 #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202562;  // std dev = 9.63e-09, 391.000 (wgt'ed) examples reached here.  /* #neg=391 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.971565
   AUC PR    = 0.823063
   CLL	      = -0.122579
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.875


Total learning time: 2.986 seconds
Total inference time: 1.575 seconds
AUC ROC: 0.971565


Results scoring model
   AUC ROC   = 0.982785
   AUC PR    = 0.891837
   CLL	      = -0.118755
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.858736
   F1        = 0.924


Total scoring time: 2.975 seconds
Parameter learned model CLL: -0.118755


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 17, 0], 'true,false,true': [1.07e-06, 0, 231], 'true,false,false,true': [5.339, 114, 38], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.01e-07, 402, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.19, 2, 231], 'true,false,true': [0.0, 17, 0], 'true,false,false,true': [5.393, 124, 38], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 394, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.11, 16, 0], 'true,false,true': [0.366, 129, 269], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 370, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.763, 7, 231], 'true,false,true': [0.0, 12, 0], 'true,false,false,true': [5.398, 125, 38], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.1e-08, 399, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.303, 14, 0], 'true,false,true': [0.0, 0, 231], 'true,false,false,true': [5.378, 121, 38], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.85e-07, 370, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 231], 'true,false,true': [0.399, 148, 38], 'true,false,false': [0.0, 0, 0], 'false,true': [1.37e-07, 428, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.416, 16, 0], 'true,false,true': [2.11e-07, 0, 231], 'true,false,false,true': [5.454, 137, 38], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.16e-07, 378, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [2.27e-07, 0, 231], 'true,false,true': [0.0, 11, 0], 'true,false,false,true': [5.427, 131, 38], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 425, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.348, 14, 0], 'true,false,true': [5.683, 134, 269], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 392, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.459, 1, 231], 'true,false,true': [0.0, 14, 0], 'true,false,false,true': [5.398, 125, 38], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.63e-09, 391, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.2202437500000035, 2.2535870350600193e-16], 'true': [-3.2653618371328133e-18, 0.2090545303328847], 'true,false': [4.921508126476884e-15, 0.18750000000000128], 'true,false,false': [0.18750000000000128, nan], 'false': [2.2535870350600193e-16, nan]}, {'': [0.1802396109499351, -1.2623855711473862e-16], 'true': [0.006075182242419034, 0.16608781100633818], 'true,false': [0.0, 0.17954580094497902], 'true,false,false': [0.17954580094497902, nan], 'false': [-1.2623855711473862e-16, nan]}, {'': [0.13664181578033768, -2.6405304369463184e-17], 'true': [0.0007605466128757198, 0.13361967417854853], 'true,false': [0.13361967417854853, nan], 'false': [-2.6405304369463184e-17, nan]}, {'': [0.12684747803573312, 1.2020459815490416e-16], 'true': [0.013052380704935801, 0.16734685255156748], 'true,false': [-3.469446951953614e-18, 0.17877978094772012], 'true,false,false': [0.17877978094772012, nan], 'false': [1.2020459815490416e-16, nan]}, {'': [0.10374524450541356, 9.241856529312114e-17], 'true': [0.006544165853117278, 0.10286490656348632], 'true,false': [-9.227827737144157e-16, 0.18187571694157773], 'true,false,false': [0.18187571694157773, nan], 'false': [9.241856529312114e-17, nan]}, {'': [0.09238817209503042, 4.357884769556689e-17], 'true': [-4.306319610667274e-16, 0.15957782155872882], 'true,false': [0.15957782155872882, nan], 'false': [4.357884769556689e-17, nan]}, {'': [0.08661498465170986, 1.2335811384723962e-16], 'true': [0.010798079288723759, 0.08687441480988534], 'true,false': [1.922464111905033e-16, 0.1699918367346931], 'true,false,false': [0.1699918367346931, nan], 'false': [1.2335811384723962e-16, nan]}, {'': [0.08099364861742138, -7.105427357601002e-17], 'true': [2.230058369809838e-16, 0.1639502032862539], 'true,false': [-1.261617073437678e-18, 0.17429361717026598], 'true,false,false': [0.17429361717026598, nan], 'false': [-7.105427357601002e-17, nan]}, {'': [0.07900122682612001, -1.0988942182514304e-16], 'true': [0.00862685792385744, 0.08014252720393746], 'true,false': [0.08014252720393746, nan], 'false': [-1.0988942182514304e-16, nan]}, {'': [0.07810550968961272, 9.256590947002584e-17], 'true': [0.0009085476464492016, 0.1648508896901936], 'true,false': [-4.956352788505163e-19, 0.17877978094772132], 'true,false,false': [0.17877978094772132, nan], 'false': [9.256590947002584e-17, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( genre(B, E) )
%   | | then return 0.858148935099509;  // std dev = 1.07e-06, 231.000 (wgt'ed) examples reached here.  /* #pos=231 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.8581489350995115;  // std dev = 2.60e-07, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 126.000 (wgt'ed) examples reached here.  /* #neg=126 */
%   else return -0.14185106490048743;  // std dev = 2.72e-07, 377.000 (wgt'ed) examples reached here.  /* #neg=377 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109573;  // std dev = 0.000, 231.000 (wgt'ed) examples reached here.  /* #pos=231 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 7.45e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.719473412210955;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return -0.1254446385283911;  // std dev = 8.16e-08, 132.000 (wgt'ed) examples reached here.  /* #neg=132 */
%   else return -0.12544463852839227;  // std dev = 0.000, 419.000 (wgt'ed) examples reached here.  /* #neg=419 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1326461288452064;  // std dev = 0.181, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( director(B) )
%   | | then return 0.5553664367462832;  // std dev = 3.58e-07, 269.000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | | else return -0.11231637819360621;  // std dev = 8.82e-08, 118.000 (wgt'ed) examples reached here.  /* #neg=118 */
%   else return -0.11231637819360614;  // std dev = 0.000, 416.000 (wgt'ed) examples reached here.  /* #neg=416 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.40691675279286826;  // std dev = 0.081, 235.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=231 */
%   | else if ( genre(A, E) )
%   | | then return -0.09975571272222415;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.4175135841583106;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return -0.10347863240267956;  // std dev = 0.135, 126.000 (wgt'ed) examples reached here.  /* #neg=126 */
%   else return -0.10159632948783626;  // std dev = 1.23e-07, 355.000 (wgt'ed) examples reached here.  /* #neg=355 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( female(B) )
%   | | then return -0.09114801330524419;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.11204997550307866;  // std dev = 0.059, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( genre(B, E) )
%   | | then return 0.32302480059695887;  // std dev = 0.000, 231.000 (wgt'ed) examples reached here.  /* #pos=231 */
%   | | else if ( actor(B) )
%   | | | then return -0.09253309658003415;  // std dev = 0.000, 126.000 (wgt'ed) examples reached here.  /* #neg=126 */
%   | | | else return 0.3207118471601495;  // std dev = 9.66e-08, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   else return -0.09269127618926089;  // std dev = 1.46e-07, 400.000 (wgt'ed) examples reached here.  /* #neg=400 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.2567498617675619;  // std dev = 8.43e-08, 79.000 (wgt'ed) examples reached here.  /* #pos=79 */
%   | | else return 0.24680090730511783;  // std dev = 0.071, 155.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=152 */
%   | else if ( actor(B) )
%   | | then return -0.0848317668891107;  // std dev = 0.009, 157.000 (wgt'ed) examples reached here.  /* #neg=157 */
%   | | else return 0.2551722425694897;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   else return -0.08518475138839678;  // std dev = 1.25e-07, 399.000 (wgt'ed) examples reached here.  /* #neg=399 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( female(B) )
%   | | then return -0.077580977825891;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.14212046441750922;  // std dev = 0.104, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(B, E) )
%   | | then return 0.2119640066657869;  // std dev = 0.012, 231.000 (wgt'ed) examples reached here.  /* #pos=231 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.209757715632536;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return -0.08378400879235431;  // std dev = 0.360, 143.000 (wgt'ed) examples reached here.  /* #neg=143 */
%   else return -0.07877675473109141;  // std dev = 9.88e-08, 375.000 (wgt'ed) examples reached here.  /* #neg=375 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.17775324619833419;  // std dev = 9.42e-08, 79.000 (wgt'ed) examples reached here.  /* #pos=79 */
%   | | else if ( actor(A) )
%   | | | then return 0.1792120206557615;  // std dev = 1.84e-07, 152.000 (wgt'ed) examples reached here.  /* #pos=152 */
%   | | | else return -0.27778477609917673;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(A, E) )
%   | | then return -0.06787155689878195;  // std dev = 0.008, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.1770964977452775;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return -0.07553228468381445;  // std dev = 0.242, 127.000 (wgt'ed) examples reached here.  /* #neg=127 */
%   else return -0.07324622576333722;  // std dev = 0.000, 404.000 (wgt'ed) examples reached here.  /* #neg=404 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1537958745553657;  // std dev = 0.011, 269.000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.07090983449373257;  // std dev = 0.275, 137.000 (wgt'ed) examples reached here.  /* #neg=137 */
%   else return -0.06842697784420333;  // std dev = 0.000, 393.000 (wgt'ed) examples reached here.  /* #neg=393 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.133481018043699;  // std dev = 0.348, 232.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=231 */
%   | else if ( genre(A, E) )
%   | | then return -0.06069326645387363;  // std dev = 0.010, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.1338849913960004;  // std dev = 2.11e-08, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return -0.0659405618630843;  // std dev = 0.219, 129.000 (wgt'ed) examples reached here.  /* #neg=129 */
%   else return -0.06419184008202568;  // std dev = 1.76e-07, 370.000 (wgt'ed) examples reached here.  /* #neg=370 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063768
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 4.091 seconds
Total inference time: 1.813 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.065523
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 3.761 seconds
Refined model CLL: -0.065523


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063768
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 13.812999999999999 seconds
Total inference time: 1.813 seconds
AUC ROC: 1.0
Total revision time: 13.812999999999999
Best scored revision CLL: -0.065523


Dataset: 4_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 00:24:33
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063768, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 13.812999999999999, 'Inference time': 1.813, 'parameter_0.8': {'AUC ROC': 0.971565, 'AUC PR': 0.823063, 'CLL': -0.122579, 'Precision': [1.0, 0.5], 'Recall': 0.777778, 'F1': 0.875, 'Learning time': 2.986, 'Inference time': 1.575}}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 7.45e-09, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995085;  // std dev = 1.08e-06, 288.000 (wgt'ed) examples reached here.  /* #pos=288 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.08819588345631965;  // std dev = 6.142, 213.000 (wgt'ed) examples reached here.  /* #neg=164 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 504.000 (wgt'ed) examples reached here.  /* #neg=504 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7165498203398873;  // std dev = 0.843, 289.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=288 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.08378511588568861;  // std dev = 6.116, 207.000 (wgt'ed) examples reached here.  /* #neg=158 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1254446385283923;  // std dev = 0.000, 501.000 (wgt'ed) examples reached here.  /* #neg=501 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11996227803202575;  // std dev = 0.111, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( movie(E, A) )
%   | | then return 0.36898492129306965;  // std dev = 0.358, 481.000 (wgt'ed) examples reached here.  /* #neg=144 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360576;  // std dev = 0.000, 516.000 (wgt'ed) examples reached here.  /* #neg=516 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.45269388283340284;  // std dev = 1.487, 293.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=288 */
%   | else if ( genre(A, E) )
%   | | then return -0.10090057644664088;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.027590749574661007;  // std dev = 6.067, 197.000 (wgt'ed) examples reached here.  /* #neg=148 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783542;  // std dev = 1.54e-08, 491.000 (wgt'ed) examples reached here.  /* #neg=491 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.16844357963025594;  // std dev = 0.348, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( genre(B, E) )
%   | | then return 0.35517288765943894;  // std dev = 4.21e-07, 288.000 (wgt'ed) examples reached here.  /* #pos=288 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.0041180392556483675;  // std dev = 6.142, 213.000 (wgt'ed) examples reached here.  /* #neg=164 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926154;  // std dev = 0.000, 519.000 (wgt'ed) examples reached here.  /* #neg=519 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.274878714567055;  // std dev = 0.755, 290.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=288 */
%   | else if ( movie(E, A) )
%   | | then return -0.014671395297073793;  // std dev = 0.398, 243.000 (wgt'ed) examples reached here.  /* #neg=194 #pos=49 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.44e-07, 501.000 (wgt'ed) examples reached here.  /* #neg=501 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11316209338463376;  // std dev = 0.375, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else if ( genre(B, E) )
%   | | then return 0.22680701694749647;  // std dev = 0.000, 288.000 (wgt'ed) examples reached here.  /* #pos=288 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.02214253087862306;  // std dev = 6.077, 199.000 (wgt'ed) examples reached here.  /* #neg=150 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109197;  // std dev = 0.000, 482.000 (wgt'ed) examples reached here.  /* #neg=482 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1895040145481635;  // std dev = 3.26e-07, 288.000 (wgt'ed) examples reached here.  /* #pos=288 */
%   | else if ( genre(A, E) )
%   | | then return -0.07014685929287287;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.009212117610815607;  // std dev = 6.187, 224.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333688;  // std dev = 7.33e-09, 507.000 (wgt'ed) examples reached here.  /* #neg=507 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11598094903628746;  // std dev = 0.475, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else if ( movie(E, B) )
%   | | then return 0.09220952983362485;  // std dev = 6.419, 505.000 (wgt'ed) examples reached here.  /* #neg=168 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420354;  // std dev = 0.000, 493.000 (wgt'ed) examples reached here.  /* #neg=493 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14838290314111835;  // std dev = 0.454, 289.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=288 */
%   | else if ( genre(A, E) )
%   | | then return -0.058935756303351565;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.014990957401991592;  // std dev = 6.151, 215.000 (wgt'ed) examples reached here.  /* #neg=166 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202539;  // std dev = 1.10e-08, 495.000 (wgt'ed) examples reached here.  /* #neg=495 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.971565
   AUC PR    = 0.823063
   CLL	      = -0.123122
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.875


Total learning time: 3.076 seconds
Total inference time: 1.531 seconds
AUC ROC: 0.971565


Results scoring model
   AUC ROC   = 0.982257
   AUC PR    = 0.888508
   CLL	      = -0.119403
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.854599
   F1        = 0.9216


Total scoring time: 3.47 seconds
Parameter learned model CLL: -0.119403


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [7.45e-09, 20, 0], 'true,false,true': [1.08e-06, 0, 288], 'true,false,false,true': [6.142, 164, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 504, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.843, 1, 288], 'true,false,true': [5.27e-09, 12, 0], 'true,false,false,true': [6.116, 158, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 501, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.111, 15, 0], 'true,false,true': [0.358, 144, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 516, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.487, 5, 288], 'true,false,true': [0.0, 20, 0], 'true,false,false,true': [6.067, 148, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.54e-08, 491, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.348, 13, 0], 'true,false,true': [4.21e-07, 0, 288], 'true,false,false,true': [6.142, 164, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 519, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.755, 2, 288], 'true,false,true': [0.398, 194, 49], 'true,false,false': [0.0, 0, 0], 'false,true': [1.44e-07, 501, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.375, 20, 0], 'true,false,true': [0.0, 0, 288], 'true,false,false,true': [6.077, 150, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 482, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [3.26e-07, 0, 288], 'true,false,true': [0.0, 13, 0], 'true,false,false,true': [6.187, 175, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.33e-09, 507, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.475, 21, 0], 'true,false,true': [6.419, 168, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 493, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.454, 1, 288], 'true,false,true': [0.0, 14, 0], 'true,false,false,true': [6.151, 166, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.1e-08, 495, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.22844006616539395, -4.5818728000403283e-17], 'true': [2.7755575615628915e-18, 0.2201903578073421], 'true,false': [4.046146134189459e-15, 0.17712534990852885], 'true,false,false': [0.17712534990852885, nan], 'false': [-4.5818728000403283e-17, nan]}, {'': [0.17778957323878414, -1.2586959640460856e-16], 'true': [0.0024616481554289157, 0.17304797410585931], 'true,false': [2.3129646346357427e-18, 0.1806809960559149], 'true,false,false': [0.1806809960559149, nan], 'false': [-1.2586959640460856e-16, nan]}, {'': [0.13140445170896353, -6.885104028683141e-18], 'true': [0.0008184369807479922, 0.12824686037656405], 'true,false': [0.12824686037656405, nan], 'false': [-6.885104028683141e-18, nan]}, {'': [0.12377500515782837, 2.3515925572508406e-16], 'true': [0.007547375455436782, 0.17102281078428933], 'true,false': [-1.3877787807814458e-18, 0.1868638717823179], 'true,false,false': [0.1868638717823179, nan], 'false': [2.3515925572508406e-16, nan]}, {'': [0.10644862990476936, -4.278316087187501e-17], 'true': [0.00932328959666871, 0.10542420849682173], 'true,false': [6.167905692361981e-16, 0.17712534990852938], 'true,false,false': [0.17712534990852938, nan], 'false': [-4.278316087187501e-17, nan]}, {'': [0.09400812043419225, 4.1661063598708467e-17], 'true': [0.0019654044658828575, 0.1582372259984804], 'true,false': [0.1582372259984804, nan], 'false': [4.1661063598708467e-17, nan]}, {'': [0.0853401373978897, -2.6719060343675967e-17], 'true': [0.00704733466696032, 0.08596336494956945], 'true,false': [-2.4054832200211723e-16, 0.18560137370268295], 'true,false,false': [0.18560137370268295, nan], 'false': [-2.6719060343675967e-17, nan]}, {'': [0.08311415932308329, 5.3430851678212664e-17], 'true': [3.7007434154171886e-16, 0.1617167588967228], 'true,false': [-3.2025664171879517e-18, 0.17089843749999828], 'true,false,false': [0.17089843749999828, nan], 'false': [5.3430851678212664e-17, nan]}, {'': [0.08043363240356874, -1.2070578928987504e-16], 'true': [0.010741691068388057, 0.08160127817925236], 'true,false': [0.08160127817925236, nan], 'false': [-1.2070578928987504e-16, nan]}, {'': [0.08028374771280322, 1.2111523905001707e-16], 'true': [0.0007122870867084818, 0.16531852103236966], 'true,false': [-4.956352788505163e-19, 0.1759653866955123], 'true,false,false': [0.1759653866955123, nan], 'false': [1.2111523905001707e-16, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 7.45e-09, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995085;  // std dev = 1.08e-06, 288.000 (wgt'ed) examples reached here.  /* #pos=288 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.8581489350995122;  // std dev = 1.69e-07, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.1418510649004882;  // std dev = 0.000, 169.000 (wgt'ed) examples reached here.  /* #neg=169 */
%   else return -0.14185106490048793;  // std dev = 0.000, 520.000 (wgt'ed) examples reached here.  /* #neg=520 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109548;  // std dev = 0.000, 105.000 (wgt'ed) examples reached here.  /* #pos=105 */
%   | | else if ( actor(A) )
%   | | | then return 0.7194734122109567;  // std dev = 0.000, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.7194734122109547;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.12544463852839147;  // std dev = 0.000, 176.000 (wgt'ed) examples reached here.  /* #neg=176 */
%   else return -0.1254446385283923;  // std dev = 0.000, 511.000 (wgt'ed) examples reached here.  /* #neg=511 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360635;  // std dev = 1.39e-08, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( director(B), actor(A) )
%   | | then return 0.5553664367462833;  // std dev = 5.20e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | | else return -0.11231637819360615;  // std dev = 1.04e-07, 147.000 (wgt'ed) examples reached here.  /* #neg=147 */
%   else return -0.11231637819360582;  // std dev = 0.000, 496.000 (wgt'ed) examples reached here.  /* #neg=496 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.4175135841583117;  // std dev = 0.000, 105.000 (wgt'ed) examples reached here.  /* #pos=105 */
%   | | else return 0.4064096287862026;  // std dev = 0.075, 187.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=183 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783634;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( actor(B) )
%   | | | then return -0.10159632948783649;  // std dev = 0.000, 167.000 (wgt'ed) examples reached here.  /* #neg=167 */
%   | | | else return 0.3875649352941097;  // std dev = 0.873, 52.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=49 */
%   else return -0.10159632948783544;  // std dev = 3.38e-07, 489.000 (wgt'ed) examples reached here.  /* #neg=489 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1058045882854218;  // std dev = 0.102, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else if ( genre(B, E) )
%   | | then return 0.3222520089349732;  // std dev = 0.020, 288.000 (wgt'ed) examples reached here.  /* #pos=288 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.32727106181194;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.09425785883049588;  // std dev = 0.110, 160.000 (wgt'ed) examples reached here.  /* #neg=160 */
%   else return -0.0926912761892614;  // std dev = 0.000, 489.000 (wgt'ed) examples reached here.  /* #neg=489 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.25487817926851253;  // std dev = 0.388, 289.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=288 */
%   | else if ( actor(A), director(B) )
%   | | then return 0.25964302125589883;  // std dev = 2.11e-08, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | else return -0.08525160302413659;  // std dev = 0.047, 171.000 (wgt'ed) examples reached here.  /* #neg=171 */
%   else return -0.08518475138839678;  // std dev = 1.48e-07, 522.000 (wgt'ed) examples reached here.  /* #neg=522 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08803857371987248;  // std dev = 0.115, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( genre(B, E) )
%   | | then return 0.21072369959384493;  // std dev = 0.015, 288.000 (wgt'ed) examples reached here.  /* #pos=288 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.21291088089516405;  // std dev = 6.66e-08, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.07920626481327289;  // std dev = 0.061, 159.000 (wgt'ed) examples reached here.  /* #neg=159 */
%   else return -0.07877675473109186;  // std dev = 0.000, 466.000 (wgt'ed) examples reached here.  /* #neg=466 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.17677435384493975;  // std dev = 0.000, 105.000 (wgt'ed) examples reached here.  /* #pos=105 */
%   | | else if ( actor(A) )
%   | | | then return 0.17839606275308048;  // std dev = 2.00e-07, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | | else return -0.15288280070507887;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(A, E) )
%   | | then return -0.07173735080862464;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.17940576313322434;  // std dev = 4.94e-08, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.07388725023716675;  // std dev = 0.070, 157.000 (wgt'ed) examples reached here.  /* #neg=157 */
%   else return -0.07324622576333686;  // std dev = 1.70e-07, 510.000 (wgt'ed) examples reached here.  /* #neg=510 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.1534570458410254;  // std dev = 0.013, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06901163319831413;  // std dev = 0.100, 196.000 (wgt'ed) examples reached here.  /* #neg=196 */
%   else return -0.06842697784420354;  // std dev = 0.000, 494.000 (wgt'ed) examples reached here.  /* #neg=494 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13260755858912834;  // std dev = 0.368, 290.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=288 */
%   | else if ( genre(A, E) )
%   | | then return -0.06291129903448377;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( actor(B) )
%   | | | then return -0.06399457122906509;  // std dev = 5.67e-08, 155.000 (wgt'ed) examples reached here.  /* #neg=155 */
%   | | | else return 0.13077648032966555;  // std dev = 0.233, 50.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=49 */
%   else return -0.06419184008202537;  // std dev = 2.46e-07, 496.000 (wgt'ed) examples reached here.  /* #neg=496 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063782
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 4.65 seconds
Total inference time: 1.554 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064754
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 3.085 seconds
Refined model CLL: -0.064754


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063782
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 14.281000000000002 seconds
Total inference time: 1.554 seconds
AUC ROC: 1.0
Total revision time: 14.281000000000002
Best scored revision CLL: -0.064754


Dataset: 4_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 00:24:51
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063782, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 14.281000000000002, 'Inference time': 1.554, 'parameter_1.0': {'AUC ROC': 0.971565, 'AUC PR': 0.823063, 'CLL': -0.123122, 'Precision': [1.0, 0.5], 'Recall': 0.777778, 'F1': 0.875, 'Learning time': 3.076, 'Inference time': 1.531}}


Starting fold 1

Target train facts examples: 863
Target train pos examples: 326
Target train neg examples: 10928

Target test facts examples: 215
Target test pos	 examples: 56
Target test neg examples: 3308

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.0826387310178797;  // std dev = 2.921, 49.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=11 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048763;  // std dev = 7.88e-08, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.6892977675416921;  // std dev = 1.173, 56.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=54 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.16207435310053703;  // std dev = 2.746, 35.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=11 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839136;  // std dev = 0.000, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( movie(E, A) )
%   | | then return 0.34409394708776325;  // std dev = 0.378, 98.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=65 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360618;  // std dev = 8.56e-08, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4771308050692394;  // std dev = 0.000, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783627;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.03241472496598855;  // std dev = 2.849, 42.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=11 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783623;  // std dev = 5.27e-09, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926098;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.36154343620276064;  // std dev = 0.000, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.015271942352265562;  // std dev = 2.929, 50.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=11 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926108;  // std dev = 0.000, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.27277770960977943;  // std dev = 0.551, 55.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=54 */
%   | else if ( movie(E, A) )
%   | | then return 0.005840732909956292;  // std dev = 0.417, 48.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=11 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839682;  // std dev = 5.58e-08, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.3301177731336018;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.23094327734586187;  // std dev = 4.71e-08, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.03471335635984201;  // std dev = 2.837, 41.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=11 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109161;  // std dev = 5.48e-08, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18423041257907216;  // std dev = 0.450, 55.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=54 */
%   | else if ( genre(A, E) )
%   | | then return -0.06308102896103557;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.005808532969394861;  // std dev = 2.903, 47.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=11 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333707;  // std dev = 0.000, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.05945399423529409;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, B) )
%   | | then return 0.10318118485077166;  // std dev = 2.932, 96.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=65 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420265;  // std dev = 4.66e-09, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13605177860332537;  // std dev = 0.608, 56.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=54 */
%   | else if ( genre(A, E) )
%   | | then return -0.056215159697876806;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.09678774360092328;  // std dev = 2.664, 31.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=11 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.132653
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.524 seconds
Total inference time: 1.723 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.978778
   AUC PR    = 0.871408
   CLL	      = -0.132634
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.830769
   F1        = 0.907563


Total scoring time: 1.611 seconds
Parameter learned model CLL: -0.132634


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 4, 0], 'true,false,true': [0.0, 0, 54], 'true,false,false,true': [2.921, 38, 11], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.88e-08, 86, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.173, 2, 54], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [2.746, 24, 11], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 103, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 4, 0], 'true,false,true': [0.378, 33, 65], 'true,false,false': [0.0, 0, 0], 'false,true': [8.56e-08, 108, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 54], 'true,false,true': [0.0, 6, 0], 'true,false,false,true': [2.849, 31, 11], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.27e-09, 92, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [0.0, 0, 54], 'true,false,false,true': [2.929, 39, 11], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 77, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.551, 1, 54], 'true,false,true': [0.417, 37, 11], 'true,false,false': [0.0, 0, 0], 'false,true': [5.58e-08, 101, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [4.71e-08, 0, 54], 'true,false,false,true': [2.837, 30, 11], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.48e-08, 94, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.45, 1, 54], 'true,false,true': [0.0, 4, 0], 'true,false,false,true': [2.903, 36, 11], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 88, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [2.932, 31, 65], 'true,false,false': [0.0, 0, 0], 'false,true': [4.66e-09, 90, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.608, 2, 54], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [2.664, 20, 11], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 101, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.23844877281858615, 7.229359230117299e-17], 'true': [0.0, 0.23282118955603667], 'true,false': [0.0, 0.17409412744689662], 'true,false,false': [0.17409412744689662, nan], 'false': [7.229359230117299e-17, nan]}, {'': [0.16816622948647086, -1.0778864316749092e-17], 'true': [0.02458537734255049, 0.20808795925787174], 'true,false': [0.0, 0.2155102040816327], 'true,false,false': [0.2155102040816327, nan], 'false': [-1.0778864316749092e-17, nan]}, {'': [0.14513476936302588, 6.78469626159818e-17], 'true': [0.0, 0.14288960279349056], 'true,false': [0.14288960279349056, nan], 'false': [6.78469626159818e-17, nan]}, {'': [0.13357670432278237, 2.5342047301226398e-17], 'true': [-7.56596431596403e-16, 0.1711110869438688], 'true,false': [0.0, 0.19331065759637184], 'true,false,false': [0.19331065759637184, nan], 'false': [2.5342047301226398e-17, nan]}, {'': [0.11709998805650841, 0.0], 'true': [0.0, 0.11794494634726621], 'true,false': [-6.579099405186112e-17, 0.17159999999999967], 'true,false,false': [0.17159999999999967, nan], 'false': [0.0, nan]}, {'': [0.10162281735973652, 3.0778460088618204e-17], 'true': [0.005512260480314959, 0.17370052406759837], 'true,false': [0.17370052406759837, nan], 'false': [3.0778460088618204e-17, nan]}, {'': [0.09552858274053705, 3.188938474987152e-17], 'true': [0.0, 0.0941702862101188], 'true,false': [4.11193712824132e-17, 0.196311719214753], 'true,false,false': [0.196311719214753, nan], 'false': [3.188938474987152e-17, nan]}, {'': [0.09095701400126308, -7.569702440626067e-18], 'true': [0.0036805062275950292, 0.16544359621431406], 'true,false': [0.0, 0.17926663648709792], 'true,false,false': [0.17926663648709792, nan], 'false': [-7.569702440626067e-18, nan]}, {'': [0.08890648901979072, 2.0970879354030734e-17], 'true': [0.0, 0.08955991579096655], 'true,false': [0.08955991579096655, nan], 'false': [2.0970879354030734e-17, nan]}, {'': [0.08494159569815009, -1.5389230044309102e-17], 'true': [0.006609445681831706, 0.2163865578227772], 'true,false': [0.0, 0.2289281997918836], 'true,false,false': [0.2289281997918836, nan], 'false': [-1.5389230044309102e-17, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.1418510649004877;  // std dev = 3.16e-08, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   else return -0.14185106490048763;  // std dev = 8.30e-08, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( actor(A) )
%   | | then return 0.7194734122109545;  // std dev = 0.000, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( actor(B) )
%   | | | then return -0.12544463852839136;  // std dev = 1.05e-08, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | | | else return 0.7194734122109542;  // std dev = 4.21e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.12544463852839138;  // std dev = 0.000, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( actor(B) )
%   | | then return -0.1123163781936064;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else return 0.5553664367462837;  // std dev = 1.98e-07, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   else return -0.11231637819360618;  // std dev = 8.69e-08, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.4175135841583098;  // std dev = 4.21e-08, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.4048523667523066;  // std dev = 0.080, 41.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=40 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( actor(B) )
%   | | | then return -0.10159632948783635;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | | else return 0.41751358415831014;  // std dev = 2.58e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.1015963294878363;  // std dev = 2.11e-08, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926094;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.3227596677161219;  // std dev = 0.009, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | else if ( actor(B) )
%   | | | then return -0.09269127618926098;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | | else return 0.3207118471601497;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.092691276189261;  // std dev = 3.94e-08, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.2563330163302238;  // std dev = 0.009, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else if ( actor(A) )
%   | | then return -0.0851847513883968;  // std dev = 1.97e-08, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | else return -0.24560590819303288;  // std dev = 0.335, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.0851847513883968;  // std dev = 5.37e-08, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08120712385468902;  // std dev = 0.046, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.21078377811116286;  // std dev = 0.007, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | else if ( actor(B) )
%   | | | then return -0.07825850806803362;  // std dev = 0.011, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | | else return 0.20956537127491792;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.07877675473109162;  // std dev = 5.05e-08, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17784884849459137;  // std dev = 0.006, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | else if ( genre(A, E) )
%   | | then return -0.06293131321584124;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.17695540943584942;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.08847195232266343;  // std dev = 0.428, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   else return -0.07324622576333707;  // std dev = 0.000, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08258848886352357;  // std dev = 0.064, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( director(B), actor(A) )
%   | | then return 0.15319977415121433;  // std dev = 0.006, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | | else if ( female(B) )
%   | | | then return -0.06749538350945793;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return -0.099740245155112;  // std dev = 0.403, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else return -0.06842697784420265;  // std dev = 4.15e-08, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13446573800367037;  // std dev = 0.005, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( actor(B) )
%   | | | then return -0.062189809428503474;  // std dev = 0.004, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | | else return 0.13385817904185182;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.06419184008202626;  // std dev = 0.000, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.062954
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.506 seconds
Total inference time: 1.686 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.065698
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.487 seconds
Refined model CLL: -0.065698


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.062954
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 7.128 seconds
Total inference time: 1.686 seconds
AUC ROC: 1.0
Total revision time: 7.128
Best scored revision CLL: -0.065698


Dataset: 4_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 00:25:03
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.062954, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 7.128, 'Inference time': 1.686, 'parameter_0.2': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.132653, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 1.524, 'Inference time': 1.723}}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995112;  // std dev = 4.62e-07, 104.000 (wgt'ed) examples reached here.  /* #pos=104 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.18726285915014415;  // std dev = 4.176, 79.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=26 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048835;  // std dev = 0.000, 188.000 (wgt'ed) examples reached here.  /* #neg=188 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7035315621970046;  // std dev = 1.184, 106.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=104 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.11950534142439405;  // std dev = 4.309, 91.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=26 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839174;  // std dev = 0.000, 218.000 (wgt'ed) examples reached here.  /* #neg=218 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14604005555411068;  // std dev = 0.163, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( movie(E, A) )
%   | | then return 0.36867306006076783;  // std dev = 0.376, 187.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=130 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360646;  // std dev = 0.000, 180.000 (wgt'ed) examples reached here.  /* #neg=180 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.46745767767981283;  // std dev = 2.80e-07, 104.000 (wgt'ed) examples reached here.  /* #pos=104 */
%   | else if ( genre(A, E) )
%   | | then return -0.09855930930679899;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.06071568931132863;  // std dev = 4.248, 85.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=26 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1015963294878365;  // std dev = 0.000, 188.000 (wgt'ed) examples reached here.  /* #neg=188 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09014259629104975;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(B, E) )
%   | | then return 0.35484460819903796;  // std dev = 1.58e-07, 104.000 (wgt'ed) examples reached here.  /* #pos=104 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.03555910339227362;  // std dev = 4.290, 89.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=26 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926061;  // std dev = 8.30e-08, 175.000 (wgt'ed) examples reached here.  /* #neg=175 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.26304514552796276;  // std dev = 0.932, 107.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=104 */
%   | else if ( movie(E, A) )
%   | | then return 0.012063459035157134;  // std dev = 0.440, 97.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=26 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 6.83e-08, 173.000 (wgt'ed) examples reached here.  /* #neg=173 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.15539735669705293;  // std dev = 0.345, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( genre(B, E) )
%   | | then return 0.2286938814247261;  // std dev = 8.94e-08, 104.000 (wgt'ed) examples reached here.  /* #pos=104 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.029690288215820135;  // std dev = 4.280, 88.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=26 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109147;  // std dev = 7.74e-08, 186.000 (wgt'ed) examples reached here.  /* #neg=186 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17740662931327686;  // std dev = 0.820, 107.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=104 */
%   | else if ( genre(A, E) )
%   | | then return -0.07273804394484605;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.05340202724223266;  // std dev = 4.189, 80.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=26 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333664;  // std dev = 8.54e-09, 202.000 (wgt'ed) examples reached here.  /* #neg=202 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11114412813789505;  // std dev = 0.236, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( movie(E, B) )
%   | | then return 0.11613639468158102;  // std dev = 4.232, 182.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=130 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420262;  // std dev = 5.74e-09, 192.000 (wgt'ed) examples reached here.  /* #neg=192 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13688651271502483;  // std dev = 0.773, 107.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=104 */
%   | else if ( genre(A, E) )
%   | | then return -0.06126907036773189;  // std dev = 1.86e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.014585059433234134;  // std dev = 4.202, 81.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=26 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 182.000 (wgt'ed) examples reached here.  /* #neg=182 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.14479
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.988 seconds
Total inference time: 1.804 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.975566
   AUC PR    = 0.847576
   CLL	      = -0.141995
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.8
   F1        = 0.888889


Total scoring time: 1.976 seconds
Parameter learned model CLL: -0.141995


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 8, 0], 'true,false,true': [4.62e-07, 0, 104], 'true,false,false,true': [4.176, 53, 26], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 188, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.184, 2, 104], 'true,false,true': [0.0, 5, 0], 'true,false,false,true': [4.309, 65, 26], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 218, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.163, 10, 0], 'true,false,true': [0.376, 57, 130], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 180, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [2.8e-07, 0, 104], 'true,false,true': [0.0, 5, 0], 'true,false,false,true': [4.248, 59, 26], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 188, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [2.63e-09, 7, 0], 'true,false,true': [1.58e-07, 0, 104], 'true,false,false,true': [4.29, 63, 26], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.3e-08, 175, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.932, 3, 104], 'true,false,true': [0.44, 71, 26], 'true,false,false': [0.0, 0, 0], 'false,true': [6.83e-08, 173, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.345, 10, 0], 'true,false,true': [8.94e-08, 0, 104], 'true,false,false,true': [4.28, 62, 26], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.74e-08, 186, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.82, 3, 104], 'true,false,true': [0.0, 8, 0], 'true,false,false,true': [4.189, 54, 26], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.54e-09, 202, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.236, 6, 0], 'true,false,true': [4.232, 52, 130], 'true,false,false': [0.0, 0, 0], 'false,true': [5.74e-09, 192, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.773, 3, 104], 'true,false,true': [1.86e-09, 8, 0], 'true,false,false,true': [4.202, 55, 26], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 182, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.2173734272635114, -2.1732025162875404e-16], 'true': [-6.938893903907228e-18, 0.2057391979455985], 'true,false': [2.049642507000289e-15, 0.22079794904662836], 'true,false,false': [0.22079794904662836, nan], 'false': [-2.1732025162875404e-16, nan]}, {'': [0.1890999819208094, -4.481634227844669e-17], 'true': [0.013215414257097964, 0.19641464485959537], 'true,false': [0.0, 0.20408163265306142], 'true,false,false': [0.20408163265306142, nan], 'false': [-4.481634227844669e-17, nan]}, {'': [0.14675811206233325, -1.4802973661668754e-17], 'true': [0.0026536683010025762, 0.14101602944114486], 'true,false': [0.14101602944114486, nan], 'false': [-1.4802973661668754e-17, nan]}, {'': [0.13659760104791555, -9.21248892774066e-17], 'true': [7.51535585900106e-16, 0.2018539404100229], 'true,false': [-1.3877787807814458e-18, 0.21231833910034556], 'true,false,false': [0.21231833910034556, nan], 'false': [-9.21248892774066e-17, nan]}, {'': [0.11946208318876586, 3.933361572957697e-17], 'true': [9.912705577010326e-19, 0.12069193765588675], 'true,false': [2.391249591500337e-16, 0.20679207170811775], 'true,false,false': [0.20679207170811775, nan], 'false': [3.933361572957697e-17, nan]}, {'': [0.1119742521988332, 2.6953391349281256e-17], 'true': [0.008121357328716368, 0.1934938107616648], 'true,false': [0.1934938107616648, nan], 'false': [2.6953391349281256e-17, nan]}, {'': [0.10465529259931823, 3.223228136008519e-17], 'true': [0.011914220430271743, 0.10523905027827013], 'true,false': [7.686159401251084e-17, 0.20816115702479357], 'true,false,false': [0.20816115702479357, nan], 'false': [3.223228136008519e-17, nan]}, {'': [0.09858383856751077, 7.25492273517429e-17], 'true': [0.006279748401392896, 0.20074680310405635], 'true,false': [-1.734723475976807e-18, 0.21937500000000001], 'true,false,false': [0.21937500000000001, nan], 'false': [7.25492273517429e-17, nan]}, {'': [0.09716831657122268, 3.2959746043559335e-17], 'true': [0.009314858632066431, 0.09841597475410173], 'true,false': [0.09841597475410173, nan], 'false': [3.2959746043559335e-17, nan]}, {'': [0.0974665680956619, -4.270088556250602e-18], 'true': [0.005581297694244601, 0.19883386719585], 'true,false': [4.336808689942018e-19, 0.2179545800944977], 'true,false,false': [0.2179545800944977, nan], 'false': [-4.270088556250602e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995112;  // std dev = 4.62e-07, 104.000 (wgt'ed) examples reached here.  /* #pos=104 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.8581489350995118;  // std dev = 1.46e-07, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return -0.14185106490048766;  // std dev = 6.83e-08, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   else return -0.14185106490048832;  // std dev = 0.000, 184.000 (wgt'ed) examples reached here.  /* #neg=184 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( actor(A) )
%   | | then return 0.7194734122109546;  // std dev = 0.000, 104.000 (wgt'ed) examples reached here.  /* #pos=104 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return -0.1254446385283916;  // std dev = 0.000, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   else return -0.12544463852839174;  // std dev = 0.000, 221.000 (wgt'ed) examples reached here.  /* #neg=221 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5553664367462834;  // std dev = 4.84e-07, 130.000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.1123163781936063;  // std dev = 3.94e-08, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
%   else return -0.11231637819360654;  // std dev = 0.000, 190.000 (wgt'ed) examples reached here.  /* #neg=190 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( actor(A) )
%   | | then return 0.4175135841583097;  // std dev = 2.73e-07, 104.000 (wgt'ed) examples reached here.  /* #pos=104 */
%   | | else return -0.10159632948783633;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783634;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.4175135841583105;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return -0.10159632948783619;  // std dev = 4.71e-08, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   else return -0.10159632948783653;  // std dev = 0.000, 200.000 (wgt'ed) examples reached here.  /* #neg=200 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926098;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( genre(B, E) )
%   | | then return 0.3207118471601503;  // std dev = 0.000, 104.000 (wgt'ed) examples reached here.  /* #pos=104 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.32071184716014955;  // std dev = 2.11e-08, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return -0.09269127618926107;  // std dev = 0.000, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   else return -0.09269127618926054;  // std dev = 9.54e-08, 212.000 (wgt'ed) examples reached here.  /* #neg=212 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2551722425694896;  // std dev = 0.000, 130.000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.0851847513883968;  // std dev = 1.83e-08, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   else return -0.08518475138839678;  // std dev = 7.30e-08, 184.000 (wgt'ed) examples reached here.  /* #neg=184 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07877675473109179;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( genre(B, E) )
%   | | then return 0.2097577156325356;  // std dev = 1.49e-07, 104.000 (wgt'ed) examples reached here.  /* #pos=104 */
%   | | else if ( actor(B) )
%   | | | then return -0.07877675473109179;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | | | else return 0.2097577156325355;  // std dev = 2.11e-08, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   else return -0.07877675473109148;  // std dev = 8.30e-08, 165.000 (wgt'ed) examples reached here.  /* #neg=165 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17007754288054977;  // std dev = 0.427, 107.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=104 */
%   | else if ( genre(A, E) )
%   | | then return -0.07324622576333704;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.17709649774527747;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return -0.07359799291326341;  // std dev = 0.022, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   else return -0.07324622576333663;  // std dev = 1.26e-07, 209.000 (wgt'ed) examples reached here.  /* #neg=209 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.15347230677580742;  // std dev = 0.004, 130.000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.06962212164183573;  // std dev = 0.037, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
%   else return -0.06842697784420262;  // std dev = 7.96e-08, 191.000 (wgt'ed) examples reached here.  /* #neg=191 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1326901185681208;  // std dev = 0.214, 105.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=104 */
%   | else if ( genre(A, E) )
%   | | then return -0.06412008368596844;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.13392251669619096;  // std dev = 2.69e-08, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return -0.06441581376991054;  // std dev = 0.019, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   else return -0.06419184008202626;  // std dev = 0.000, 200.000 (wgt'ed) examples reached here.  /* #neg=200 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063436
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.033 seconds
Total inference time: 1.821 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064482
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.433 seconds
Refined model CLL: -0.064482


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063436
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 9.43 seconds
Total inference time: 1.821 seconds
AUC ROC: 1.0
Total revision time: 9.43
Best scored revision CLL: -0.064482


Dataset: 4_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 00:25:16
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063436, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 9.43, 'Inference time': 1.821, 'parameter_0.4': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.14479, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 1.988, 'Inference time': 1.804}}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995097;  // std dev = 1.01e-06, 162.000 (wgt'ed) examples reached here.  /* #pos=162 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.10441759181592897;  // std dev = 4.987, 134.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=33 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048782;  // std dev = 1.03e-07, 302.000 (wgt'ed) examples reached here.  /* #neg=302 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7091695335434034;  // std dev = 1.188, 164.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=162 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.11324957386490443;  // std dev = 4.914, 123.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=33 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839197;  // std dev = 0.000, 284.000 (wgt'ed) examples reached here.  /* #neg=284 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1236559843404322;  // std dev = 0.108, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( movie(E, A) )
%   | | then return 0.3649839443954121;  // std dev = 0.368, 282.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=195 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360699;  // std dev = 0.000, 280.000 (wgt'ed) examples reached here.  /* #neg=280 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.462851032416968;  // std dev = 0.670, 163.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=162 */
%   | else if ( genre(A, E) )
%   | | then return -0.10056597833295801;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.03772569908044646;  // std dev = 4.921, 124.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=33 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783662;  // std dev = 0.000, 293.000 (wgt'ed) examples reached here.  /* #neg=293 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1513967926477042;  // std dev = 0.288, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( genre(B, E) )
%   | | then return 0.35545329020136956;  // std dev = 4.04e-07, 162.000 (wgt'ed) examples reached here.  /* #pos=162 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.028880045710789573;  // std dev = 4.928, 125.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=33 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926042;  // std dev = 1.69e-07, 315.000 (wgt'ed) examples reached here.  /* #neg=315 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.27218999352857826;  // std dev = 0.758, 164.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=162 */
%   | else if ( movie(E, A) )
%   | | then return 0.00936994352004347;  // std dev = 0.426, 136.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=33 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.03e-07, 300.000 (wgt'ed) examples reached here.  /* #neg=300 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09874615135416029;  // std dev = 0.226, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( genre(B, E) )
%   | | then return 0.22744465270933767;  // std dev = 1.74e-07, 162.000 (wgt'ed) examples reached here.  /* #pos=162 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.0525745283952256;  // std dev = 4.825, 112.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=33 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109143;  // std dev = 3.94e-08, 290.000 (wgt'ed) examples reached here.  /* #neg=290 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18405076996072534;  // std dev = 0.682, 164.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=162 */
%   | else if ( genre(A, E) )
%   | | then return -0.0736252599760487;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.0018445635526991063;  // std dev = 4.975, 132.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=33 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.073246225763337;  // std dev = 5.35e-09, 309.000 (wgt'ed) examples reached here.  /* #neg=309 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.16845449263135853;  // std dev = 0.515, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( movie(E, B) )
%   | | then return 0.11019215910117668;  // std dev = 4.963, 277.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=195 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420293;  // std dev = 0.000, 286.000 (wgt'ed) examples reached here.  /* #neg=286 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14061782445470355;  // std dev = 0.767, 165.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=162 */
%   | else if ( genre(A, E) )
%   | | then return -0.05872496625101174;  // std dev = 2.63e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.008802289159340665;  // std dev = 4.928, 125.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=33 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202598;  // std dev = 6.32e-09, 293.000 (wgt'ed) examples reached here.  /* #neg=293 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.130497
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.353 seconds
Total inference time: 1.624 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.979827
   AUC PR    = 0.872138
   CLL	      = -0.127916
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.830769
   F1        = 0.907563


Total scoring time: 2.701 seconds
Parameter learned model CLL: -0.127916


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 11, 0], 'true,false,true': [1.01e-06, 0, 162], 'true,false,false,true': [4.987, 101, 33], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.03e-07, 302, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.188, 2, 162], 'true,false,true': [7.45e-09, 14, 0], 'true,false,false,true': [4.914, 90, 33], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 284, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.108, 10, 0], 'true,false,true': [0.368, 87, 195], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 280, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.67, 1, 162], 'true,false,true': [2.63e-09, 6, 0], 'true,false,false,true': [4.921, 91, 33], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 293, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.288, 10, 0], 'true,false,true': [4.04e-07, 0, 162], 'true,false,false,true': [4.928, 92, 33], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.69e-07, 315, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.758, 2, 162], 'true,false,true': [0.426, 103, 33], 'true,false,false': [0.0, 0, 0], 'false,true': [1.03e-07, 300, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.226, 13, 0], 'true,false,true': [1.74e-07, 0, 162], 'true,false,false,true': [4.825, 79, 33], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.94e-08, 290, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.682, 2, 162], 'true,false,true': [0.0, 12, 0], 'true,false,false,true': [4.975, 99, 33], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.35e-09, 309, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.515, 16, 0], 'true,false,true': [4.963, 82, 195], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 286, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.767, 3, 162], 'true,false,true': [2.63e-09, 10, 0], 'true,false,false,true': [4.928, 92, 33], 'true,false,false,false': [0.0, 0, 0], 'false,true': [6.32e-09, 293, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.23172659656866856, 3.529185773642882e-17], 'true': [-1.0092936587501423e-17, 0.2247877100073094], 'true,false': [6.315935428978668e-15, 0.18562040543551023], 'true,false,false': [0.18562040543551023, nan], 'false': [3.529185773642882e-17, nan]}, {'': [0.18270792350472617, -7.81847200440251e-17], 'true': [0.008599763163245148, 0.18147794793721486], 'true,false': [3.96508223080413e-18, 0.19631171921475446], 'true,false,false': [0.19631171921475446, nan], 'false': [-7.81847200440251e-17, nan]}, {'': [0.13839803683732904, -1.0467817089322904e-16], 'true': [0.00115728000808617, 0.13508771048044058], 'true,false': [0.13508771048044058, nan], 'false': [-1.0467817089322904e-16, nan]}, {'': [0.13051818608131563, -5.607952479335261e-17], 'true': [0.0027518903457206534, 0.1871322571074555], 'true,false': [1.1564823173178713e-18, 0.19530437044744972], 'true,false,false': [0.19530437044744972, nan], 'false': [-5.607952479335261e-17, nan]}, {'': [0.11171863188498297, 9.022764898540955e-17], 'true': [0.00827972223268399, 0.11084655879452786], 'true,false': [1.0087952421285372e-15, 0.19430399999999887], 'true,false,false': [0.19430399999999887, nan], 'false': [9.022764898540955e-17, nan]}, {'': [0.101275031373523, 3.552713678800501e-17], 'true': [0.003499364709691174, 0.18142032200188554], 'true,false': [0.18142032200188554, nan], 'false': [3.552713678800501e-17, nan]}, {'': [0.09114294057114586, 5.359697360259376e-18], 'true': [0.003929533082223295, 0.09234209107046315], 'true,false': [1.8640781648027319e-16, 0.207828443877551], 'true,false,false': [0.207828443877551, nan], 'false': [5.359697360259376e-18, nan]}, {'': [0.09121485656645122, 2.73064562690977e-17], 'true': [0.002832671691612222, 0.17226859133450845], 'true,false': [-2.3129646346357427e-18, 0.18749999999999972], 'true,false,false': [0.18749999999999972, nan], 'false': [2.73064562690977e-17, nan]}, {'': [0.08896981399017231, -4.5030024775006347e-17], 'true': [0.016565434899749727, 0.08891207337425455], 'true,false': [0.08891207337425455, nan], 'false': [-4.5030024775006347e-17, nan]}, {'': [0.08880094331353561, 4.0165065054698496e-17], 'true': [0.003566085112095631, 0.1800820489497948], 'true,false': [6.938893903907229e-19, 0.19430400000000073], 'true,false,false': [0.19430400000000073, nan], 'false': [4.0165065054698496e-17, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995097;  // std dev = 1.01e-06, 162.000 (wgt'ed) examples reached here.  /* #pos=162 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.8581489350995116;  // std dev = 2.23e-07, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return -0.14185106490048763;  // std dev = 8.16e-08, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
%   else return -0.14185106490048802;  // std dev = 0.000, 275.000 (wgt'ed) examples reached here.  /* #neg=275 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109551;  // std dev = 0.000, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | else return 0.7041112658338758;  // std dev = 0.113, 110.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=108 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( actor(B) )
%   | | | then return -0.12544463852839144;  // std dev = 0.000, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
%   | | | else return 0.6711923807401349;  // std dev = 1.160, 35.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=33 */
%   else return -0.125444638528392;  // std dev = 0.000, 299.000 (wgt'ed) examples reached here.  /* #neg=299 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12838970294264299;  // std dev = 0.104, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( actor(B) )
%   | | then return -0.11231637819360622;  // std dev = 6.50e-08, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
%   | | else return 0.5594774385120007;  // std dev = 0.054, 195.000 (wgt'ed) examples reached here.  /* #pos=195 */
%   else return -0.11231637819360694;  // std dev = 0.000, 274.000 (wgt'ed) examples reached here.  /* #neg=274 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.41651414532814357;  // std dev = 0.000, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | else if ( actor(A) )
%   | | | then return 0.4202523302719688;  // std dev = 0.000, 108.000 (wgt'ed) examples reached here.  /* #pos=108 */
%   | | | else return -0.2032459034261748;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(A, E) )
%   | | then return -0.10013861069768264;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( actor(B) )
%   | | | then return -0.10159632948783626;  // std dev = 4.59e-08, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
%   | | | else return 0.42829308012342615;  // std dev = 5.16e-08, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   else return -0.10159632948783662;  // std dev = 0.000, 289.000 (wgt'ed) examples reached here.  /* #neg=289 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11572021886240846;  // std dev = 0.117, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( genre(B, E) )
%   | | then return 0.32172421493924896;  // std dev = 0.015, 162.000 (wgt'ed) examples reached here.  /* #pos=162 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.32802929344105164;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return -0.09661051537882331;  // std dev = 0.335, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
%   else return -0.09269127618926042;  // std dev = 1.59e-07, 303.000 (wgt'ed) examples reached here.  /* #neg=303 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.25659029250696963;  // std dev = 0.026, 195.000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.08995739380584589;  // std dev = 0.341, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
%   else return -0.08518475138839678;  // std dev = 9.66e-08, 277.000 (wgt'ed) examples reached here.  /* #neg=277 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11033401943103238;  // std dev = 0.098, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( genre(B, E) )
%   | | then return 0.21012527983691895;  // std dev = 0.012, 162.000 (wgt'ed) examples reached here.  /* #pos=162 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.2138737659485266;  // std dev = 4.21e-08, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return -0.0860775065864122;  // std dev = 0.524, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
%   else return -0.07877675473109143;  // std dev = 5.58e-08, 266.000 (wgt'ed) examples reached here.  /* #neg=266 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1754696357107258;  // std dev = 0.308, 163.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=162 */
%   | else if ( genre(A, E) )
%   | | then return -0.06838057160968346;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.18010958994890974;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return -0.08531018890055835;  // std dev = 0.572, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
%   else return -0.07324622576333689;  // std dev = 1.08e-07, 275.000 (wgt'ed) examples reached here.  /* #neg=275 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.1535043036764121;  // std dev = 0.013, 195.000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.07358785830797514;  // std dev = 0.406, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
%   else return -0.0684269778442028;  // std dev = 0.000, 262.000 (wgt'ed) examples reached here.  /* #neg=262 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1292646031477275;  // std dev = 0.478, 165.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=162 */
%   | else if ( genre(A, E) )
%   | | then return -0.05987216925787971;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( actor(B) )
%   | | | then return -0.06222507736571368;  // std dev = 3.41e-08, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
%   | | | else return 0.1359646120361129;  // std dev = 2.79e-08, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   else return -0.06419184008202605;  // std dev = 9.42e-08, 281.000 (wgt'ed) examples reached here.  /* #neg=281 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.062976
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.358 seconds
Total inference time: 1.856 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.066301
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.335 seconds
Refined model CLL: -0.066301


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.062976
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 10.747 seconds
Total inference time: 1.856 seconds
AUC ROC: 1.0
Total revision time: 10.747
Best scored revision CLL: -0.066301


Dataset: 4_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 00:25:31
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.062976, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 10.747, 'Inference time': 1.856, 'parameter_0.6': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.130497, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 2.353, 'Inference time': 1.624}}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995091;  // std dev = 1.08e-06, 218.000 (wgt'ed) examples reached here.  /* #pos=218 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.16471827816520515;  // std dev = 5.397, 137.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=42 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048735;  // std dev = 3.00e-07, 397.000 (wgt'ed) examples reached here.  /* #neg=397 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7080039364090656;  // std dev = 1.453, 221.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=218 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.1027146824343964;  // std dev = 5.553, 158.000 (wgt'ed) examples reached here.  /* #neg=116 #pos=42 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839224;  // std dev = 0.000, 383.000 (wgt'ed) examples reached here.  /* #neg=383 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360636;  // std dev = 1.05e-08, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( movie(E, A) )
%   | | then return 0.376923288920086;  // std dev = 0.362, 365.000 (wgt'ed) examples reached here.  /* #neg=105 #pos=260 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360625;  // std dev = 0.000, 392.000 (wgt'ed) examples reached here.  /* #neg=392 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4522055445488856;  // std dev = 1.329, 222.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=218 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783627;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.06710960376465348;  // std dev = 5.397, 137.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=42 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783578;  // std dev = 1.24e-08, 421.000 (wgt'ed) examples reached here.  /* #neg=421 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14658285144598543;  // std dev = 0.292, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( genre(B, E) )
%   | | then return 0.35542390568818394;  // std dev = 0.000, 218.000 (wgt'ed) examples reached here.  /* #pos=218 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.017336360619355996;  // std dev = 5.540, 156.000 (wgt'ed) examples reached here.  /* #neg=114 #pos=42 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926065;  // std dev = 1.85e-07, 370.000 (wgt'ed) examples reached here.  /* #neg=370 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.27141549309442875;  // std dev = 0.929, 221.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=218 */
%   | else if ( movie(E, A) )
%   | | then return -0.006647098656657912;  // std dev = 0.423, 176.000 (wgt'ed) examples reached here.  /* #neg=134 #pos=42 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.28e-07, 380.000 (wgt'ed) examples reached here.  /* #neg=380 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11206192621192891;  // std dev = 0.311, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( genre(B, E) )
%   | | then return 0.22756339113392685;  // std dev = 0.000, 218.000 (wgt'ed) examples reached here.  /* #pos=218 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.008300033736151138;  // std dev = 5.629, 171.000 (wgt'ed) examples reached here.  /* #neg=129 #pos=42 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109143;  // std dev = 2.10e-07, 365.000 (wgt'ed) examples reached here.  /* #neg=365 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1729534214675799;  // std dev = 1.342, 226.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=218 */
%   | else if ( genre(A, E) )
%   | | then return -0.0726619512727724;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.016389854071410245;  // std dev = 5.665, 178.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=42 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333768;  // std dev = 0.000, 370.000 (wgt'ed) examples reached here.  /* #neg=370 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12308876189889524;  // std dev = 0.466, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( movie(E, B) )
%   | | then return 0.10441188031768428;  // std dev = 5.710, 374.000 (wgt'ed) examples reached here.  /* #neg=114 #pos=260 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420335;  // std dev = 0.000, 400.000 (wgt'ed) examples reached here.  /* #neg=400 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1488907622553194;  // std dev = 0.453, 219.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=218 */
%   | else if ( genre(A, E) )
%   | | then return -0.06052577930485602;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.01629859499341743;  // std dev = 5.601, 166.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=42 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202564;  // std dev = 9.45e-09, 384.000 (wgt'ed) examples reached here.  /* #neg=384 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.128781
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.789 seconds
Total inference time: 1.958 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.980912
   AUC PR    = 0.878436
   CLL	      = -0.125973
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.838462
   F1        = 0.912134


Total scoring time: 2.915 seconds
Parameter learned model CLL: -0.125973


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 16, 0], 'true,false,true': [1.08e-06, 0, 218], 'true,false,false,true': [5.397, 95, 42], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3e-07, 397, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.453, 3, 218], 'true,false,true': [0.0, 19, 0], 'true,false,false,true': [5.553, 116, 42], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 383, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [1.05e-08, 13, 0], 'true,false,true': [0.362, 105, 260], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 392, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.329, 4, 218], 'true,false,true': [0.0, 7, 0], 'true,false,false,true': [5.397, 95, 42], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.24e-08, 421, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.292, 11, 0], 'true,false,true': [0.0, 0, 218], 'true,false,false,true': [5.54, 114, 42], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.85e-07, 370, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.929, 3, 218], 'true,false,true': [0.423, 134, 42], 'true,false,false': [0.0, 0, 0], 'false,true': [1.28e-07, 380, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.311, 15, 0], 'true,false,true': [0.0, 0, 218], 'true,false,false,true': [5.629, 129, 42], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.1e-07, 365, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [1.342, 8, 218], 'true,false,true': [0.0, 11, 0], 'true,false,false,true': [5.665, 136, 42], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 370, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.466, 19, 0], 'true,false,true': [5.71, 114, 260], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 400, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.453, 1, 218], 'true,false,true': [0.0, 10, 0], 'true,false,false,true': [5.601, 124, 42], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.45e-09, 384, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.2096758959902973, 2.259597490924752e-16], 'true': [-6.938893903907228e-18, 0.19599285855981338], 'true,false': [5.345367369938369e-15, 0.21258458095796376], 'true,false,false': [0.21258458095796376, nan], 'false': [2.259597490924752e-16, nan]}, {'': [0.18294647890408255, -1.252262001665973e-16], 'true': [0.00955921826236227, 0.17919970501131918], 'true,false': [0.0, 0.19516103188591608], 'true,false,false': [0.19516103188591608, nan], 'false': [-1.252262001665973e-16, nan]}, {'': [0.13436912595239633, -2.2657612747452175e-17], 'true': [8.540177112501205e-18, 0.1309230743888047], 'true,false': [0.1309230743888047, nan], 'false': [-2.2657612747452175e-17, nan]}, {'': [0.12183516122254778, 1.5189749695584088e-16], 'true': [0.00796129823686391, 0.20356690662060098], 'true,false': [0.0, 0.2125845809579626], 'true,false,false': [0.2125845809579626, nan], 'false': [1.5189749695584088e-16, nan]}, {'': [0.1105548353460139, 9.241856529312114e-17], 'true': [0.0077448050230698425, 0.10985548556486328], 'true,false': [-7.33358328192764e-16, 0.19674556213017697], 'true,false,false': [0.19674556213017697, nan], 'false': [9.241856529312114e-17, nan]}, {'': [0.10042764577541231, 4.324026516961136e-17], 'true': [0.003901580868076503, 0.17859221985609947], 'true,false': [0.17859221985609947, nan], 'false': [4.324026516961136e-17, nan]}, {'': [0.09385158050228533, 1.2045159390453753e-16], 'true': [0.0064405827046311445, 0.09515527262682205], 'true,false': [-2.4445277606425466e-17, 0.18528778085564893], 'true,false,false': [0.18528778085564893, nan], 'false': [1.2045159390453753e-16, nan]}, {'': [0.09094342985265556, -6.00120553851436e-17], 'true': [0.007965102802408941, 0.16996133554035645], 'true,false': [-4.4156597570318725e-18, 0.1802802676429753], 'true,false,false': [0.1802802676429753, nan], 'false': [-6.00120553851436e-17, nan]}, {'': [0.08588695734752481, -1.1379786002407854e-16], 'true': [0.011415412955978982, 0.0871680464130895], 'true,false': [0.0871680464130895, nan], 'false': [-1.1379786002407854e-16, nan]}, {'': [0.08694115099367249, 8.962737959213503e-17], 'true': [0.0009382372319014859, 0.1783633126459298], 'true,false': [-6.938893903907229e-19, 0.18899695166206892], 'true,false,false': [0.18899695166206892, nan], 'false': [8.962737959213503e-17, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995091;  // std dev = 1.08e-06, 218.000 (wgt'ed) examples reached here.  /* #pos=218 */
%   | | else if ( actor(B) )
%   | | | then return -0.14185106490048782;  // std dev = 0.000, 125.000 (wgt'ed) examples reached here.  /* #neg=125 */
%   | | | else return 0.8581489350995118;  // std dev = 2.38e-07, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   else return -0.14185106490048738;  // std dev = 2.89e-07, 390.000 (wgt'ed) examples reached here.  /* #neg=390 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109544;  // std dev = 1.88e-07, 72.000 (wgt'ed) examples reached here.  /* #pos=72 */
%   | | else return 0.7080556007144784;  // std dev = 0.098, 148.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=146 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( actor(B) )
%   | | | then return -0.12544463852839108;  // std dev = 7.88e-08, 110.000 (wgt'ed) examples reached here.  /* #neg=110 */
%   | | | else return 0.719473412210955;  // std dev = 0.000, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   else return -0.12544463852839222;  // std dev = 0.000, 374.000 (wgt'ed) examples reached here.  /* #neg=374 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11986314105991308;  // std dev = 0.109, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( actor(A), director(B) )
%   | | then return 0.5569486502082042;  // std dev = 0.023, 260.000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | | else return -0.11525723823838596;  // std dev = 0.331, 113.000 (wgt'ed) examples reached here.  /* #neg=113 */
%   else return -0.11231637819360636;  // std dev = 0.000, 372.000 (wgt'ed) examples reached here.  /* #neg=372 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.4171288464799543;  // std dev = 0.000, 72.000 (wgt'ed) examples reached here.  /* #pos=72 */
%   | | else return 0.4073199609589837;  // std dev = 0.088, 149.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=146 */
%   | else if ( genre(A, E) )
%   | | then return -0.1009095704739107;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.4171288464799529;  // std dev = 0.000, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | | | else return -0.10419236265868817;  // std dev = 0.314, 110.000 (wgt'ed) examples reached here.  /* #neg=110 */
%   else return -0.10159632948783624;  // std dev = 1.30e-07, 358.000 (wgt'ed) examples reached here.  /* #neg=358 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( actor(B) )
%   | | then return -0.09211596234846363;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return -0.2796217459642973;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(B, E) )
%   | | then return 0.3235584694082617;  // std dev = 0.032, 218.000 (wgt'ed) examples reached here.  /* #pos=218 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.32045102619299465;  // std dev = 4.21e-08, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | | | else return -0.09952128397216624;  // std dev = 0.512, 123.000 (wgt'ed) examples reached here.  /* #neg=123 */
%   else return -0.09269127618926083;  // std dev = 1.53e-07, 394.000 (wgt'ed) examples reached here.  /* #neg=394 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.25677238019929344;  // std dev = 0.031, 260.000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.09129650836154843;  // std dev = 0.418, 142.000 (wgt'ed) examples reached here.  /* #neg=142 */
%   else return -0.08518475138839678;  // std dev = 1.26e-07, 402.000 (wgt'ed) examples reached here.  /* #neg=402 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( actor(B) )
%   | | then return -0.07788181698565409;  // std dev = 2.63e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return -0.21127503609188197;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.21118690374153196;  // std dev = 0.025, 218.000 (wgt'ed) examples reached here.  /* #pos=218 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.20933752800016214;  // std dev = 0.000, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | | | else return -0.0847289702045646;  // std dev = 0.532, 148.000 (wgt'ed) examples reached here.  /* #neg=148 */
%   else return -0.07877675473109141;  // std dev = 1.15e-07, 393.000 (wgt'ed) examples reached here.  /* #neg=393 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.17606801752847204;  // std dev = 8.94e-08, 72.000 (wgt'ed) examples reached here.  /* #pos=72 */
%   | | else return 0.1719730238170787;  // std dev = 0.050, 149.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=146 */
%   | else if ( genre(A, E) )
%   | | then return -0.07246931123208997;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.17678824867192228;  // std dev = 0.000, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | | | else return -0.0762242370528332;  // std dev = 0.359, 111.000 (wgt'ed) examples reached here.  /* #neg=111 */
%   else return -0.0732462257633372;  // std dev = 3.65e-08, 392.000 (wgt'ed) examples reached here.  /* #neg=392 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.15390014343113104;  // std dev = 0.025, 260.000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else if ( actor(B) )
%   | | then return -0.06682163220083313;  // std dev = 0.004, 138.000 (wgt'ed) examples reached here.  /* #neg=138 */
%   | | else return -0.2352562639840538;  // std dev = 0.048, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.06842697784420326;  // std dev = 0.000, 367.000 (wgt'ed) examples reached here.  /* #neg=367 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.13317353390918518;  // std dev = 3.65e-08, 72.000 (wgt'ed) examples reached here.  /* #pos=72 */
%   | | else if ( actor(A) )
%   | | | then return 0.13612387504090123;  // std dev = 0.000, 146.000 (wgt'ed) examples reached here.  /* #pos=146 */
%   | | | else return -0.1691286677893452;  // std dev = 5.27e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(A, E) )
%   | | then return -0.06364620766931826;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.13366335909061364;  // std dev = 4.71e-08, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | | | else return -0.06430375908589539;  // std dev = 0.200, 122.000 (wgt'ed) examples reached here.  /* #neg=122 */
%   else return -0.06419184008202554;  // std dev = 2.08e-07, 419.000 (wgt'ed) examples reached here.  /* #neg=419 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063102
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.991 seconds
Total inference time: 2.154 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.065484
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.637 seconds
Refined model CLL: -0.065484


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063102
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 12.332 seconds
Total inference time: 2.154 seconds
AUC ROC: 1.0
Total revision time: 12.332
Best scored revision CLL: -0.065484


Dataset: 4_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 00:25:49
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063102, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 12.332, 'Inference time': 2.154, 'parameter_0.8': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.128781, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 2.789, 'Inference time': 1.958}}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004877;  // std dev = 2.36e-08, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995086;  // std dev = 1.08e-06, 267.000 (wgt'ed) examples reached here.  /* #pos=267 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.16544060176618028;  // std dev = 6.393, 192.000 (wgt'ed) examples reached here.  /* #neg=133 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004873;  // std dev = 2.60e-07, 461.000 (wgt'ed) examples reached here.  /* #neg=461 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.6978879145643319;  // std dev = 2.207, 274.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=267 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 7.45e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.11121187832809486;  // std dev = 6.543, 215.000 (wgt'ed) examples reached here.  /* #neg=156 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839233;  // std dev = 0.000, 476.000 (wgt'ed) examples reached here.  /* #neg=476 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12404590633223747;  // std dev = 0.149, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( movie(E, A) )
%   | | then return 0.3667521710350378;  // std dev = 0.372, 470.000 (wgt'ed) examples reached here.  /* #neg=144 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360599;  // std dev = 0.000, 454.000 (wgt'ed) examples reached here.  /* #neg=454 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.45216614357170937;  // std dev = 1.756, 274.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=267 */
%   | else if ( genre(A, E) )
%   | | then return -0.10053071442141501;  // std dev = 1.05e-08, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.028895339841988114;  // std dev = 6.571, 220.000 (wgt'ed) examples reached here.  /* #neg=161 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1015963294878355;  // std dev = 1.48e-08, 477.000 (wgt'ed) examples reached here.  /* #neg=477 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11766597946615719;  // std dev = 0.255, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( genre(B, E) )
%   | | then return 0.36009423453213785;  // std dev = 0.000, 267.000 (wgt'ed) examples reached here.  /* #pos=267 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.047493402108392806;  // std dev = 6.463, 202.000 (wgt'ed) examples reached here.  /* #neg=143 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926146;  // std dev = 0.000, 500.000 (wgt'ed) examples reached here.  /* #neg=500 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2718958030204427;  // std dev = 1.206, 272.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=267 */
%   | else if ( movie(E, A) )
%   | | then return 0.022313453014043493;  // std dev = 0.438, 222.000 (wgt'ed) examples reached here.  /* #neg=163 #pos=59 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.48e-07, 479.000 (wgt'ed) examples reached here.  /* #neg=479 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1287509401484564;  // std dev = 0.421, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else if ( genre(B, E) )
%   | | then return 0.2302420085465812;  // std dev = 0.000, 267.000 (wgt'ed) examples reached here.  /* #pos=267 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.006861709487260132;  // std dev = 6.587, 223.000 (wgt'ed) examples reached here.  /* #neg=164 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109222;  // std dev = 7.60e-08, 528.000 (wgt'ed) examples reached here.  /* #neg=528 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18485191545180482;  // std dev = 0.959, 271.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=267 */
%   | else if ( genre(A, E) )
%   | | then return -0.07474577900235448;  // std dev = 3.73e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.012862316549137148;  // std dev = 6.554, 217.000 (wgt'ed) examples reached here.  /* #neg=158 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333699;  // std dev = 6.04e-09, 485.000 (wgt'ed) examples reached here.  /* #neg=485 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.15211268292053312;  // std dev = 0.529, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( movie(E, B) )
%   | | then return 0.10087829834965738;  // std dev = 6.702, 477.000 (wgt'ed) examples reached here.  /* #neg=151 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420354;  // std dev = 0.000, 498.000 (wgt'ed) examples reached here.  /* #neg=498 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1416203428751672;  // std dev = 1.088, 273.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=267 */
%   | else if ( genre(A, E) )
%   | | then return -0.060492622684445115;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.027137562256047677;  // std dev = 6.633, 232.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0641918400820254;  // std dev = 1.11e-08, 484.000 (wgt'ed) examples reached here.  /* #neg=484 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.132353
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.939 seconds
Total inference time: 1.856 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.978388
   AUC PR    = 0.863056
   CLL	      = -0.129958
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.819018
   F1        = 0.900506


Total scoring time: 2.969 seconds
Parameter learned model CLL: -0.129958


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [2.36e-08, 27, 0], 'true,false,true': [1.08e-06, 0, 267], 'true,false,false,true': [6.393, 133, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.6e-07, 461, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [2.207, 7, 267], 'true,false,true': [7.45e-09, 16, 0], 'true,false,false,true': [6.543, 156, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 476, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.149, 19, 0], 'true,false,true': [0.372, 144, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 454, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.756, 7, 267], 'true,false,true': [1.05e-08, 17, 0], 'true,false,false,true': [6.571, 161, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.48e-08, 477, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.255, 15, 0], 'true,false,true': [0.0, 0, 267], 'true,false,false,true': [6.463, 143, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 500, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [1.206, 5, 267], 'true,false,true': [0.438, 163, 59], 'true,false,false': [0.0, 0, 0], 'false,true': [1.48e-07, 479, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.421, 21, 0], 'true,false,true': [0.0, 0, 267], 'true,false,false,true': [6.587, 164, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.6e-08, 528, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.959, 4, 267], 'true,false,true': [3.73e-09, 11, 0], 'true,false,false,true': [6.554, 158, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [6.04e-09, 485, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.529, 19, 0], 'true,false,true': [6.702, 151, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 498, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.088, 6, 267], 'true,false,true': [0.0, 13, 0], 'true,false,false,true': [6.633, 173, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.11e-08, 484, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.22083354502193364, 1.4642420801997727e-16], 'true': [2.05596856412066e-17, 0.20579928897243036], 'true,false': [4.364382346990877e-15, 0.21286349826388926], 'true,false,false': [0.21286349826388926, nan], 'false': [1.4642420801997727e-16, nan]}, {'': [0.1863285874664588, -1.3621223663468308e-16], 'true': [0.017772042887169145, 0.18893218892427585], 'true,false': [3.469446951953614e-18, 0.1991130340724708], 'true,false,false': [0.1991130340724708, nan], 'false': [-1.3621223663468308e-16, nan]}, {'': [0.14217629709945023, -9.781700657490367e-18], 'true': [0.0011694455580169717, 0.13851712151591913], 'true,false': [0.13851712151591913, nan], 'false': [-9.781700657490367e-18, nan]}, {'': [0.1375766860479181, 2.1971709334300793e-16], 'true': [0.0112515507161248, 0.18329795373847743], 'true,false': [6.530723674265627e-18, 0.19626033057851047], 'true,false,false': [0.19626033057851047, nan], 'false': [2.1971709334300793e-16, nan]}, {'': [0.11318457607551764, -2.842170943040401e-17], 'true': [0.004349378605711233, 0.11301670709100164], 'true,false': [-5.056296621513821e-16, 0.20676894422115638], 'true,false,false': [0.20676894422115638, nan], 'false': [-2.842170943040401e-17, nan]}, {'': [0.104381240076793, 4.5428750068169245e-17], 'true': [0.0053460057060482555, 0.19142363647011057], 'true,false': [0.19142363647011057, nan], 'false': [4.5428750068169245e-17, nan]}, {'': [0.09973470799053843, 1.0934014636459875e-17], 'true': [0.00845350268057953, 0.10092539720877515], 'true,false': [-2.0624367798280063e-16, 0.19457459430111462], 'true,false,false': [0.19457459430111462, nan], 'false': [1.0934014636459875e-17, nan]}, {'': [0.09579823141725125, 3.6625914214438153e-17], 'true': [0.003392780231789104, 0.1887670134975635], 'true,false': [1.261617073437678e-18, 0.19796555458812035], 'true,false,false': [0.19796555458812035, nan], 'false': [3.6625914214438153e-17, nan]}, {'': [0.09346833464317618, -1.2038562917622179e-16], 'true': [0.014702123587836858, 0.09415398996560027], 'true,false': [0.09415398996560027, nan], 'false': [-1.2038562917622179e-16, nan]}, {'': [0.09449609113681574, 1.2340908827444921e-16], 'true': [0.004339814156143032, 0.17963014488374368], 'true,false': [-1.0675221390626506e-18, 0.18963659334126087], 'true,false,false': [0.18963659334126087, nan], 'false': [1.2340908827444921e-16, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995086;  // std dev = 1.08e-06, 267.000 (wgt'ed) examples reached here.  /* #pos=267 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.8581489350995125;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.14185106490048824;  // std dev = 0.000, 177.000 (wgt'ed) examples reached here.  /* #neg=177 */
%   else return -0.14185106490048716;  // std dev = 2.98e-07, 451.000 (wgt'ed) examples reached here.  /* #neg=451 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( director(A) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.7194734122109576;  // std dev = 0.000, 267.000 (wgt'ed) examples reached here.  /* #pos=267 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.7194734122109543;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.1254446385283912;  // std dev = 7.30e-08, 143.000 (wgt'ed) examples reached here.  /* #neg=143 */
%   else return -0.12544463852839235;  // std dev = 0.000, 500.000 (wgt'ed) examples reached here.  /* #neg=500 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | else if ( actor(A), director(B) )
%   | | then return 0.5553664367462832;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | | else return -0.11231637819360617;  // std dev = 1.01e-07, 140.000 (wgt'ed) examples reached here.  /* #neg=140 */
%   else return -0.11231637819360579;  // std dev = 0.000, 510.000 (wgt'ed) examples reached here.  /* #neg=510 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( actor(A) )
%   | | then return 0.4175135841583111;  // std dev = 0.000, 267.000 (wgt'ed) examples reached here.  /* #pos=267 */
%   | | else return -0.10159632948783627;  // std dev = 3.73e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( genre(A, E) )
%   | | then return -0.1015963294878363;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( actor(B) )
%   | | | then return -0.10159632948783645;  // std dev = 0.000, 147.000 (wgt'ed) examples reached here.  /* #neg=147 */
%   | | | else return 0.4175135841583105;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   else return -0.10159632948783533;  // std dev = 3.65e-07, 514.000 (wgt'ed) examples reached here.  /* #neg=514 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926093;  // std dev = 1.18e-08, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else if ( genre(B, E) )
%   | | then return 0.32071184716015033;  // std dev = 0.000, 267.000 (wgt'ed) examples reached here.  /* #pos=267 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.3207118471601497;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.09334781809641715;  // std dev = 0.076, 164.000 (wgt'ed) examples reached here.  /* #neg=164 */
%   else return -0.09269127618926132;  // std dev = 0.000, 471.000 (wgt'ed) examples reached here.  /* #neg=471 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.25517224256948756;  // std dev = 4.04e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.08574770811018587;  // std dev = 0.070, 165.000 (wgt'ed) examples reached here.  /* #neg=165 */
%   else return -0.08518475138839678;  // std dev = 1.40e-07, 438.000 (wgt'ed) examples reached here.  /* #neg=438 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07873591009800489;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( genre(B, E) )
%   | | then return 0.2097577156325348;  // std dev = 2.86e-07, 267.000 (wgt'ed) examples reached here.  /* #pos=267 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.20975771563253603;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.0795608795835685;  // std dev = 0.080, 161.000 (wgt'ed) examples reached here.  /* #neg=161 */
%   else return -0.0787767547310919;  // std dev = 1.60e-07, 457.000 (wgt'ed) examples reached here.  /* #neg=457 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17249526080040656;  // std dev = 0.555, 272.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=267 */
%   | else if ( genre(A, E) )
%   | | then return -0.07321079205568283;  // std dev = 5.27e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.17709649774527736;  // std dev = 6.32e-08, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.07400081917057291;  // std dev = 0.075, 148.000 (wgt'ed) examples reached here.  /* #neg=148 */
%   else return -0.07324622576333734;  // std dev = 0.000, 494.000 (wgt'ed) examples reached here.  /* #neg=494 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.15323233096389974;  // std dev = 0.004, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.06968621833384625;  // std dev = 0.094, 170.000 (wgt'ed) examples reached here.  /* #neg=170 */
%   else return -0.0684269778442035;  // std dev = 0.000, 473.000 (wgt'ed) examples reached here.  /* #neg=473 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13209631018176926;  // std dev = 0.370, 270.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=267 */
%   | else if ( genre(A, E) )
%   | | then return -0.06408704032425261;  // std dev = 3.73e-09, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( actor(B) )
%   | | | then return -0.06395092852631735;  // std dev = 4.71e-08, 137.000 (wgt'ed) examples reached here.  /* #neg=137 */
%   | | | else return 0.12248552799424911;  // std dev = 0.400, 62.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=59 */
%   else return -0.06419184008202539;  // std dev = 2.46e-07, 496.000 (wgt'ed) examples reached here.  /* #neg=496 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063401
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 4.19 seconds
Total inference time: 1.923 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.06465
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 3.251 seconds
Refined model CLL: -0.06465


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063401
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 13.348999999999998 seconds
Total inference time: 1.923 seconds
AUC ROC: 1.0
Total revision time: 13.348999999999998
Best scored revision CLL: -0.06465


Dataset: 4_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 00:26:06
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063401, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 13.348999999999998, 'Inference time': 1.923, 'parameter_1.0': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.132353, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 2.939, 'Inference time': 1.856}}


Starting fold 2

Target train facts examples: 870
Target train pos examples: 324
Target train neg examples: 10813

Target test facts examples: 208
Target test pos	 examples: 58
Target test neg examples: 3423

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 8.43e-08, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.16584124279182005;  // std dev = 2.882, 39.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048763;  // std dev = 8.69e-08, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7035315621970046;  // std dev = 0.837, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.16106287495665378;  // std dev = 2.847, 37.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1254446385283914;  // std dev = 0.000, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.15728128134094546;  // std dev = 0.123, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( movie(E, A) )
%   | | then return 0.3264582294150093;  // std dev = 0.388, 99.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=64 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360618;  // std dev = 8.82e-08, 111.000 (wgt'ed) examples reached here.  /* #neg=111 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4779795718324389;  // std dev = 1.69e-07, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | else if ( genre(A, E) )
%   | | then return -0.09756507555551713;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.05889623473635536;  // std dev = 2.898, 40.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783621;  // std dev = 5.43e-09, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.20698797866363683;  // std dev = 0.215, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.362132988786399;  // std dev = 2.98e-08, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.0032753262993389927;  // std dev = 2.989, 47.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926103;  // std dev = 3.16e-08, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2832796250307635;  // std dev = 8.43e-08, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | else if ( movie(E, A) )
%   | | then return -0.010355088452907705;  // std dev = 0.422, 51.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=12 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839682;  // std dev = 4.59e-08, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1643835748978569;  // std dev = 0.250, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.22943028574665708;  // std dev = 0.000, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.0736128179994013;  // std dev = 2.847, 37.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109161;  // std dev = 5.16e-08, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1913965456581668;  // std dev = 1.49e-08, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | else if ( genre(A, E) )
%   | | then return -0.06274545837842017;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.07806504980247396;  // std dev = 2.808, 35.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333707;  // std dev = 0.000, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.15828167210751615;  // std dev = 0.271, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( movie(E, B) )
%   | | then return 0.12290910527523119;  // std dev = 2.846, 87.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=64 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420267;  // std dev = 4.06e-09, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1317638643398411;  // std dev = 0.585, 54.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=52 */
%   | else if ( genre(A, E) )
%   | | then return -0.0509365056646492;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.019999660756465903;  // std dev = 2.928, 42.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.135411
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.551 seconds
Total inference time: 1.694 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.979056
   AUC PR    = 0.863221
   CLL	      = -0.136855
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.8125
   F1        = 0.896552


Total scoring time: 1.469 seconds
Parameter learned model CLL: -0.136855


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [8.43e-08, 0, 52], 'true,false,false,true': [2.882, 27, 12], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.69e-08, 104, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.837, 1, 52], 'true,false,true': [0.0, 6, 0], 'true,false,false,true': [2.847, 25, 12], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 93, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.123, 5, 0], 'true,false,true': [0.388, 35, 64], 'true,false,false': [0.0, 0, 0], 'false,true': [8.82e-08, 111, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.69e-07, 0, 52], 'true,false,true': [0.0, 4, 0], 'true,false,false,true': [2.898, 28, 12], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.43e-09, 90, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.215, 5, 0], 'true,false,true': [2.98e-08, 0, 52], 'true,false,false,true': [2.989, 35, 12], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.16e-08, 93, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [8.43e-08, 0, 52], 'true,false,true': [0.422, 39, 12], 'true,false,false': [0.0, 0, 0], 'false,true': [4.59e-08, 76, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.25, 5, 0], 'true,false,true': [0.0, 0, 52], 'true,false,false,true': [2.847, 25, 12], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.16e-08, 90, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [1.49e-08, 0, 52], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [2.808, 23, 12], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 105, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.271, 5, 0], 'true,false,true': [2.846, 23, 64], 'true,false,false': [0.0, 0, 0], 'false,true': [4.06e-09, 74, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.585, 2, 52], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [2.928, 30, 12], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 98, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.21459128222915874, 7.259150545626024e-17], 'true': [0.0, 0.20867045042869145], 'true,false': [1.3664283380001927e-16, 0.21301775147928945], 'true,false,false': [0.21301775147928945, nan], 'false': [7.259150545626024e-17, nan]}, {'': [0.18006072548074273, -1.4325458382260084e-17], 'true': [0.013215414257097964, 0.19841636772393664], 'true,false': [-2.3129646346357427e-18, 0.2191380569758944], 'true,false,false': [0.2191380569758944, nan], 'false': [-1.4325458382260084e-17, nan]}, {'': [0.1538786582824437, 7.001406461600086e-17], 'true': [0.0030327637725743707, 0.15024694961725915], 'true,false': [0.15024694961725915, nan], 'false': [7.001406461600086e-17, nan]}, {'': [0.135040073606023, 2.837236618486511e-17], 'true': [5.465713352000771e-16, 0.1929322431089463], 'true,false': [0.0, 0.2100000000000001], 'true,false,false': [0.2100000000000001, nan], 'false': [2.837236618486511e-17, nan]}, {'': [0.12421425032782489, 1.0744093786695063e-17], 'true': [0.009232747087947645, 0.12237693009388673], 'true,false': [1.708035422500241e-17, 0.19013128112267963], 'true,false,false': [0.19013128112267963, nan], 'false': [1.0744093786695063e-17, nan]}, {'': [0.10960781377025433, 2.7755575615628914e-17], 'true': [1.3664283380001927e-16, 0.17783557765994887], 'true,false': [0.17783557765994887, nan], 'false': [2.7755575615628914e-17, nan]}, {'': [0.09795688992124559, 2.960594732333751e-17], 'true': [0.01248916140593596, 0.09699969420585332], 'true,false': [-5.978123978750843e-17, 0.21913805697589492], 'true,false,false': [0.21913805697589492, nan], 'false': [2.960594732333751e-17, nan]}, {'': [0.09257793242043372, -4.229421046191073e-18], 'true': [4.270088556250602e-18, 0.21414124215954708], 'true,false': [0.0, 0.22530612244897966], 'true,false,false': [0.22530612244897966, nan], 'false': [-4.229421046191073e-18, nan]}, {'': [0.09289469459312895, 1.5753164538600193e-17], 'true': [0.01473909389344491, 0.09308920810422715], 'true,false': [0.09308920810422715, nan], 'false': [1.5753164538600193e-17, nan]}, {'': [0.09764449686441651, -1.4727448285843914e-17], 'true': [0.006343806203446674, 0.1993572884170304], 'true,false': [0.0, 0.20408163265306117], 'true,false,false': [0.20408163265306117, nan], 'false': [-1.4727448285843914e-17, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 8.43e-08, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | else if ( actor(B) )
%   | | | then return -0.14185106490048774;  // std dev = 1.49e-08, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else return -0.14185106490048766;  // std dev = 7.74e-08, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109542;  // std dev = 7.30e-08, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0.696003466357084;  // std dev = 0.139, 36.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=35 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( actor(B) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | | else return 0.7194734122109542;  // std dev = 4.21e-08, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else return -0.12544463852839136;  // std dev = 0.000, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5585316147932015;  // std dev = 0.023, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else if ( actor(B) )
%   | | then return -0.1123163781936064;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else return -0.3561480447459247;  // std dev = 0.242, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.11231637819360622;  // std dev = 6.32e-08, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.42059113920368674;  // std dev = 0.019, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.41674402710751607;  // std dev = 2.98e-08, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.12825242311036694;  // std dev = 0.423, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   else return -0.10159632948783628;  // std dev = 3.65e-08, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1400607696739223;  // std dev = 0.116, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.32280157842679214;  // std dev = 0.017, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.3201901716440538;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.09846829823703085;  // std dev = 0.236, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   else return -0.09269127618926104;  // std dev = 2.36e-08, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( actor(A) )
%   | | then return 0.2565991856283277;  // std dev = 0.015, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | else return -0.2105746134065366;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( actor(B) )
%   | | then return -0.08256595782511693;  // std dev = 0.002, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | else return 0.254816245107288;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else return -0.08518475138839682;  // std dev = 5.27e-08, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10111617512104654;  // std dev = 0.088, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.21076610184707667;  // std dev = 0.013, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | else if ( actor(B) )
%   | | | then return -0.07664009174892922;  // std dev = 1.29e-08, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | | else return 0.20950621230881872;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else return -0.07877675473109161;  // std dev = 5.27e-08, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17139793676503698;  // std dev = 0.338, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | else if ( genre(A, E) )
%   | | then return -0.06882044121727116;  // std dev = 1.32e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( actor(B) )
%   | | | then return -0.0713894821416221;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | | else return 0.17691201001394874;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else return -0.07324622576333707;  // std dev = 0.000, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1538542721270103;  // std dev = 0.011, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else if ( actor(A) )
%   | | then return -0.06679925973786645;  // std dev = 5.27e-09, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | else return -0.22281087599588184;  // std dev = 0.431, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.06842697784420265;  // std dev = 4.83e-08, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13513222138754905;  // std dev = 0.009, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.1337528113113474;  // std dev = 1.05e-08, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.07573700634967016;  // std dev = 0.336, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   else return -0.06419184008202626;  // std dev = 0.000, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.062931
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.406 seconds
Total inference time: 1.667 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.066933
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.653 seconds
Refined model CLL: -0.066933


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.062931
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 7.079000000000001 seconds
Total inference time: 1.667 seconds
AUC ROC: 1.0
Total revision time: 7.079000000000001
Best scored revision CLL: -0.066933


Dataset: 4_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 00:26:18
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.062931, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 7.079000000000001, 'Inference time': 1.667, 'parameter_0.2': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.135411, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 1.551, 'Inference time': 1.694}}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995113;  // std dev = 4.30e-07, 101.000 (wgt'ed) examples reached here.  /* #pos=101 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.1273797043302805;  // std dev = 4.523, 104.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=28 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048835;  // std dev = 0.000, 191.000 (wgt'ed) examples reached here.  /* #neg=191 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7111899019095883;  // std dev = 0.841, 102.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=101 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.1335915286515745;  // std dev = 4.453, 96.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=28 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839174;  // std dev = 0.000, 222.000 (wgt'ed) examples reached here.  /* #neg=222 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12495519480472142;  // std dev = 0.107, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( movie(E, A) )
%   | | then return 0.35810273560245404;  // std dev = 0.382, 191.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=129 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.1123163781936066;  // std dev = 0.000, 199.000 (wgt'ed) examples reached here.  /* #neg=199 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.45511204969190655;  // std dev = 0.943, 103.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=101 */
%   | else if ( genre(A, E) )
%   | | then return -0.10044852251745502;  // std dev = 2.63e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.09069566117221184;  // std dev = 4.346, 86.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=28 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783652;  // std dev = 0.000, 191.000 (wgt'ed) examples reached here.  /* #neg=191 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14103376776456558;  // std dev = 0.171, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.35834521711821765;  // std dev = 1.79e-07, 101.000 (wgt'ed) examples reached here.  /* #pos=101 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.07783686404963791;  // std dev = 4.333, 85.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=28 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926051;  // std dev = 6.66e-08, 214.000 (wgt'ed) examples reached here.  /* #neg=214 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2650965434943951;  // std dev = 0.924, 104.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=101 */
%   | else if ( movie(E, A) )
%   | | then return 0.02382670181319881;  // std dev = 0.447, 99.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=28 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 7.74e-08, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13611275929121386;  // std dev = 0.353, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( genre(B, E) )
%   | | then return 0.23041038867602354;  // std dev = 0.000, 101.000 (wgt'ed) examples reached here.  /* #pos=101 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.06615414404387883;  // std dev = 4.307, 83.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=28 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109147;  // std dev = 7.74e-08, 184.000 (wgt'ed) examples reached here.  /* #neg=184 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18741059190696974;  // std dev = 0.476, 102.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=101 */
%   | else if ( genre(A, E) )
%   | | then return -0.0726943715628328;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.013405787142430355;  // std dev = 4.434, 94.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=28 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333664;  // std dev = 8.54e-09, 202.000 (wgt'ed) examples reached here.  /* #neg=202 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1786512547619051;  // std dev = 0.338, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( movie(E, B) )
%   | | then return 0.09834723416561388;  // std dev = 4.498, 191.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=129 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420262;  // std dev = 5.67e-09, 173.000 (wgt'ed) examples reached here.  /* #neg=173 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14305164097649078;  // std dev = 0.616, 103.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=101 */
%   | else if ( genre(A, E) )
%   | | then return -0.057466739449856134;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.00685679313768871;  // std dev = 4.381, 89.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=28 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 214.000 (wgt'ed) examples reached here.  /* #neg=214 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.138278
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.024 seconds
Total inference time: 1.653 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.973552
   AUC PR    = 0.833469
   CLL	      = -0.141461
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.782946
   F1        = 0.878261


Total scoring time: 2.039 seconds
Parameter learned model CLL: -0.141461


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 6, 0], 'true,false,true': [4.3e-07, 0, 101], 'true,false,false,true': [4.523, 76, 28], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 191, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.841, 1, 101], 'true,false,true': [0.0, 9, 0], 'true,false,false,true': [4.453, 68, 28], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 222, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.107, 9, 0], 'true,false,true': [0.382, 62, 129], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 199, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.943, 2, 101], 'true,false,true': [2.63e-09, 5, 0], 'true,false,false,true': [4.346, 58, 28], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 191, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.171, 4, 0], 'true,false,true': [1.79e-07, 0, 101], 'true,false,false,true': [4.333, 57, 28], 'true,false,false,false': [0.0, 0, 0], 'false,true': [6.66e-08, 214, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.924, 3, 101], 'true,false,true': [0.447, 71, 28], 'true,false,false': [0.0, 0, 0], 'false,true': [7.74e-08, 206, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.353, 13, 0], 'true,false,true': [0.0, 0, 101], 'true,false,false,true': [4.307, 55, 28], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.74e-08, 184, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.476, 1, 101], 'true,false,true': [0.0, 7, 0], 'true,false,false,true': [4.434, 66, 28], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.54e-09, 202, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.338, 7, 0], 'true,false,true': [4.498, 62, 129], 'true,false,false': [0.0, 0, 0], 'false,true': [5.67e-09, 173, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.616, 2, 101], 'true,false,true': [0.0, 6, 0], 'true,false,false,true': [4.381, 61, 28], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 214, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.23759574133555364, -2.2320714212359167e-16], 'true': [-6.938893903907228e-18, 0.23328970850684533], 'true,false': [1.8291199138378817e-15, 0.19674556213017866], 'true,false,false': [0.19674556213017866, nan], 'false': [-2.2320714212359167e-16, nan]}, {'': [0.1918170000261559, -5.001004615428633e-17], 'true': [0.006930270834196575, 0.19414731717223516], 'true,false': [0.0, 0.2065972222222218], 'true,false,false': [0.2065972222222218, nan], 'false': [-5.001004615428633e-17, nan]}, {'': [0.14910280108114493, -4.2400477322367786e-17], 'true': [0.001277917482635193, 0.14556784812667126], 'true,false': [0.14556784812667126, nan], 'false': [-4.2400477322367786e-17, nan]}, {'': [0.1378158154361549, -9.416551308339024e-17], 'true': [0.008627460814938367, 0.2094105937934157], 'true,false': [1.3877787807814458e-18, 0.21957815035154205], 'true,false,false': [0.21957815035154205, nan], 'false': [-9.416551308339024e-17, nan]}, {'': [0.12093126963182241, 2.0751832235984234e-17], 'true': [0.007292762226641082, 0.12047443942028997], 'true,false': [3.165784466257872e-16, 0.2208996539792384], 'true,false,false': [0.2208996539792384, nan], 'false': [2.0751832235984234e-17, nan]}, {'': [0.11625516622657228, 2.910293365522255e-17], 'true': [0.008216532761029908, 0.19992784216180656], 'true,false': [0.19992784216180656, nan], 'false': [2.910293365522255e-17, nan]}, {'': [0.10632833765145765, 3.2582632244433945e-17], 'true': [0.00960956839780667, 0.10751861408446539], 'true,false': [-2.1984614349013e-16, 0.2235447815357819], 'true,false,false': [0.2235447815357819, nan], 'false': [3.2582632244433945e-17, nan]}, {'': [0.10629761146644788, 7.25492273517429e-17], 'true': [0.0022234639775721003, 0.19512743176542663], 'true,false': [0.0, 0.2091444092349471], 'true,false,false': [0.2091444092349471, nan], 'false': [7.25492273517429e-17, nan]}, {'': [0.10537621014062167, 3.1445623240828136e-17], 'true': [0.01634154683992367, 0.10592664880951158], 'true,false': [0.10592664880951158, nan], 'false': [3.1445623240828136e-17, nan]}, {'': [0.10386816269041188, -5.187958058996058e-19], 'true': [0.0036839493666054194, 0.20225545722002333], 'true,false': [-5.782411586589357e-19, 0.21562933972983153], 'true,false,false': [0.21562933972983153, nan], 'false': [-5.187958058996058e-19, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995113;  // std dev = 4.30e-07, 101.000 (wgt'ed) examples reached here.  /* #pos=101 */
%   | | else if ( actor(B) )
%   | | | then return -0.14185106490048768;  // std dev = 5.16e-08, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | | | else return 0.8581489350995117;  // std dev = 1.69e-07, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   else return -0.14185106490048838;  // std dev = 0.000, 198.000 (wgt'ed) examples reached here.  /* #neg=198 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109551;  // std dev = 0.000, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | else return 0.6922179912193626;  // std dev = 0.149, 62.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=60 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.7194734122109546;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return -0.13152628359743682;  // std dev = 0.215, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   else return -0.12544463852839155;  // std dev = 0.000, 185.000 (wgt'ed) examples reached here.  /* #neg=185 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1293082680084763;  // std dev = 0.144, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( director(B), actor(A) )
%   | | then return 0.5584919014007634;  // std dev = 0.038, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | else return -0.11874669767298351;  // std dev = 0.242, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   else return -0.1123163781936067;  // std dev = 0.000, 215.000 (wgt'ed) examples reached here.  /* #neg=215 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( actor(A) )
%   | | then return 0.4206980150295598;  // std dev = 0.033, 101.000 (wgt'ed) examples reached here.  /* #pos=101 */
%   | | else return -0.20117907873307414;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(A, E) )
%   | | then return -0.10005586839800752;  // std dev = 3.73e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.41675368021189724;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return -0.10310837091093703;  // std dev = 0.131, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   else return -0.1015963294878365;  // std dev = 0.000, 190.000 (wgt'ed) examples reached here.  /* #neg=190 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10132227700810713;  // std dev = 0.074, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( genre(B, E) )
%   | | then return 0.3228753271646354;  // std dev = 0.029, 101.000 (wgt'ed) examples reached here.  /* #pos=101 */
%   | | else if ( actor(B) )
%   | | | then return -0.09151858062149822;  // std dev = 0.000, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   | | | else return 0.3201967148549956;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   else return -0.09269127618926061;  // std dev = 8.43e-08, 176.000 (wgt'ed) examples reached here.  /* #neg=176 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.25625310519791294;  // std dev = 0.027, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.09009594664809668;  // std dev = 0.211, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   else return -0.08518475138839678;  // std dev = 7.30e-08, 190.000 (wgt'ed) examples reached here.  /* #neg=190 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10166287995256017;  // std dev = 0.110, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( genre(B, E) )
%   | | then return 0.21086861574706464;  // std dev = 0.022, 101.000 (wgt'ed) examples reached here.  /* #pos=101 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.20927223992486257;  // std dev = 2.58e-08, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return -0.08412075176531744;  // std dev = 0.248, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   else return -0.07877675473109147;  // std dev = 7.30e-08, 198.000 (wgt'ed) examples reached here.  /* #neg=198 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17486188554164697;  // std dev = 0.310, 102.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=101 */
%   | else if ( genre(A, E) )
%   | | then return -0.06980160137276707;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.1767403423935455;  // std dev = 2.58e-08, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return -0.079371864524197;  // std dev = 0.286, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   else return -0.07324622576333666;  // std dev = 1.15e-07, 195.000 (wgt'ed) examples reached here.  /* #neg=195 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.1534799917645381;  // std dev = 0.018, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.07578092997793688;  // std dev = 0.263, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   else return -0.06842697784420262;  // std dev = 8.36e-08, 207.000 (wgt'ed) examples reached here.  /* #neg=207 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( actor(A) )
%   | | then return 0.134831961411715;  // std dev = 0.016, 101.000 (wgt'ed) examples reached here.  /* #pos=101 */
%   | | else return -0.1450306441076493;  // std dev = 3.73e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(A, E) )
%   | | then return -0.06092089645449427;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.1336794380895294;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return -0.06425520604757994;  // std dev = 0.150, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   else return -0.06419184008202626;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #neg=204 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.062946
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.024 seconds
Total inference time: 1.665 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.065225
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.047 seconds
Refined model CLL: -0.065225


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.062946
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 9.134 seconds
Total inference time: 1.665 seconds
AUC ROC: 1.0
Total revision time: 9.134
Best scored revision CLL: -0.065225


Dataset: 4_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 00:26:31
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.062946, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 9.134, 'Inference time': 1.665, 'parameter_0.4': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.138278, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 2.024, 'Inference time': 1.653}}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995098;  // std dev = 9.54e-07, 154.000 (wgt'ed) examples reached here.  /* #pos=154 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.1706489350995114;  // std dev = 5.244, 128.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=40 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048774;  // std dev = 1.52e-07, 317.000 (wgt'ed) examples reached here.  /* #neg=317 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7033284813051088;  // std dev = 1.449, 157.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=154 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.1932235789227863;  // std dev = 5.071, 112.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=40 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.125444638528392;  // std dev = 0.000, 300.000 (wgt'ed) examples reached here.  /* #neg=300 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14536840111730567;  // std dev = 0.211, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( movie(E, A) )
%   | | then return 0.35046844455109666;  // std dev = 0.385, 287.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=194 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360692;  // std dev = 0.000, 259.000 (wgt'ed) examples reached here.  /* #neg=259 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.45089720488233204;  // std dev = 1.480, 159.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=154 */
%   | else if ( genre(A, E) )
%   | | then return -0.09861899878679153;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.03741848223591356;  // std dev = 5.330, 138.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=40 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1015963294878366;  // std dev = 0.000, 269.000 (wgt'ed) examples reached here.  /* #neg=269 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.15423444570266334;  // std dev = 0.314, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( genre(B, E) )
%   | | then return 0.3628898846875243;  // std dev = 0.000, 154.000 (wgt'ed) examples reached here.  /* #pos=154 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.04118877485184189;  // std dev = 5.289, 133.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=40 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926044;  // std dev = 1.28e-07, 272.000 (wgt'ed) examples reached here.  /* #neg=272 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2769202872651885;  // std dev = 0.753, 156.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=154 */
%   | else if ( movie(E, A) )
%   | | then return 0.04648536919862966;  // std dev = 0.450, 134.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=40 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 9.88e-08, 281.000 (wgt'ed) examples reached here.  /* #neg=281 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.15709686892449498;  // std dev = 0.261, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.23100355656387392;  // std dev = 1.40e-07, 154.000 (wgt'ed) examples reached here.  /* #pos=154 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.0195314928348887;  // std dev = 5.305, 135.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=40 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109144;  // std dev = 4.94e-08, 271.000 (wgt'ed) examples reached here.  /* #neg=271 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18951066471371616;  // std dev = 0.466, 155.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=154 */
%   | else if ( genre(A, E) )
%   | | then return -0.07069060479435617;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.036768976949655995;  // std dev = 5.225, 126.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=40 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333699;  // std dev = 5.43e-09, 306.000 (wgt'ed) examples reached here.  /* #neg=306 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1407618866231122;  // std dev = 0.360, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( movie(E, B) )
%   | | then return 0.1138518970056404;  // std dev = 5.241, 273.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=194 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420307;  // std dev = 0.000, 315.000 (wgt'ed) examples reached here.  /* #neg=315 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13868119986237376;  // std dev = 0.859, 158.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=154 */
%   | else if ( genre(A, E) )
%   | | then return -0.05799894683729467;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.0028808577988442;  // std dev = 5.235, 127.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=40 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.064191840082026;  // std dev = 6.25e-09, 291.000 (wgt'ed) examples reached here.  /* #neg=291 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.139479
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.346 seconds
Total inference time: 1.814 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.974668
   AUC PR    = 0.842351
   CLL	      = -0.143145
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.793814
   F1        = 0.885057


Total scoring time: 2.368 seconds
Parameter learned model CLL: -0.143145


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 10, 0], 'true,false,true': [9.54e-07, 0, 154], 'true,false,false,true': [5.244, 88, 40], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.52e-07, 317, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.449, 3, 154], 'true,false,true': [0.0, 8, 0], 'true,false,false,true': [5.071, 72, 40], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 300, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.211, 17, 0], 'true,false,true': [0.385, 93, 194], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 259, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.48, 5, 154], 'true,false,true': [0.0, 17, 0], 'true,false,false,true': [5.33, 98, 40], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 269, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.314, 12, 0], 'true,false,true': [0.0, 0, 154], 'true,false,false,true': [5.289, 93, 40], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.28e-07, 272, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.753, 2, 154], 'true,false,true': [0.45, 94, 40], 'true,false,false': [0.0, 0, 0], 'false,true': [9.88e-08, 281, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.261, 6, 0], 'true,false,true': [1.4e-07, 0, 154], 'true,false,false,true': [5.305, 95, 40], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.94e-08, 271, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.466, 1, 154], 'true,false,true': [0.0, 8, 0], 'true,false,false,true': [5.225, 86, 40], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.43e-09, 306, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.36, 10, 0], 'true,false,true': [5.241, 79, 194], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 315, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.859, 4, 154], 'true,false,true': [0.0, 12, 0], 'true,false,false,true': [5.235, 87, 40], 'true,false,false,false': [0.0, 0, 0], 'false,true': [6.25e-09, 291, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.2229780446612922, 7.284744136341721e-17], 'true': [-1.1102230246251566e-17, 0.21467733011418438], 'true,false': [5.905809751772262e-15, 0.21484375000000128], 'true,false,false': [0.21484375000000128, nan], 'false': [7.284744136341721e-17, nan]}, {'': [0.17247626998648752, -8.585724723767877e-17], 'true': [0.013380484756332895, 0.22060434566077677], 'true,false': [0.0, 0.22959183673469333], 'true,false,false': [0.22959183673469333, nan], 'false': [-8.585724723767877e-17, nan]}, {'': [0.1528278509568746, -8.744613784692352e-17], 'true': [0.0026218469264369694, 0.14797664630688334], 'true,false': [0.14797664630688334, nan], 'false': [-8.744613784692352e-17, nan]}, {'': [0.1442038995473909, -6.273379172603116e-17], 'true': [0.013771697164813726, 0.1850703053948264], 'true,false': [-6.530723674265627e-18, 0.20583910943079092], 'true,false,false': [0.20583910943079092, nan], 'false': [-6.273379172603116e-17, nan]}, {'': [0.12379383904583566, 6.040919398695704e-17], 'true': [0.008202664677536256, 0.1231905626583336], 'true,false': [-5.536696642286495e-16, 0.21030018655661634], 'true,false,false': [0.21030018655661634, nan], 'false': [6.040919398695704e-17, nan]}, {'': [0.10887310500231585, 3.476855023737145e-17], 'true': [0.003635135093086721, 0.2028246773667773], 'true,false': [0.2028246773667773, nan], 'false': [3.476855023737145e-17, nan]}, {'': [0.10822168903393925, 9.012880642713448e-18], 'true': [0.011359466631569462, 0.10853022152780263], 'true,false': [1.2688263138573217e-16, 0.2085048010973946], 'true,false,false': [0.2085048010973946, nan], 'false': [9.012880642713448e-18, nan]}, {'': [0.10182179294557164, 2.9025438552291676e-17], 'true': [0.0014035074162381668, 0.20439143687987185], 'true,false': [-1.734723475976807e-18, 0.2166792642983128], 'true,false,false': [0.2166792642983128, nan], 'false': [2.9025438552291676e-17, nan]}, {'': [0.09973739797349121, -6.908054375445419e-17], 'true': [0.012977223913366708, 0.10062467795936496], 'true,false': [0.10062467795936496, nan], 'false': [-6.908054375445419e-17, nan]}, {'': [0.09983496573958932, 3.8915033852840536e-17], 'true': [0.004667590796377729, 0.1974259808483659], 'true,false': [-1.734723475976807e-18, 0.21576043152086188], 'true,false,false': [0.21576043152086188, nan], 'false': [3.8915033852840536e-17, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995098;  // std dev = 9.54e-07, 154.000 (wgt'ed) examples reached here.  /* #pos=154 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.8581489350995117;  // std dev = 2.46e-07, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | | else return -0.14185106490048763;  // std dev = 8.02e-08, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
%   else return -0.14185106490048796;  // std dev = 0.000, 283.000 (wgt'ed) examples reached here.  /* #neg=283 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( actor(A) )
%   | | then return 0.7194734122109563;  // std dev = 0.000, 154.000 (wgt'ed) examples reached here.  /* #pos=154 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.719473412210955;  // std dev = 0.000, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | | else return -0.12544463852839144;  // std dev = 0.000, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
%   else return -0.12544463852839202;  // std dev = 0.000, 309.000 (wgt'ed) examples reached here.  /* #neg=309 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5553664367462833;  // std dev = 6.19e-07, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.11231637819360624;  // std dev = 7.74e-08, 110.000 (wgt'ed) examples reached here.  /* #neg=110 */
%   else return -0.11231637819360693;  // std dev = 0.000, 272.000 (wgt'ed) examples reached here.  /* #neg=272 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.4175135841583106;  // std dev = 0.000, 61.000 (wgt'ed) examples reached here.  /* #pos=61 */
%   | | else return 0.40658495439733855;  // std dev = 0.075, 95.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=93 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783634;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.4175135841583105;  // std dev = 0.000, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | | else return -0.10159632948783619;  // std dev = 5.05e-08, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
%   else return -0.1015963294878366;  // std dev = 0.000, 281.000 (wgt'ed) examples reached here.  /* #neg=281 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10143711014220595;  // std dev = 0.048, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.32215245055362385;  // std dev = 0.014, 154.000 (wgt'ed) examples reached here.  /* #pos=154 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.32071184716014944;  // std dev = 2.98e-08, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | | else return -0.09269127618926098;  // std dev = 4.08e-08, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
%   else return -0.09269127618926044;  // std dev = 1.37e-07, 279.000 (wgt'ed) examples reached here.  /* #neg=279 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.25595265033151243;  // std dev = 0.014, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.08558217563050431;  // std dev = 0.048, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
%   else return -0.08518475138839678;  // std dev = 1.01e-07, 288.000 (wgt'ed) examples reached here.  /* #neg=288 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08783282445009802;  // std dev = 0.070, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( genre(B, E) )
%   | | then return 0.2104858309533216;  // std dev = 0.011, 154.000 (wgt'ed) examples reached here.  /* #pos=154 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.20962838499827696;  // std dev = 0.000, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | | else return -0.07874791809305988;  // std dev = 0.000, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
%   else return -0.07877675473109141;  // std dev = 4.21e-08, 297.000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( actor(A) )
%   | | then return 0.1776304887321321;  // std dev = 0.010, 154.000 (wgt'ed) examples reached here.  /* #pos=154 */
%   | | else return -0.1142668479962359;  // std dev = 6.45e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(A, E) )
%   | | then return -0.07202038771833282;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.17700163405553965;  // std dev = 3.65e-08, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | | else return -0.07322120952374699;  // std dev = 0.000, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
%   else return -0.07324622576333692;  // std dev = 1.03e-07, 285.000 (wgt'ed) examples reached here.  /* #neg=285 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.15305055853338656;  // std dev = 0.009, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.06973449376235995;  // std dev = 0.077, 119.000 (wgt'ed) examples reached here.  /* #neg=119 */
%   else return -0.06842697784420289;  // std dev = 0.000, 278.000 (wgt'ed) examples reached here.  /* #neg=278 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( director(A) )
%   | | then return -0.09692390969725306;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.13433467098971638;  // std dev = 0.008, 154.000 (wgt'ed) examples reached here.  /* #pos=154 */
%   | else if ( genre(A, E) )
%   | | then return -0.06310238727794848;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.1339069212121128;  // std dev = 3.16e-08, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | | else return -0.06409272854776013;  // std dev = 0.000, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
%   else return -0.06419184008202605;  // std dev = 9.42e-08, 282.000 (wgt'ed) examples reached here.  /* #neg=282 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063423
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.832 seconds
Total inference time: 1.626 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064388
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.282 seconds
Refined model CLL: -0.064388


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063423
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 10.828 seconds
Total inference time: 1.626 seconds
AUC ROC: 1.0
Total revision time: 10.828
Best scored revision CLL: -0.064388


Dataset: 4_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 00:26:46
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063423, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 10.828, 'Inference time': 1.626, 'parameter_0.6': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.139479, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 2.346, 'Inference time': 1.814}}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995091;  // std dev = 1.08e-06, 213.000 (wgt'ed) examples reached here.  /* #pos=213 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.14564893509951218;  // std dev = 5.725, 160.000 (wgt'ed) examples reached here.  /* #neg=114 #pos=46 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048752;  // std dev = 2.33e-07, 354.000 (wgt'ed) examples reached here.  /* #neg=354 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.6925896560510687;  // std dev = 2.200, 220.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=213 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 7.45e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.10537419626552474;  // std dev = 5.811, 173.000 (wgt'ed) examples reached here.  /* #neg=127 #pos=46 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839227;  // std dev = 0.000, 422.000 (wgt'ed) examples reached here.  /* #neg=422 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12705126359106148;  // std dev = 0.145, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( movie(E, A) )
%   | | then return 0.34803841624000714;  // std dev = 0.378, 388.000 (wgt'ed) examples reached here.  /* #neg=129 #pos=259 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360632;  // std dev = 0.000, 378.000 (wgt'ed) examples reached here.  /* #neg=378 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4567798435530487;  // std dev = 1.635, 219.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=213 */
%   | else if ( genre(A, E) )
%   | | then return -0.10025928319594567;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.04747956567924645;  // std dev = 5.760, 165.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=46 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783613;  // std dev = 8.43e-09, 371.000 (wgt'ed) examples reached here.  /* #neg=371 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13303117769613332;  // std dev = 0.297, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( genre(B, E) )
%   | | then return 0.3645761406514937;  // std dev = 3.32e-07, 213.000 (wgt'ed) examples reached here.  /* #pos=213 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.038930008304033085;  // std dev = 5.760, 165.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=46 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926067;  // std dev = 1.79e-07, 372.000 (wgt'ed) examples reached here.  /* #neg=372 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2773799104206925;  // std dev = 0.935, 216.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=213 */
%   | else if ( movie(E, A) )
%   | | then return 0.020512450507406833;  // std dev = 0.431, 180.000 (wgt'ed) examples reached here.  /* #neg=134 #pos=46 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.23e-07, 388.000 (wgt'ed) examples reached here.  /* #neg=388 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.15423953340038923;  // std dev = 0.387, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( genre(B, E) )
%   | | then return 0.23191795285784111;  // std dev = 0.000, 213.000 (wgt'ed) examples reached here.  /* #pos=213 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.026245720132335223;  // std dev = 5.767, 166.000 (wgt'ed) examples reached here.  /* #neg=120 #pos=46 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109143;  // std dev = 7.30e-08, 351.000 (wgt'ed) examples reached here.  /* #neg=351 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18440896361767284;  // std dev = 0.944, 217.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=213 */
%   | else if ( genre(A, E) )
%   | | then return -0.0716667074784309;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.039044529839350715;  // std dev = 5.695, 156.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=46 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333717;  // std dev = 2.63e-09, 378.000 (wgt'ed) examples reached here.  /* #neg=378 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10952026256908538;  // std dev = 0.329, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( movie(E, B) )
%   | | then return 0.08643858405317119;  // std dev = 6.099, 393.000 (wgt'ed) examples reached here.  /* #neg=134 #pos=259 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420326;  // std dev = 0.000, 369.000 (wgt'ed) examples reached here.  /* #neg=369 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14813847251880805;  // std dev = 0.779, 216.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=213 */
%   | else if ( genre(A, E) )
%   | | then return -0.060508695529639785;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.026294844557584532;  // std dev = 5.857, 181.000 (wgt'ed) examples reached here.  /* #neg=135 #pos=46 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202561;  // std dev = 9.77e-09, 398.000 (wgt'ed) examples reached here.  /* #neg=398 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.12676
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.741 seconds
Total inference time: 1.913 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.978143
   AUC PR    = 0.864808
   CLL	      = -0.131438
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.822394
   F1        = 0.902542


Total scoring time: 2.691 seconds
Parameter learned model CLL: -0.131438


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 15, 0], 'true,false,true': [1.08e-06, 0, 213], 'true,false,false,true': [5.725, 114, 46], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.33e-07, 354, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [2.2, 7, 213], 'true,false,true': [7.45e-09, 15, 0], 'true,false,false,true': [5.811, 127, 46], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 422, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.145, 15, 0], 'true,false,true': [0.378, 129, 259], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 378, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.635, 6, 213], 'true,false,true': [0.0, 15, 0], 'true,false,false,true': [5.76, 119, 46], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.43e-09, 371, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.297, 14, 0], 'true,false,true': [3.32e-07, 0, 213], 'true,false,false,true': [5.76, 119, 46], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.79e-07, 372, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.935, 3, 213], 'true,false,true': [0.431, 134, 46], 'true,false,false': [0.0, 0, 0], 'false,true': [1.23e-07, 388, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.387, 13, 0], 'true,false,true': [0.0, 0, 213], 'true,false,false,true': [5.767, 120, 46], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.3e-08, 351, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.944, 4, 213], 'true,false,true': [0.0, 19, 0], 'true,false,false,true': [5.695, 110, 46], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.63e-09, 378, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.329, 12, 0], 'true,false,true': [6.099, 134, 259], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 369, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.779, 3, 213], 'true,false,true': [0.0, 16, 0], 'true,false,false,true': [5.857, 135, 46], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.77e-09, 398, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.22193511531512744, 1.5304769379013457e-16], 'true': [-1.4802973661668754e-17, 0.2122203135219869], 'true,false': [5.470845477213917e-15, 0.20484375000000102], 'true,false,false': [0.20484375000000102, nan], 'false': [1.5304769379013457e-16, nan]}, {'': [0.18756083007378804, -1.304906682971748e-16], 'true': [0.021991834505896563, 0.18353289030454079], 'true,false': [3.7007434154171884e-18, 0.19519529553276194], 'true,false,false': [0.19519529553276194, nan], 'false': [-1.304906682971748e-16, nan]}, {'': [0.14592498207312812, -2.5846461948945442e-17], 'true': [0.0014112595098948928, 0.14311072857680918], 'true,false': [0.14311072857680918, nan], 'false': [-2.5846461948945442e-17, nan]}, {'': [0.1346159121362221, 7.062335143168112e-17], 'true': [0.012210322794708718, 0.1859770868246026], 'true,false': [-7.401486830834377e-18, 0.20106519742883433], 'true,false,false': [0.20106519742883433, nan], 'false': [7.062335143168112e-17, nan]}, {'': [0.11436083487877376, 8.59527502935605e-17], 'true': [0.006302908034199058, 0.11385041061347616], 'true,false': [5.17061615224486e-16, 0.20106519742883455], 'true,false,false': [0.20106519742883455, nan], 'false': [8.59527502935605e-17, nan]}, {'': [0.10309723610566864, 3.8915033852840536e-17], 'true': [0.0040481281859442485, 0.18596658817535605], 'true,false': [0.18596658817535605, nan], 'false': [3.8915033852840536e-17, nan]}, {'': [0.09808973058347902, 1.518253708889103e-17], 'true': [0.01153751206184562, 0.09815145191389606], 'true,false': [-4.837028013390353e-16, 0.2003193496879078], 'true,false,false': [0.2003193496879078, nan], 'false': [1.518253708889103e-17, nan]}, {'': [0.0916671745383794, 5.8741958974876004e-18], 'true': [0.004103475823082309, 0.1865342607110824], 'true,false': [-4.382459307730881e-18, 0.20792241946088133], 'true,false,false': [0.20792241946088133, nan], 'false': [5.8741958974876004e-18, nan]}, {'': [0.0932044081970334, -9.748299728416009e-17], 'true': [0.009021756851704692, 0.09463709692036092], 'true,false': [0.09463709692036092, nan], 'false': [-9.748299728416009e-17, nan]}, {'': [0.09241901565470706, 9.484317295792795e-17], 'true': [0.002809439727293314, 0.17424670303094314], 'true,false': [-4.336808689942018e-19, 0.1895546533988583], 'true,false,false': [0.1895546533988583, nan], 'false': [9.484317295792795e-17, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995091;  // std dev = 1.08e-06, 213.000 (wgt'ed) examples reached here.  /* #pos=213 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.8581489350995121;  // std dev = 2.06e-07, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | | | else return -0.14185106490048763;  // std dev = 8.69e-08, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
%   else return -0.14185106490048738;  // std dev = 2.87e-07, 388.000 (wgt'ed) examples reached here.  /* #neg=388 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109541;  // std dev = 2.53e-07, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   | | else return 0.7005573364481344;  // std dev = 0.125, 134.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=131 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.719473412210955;  // std dev = 0.000, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | | | else return -0.1254446385283913;  // std dev = 0.000, 127.000 (wgt'ed) examples reached here.  /* #neg=127 */
%   else return -0.12544463852839227;  // std dev = 0.000, 405.000 (wgt'ed) examples reached here.  /* #neg=405 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( actor(B) )
%   | | then return -0.11231637819360638;  // std dev = 7.45e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return -0.22421087385322652;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( director(B), actor(A) )
%   | | then return 0.5577264633963659;  // std dev = 0.038, 259.000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | | else return -0.1123163781936062;  // std dev = 9.31e-08, 128.000 (wgt'ed) examples reached here.  /* #neg=128 */
%   else return -0.11231637819360617;  // std dev = 0.000, 409.000 (wgt'ed) examples reached here.  /* #neg=409 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.4169397471131624;  // std dev = 2.19e-07, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   | | else if ( actor(A) )
%   | | | then return 0.42154536283474237;  // std dev = 1.98e-07, 131.000 (wgt'ed) examples reached here.  /* #pos=131 */
%   | | | else return -0.18762685405973012;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783631;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.4169397471131618;  // std dev = 0.000, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | | | else return -0.10159632948783642;  // std dev = 0.000, 136.000 (wgt'ed) examples reached here.  /* #neg=136 */
%   else return -0.10159632948783585;  // std dev = 2.37e-07, 411.000 (wgt'ed) examples reached here.  /* #neg=411 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( actor(B) )
%   | | then return -0.09269127618926097;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return -0.16068617331073368;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.3222439250688421;  // std dev = 0.022, 213.000 (wgt'ed) examples reached here.  /* #pos=213 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.3203228401494425;  // std dev = 7.88e-08, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | | | else return -0.09269127618926079;  // std dev = 7.74e-08, 132.000 (wgt'ed) examples reached here.  /* #neg=132 */
%   else return -0.09269127618926065;  // std dev = 1.85e-07, 370.000 (wgt'ed) examples reached here.  /* #neg=370 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2559851119138146;  // std dev = 0.021, 259.000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.08660697411149285;  // std dev = 0.094, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
%   else return -0.08518475138839678;  // std dev = 1.32e-07, 392.000 (wgt'ed) examples reached here.  /* #neg=392 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( female(B) )
%   | | then return -0.07867360444961108;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.08657926917173943;  // std dev = 0.019, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( genre(B, E) )
%   | | then return 0.2105352161175262;  // std dev = 0.017, 213.000 (wgt'ed) examples reached here.  /* #pos=213 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.20939161369835552;  // std dev = 0.000, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | | | else return -0.07867360444961123;  // std dev = 0.000, 107.000 (wgt'ed) examples reached here.  /* #neg=107 */
%   else return -0.07877675473109143;  // std dev = 2.15e-07, 377.000 (wgt'ed) examples reached here.  /* #neg=377 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.1763822791702871;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   | | else if ( director(A) )
%   | | | then return -0.12057419899093309;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.17847081881091623;  // std dev = 1.30e-07, 131.000 (wgt'ed) examples reached here.  /* #pos=131 */
%   | else if ( genre(A, E) )
%   | | then return -0.07277513827986834;  // std dev = 0.000903, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.17682793275854872;  // std dev = 0.000, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | | | else return -0.07315673591030444;  // std dev = 6.05e-08, 134.000 (wgt'ed) examples reached here.  /* #neg=134 */
%   else return -0.0732462257633377;  // std dev = 0.000, 383.000 (wgt'ed) examples reached here.  /* #neg=383 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.15306297748644712;  // std dev = 0.012, 259.000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.06917359169720881;  // std dev = 0.069, 141.000 (wgt'ed) examples reached here.  /* #neg=141 */
%   else return -0.06842697784420328;  // std dev = 0.000, 375.000 (wgt'ed) examples reached here.  /* #neg=375 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.133484102483284;  // std dev = 8.16e-08, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   | | else if ( actor(A) )
%   | | | then return 0.13490410758895555;  // std dev = 1.07e-07, 131.000 (wgt'ed) examples reached here.  /* #pos=131 */
%   | | | else return -0.10185771044391645;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(A, E) )
%   | | then return -0.06384591055234691;  // std dev = 0.000973, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( actor(B) )
%   | | | then return -0.06407322968690174;  // std dev = 0.000, 134.000 (wgt'ed) examples reached here.  /* #neg=134 */
%   | | | else return 0.1295775277177282;  // std dev = 0.196, 47.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=46 */
%   else return -0.06419184008202569;  // std dev = 1.76e-07, 371.000 (wgt'ed) examples reached here.  /* #neg=371 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063435
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 4.214 seconds
Total inference time: 2.354 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064489
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 3.033 seconds
Refined model CLL: -0.064489


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063435
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 12.679 seconds
Total inference time: 2.354 seconds
AUC ROC: 1.0
Total revision time: 12.679
Best scored revision CLL: -0.064489


Dataset: 4_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 00:27:03
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063435, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 12.679, 'Inference time': 2.354, 'parameter_0.8': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.12676, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 2.741, 'Inference time': 1.913}}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995086;  // std dev = 1.08e-06, 265.000 (wgt'ed) examples reached here.  /* #pos=265 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.15764132088631558;  // std dev = 6.429, 197.000 (wgt'ed) examples reached here.  /* #neg=138 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 505.000 (wgt'ed) examples reached here.  /* #neg=505 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7162970285615615;  // std dev = 0.843, 266.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=265 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 7.45e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.10007785003807636;  // std dev = 6.598, 225.000 (wgt'ed) examples reached here.  /* #neg=166 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839227;  // std dev = 0.000, 494.000 (wgt'ed) examples reached here.  /* #neg=494 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14358296246772081;  // std dev = 0.239, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else if ( movie(E, A) )
%   | | then return 0.33609153576992074;  // std dev = 0.380, 494.000 (wgt'ed) examples reached here.  /* #neg=170 #pos=324 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360592;  // std dev = 0.000, 470.000 (wgt'ed) examples reached here.  /* #neg=470 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4648360451444831;  // std dev = 1.163, 268.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=265 */
%   | else if ( genre(A, E) )
%   | | then return -0.09877782608576255;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.04792588078872749;  // std dev = 6.525, 212.000 (wgt'ed) examples reached here.  /* #neg=153 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783556;  // std dev = 1.44e-08, 464.000 (wgt'ed) examples reached here.  /* #neg=464 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12000252893262005;  // std dev = 0.316, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else if ( genre(B, E) )
%   | | then return 0.3599978343184394;  // std dev = 4.69e-07, 265.000 (wgt'ed) examples reached here.  /* #pos=265 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.05899682263624932;  // std dev = 6.436, 198.000 (wgt'ed) examples reached here.  /* #neg=139 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926151;  // std dev = 0.000, 511.000 (wgt'ed) examples reached here.  /* #neg=511 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2797835197416825;  // std dev = 0.545, 266.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=265 */
%   | else if ( movie(E, A) )
%   | | then return 0.017235285501316568;  // std dev = 0.431, 231.000 (wgt'ed) examples reached here.  /* #neg=172 #pos=59 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.43e-07, 500.000 (wgt'ed) examples reached here.  /* #neg=500 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12393218723085579;  // std dev = 0.436, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else if ( genre(B, E) )
%   | | then return 0.2287902221665323;  // std dev = 4.34e-07, 265.000 (wgt'ed) examples reached here.  /* #pos=265 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.013846522115840707;  // std dev = 6.576, 221.000 (wgt'ed) examples reached here.  /* #neg=162 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109205;  // std dev = 0.000, 496.000 (wgt'ed) examples reached here.  /* #neg=496 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18548914142667802;  // std dev = 0.838, 268.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=265 */
%   | else if ( genre(A, E) )
%   | | then return -0.07334847103519596;  // std dev = 5.27e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.023872411444849785;  // std dev = 6.519, 211.000 (wgt'ed) examples reached here.  /* #neg=152 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333693;  // std dev = 6.65e-09, 495.000 (wgt'ed) examples reached here.  /* #neg=495 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.17535000486910418;  // std dev = 0.585, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else if ( movie(E, B) )
%   | | then return 0.09755191871481649;  // std dev = 6.734, 479.000 (wgt'ed) examples reached here.  /* #neg=155 #pos=324 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420347;  // std dev = 0.000, 454.000 (wgt'ed) examples reached here.  /* #neg=454 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14266486758361324;  // std dev = 0.994, 270.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=265 */
%   | else if ( genre(A, E) )
%   | | then return -0.0581371717181646;  // std dev = 3.73e-09, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( movie(F, B) )
%   | | | then return 8.406541084225799E-5;  // std dev = 6.519, 211.000 (wgt'ed) examples reached here.  /* #neg=152 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0641918400820255;  // std dev = 1.03e-08, 436.000 (wgt'ed) examples reached here.  /* #neg=436 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.12814
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.281 seconds
Total inference time: 1.812 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.977686
   AUC PR    = 0.861626
   CLL	      = -0.132585
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.817901
   F1        = 0.89983


Total scoring time: 3.232 seconds
Parameter learned model CLL: -0.132585


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 14, 0], 'true,false,true': [1.08e-06, 0, 265], 'true,false,false,true': [6.429, 138, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 505, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.843, 1, 265], 'true,false,true': [7.45e-09, 16, 0], 'true,false,false,true': [6.598, 166, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 494, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.239, 22, 0], 'true,false,true': [0.38, 170, 324], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 470, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.163, 3, 265], 'true,false,true': [0.0, 13, 0], 'true,false,false,true': [6.525, 153, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.44e-08, 464, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.316, 20, 0], 'true,false,true': [4.69e-07, 0, 265], 'true,false,false,true': [6.436, 139, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 511, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.545, 1, 265], 'true,false,true': [0.431, 172, 59], 'true,false,false': [0.0, 0, 0], 'false,true': [1.43e-07, 500, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.436, 23, 0], 'true,false,true': [4.34e-07, 0, 265], 'true,false,false,true': [6.576, 162, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 496, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.838, 3, 265], 'true,false,true': [5.27e-09, 16, 0], 'true,false,false,true': [6.519, 152, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [6.65e-09, 495, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.585, 20, 0], 'true,false,true': [6.734, 155, 324], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 454, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.994, 5, 265], 'true,false,true': [3.73e-09, 18, 0], 'true,false,false,true': [6.519, 152, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.03e-08, 436, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.217357531247796, -4.924553614178912e-17], 'true': [-1.1895246692412391e-17, 0.20947883285545904], 'true,false': [4.397321081685148e-15, 0.20979669664253175], 'true,false,false': [0.20979669664253175, nan], 'false': [-4.924553614178912e-17, nan]}, {'': [0.18811560862295673, -1.2405730963422803e-16], 'true': [0.002673694468355341, 0.18377024563074476], 'true,false': [3.469446951953614e-18, 0.19346172839505973], 'true,false,false': [0.19346172839505973, nan], 'false': [-1.2405730963422803e-16, nan]}, {'': [0.1480344485147141, -1.3228189229576334e-17], 'true': [0.002606931445787444, 0.14470104014652002], 'true,false': [0.14470104014652002, nan], 'false': [-1.3228189229576334e-17, nan]}, {'': [0.13454129172161267, 2.067311838957188e-16], 'true': [0.005045474289859029, 0.1904169288518581], 'true,false': [-4.270088556250602e-18, 0.20084994660021363], 'true,false,false': [0.20084994660021363, nan], 'false': [2.067311838957188e-16, nan]}, {'': [0.11211650588880326, -3.823860123953572e-17], 'true': [0.004990489686203134, 0.11163438876229563], 'true,false': [8.312009361721927e-16, 0.20918783797571663], 'true,false,false': [0.20918783797571663, nan], 'false': [-3.823860123953572e-17, nan]}, {'': [0.1042138542308087, 4.085620730620576e-17], 'true': [0.0011166308340143925, 0.18603891325552846], 'true,false': [0.18603891325552846, nan], 'false': [4.085620730620576e-17, nan]}, {'': [0.09908452479763055, -3.760432825343272e-17], 'true': [0.00826050788213879, 0.10044496832320877], 'true,false': [7.105427357601002e-16, 0.19569623881575146], 'true,false,false': [0.19569623881575146, nan], 'false': [-3.760432825343272e-17, nan]}, {'': [0.09461260135245028, 4.3960346025561754e-17], 'true': [0.002619895828895671, 0.1878543641262005], 'true,false': [1.734723475976807e-18, 0.20143303160306628], 'true,false,false': [0.20143303160306628, nan], 'false': [4.3960346025561754e-17, nan]}, {'': [0.0944240110098768, -1.2911844867887282e-16], 'true': [0.01712010706236497, 0.09466674305264455], 'true,false': [0.09466674305264455, nan], 'false': [-1.2911844867887282e-16, nan]}, {'': [0.09264469841239528, 1.0694808952811141e-16], 'true': [0.0036587567094096577, 0.18584536492294748], 'true,false': [7.709882115452476e-19, 0.2014330316030639], 'true,false,false': [0.2014330316030639, nan], 'false': [1.0694808952811141e-16, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995086;  // std dev = 1.08e-06, 265.000 (wgt'ed) examples reached here.  /* #pos=265 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.8581489350995125;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.14185106490048813;  // std dev = 0.000, 161.000 (wgt'ed) examples reached here.  /* #neg=161 */
%   else return -0.14185106490048724;  // std dev = 2.70e-07, 458.000 (wgt'ed) examples reached here.  /* #neg=458 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109546;  // std dev = 0.000, 102.000 (wgt'ed) examples reached here.  /* #pos=102 */
%   | | else return 0.7042038088843416;  // std dev = 0.113, 166.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=163 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.7194734122109543;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.1254446385283913;  // std dev = 4.71e-08, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
%   else return -0.12544463852839235;  // std dev = 0.000, 498.000 (wgt'ed) examples reached here.  /* #neg=498 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5572617315975087;  // std dev = 0.034, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.11474944634874576;  // std dev = 0.223, 185.000 (wgt'ed) examples reached here.  /* #neg=185 */
%   else return -0.11231637819360589;  // std dev = 0.000, 479.000 (wgt'ed) examples reached here.  /* #neg=479 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.4170527282347106;  // std dev = 2.46e-07, 102.000 (wgt'ed) examples reached here.  /* #pos=102 */
%   | | else return 0.4057697413681456;  // std dev = 0.096, 167.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=163 */
%   | else if ( genre(A, E) )
%   | | then return -0.10137446754106609;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.41705272823471073;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.10137446754106579;  // std dev = 1.01e-07, 171.000 (wgt'ed) examples reached here.  /* #neg=171 */
%   else return -0.10159632948783541;  // std dev = 3.45e-07, 495.000 (wgt'ed) examples reached here.  /* #neg=495 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( actor(B) )
%   | | then return -0.09250548203387882;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else return -0.27956367303219615;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.3239725212327304;  // std dev = 0.046, 265.000 (wgt'ed) examples reached here.  /* #pos=265 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.3203994267810955;  // std dev = 6.66e-08, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.09250548203387868;  // std dev = 7.15e-08, 148.000 (wgt'ed) examples reached here.  /* #neg=148 */
%   else return -0.09269127618926139;  // std dev = 0.000, 486.000 (wgt'ed) examples reached here.  /* #neg=486 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( director(A) )
%   | | then return -0.22684884923618204;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.2573980477162639;  // std dev = 0.040, 265.000 (wgt'ed) examples reached here.  /* #pos=265 */
%   | else if ( actor(A), director(B) )
%   | | then return 0.2549590510182859;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | else return -0.08502704700371722;  // std dev = 1.13e-07, 175.000 (wgt'ed) examples reached here.  /* #neg=175 */
%   else return -0.08518475138839678;  // std dev = 1.44e-07, 465.000 (wgt'ed) examples reached here.  /* #neg=465 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08828418145668894;  // std dev = 0.150, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else if ( genre(B, E) )
%   | | then return 0.21133004104537806;  // std dev = 0.035, 265.000 (wgt'ed) examples reached here.  /* #pos=265 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.209607108737332;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.07864131994852515;  // std dev = 0.000, 156.000 (wgt'ed) examples reached here.  /* #neg=156 */
%   else return -0.07877675473109202;  // std dev = 1.38e-07, 492.000 (wgt'ed) examples reached here.  /* #neg=492 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.17586214173286369;  // std dev = 0.000, 102.000 (wgt'ed) examples reached here.  /* #pos=102 */
%   | | else return 0.17121469004151146;  // std dev = 0.054, 167.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=163 */
%   | else if ( genre(A, E) )
%   | | then return -0.0724778062935138;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.1769860268583495;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.07312872386623574;  // std dev = 6.83e-08, 147.000 (wgt'ed) examples reached here.  /* #neg=147 */
%   else return -0.07324622576333693;  // std dev = 1.48e-07, 494.000 (wgt'ed) examples reached here.  /* #neg=494 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1540053105350342;  // std dev = 0.034, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.07072479687612002;  // std dev = 0.231, 164.000 (wgt'ed) examples reached here.  /* #neg=164 */
%   else return -0.06842697784420347;  // std dev = 0.000, 455.000 (wgt'ed) examples reached here.  /* #neg=455 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.1330213315792914;  // std dev = 4.71e-08, 102.000 (wgt'ed) examples reached here.  /* #pos=102 */
%   | | else return 0.12880276920432404;  // std dev = 0.050, 167.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=163 */
%   | else if ( genre(A, E) )
%   | | then return -0.06342099448234984;  // std dev = 2.63e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.13378562356235846;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.0639572063000149;  // std dev = 2.11e-08, 141.000 (wgt'ed) examples reached here.  /* #neg=141 */
%   else return -0.0641918400820254;  // std dev = 2.45e-07, 487.000 (wgt'ed) examples reached here.  /* #neg=487 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.06359
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 4.583 seconds
Total inference time: 1.877 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.065241
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 3.134 seconds
Refined model CLL: -0.065241


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.06359
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 14.23 seconds
Total inference time: 1.877 seconds
AUC ROC: 1.0
Total revision time: 14.23
Best scored revision CLL: -0.065241


Dataset: 4_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 00:27:22
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.06359, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 14.23, 'Inference time': 1.877, 'parameter_1.0': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.12814, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 3.281, 'Inference time': 1.812}}


Starting fold 3

Target train facts examples: 737
Target train pos examples: 204
Target train neg examples: 10693

Target test facts examples: 341
Target test pos	 examples: 178
Target test neg examples: 3543

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995116;  // std dev = 2.46e-07, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.08302753548872309;  // std dev = 0.970, 17.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048768;  // std dev = 4.94e-08, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.719473412210955;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | else if ( genre(A, E) )
%   | | then return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.08856325057440134;  // std dev = 0.978, 23.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839158;  // std dev = 0.000, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( movie(E, A) )
%   | | then return 0.32013345477565835;  // std dev = 0.331, 62.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=40 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360626;  // std dev = 4.83e-08, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4755804928500268;  // std dev = 8.43e-08, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | else if ( genre(A, E) )
%   | | then return -0.11231637819360639;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.08948351292441357;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783635;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10159632948783628;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.36046734915229445;  // std dev = 4.21e-08, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.11978170455259048;  // std dev = 0.985, 34.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926104;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.28215367514202166;  // std dev = 3.65e-08, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | else if ( movie(E, A) )
%   | | then return -0.09758181820208058;  // std dev = 0.189, 27.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839679;  // std dev = 1.05e-08, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08480441205828677;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.22864866967178385;  // std dev = 4.21e-08, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.08518913268111533;  // std dev = 0.981, 26.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109173;  // std dev = 1.49e-08, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1908330979779984;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | else if ( genre(A, E) )
%   | | then return -0.07845006611058285;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.05588795030578322;  // std dev = 0.970, 17.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07296275025180742;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( movie(E, B) )
%   | | then return 0.0668657648712625;  // std dev = 1.359, 66.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=40 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.0684269778442027;  // std dev = 2.08e-09, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14097015539303354;  // std dev = 0.521, 40.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=39 */
%   | else if ( genre(A, E) )
%   | | then return -0.06817878900724603;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.07879399404620237;  // std dev = 0.981, 27.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202625;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.97199
   AUC PR    = 0.81824
   CLL	      = -0.109423
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total learning time: 1.482 seconds
Total inference time: 1.894 seconds
AUC ROC: 0.97199


Results scoring model
   AUC ROC   = 0.99665
   AUC PR    = 0.987427
   CLL	      = -0.079082
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.975
   F1        = 0.987342


Total scoring time: 1.657 seconds
Parameter learned model CLL: -0.079082


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [2.46e-07, 0, 39], 'true,false,false,true': [0.97, 16, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.94e-08, 47, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 39], 'true,false,true': [0.0, 3, 0], 'true,false,false,true': [0.978, 22, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 51, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [0.331, 22, 40], 'true,false,false': [0.0, 0, 0], 'false,true': [4.83e-08, 63, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [8.43e-08, 0, 39], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [0.964, 13, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 33, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [4.21e-08, 0, 39], 'true,false,false,true': [0.985, 33, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 59, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [3.65e-08, 0, 39], 'true,false,true': [0.189, 26, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [1.05e-08, 55, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [2.63e-09, 3, 0], 'true,false,true': [4.21e-08, 0, 39], 'true,false,false,true': [0.981, 25, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.49e-08, 56, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 39], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [0.97, 16, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 58, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [1.86e-09, 3, 0], 'true,false,true': [1.359, 26, 40], 'true,false,false': [0.0, 0, 0], 'false,true': [2.08e-09, 54, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.521, 1, 39], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [0.981, 26, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 59, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.20408163265306184, 5.196788625904988e-17], 'true': [nan, 0.20408163265306184], 'true,false': [1.548618783066885e-15, 0.055363321799308], 'true,false,false': [0.055363321799308, nan], 'false': [5.196788625904988e-17, nan]}, {'': [0.1739270867864394, -3.2653618371328135e-17], 'true': [-9.109522253334617e-16, 0.037079137584513644], 'true,false': [0.0, 0.0415879017013232], 'true,false,false': [0.0415879017013232, nan], 'false': [-3.2653618371328135e-17, nan]}, {'': [0.11185216537873456, 3.700743415417188e-17], 'true': [0.0, 0.10925592983227576], 'true,false': [0.10925592983227576, nan], 'false': [3.700743415417188e-17, nan]}, {'': [0.08343171623809843, 0.0], 'true': [1.8219044506669235e-16, 0.05809273581938314], 'true,false': [0.0, 0.06632653061224487], 'true,false,false': [0.06632653061224487, nan], 'false': [0.0, nan]}, {'': [0.070275083590785, -2.4462541220554296e-17], 'true': [0.0, 0.07068501760732475], 'true,false': [4.554761126667309e-17, 0.028546712802768208], 'true,false,false': [0.028546712802768208, nan], 'false': [-2.4462541220554296e-17, nan]}, {'': [0.0494483815061581, 2.0185873175002845e-18], 'true': [3.416070845000482e-17, 0.03566529492455422], 'true,false': [0.03566529492455422, nan], 'false': [2.0185873175002845e-18, nan]}, {'': [0.03822519313838253, 3.96508223080413e-18], 'true': [2.3129646346357427e-18, 0.0384314992928515], 'true,false': [4.554761126667309e-17, 0.03698224852071001], 'true,false,false': [0.03698224852071001, nan], 'false': [3.96508223080413e-18, nan]}, {'': [0.029806522591700683, 9.570888143320315e-19], 'true': [-9.678867394168032e-17, 0.052314291064108794], 'true,false': [0.0, 0.055363321799307946], 'true,false,false': [0.055363321799307946, nan], 'false': [9.570888143320315e-19, nan]}, {'': [0.027560985085828896, 5.13992141030165e-18], 'true': [1.1564823173178713e-18, 0.027963669585553335], 'true,false': [0.027963669585553335, nan], 'false': [5.13992141030165e-18, nan]}, {'': [0.02981438618433269, -3.293034395074617e-18], 'true': [0.00678951569061223, 0.034395415041542705], 'true,false': [0.0, 0.03566529492455418], 'true,false,false': [0.03566529492455418, nan], 'false': [-3.293034395074617e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.8581489350995116;  // std dev = 2.46e-07, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | else if ( actor(A), actor(B) )
%   | | then return -0.1418510649004878;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else return 0.10814893509951222;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else return -0.14185106490048766;  // std dev = 6.14e-08, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.719473412210955;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( female(A) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return -0.044618632164712464;  // std dev = 0.929, 12.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=1 */
%   else return -0.1254446385283916;  // std dev = 0.000, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1555325621642444;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( actor(B) )
%   | | then return -0.11587972427352057;  // std dev = 0.019, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else return 0.5627382282282244;  // std dev = 0.291, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   else return -0.11231637819360628;  // std dev = 4.21e-08, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4157218916150426;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | else if ( genre(A, E) )
%   | | then return -0.13618038191976814;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( female(A) )
%   | | | then return -0.10127154822090013;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return -0.04173887079189416;  // std dev = 0.838, 13.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=1 */
%   else return -0.10159632948783623;  // std dev = 3.33e-08, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1209394249419824;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.3194974086057081;  // std dev = 6.32e-08, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | else if ( female(B) )
%   | | | then return -0.09695224420517118;  // std dev = 0.020, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return -0.038741153767300904;  // std dev = 0.841, 14.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=1 */
%   else return -0.09269127618926107;  // std dev = 0.000, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2543433951281973;  // std dev = 2.98e-08, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | else if ( actor(A), actor(B) )
%   | | then return -0.09392542896292266;  // std dev = 0.036, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else return 0.11301209894501421;  // std dev = 0.768, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else return -0.08518475138839679;  // std dev = 1.67e-08, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1200991757914464;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.20917205739114045;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | else if ( female(A) )
%   | | | then return -0.08027544282282784;  // std dev = 0.006, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return -0.0268693528073077;  // std dev = 0.817, 13.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=1 */
%   else return -0.07877675473109173;  // std dev = 2.36e-08, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17666682591104;  // std dev = 2.58e-08, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | else if ( genre(A, E) )
%   | | then return -0.10797537847331355;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( female(A) )
%   | | | then return -0.0740462947087884;  // std dev = 0.007, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.006109362620363371;  // std dev = 0.803, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   else return -0.07324622576333704;  // std dev = 7.45e-09, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09800717375910899;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( director(B) )
%   | | then if ( female(A) )
%   | | | then return 0.15241783064040954;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.1778041111519736;  // std dev = 0.596, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else return -0.08406350717617489;  // std dev = 0.043, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else return -0.06842697784420272;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13203389788087774;  // std dev = 0.009, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | else if ( genre(A, E) )
%   | | then return -0.08967798718904096;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( female(A) )
%   | | | then return -0.06465612887372015;  // std dev = 0.004, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return -0.009522841398278737;  // std dev = 0.773, 11.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
%   else return -0.06419184008202625;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */


Results
   AUC ROC   = 0.992036
   AUC PR    = 0.889837
   CLL	      = -0.102427
   Precision = 0.693548 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.708791


Total learning time: 2.088 seconds
Total inference time: 1.863 seconds
AUC ROC: 0.992036


Results scoring model
   AUC ROC   = 0.999965
   AUC PR    = 0.998235
   CLL	      = -0.0692
   Precision = 0.928571 at threshold = 0.5
   Recall    = 0.975
   F1        = 0.95122


Total scoring time: 1.586 seconds
Refined model CLL: -0.0692


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.992036
   AUC PR    = 0.889837
   CLL	      = -0.102427
   Precision = 0.693548 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.708791


Total learning time: 6.813000000000001 seconds
Total inference time: 1.863 seconds
AUC ROC: 0.992036
Total revision time: 6.813000000000001
Best scored revision CLL: -0.0692


Dataset: 4_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 00:27:33
{'AUC ROC': 0.992036, 'AUC PR': 0.889837, 'CLL': -0.102427, 'Precision': [0.693548, 0.5], 'Recall': 0.724719, 'F1': 0.708791, 'Learning time': 6.813000000000001, 'Inference time': 1.863, 'parameter_0.2': {'AUC ROC': 0.97199, 'AUC PR': 0.81824, 'CLL': -0.109423, 'Precision': [1.0, 0.5], 'Recall': 0.724719, 'F1': 0.840391, 'Learning time': 1.482, 'Inference time': 1.894}}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995125;  // std dev = 0.000, 79.000 (wgt'ed) examples reached here.  /* #pos=79 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.08921948595311933;  // std dev = 1.376, 38.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004877;  // std dev = 5.58e-08, 117.000 (wgt'ed) examples reached here.  /* #neg=117 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109538;  // std dev = 2.23e-07, 79.000 (wgt'ed) examples reached here.  /* #pos=79 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.07727943471245886;  // std dev = 1.375, 37.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839105;  // std dev = 8.30e-08, 124.000 (wgt'ed) examples reached here.  /* #neg=124 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( movie(E, A) )
%   | | then return 0.3442296732522364;  // std dev = 0.323, 119.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=81 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360624;  // std dev = 7.60e-08, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4695746316532196;  // std dev = 1.69e-07, 79.000 (wgt'ed) examples reached here.  /* #pos=79 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.12715630190042268;  // std dev = 1.387, 53.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783665;  // std dev = 0.000, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.356307581034102;  // std dev = 9.42e-08, 79.000 (wgt'ed) examples reached here.  /* #pos=79 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.0875136070954825;  // std dev = 1.371, 33.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926087;  // std dev = 6.58e-08, 111.000 (wgt'ed) examples reached here.  /* #neg=111 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2793407141783992;  // std dev = 0.000, 79.000 (wgt'ed) examples reached here.  /* #pos=79 */
%   | else if ( movie(E, A) )
%   | | then return -0.0999744450218866;  // std dev = 0.181, 59.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.0851847513883968;  // std dev = 6.50e-08, 121.000 (wgt'ed) examples reached here.  /* #neg=121 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07771011655036655;  // std dev = 1.86e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.22669378834601475;  // std dev = 0.000, 79.000 (wgt'ed) examples reached here.  /* #pos=79 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.09027303595521616;  // std dev = 1.389, 56.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109154;  // std dev = 7.15e-08, 124.000 (wgt'ed) examples reached here.  /* #neg=124 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1830610012185828;  // std dev = 0.506, 80.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=79 */
%   | else if ( genre(A, E) )
%   | | then return -0.07232012618112317;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.0747112529166428;  // std dev = 1.384, 48.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333721;  // std dev = 0.000, 131.000 (wgt'ed) examples reached here.  /* #neg=131 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.0676157308344805;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( movie(E, B) )
%   | | then return 0.09344045736997057;  // std dev = 1.757, 116.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=81 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420265;  // std dev = 4.75e-09, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15055302218809652;  // std dev = 0.000, 79.000 (wgt'ed) examples reached here.  /* #pos=79 */
%   | else if ( genre(A, E) )
%   | | then return -0.06347559346261157;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.07665113501267588;  // std dev = 1.384, 48.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.97199
   AUC PR    = 0.81824
   CLL	      = -0.108565
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total learning time: 1.775 seconds
Total inference time: 1.782 seconds
AUC ROC: 0.97199


Results scoring model
   AUC ROC   = 0.996764
   AUC PR    = 0.982875
   CLL	      = -0.079416
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.975309
   F1        = 0.9875


Total scoring time: 1.96 seconds
Parameter learned model CLL: -0.079416


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 4, 0], 'true,false,true': [0.0, 0, 79], 'true,false,false,true': [1.376, 36, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.58e-08, 117, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [2.23e-07, 0, 79], 'true,false,true': [0.0, 3, 0], 'true,false,false,true': [1.375, 35, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.3e-08, 124, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [2.63e-09, 3, 0], 'true,false,true': [0.323, 38, 81], 'true,false,false': [0.0, 0, 0], 'false,true': [7.6e-08, 100, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.69e-07, 0, 79], 'true,false,true': [0.0, 4, 0], 'true,false,false,true': [1.387, 51, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 105, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 4, 0], 'true,false,true': [9.42e-08, 0, 79], 'true,false,false,true': [1.371, 31, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [6.58e-08, 111, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 79], 'true,false,true': [0.181, 57, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [6.5e-08, 121, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [1.86e-09, 5, 0], 'true,false,true': [0.0, 0, 79], 'true,false,false,true': [1.389, 54, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.15e-08, 124, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.506, 1, 79], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [1.384, 46, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 131, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 4, 0], 'true,false,true': [1.757, 35, 81], 'true,false,false': [0.0, 0, 0], 'false,true': [4.75e-09, 97, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 79], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [1.384, 46, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 104, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.2212963595382845, 2.6569439905559303e-17], 'true': [0.0, 0.2130177514792916], 'true,false': [-8.99421184506456e-16, 0.049861495844875335], 'true,false,false': [0.049861495844875335, nan], 'false': [2.6569439905559303e-17, nan]}, {'': [0.1588975553028178, 5.551115123125783e-17], 'true': [6.295948291545192e-16, 0.04745823944811474], 'true,false': [0.0, 0.051132213294375416], 'true,false,false': [0.051132213294375416, nan], 'false': [5.551115123125783e-17, nan]}, {'': [0.10645117450978706, 5.773159728050814e-17], 'true': [2.3129646346357427e-18, 0.10400938402963629], 'true,false': [0.10400938402963629, nan], 'false': [5.773159728050814e-17, nan]}, {'': [0.1003408661183539, -4.4408920985006264e-17], 'true': [3.5976847380258237e-16, 0.033806283592419314], 'true,false': [0.0, 0.03631185475258098], 'true,false,false': [0.03631185475258098, nan], 'false': [-4.4408920985006264e-17, nan]}, {'': [0.05909395120100475, 3.900783600034334e-17], 'true': [0.0, 0.05771236650499367], 'true,false': [1.12427648063307e-16, 0.05693296602387511], 'true,false,false': [0.05693296602387511, nan], 'false': [3.900783600034334e-17, nan]}, {'': [0.049187029652803166, 3.4866508211368553e-17], 'true': [-2.0236976651395258e-16, 0.032681547448047514], 'true,false': [0.032681547448047514, nan], 'false': [3.4866508211368553e-17, nan]}, {'': [0.038322238108298566, 4.118569284899774e-17], 'true': [6.938893903907229e-19, 0.038673658820060186], 'true,false': [-3.147974145772596e-16, 0.034438775510204155], 'true,false,false': [0.034438775510204155, nan], 'false': [4.118569284899774e-17, nan]}, {'': [0.03242622973812999, -1.7797468333685714e-17], 'true': [0.0031967547484953287, 0.03833355288483668], 'true,false': [0.0, 0.03993055555555559], 'true,false,false': [0.03993055555555559, nan], 'false': [-1.7797468333685714e-17, nan]}, {'': [0.02655855143572061, 2.2891196384023845e-17], 'true': [0.0, 0.026609727028895483], 'true,false': [0.026609727028895483, nan], 'false': [2.2891196384023845e-17, nan]}, {'': [0.027142951297629808, -1.4945309946877107e-17], 'true': [-1.4053456007913375e-17, 0.03911911671038458], 'true,false': [0.0, 0.0399305555555556], 'true,false,false': [0.0399305555555556, nan], 'false': [-1.4945309946877107e-17, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995125;  // std dev = 0.000, 79.000 (wgt'ed) examples reached here.  /* #pos=79 */
%   | | else if ( female(B) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return -0.05094197399139689;  // std dev = 1.348, 22.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
%   else return -0.14185106490048768;  // std dev = 6.32e-08, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109548;  // std dev = 0.000, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else return 0.6983504609424711;  // std dev = 0.132, 40.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=39 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( female(A) )
%   | | | then return -0.1316352572540393;  // std dev = 0.023, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | | else return -0.0723423581958434;  // std dev = 1.367, 33.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=2 */
%   else return -0.12544463852839127;  // std dev = 0.000, 124.000 (wgt'ed) examples reached here.  /* #neg=124 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360638;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( actor(B) )
%   | | then return -0.12056053316932043;  // std dev = 0.035, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | else return 0.5657053737455485;  // std dev = 0.440, 81.000 (wgt'ed) examples reached here.  /* #pos=81 */
%   else return -0.1123163781936062;  // std dev = 7.74e-08, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4175374281763734;  // std dev = 0.023, 79.000 (wgt'ed) examples reached here.  /* #pos=79 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783633;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( female(B) )
%   | | | then return -0.10315587530263004;  // std dev = 0.013, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | | else return -0.04820192591790549;  // std dev = 1.238, 28.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=2 */
%   else return -0.10159632948783628;  // std dev = 3.33e-08, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926098;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.32073036453365744;  // std dev = 0.020, 79.000 (wgt'ed) examples reached here.  /* #pos=79 */
%   | | else if ( female(A) )
%   | | | then return -0.10082420423095532;  // std dev = 0.025, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | | else return -0.05933888962179308;  // std dev = 1.254, 38.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=2 */
%   else return -0.0926912761892609;  // std dev = 6.41e-08, 111.000 (wgt'ed) examples reached here.  /* #neg=111 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2551862673734786;  // std dev = 0.018, 79.000 (wgt'ed) examples reached here.  /* #pos=79 */
%   | else if ( actor(A), actor(B) )
%   | | then return -0.0959586912163735;  // std dev = 0.047, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | else if ( female(B) )
%   | | | then return -0.08518475138839687;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.3635648654030793;  // std dev = 0.897, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return -0.0851847513883968;  // std dev = 6.14e-08, 114.000 (wgt'ed) examples reached here.  /* #neg=114 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09844942496470904;  // std dev = 0.028, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.20976846226967386;  // std dev = 0.016, 79.000 (wgt'ed) examples reached here.  /* #pos=79 */
%   | | else if ( actor(B) )
%   | | | then return -0.08611240387856121;  // std dev = 0.050, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | | | else return 0.4172180019094789;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.07877675473109153;  // std dev = 7.67e-08, 136.000 (wgt'ed) examples reached here.  /* #neg=136 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17710491083411586;  // std dev = 0.014, 79.000 (wgt'ed) examples reached here.  /* #pos=79 */
%   | else if ( genre(A, E) )
%   | | then return -0.09008397363956613;  // std dev = 0.026, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( female(A) )
%   | | | then return -0.0760796302696864;  // std dev = 0.021, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | | else return -0.03820808856551948;  // std dev = 1.027, 32.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=2 */
%   else return -0.07324622576333707;  // std dev = 4.83e-08, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1411432985534799;  // std dev = 0.223, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( director(B) )
%   | | then if ( female(A) )
%   | | | then return 0.15140095556067026;  // std dev = 0.000, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | | else return 0.17945348591310584;  // std dev = 0.716, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | else return -0.07772546932261643;  // std dev = 0.043, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   else return -0.06842697784420265;  // std dev = 5.48e-08, 113.000 (wgt'ed) examples reached here.  /* #neg=113 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13256440881224632;  // std dev = 0.004, 79.000 (wgt'ed) examples reached here.  /* #pos=79 */
%   | else if ( genre(A, E) )
%   | | then return -0.07589160824673168;  // std dev = 0.033, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( female(B) )
%   | | | then return -0.0656923856275788;  // std dev = 0.018, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | | else return -0.011709232856468792;  // std dev = 0.956, 22.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
%   else return -0.06419184008202626;  // std dev = 3.80e-08, 132.000 (wgt'ed) examples reached here.  /* #neg=132 */


Results
   AUC ROC   = 0.992669
   AUC PR    = 0.898879
   CLL	      = -0.0903
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total learning time: 2.533 seconds
Total inference time: 1.781 seconds
AUC ROC: 0.992669


Results scoring model
   AUC ROC   = 0.999997
   AUC PR    = 0.999848
   CLL	      = -0.067304
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.975309
   F1        = 0.9875


Total scoring time: 1.789 seconds
Refined model CLL: -0.067304


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.992669
   AUC PR    = 0.898879
   CLL	      = -0.0903
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total learning time: 8.057 seconds
Total inference time: 1.781 seconds
AUC ROC: 0.992669
Total revision time: 8.057
Best scored revision CLL: -0.067304


Dataset: 4_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 00:27:46
{'AUC ROC': 0.992669, 'AUC PR': 0.898879, 'CLL': -0.0903, 'Precision': [1.0, 0.5], 'Recall': 0.724719, 'F1': 0.840391, 'Learning time': 8.057, 'Inference time': 1.781, 'parameter_0.4': {'AUC ROC': 0.97199, 'AUC PR': 0.81824, 'CLL': -0.108565, 'Precision': [1.0, 0.5], 'Recall': 0.724719, 'F1': 0.840391, 'Learning time': 1.775, 'Inference time': 1.782}}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995107;  // std dev = 6.42e-07, 118.000 (wgt'ed) examples reached here.  /* #pos=118 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.08031260336202617;  // std dev = 1.937, 65.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004882;  // std dev = 0.000, 169.000 (wgt'ed) examples reached here.  /* #neg=169 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109552;  // std dev = 0.000, 118.000 (wgt'ed) examples reached here.  /* #pos=118 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.08689842594752689;  // std dev = 1.954, 88.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1254446385283915;  // std dev = 0.000, 175.000 (wgt'ed) examples reached here.  /* #neg=175 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( movie(E, A) )
%   | | then return 0.2952739901052279;  // std dev = 0.339, 201.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=122 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360647;  // std dev = 3.65e-08, 175.000 (wgt'ed) examples reached here.  /* #neg=175 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.48178398140377954;  // std dev = 0.000, 118.000 (wgt'ed) examples reached here.  /* #pos=118 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.09566609207928767;  // std dev = 1.936, 64.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783646;  // std dev = 0.000, 156.000 (wgt'ed) examples reached here.  /* #neg=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926097;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(B, E) )
%   | | then return 0.36477922250848205;  // std dev = 2.67e-07, 118.000 (wgt'ed) examples reached here.  /* #pos=118 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.07804404609706163;  // std dev = 1.931, 59.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926058;  // std dev = 9.19e-08, 200.000 (wgt'ed) examples reached here.  /* #neg=200 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2850680292760571;  // std dev = 0.000, 118.000 (wgt'ed) examples reached here.  /* #pos=118 */
%   | else if ( movie(E, A) )
%   | | then return -0.07618767611239023;  // std dev = 0.233, 69.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=4 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 8.02e-08, 201.000 (wgt'ed) examples reached here.  /* #neg=201 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07943216070134163;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( genre(B, E) )
%   | | then return 0.23067076625747063;  // std dev = 0.000, 118.000 (wgt'ed) examples reached here.  /* #pos=118 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.06883356658879404;  // std dev = 1.940, 68.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109148;  // std dev = 8.30e-08, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.19229001509379512;  // std dev = 0.000, 118.000 (wgt'ed) examples reached here.  /* #pos=118 */
%   | else if ( genre(A, E) )
%   | | then return -0.07381448804776856;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.059580104206875366;  // std dev = 1.938, 66.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333677;  // std dev = 7.33e-09, 162.000 (wgt'ed) examples reached here.  /* #neg=162 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.06892415697854161;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( movie(E, B) )
%   | | then return 0.0682887446590783;  // std dev = 2.533, 202.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=122 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420262;  // std dev = 5.74e-09, 183.000 (wgt'ed) examples reached here.  /* #neg=183 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15076909457692123;  // std dev = 0.503, 119.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=118 */
%   | else if ( genre(A, E) )
%   | | then return -0.06463032067482061;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.04418700232164581;  // std dev = 1.922, 52.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 190.000 (wgt'ed) examples reached here.  /* #neg=190 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.97199
   AUC PR    = 0.81824
   CLL	      = -0.109308
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total learning time: 2.126 seconds
Total inference time: 1.997 seconds
AUC ROC: 0.97199


Results scoring model
   AUC ROC   = 0.995691
   AUC PR    = 0.974828
   CLL	      = -0.081428
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.967213
   F1        = 0.983333


Total scoring time: 2.342 seconds
Parameter learned model CLL: -0.081428


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 4, 0], 'true,false,true': [6.42e-07, 0, 118], 'true,false,false,true': [1.937, 61, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 169, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 118], 'true,false,true': [0.0, 3, 0], 'true,false,false,true': [1.954, 84, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 175, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 7, 0], 'true,false,true': [0.339, 79, 122], 'true,false,false': [0.0, 0, 0], 'false,true': [3.65e-08, 175, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 118], 'true,false,true': [0.0, 4, 0], 'true,false,false,true': [1.936, 60, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 156, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 7, 0], 'true,false,true': [2.67e-07, 0, 118], 'true,false,false,true': [1.931, 55, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.19e-08, 200, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 118], 'true,false,true': [0.233, 65, 4], 'true,false,false': [0.0, 0, 0], 'false,true': [8.02e-08, 201, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 8, 0], 'true,false,true': [0.0, 0, 118], 'true,false,false,true': [1.94, 64, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.3e-08, 172, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 118], 'true,false,true': [0.0, 4, 0], 'true,false,false,true': [1.938, 62, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.33e-09, 162, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [2.533, 80, 122], 'true,false,false': [0.0, 0, 0], 'false,true': [5.74e-09, 183, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.503, 1, 118], 'true,false,true': [0.0, 6, 0], 'true,false,false,true': [1.922, 48, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 190, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.2267722840229958, -1.708035422500241e-16], 'true': [0.0, 0.22222222222222623], 'true,false': [3.4924981927191367e-15, 0.05775147928994074], 'true,false,false': [0.05775147928994074, nan], 'false': [-1.708035422500241e-16, nan]}, {'': [0.1786395444478103, -1.2688263138573217e-17], 'true': [-1.2043097216272884e-15, 0.042005409905529326], 'true,false': [0.0, 0.04338842975206611], 'true,false,false': [0.04338842975206611, nan], 'false': [-1.2688263138573217e-17, nan]}, {'': [0.11664448205624324, 7.612957883143931e-18], 'true': [-1.982541115402065e-18, 0.11511581732350315], 'true,false': [0.11511581732350315, nan], 'false': [7.612957883143931e-18, nan]}, {'': [0.09759364423194579, -6.547469119584257e-17], 'true': [-9.333400342611486e-16, 0.05514900582509177], 'true,false': [0.0, 0.05859374999999991], 'true,false,false': [0.05859374999999991, nan], 'false': [-6.547469119584257e-17, nan]}, {'': [0.0656973825749466, 4.218847493575595e-17], 'true': [0.0, 0.06464284265489444], 'true,false': [6.021548608136442e-16, 0.06320022981901756], 'true,false,false': [0.06320022981901756, nan], 'false': [4.218847493575595e-17, nan]}, {'': [0.05048161019545721, 3.203628628271596e-17], 'true': [-1.8064645824409328e-16, 0.05446129910062561], 'true,false': [0.05446129910062561, nan], 'false': [3.203628628271596e-17, nan]}, {'': [0.040943998600643315, 4.0019667166720756e-17], 'true': [-8.673617379884035e-19, 0.041045523342484104], 'true,false': [-1.430117794432405e-16, 0.055363321799307925], 'true,false,false': [0.055363321799307925, nan], 'false': [4.0019667166720756e-17, nan]}, {'': [0.034912864805714344, 5.4140505521844054e-17], 'true': [-1.7311952248392272e-16, 0.05369057022422492], 'true,false': [0.0, 0.05693296602387512], 'true,false,false': [0.05693296602387512, nan], 'false': [5.4140505521844054e-17, nan]}, {'': [0.031645836353808396, 3.2154000166739505e-17], 'true': [0.0, 0.031774579305675135], 'true,false': [0.031774579305675135, nan], 'false': [3.2154000166739505e-17, nan]}, {'': [0.030861205582103615, -3.505967446184705e-18], 'true': [0.0021298818848766903, 0.0636992390263424], 'true,false': [-5.782411586589357e-19, 0.07100591715976315], 'true,false,false': [0.07100591715976315, nan], 'false': [-3.505967446184705e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995107;  // std dev = 6.42e-07, 118.000 (wgt'ed) examples reached here.  /* #pos=118 */
%   | | else if ( actor(B) )
%   | | | then return -0.14185106490048766;  // std dev = 5.96e-08, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.14185106490048824;  // std dev = 0.000, 173.000 (wgt'ed) examples reached here.  /* #neg=173 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109552;  // std dev = 0.000, 118.000 (wgt'ed) examples reached here.  /* #pos=118 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( actor(B) )
%   | | | then return -0.1254446385283916;  // std dev = 0.000, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.12544463852839147;  // std dev = 0.000, 169.000 (wgt'ed) examples reached here.  /* #neg=169 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( actor(B) )
%   | | then return -0.11231637819360625;  // std dev = 5.27e-08, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
%   | | else return 0.5553664367462834;  // std dev = 4.54e-07, 122.000 (wgt'ed) examples reached here.  /* #pos=122 */
%   else return -0.11231637819360649;  // std dev = 2.98e-08, 177.000 (wgt'ed) examples reached here.  /* #neg=177 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.41751358415830936;  // std dev = 3.37e-07, 118.000 (wgt'ed) examples reached here.  /* #pos=118 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783627;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( actor(B) )
%   | | | then return -0.10159632948783623;  // std dev = 3.80e-08, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | | | else return 0.4175135841583102;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.10159632948783652;  // std dev = 0.000, 184.000 (wgt'ed) examples reached here.  /* #neg=184 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926097;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.32071184716014994;  // std dev = 1.98e-07, 118.000 (wgt'ed) examples reached here.  /* #pos=118 */
%   | | else if ( actor(B) )
%   | | | then return -0.09269127618926107;  // std dev = 0.000, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   | | | else return 0.32071184716014967;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.09269127618926058;  // std dev = 8.94e-08, 197.000 (wgt'ed) examples reached here.  /* #neg=197 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2551722425694898;  // std dev = 0.000, 118.000 (wgt'ed) examples reached here.  /* #pos=118 */
%   | else if ( actor(B) )
%   | | then return -0.08518475138839679;  // std dev = 1.83e-08, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
%   | | else return 0.25517224256948945;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.08518475138839678;  // std dev = 8.02e-08, 205.000 (wgt'ed) examples reached here.  /* #neg=205 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07877675473109177;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.20975771563253542;  // std dev = 1.86e-07, 118.000 (wgt'ed) examples reached here.  /* #pos=118 */
%   | | else if ( actor(B) )
%   | | | then return -0.07877675473109165;  // std dev = 4.28e-08, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
%   | | | else return 0.20975771563253576;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.0787767547310915;  // std dev = 8.30e-08, 153.000 (wgt'ed) examples reached here.  /* #neg=153 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1770964977452781;  // std dev = 0.000, 118.000 (wgt'ed) examples reached here.  /* #pos=118 */
%   | else if ( genre(A, E) )
%   | | then return -0.07324622576333704;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( actor(B) )
%   | | | then return -0.07324622576333704;  // std dev = 1.05e-08, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | | | else return 0.17709649774527736;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.07324622576333673;  // std dev = 1.02e-07, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13670856378491106;  // std dev = 0.237, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( director(B) )
%   | | then return 0.1527438580936714;  // std dev = 0.000, 122.000 (wgt'ed) examples reached here.  /* #pos=122 */
%   | | else return -0.06842697784420268;  // std dev = 1.83e-08, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   else return -0.06842697784420262;  // std dev = 7.74e-08, 184.000 (wgt'ed) examples reached here.  /* #neg=184 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.13400703000801137;  // std dev = 0.000, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | | else return 0.12755032035214914;  // std dev = 0.053, 69.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=68 */
%   | else if ( genre(A, E) )
%   | | then return -0.06021011382636949;  // std dev = 1.86e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( actor(B) )
%   | | | then return -0.06419184008202625;  // std dev = 0.000, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | | | else return 0.13400703000801117;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.06419184008202626;  // std dev = 0.000, 188.000 (wgt'ed) examples reached here.  /* #neg=188 */


Results
   AUC ROC   = 0.988073
   AUC PR    = 0.631126
   CLL	      = -0.097907
   Precision = 0.784141 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.879012


Total learning time: 3.071 seconds
Total inference time: 1.858 seconds
AUC ROC: 0.988073


Results scoring model
   AUC ROC   = 0.999847
   AUC PR    = 0.967163
   CLL	      = -0.064284
   Precision = 0.99187 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.995918


Total scoring time: 2.501 seconds
Refined model CLL: -0.064284


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.988073
   AUC PR    = 0.631126
   CLL	      = -0.097907
   Precision = 0.784141 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.879012


Total learning time: 10.04 seconds
Total inference time: 1.858 seconds
AUC ROC: 0.988073
Total revision time: 10.04
Best scored revision CLL: -0.064284


Dataset: 4_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 00:28:00
{'AUC ROC': 0.988073, 'AUC PR': 0.631126, 'CLL': -0.097907, 'Precision': [0.784141, 0.5], 'Recall': 1.0, 'F1': 0.879012, 'Learning time': 10.04, 'Inference time': 1.858, 'parameter_0.6': {'AUC ROC': 0.97199, 'AUC PR': 0.81824, 'CLL': -0.109308, 'Precision': [1.0, 0.5], 'Recall': 0.724719, 'F1': 0.840391, 'Learning time': 2.126, 'Inference time': 1.997}}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995098;  // std dev = 9.68e-07, 156.000 (wgt'ed) examples reached here.  /* #pos=156 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.06319937950722926;  // std dev = 2.540, 89.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004884;  // std dev = 0.000, 234.000 (wgt'ed) examples reached here.  /* #neg=234 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109563;  // std dev = 0.000, 156.000 (wgt'ed) examples reached here.  /* #pos=156 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.059862488763576784;  // std dev = 2.545, 94.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839174;  // std dev = 0.000, 217.000 (wgt'ed) examples reached here.  /* #neg=217 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( movie(E, A) )
%   | | then return 0.29928536560019237;  // std dev = 0.343, 266.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=163 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360679;  // std dev = 0.000, 237.000 (wgt'ed) examples reached here.  /* #neg=237 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4720589162745032;  // std dev = 0.968, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783627;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.08513924806857129;  // std dev = 2.538, 88.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783659;  // std dev = 0.000, 257.000 (wgt'ed) examples reached here.  /* #neg=257 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13351083872492236;  // std dev = 0.258, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( genre(B, E) )
%   | | then return 0.36610419213196355;  // std dev = 5.96e-08, 156.000 (wgt'ed) examples reached here.  /* #pos=156 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.07883631565843074;  // std dev = 2.545, 94.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926049;  // std dev = 7.15e-08, 226.000 (wgt'ed) examples reached here.  /* #neg=226 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.282424056326404;  // std dev = 0.554, 157.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=156 */
%   | else if ( movie(E, A) )
%   | | then return -0.0614846765621961;  // std dev = 0.267, 90.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=7 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 8.69e-08, 235.000 (wgt'ed) examples reached here.  /* #neg=235 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07754330148280092;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( genre(B, E) )
%   | | then return 0.23192116359112744;  // std dev = 0.000, 156.000 (wgt'ed) examples reached here.  /* #pos=156 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.07054197628806563;  // std dev = 2.558, 107.000 (wgt'ed) examples reached here.  /* #neg=100 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109144;  // std dev = 6.99e-08, 228.000 (wgt'ed) examples reached here.  /* #neg=228 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.19318968807940426;  // std dev = 1.81e-07, 156.000 (wgt'ed) examples reached here.  /* #pos=156 */
%   | else if ( genre(A, E) )
%   | | then return -0.07217514625255764;  // std dev = 1.86e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.04834078948311602;  // std dev = 2.538, 88.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333677;  // std dev = 7.62e-09, 248.000 (wgt'ed) examples reached here.  /* #neg=248 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.0962181684313244;  // std dev = 0.273, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( movie(E, B) )
%   | | then return 0.08150405061388229;  // std dev = 3.051, 254.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=163 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420261;  // std dev = 3.73e-09, 233.000 (wgt'ed) examples reached here.  /* #neg=233 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15082730515734608;  // std dev = 0.485, 157.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=156 */
%   | else if ( genre(A, E) )
%   | | then return -0.06167946583338573;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.0452111015133396;  // std dev = 2.529, 81.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202625;  // std dev = 1.32e-09, 232.000 (wgt'ed) examples reached here.  /* #neg=232 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.97199
   AUC PR    = 0.81824
   CLL	      = -0.109502
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total learning time: 2.297 seconds
Total inference time: 1.779 seconds
AUC ROC: 0.97199


Results scoring model
   AUC ROC   = 0.994339
   AUC PR    = 0.965907
   CLL	      = -0.084558
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.957055
   F1        = 0.978056


Total scoring time: 2.867 seconds
Parameter learned model CLL: -0.084558


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 6, 0], 'true,false,true': [9.68e-07, 0, 156], 'true,false,false,true': [2.54, 82, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 234, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 156], 'true,false,true': [0.0, 4, 0], 'true,false,false,true': [2.545, 87, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 217, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 4, 0], 'true,false,true': [0.343, 103, 163], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 237, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.968, 2, 156], 'true,false,true': [0.0, 6, 0], 'true,false,false,true': [2.538, 81, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 257, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.258, 10, 0], 'true,false,true': [5.96e-08, 0, 156], 'true,false,false,true': [2.545, 87, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.15e-08, 226, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.554, 1, 156], 'true,false,true': [0.267, 83, 7], 'true,false,false': [0.0, 0, 0], 'false,true': [8.69e-08, 235, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 9, 0], 'true,false,true': [0.0, 0, 156], 'true,false,false,true': [2.558, 100, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [6.99e-08, 228, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [1.81e-07, 0, 156], 'true,false,true': [1.86e-09, 5, 0], 'true,false,false,true': [2.538, 81, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.62e-09, 248, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.273, 10, 0], 'true,false,true': [3.051, 91, 163], 'true,false,false': [0.0, 0, 0], 'false,true': [3.73e-09, 233, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.485, 1, 156], 'true,false,true': [0.0, 7, 0], 'true,false,false,true': [2.529, 74, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.32e-09, 232, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.22767892573134285, -1.8978171361113786e-16], 'true': [-6.938893903907228e-18, 0.2226738858808883], 'true,false': [6.012284687200848e-15, 0.07246559777805858], 'true,false,false': [0.07246559777805858, nan], 'false': [-1.8978171361113786e-16, nan]}, {'': [0.1704859314827631, -6.139482163825751e-17], 'true': [-2.6417614534670392e-15, 0.06627780888414235], 'true,false': [0.0, 0.06892258940697131], 'true,false,false': [0.06892258940697131, nan], 'false': [-6.139482163825751e-17, nan]}, {'': [0.1183718269065862, -8.24469419130918e-17], 'true': [0.0, 0.11764198777895309], 'true,false': [0.11764198777895309, nan], 'false': [-8.24469419130918e-17, nan]}, {'': [0.10218112225710484, -6.739096958814179e-17], 'true': [0.005935929892764861, 0.06856067135223128], 'true,false': [0.0, 0.07321797520661119], 'true,false,false': [0.07321797520661119, nan], 'false': [-6.739096958814179e-17, nan]}, {'': [0.07392113598645422, 2.25974597932554e-17], 'true': [0.006664946742411101, 0.07236388916026576], 'true,false': [2.2773805633336544e-17, 0.0689225894069719], 'true,false,false': [0.0689225894069719, nan], 'false': [2.25974597932554e-17, nan]}, {'': [0.05462419615466057, 3.212560241468538e-17], 'true': [0.0019541077246659406, 0.07132652675635967], 'true,false': [0.07132652675635967, nan], 'false': [3.212560241468538e-17, nan]}, {'': [0.04650999131267824, 2.1425356615573195e-17], 'true': [-7.709882115452476e-19, 0.046951826071142566], 'true,false': [-6.832141690000964e-17, 0.06114071097912495], 'true,false,false': [0.06114071097912495, nan], 'false': [2.1425356615573195e-17, nan]}, {'': [0.039682885739876134, 5.819717467793159e-17], 'true': [2.1065770210836303e-16, 0.06931042464775816], 'true,false': [6.938893903907229e-19, 0.07321797520661176], 'true,false,false': [0.07321797520661176, nan], 'false': [5.819717467793159e-17, nan]}, {'': [0.03669153171981243, 1.5247698192276828e-17], 'true': [0.007428482903338434, 0.036647211652017085], 'true,false': [0.036647211652017085, nan], 'false': [1.5247698192276828e-17, nan]}, {'': [0.03603564675435537, 1.4356332214980472e-18], 'true': [0.0015010572406179794, 0.07269101323360282], 'true,false': [-4.956352788505163e-19, 0.07895137936290195], 'true,false,false': [0.07895137936290195, nan], 'false': [1.4356332214980472e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995098;  // std dev = 9.68e-07, 156.000 (wgt'ed) examples reached here.  /* #pos=156 */
%   | | else if ( actor(B) )
%   | | | then return -0.14185106490048766;  // std dev = 7.30e-08, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.14185106490048832;  // std dev = 0.000, 242.000 (wgt'ed) examples reached here.  /* #neg=242 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109547;  // std dev = 0.000, 61.000 (wgt'ed) examples reached here.  /* #pos=61 */
%   | | else return 0.7106721825157528;  // std dev = 0.086, 96.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=95 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( actor(B) )
%   | | | then return -0.12544463852839147;  // std dev = 0.000, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
%   | | | else return 0.7194734122109543;  // std dev = 2.11e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.12544463852839183;  // std dev = 0.000, 237.000 (wgt'ed) examples reached here.  /* #neg=237 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12855334707271898;  // std dev = 0.105, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( actor(B) )
%   | | then return -0.11231637819360621;  // std dev = 7.15e-08, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
%   | | else return 0.5566324750620588;  // std dev = 0.014, 163.000 (wgt'ed) examples reached here.  /* #pos=163 */
%   else return -0.11231637819360672;  // std dev = 0.000, 222.000 (wgt'ed) examples reached here.  /* #neg=222 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.41850985327427237;  // std dev = 0.013, 156.000 (wgt'ed) examples reached here.  /* #pos=156 */
%   | else if ( genre(A, E) )
%   | | then return -0.10012386554773957;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( actor(B) )
%   | | | then return -0.10159632948783626;  // std dev = 4.71e-08, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
%   | | | else return 0.4172057209067836;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.10159632948783656;  // std dev = 0.000, 229.000 (wgt'ed) examples reached here.  /* #neg=229 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( female(B) )
%   | | then return -0.0914570319877097;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.1387561475990053;  // std dev = 0.164, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.3213877303632668;  // std dev = 0.012, 156.000 (wgt'ed) examples reached here.  /* #pos=156 */
%   | | else if ( actor(B) )
%   | | | then return -0.09269127618926107;  // std dev = 0.000, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
%   | | | else return 0.3205031390748028;  // std dev = 1.83e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.09269127618926047;  // std dev = 8.94e-08, 242.000 (wgt'ed) examples reached here.  /* #neg=242 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2556336081759142;  // std dev = 0.010, 156.000 (wgt'ed) examples reached here.  /* #pos=156 */
%   | else if ( actor(B) )
%   | | then return -0.08497468948920973;  // std dev = 0.009, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
%   | | else return 0.2550298254870719;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.08518475138839678;  // std dev = 8.94e-08, 243.000 (wgt'ed) examples reached here.  /* #neg=243 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07515379313741755;  // std dev = 0.003, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.21008370404907792;  // std dev = 0.009, 156.000 (wgt'ed) examples reached here.  /* #pos=156 */
%   | | else if ( actor(B) )
%   | | | then return -0.07879200047741446;  // std dev = 0.000, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   | | | else return 0.20965710912509583;  // std dev = 7.45e-09, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.07877675473109144;  // std dev = 6.83e-08, 225.000 (wgt'ed) examples reached here.  /* #neg=225 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17733564588016593;  // std dev = 0.008, 156.000 (wgt'ed) examples reached here.  /* #pos=156 */
%   | else if ( genre(A, E) )
%   | | then return -0.07169909224384877;  // std dev = 0.004, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( actor(B) )
%   | | | then return -0.07325945122022731;  // std dev = 0.000, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
%   | | | else return 0.17702270413385057;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.07324622576333661;  // std dev = 1.30e-07, 216.000 (wgt'ed) examples reached here.  /* #neg=216 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.15291511345328962;  // std dev = 0.007, 163.000 (wgt'ed) examples reached here.  /* #pos=163 */
%   | else return -0.07145655813635914;  // std dev = 0.257, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
%   else return -0.06842697784420283;  // std dev = 0.000, 267.000 (wgt'ed) examples reached here.  /* #neg=267 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.13352778289030448;  // std dev = 0.000, 61.000 (wgt'ed) examples reached here.  /* #pos=61 */
%   | | else return 0.12990413454318858;  // std dev = 0.045, 96.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=95 */
%   | else if ( genre(A, E) )
%   | | then return -0.061685975418023266;  // std dev = 0.002, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.13393696282135226;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.07381610134447127;  // std dev = 0.769, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
%   else return -0.06419184008202626;  // std dev = 1.05e-08, 230.000 (wgt'ed) examples reached here.  /* #neg=230 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.092993
   Precision = 0.784141 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.879012


Total learning time: 3.255 seconds
Total inference time: 1.66 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063929
   Precision = 0.993902 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.996942


Total scoring time: 2.44 seconds
Refined model CLL: -0.063929


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.092993
   Precision = 0.784141 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.879012


Total learning time: 10.859 seconds
Total inference time: 1.66 seconds
AUC ROC: 1.0
Total revision time: 10.859
Best scored revision CLL: -0.063929


Dataset: 4_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 00:28:15
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.092993, 'Precision': [0.784141, 0.5], 'Recall': 1.0, 'F1': 0.879012, 'Learning time': 10.859, 'Inference time': 1.66, 'parameter_0.8': {'AUC ROC': 0.97199, 'AUC PR': 0.81824, 'CLL': -0.109502, 'Precision': [1.0, 0.5], 'Recall': 0.724719, 'F1': 0.840391, 'Learning time': 2.297, 'Inference time': 1.779}}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995093;  // std dev = 1.09e-06, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.061205903610165084;  // std dev = 3.032, 124.000 (wgt'ed) examples reached here.  /* #neg=114 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.141851064900488;  // std dev = 0.000, 279.000 (wgt'ed) examples reached here.  /* #neg=279 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7151404991302422;  // std dev = 0.843, 195.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=194 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.0545625559778292;  // std dev = 3.033, 125.000 (wgt'ed) examples reached here.  /* #neg=115 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839197;  // std dev = 0.000, 287.000 (wgt'ed) examples reached here.  /* #neg=287 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( movie(E, A) )
%   | | then return 0.3265875998499923;  // std dev = 0.339, 314.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=204 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360694;  // std dev = 0.000, 287.000 (wgt'ed) examples reached here.  /* #neg=287 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4750514773694854;  // std dev = 0.000, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783627;  // std dev = 5.27e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.07940908535196967;  // std dev = 3.016, 111.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783663;  // std dev = 0.000, 309.000 (wgt'ed) examples reached here.  /* #neg=309 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926098;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( genre(B, E) )
%   | | then return 0.36010037606809575;  // std dev = 0.000, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.07386650361478657;  // std dev = 3.025, 118.000 (wgt'ed) examples reached here.  /* #neg=108 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0926912761892604;  // std dev = 1.72e-07, 320.000 (wgt'ed) examples reached here.  /* #neg=320 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.28190557694036095;  // std dev = 2.73e-07, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else if ( movie(E, A) )
%   | | then return -0.06213729193231752;  // std dev = 0.275, 121.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.01e-07, 287.000 (wgt'ed) examples reached here.  /* #neg=287 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10023226071626487;  // std dev = 0.247, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( genre(B, E) )
%   | | then return 0.22847637777407875;  // std dev = 0.000, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.053573493115227674;  // std dev = 3.020, 114.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109143;  // std dev = 4.94e-08, 283.000 (wgt'ed) examples reached here.  /* #neg=283 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1907088468103778;  // std dev = 1.37e-07, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else if ( genre(A, E) )
%   | | then return -0.07335436294358687;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.06348824740580647;  // std dev = 3.047, 140.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333696;  // std dev = 5.74e-09, 294.000 (wgt'ed) examples reached here.  /* #neg=294 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.06852162389950711;  // std dev = 1.86e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( movie(E, B) )
%   | | then return 0.09215782607004658;  // std dev = 3.435, 302.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=204 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420305;  // std dev = 0.000, 313.000 (wgt'ed) examples reached here.  /* #neg=313 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1482789833193332;  // std dev = 0.492, 195.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=194 */
%   | else if ( genre(A, E) )
%   | | then return -0.0642753398096854;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.040258911934492485;  // std dev = 3.003, 102.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202593;  // std dev = 6.78e-09, 306.000 (wgt'ed) examples reached here.  /* #neg=306 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.97199
   AUC PR    = 0.81824
   CLL	      = -0.110314
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total learning time: 2.458 seconds
Total inference time: 1.876 seconds
AUC ROC: 0.97199


Results scoring model
   AUC ROC   = 0.993632
   AUC PR    = 0.960741
   CLL	      = -0.086516
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.95098
   F1        = 0.974874


Total scoring time: 3.223 seconds
Parameter learned model CLL: -0.086516


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 4, 0], 'true,false,true': [1.09e-06, 0, 194], 'true,false,false,true': [3.032, 114, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 279, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.843, 1, 194], 'true,false,true': [0.0, 9, 0], 'true,false,false,true': [3.033, 115, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 287, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 8, 0], 'true,false,true': [0.339, 110, 204], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 287, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 194], 'true,false,true': [5.27e-09, 9, 0], 'true,false,false,true': [3.016, 101, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 309, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 10, 0], 'true,false,true': [0.0, 0, 194], 'true,false,false,true': [3.025, 108, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.72e-07, 320, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [2.73e-07, 0, 194], 'true,false,true': [0.275, 111, 10], 'true,false,false': [0.0, 0, 0], 'false,true': [1.01e-07, 287, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.247, 13, 0], 'true,false,true': [0.0, 0, 194], 'true,false,false,true': [3.02, 104, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.94e-08, 283, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [1.37e-07, 0, 194], 'true,false,true': [0.0, 13, 0], 'true,false,false,true': [3.047, 130, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.74e-09, 294, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [1.86e-09, 5, 0], 'true,false,true': [3.435, 98, 204], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 313, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.492, 1, 194], 'true,false,true': [0.0, 4, 0], 'true,false,false,true': [3.003, 92, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [6.78e-09, 306, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.23216696886694635, -2.865091676452017e-17], 'true': [0.0, 0.22997508009968412], 'true,false': [6.15315358802561e-15, 0.0741415192507801], 'true,false,false': [0.0741415192507801, nan], 'false': [-2.865091676452017e-17, nan]}, {'': [0.17504423843485054, -8.046215648851309e-17], 'true': [0.003642182338411897, 0.06897150274727389], 'true,false': [0.0, 0.07360000000000044], 'true,false,false': [0.07360000000000044, nan], 'false': [-8.046215648851309e-17, nan]}, {'': [0.11642209936679263, -1.0986179059008517e-16], 'true': [-1.734723475976807e-18, 0.11460226248632138], 'true,false': [0.11460226248632138, nan], 'false': [-1.0986179059008517e-16, nan]}, {'': [0.10201545811300702, -5.1738548720395646e-17], 'true': [-1.867921624936346e-15, 0.0758599773208637], 'true,false': [3.0839528461809902e-18, 0.08197386575764978], 'true,false,false': [0.08197386575764978, nan], 'false': [-5.1738548720395646e-17, nan]}, {'': [0.07384421525905423, 9.298117831235686e-17], 'true': [0.0, 0.0736232401408467], 'true,false': [-1.0987774264331447e-15, 0.07756391841424828], 'true,false,false': [0.07756391841424828, nan], 'false': [9.298117831235686e-17, nan]}, {'': [0.056953226875254975, 3.558903075453463e-17], 'true': [3.8457209925160063e-16, 0.07536855024171646], 'true,false': [0.07536855024171646, nan], 'false': [3.558903075453463e-17, nan]}, {'': [0.0483602495076578, 8.630709025354574e-18], 'true': [0.004688625523701505, 0.0481657895635423], 'true,false': [-2.9300731371550523e-16, 0.08002462296091138], 'true,false,false': [0.08002462296091138, nan], 'false': [8.630709025354574e-18, nan]}, {'': [0.04279707072325437, 3.398641912117826e-17], 'true': [9.614302481290016e-17, 0.06069851104034601], 'true,false': [-2.135044278125301e-18, 0.06632653061224536], 'true,false,false': [0.06632653061224536, nan], 'false': [3.398641912117826e-17, nan]}, {'': [0.038837412276630644, -6.810313761278915e-17], 'true': [6.938893903907229e-19, 0.03905992905429556], 'true,false': [0.03905992905429556, nan], 'false': [-6.810313761278915e-17, nan]}, {'': [0.03896457286185854, 4.5715065719859385e-17], 'true': [0.0012408458993027702, 0.08511158430101132], 'true,false': [0.0, 0.08842752787389443], 'true,false,false': [0.08842752787389443, nan], 'false': [4.5715065719859385e-17, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995093;  // std dev = 1.09e-06, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | | else if ( actor(B) )
%   | | | then return -0.14185106490048763;  // std dev = 8.16e-08, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.141851064900488;  // std dev = 0.000, 279.000 (wgt'ed) examples reached here.  /* #neg=279 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.719473412210957;  // std dev = 0.000, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( actor(B) )
%   | | | then return -0.12544463852839147;  // std dev = 0.000, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
%   | | | else return 0.7194734122109544;  // std dev = 2.98e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.12544463852839183;  // std dev = 0.000, 243.000 (wgt'ed) examples reached here.  /* #neg=243 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360638;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( director(B) )
%   | | then return 0.5553664367462833;  // std dev = 6.36e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | | else return -0.11231637819360618;  // std dev = 8.56e-08, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
%   else return -0.112316378193607;  // std dev = 0.000, 284.000 (wgt'ed) examples reached here.  /* #neg=284 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.4175135841583106;  // std dev = 0.000, 75.000 (wgt'ed) examples reached here.  /* #pos=75 */
%   | | else return 0.4071681699166611;  // std dev = 0.080, 121.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=119 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783627;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( actor(B) )
%   | | | then return -0.10159632948783627;  // std dev = 4.21e-08, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
%   | | | else return 0.4175135841583103;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.10159632948783659;  // std dev = 0.000, 255.000 (wgt'ed) examples reached here.  /* #neg=255 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926097;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( genre(B, E) )
%   | | then return 0.3220968943201035;  // std dev = 0.015, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | | else if ( actor(B) )
%   | | | then return -0.09269127618926086;  // std dev = 7.07e-08, 115.000 (wgt'ed) examples reached here.  /* #neg=115 */
%   | | | else return 0.3207118471601498;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.09269127618926042;  // std dev = 1.67e-07, 313.000 (wgt'ed) examples reached here.  /* #neg=313 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2561174230063052;  // std dev = 0.013, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else if ( actor(B) )
%   | | then return -0.0851847513883968;  // std dev = 6.99e-08, 143.000 (wgt'ed) examples reached here.  /* #neg=143 */
%   | | else return 0.2551722425694896;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.08518475138839678;  // std dev = 1.10e-07, 321.000 (wgt'ed) examples reached here.  /* #neg=321 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07877675473109179;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( genre(B, E) )
%   | | then return 0.2104253477985919;  // std dev = 0.012, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.2097577156325357;  // std dev = 1.97e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.084705634144728;  // std dev = 0.708, 120.000 (wgt'ed) examples reached here.  /* #neg=120 */
%   else return -0.07877675473109143;  // std dev = 5.96e-08, 256.000 (wgt'ed) examples reached here.  /* #neg=256 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1775861411074702;  // std dev = 0.010, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else if ( genre(A, E) )
%   | | then return -0.07324622576333704;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( actor(B) )
%   | | | then return -0.0728447831129513;  // std dev = 1.67e-08, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
%   | | | else return 0.17709649774527736;  // std dev = 7.45e-09, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.07324622576333695;  // std dev = 1.01e-07, 291.000 (wgt'ed) examples reached here.  /* #neg=291 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.06842697784420272;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( actor(B) )
%   | | then return -0.06807547230802227;  // std dev = 0.000, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
%   | | else return 0.15309707373930975;  // std dev = 0.009, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.06842697784420305;  // std dev = 0.000, 311.000 (wgt'ed) examples reached here.  /* #neg=311 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13429909937848686;  // std dev = 0.008, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else if ( genre(A, E) )
%   | | then return -0.0641918400820262;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( actor(B) )
%   | | | then return -0.06388161590426593;  // std dev = 3.41e-08, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
%   | | | else return 0.13396604493275924;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.06419184008202604;  // std dev = 9.77e-08, 284.000 (wgt'ed) examples reached here.  /* #neg=284 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094991
   Precision = 0.784141 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.879012


Total learning time: 3.526 seconds
Total inference time: 1.771 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064099
   Precision = 0.995122 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.997555


Total scoring time: 2.829 seconds
Refined model CLL: -0.064099


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094991
   Precision = 0.784141 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.879012


Total learning time: 12.036000000000001 seconds
Total inference time: 1.771 seconds
AUC ROC: 1.0
Total revision time: 12.036000000000001
Best scored revision CLL: -0.064099


Dataset: 4_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 00:28:32
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.094991, 'Precision': [0.784141, 0.5], 'Recall': 1.0, 'F1': 0.879012, 'Learning time': 12.036000000000001, 'Inference time': 1.771, 'parameter_1.0': {'AUC ROC': 0.97199, 'AUC PR': 0.81824, 'CLL': -0.110314, 'Precision': [1.0, 0.5], 'Recall': 0.724719, 'F1': 0.840391, 'Learning time': 2.458, 'Inference time': 1.876}}


Starting fold 4

Target train facts examples: 927
Target train pos examples: 337
Target train neg examples: 12345

Target test facts examples: 151
Target test pos	 examples: 45
Target test neg examples: 1891

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995124;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.09344305274657119;  // std dev = 3.029, 51.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048763;  // std dev = 8.43e-08, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | else if ( genre(A, E) )
%   | | then return -0.14185106490048777;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.09638917099336193;  // std dev = 3.000, 48.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.17662933421604024;  // std dev = 0.140, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( movie(E, A) )
%   | | then return 0.3835011328546797;  // std dev = 0.361, 94.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.1123163781936062;  // std dev = 7.88e-08, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.44764051357348916;  // std dev = 0.675, 56.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=55 */
%   | else if ( genre(A, E) )
%   | | then return -0.10731355739215077;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.13687099009105302;  // std dev = 2.763, 33.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783634;  // std dev = 0.000, 114.000 (wgt'ed) examples reached here.  /* #neg=114 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13956513645998087;  // std dev = 0.188, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.3523411991868883;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.09120038269783426;  // std dev = 2.808, 35.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926089;  // std dev = 6.32e-08, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2766569714139155;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | else if ( movie(E, A) )
%   | | then return 0.00967330443516075;  // std dev = 0.437, 45.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=12 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839682;  // std dev = 5.05e-08, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1703947219197625;  // std dev = 0.205, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.22482575361249113;  // std dev = 6.66e-08, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.007944705348079988;  // std dev = 2.941, 43.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.0787767547310916;  // std dev = 5.58e-08, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18807182898905578;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | else if ( genre(A, E) )
%   | | then return -0.07404994421018644;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.006031250124859508;  // std dev = 2.966, 45.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333707;  // std dev = 0.000, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.16006026014942745;  // std dev = 0.223, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( movie(E, B) )
%   | | then return 0.09745307360524105;  // std dev = 3.014, 97.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420265;  // std dev = 4.84e-09, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1401576606644212;  // std dev = 0.451, 56.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=55 */
%   | else if ( genre(A, E) )
%   | | then return -0.059513690426234056;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.05120157807712337;  // std dev = 3.020, 50.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.134074
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.64 seconds
Total inference time: 1.576 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.977585
   AUC PR    = 0.861421
   CLL	      = -0.133788
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.820896
   F1        = 0.901639


Total scoring time: 1.691 seconds
Parameter learned model CLL: -0.133788


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 55], 'true,false,false,true': [3.029, 39, 12], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.43e-08, 92, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 55], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [3.0, 36, 12], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 94, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.14, 5, 0], 'true,false,true': [0.361, 27, 67], 'true,false,false': [0.0, 0, 0], 'false,true': [7.88e-08, 99, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.675, 1, 55], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [2.763, 21, 12], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 114, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.188, 5, 0], 'true,false,true': [0.0, 0, 55], 'true,false,false,true': [2.808, 23, 12], 'true,false,false,false': [0.0, 0, 0], 'false,true': [6.32e-08, 109, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 55], 'true,false,true': [0.437, 33, 12], 'true,false,false': [0.0, 0, 0], 'false,true': [5.05e-08, 85, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.205, 3, 0], 'true,false,true': [6.66e-08, 0, 55], 'true,false,false,true': [2.941, 31, 12], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.58e-08, 97, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 55], 'true,false,true': [0.0, 4, 0], 'true,false,false,true': [2.966, 33, 12], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 98, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.223, 3, 0], 'true,false,true': [3.014, 30, 67], 'true,false,false': [0.0, 0, 0], 'false,true': [4.84e-09, 101, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.451, 1, 55], 'true,false,true': [0.0, 3, 0], 'true,false,false,true': [3.02, 38, 12], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 88, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.2325560697757202, 7.723290606088045e-17], 'true': [nan, 0.2325560697757202], 'true,false': [-1.291895883200182e-16, 0.17993079584775032], 'true,false,false': [0.17993079584775032, nan], 'false': [7.723290606088045e-17, nan]}, {'': [0.18657535388312885, -1.4173059888831785e-17], 'true': [-3.2297397080004555e-16, 0.18217952294395268], 'true,false': [0.0, 0.18750000000000044], 'true,false,false': [0.18750000000000044, nan], 'false': [-1.4173059888831785e-17, nan]}, {'': [0.13871191545154962, 6.280049432223107e-17], 'true': [0.003929809608955842, 0.1300354117470447], 'true,false': [0.1300354117470447, nan], 'false': [6.280049432223107e-17, nan]}, {'': [0.11431952831871528, -1.1686558153949016e-17], 'true': [0.008140012363930265, 0.22630105944025913], 'true,false': [0.0, 0.23140495867768587], 'true,false,false': [0.23140495867768587, nan], 'false': [-1.1686558153949016e-17, nan]}, {'': [0.10633213603288041, 3.66679164096382e-17], 'true': [0.007092051051028603, 0.10382577139934368], 'true,false': [-9.689219124001366e-17, 0.22530612244897952], 'true,false,false': [0.22530612244897952, nan], 'false': [3.66679164096382e-17, nan]}, {'': [0.10364946499133207, 3.004132890162188e-17], 'true': [-4.844609562000683e-17, 0.19112799128680047], 'true,false': [0.19112799128680047, nan], 'false': [3.004132890162188e-17, nan]}, {'': [0.09990590410190081, 3.204767493763338e-17], 'true': [0.014038118627425869, 0.09986020186391571], 'true,false': [8.074349270001139e-17, 0.20118983234180624], 'true,false,false': [0.20118983234180624, nan], 'false': [3.204767493763338e-17, nan]}, {'': [0.09471122523498125, -6.797283824235652e-18], 'true': [-7.266914343001025e-17, 0.1799386829213301], 'true,false': [0.0, 0.19555555555555576], 'true,false,false': [0.19555555555555576, nan], 'false': [-6.797283824235652e-18, nan]}, {'': [0.09327278387066539, 2.308384506646365e-17], 'true': [0.016536615337758562, 0.09365667392169551], 'true,false': [0.09365667392169551, nan], 'false': [2.308384506646365e-17, nan]}, {'': [0.09473085837800814, -1.2616170734376778e-17], 'true': [0.003633294341986409, 0.17207916115406027], 'true,false': [0.0, 0.18239999999999992], 'true,false,false': [0.18239999999999992, nan], 'false': [-1.2616170734376778e-17, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.8581489350995118;  // std dev = 1.46e-07, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else return 0.8248156017661784;  // std dev = 0.180, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | else if ( actor(B) )
%   | | then return -0.1418510649004877;  // std dev = 3.16e-08, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else return -0.14185106490048763;  // std dev = 8.43e-08, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7229946655910366;  // std dev = 0.025, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.7194734122109542;  // std dev = 4.21e-08, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.12987555136441006;  // std dev = 0.153, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.12544463852839133;  // std dev = 0.000, 107.000 (wgt'ed) examples reached here.  /* #neg=107 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5582098383949905;  // std dev = 0.032, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.11581714011030499;  // std dev = 0.141, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   else return -0.11231637819360618;  // std dev = 9.19e-08, 118.000 (wgt'ed) examples reached here.  /* #neg=118 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4202479653613556;  // std dev = 0.030, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | else if ( genre(A, E) )
%   | | then return -0.10127724449957;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( actor(B) )
%   | | | then return -0.10087465400310154;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | | | else return 0.41682224289032715;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else return -0.10159632948783628;  // std dev = 2.98e-08, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09242404495809521;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.3225720930299165;  // std dev = 0.027, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.32024318942138225;  // std dev = 2.11e-08, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.0995612412920671;  // std dev = 0.220, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   else return -0.09269127618926101;  // std dev = 3.80e-08, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.25644466564681334;  // std dev = 0.024, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | else if ( actor(A), director(B) )
%   | | then return 0.25485242801034286;  // std dev = 1.83e-08, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.09017475694518369;  // std dev = 0.208, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.08518475138839682;  // std dev = 5.67e-08, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.3160303603212013;  // std dev = 0.336, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.21065824101204833;  // std dev = 0.021, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.20953177752250896;  // std dev = 1.05e-08, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.08363460727452078;  // std dev = 0.196, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   else return -0.07877675473109161;  // std dev = 5.37e-08, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.17519080245880658;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else return 0.15822175968386773;  // std dev = 0.118, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | else if ( genre(A, E) )
%   | | then return -0.05824871108726514;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( actor(B) )
%   | | | then return -0.0716384700392712;  // std dev = 9.13e-09, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | | else return 0.17693076512832517;  // std dev = 7.45e-09, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else return -0.07324622576333707;  // std dev = 0.000, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06618875097286149;  // std dev = 0.020, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | else return 0.15437837939929952;  // std dev = 0.025, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   else return -0.06842697784420265;  // std dev = 4.47e-08, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.1325215281932146;  // std dev = 1.49e-08, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else return 0.11536458177121536;  // std dev = 0.124, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | else if ( genre(A, E) )
%   | | then return -0.051786179740738576;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( actor(B) )
%   | | | then return -0.06299600483778839;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | | else return 0.1337048434658353;  // std dev = 9.13e-09, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else return -0.06419184008202626;  // std dev = 0.000, 118.000 (wgt'ed) examples reached here.  /* #neg=118 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.065062
   Precision = 0.918367 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.957447


Total learning time: 2.557 seconds
Total inference time: 1.532 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.069944
   Precision = 0.82716 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.905405


Total scoring time: 1.582 seconds
Refined model CLL: -0.069944


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.065062
   Precision = 0.918367 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.957447


Total learning time: 7.47 seconds
Total inference time: 1.532 seconds
AUC ROC: 1.0
Total revision time: 7.47
Best scored revision CLL: -0.069944


Dataset: 4_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 00:28:43
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.065062, 'Precision': [0.918367, 0.5], 'Recall': 1.0, 'F1': 0.957447, 'Learning time': 7.47, 'Inference time': 1.532, 'parameter_0.2': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.134074, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 1.64, 'Inference time': 1.576}}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995111;  // std dev = 5.06e-07, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.13087620782678408;  // std dev = 4.431, 99.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=27 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048846;  // std dev = 0.000, 212.000 (wgt'ed) examples reached here.  /* #neg=212 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109547;  // std dev = 0.000, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.18323111683892873;  // std dev = 4.216, 79.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=27 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1254446385283916;  // std dev = 0.000, 194.000 (wgt'ed) examples reached here.  /* #neg=194 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1646808874477274;  // std dev = 0.190, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( movie(E, A) )
%   | | then return 0.3832143718778183;  // std dev = 0.368, 187.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=134 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360667;  // std dev = 0.000, 211.000 (wgt'ed) examples reached here.  /* #neg=211 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4361023194422478;  // std dev = 1.296, 111.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=107 */
%   | else if ( genre(A, E) )
%   | | then return -0.09691550615311975;  // std dev = 3.73e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.029112118015661513;  // std dev = 4.414, 97.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=27 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783652;  // std dev = 0.000, 199.000 (wgt'ed) examples reached here.  /* #neg=199 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.15206967288464956;  // std dev = 0.155, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.35504430531563774;  // std dev = 2.49e-07, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.06670308534546472;  // std dev = 4.280, 84.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=27 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926051;  // std dev = 6.14e-08, 205.000 (wgt'ed) examples reached here.  /* #neg=205 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.27848613046385395;  // std dev = 1.03e-07, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | else if ( movie(E, A) )
%   | | then return 0.023571978330487856;  // std dev = 0.445, 96.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=27 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 7.60e-08, 200.000 (wgt'ed) examples reached here.  /* #neg=200 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.0788998247491714;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.22609926729158747;  // std dev = 0.000, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.0061112739751279805;  // std dev = 4.414, 97.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=27 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109144;  // std dev = 7.45e-08, 211.000 (wgt'ed) examples reached here.  /* #neg=211 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18899268829462235;  // std dev = 4.71e-08, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | else if ( genre(A, E) )
%   | | then return -0.07335297790142141;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.011315799428273099;  // std dev = 4.463, 103.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=27 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333666;  // std dev = 8.38e-09, 199.000 (wgt'ed) examples reached here.  /* #neg=199 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.32861698357025626;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( movie(E, B) )
%   | | then return 0.12088875135994342;  // std dev = 4.278, 187.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=134 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420261;  // std dev = 4.75e-09, 210.000 (wgt'ed) examples reached here.  /* #neg=210 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14222004675163782;  // std dev = 0.405, 108.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=107 */
%   | else if ( genre(A, E) )
%   | | then return -0.05029433910583204;  // std dev = 1.86e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.014592326522250683;  // std dev = 4.315, 87.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=27 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 202.000 (wgt'ed) examples reached here.  /* #neg=202 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.140254
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.968 seconds
Total inference time: 1.629 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.975762
   AUC PR    = 0.846855
   CLL	      = -0.139891
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.798507
   F1        = 0.887967


Total scoring time: 2.244 seconds
Parameter learned model CLL: -0.139891


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 4, 0], 'true,false,true': [5.06e-07, 0, 107], 'true,false,false,true': [4.431, 72, 27], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 212, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 107], 'true,false,true': [0.0, 4, 0], 'true,false,false,true': [4.216, 52, 27], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 194, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.19, 11, 0], 'true,false,true': [0.368, 53, 134], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 211, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.296, 4, 107], 'true,false,true': [3.73e-09, 8, 0], 'true,false,false,true': [4.414, 70, 27], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 199, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.155, 3, 0], 'true,false,true': [2.49e-07, 0, 107], 'true,false,false,true': [4.28, 57, 27], 'true,false,false,false': [0.0, 0, 0], 'false,true': [6.14e-08, 205, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [1.03e-07, 0, 107], 'true,false,true': [0.445, 69, 27], 'true,false,false': [0.0, 0, 0], 'false,true': [7.6e-08, 200, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [0.0, 0, 107], 'true,false,false,true': [4.414, 70, 27], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.45e-08, 211, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [4.71e-08, 0, 107], 'true,false,true': [1.86e-09, 3, 0], 'true,false,false,true': [4.463, 76, 27], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.38e-09, 199, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [4.278, 53, 134], 'true,false,false': [0.0, 0, 0], 'false,true': [4.75e-09, 210, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.405, 1, 107], 'true,false,true': [1.86e-09, 8, 0], 'true,false,false,true': [4.315, 60, 27], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 202, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.23092970521542389, -2.388026883155997e-16], 'true': [0.0, 0.22735413328306595], 'true,false': [2.3906110735853837e-15, 0.19834710743801764], 'true,false,false': [0.19834710743801764, nan], 'false': [-2.388026883155997e-16, nan]}, {'': [0.17016814870088373, -4.807151240645008e-17], 'true': [-5.976527683963459e-16, 0.21849286046329502], 'true,false': [0.0, 0.22496394808524295], 'true,false,false': [0.22496394808524295, nan], 'false': [-4.807151240645008e-17, nan]}, {'': [0.14371083233104048, -5.472189315687975e-17], 'true': [0.003290450195309915, 0.13529367618786792], 'true,false': [0.13529367618786792, nan], 'false': [-5.472189315687975e-17, nan]}, {'': [0.1418736381102655, -9.149576685353049e-17], 'true': [0.015120398529644946, 0.18668494033681737], 'true,false': [1.734723475976807e-18, 0.2008715060048891], 'true,false,false': [0.2008715060048891, nan], 'false': [-9.149576685353049e-17, nan]}, {'': [0.1169333093023316, 1.8413455042563573e-17], 'true': [0.00801667763608053, 0.11640747516346127], 'true,false': [5.810513026075585e-16, 0.21811224489795894], 'true,false,false': [0.21811224489795894, nan], 'false': [1.8413455042563573e-17, nan]}, {'': [0.11000341708880783, 2.886579864025407e-17], 'true': [9.960879473272432e-17, 0.19836020484633665], 'true,false': [0.19836020484633665, nan], 'false': [2.886579864025407e-17, nan]}, {'': [0.10692366034449084, 2.6308602479269113e-17], 'true': [0.0, 0.10758203889558975], 'true,false': [-6.640586315514955e-17, 0.2008715060048894], 'true,false,false': [0.2008715060048894, nan], 'false': [2.6308602479269113e-17, nan]}, {'': [0.1037920038465946, 7.029552819234659e-17], 'true': [2.0751832235984234e-17, 0.18805235059173628], 'true,false': [1.1564823173178713e-18, 0.1934206805542462], 'true,false,false': [0.1934206805542462, nan], 'false': [7.029552819234659e-17, nan]}, {'': [0.09896354604654531, 2.2204460492503132e-17], 'true': [0.0, 0.09788382725246027], 'true,false': [0.09788382725246027, nan], 'false': [2.2204460492503132e-17, nan]}, {'': [0.0970963222420476, -2.1984614349013e-18], 'true': [0.0015161790708411583, 0.19633195254152974], 'true,false': [4.336808689942018e-19, 0.21403091557669457], 'true,false,false': [0.21403091557669457, nan], 'false': [-2.1984614349013e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995111;  // std dev = 5.06e-07, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.8581489350995118;  // std dev = 1.58e-07, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return -0.14185106490048766;  // std dev = 5.96e-08, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   else return -0.14185106490048832;  // std dev = 0.000, 185.000 (wgt'ed) examples reached here.  /* #neg=185 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109551;  // std dev = 0.000, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | | else return 0.7056222966250635;  // std dev = 0.107, 61.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=60 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return -0.1254446385283916;  // std dev = 0.000, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   else return -0.12544463852839158;  // std dev = 0.000, 189.000 (wgt'ed) examples reached here.  /* #neg=189 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5568967248869451;  // std dev = 0.020, 134.000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.11644235601485566;  // std dev = 0.192, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
%   else return -0.11231637819360646;  // std dev = 0.000, 179.000 (wgt'ed) examples reached here.  /* #neg=179 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.4171414712607962;  // std dev = 0.000, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | | else return 0.4003211319795707;  // std dev = 0.111, 62.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=60 */
%   | else if ( genre(A, E) )
%   | | then return -0.10122035142985042;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.4171414712607961;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return -0.10122035142985028;  // std dev = 4.21e-08, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   else return -0.10159632948783658;  // std dev = 0.000, 223.000 (wgt'ed) examples reached here.  /* #neg=223 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1853944246183657;  // std dev = 0.186, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.3242253591827267;  // std dev = 0.034, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.3204595844241897;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return -0.092376384033708;  // std dev = 1.49e-08, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   else return -0.09269127618926051;  // std dev = 1.01e-07, 228.000 (wgt'ed) examples reached here.  /* #neg=228 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.2542853606266497;  // std dev = 0.000, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | | else return 0.24392318600815555;  // std dev = 0.089, 62.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=60 */
%   | else if ( director(B), actor(A) )
%   | | then return 0.25500010360074027;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return -0.0843610746207221;  // std dev = 0.016, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
%   else return -0.08518475138839678;  // std dev = 7.88e-08, 200.000 (wgt'ed) examples reached here.  /* #neg=200 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07211043827851026;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.21298212552969728;  // std dev = 0.035, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.20963611166277019;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return -0.0785874489850045;  // std dev = 1.29e-08, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   else return -0.07877675473109147;  // std dev = 7.88e-08, 190.000 (wgt'ed) examples reached here.  /* #neg=190 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17524553141094132;  // std dev = 0.454, 108.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=107 */
%   | else if ( genre(A, E) )
%   | | then return -0.06743187674721778;  // std dev = 1.32e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.1770073018708781;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return -0.073081978820552;  // std dev = 4.01e-08, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
%   else return -0.07324622576333667;  // std dev = 1.14e-07, 194.000 (wgt'ed) examples reached here.  /* #neg=194 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( actor(B) )
%   | | then return -0.06331313504578957;  // std dev = 1.86e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.31202136131947855;  // std dev = 1.29e-08, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( actor(B) )
%   | | then return -0.06828319019230412;  // std dev = 0.000, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   | | else return 0.15460134180545368;  // std dev = 0.030, 134.000 (wgt'ed) examples reached here.  /* #pos=134 */
%   else return -0.06842697784420262;  // std dev = 8.09e-08, 196.000 (wgt'ed) examples reached here.  /* #neg=196 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.1331949487512096;  // std dev = 0.000, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | | else return 0.12551263881080843;  // std dev = 0.068, 62.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=60 */
%   | else if ( genre(A, E) )
%   | | then return -0.059660581919487636;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( actor(B) )
%   | | | then return -0.0640649609736671;  // std dev = 2.89e-08, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   | | | else return 0.13373102055738384;  // std dev = 1.67e-08, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   else return -0.06419184008202626;  // std dev = 1.49e-08, 230.000 (wgt'ed) examples reached here.  /* #neg=230 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064334
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.418 seconds
Total inference time: 1.659 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.065525
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.263 seconds
Refined model CLL: -0.065525


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064334
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 9.893 seconds
Total inference time: 1.659 seconds
AUC ROC: 1.0
Total revision time: 9.893
Best scored revision CLL: -0.065525


Dataset: 4_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 00:28:57
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.064334, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 9.893, 'Inference time': 1.659, 'parameter_0.4': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.140254, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 1.968, 'Inference time': 1.629}}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995096;  // std dev = 1.04e-06, 166.000 (wgt'ed) examples reached here.  /* #pos=166 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.12481560176617752;  // std dev = 5.138, 135.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=36 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048785;  // std dev = 8.43e-08, 297.000 (wgt'ed) examples reached here.  /* #neg=297 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7044748669315598;  // std dev = 1.450, 169.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=166 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.12798009830538704;  // std dev = 5.071, 126.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=36 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839202;  // std dev = 0.000, 308.000 (wgt'ed) examples reached here.  /* #neg=308 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14608937272795774;  // std dev = 0.163, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( movie(E, A) )
%   | | then return 0.3423342484454767;  // std dev = 0.379, 305.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=202 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360697;  // std dev = 0.000, 284.000 (wgt'ed) examples reached here.  /* #neg=284 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4579201364673072;  // std dev = 1.333, 170.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=166 */
%   | else if ( genre(A, E) )
%   | | then return -0.09855492779089546;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.05064000539721561;  // std dev = 5.087, 128.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=36 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1015963294878366;  // std dev = 0.000, 281.000 (wgt'ed) examples reached here.  /* #neg=281 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12242064615719794;  // std dev = 0.177, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.3628817646982942;  // std dev = 3.48e-07, 166.000 (wgt'ed) examples reached here.  /* #pos=166 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.060282703767612175;  // std dev = 5.020, 120.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=36 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926042;  // std dev = 1.66e-07, 311.000 (wgt'ed) examples reached here.  /* #neg=311 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.28053181790713005;  // std dev = 0.542, 167.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=166 */
%   | else if ( movie(E, A) )
%   | | then return 0.01223900282314432;  // std dev = 0.431, 142.000 (wgt'ed) examples reached here.  /* #neg=106 #pos=36 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.05e-07, 305.000 (wgt'ed) examples reached here.  /* #neg=305 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.182444046469151;  // std dev = 0.308, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(B, E) )
%   | | then return 0.23035783717038727;  // std dev = 0.000, 166.000 (wgt'ed) examples reached here.  /* #pos=166 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.02806713457107793;  // std dev = 5.087, 128.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=36 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109141;  // std dev = 2.58e-08, 322.000 (wgt'ed) examples reached here.  /* #neg=322 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18098297103302194;  // std dev = 0.931, 170.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=166 */
%   | else if ( genre(A, E) )
%   | | then return -0.06884515746986695;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.02476026900298066;  // std dev = 5.252, 154.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=36 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333692;  // std dev = 6.18e-09, 283.000 (wgt'ed) examples reached here.  /* #neg=283 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08977641656786887;  // std dev = 0.239, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( movie(E, B) )
%   | | then return 0.08253048027300333;  // std dev = 5.447, 314.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=202 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420305;  // std dev = 0.000, 311.000 (wgt'ed) examples reached here.  /* #neg=311 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1438072429361965;  // std dev = 0.893, 170.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=166 */
%   | else if ( genre(A, E) )
%   | | then return -0.05934618914625823;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.00505515292828001;  // std dev = 5.109, 131.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=36 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202597;  // std dev = 6.59e-09, 298.000 (wgt'ed) examples reached here.  /* #neg=298 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.130602
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.587 seconds
Total inference time: 1.57 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.97766
   AUC PR    = 0.861585
   CLL	      = -0.130864
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.821782
   F1        = 0.902174


Total scoring time: 2.394 seconds
Parameter learned model CLL: -0.130864


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 15, 0], 'true,false,true': [1.04e-06, 0, 166], 'true,false,false,true': [5.138, 99, 36], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.43e-08, 297, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.45, 3, 166], 'true,false,true': [5.27e-09, 10, 0], 'true,false,false,true': [5.071, 90, 36], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 308, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.163, 10, 0], 'true,false,true': [0.379, 103, 202], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 284, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.333, 4, 166], 'true,false,true': [0.0, 10, 0], 'true,false,false,true': [5.087, 92, 36], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 281, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.177, 6, 0], 'true,false,true': [3.48e-07, 0, 166], 'true,false,false,true': [5.02, 84, 36], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.66e-07, 311, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.542, 1, 166], 'true,false,true': [0.431, 106, 36], 'true,false,false': [0.0, 0, 0], 'false,true': [1.05e-07, 305, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.308, 7, 0], 'true,false,true': [0.0, 0, 166], 'true,false,false,true': [5.087, 92, 36], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.58e-08, 322, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.931, 4, 166], 'true,false,true': [0.0, 10, 0], 'true,false,false,true': [5.252, 118, 36], 'true,false,false,false': [0.0, 0, 0], 'false,true': [6.18e-09, 283, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.239, 10, 0], 'true,false,true': [5.447, 112, 202], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 311, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.893, 4, 166], 'true,false,true': [0.0, 14, 0], 'true,false,false,true': [5.109, 95, 36], 'true,false,false,false': [0.0, 0, 0], 'false,true': [6.59e-09, 298, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.2306120813972166, 2.392399783704041e-17], 'true': [-1.4802973661668754e-17, 0.22072604055143352], 'true,false': [6.5061744479238086e-15, 0.1955555555555569], 'true,false,false': [0.1955555555555569, nan], 'false': [2.392399783704041e-17, nan]}, {'': [0.18066526043252978, -8.651088503572649e-17], 'true': [0.01244758528089268, 0.19345075798358316], 'true,false': [2.7755575615628915e-18, 0.20408163265306214], 'true,false,false': [0.20408163265306214, nan], 'false': [-8.651088503572649e-17, nan]}, {'': [0.14642032617311548, -1.1571338566515715e-16], 'true': [0.00266143537290712, 0.14356047421552134], 'true,false': [0.14356047421552134, nan], 'false': [-1.1571338566515715e-16, nan]}, {'': [0.13367338280555724, -6.005476859182342e-17], 'true': [0.010444702998348945, 0.18899609766613776], 'true,false': [-2.7755575615628915e-18, 0.20214843750000008], 'true,false,false': [0.20214843750000008, nan], 'false': [-6.005476859182342e-17, nan]}, {'': [0.11083385428756963, 8.853225405371024e-17], 'true': [0.005210552164093381, 0.11041124918319388], 'true,false': [7.276642474651628e-16, 0.20999999999999905], 'true,false,false': [0.20999999999999905, nan], 'false': [8.853225405371024e-17, nan]}, {'': [0.10426881935497835, 3.6400754905742835e-17], 'true': [0.0017575874362705391, 0.18592543190768002], 'true,false': [0.18592543190768002, nan], 'false': [3.6400754905742835e-17, nan]}, {'': [0.09850022007441457, 2.068738555202155e-18], 'true': [0.013585920019442374, 0.09806967738619721], 'true,false': [-9.630850334097744e-17, 0.20214843749999975], 'true,false,false': [0.20214843749999975, nan], 'false': [2.068738555202155e-18, nan]}, {'': [0.0960940914880767, 3.923049556979352e-17], 'true': [0.00509640715640408, 0.16830893482400675], 'true,false': [-3.469446951953614e-18, 0.17911958171698333], 'true,false,false': [0.17911958171698333, nan], 'false': [3.923049556979352e-17, nan]}, {'': [0.09263734490463049, -6.568522074952694e-17], 'true': [0.005722503846315787, 0.09448898573574525], 'true,false': [0.09448898573574525, nan], 'false': [-6.568522074952694e-17, nan]}, {'': [0.09080045765478258, 4.396185131066056e-17], 'true': [0.004695308421021878, 0.18040916806055454], 'true,false': [-9.912705577010326e-19, 0.19928908571761425], 'true,false,false': [0.19928908571761425, nan], 'false': [4.396185131066056e-17, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995096;  // std dev = 1.04e-06, 166.000 (wgt'ed) examples reached here.  /* #pos=166 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.8581489350995115;  // std dev = 2.53e-07, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | | else return -0.14185106490048763;  // std dev = 8.69e-08, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
%   else return -0.14185106490048785;  // std dev = 8.43e-08, 297.000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109543;  // std dev = 1.88e-07, 73.000 (wgt'ed) examples reached here.  /* #pos=73 */
%   | | else return 0.7016856637743364;  // std dev = 0.121, 95.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=93 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.7194734122109548;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
%   else return -0.12544463852839202;  // std dev = 0.000, 307.000 (wgt'ed) examples reached here.  /* #neg=307 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.557386641965043;  // std dev = 0.031, 202.000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.11338390979731598;  // std dev = 0.112, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
%   else return -0.11231637819360676;  // std dev = 0.000, 308.000 (wgt'ed) examples reached here.  /* #neg=308 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4157076649656188;  // std dev = 0.623, 167.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=166 */
%   | else if ( genre(A, E) )
%   | | then return -0.10149893249113748;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.4170223603720498;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | | else return -0.10149893249113737;  // std dev = 0.000, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
%   else return -0.10159632948783658;  // std dev = 0.000, 319.000 (wgt'ed) examples reached here.  /* #neg=319 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( actor(B) )
%   | | then return -0.09260972048612903;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.2813365261419931;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.3228429134830326;  // std dev = 0.025, 166.000 (wgt'ed) examples reached here.  /* #pos=166 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.3203788411020656;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | | else return -0.09260972048612896;  // std dev = 3.49e-08, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
%   else return -0.09269127618926043;  // std dev = 1.84e-07, 315.000 (wgt'ed) examples reached here.  /* #neg=315 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2537243859615987;  // std dev = 0.484, 167.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=166 */
%   | else if ( actor(B) )
%   | | then return -0.08511553145529341;  // std dev = 5.77e-08, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
%   | | else return 0.25494500280895843;  // std dev = 3.65e-08, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   else return -0.08518475138839678;  // std dev = 9.66e-08, 270.000 (wgt'ed) examples reached here.  /* #neg=270 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( female(B) )
%   | | then return -0.07871731356797537;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.12251070740852452;  // std dev = 0.082, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( genre(B, E) )
%   | | then return 0.21126851690154788;  // std dev = 0.019, 166.000 (wgt'ed) examples reached here.  /* #pos=166 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.20959718373156;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | | else return -0.07980172327777978;  // std dev = 0.056, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
%   else return -0.07877675473109143;  // std dev = 4.47e-08, 283.000 (wgt'ed) examples reached here.  /* #neg=283 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17562810150820304;  // std dev = 0.429, 167.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=166 */
%   | else if ( genre(A, E) )
%   | | then return -0.07246569478019067;  // std dev = 0.003, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( actor(B) )
%   | | | then return -0.07312112906421286;  // std dev = 0.000, 110.000 (wgt'ed) examples reached here.  /* #neg=110 */
%   | | | else return 0.17697874626453267;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   else return -0.07324622576333692;  // std dev = 1.04e-07, 284.000 (wgt'ed) examples reached here.  /* #neg=284 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.15369369470425473;  // std dev = 0.016, 202.000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.0732742390465034;  // std dev = 0.312, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
%   else return -0.06842697784420292;  // std dev = 0.000, 283.000 (wgt'ed) examples reached here.  /* #neg=283 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.13378787923523794;  // std dev = 2.98e-08, 73.000 (wgt'ed) examples reached here.  /* #pos=73 */
%   | | else return 0.12728078812328364;  // std dev = 0.059, 95.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=93 */
%   | else if ( genre(A, E) )
%   | | then return -0.062066664020737336;  // std dev = 0.003, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.13381679013890493;  // std dev = 3.49e-08, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | | else return -0.06429517823128619;  // std dev = 0.045, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
%   else return -0.06419184008202591;  // std dev = 1.24e-07, 308.000 (wgt'ed) examples reached here.  /* #neg=308 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064341
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.516 seconds
Total inference time: 1.438 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.065781
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.913 seconds
Refined model CLL: -0.065781


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064341
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 11.41 seconds
Total inference time: 1.438 seconds
AUC ROC: 1.0
Total revision time: 11.41
Best scored revision CLL: -0.065781


Dataset: 4_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 00:29:12
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.064341, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 11.41, 'Inference time': 1.438, 'parameter_0.6': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.130602, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 2.587, 'Inference time': 1.57}}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( genre(B, E) )
%   | | then return 0.858148935099509;  // std dev = 1.07e-06, 223.000 (wgt'ed) examples reached here.  /* #pos=223 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.1335980368959193;  // std dev = 5.773, 167.000 (wgt'ed) examples reached here.  /* #neg=121 #pos=46 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048743;  // std dev = 2.63e-07, 373.000 (wgt'ed) examples reached here.  /* #neg=373 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7119630295377186;  // std dev = 1.190, 225.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=223 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 7.45e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.1039526625211444;  // std dev = 5.823, 175.000 (wgt'ed) examples reached here.  /* #neg=129 #pos=46 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839227;  // std dev = 0.000, 416.000 (wgt'ed) examples reached here.  /* #neg=416 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14581186189005121;  // std dev = 0.214, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( movie(E, A) )
%   | | then return 0.35962545162773263;  // std dev = 0.370, 392.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=269 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360618;  // std dev = 0.000, 407.000 (wgt'ed) examples reached here.  /* #neg=407 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.45872639671492327;  // std dev = 1.152, 226.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=223 */
%   | else if ( genre(A, E) )
%   | | then return -0.09857958511503971;  // std dev = 7.45e-09, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.030390385931916522;  // std dev = 5.829, 176.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=46 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783595;  // std dev = 1.06e-08, 395.000 (wgt'ed) examples reached here.  /* #neg=395 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14599259767710257;  // std dev = 0.330, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( genre(B, E) )
%   | | then return 0.35698740451565947;  // std dev = 0.000, 223.000 (wgt'ed) examples reached here.  /* #pos=223 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.012233242553518256;  // std dev = 5.879, 185.000 (wgt'ed) examples reached here.  /* #neg=139 #pos=46 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926096;  // std dev = 1.33e-07, 410.000 (wgt'ed) examples reached here.  /* #neg=410 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2726782784792065;  // std dev = 0.923, 226.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=223 */
%   | else if ( movie(E, A) )
%   | | then return 0.06148543199036303;  // std dev = 0.452, 157.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=46 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.26e-07, 403.000 (wgt'ed) examples reached here.  /* #neg=403 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14697544648908925;  // std dev = 0.434, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else if ( genre(B, E) )
%   | | then return 0.22826579204170416;  // std dev = 2.42e-07, 223.000 (wgt'ed) examples reached here.  /* #pos=223 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.012876361079278262;  // std dev = 5.823, 175.000 (wgt'ed) examples reached here.  /* #neg=129 #pos=46 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109141;  // std dev = 1.23e-07, 404.000 (wgt'ed) examples reached here.  /* #neg=404 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.19055695471001588;  // std dev = 0.000, 223.000 (wgt'ed) examples reached here.  /* #pos=223 */
%   | else if ( genre(A, E) )
%   | | then return -0.07288668898814567;  // std dev = 3.73e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.0119650767107939;  // std dev = 5.817, 174.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=46 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333717;  // std dev = 2.63e-09, 376.000 (wgt'ed) examples reached here.  /* #neg=376 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11562978102963489;  // std dev = 0.396, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( movie(E, B) )
%   | | then return 0.09841166683822426;  // std dev = 5.980, 394.000 (wgt'ed) examples reached here.  /* #neg=125 #pos=269 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.0684269778442034;  // std dev = 0.000, 421.000 (wgt'ed) examples reached here.  /* #neg=421 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14593161306215058;  // std dev = 0.629, 225.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=223 */
%   | else if ( genre(A, E) )
%   | | then return -0.06112931402958207;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.0016038632145525305;  // std dev = 5.786, 169.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=46 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202554;  // std dev = 1.02e-08, 420.000 (wgt'ed) examples reached here.  /* #neg=420 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.131494
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.869 seconds
Total inference time: 1.533 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.978962
   AUC PR    = 0.86762
   CLL	      = -0.13016
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.828996
   F1        = 0.906504


Total scoring time: 3.204 seconds
Parameter learned model CLL: -0.13016


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 12, 0], 'true,false,true': [1.07e-06, 0, 223], 'true,false,false,true': [5.773, 121, 46], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.63e-07, 373, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.19, 2, 223], 'true,false,true': [7.45e-09, 15, 0], 'true,false,false,true': [5.823, 129, 46], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 416, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.214, 17, 0], 'true,false,true': [0.37, 123, 269], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 407, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.152, 3, 223], 'true,false,true': [7.45e-09, 18, 0], 'true,false,false,true': [5.829, 130, 46], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.06e-08, 395, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.33, 14, 0], 'true,false,true': [0.0, 0, 223], 'true,false,false,true': [5.879, 139, 46], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.33e-07, 410, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.923, 3, 223], 'true,false,true': [0.452, 111, 46], 'true,false,false': [0.0, 0, 0], 'false,true': [1.26e-07, 403, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.434, 18, 0], 'true,false,true': [2.42e-07, 0, 223], 'true,false,false,true': [5.823, 129, 46], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.23e-07, 404, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 223], 'true,false,true': [3.73e-09, 13, 0], 'true,false,false,true': [5.817, 128, 46], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.63e-09, 376, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.396, 16, 0], 'true,false,true': [5.98, 125, 269], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 421, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.629, 2, 223], 'true,false,true': [0.0, 13, 0], 'true,false,false,true': [5.786, 123, 46], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.02e-08, 420, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.2213868468602297, 1.8573168025900742e-16], 'true': [-1.1564823173178714e-17, 0.2139973701512198], 'true,false': [5.098064471821346e-15, 0.19957689411596072], 'true,false,false': [0.19957689411596072, nan], 'false': [1.8573168025900742e-16, nan]}, {'': [0.18417879101313595, -1.2810265668751805e-16], 'true': [0.0062892520406768425, 0.1822926389464459], 'true,false': [3.7007434154171884e-18, 0.19376326530612223], 'true,false,false': [0.19376326530612223, nan], 'false': [-1.2810265668751805e-16, nan]}, {'': [0.14152326245948896, -1.7458052475678137e-17], 'true': [0.002692673827341132, 0.1369255490748018], 'true,false': [0.1369255490748018, nan], 'false': [-1.7458052475678137e-17, nan]}, {'': [0.132887528414224, 1.12427648063307e-16], 'true': [0.0058676729594275955, 0.17654068062395226], 'true,false': [3.0839528461809902e-18, 0.19305268595041455], 'true,false,false': [0.19305268595041455, nan], 'false': [1.12427648063307e-16, nan]}, {'': [0.1144927623727754, 4.332577657073782e-17], 'true': [0.007793294969481822, 0.11416728552221354], 'true,false': [-7.965725737220854e-17, 0.18682249817384927], 'true,false,false': [0.18682249817384927, nan], 'false': [4.332577657073782e-17, nan]}, {'': [0.09666299589908327, 3.967050013548946e-17], 'true': [0.003770676187564669, 0.20406168209479983], 'true,false': [0.20406168209479983, nan], 'false': [3.967050013548946e-17, nan]}, {'': [0.09615763730538888, 3.7373844393322104e-17], 'true': [0.010487841455281267, 0.09662687126327665], 'true,false': [2.628689493282882e-16, 0.19376326530612248], 'true,false,false': [0.19376326530612248, nan], 'false': [3.7373844393322104e-17, nan]}, {'': [0.09119035730789476, 7.086529944415892e-18], 'true': [-4.3811491554714696e-16, 0.18142337623788934], 'true,false': [1.0675221390626506e-18, 0.19447747390672543], 'true,false,false': [0.19447747390672543, nan], 'false': [7.086529944415892e-18, nan]}, {'': [0.08932243706253994, -1.2394413814105072e-16], 'true': [0.009784332021004195, 0.0907645575481968], 'true,false': [0.0907645575481968, nan], 'false': [-1.2394413814105072e-16, nan]}, {'': [0.08903140809006423, 1.0362081563168128e-16], 'true': [0.0017583577161600968, 0.18418715595463392], 'true,false': [-1.0675221390626506e-18, 0.19810230734217982], 'true,false,false': [0.19810230734217982, nan], 'false': [1.0362081563168128e-16, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048774;  // std dev = 1.05e-08, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else if ( genre(B, E) )
%   | | then return 0.858148935099509;  // std dev = 1.07e-06, 223.000 (wgt'ed) examples reached here.  /* #pos=223 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.8581489350995121;  // std dev = 2.06e-07, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | | | else return -0.141851064900488;  // std dev = 0.000, 143.000 (wgt'ed) examples reached here.  /* #neg=143 */
%   else return -0.14185106490048724;  // std dev = 2.98e-07, 429.000 (wgt'ed) examples reached here.  /* #neg=429 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109541;  // std dev = 2.67e-07, 91.000 (wgt'ed) examples reached here.  /* #pos=91 */
%   | | else return 0.7068626950357416;  // std dev = 0.102, 134.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=132 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.719473412210955;  // std dev = 0.000, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | | | else return -0.12544463852839108;  // std dev = 8.16e-08, 132.000 (wgt'ed) examples reached here.  /* #neg=132 */
%   else return -0.12544463852839227;  // std dev = 0.000, 407.000 (wgt'ed) examples reached here.  /* #neg=407 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5568934205640428;  // std dev = 0.026, 269.000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.11460678006256589;  // std dev = 0.194, 148.000 (wgt'ed) examples reached here.  /* #neg=148 */
%   else return -0.1123163781936062;  // std dev = 0.000, 404.000 (wgt'ed) examples reached here.  /* #neg=404 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4161693484849963;  // std dev = 0.624, 224.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=223 */
%   | else if ( genre(A, E) )
%   | | then return -0.10138746484858664;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( actor(B) )
%   | | | then return -0.10138746484858693;  // std dev = 0.000, 122.000 (wgt'ed) examples reached here.  /* #neg=122 */
%   | | | else return 0.41714227465579473;  // std dev = 0.000, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   else return -0.10159632948783569;  // std dev = 2.78e-07, 439.000 (wgt'ed) examples reached here.  /* #neg=439 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( actor(B) )
%   | | then return -0.09251636808874213;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else return -0.28223021081593197;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(B, E) )
%   | | then return 0.32230180796870694;  // std dev = 0.020, 223.000 (wgt'ed) examples reached here.  /* #pos=223 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.32046012903959736;  // std dev = 0.000, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | | | else return -0.09333589161567862;  // std dev = 0.075, 131.000 (wgt'ed) examples reached here.  /* #neg=131 */
%   else return -0.09269127618926096;  // std dev = 1.40e-07, 410.000 (wgt'ed) examples reached here.  /* #neg=410 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2560424105967348;  // std dev = 0.019, 269.000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.09461741742271197;  // std dev = 0.403, 140.000 (wgt'ed) examples reached here.  /* #neg=140 */
%   else return -0.08518475138839678;  // std dev = 1.33e-07, 408.000 (wgt'ed) examples reached here.  /* #neg=408 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( female(B) )
%   | | then return -0.07795777154122346;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.11157860191586691;  // std dev = 0.058, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( genre(B, E) )
%   | | then return 0.21055993491254418;  // std dev = 0.015, 223.000 (wgt'ed) examples reached here.  /* #pos=223 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.2094637892643332;  // std dev = 0.000, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | | | else return -0.07866514697440385;  // std dev = 0.065, 121.000 (wgt'ed) examples reached here.  /* #neg=121 */
%   else return -0.07877675473109146;  // std dev = 2.23e-07, 412.000 (wgt'ed) examples reached here.  /* #neg=412 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( actor(A) )
%   | | then return 0.1776848484854042;  // std dev = 0.014, 223.000 (wgt'ed) examples reached here.  /* #pos=223 */
%   | | else return -0.19437140764247435;  // std dev = 1.05e-08, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(A, E) )
%   | | then return -0.07117278813456651;  // std dev = 0.005, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.17688088667867422;  // std dev = 0.000, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | | | else return -0.07279831042327084;  // std dev = 0.043, 119.000 (wgt'ed) examples reached here.  /* #neg=119 */
%   else return -0.07324622576333771;  // std dev = 0.000, 397.000 (wgt'ed) examples reached here.  /* #neg=397 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.1530858647621808;  // std dev = 0.013, 269.000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.06831744786539544;  // std dev = 0.098, 143.000 (wgt'ed) examples reached here.  /* #neg=143 */
%   else return -0.06842697784420336;  // std dev = 0.000, 402.000 (wgt'ed) examples reached here.  /* #neg=402 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.12798899842793765;  // std dev = 0.043, 228.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=223 */
%   | else if ( genre(A, E) )
%   | | then return -0.06237559240099147;  // std dev = 0.003, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.13382069581459027;  // std dev = 1.49e-08, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | | | else return -0.06442752841082582;  // std dev = 0.066, 126.000 (wgt'ed) examples reached here.  /* #neg=126 */
%   else return -0.06419184008202553;  // std dev = 2.13e-07, 428.000 (wgt'ed) examples reached here.  /* #neg=428 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063918
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 4.232 seconds
Total inference time: 1.577 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064817
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.544 seconds
Refined model CLL: -0.064817


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063918
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 12.849 seconds
Total inference time: 1.577 seconds
AUC ROC: 1.0
Total revision time: 12.849
Best scored revision CLL: -0.064817


Dataset: 4_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 00:29:29
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063918, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 12.849, 'Inference time': 1.577, 'parameter_0.8': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.131494, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 2.869, 'Inference time': 1.533}}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995086;  // std dev = 1.07e-06, 278.000 (wgt'ed) examples reached here.  /* #pos=278 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.13645082189196617;  // std dev = 6.525, 212.000 (wgt'ed) examples reached here.  /* #neg=153 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048782;  // std dev = 0.000, 508.000 (wgt'ed) examples reached here.  /* #neg=508 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.710452934800929;  // std dev = 1.456, 281.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=278 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.09502420768294431;  // std dev = 6.633, 232.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839227;  // std dev = 0.000, 491.000 (wgt'ed) examples reached here.  /* #neg=491 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13598730230924452;  // std dev = 0.226, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | else if ( movie(E, A) )
%   | | then return 0.34018660384734517;  // std dev = 0.378, 511.000 (wgt'ed) examples reached here.  /* #neg=174 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360583;  // std dev = 0.000, 494.000 (wgt'ed) examples reached here.  /* #neg=494 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.463242832144189;  // std dev = 1.342, 282.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=278 */
%   | else if ( genre(A, E) )
%   | | then return -0.09945606127311277;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.0404959430350372;  // std dev = 6.576, 221.000 (wgt'ed) examples reached here.  /* #neg=162 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783537;  // std dev = 1.58e-08, 505.000 (wgt'ed) examples reached here.  /* #neg=505 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13317570294232808;  // std dev = 0.303, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( genre(B, E) )
%   | | then return 0.36076824385777717;  // std dev = 3.67e-07, 278.000 (wgt'ed) examples reached here.  /* #pos=278 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.02857718355946477;  // std dev = 6.598, 225.000 (wgt'ed) examples reached here.  /* #neg=166 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926162;  // std dev = 0.000, 538.000 (wgt'ed) examples reached here.  /* #neg=538 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.27464042730619087;  // std dev = 1.080, 282.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=278 */
%   | else if ( movie(E, A) )
%   | | then return 0.021262280648700536;  // std dev = 0.429, 236.000 (wgt'ed) examples reached here.  /* #neg=177 #pos=59 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.41e-07, 483.000 (wgt'ed) examples reached here.  /* #neg=483 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11577688475147811;  // std dev = 0.309, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( genre(B, E) )
%   | | then return 0.23015433092640514;  // std dev = 5.25e-07, 278.000 (wgt'ed) examples reached here.  /* #pos=278 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.020705648419944434;  // std dev = 6.592, 224.000 (wgt'ed) examples reached here.  /* #neg=165 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109208;  // std dev = 0.000, 502.000 (wgt'ed) examples reached here.  /* #neg=502 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18673578028905793;  // std dev = 0.836, 281.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=278 */
%   | else if ( genre(A, E) )
%   | | then return -0.07375230944396138;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.02412925314596934;  // std dev = 6.560, 218.000 (wgt'ed) examples reached here.  /* #neg=159 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333673;  // std dev = 8.69e-09, 539.000 (wgt'ed) examples reached here.  /* #neg=539 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.15713011469902155;  // std dev = 0.483, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( movie(E, B) )
%   | | then return 0.12035089724171971;  // std dev = 6.496, 470.000 (wgt'ed) examples reached here.  /* #neg=133 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420357;  // std dev = 0.000, 513.000 (wgt'ed) examples reached here.  /* #neg=513 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14235914385858;  // std dev = 0.890, 282.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=278 */
%   | else if ( genre(A, E) )
%   | | then return -0.05945097233685873;  // std dev = 3.73e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.0061375204383682614;  // std dev = 6.571, 220.000 (wgt'ed) examples reached here.  /* #neg=161 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202537;  // std dev = 1.09e-08, 504.000 (wgt'ed) examples reached here.  /* #neg=504 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.131312
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.061 seconds
Total inference time: 1.569 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.978805
   AUC PR    = 0.865091
   CLL	      = -0.129295
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.824926
   F1        = 0.904065


Total scoring time: 3.352 seconds
Parameter learned model CLL: -0.129295


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 13, 0], 'true,false,true': [1.07e-06, 0, 278], 'true,false,false,true': [6.525, 153, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 508, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.456, 3, 278], 'true,false,true': [0.0, 18, 0], 'true,false,false,true': [6.633, 173, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 491, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.226, 24, 0], 'true,false,true': [0.378, 174, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 494, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.342, 4, 278], 'true,false,true': [0.0, 16, 0], 'true,false,false,true': [6.576, 162, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.58e-08, 505, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.303, 14, 0], 'true,false,true': [3.67e-07, 0, 278], 'true,false,false,true': [6.598, 166, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 538, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [1.08, 4, 278], 'true,false,true': [0.429, 177, 59], 'true,false,false': [0.0, 0, 0], 'false,true': [1.41e-07, 483, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.309, 14, 0], 'true,false,true': [5.25e-07, 0, 278], 'true,false,false,true': [6.592, 165, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 502, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.836, 3, 278], 'true,false,true': [0.0, 17, 0], 'true,false,false,true': [6.56, 159, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.69e-09, 539, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.483, 15, 0], 'true,false,true': [6.496, 133, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 513, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.89, 4, 278], 'true,false,true': [3.73e-09, 14, 0], 'true,false,false,true': [6.571, 161, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.09e-08, 504, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.22110675904809976, -5.944501234213437e-17], 'true': [-1.2810265668751807e-17, 0.21474802165764528], 'true,false': [4.089454594302735e-15, 0.20084994660021413], 'true,false,false': [0.20084994660021413, nan], 'false': [-5.944501234213437e-17, nan]}, {'': [0.18766977003708496, -1.230063799177363e-16], 'true': [0.007540195177310451, 0.1792304513364853], 'true,false': [0.0, 0.18963659334125751], 'true,false,false': [0.18963659334125751, nan], 'false': [-1.230063799177363e-16, nan]}, {'': [0.1460302463807316, -1.0787592142106784e-17], 'true': [0.0021291880642555264, 0.142617223509907], 'true,false': [0.142617223509907, nan], 'false': [-1.0787592142106784e-17, nan]}, {'': [0.1337120075231951, 2.497452190047877e-16], 'true': [0.006387572286497306, 0.18371770886117686], 'true,false': [-3.469446951953614e-18, 0.19569623881575002], 'true,false,false': [0.19569623881575002, nan], 'false': [2.497452190047877e-16, nan]}, {'': [0.11405749483277432, -5.447934544629021e-17], 'true': [0.006554321703589038, 0.1138199824512983], 'true,false': [4.856227330734498e-16, 0.1934617283950621], 'true,false,false': [0.1934617283950621, nan], 'false': [-5.447934544629021e-17, nan]}, {'': [0.10198865185645614, 4.13747711040431e-17], 'true': [0.004138510392183819, 0.18396043522523123], 'true,false': [0.18396043522523123, nan], 'false': [4.13747711040431e-17, nan]}, {'': [0.09663818373382303, -4.157807343217718e-17], 'true': [0.0068200905738023355, 0.09741363309604707], 'true,false': [9.904147845576936e-16, 0.1940170599489814], 'true,false,false': [0.1940170599489814, nan], 'false': [-4.157807343217718e-17, nan]}, {'': [0.09218492370795753, 7.497610036429629e-17], 'true': [0.002488754383086807, 0.18375830362069723], 'true,false': [0.0, 0.1973950004208388], 'true,false,false': [0.1973950004208388, nan], 'false': [7.497610036429629e-17, nan]}, {'': [0.08980550178574308, -1.1946259446258994e-16], 'true': [0.015579773815724396, 0.08979309731752144], 'true,false': [0.08979309731752144, nan], 'false': [-1.1946259446258994e-16, nan]}, {'': [0.09098827387193781, 1.189524669241239e-16], 'true': [0.002811418740423235, 0.18467813895415996], 'true,false': [9.912705577010326e-19, 0.1962603305785105], 'true,false,false': [0.1962603305785105, nan], 'false': [1.189524669241239e-16, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995086;  // std dev = 1.07e-06, 278.000 (wgt'ed) examples reached here.  /* #pos=278 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.8581489350995125;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.14185106490048816;  // std dev = 0.000, 166.000 (wgt'ed) examples reached here.  /* #neg=166 */
%   else return -0.14185106490048766;  // std dev = 0.000, 493.000 (wgt'ed) examples reached here.  /* #neg=493 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109551;  // std dev = 0.000, 111.000 (wgt'ed) examples reached here.  /* #pos=111 */
%   | | else return 0.709474382024692;  // std dev = 0.091, 169.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=167 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.7194734122109543;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.12544463852839155;  // std dev = 0.000, 181.000 (wgt'ed) examples reached here.  /* #neg=181 */
%   else return -0.12544463852839233;  // std dev = 0.000, 467.000 (wgt'ed) examples reached here.  /* #neg=467 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( actor(B) )
%   | | then return -0.11231637819360636;  // std dev = 1.49e-08, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else return -0.2257657213682376;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( actor(A), director(B) )
%   | | then return 0.5565893125222311;  // std dev = 0.023, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | | else return -0.11231637819360618;  // std dev = 9.54e-08, 136.000 (wgt'ed) examples reached here.  /* #neg=136 */
%   else return -0.11231637819360579;  // std dev = 0.000, 508.000 (wgt'ed) examples reached here.  /* #neg=508 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.4172162157046675;  // std dev = 0.000, 111.000 (wgt'ed) examples reached here.  /* #pos=111 */
%   | | else if ( actor(A) )
%   | | | then return 0.41964944219679207;  // std dev = 3.37e-07, 167.000 (wgt'ed) examples reached here.  /* #pos=167 */
%   | | | else return -0.18875160407202282;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(A, E) )
%   | | then return -0.1015963294878363;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.4172162157046663;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.10159632948783649;  // std dev = 0.000, 181.000 (wgt'ed) examples reached here.  /* #neg=181 */
%   else return -0.1015963294878354;  // std dev = 3.49e-07, 498.000 (wgt'ed) examples reached here.  /* #neg=498 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09993737082321703;  // std dev = 0.092, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( genre(B, E) )
%   | | then return 0.3215014041771777;  // std dev = 0.013, 278.000 (wgt'ed) examples reached here.  /* #pos=278 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.32051025352600726;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.09269127618926074;  // std dev = 7.15e-08, 142.000 (wgt'ed) examples reached here.  /* #neg=142 */
%   else return -0.09269127618926123;  // std dev = 5.16e-08, 455.000 (wgt'ed) examples reached here.  /* #neg=455 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.2555926723576344;  // std dev = 0.013, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.08762199935227316;  // std dev = 0.164, 178.000 (wgt'ed) examples reached here.  /* #neg=178 */
%   else return -0.08518475138839678;  // std dev = 1.44e-07, 471.000 (wgt'ed) examples reached here.  /* #neg=471 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08180386760177201;  // std dev = 0.058, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( genre(B, E) )
%   | | then return 0.2101580413771192;  // std dev = 0.010, 278.000 (wgt'ed) examples reached here.  /* #pos=278 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.2095680929271655;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.07860006274755034;  // std dev = 0.000, 150.000 (wgt'ed) examples reached here.  /* #neg=150 */
%   else return -0.07877675473109225;  // std dev = 6.32e-08, 532.000 (wgt'ed) examples reached here.  /* #neg=532 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.17672724682532284;  // std dev = 1.26e-07, 111.000 (wgt'ed) examples reached here.  /* #pos=111 */
%   | | else if ( actor(A) )
%   | | | then return 0.17783072501206101;  // std dev = 0.000, 167.000 (wgt'ed) examples reached here.  /* #pos=167 */
%   | | | else return -0.12827951362229173;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(A, E) )
%   | | then return -0.07238809086622451;  // std dev = 8.33e-09, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.17695740599993812;  // std dev = 1.49e-08, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.07309292442936219;  // std dev = 0.000, 148.000 (wgt'ed) examples reached here.  /* #neg=148 */
%   else return -0.07324622576333699;  // std dev = 1.33e-07, 485.000 (wgt'ed) examples reached here.  /* #neg=485 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.15290900206683483;  // std dev = 0.007, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06929752855304662;  // std dev = 0.092, 177.000 (wgt'ed) examples reached here.  /* #neg=177 */
%   else return -0.06842697784420358;  // std dev = 0.000, 519.000 (wgt'ed) examples reached here.  /* #neg=519 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.13373666756175948;  // std dev = 0.000, 111.000 (wgt'ed) examples reached here.  /* #pos=111 */
%   | | else if ( actor(A) )
%   | | | then return 0.1344871091594276;  // std dev = 6.99e-08, 167.000 (wgt'ed) examples reached here.  /* #pos=167 */
%   | | | else return -0.1077594552582117;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(A, E) )
%   | | then return -0.06343178587803432;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.13389325298923355;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.0640131915722348;  // std dev = 5.05e-08, 171.000 (wgt'ed) examples reached here.  /* #neg=171 */
%   else return -0.06419184008202543;  // std dev = 2.37e-07, 471.000 (wgt'ed) examples reached here.  /* #neg=471 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063876
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 5.194 seconds
Total inference time: 1.651 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064222
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 3.095 seconds
Refined model CLL: -0.064222


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063876
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 14.702 seconds
Total inference time: 1.651 seconds
AUC ROC: 1.0
Total revision time: 14.702
Best scored revision CLL: -0.064222


Dataset: 4_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 00:29:47
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063876, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 14.702, 'Inference time': 1.651, 'parameter_1.0': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.131312, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 3.061, 'Inference time': 1.569}}


Starting fold 5

Target train facts examples: 915
Target train pos examples: 337
Target train neg examples: 12165

Target test facts examples: 163
Target test pos	 examples: 45
Target test neg examples: 2071

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.09451257146314873;  // std dev = 3.151, 55.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=13 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048763;  // std dev = 8.30e-08, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.1115561889352658;  // std dev = 3.090, 49.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=13 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1254446385283913;  // std dev = 0.000, 115.000 (wgt'ed) examples reached here.  /* #neg=115 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( movie(E, A) )
%   | | then return 0.34707629951637325;  // std dev = 0.378, 101.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360626;  // std dev = 5.96e-08, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4688656720992516;  // std dev = 0.000, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.15910790265321217;  // std dev = 2.834, 34.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=13 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783634;  // std dev = 0.000, 113.000 (wgt'ed) examples reached here.  /* #neg=113 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.35581745259172604;  // std dev = 2.98e-08, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.10906834781650909;  // std dev = 2.882, 36.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=13 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926096;  // std dev = 4.71e-08, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.26855221981769223;  // std dev = 0.570, 55.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=54 */
%   | else if ( movie(E, A) )
%   | | then return 0.056357529894718816;  // std dev = 0.466, 40.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=13 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839682;  // std dev = 5.58e-08, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.35496711720819146;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.2283002340702929;  // std dev = 5.96e-08, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.01096936728076392;  // std dev = 3.026, 44.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=13 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.0787767547310916;  // std dev = 5.58e-08, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17383123805298592;  // std dev = 0.651, 56.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=54 */
%   | else if ( genre(A, E) )
%   | | then return -0.07044864845012147;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.004114602716982249;  // std dev = 3.054, 46.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=13 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333707;  // std dev = 0.000, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1903174050711274;  // std dev = 0.249, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( movie(E, B) )
%   | | then return 0.08400094801291756;  // std dev = 3.189, 101.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420265;  // std dev = 4.84e-09, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15393491429529582;  // std dev = 0.000, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | else if ( genre(A, E) )
%   | | then return -0.05517008537776331;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.006188511248642531;  // std dev = 2.996, 42.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=13 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.971565
   AUC PR    = 0.823063
   CLL	      = -0.144
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.875


Total learning time: 1.607 seconds
Total inference time: 1.553 seconds
AUC ROC: 0.971565


Results scoring model
   AUC ROC   = 0.97767
   AUC PR    = 0.851988
   CLL	      = -0.135436
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.80597
   F1        = 0.892562


Total scoring time: 1.595 seconds
Parameter learned model CLL: -0.135436


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [0.0, 0, 54], 'true,false,false,true': [3.151, 42, 13], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.3e-08, 89, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 54], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [3.09, 36, 13], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 115, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [2.63e-09, 3, 0], 'true,false,true': [0.378, 34, 67], 'true,false,false': [0.0, 0, 0], 'false,true': [5.96e-08, 82, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 54], 'true,false,true': [0.0, 5, 0], 'true,false,false,true': [2.834, 21, 13], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 113, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [2.98e-08, 0, 54], 'true,false,false,true': [2.882, 23, 13], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.71e-08, 99, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.57, 1, 54], 'true,false,true': [0.466, 27, 13], 'true,false,false': [0.0, 0, 0], 'false,true': [5.58e-08, 101, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [5.96e-08, 0, 54], 'true,false,false,true': [3.026, 31, 13], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.58e-08, 97, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.651, 2, 54], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [3.054, 33, 13], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 100, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.249, 4, 0], 'true,false,true': [3.189, 34, 67], 'true,false,false': [0.0, 0, 0], 'false,true': [4.84e-09, 104, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 54], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [2.996, 29, 13], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 91, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.23926629332034674, 7.734137924355023e-17], 'true': [0.0, 0.23684875010520934], 'true,false': [0.0, 0.1804958677685945], 'true,false,false': [0.1804958677685945, nan], 'false': [7.734137924355023e-17, nan]}, {'': [0.1871497606966639, -5.792467954566034e-18], 'true': [-3.289549702593056e-16, 0.18939125000143603], 'true,false': [0.0, 0.19491878384006656], 'true,false,false': [0.19491878384006656, nan], 'false': [-5.792467954566034e-18, nan]}, {'': [0.14474613255647611, 4.332577657073782e-17], 'true': [2.3129646346357427e-18, 0.14295778323817426], 'true,false': [0.14295778323817426, nan], 'false': [4.332577657073782e-17, nan]}, {'': [0.11820081698604293, -1.1789979022568034e-17], 'true': [-4.276414613370973e-16, 0.21347889365883768], 'true,false': [0.0, 0.2361591695501727], 'true,false,false': [0.2361591695501727, nan], 'false': [-1.1789979022568034e-17, nan]}, {'': [0.10689637958705285, 2.2428747972225384e-17], 'true': [nan, 0.10689637958705285], 'true,false': [1.644774851296528e-17, 0.23070987654320974], 'true,false,false': [0.23070987654320974, nan], 'false': [2.2428747972225384e-17, nan]}, {'': [0.10586248169397078, 3.0778460088618204e-17], 'true': [0.005904781260463226, 0.21723629606654], 'true,false': [0.21723629606654, nan], 'false': [3.0778460088618204e-17, nan]}, {'': [0.10644197229696062, 3.204767493763338e-17], 'true': [0.0, 0.10514533712389146], 'true,false': [6.579099405186112e-17, 0.20816115702479332], 'true,false,false': [0.20816115702479332, nan], 'false': [3.204767493763338e-17, nan]}, {'': [0.10268601828420515, -5.551115123125783e-18], 'true': [0.0075756949310682485, 0.19851901150529383], 'true,false': [0.0, 0.20274102079395057], 'true,false,false': [0.20274102079395057, nan], 'false': [-5.551115123125783e-18, nan]}, {'': [0.10019676897028612, 2.4019248128909638e-17], 'true': [0.015461636328489119, 0.10068592785182338], 'true,false': [0.10068592785182338, nan], 'false': [2.4019248128909638e-17, nan]}, {'': [0.0972733628472832, -1.342027831964475e-17], 'true': [-2.4671622769447922e-17, 0.20416768112205455], 'true,false': [0.0, 0.21371882086167793], 'true,false,false': [0.21371882086167793, nan], 'false': [-1.342027831964475e-17, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.14185106490048774;  // std dev = 2.58e-08, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   else return -0.14185106490048763;  // std dev = 8.56e-08, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.7194734122109542;  // std dev = 4.21e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   else return -0.12544463852839133;  // std dev = 0.000, 107.000 (wgt'ed) examples reached here.  /* #neg=107 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360638;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( director(B) )
%   | | then return 0.5553664367462837;  // std dev = 2.15e-07, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | | else return -0.11231637819360639;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   else return -0.1123163781936062;  // std dev = 7.88e-08, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.4175135841583098;  // std dev = 5.58e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return 0.38457160723095657;  // std dev = 0.140, 38.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=36 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783633;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.41751358415831025;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.1037923495551534;  // std dev = 0.078, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   else return -0.10159632948783626;  // std dev = 4.71e-08, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.3207118471601496;  // std dev = 2.11e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return 0.3115306807020883;  // std dev = 0.098, 37.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=36 */
%   | else if ( actor(B) )
%   | | then return -0.09251993684110325;  // std dev = 0.000251, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | else return 0.3207118471601497;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else return -0.092691276189261;  // std dev = 4.21e-08, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25951809497146916;  // std dev = 0.033, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.09434548021008868;  // std dev = 0.285, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   else return -0.08518475138839682;  // std dev = 5.67e-08, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07812685121062077;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.21373829728380084;  // std dev = 0.024, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.20903825829471148;  // std dev = 2.11e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.08264352107330358;  // std dev = 0.119, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   else return -0.07877675473109157;  // std dev = 6.50e-08, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.17588631951734085;  // std dev = 1.83e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return 0.16883946711363712;  // std dev = 0.079, 37.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=36 */
%   | else if ( genre(A, E) )
%   | | then return -0.07268214210510154;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.17656862982207633;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.07825247965950681;  // std dev = 0.111, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else return -0.07324622576333707;  // std dev = 0.000, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06728415229725013;  // std dev = 0.002, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | else return 0.1553864505972807;  // std dev = 0.025, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   else return -0.06842697784420265;  // std dev = 4.47e-08, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.13287856346008559;  // std dev = 2.11e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return 0.12461223884174083;  // std dev = 0.084, 37.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=36 */
%   | else if ( genre(A, E) )
%   | | then return -0.06379456271993575;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( actor(B) )
%   | | | then return -0.0630648799161539;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | | else return 0.13334217679864263;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else return -0.06419184008202626;  // std dev = 0.000, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064017
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.707 seconds
Total inference time: 1.467 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.067541
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.56 seconds
Refined model CLL: -0.067541


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064017
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 7.468999999999999 seconds
Total inference time: 1.467 seconds
AUC ROC: 1.0
Total revision time: 7.468999999999999
Best scored revision CLL: -0.067541


Dataset: 4_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 00:29:59
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.064017, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 7.468999999999999, 'Inference time': 1.467, 'parameter_0.2': {'AUC ROC': 0.971565, 'AUC PR': 0.823063, 'CLL': -0.144, 'Precision': [1.0, 0.5], 'Recall': 0.777778, 'F1': 0.875, 'Learning time': 1.607, 'Inference time': 1.553}}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995108;  // std dev = 5.72e-07, 112.000 (wgt'ed) examples reached here.  /* #pos=112 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.12644161802634116;  // std dev = 4.012, 82.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=22 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048838;  // std dev = 0.000, 194.000 (wgt'ed) examples reached here.  /* #neg=194 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.719473412210955;  // std dev = 0.000, 112.000 (wgt'ed) examples reached here.  /* #pos=112 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.1393469666970668;  // std dev = 3.932, 74.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=22 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1254446385283916;  // std dev = 0.000, 190.000 (wgt'ed) examples reached here.  /* #neg=190 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.16991733837313955;  // std dev = 0.081, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( movie(E, A) )
%   | | then return 0.37324290301492;  // std dev = 0.362, 189.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=134 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360664;  // std dev = 0.000, 207.000 (wgt'ed) examples reached here.  /* #neg=207 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4623550612643049;  // std dev = 2.46e-07, 112.000 (wgt'ed) examples reached here.  /* #pos=112 */
%   | else if ( genre(A, E) )
%   | | then return -0.09645816320400943;  // std dev = 9.13e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.020332183436002422;  // std dev = 4.038, 85.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=22 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783653;  // std dev = 0.000, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1613341215688538;  // std dev = 0.266, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( genre(B, E) )
%   | | then return 0.35132495175086836;  // std dev = 1.33e-07, 112.000 (wgt'ed) examples reached here.  /* #pos=112 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.004987461820547817;  // std dev = 4.070, 89.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=22 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0926912761892606;  // std dev = 8.69e-08, 183.000 (wgt'ed) examples reached here.  /* #neg=183 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2759690809710023;  // std dev = 0.000, 112.000 (wgt'ed) examples reached here.  /* #pos=112 */
%   | else if ( movie(E, A) )
%   | | then return 0.02596206457344918;  // std dev = 0.440, 83.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=22 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 7.74e-08, 201.000 (wgt'ed) examples reached here.  /* #neg=201 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.17607311562875624;  // std dev = 0.299, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(B, E) )
%   | | then return 0.22434646934841823;  // std dev = 0.000, 112.000 (wgt'ed) examples reached here.  /* #pos=112 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.0171309580846859;  // std dev = 4.021, 83.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=22 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109147;  // std dev = 7.30e-08, 200.000 (wgt'ed) examples reached here.  /* #neg=200 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1836686748534796;  // std dev = 0.456, 113.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=112 */
%   | else if ( genre(A, E) )
%   | | then return -0.0662906476557999;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.017155381091708437;  // std dev = 4.012, 82.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=22 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333664;  // std dev = 8.48e-09, 201.000 (wgt'ed) examples reached here.  /* #neg=201 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.06230359970296018;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( movie(E, B) )
%   | | then return 0.10083886795539561;  // std dev = 4.123, 193.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=134 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420262;  // std dev = 5.74e-09, 215.000 (wgt'ed) examples reached here.  /* #neg=215 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13656048934442108;  // std dev = 0.758, 115.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=112 */
%   | else if ( genre(A, E) )
%   | | then return -0.058761447883039795;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.026781202571712178;  // std dev = 4.070, 89.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=22 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 197.000 (wgt'ed) examples reached here.  /* #neg=197 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.971565
   AUC PR    = 0.823063
   CLL	      = -0.132077
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.875


Total learning time: 2.073 seconds
Total inference time: 1.67 seconds
AUC ROC: 0.971565


Results scoring model
   AUC ROC   = 0.98065
   AUC PR    = 0.874691
   CLL	      = -0.126099
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.835821
   F1        = 0.910569


Total scoring time: 2.143 seconds
Parameter learned model CLL: -0.126099


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 8, 0], 'true,false,true': [5.72e-07, 0, 112], 'true,false,false,true': [4.012, 60, 22], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 194, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 112], 'true,false,true': [0.0, 8, 0], 'true,false,false,true': [3.932, 52, 22], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 190, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.081, 2, 0], 'true,false,true': [0.362, 55, 134], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 207, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [2.46e-07, 0, 112], 'true,false,true': [9.13e-09, 14, 0], 'true,false,false,true': [4.038, 63, 22], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 206, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.266, 8, 0], 'true,false,true': [1.33e-07, 0, 112], 'true,false,false,true': [4.07, 67, 22], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.69e-08, 183, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 112], 'true,false,true': [0.44, 61, 22], 'true,false,false': [0.0, 0, 0], 'false,true': [7.74e-08, 201, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.299, 7, 0], 'true,false,true': [0.0, 0, 112], 'true,false,false,true': [4.021, 61, 22], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.3e-08, 200, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.456, 1, 112], 'true,false,true': [0.0, 5, 0], 'true,false,false,true': [4.012, 60, 22], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.48e-09, 201, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 6, 0], 'true,false,true': [4.123, 59, 134], 'true,false,false': [0.0, 0, 0], 'false,true': [5.74e-09, 215, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.758, 3, 112], 'true,false,true': [0.0, 4, 0], 'true,false,false,true': [4.07, 67, 22], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 197, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.22331144005490106, -2.3120108347864086e-16], 'true': [-6.938893903907228e-18, 0.21362525241790228], 'true,false': [2.91830052187184e-15, 0.19631171921475404], 'true,false,false': [0.19631171921475404, nan], 'false': [-2.3120108347864086e-16, nan]}, {'': [0.17189882771462442, -2.5710427938687835e-17], 'true': [-8.247371040072592e-16, 0.19470308082106122], 'true,false': [0.0, 0.20891161431701932], 'true,false,false': [0.20891161431701932, nan], 'false': [-2.5710427938687835e-17, nan]}, {'': [0.1331059875352144, -5.148860404058697e-17], 'true': [0.0033178706136041645, 0.13139016018781707], 'true,false': [0.13139016018781707, nan], 'false': [-5.148860404058697e-17, nan]}, {'': [0.13042100170429363, -8.838668739734256e-17], 'true': [5.392511833893617e-16, 0.1663619972627741], 'true,false': [5.9476233462061954e-18, 0.19183391003460248], 'true,false,false': [0.19183391003460248, nan], 'false': [-8.838668739734256e-17, nan]}, {'': [0.11279710959698383, 4.125418889317522e-17], 'true': [0.008872341667884545, 0.11199177071372367], 'true,false': [1.5860328923216522e-16, 0.1860876152001012], 'true,false,false': [0.1860876152001012, nan], 'false': [4.125418889317522e-17, nan]}, {'': [0.09756789315792962, 2.982688722873555e-17], 'true': [-1.2688263138573217e-16, 0.19332632219072088], 'true,false': [0.19332632219072088, nan], 'false': [2.982688722873555e-17, nan]}, {'': [0.09388123386575238, 2.6645352591003756e-17], 'true': [0.012809530023327801, 0.09341343081130085], 'true,false': [-1.427429603089487e-16, 0.19480330962403863], 'true,false,false': [0.19480330962403863, nan], 'false': [2.6645352591003756e-17, nan]}, {'': [0.08890578387787866, 7.180546925436336e-17], 'true': [0.0018428244730268114, 0.18540662348535838], 'true,false': [-6.938893903907229e-19, 0.19631171921475307], 'true,false,false': [0.19631171921475307, nan], 'false': [7.180546925436336e-17, nan]}, {'': [0.08620781798955653, 3.408126494198155e-17], 'true': [0.0, 0.08808537745774712], 'true,false': [0.08808537745774712, nan], 'false': [3.408126494198155e-17, nan]}, {'': [0.08911129326913401, -2.254259948477475e-18], 'true': [0.004994509176998578, 0.17812594346853208], 'true,false': [0.0, 0.18608761520010064], 'true,false,false': [0.18608761520010064, nan], 'false': [-2.254259948477475e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995108;  // std dev = 5.72e-07, 112.000 (wgt'ed) examples reached here.  /* #pos=112 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.8581489350995121;  // std dev = 5.96e-08, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return -0.14185106490048768;  // std dev = 4.94e-08, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   else return -0.1418510649004883;  // std dev = 0.000, 182.000 (wgt'ed) examples reached here.  /* #neg=182 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.719473412210955;  // std dev = 0.000, 112.000 (wgt'ed) examples reached here.  /* #pos=112 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.7194734122109542;  // std dev = 7.30e-08, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return -0.12544463852839155;  // std dev = 0.000, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   else return -0.12544463852839174;  // std dev = 0.000, 222.000 (wgt'ed) examples reached here.  /* #neg=222 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5553664367462834;  // std dev = 4.99e-07, 134.000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.1137564021980946;  // std dev = 0.114, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
%   else return -0.11231637819360661;  // std dev = 0.000, 202.000 (wgt'ed) examples reached here.  /* #neg=202 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.41751358415830947;  // std dev = 3.04e-07, 112.000 (wgt'ed) examples reached here.  /* #pos=112 */
%   | else if ( genre(A, E) )
%   | | then return -0.10146496738133974;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.4175135841583106;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return -0.10146496738133971;  // std dev = 2.58e-08, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   else return -0.10159632948783656;  // std dev = 0.000, 228.000 (wgt'ed) examples reached here.  /* #neg=228 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( female(B) )
%   | | then return -0.09258127689107373;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.15680054001528368;  // std dev = 0.222, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.3207118471601501;  // std dev = 1.63e-07, 112.000 (wgt'ed) examples reached here.  /* #pos=112 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.32071184716014955;  // std dev = 4.71e-08, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return -0.09258127689107368;  // std dev = 2.79e-08, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   else return -0.09269127618926053;  // std dev = 9.77e-08, 218.000 (wgt'ed) examples reached here.  /* #neg=218 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.2551722425694897;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else return 0.24227234970686828;  // std dev = 0.080, 79.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=77 */
%   | else if ( actor(B) )
%   | | then return -0.08500123735516586;  // std dev = 0.005, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   | | else return 0.2551722425694897;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else return -0.08518475138839678;  // std dev = 7.74e-08, 203.000 (wgt'ed) examples reached here.  /* #neg=203 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( actor(B) )
%   | | then return -0.07757004338619587;  // std dev = 0.004, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.302979714266259;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.21123328646144618;  // std dev = 0.011, 112.000 (wgt'ed) examples reached here.  /* #pos=112 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.20975771563253598;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return -0.08044630110999483;  // std dev = 0.048, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   else return -0.07877675473109146;  // std dev = 7.15e-08, 205.000 (wgt'ed) examples reached here.  /* #neg=205 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17817817718282888;  // std dev = 0.009, 112.000 (wgt'ed) examples reached here.  /* #pos=112 */
%   | else if ( genre(A, E) )
%   | | then return -0.07007752251942437;  // std dev = 0.004, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.17709649774527747;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return -0.0734561478578436;  // std dev = 0.026, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   else return -0.07324622576333663;  // std dev = 1.25e-07, 208.000 (wgt'ed) examples reached here.  /* #neg=208 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( female(B) )
%   | | then return -0.06864148796368341;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.1071761256579598;  // std dev = 0.190, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( director(B), actor(A) )
%   | | then return 0.15342938341106413;  // std dev = 0.009, 134.000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | | else return -0.06902616336250617;  // std dev = 0.035, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   else return -0.06842697784420262;  // std dev = 8.02e-08, 195.000 (wgt'ed) examples reached here.  /* #neg=195 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13466277734229432;  // std dev = 0.007, 112.000 (wgt'ed) examples reached here.  /* #pos=112 */
%   | else if ( genre(A, E) )
%   | | then return -0.06175025404589893;  // std dev = 0.009, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( actor(B) )
%   | | | then return -0.06398228229461245;  // std dev = 2.17e-08, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | | | else return 0.13392749533858384;  // std dev = 1.05e-08, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else return -0.06419184008202626;  // std dev = 0.000, 214.000 (wgt'ed) examples reached here.  /* #neg=214 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063905
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.833 seconds
Total inference time: 1.523 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.065586
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.066 seconds
Refined model CLL: -0.065586


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063905
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 9.114999999999998 seconds
Total inference time: 1.523 seconds
AUC ROC: 1.0
Total revision time: 9.114999999999998
Best scored revision CLL: -0.065586


Dataset: 4_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 00:30:12
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063905, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 9.114999999999998, 'Inference time': 1.523, 'parameter_0.4': {'AUC ROC': 0.971565, 'AUC PR': 0.823063, 'CLL': -0.132077, 'Precision': [1.0, 0.5], 'Recall': 0.777778, 'F1': 0.875, 'Learning time': 2.073, 'Inference time': 1.67}}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995095;  // std dev = 1.08e-06, 172.000 (wgt'ed) examples reached here.  /* #pos=172 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.126006077956654;  // std dev = 4.687, 112.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=30 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048788;  // std dev = 5.96e-08, 293.000 (wgt'ed) examples reached here.  /* #neg=293 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7049891027697106;  // std dev = 1.451, 175.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=172 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.07648258848093623;  // std dev = 4.793, 128.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=30 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.125444638528392;  // std dev = 0.000, 296.000 (wgt'ed) examples reached here.  /* #neg=296 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12170523658878213;  // std dev = 0.108, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( movie(E, A) )
%   | | then return 0.3701786922695692;  // std dev = 0.361, 288.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=202 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360696;  // std dev = 0.000, 281.000 (wgt'ed) examples reached here.  /* #neg=281 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4590052279163998;  // std dev = 0.944, 174.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=172 */
%   | else if ( genre(A, E) )
%   | | then return -0.10074256581057302;  // std dev = 3.73e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.038838108827733;  // std dev = 4.694, 113.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=30 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783662;  // std dev = 0.000, 301.000 (wgt'ed) examples reached here.  /* #neg=301 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1659126760327987;  // std dev = 0.270, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( genre(B, E) )
%   | | then return 0.35610226683880203;  // std dev = 0.000, 172.000 (wgt'ed) examples reached here.  /* #pos=172 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.011306073336422555;  // std dev = 4.830, 135.000 (wgt'ed) examples reached here.  /* #neg=105 #pos=30 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926042;  // std dev = 1.69e-07, 315.000 (wgt'ed) examples reached here.  /* #neg=315 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.27304704649486666;  // std dev = 0.753, 174.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=172 */
%   | else if ( movie(E, A) )
%   | | then return 0.0026931642664636004;  // std dev = 0.417, 132.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=30 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.03e-07, 301.000 (wgt'ed) examples reached here.  /* #neg=301 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1082753286592795;  // std dev = 0.217, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( genre(B, E) )
%   | | then return 0.22767763778162914;  // std dev = 0.000, 172.000 (wgt'ed) examples reached here.  /* #pos=172 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.0311677085356226;  // std dev = 4.702, 114.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=30 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109141;  // std dev = 4.47e-08, 295.000 (wgt'ed) examples reached here.  /* #neg=295 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17924534221277091;  // std dev = 0.947, 176.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=172 */
%   | else if ( genre(A, E) )
%   | | then return -0.07167510173413995;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.02556821414837942;  // std dev = 4.702, 114.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=30 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333698;  // std dev = 5.67e-09, 299.000 (wgt'ed) examples reached here.  /* #neg=299 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1413420065646914;  // std dev = 0.311, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( movie(E, B) )
%   | | then return 0.10217559729106883;  // std dev = 4.898, 290.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=202 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420317;  // std dev = 0.000, 343.000 (wgt'ed) examples reached here.  /* #neg=343 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1403494892125139;  // std dev = 0.884, 176.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=172 */
%   | else if ( genre(A, E) )
%   | | then return -0.058731321398398824;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.00939740169874046;  // std dev = 4.737, 119.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=30 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202604;  // std dev = 5.67e-09, 284.000 (wgt'ed) examples reached here.  /* #neg=284 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.971565
   AUC PR    = 0.823063
   CLL	      = -0.129237
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.875


Total learning time: 2.629 seconds
Total inference time: 1.602 seconds
AUC ROC: 0.971565


Results scoring model
   AUC ROC   = 0.982115
   AUC PR    = 0.886504
   CLL	      = -0.124356
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.851485
   F1        = 0.919786


Total scoring time: 2.556 seconds
Parameter learned model CLL: -0.124356


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 13, 0], 'true,false,true': [1.08e-06, 0, 172], 'true,false,false,true': [4.687, 82, 30], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.96e-08, 293, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.451, 3, 172], 'true,false,true': [5.27e-09, 11, 0], 'true,false,false,true': [4.793, 98, 30], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 296, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.108, 12, 0], 'true,false,true': [0.361, 86, 202], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 281, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.944, 2, 172], 'true,false,true': [3.73e-09, 12, 0], 'true,false,false,true': [4.694, 83, 30], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 301, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.27, 8, 0], 'true,false,true': [0.0, 0, 172], 'true,false,false,true': [4.83, 105, 30], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.69e-07, 315, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.753, 2, 172], 'true,false,true': [0.417, 102, 30], 'true,false,false': [0.0, 0, 0], 'false,true': [1.03e-07, 301, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.217, 8, 0], 'true,false,true': [0.0, 0, 172], 'true,false,false,true': [4.702, 84, 30], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.47e-08, 295, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.947, 4, 172], 'true,false,true': [0.0, 7, 0], 'true,false,false,true': [4.702, 84, 30], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.67e-09, 299, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.311, 7, 0], 'true,false,true': [4.898, 88, 202], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 343, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.884, 4, 172], 'true,false,true': [0.0, 7, 0], 'true,false,false,true': [4.737, 89, 30], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.67e-09, 284, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.21755149701278126, 1.2125302658022188e-17], 'true': [-1.2810265668751807e-17, 0.20536599880976486], 'true,false': [6.774942364224211e-15, 0.19610969387755223], 'true,false,false': [0.19610969387755223, nan], 'false': [1.2125302658022188e-17, nan]}, {'': [0.18364363357745203, -8.401687753920104e-17], 'true': [0.012028259279410187, 0.1682142173723302], 'true,false': [2.523234146875356e-18, 0.17944335937499897], 'true,false,false': [0.17944335937499897, nan], 'false': [-8.401687753920104e-17, nan]}, {'': [0.13418633434436691, -1.1378798259503384e-16], 'true': [0.0009696572816113002, 0.13005903724321666], 'true,false': [0.13005903724321666, nan], 'false': [-1.1378798259503384e-16, nan]}, {'': [0.12311551445444435, -5.458903908455919e-17], 'true': [0.005118647854584448, 0.17797397809525312], 'true,false': [1.1564823173178713e-18, 0.19500352416007657], 'true,false,false': [0.19500352416007657, nan], 'false': [-5.458903908455919e-17, nan]}, {'': [0.10993375430885734, 9.022764898540955e-17], 'true': [0.00911106103949779, 0.10926137489719008], 'true,false': [-4.544168658930873e-16, 0.1728395061728391], 'true,false,false': [0.1728395061728391, nan], 'false': [9.022764898540955e-17, nan]}, {'': [0.09461476246530405, 3.540910643322758e-17], 'true': [0.0032578006331675175, 0.17347817346885144], 'true,false': [0.17347817346885144, nan], 'false': [3.540910643322758e-17, nan]}, {'': [0.0861107016711524, 6.774242184153498e-18], 'true': [0.0059086146954466165, 0.08654812921542275], 'true,false': [-6.196593625814827e-17, 0.19390581717451527], 'true,false,false': [0.19390581717451527, nan], 'false': [6.774242184153498e-18, nan]}, {'': [0.08378562215209043, 3.193283615978711e-17], 'true': [0.005096877712574257, 0.18320353388206792], 'true,false': [-9.912705577010326e-19, 0.19390581717451508], 'true,false,false': [0.19390581717451508, nan], 'false': [3.193283615978711e-17, nan]}, {'': [0.08246849391472617, -8.804100953295702e-17], 'true': [0.013798266028708995, 0.082728388635475], 'true,false': [0.082728388635475, nan], 'false': [-8.804100953295702e-17, nan]}, {'': [0.08259112464944449, 3.3619429618930795e-17], 'true': [0.0044432587627855095, 0.17819892974374105], 'true,false': [0.0, 0.18854600663794854], 'true,false,false': [0.18854600663794854, nan], 'false': [3.3619429618930795e-17, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995095;  // std dev = 1.08e-06, 172.000 (wgt'ed) examples reached here.  /* #pos=172 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.8581489350995117;  // std dev = 1.98e-07, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return -0.14185106490048763;  // std dev = 8.94e-08, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
%   else return -0.14185106490048774;  // std dev = 1.52e-07, 317.000 (wgt'ed) examples reached here.  /* #neg=317 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.719473412210955;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else return 0.7122518904097642;  // std dev = 0.078, 117.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=116 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( actor(B) )
%   | | | then return -0.1254446385283914;  // std dev = 0.000, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
%   | | | else return 0.7194734122109546;  // std dev = 0.000, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   else return -0.12544463852839197;  // std dev = 0.000, 287.000 (wgt'ed) examples reached here.  /* #neg=287 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( actor(B) )
%   | | then return -0.11231637819360639;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return -0.22625158726886382;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( actor(A), director(B) )
%   | | then return 0.5563900637232453;  // std dev = 0.013, 202.000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | | else return -0.11443017489744228;  // std dev = 0.161, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
%   else return -0.11231637819360696;  // std dev = 0.000, 273.000 (wgt'ed) examples reached here.  /* #neg=273 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.41726466322048233;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else if ( actor(A) )
%   | | | then return 0.4190216534944664;  // std dev = 0.000, 116.000 (wgt'ed) examples reached here.  /* #pos=116 */
%   | | | else return -0.18910276085097485;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.41726466322048184;  // std dev = 0.000, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return -0.10445018310896236;  // std dev = 0.182, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
%   else return -0.10159632948783662;  // std dev = 0.000, 296.000 (wgt'ed) examples reached here.  /* #neg=296 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926097;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( genre(B, E) )
%   | | then return 0.3213465408558122;  // std dev = 0.007, 172.000 (wgt'ed) examples reached here.  /* #pos=172 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.32054309643574824;  // std dev = 0.000, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return -0.09452607665878943;  // std dev = 0.139, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
%   else return -0.09269127618926044;  // std dev = 1.33e-07, 277.000 (wgt'ed) examples reached here.  /* #neg=277 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2555239342684155;  // std dev = 0.007, 202.000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.08907675202394126;  // std dev = 0.178, 111.000 (wgt'ed) examples reached here.  /* #neg=111 */
%   else return -0.08518475138839678;  // std dev = 1.05e-07, 308.000 (wgt'ed) examples reached here.  /* #neg=308 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( actor(B) )
%   | | then return -0.07849477108024251;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else return -0.1386292931573959;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.2100771784730187;  // std dev = 0.006, 172.000 (wgt'ed) examples reached here.  /* #pos=172 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.20959902074378609;  // std dev = 0.000, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return -0.07891499318490454;  // std dev = 0.086, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
%   else return -0.07877675473109143;  // std dev = 4.21e-08, 288.000 (wgt'ed) examples reached here.  /* #neg=288 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.17679349531819552;  // std dev = 5.37e-08, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else return 0.1724973251009767;  // std dev = 0.039, 118.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=116 */
%   | else if ( genre(A, E) )
%   | | then return -0.07300155062939263;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.17698009382960755;  // std dev = 0.000, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return -0.07333709341364116;  // std dev = 0.081, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
%   else return -0.073246225763337;  // std dev = 9.31e-08, 308.000 (wgt'ed) examples reached here.  /* #neg=308 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.1532619347030351;  // std dev = 0.009, 202.000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else if ( actor(B) )
%   | | then return -0.067774684573763;  // std dev = 0.001, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
%   | | else return -0.14401440695057688;  // std dev = 0.002, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.06842697784420301;  // std dev = 0.000, 302.000 (wgt'ed) examples reached here.  /* #neg=302 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.13374084804498462;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else return 0.1326460731524939;  // std dev = 0.024, 117.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=116 */
%   | else if ( genre(A, E) )
%   | | then return -0.06402905643873895;  // std dev = 2.63e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( actor(B) )
%   | | | then return -0.06357758740173482;  // std dev = 0.000, 111.000 (wgt'ed) examples reached here.  /* #neg=111 */
%   | | | else return 0.11751753058024414;  // std dev = 0.358, 32.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=30 */
%   else return -0.06419184008202596;  // std dev = 1.16e-07, 300.000 (wgt'ed) examples reached here.  /* #neg=300 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063716
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.874 seconds
Total inference time: 1.518 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064816
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.469 seconds
Refined model CLL: -0.064816


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063716
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 11.528 seconds
Total inference time: 1.518 seconds
AUC ROC: 1.0
Total revision time: 11.528
Best scored revision CLL: -0.064816


Dataset: 4_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 00:30:27
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063716, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 11.528, 'Inference time': 1.518, 'parameter_0.6': {'AUC ROC': 0.971565, 'AUC PR': 0.823063, 'CLL': -0.129237, 'Precision': [1.0, 0.5], 'Recall': 0.777778, 'F1': 0.875, 'Learning time': 2.629, 'Inference time': 1.602}}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( genre(B, E) )
%   | | then return 0.858148935099509;  // std dev = 1.08e-06, 227.000 (wgt'ed) examples reached here.  /* #pos=227 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.14002812973038412;  // std dev = 5.492, 149.000 (wgt'ed) examples reached here.  /* #neg=107 #pos=42 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048738;  // std dev = 2.92e-07, 391.000 (wgt'ed) examples reached here.  /* #neg=391 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7120942152612686;  // std dev = 1.190, 229.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=227 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.07618928311836953;  // std dev = 5.665, 178.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=42 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839224;  // std dev = 0.000, 388.000 (wgt'ed) examples reached here.  /* #neg=388 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11726888286188272;  // std dev = 0.111, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else if ( movie(E, A) )
%   | | then return 0.3337073565051741;  // std dev = 0.375, 411.000 (wgt'ed) examples reached here.  /* #neg=142 #pos=269 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360632;  // std dev = 0.000, 378.000 (wgt'ed) examples reached here.  /* #neg=378 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.46516106051767137;  // std dev = 1.171, 230.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=227 */
%   | else if ( genre(A, E) )
%   | | then return -0.10114518310187061;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.0068210804092914855;  // std dev = 5.689, 183.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=42 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783583;  // std dev = 1.19e-08, 416.000 (wgt'ed) examples reached here.  /* #neg=416 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1630703889290184;  // std dev = 0.395, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( genre(B, E) )
%   | | then return 0.3614418513033837;  // std dev = 5.50e-07, 227.000 (wgt'ed) examples reached here.  /* #pos=227 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.026129938239946377;  // std dev = 5.612, 168.000 (wgt'ed) examples reached here.  /* #neg=126 #pos=42 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926071;  // std dev = 1.78e-07, 377.000 (wgt'ed) examples reached here.  /* #neg=377 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2665685222201358;  // std dev = 1.415, 234.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=227 */
%   | else if ( movie(E, A) )
%   | | then return -0.0087634481753671;  // std dev = 0.404, 200.000 (wgt'ed) examples reached here.  /* #neg=158 #pos=42 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.23e-07, 346.000 (wgt'ed) examples reached here.  /* #neg=346 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10246698643673391;  // std dev = 0.316, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else if ( genre(B, E) )
%   | | then return 0.2319876028474111;  // std dev = 0.000, 227.000 (wgt'ed) examples reached here.  /* #pos=227 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.03724895164772881;  // std dev = 5.559, 159.000 (wgt'ed) examples reached here.  /* #neg=117 #pos=42 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109143;  // std dev = 2.26e-07, 408.000 (wgt'ed) examples reached here.  /* #neg=408 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18275810030254827;  // std dev = 1.075, 232.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=227 */
%   | else if ( genre(A, E) )
%   | | then return -0.07175683668861119;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.012111545018602066;  // std dev = 5.629, 171.000 (wgt'ed) examples reached here.  /* #neg=129 #pos=42 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0732462257633377;  // std dev = 0.000, 379.000 (wgt'ed) examples reached here.  /* #neg=379 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10247067892761352;  // std dev = 0.349, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( movie(E, B) )
%   | | then return 0.09663082103047947;  // std dev = 5.865, 401.000 (wgt'ed) examples reached here.  /* #neg=132 #pos=269 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420335;  // std dev = 0.000, 399.000 (wgt'ed) examples reached here.  /* #neg=399 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15132669911369664;  // std dev = 0.462, 228.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=227 */
%   | else if ( genre(A, E) )
%   | | then return -0.06098301935828873;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.008974366612258802;  // std dev = 5.566, 160.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=42 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202554;  // std dev = 1.02e-08, 421.000 (wgt'ed) examples reached here.  /* #neg=421 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.971565
   AUC PR    = 0.823063
   CLL	      = -0.127909
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.875


Total learning time: 2.53 seconds
Total inference time: 1.544 seconds
AUC ROC: 0.971565


Results scoring model
   AUC ROC   = 0.980772
   AUC PR    = 0.879776
   CLL	      = -0.124694
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.843866
   F1        = 0.915323


Total scoring time: 2.931 seconds
Parameter learned model CLL: -0.124694


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 12, 0], 'true,false,true': [1.08e-06, 0, 227], 'true,false,false,true': [5.492, 107, 42], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.92e-07, 391, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.19, 2, 227], 'true,false,true': [5.27e-09, 12, 0], 'true,false,false,true': [5.665, 136, 42], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 388, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.111, 23, 0], 'true,false,true': [0.375, 142, 269], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 378, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.171, 3, 227], 'true,false,true': [0.0, 14, 0], 'true,false,false,true': [5.689, 141, 42], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.19e-08, 416, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.395, 17, 0], 'true,false,true': [5.5e-07, 0, 227], 'true,false,false,true': [5.612, 126, 42], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.78e-07, 377, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [1.415, 7, 227], 'true,false,true': [0.404, 158, 42], 'true,false,false': [0.0, 0, 0], 'false,true': [1.23e-07, 346, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.316, 20, 0], 'true,false,true': [0.0, 0, 227], 'true,false,false,true': [5.559, 117, 42], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.26e-07, 408, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [1.075, 5, 227], 'true,false,true': [0.0, 12, 0], 'true,false,false,true': [5.629, 129, 42], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 379, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.349, 15, 0], 'true,false,true': [5.865, 132, 269], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 399, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.462, 1, 227], 'true,false,true': [0.0, 15, 0], 'true,false,false,true': [5.566, 118, 42], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.02e-08, 421, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.21263550855564178, 2.1806938181895658e-16], 'true': [-1.1564823173178714e-17, 0.20359184019918877], 'true,false': [5.133436505050944e-15, 0.2024233142651244], 'true,false,false': [0.2024233142651244, nan], 'false': [2.1806938181895658e-16, nan]}, {'': [0.18532759046012273, -1.2590158011213115e-16], 'true': [0.006180364155126291, 0.17129973342990157], 'true,false': [2.3129646346357427e-18, 0.18028026764297347], 'true,false,false': [0.18028026764297347, nan], 'false': [-1.2590158011213115e-16, nan]}, {'': [0.14326982092715598, -2.5846461948945442e-17], 'true': [0.0005396006547645759, 0.14047897695873895], 'true,false': [0.14047897695873895, nan], 'false': [-2.5846461948945442e-17, nan]}, {'': [0.13331883932283367, 1.4518301091252047e-16], 'true': [0.005959514240144623, 0.16503681315521512], 'true,false': [0.0, 0.17683418435904236], 'true,false,false': [0.17683418435904236, nan], 'false': [1.4518301091252047e-16, nan]}, {'': [0.10895213059876972, 8.363483792932213e-17], 'true': [0.009178675854339409, 0.10722823931008357], 'true,false': [1.3303112894186899e-15, 0.18749999999999922], 'true,false,false': [0.18749999999999922, nan], 'false': [8.363483792932213e-17, nan]}, {'': [0.09864840678834925, 4.3638824089312514e-17], 'true': [0.008556772566898277, 0.16318234606772933], 'true,false': [0.16318234606772933, nan], 'false': [4.3638824089312514e-17, nan]}, {'': [0.08813005163214419, 1.2517220375675784e-16], 'true': [0.005003442802874188, 0.0892530328307472], 'true,false': [-2.7388761840973026e-16, 0.19437522249911035], 'true,false,false': [0.19437522249911035, nan], 'false': [1.2517220375675784e-16, nan]}, {'': [0.08697345764931647, -6.796088171847924e-17], 'true': [0.0049856961552129835, 0.17356875691419715], 'true,false': [-2.3129646346357427e-18, 0.18528778085564707], 'true,false,false': [0.18528778085564707, nan], 'false': [-6.796088171847924e-17, nan]}, {'': [0.08437130208101647, -1.1352656492407615e-16], 'true': [0.008122078931719979, 0.08579413974424387], 'true,false': [0.08579413974424387, nan], 'false': [-1.1352656492407615e-16, nan]}, {'': [0.08296447409935902, 1.0390210729271061e-16], 'true': [0.0009371722749208324, 0.17738353260553003], 'true,false': [-2.7755575615628915e-18, 0.1935937499999987], 'true,false,false': [0.1935937499999987, nan], 'false': [1.0390210729271061e-16, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( genre(B, E) )
%   | | then return 0.858148935099509;  // std dev = 1.08e-06, 227.000 (wgt'ed) examples reached here.  /* #pos=227 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.8581489350995118;  // std dev = 2.38e-07, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | | | else return -0.14185106490048788;  // std dev = 0.000, 131.000 (wgt'ed) examples reached here.  /* #neg=131 */
%   else return -0.14185106490048738;  // std dev = 2.87e-07, 388.000 (wgt'ed) examples reached here.  /* #neg=388 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109542;  // std dev = 2.38e-07, 79.000 (wgt'ed) examples reached here.  /* #pos=79 */
%   | | else if ( actor(A) )
%   | | | then return 0.7194734122109562;  // std dev = 0.000, 148.000 (wgt'ed) examples reached here.  /* #pos=148 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( actor(B) )
%   | | | then return -0.12544463852839105;  // std dev = 8.02e-08, 119.000 (wgt'ed) examples reached here.  /* #neg=119 */
%   | | | else return 0.719473412210955;  // std dev = 0.000, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   else return -0.12544463852839222;  // std dev = 0.000, 380.000 (wgt'ed) examples reached here.  /* #neg=380 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360635;  // std dev = 1.39e-08, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( director(B), actor(A) )
%   | | then return 0.5553664367462834;  // std dev = 6.19e-07, 269.000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | | else return -0.11411640819921662;  // std dev = 0.162, 128.000 (wgt'ed) examples reached here.  /* #neg=128 */
%   else return -0.11231637819360635;  // std dev = 0.000, 373.000 (wgt'ed) examples reached here.  /* #neg=373 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.41751358415831086;  // std dev = 0.000, 79.000 (wgt'ed) examples reached here.  /* #pos=79 */
%   | | else return 0.40720014216534256;  // std dev = 0.072, 151.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=148 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783633;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.41751358415831047;  // std dev = 0.000, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | | | else return -0.10319504379009199;  // std dev = 0.150, 121.000 (wgt'ed) examples reached here.  /* #neg=121 */
%   else return -0.10159632948783595;  // std dev = 2.11e-07, 395.000 (wgt'ed) examples reached here.  /* #neg=395 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1019650457595033;  // std dev = 0.083, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( genre(B, E) )
%   | | then return 0.32217944972814627;  // std dev = 0.016, 227.000 (wgt'ed) examples reached here.  /* #pos=227 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.32071184716014944;  // std dev = 2.98e-08, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | | | else return -0.09390868186877797;  // std dev = 0.139, 132.000 (wgt'ed) examples reached here.  /* #neg=132 */
%   else return -0.09269127618926085;  // std dev = 1.52e-07, 395.000 (wgt'ed) examples reached here.  /* #neg=395 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2560173483980461;  // std dev = 0.015, 269.000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.08860812712473203;  // std dev = 0.194, 149.000 (wgt'ed) examples reached here.  /* #neg=149 */
%   else return -0.08518475138839678;  // std dev = 1.26e-07, 405.000 (wgt'ed) examples reached here.  /* #neg=405 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08289179450231926;  // std dev = 0.060, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else if ( genre(B, E) )
%   | | then return 0.21049105645270605;  // std dev = 0.012, 227.000 (wgt'ed) examples reached here.  /* #pos=227 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.20961766574416196;  // std dev = 2.98e-08, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | | | else return -0.08009395308365765;  // std dev = 0.149, 137.000 (wgt'ed) examples reached here.  /* #neg=137 */
%   else return -0.07877675473109141;  // std dev = 1.23e-07, 405.000 (wgt'ed) examples reached here.  /* #neg=405 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.17665302339035083;  // std dev = 0.000, 79.000 (wgt'ed) examples reached here.  /* #pos=79 */
%   | | else if ( actor(A) )
%   | | | then return 0.1781580856025638;  // std dev = 0.000, 148.000 (wgt'ed) examples reached here.  /* #pos=148 */
%   | | | else return -0.1144696603248752;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(A, E) )
%   | | then return -0.07211315031715469;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( actor(B) )
%   | | | then return -0.07261361061223628;  // std dev = 0.000, 141.000 (wgt'ed) examples reached here.  /* #neg=141 */
%   | | | else return 0.1769937709880711;  // std dev = 0.000, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   else return -0.07324622576333771;  // std dev = 0.000, 407.000 (wgt'ed) examples reached here.  /* #neg=407 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.15307567998071556;  // std dev = 0.009, 269.000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.07211494064005974;  // std dev = 0.248, 146.000 (wgt'ed) examples reached here.  /* #neg=146 */
%   else return -0.06842697784420332;  // std dev = 0.000, 387.000 (wgt'ed) examples reached here.  /* #neg=387 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( director(A) )
%   | | then return -0.09687307311631997;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.1343340388558302;  // std dev = 0.007, 227.000 (wgt'ed) examples reached here.  /* #pos=227 */
%   | else if ( genre(A, E) )
%   | | then return -0.06303820896012578;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.13389865963310163;  // std dev = 0.000, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | | | else return -0.06598796492916832;  // std dev = 0.179, 124.000 (wgt'ed) examples reached here.  /* #neg=124 */
%   else return -0.06419184008202557;  // std dev = 2.01e-07, 407.000 (wgt'ed) examples reached here.  /* #neg=407 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063573
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 4.12 seconds
Total inference time: 1.612 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064514
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.722 seconds
Refined model CLL: -0.064514


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063573
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 12.302999999999999 seconds
Total inference time: 1.612 seconds
AUC ROC: 1.0
Total revision time: 12.302999999999999
Best scored revision CLL: -0.064514


Dataset: 4_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 00:30:43
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063573, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 12.302999999999999, 'Inference time': 1.612, 'parameter_0.8': {'AUC ROC': 0.971565, 'AUC PR': 0.823063, 'CLL': -0.127909, 'Precision': [1.0, 0.5], 'Recall': 0.777778, 'F1': 0.875, 'Learning time': 2.53, 'Inference time': 1.544}}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordauthor(M, K).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
5;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
5;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, A).;false;false
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
7;false,true;haswordauthor(M, K).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
8;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
8;false,true;haswordauthor(N, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048774;  // std dev = 1.49e-08, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995085;  // std dev = 1.08e-06, 288.000 (wgt'ed) examples reached here.  /* #pos=288 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.0914822684328455;  // std dev = 6.129, 210.000 (wgt'ed) examples reached here.  /* #neg=161 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 507.000 (wgt'ed) examples reached here.  /* #neg=507 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.713646391171376;  // std dev = 1.191, 290.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=288 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.06637487006092613;  // std dev = 6.183, 223.000 (wgt'ed) examples reached here.  /* #neg=174 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839227;  // std dev = 0.000, 481.000 (wgt'ed) examples reached here.  /* #neg=481 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13635415210648916;  // std dev = 0.203, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( movie(E, A) )
%   | | then return 0.35828529785644003;  // std dev = 0.362, 492.000 (wgt'ed) examples reached here.  /* #neg=155 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.1123163781936058;  // std dev = 0.000, 502.000 (wgt'ed) examples reached here.  /* #neg=502 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.46060782878905937;  // std dev = 1.156, 291.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=288 */
%   | else if ( genre(A, E) )
%   | | then return -0.0994232093625602;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.03438775489165875;  // std dev = 6.057, 195.000 (wgt'ed) examples reached here.  /* #neg=146 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783544;  // std dev = 1.53e-08, 489.000 (wgt'ed) examples reached here.  /* #neg=489 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13472887576207546;  // std dev = 0.348, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else if ( genre(B, E) )
%   | | then return 0.35647690683394717;  // std dev = 0.000, 288.000 (wgt'ed) examples reached here.  /* #pos=288 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.001978711241227109;  // std dev = 6.163, 218.000 (wgt'ed) examples reached here.  /* #neg=169 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926144;  // std dev = 0.000, 496.000 (wgt'ed) examples reached here.  /* #neg=496 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2775837601465911;  // std dev = 0.540, 289.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=288 */
%   | else if ( movie(E, A) )
%   | | then return 0.014736777642961222;  // std dev = 0.412, 218.000 (wgt'ed) examples reached here.  /* #neg=169 #pos=49 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 1.41e-07, 485.000 (wgt'ed) examples reached here.  /* #neg=485 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1604232370305136;  // std dev = 0.547, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | else if ( genre(B, E) )
%   | | then return 0.2271017737093009;  // std dev = 3.89e-07, 288.000 (wgt'ed) examples reached here.  /* #pos=288 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.014496359497799082;  // std dev = 6.102, 204.000 (wgt'ed) examples reached here.  /* #neg=155 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109216;  // std dev = 0.000, 518.000 (wgt'ed) examples reached here.  /* #neg=518 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18003595078256102;  // std dev = 1.150, 294.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=288 */
%   | else if ( genre(A, E) )
%   | | then return -0.07020866849206363;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.017987993302981738;  // std dev = 6.077, 199.000 (wgt'ed) examples reached here.  /* #neg=150 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333689;  // std dev = 7.09e-09, 504.000 (wgt'ed) examples reached here.  /* #neg=504 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10001728696841089;  // std dev = 0.338, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( movie(E, B) )
%   | | then return 0.09804604721603516;  // std dev = 6.349, 494.000 (wgt'ed) examples reached here.  /* #neg=157 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06842697784420355;  // std dev = 0.000, 501.000 (wgt'ed) examples reached here.  /* #neg=501 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14593827745241467;  // std dev = 0.779, 291.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=288 */
%   | else if ( genre(A, E) )
%   | | then return -0.05987721977256034;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.037202218645907385;  // std dev = 6.213, 231.000 (wgt'ed) examples reached here.  /* #neg=182 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202536;  // std dev = 1.08e-08, 508.000 (wgt'ed) examples reached here.  /* #neg=508 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.971565
   AUC PR    = 0.823063
   CLL	      = -0.123847
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.875


Total learning time: 3.159 seconds
Total inference time: 1.611 seconds
AUC ROC: 0.971565


Results scoring model
   AUC ROC   = 0.982257
   AUC PR    = 0.888508
   CLL	      = -0.120056
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.854599
   F1        = 0.9216


Total scoring time: 3.244 seconds
Parameter learned model CLL: -0.120056


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [1.49e-08, 23, 0], 'true,false,true': [1.08e-06, 0, 288], 'true,false,false,true': [6.129, 161, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 507, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.191, 2, 288], 'true,false,true': [0.0, 20, 0], 'true,false,false,true': [6.183, 174, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 481, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.203, 19, 0], 'true,false,true': [0.362, 155, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 502, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.156, 3, 288], 'true,false,true': [0.0, 11, 0], 'true,false,false,true': [6.057, 146, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.53e-08, 489, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.348, 18, 0], 'true,false,true': [0.0, 0, 288], 'true,false,false,true': [6.163, 169, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 496, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.54, 1, 288], 'true,false,true': [0.412, 169, 49], 'true,false,false': [0.0, 0, 0], 'false,true': [1.41e-07, 485, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.547, 24, 0], 'true,false,true': [3.89e-07, 0, 288], 'true,false,false,true': [6.102, 155, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 518, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [1.15, 6, 288], 'true,false,true': [0.0, 15, 0], 'true,false,false,true': [6.077, 150, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.09e-09, 504, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.338, 15, 0], 'true,false,true': [6.349, 157, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 501, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.779, 3, 288], 'true,false,true': [0.0, 13, 0], 'true,false,false,true': [6.213, 182, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.08e-08, 508, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.22844006616539395, -5.605859848205919e-17], 'true': [9.654113257610057e-18, 0.21877469718230622], 'true,false': [4.046146134189459e-15, 0.17888888888888987], 'true,false,false': [0.17888888888888987, nan], 'false': [-5.605859848205919e-17, nan]}, {'': [0.18471656582431212, -1.2187063555136854e-16], 'true': [0.004889401084180192, 0.16011732875433174], 'true,false': [0.0, 0.17144925496189328], 'true,false,false': [0.17144925496189328, nan], 'false': [-1.2187063555136854e-16, nan]}, {'': [0.1352664255329324, -7.077118882072711e-18], 'true': [0.0021668046550757584, 0.13130920002828858], 'true,false': [0.13130920002828858, nan], 'false': [-7.077118882072711e-18, nan]}, {'': [0.12246038982516289, 2.343047364853091e-16], 'true': [0.004594163574226826, 0.17899816198323706], 'true,false': [0.0, 0.18813938198553487], 'true,false,false': [0.18813938198553487, nan], 'false': [2.343047364853091e-16, nan]}, {'': [0.10628183933022906, -2.865091676452017e-17], 'true': [0.0067329808554946685, 0.10588759921388696], 'true,false': [-7.401486830834377e-17, 0.17424880060601064], 'true,false,false': [0.17424880060601064, nan], 'false': [-2.865091676452017e-17, nan]}, {'': [0.090630230231292, 4.1204153491242925e-17], 'true': [0.0010087106289107934, 0.17005858155421863], 'true,false': [0.17005858155421863, nan], 'false': [4.1204153491242925e-17, nan]}, {'': [0.08716761058077818, -5.143890461583737e-17], 'true': [0.01247964568645953, 0.08664239930238671], 'true,false': [5.242719838507684e-16, 0.18250192233756177], 'true,false,false': [0.18250192233756177, nan], 'false': [-5.143890461583737e-17, nan]}, {'': [0.08242300253750977, 5.0224374923518987e-17], 'true': [0.00449857421095547, 0.1730989469427601], 'true,false': [-1.8503717077085942e-18, 0.18560137370268506], 'true,false,false': [0.18560137370268506, nan], 'false': [5.0224374923518987e-17, nan]}, {'': [0.08054133989875144, -1.1966475714522646e-16], 'true': [0.00762747956672698, 0.08159926012263403], 'true,false': [0.08159926012263403, nan], 'false': [-1.1966475714522646e-16, nan]}, {'': [0.08173611036622663, 1.1626745061035103e-16], 'true': [0.0020828069433041496, 0.1582474939091324], 'true,false': [-5.337610695313253e-19, 0.16712580348944006], 'true,false,false': [0.16712580348944006, nan], 'false': [1.1626745061035103e-16, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995085;  // std dev = 1.08e-06, 288.000 (wgt'ed) examples reached here.  /* #pos=288 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.8581489350995122;  // std dev = 1.69e-07, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.1418510649004881;  // std dev = 0.000, 160.000 (wgt'ed) examples reached here.  /* #neg=160 */
%   else return -0.14185106490048754;  // std dev = 1.40e-07, 484.000 (wgt'ed) examples reached here.  /* #neg=484 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7107629168425108;  // std dev = 0.085, 291.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=288 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.7194734122109547;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.12544463852839155;  // std dev = 0.000, 186.000 (wgt'ed) examples reached here.  /* #neg=186 */
%   else return -0.12544463852839233;  // std dev = 0.000, 480.000 (wgt'ed) examples reached here.  /* #neg=480 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( actor(B) )
%   | | then return -0.11231637819360635;  // std dev = 1.49e-08, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else return -0.2259910311182163;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( director(B), actor(A) )
%   | | then return 0.5572037160056998;  // std dev = 0.014, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | | else return -0.11231637819360618;  // std dev = 1.00e-07, 147.000 (wgt'ed) examples reached here.  /* #neg=147 */
%   else return -0.11231637819360585;  // std dev = 0.000, 491.000 (wgt'ed) examples reached here.  /* #neg=491 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.41918606438612727;  // std dev = 2.80e-07, 105.000 (wgt'ed) examples reached here.  /* #pos=105 */
%   | | else return 0.40937799135263664;  // std dev = 0.077, 186.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=183 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783633;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.4170668330387648;  // std dev = 5.96e-08, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.1015963294878365;  // std dev = 0.000, 175.000 (wgt'ed) examples reached here.  /* #neg=175 */
%   else return -0.10159632948783531;  // std dev = 3.70e-07, 519.000 (wgt'ed) examples reached here.  /* #neg=519 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( female(B) )
%   | | then return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.11124410996008627;  // std dev = 0.052, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( genre(B, E) )
%   | | then return 0.3232085321595656;  // std dev = 0.018, 288.000 (wgt'ed) examples reached here.  /* #pos=288 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.32040898815100105;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.09269127618926075;  // std dev = 6.99e-08, 143.000 (wgt'ed) examples reached here.  /* #neg=143 */
%   else return -0.09269127618926154;  // std dev = 0.000, 517.000 (wgt'ed) examples reached here.  /* #neg=517 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.255686512921699;  // std dev = 1.46e-07, 105.000 (wgt'ed) examples reached here.  /* #pos=105 */
%   | | else return 0.24693902904354675;  // std dev = 0.072, 187.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=183 */
%   | else if ( actor(A), director(B) )
%   | | then return 0.2549655759145823;  // std dev = 8.94e-08, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | else return -0.08510884089596865;  // std dev = 0.004, 189.000 (wgt'ed) examples reached here.  /* #neg=189 */
%   else return -0.08518475138839678;  // std dev = 1.37e-07, 425.000 (wgt'ed) examples reached here.  /* #neg=425 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then if ( actor(B) )
%   | | then return -0.0776243932535213;  // std dev = 0.002, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else return -0.2865894681112399;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( genre(B, E) )
%   | | then return 0.21208832138739997;  // std dev = 0.025, 288.000 (wgt'ed) examples reached here.  /* #pos=288 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.20961171851784266;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.07878226380589241;  // std dev = 0.000, 145.000 (wgt'ed) examples reached here.  /* #neg=145 */
%   else return -0.07877675473109207;  // std dev = 1.26e-07, 500.000 (wgt'ed) examples reached here.  /* #neg=500 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.17707597574972878;  // std dev = 7.30e-08, 105.000 (wgt'ed) examples reached here.  /* #pos=105 */
%   | | else if ( actor(A) )
%   | | | then return 0.17979611400353065;  // std dev = 2.89e-07, 183.000 (wgt'ed) examples reached here.  /* #pos=183 */
%   | | | else return -0.23172512130123477;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(A, E) )
%   | | then return -0.07227636369520658;  // std dev = 0.002, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.1769894083886925;  // std dev = 1.49e-08, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.0732510048407669;  // std dev = 2.36e-08, 136.000 (wgt'ed) examples reached here.  /* #neg=136 */
%   else return -0.07324622576333698;  // std dev = 1.38e-07, 488.000 (wgt'ed) examples reached here.  /* #neg=488 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.15383760830311444;  // std dev = 0.019, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07165193319709687;  // std dev = 0.246, 153.000 (wgt'ed) examples reached here.  /* #neg=153 */
%   else return -0.06842697784420354;  // std dev = 0.000, 492.000 (wgt'ed) examples reached here.  /* #neg=492 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.13386620273508545;  // std dev = 6.14e-08, 105.000 (wgt'ed) examples reached here.  /* #pos=105 */
%   | | else return 0.13227676968824442;  // std dev = 0.033, 185.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=183 */
%   | else if ( genre(A, E) )
%   | | then return -0.06345519396384659;  // std dev = 0.002, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.13380735798053153;  // std dev = 3.94e-08, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.06400231611210393;  // std dev = 0.000, 154.000 (wgt'ed) examples reached here.  /* #neg=154 */
%   else return -0.06419184008202532;  // std dev = 2.47e-07, 542.000 (wgt'ed) examples reached here.  /* #neg=542 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063835
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 5.138 seconds
Total inference time: 1.653 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064949
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 3.484 seconds
Refined model CLL: -0.064949


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063835
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 15.025 seconds
Total inference time: 1.653 seconds
AUC ROC: 1.0
Total revision time: 15.025
Best scored revision CLL: -0.064949


Dataset: 4_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 00:31:02
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063835, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 15.025, 'Inference time': 1.653, 'parameter_1.0': {'AUC ROC': 0.971565, 'AUC PR': 0.823063, 'CLL': -0.123847, 'Precision': [1.0, 0.5], 'Recall': 0.777778, 'F1': 0.875, 'Learning time': 3.159, 'Inference time': 1.611}}


