Starting experiment #1 for 7_yeast_twitter

Start learning from source dataset

Source train facts examples: 15015
Source train pos examples: 369
Source train neg examples: 51477

WILL Produced-Tree #1
% FOR proteinclass(A, B):
%   if ( interaction(C, A), recursion_proteinclass(C, B) )
%   then return 0.8081489350995125;  // std dev = 0.218, 60.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=57 */
%   else if ( interaction(D, A), interaction(D, D) )
%   | then if ( interaction(A, E), interaction(E, D) )
%   | | then if ( interaction(A, A) )
%   | | | then return -0.14185106490048768;  // std dev = 4.71e-08, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | | | else return 0.1914822684328457;  // std dev = 2.944, 39.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=13 */
%   | | else if ( enzyme(A, F) )
%   | | | then return 0.1914822684328457;  // std dev = 3.266, 48.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=16 */
%   | | | else return 0.09990717685775369;  // std dev = 4.084, 91.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=22 */
%   | else if ( interaction(A, G), recursion_proteinclass(G, B) )
%   | | then if ( complex(A, H) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.5854216623722396;  // std dev = 1.477, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | else if ( interaction(I, A), interaction(J, I) )
%   | | | then return 0.13706049972535814;  // std dev = 10.875, 588.000 (wgt'ed) examples reached here.  /* #neg=424 #pos=164 */
%   | | | else return 0.1814247971684767;  // std dev = 7.124, 232.000 (wgt'ed) examples reached here.  /* #neg=157 #pos=75 */
WILL Produced-Tree #2
% FOR proteinclass(A, B):
%   if ( interaction(A, C), recursion_proteinclass(C, B) )
%   then if ( interaction(D, A), complex(A, E) )
%   | then return 0.6197224744387048;  // std dev = 0.298, 33.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=29 */
%   | else return 0.7395725754816243;  // std dev = 0.107, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   else if ( interaction(F, A), interaction(A, F) )
%   | then if ( enzyme(A, G), enzyme(F, G) )
%   | | then return -0.10326544722466688;  // std dev = 0.205, 22.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=1 */
%   | | else if ( interaction(A, A) )
%   | | | then return -0.1254446385283914;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | | else return 0.09901346170598352;  // std dev = 5.289, 145.000 (wgt'ed) examples reached here.  /* #neg=107 #pos=38 */
%   | else if ( interaction(A, H), enzyme(H, I) )
%   | | then if ( phenotype(A, J), phenotype(H, K) )
%   | | | then return 0.19858781400597722;  // std dev = 3.173, 44.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=16 */
%   | | | else return 0.04699229719980548;  // std dev = 3.754, 85.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=18 */
%   | | else if ( interaction(L, A), location(A, M) )
%   | | | then return 0.13959670396204546;  // std dev = 11.811, 673.000 (wgt'ed) examples reached here.  /* #neg=469 #pos=204 */
%   | | | else return 0.23631830096175363;  // std dev = 4.559, 87.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=35 */
WILL Produced-Tree #3
% FOR proteinclass(A, B):
%   if ( complex(A, C), interaction(D, A) )
%   then if ( interaction(E, D), recursion_proteinclass(E, B) )
%   | then return 0.66923017183937;  // std dev = 0.200, 52.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=50 */
%   | else if ( interaction(A, D) )
%   | | then return -0.1513947491053433;  // std dev = 0.281, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
%   | | else if ( interaction(D, D), enzyme(A, F) )
%   | | | then return 0.39549294195400864;  // std dev = 1.068, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.0815012414593494;  // std dev = 7.216, 279.000 (wgt'ed) examples reached here.  /* #neg=204 #pos=75 */
%   else if ( interaction(A, G), recursion_proteinclass(G, B) )
%   | then return 0.5409768338098302;  // std dev = 0.187, 29.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | else if ( interaction(A, H), interaction(H, H) )
%   | | then if ( interaction(H, A) )
%   | | | then return -0.040606704675959365;  // std dev = 1.597, 29.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=3 */
%   | | | else return 0.1380002382028736;  // std dev = 4.087, 77.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=25 */
%   | | else if ( phenotype(A, I), enzyme(A, J) )
%   | | | then return 0.20486265884547533;  // std dev = 4.445, 84.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=33 */
%   | | | else return 0.14829787481005946;  // std dev = 10.036, 458.000 (wgt'ed) examples reached here.  /* #neg=306 #pos=152 */
WILL Produced-Tree #4
% FOR proteinclass(A, B):
%   if ( interaction(C, A), recursion_proteinclass(C, B) )
%   then if ( phenotype(C, D), enzyme(C, E) )
%   | then return 0.21007138489948338;  // std dev = 0.448, 12.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | else return 0.5158996169560561;  // std dev = 0.107, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   else if ( interaction(A, F), interaction(F, A) )
%   | then if ( interaction(A, A) )
%   | | then return -0.10338840101052835;  // std dev = 0.034, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | else if ( enzyme(F, G), enzyme(A, G) )
%   | | | then return -0.06480849094592206;  // std dev = 0.960, 12.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=1 */
%   | | | else return 0.09143507078771336;  // std dev = 4.886, 138.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=41 */
%   | else if ( interaction(H, A), enzyme(H, I) )
%   | | then if ( enzyme(A, I) )
%   | | | then return -0.10200033991525437;  // std dev = 1.331, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | | | else return 0.09802966696012128;  // std dev = 5.734, 160.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=49 */
%   | | else if ( interaction(A, J), recursion_proteinclass(J, B) )
%   | | | then return 0.41875172975434316;  // std dev = 0.990, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | | else return 0.10032817070801157;  // std dev = 11.874, 665.000 (wgt'ed) examples reached here.  /* #neg=462 #pos=203 */
WILL Produced-Tree #5
% FOR proteinclass(A, B):
%   if ( complex(A, C), interaction(A, D) )
%   then if ( interaction(D, E), recursion_proteinclass(E, B) )
%   | then return 0.379318559245125;  // std dev = 0.330, 55.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=47 */
%   | else if ( interaction(D, A) )
%   | | then return -0.1467243854732314;  // std dev = 0.057, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
%   | | else if ( recursion_proteinclass(D, B) )
%   | | | then return 0.33334268123257454;  // std dev = 0.120, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.04418572688233782;  // std dev = 5.284, 149.000 (wgt'ed) examples reached here.  /* #neg=109 #pos=40 */
%   else if ( interaction(F, A), recursion_proteinclass(F, B) )
%   | then return 0.3758360933721668;  // std dev = 0.257, 35.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=33 */
%   | else if ( interaction(G, A), enzyme(G, H) )
%   | | then if ( interaction(I, G), recursion_proteinclass(I, B) )
%   | | | then return 0.7861888956068758;  // std dev = 0.130, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.0209478148274676;  // std dev = 5.759, 195.000 (wgt'ed) examples reached here.  /* #neg=150 #pos=45 */
%   | | else if ( phenotype(A, J), enzyme(A, K) )
%   | | | then return 0.19688397643825362;  // std dev = 4.637, 87.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=37 */
%   | | | else return 0.1093159525027296;  // std dev = 9.927, 458.000 (wgt'ed) examples reached here.  /* #neg=306 #pos=152 */
WILL Produced-Tree #6
% FOR proteinclass(A, B):
%   if ( interaction(C, A), recursion_proteinclass(C, B) )
%   then if ( interaction(A, D), interaction(D, A) )
%   | then if ( interaction(C, D), interaction(A, C) )
%   | | then return 0.24492203649639818;  // std dev = 0.121, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return -0.23170339964999676;  // std dev = 1.230, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else if ( interaction(E, C), interaction(E, E) )
%   | | then return 0.16475910897148857;  // std dev = 0.819, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( enzyme(A, F), interaction(G, C) )
%   | | | then return 0.19613434336150576;  // std dev = 0.872, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.4280337701511656;  // std dev = 0.427, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( interaction(A, H), recursion_proteinclass(H, B) )
%   | then return 0.3071567773031047;  // std dev = 0.158, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | else if ( interaction(A, A) )
%   | | then return -0.09161440752046238;  // std dev = 0.092, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | else if ( interaction(A, I), enzyme(I, J) )
%   | | | then return 0.010347127263779283;  // std dev = 5.713, 206.000 (wgt'ed) examples reached here.  /* #neg=158 #pos=48 */
%   | | | else return 0.06364876319328953;  // std dev = 12.806, 799.000 (wgt'ed) examples reached here.  /* #neg=558 #pos=241 */
WILL Produced-Tree #7
% FOR proteinclass(A, B):
%   if ( interaction(A, C), recursion_proteinclass(C, B) )
%   then if ( enzyme(C, D), phenotype(C, E) )
%   | then if ( enzyme(A, D) )
%   | | then return 0.23370774878009715;  // std dev = 0.058, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.35183249000798933;  // std dev = 0.791, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( interaction(C, F), interaction(F, A) )
%   | | then return 0.15022804126464293;  // std dev = 0.200, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | else return 0.2725728653073887;  // std dev = 0.064, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( interaction(A, A) )
%   | then return -0.08253097853533145;  // std dev = 0.112, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | else if ( interaction(G, A), enzyme(G, H) )
%   | | then if ( interaction(I, G), phenotype(G, J) )
%   | | | then return 0.08462699481893692;  // std dev = 5.012, 138.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=44 */
%   | | | else return -0.008746095915548893;  // std dev = 4.402, 127.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=31 */
%   | | else if ( interaction(A, K), enzyme(K, L) )
%   | | | then return 0.10714714892813161;  // std dev = 4.236, 84.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=29 */
%   | | | else return 0.062446919519616416;  // std dev = 11.560, 640.000 (wgt'ed) examples reached here.  /* #neg=432 #pos=208 */
WILL Produced-Tree #8
% FOR proteinclass(A, B):
%   if ( interaction(A, C), location(A, D) )
%   then return 0.020593704813556032;  // std dev = 0.390, 591.000 (wgt'ed) examples reached here.  /* #neg=403 #pos=188 */
%   else if ( interaction(E, A), complex(E, F) )
%   | then if ( interaction(E, E), enzyme(A, G) )
%   | | then if ( interaction(E, H), recursion_proteinclass(H, B) )
%   | | | then return 0.7187397007389842;  // std dev = 0.081, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.28978163796358425;  // std dev = 0.180, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | else if ( recursion_proteinclass(E, B) )
%   | | | then return 0.3296079369391689;  // std dev = 0.222, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.11680719654986704;  // std dev = 6.994, 216.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=80 */
%   | else if ( complex(A, I), location(A, J) )
%   | | then if ( complex(K, I), recursion_proteinclass(K, B) )
%   | | | then return 0.7008157966887124;  // std dev = 0.579, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return -0.26396172732379386;  // std dev = 0.192, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | else if ( interaction(L, A), recursion_proteinclass(L, B) )
%   | | | then return 0.3104472279858565;  // std dev = 0.151, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.02439503318602321;  // std dev = 6.351, 198.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=57 */
WILL Produced-Tree #9
% FOR proteinclass(A, B):
%   if ( interaction(C, A) )
%   then if ( interaction(D, C), recursion_proteinclass(D, B) )
%   | then if ( interaction(D, A) )
%   | | then return 0.11824839313249949;  // std dev = 0.253, 39.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=36 */
%   | | else return 0.4532485940884308;  // std dev = 0.339, 61.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=54 */
%   | else if ( interaction(A, C) )
%   | | then return -0.15386026578672043;  // std dev = 0.073, 138.000 (wgt'ed) examples reached here.  /* #neg=138 */
%   | | else if ( enzyme(C, E), phenotype(A, F) )
%   | | | then return 0.1293156903328525;  // std dev = 4.044, 76.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=31 */
%   | | | else return 0.020139600455424376;  // std dev = 11.101, 661.000 (wgt'ed) examples reached here.  /* #neg=460 #pos=201 */
%   else if ( location(A, G) )
%   | then if ( location(H, G), recursion_proteinclass(H, B) )
%   | | then if ( interaction(H, I), interaction(A, I) )
%   | | | then return 0.6334620574360934;  // std dev = 1.284, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | | else return -0.2785123410269369;  // std dev = 0.108, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | else return -0.2843434931977631;  // std dev = 0.161, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | else return 0.4555408084347725;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #10
% FOR proteinclass(A, B):
%   if ( interaction(C, A), recursion_proteinclass(C, B) )
%   then return 0.13721880270299558;  // std dev = 0.272, 61.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=57 */
%   else if ( interaction(D, A), enzyme(D, E) )
%   | then if ( location(A, F), location(D, F) )
%   | | then if ( interaction(G, D), recursion_proteinclass(G, B) )
%   | | | then return 0.5100957912081291;  // std dev = 0.129, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.05547099401416795;  // std dev = 4.731, 172.000 (wgt'ed) examples reached here.  /* #neg=139 #pos=33 */
%   | | else if ( interaction(H, D), recursion_proteinclass(H, B) )
%   | | | then return 0.4618062139377979;  // std dev = 0.140, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.030532448139657713;  // std dev = 3.903, 83.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=25 */
%   | else if ( phenotype(A, I), interaction(A, J) )
%   | | then if ( interaction(J, K), recursion_proteinclass(K, B) )
%   | | | then return 0.3162752944373562;  // std dev = 1.485, 23.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=20 */
%   | | | else return -0.033520666204340355;  // std dev = 5.193, 209.000 (wgt'ed) examples reached here.  /* #neg=162 #pos=47 */
%   | | else if ( complex(A, L), location(A, M) )
%   | | | then return 0.021870123193866945;  // std dev = 5.205, 177.000 (wgt'ed) examples reached here.  /* #neg=122 #pos=55 */
%   | | | else return 0.07128601097283992;  // std dev = 8.487, 337.000 (wgt'ed) examples reached here.  /* #neg=215 #pos=122 */


Starting fold 1

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 126

Target test facts examples: 1562
Target test pos	 examples: 156
Target test neg examples: 156

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
0;false;interaction(D, A), interaction(D, D).;true;true
0;false,true;interaction(A, E), interaction(E, D).;true;true
0;false,true,true;interaction(A, A).;false;false
0;false,true,false;enzyme(A, F).;false;false
0;false,false;interaction(A, G), recursion_proteinclass(G, B).;true;true
0;false,false,true;complex(A, H).;false;false
0;false,false,false;interaction(I, A), interaction(J, I).;false;false
1;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
1;true;interaction(D, A), complex(A, E).;false;false
1;false;interaction(F, A), interaction(A, F).;true;true
1;false,true;enzyme(A, G), enzyme(F, G).;false;true
1;false,true,false;interaction(A, A).;false;false
1;false,false;interaction(A, H), enzyme(H, I).;true;true
1;false,false,true;phenotype(A, J), phenotype(H, K).;false;false
1;false,false,false;interaction(L, A), location(A, M).;false;false
2;;proteinclass(A, B) :- complex(A, C), interaction(D, A).;true;true
2;true;interaction(E, D), recursion_proteinclass(E, B).;false;true
2;true,false;interaction(A, D).;false;true
2;true,false,false;interaction(D, D), enzyme(A, F).;false;false
2;false;interaction(A, G), recursion_proteinclass(G, B).;false;true
2;false,false;interaction(A, H), interaction(H, H).;true;true
2;false,false,true;interaction(H, A).;false;false
2;false,false,false;phenotype(A, I), enzyme(A, J).;false;false
3;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
3;true;phenotype(C, D), enzyme(C, E).;false;false
3;false;interaction(A, F), interaction(F, A).;true;true
3;false,true;interaction(A, A).;false;true
3;false,true,false;enzyme(F, G), enzyme(A, G).;false;false
3;false,false;interaction(H, A), enzyme(H, I).;true;true
3;false,false,true;enzyme(A, I).;false;false
3;false,false,false;interaction(A, J), recursion_proteinclass(J, B).;false;false
4;;proteinclass(A, B) :- complex(A, C), interaction(A, D).;true;true
4;true;interaction(D, E), recursion_proteinclass(E, B).;false;true
4;true,false;interaction(D, A).;false;true
4;true,false,false;recursion_proteinclass(D, B).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;false;true
4;false,false;interaction(G, A), enzyme(G, H).;true;true
4;false,false,true;interaction(I, G), recursion_proteinclass(I, B).;false;false
4;false,false,false;phenotype(A, J), enzyme(A, K).;false;false
5;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
5;true;interaction(A, D), interaction(D, A).;true;true
5;true,true;interaction(C, D), interaction(A, C).;false;false
5;true,false;interaction(E, C), interaction(E, E).;false;true
5;true,false,false;enzyme(A, F), interaction(G, C).;false;false
5;false;interaction(A, H), recursion_proteinclass(H, B).;false;true
5;false,false;interaction(A, A).;false;true
5;false,false,false;interaction(A, I), enzyme(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
6;true;enzyme(C, D), phenotype(C, E).;true;true
6;true,true;enzyme(A, D).;false;false
6;true,false;interaction(C, F), interaction(F, A).;false;false
6;false;interaction(A, A).;false;true
6;false,false;interaction(G, A), enzyme(G, H).;true;true
6;false,false,true;interaction(I, G), phenotype(G, J).;false;false
6;false,false,false;interaction(A, K), enzyme(K, L).;false;false
7;;proteinclass(A, B) :- interaction(A, C), location(A, D).;false;true
7;false;interaction(E, A), complex(E, F).;true;true
7;false,true;interaction(E, E), enzyme(A, G).;true;true
7;false,true,true;interaction(E, H), recursion_proteinclass(H, B).;false;false
7;false,true,false;recursion_proteinclass(E, B).;false;false
7;false,false;complex(A, I), location(A, J).;true;true
7;false,false,true;complex(K, I), recursion_proteinclass(K, B).;false;false
7;false,false,false;interaction(L, A), recursion_proteinclass(L, B).;false;false
8;;proteinclass(A, B) :- interaction(C, A).;true;true
8;true;interaction(D, C), recursion_proteinclass(D, B).;true;true
8;true,true;interaction(D, A).;false;false
8;true,false;interaction(A, C).;false;true
8;true,false,false;enzyme(C, E), phenotype(A, F).;false;false
8;false;location(A, G).;true;false
8;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
8;false,true,true;interaction(H, I), interaction(A, I).;false;false
9;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
9;false;interaction(D, A), enzyme(D, E).;true;true
9;false,true;location(A, F), location(D, F).;true;true
9;false,true,true;interaction(G, D), recursion_proteinclass(G, B).;false;false
9;false,true,false;interaction(H, D), recursion_proteinclass(H, B).;false;false
9;false,false;phenotype(A, I), interaction(A, J).;true;true
9;false,false,true;interaction(J, K), recursion_proteinclass(K, B).;false;false
9;false,false,false;complex(A, L), location(A, M).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.324815601766179;  // std dev = 2.733, 30.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=14 */
%   else if ( follows(A, D), follows(D, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.35814893509951223;  // std dev = 1.225, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return 0.42957750652808374;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=8 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), tweets(A, E) )
%   | then return 0.33716763662116006;  // std dev = 2.289, 21.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=11 */
%   | else return 0.31129262308947764;  // std dev = 1.414, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.2684872598955838;  // std dev = 1.925, 15.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=7 */
%   | else if ( follows(G, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, H) )
%   | | | then return 0.3056462577812273;  // std dev = 1.218, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), follows(A, D) )
%   then if ( follows(D, E), recursion_accounttype(E, B) )
%   | then return 0.25583463967581854;  // std dev = 2.910, 34.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=17 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.25899054706391533;  // std dev = 1.414, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | else if ( follows(G, A), follows(G, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.2560727424756271;  // std dev = 0.498, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.17707716120919467;  // std dev = 0.498, 30.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=14 */
%   else if ( follows(D, A), follows(A, D) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.2382834406500745;  // std dev = 0.499, 13.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
%   | else if ( follows(A, E) )
%   | | then return 0.3585336652452959;  // std dev = 0.471, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.20507183951675345;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), follows(D, A) )
%   then if ( follows(E, D), recursion_accounttype(E, B) )
%   | then return 0.17840983914550348;  // std dev = 2.864, 33.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=17 */
%   | else if ( follows(A, D) )
%   | | then return -0.33068136572589724;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return 0.12162297683326449;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.2957195180568735;  // std dev = 1.156, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return -0.35261164683431234;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(D, C), follows(C, A) )
%   | | then return 0.18732782128599962;  // std dev = 2.103, 18.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=10 */
%   | | else return -0.013852345779888439;  // std dev = 1.400, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | else if ( follows(C, E), follows(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(C, F) )
%   | | | then return 0.14908129019098906;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | | else return -0.35097294554414715;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.11523308229491554;  // std dev = 1.225, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(H, A) )
%   | | | then return 0.15411837876050533;  // std dev = 1.611, 11.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=6 */
%   | | | else return 0.20524211626348632;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), follows(A, D) )
%   | then return 0.13679598722162697;  // std dev = 2.334, 22.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=12 */
%   | else return 0.05331112834323104;  // std dev = 1.271, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.07977908069429666;  // std dev = 2.163, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
%   | | | else return -0.2757307827415202;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then return 0.07223490430329395;  // std dev = 3.254, 44.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=22 */
%   else if ( follows(A, D), tweets(D, E) )
%   | then if ( follows(D, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return -0.011157557312875451;  // std dev = 0.754, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.13410975790621515;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, D) )
%   | | then return 0.008171182958874404;  // std dev = 2.517, 27.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
%   | | else return 0.16333706029564443;  // std dev = 2.001, 17.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | else if ( follows(C, A) )
%   | | then return -0.34207558476682653;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.22224580239320013;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(F, A) )
%   | | then return 0.061513576099603964;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.036713098267686324;  // std dev = 2.638, 30.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=14 */
%   else if ( follows(A, D) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then return 0.06454232070373196;  // std dev = 1.890, 15.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=9 */
%   | | else if ( follows(D, F), recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.26970221783363185;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.04631522733428317;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.641046
   AUC PR    = 0.64947
   CLL	      = -0.686805
   Precision = 0.626866 at threshold = 0.5
   Recall    = 0.269231
   F1        = 0.376682


Total learning time: 1.305 seconds
Total inference time: 0.832 seconds
AUC ROC: 0.641046


Results scoring model
   AUC ROC   = 0.652
   AUC PR    = 0.627002
   CLL	      = -0.656335
   Precision = 0.6 at threshold = 0.5
   Recall    = 0.36
   F1        = 0.45


Total scoring time: 0.643 seconds
Parameter learned model CLL: -0.656335


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, D)', 'false,false': 'follows(E, A), recursion_accounttype(E, B)', 'false,false,true': 'tweets(A, F)', 'false,false,false': 'follows(A, G), follows(G, H)'}, {'true': [2.733, 16, 14], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.225, 3, 3], 'false,false,true,false': [0.0, 0, 0], 'false,false,false,true': [1.852, 6, 8], 'false,false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(A, D), tweets(A, E)', 'false': 'follows(A, F), follows(F, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(G, A)', 'false,false,false': 'follows(A, H)'}, {'true,true': [2.289, 10, 11], 'true,false': [1.414, 4, 4], 'false,true,true': [0.0, 0, 0], 'false,true,false': [1.925, 8, 7], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [1.218, 3, 3], 'false,false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'tweets(A, C), follows(A, D)', 'true': 'follows(D, E), recursion_accounttype(E, B)', 'false': 'follows(F, A), recursion_accounttype(F, B)', 'false,false': 'follows(G, A), follows(G, G)'}, {'true,true': [2.91, 17, 17], 'true,false': [0.0, 0, 0], 'false,true': [1.414, 4, 4], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.498, 4, 4]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A), follows(A, D)', 'false,true': 'follows(A, A)', 'false,false': 'follows(A, E)', 'false,false,false': 'follows(F, A), recursion_accounttype(F, B)'}, {'true': [0.498, 16, 14], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.499, 6, 7], 'false,false,true': [0.471, 1, 2], 'false,false,false,true': [1.0, 2, 2], 'false,false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'tweets(A, C), follows(D, A)', 'true': 'follows(E, D), recursion_accounttype(E, B)', 'true,false': 'follows(A, D)', 'false': 'follows(A, F), recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [2.864, 16, 17], 'true,false,true': [0.0, 1, 0], 'true,false,false': [0.0, 0, 0], 'false,true': [1.491, 5, 4], 'false,false,true,true': [1.156, 2, 4], 'false,false,true,false': [0.0, 1, 0], 'false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(D, C), follows(C, A)', 'true,false': 'follows(C, E), follows(E, E)', 'true,false,false': 'follows(C, F)', 'false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false': 'follows(A, A)', 'false,false,false': 'follows(H, A)'}, {'true,true,true': [2.103, 8, 10], 'true,true,false': [1.4, 6, 3], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.707, 1, 1], 'true,false,false,false': [0.0, 1, 0], 'false,true': [1.225, 3, 3], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [1.611, 5, 6], 'false,false,false,false': [0.816, 1, 2]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), follows(A, D)', 'false': 'follows(A, A)', 'false,false': 'follows(A, E)', 'false,false,true': 'follows(E, F)'}, {'true,true': [2.334, 10, 12], 'true,false': [1.271, 4, 3], 'false,true': [0.0, 0, 0], 'false,false,true,true': [2.163, 10, 10], 'false,false,true,false': [0.0, 1, 0], 'false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(C, A)', 'false': 'follows(A, D), tweets(D, E)', 'false,true': 'follows(D, D)', 'false,true,false': 'recursion_accounttype(D, B)'}, {'true': [3.254, 22, 22], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.754, 2, 1], 'false,true,false,false': [0.816, 1, 2], 'false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'true,true': 'follows(A, D)', 'true,false': 'follows(C, A)', 'false': 'recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(F, A)'}, {'true,true,true': [2.517, 15, 12], 'true,true,false': [2.001, 6, 11], 'true,false,true': [0.0, 1, 0], 'true,false,false': [0.0, 1, 0], 'false,true,true': [1.0, 2, 2], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(A, D)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,false': 'follows(D, F), recursion_accounttype(F, B)', 'false,false': 'follows(G, A)', 'false,false,true': 'follows(H, G), recursion_accounttype(H, B)'}, {'true': [2.638, 16, 14], 'false,true,true': [1.89, 6, 9], 'false,true,false,true': [0.0, 0, 0], 'false,true,false,false': [0.0, 1, 0], 'false,false,true,true': [1.0, 2, 2], 'false,false,true,false': [0.0, 0, 0], 'false,false,false': [0.0, 0, 0]}]]
[{'': [0.2488888888888884, 0.24749999999999997], 'false': [nan, 0.24749999999999997], 'false,false': [0.24999999999999992, 0.24489795918367346], 'false,false,true': [0.24999999999999992, nan], 'false,false,false': [0.24489795918367338, nan]}, {'': [0.24974341428766342, 0.24741084985062547], 'true': [0.249458493157618, 0.2500065100874617], 'false': [0.24704684314116576, 0.24733458725008525], 'false,false': [nan, 0.24733458725008525], 'false,false,false': [0.24733458725008525, nan], 'false,true': [nan, 0.24704684314116576]}, {'': [0.2491051402872947, 0.24883402877864477], 'true': [0.2491051402872947, nan], 'false': [0.25000929398778593, 0.24765450677769568], 'false,false': [nan, 0.24765450677769568]}, {'': [0.2479725623786025, 0.2471262324797201], 'false': [0.24851511142055147, 0.24385788115361956], 'false,true': [nan, 0.24851511142055147], 'false,false': [0.22221094252648146, 0.24999999999999994], 'false,false,false': [0.24999999999999994, nan]}, {'': [0.24858549050998988, 0.24656684203582427], 'true': [0.24849562372423672, 0.0], 'false': [0.24703682569251167, 0.24222834658464287], 'false,false': [0.24222834658464287, nan], 'false,false,true': [0.22255212348648878, 0.0], 'true,false': [0.0, nan]}, {'': [0.24468204096606172, 0.23890445381588993], 'true': [0.24527538980706842, 0.22223427526147801], 'true,true': [0.24560027679491256, 0.21764330941760768], 'false': [0.2500391153841485, 0.23338723686545185], 'false,false': [nan, 0.23338723686545193], 'false,false,false': [0.23587576183046968, 0.22220907376283808], 'true,false': [nan, 0.22223427526147801], 'true,false,false': [0.24999999999999994, 0.0]}, {'': [0.24478785757589522, 0.22843735683267286], 'true': [0.2475325349400041, 0.2308743536633775], 'false': [nan, 0.22843735683267277], 'false,false': [0.22843735683267277, nan], 'false,false,true': [0.23384078357906102, 0.0]}, {'': [0.24058094811805777, 0.2110581890181611], 'false': [0.2110581890181611, nan], 'false,true': [nan, 0.2110581890181611], 'false,true,false': [0.18935603041323582, 0.222209051187605]}, {'': [0.23551859655740368, 0.24999999999999997], 'false': [0.24999999999999997, nan], 'false,true': [0.24999999999999997, nan], 'true': [0.24072613179866237, 0.0035897941859276694], 'true,true': [0.2346832808214559, 0.235549416083627], 'true,false': [0.0, 0.0]}, {'': [0.23198157921517343, 0.23382833106510761], 'false': [0.22978399531488128, 0.25], 'false,false': [0.25, nan], 'false,false,true': [0.25, nan], 'false,true': [0.23812046511449492, 0.0], 'false,true,false': [nan, 0.0]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
4;;accounttype(A, B) :- tweets(A, C), follows(D, A).;true;true
4;true;follows(E, D), recursion_accounttype(E, B).;true;true
4;false;follows(A, F), recursion_accounttype(F, B).;true;true
4;false,false;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
5;true;follows(D, A), follows(A, D).;true;true
5;true,false;follows(C, F).;true;true
6;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
6;false;follows(E, F).;true;true
8;;accounttype(A, B) :- follows(A, C).;true;true
8;true;follows(C, D), recursion_accounttype(D, B).;true;true
8;true,false;follows(C, A).;true;true
9;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
9;false;follows(A, D).;true;true
9;false,true;follows(D, E), recursion_accounttype(E, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(C, A), follows(D, A) )
%   | | then return 0.6359267128772901;  // std dev = 0.416, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | else if ( tweets(A, E), tweets(C, E) )
%   | | | then return 0.19148226843284566;  // std dev = 1.633, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | | else return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( follows(F, A) )
%   | then if ( follows(G, F), follows(A, G) )
%   | | then if ( follows(G, A) )
%   | | | then return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( follows(A, F), tweets(A, H) )
%   | | | then return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.3581489350995122;  // std dev = 1.225, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A), follows(C, A) )
%   | | then if ( tweets(C, E), tweets(D, E) )
%   | | | then return 0.42873873096305654;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.7620720642963899;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, F), follows(D, C) )
%   | | | then return 0.1610276971486461;  // std dev = 1.607, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | | else return 0.5336053444854284;  // std dev = 0.887, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( follows(G, A) )
%   | then if ( follows(A, G), tweets(G, H) )
%   | | then if ( follows(A, I), follows(G, I) )
%   | | | then return 0.49378680793891;  // std dev = 1.171, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.22831262014236567;  // std dev = 1.082, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else return 0.20874113578563502;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | else return 0.448295606241962;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A), follows(C, A) )
%   | | then if ( tweets(C, E), tweets(D, E) )
%   | | | then return 0.34264147750082447;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.5991683803003494;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, F), follows(A, D) )
%   | | | then return 0.009611847250163851;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.301534107249674;  // std dev = 1.594, 11.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=6 */
%   | else return -0.11231637819360638;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( follows(G, A) )
%   | then if ( recursion_accounttype(G, B), tweets(G, H) )
%   | | then return 0.3700919467196554;  // std dev = 1.088, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( follows(A, I), follows(G, I) )
%   | | | then return 0.20115837313526697;  // std dev = 1.293, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | else return 0.29199906431311495;  // std dev = 0.986, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else return 0.36236334632262296;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(D, A) )
%   | | then if ( tweets(C, E), tweets(D, E) )
%   | | | then return 0.5006625103055661;  // std dev = 0.782, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.07669781239843454;  // std dev = 0.763, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( tweets(C, F), follows(G, A) )
%   | | | then return 0.09777377947323838;  // std dev = 1.592, 12.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
%   | | | else return 0.38900879261173027;  // std dev = 0.711, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.10159632948783633;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( follows(H, A) )
%   | then if ( follows(A, H), tweets(H, I) )
%   | | then if ( follows(H, J), follows(J, A) )
%   | | | then return 0.05217215354327393;  // std dev = 0.767, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.33433373103438213;  // std dev = 1.354, 9.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=6 */
%   | | else return 0.1100914633078824;  // std dev = 1.083, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | else return 0.2807538536965855;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), follows(D, A) )
%   then if ( follows(E, D), recursion_accounttype(E, B) )
%   | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(G, A) )
%   | | | then return 0.2153310671612759;  // std dev = 2.002, 21.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=12 */
%   | | | else return 0.04021193059499397;  // std dev = 0.667, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.12688625366304876;  // std dev = 0.403, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | else return -0.20749288927670692;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( follows(A, H), recursion_accounttype(H, B) )
%   | then if ( follows(I, A), recursion_accounttype(I, B) )
%   | | then return 0.032186261574677466;  // std dev = 0.932, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return 0.1428953773354493;  // std dev = 0.809, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | else if ( follows(J, K), recursion_accounttype(K, B) )
%   | | then if ( follows(L, A) )
%   | | | then return 0.10359285183989392;  // std dev = 0.976, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.21248070121827137;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.13706113174720205;  // std dev = 1.777, 19.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=10 */
%   | | | else return 0.024285072107309014;  // std dev = 0.932, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return 0.05392341714223309;  // std dev = 0.549, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.05560803923857147;  // std dev = 0.364, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else if ( tweets(A, G), follows(H, A) )
%   | then if ( follows(A, I), follows(H, I) )
%   | | then return 0.24924115051163373;  // std dev = 0.967, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( follows(A, H) )
%   | | | then return -0.014860919384455884;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.13125288149548964;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else if ( follows(J, A) )
%   | | then return 0.07923966015460264;  // std dev = 0.975, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return 0.1594898822817116;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E) )
%   | | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | | then return 0.06794331833342865;  // std dev = 1.691, 17.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=8 */
%   | | | else return 0.2763818221301291;  // std dev = 0.731, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.10021057246692122;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else return 0.018314993418136097;  // std dev = 0.932, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else if ( follows(F, G) )
%   | then if ( tweets(A, H) )
%   | | then if ( follows(I, A), tweets(I, H) )
%   | | | then return 0.09736457261069323;  // std dev = 1.147, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | else return 0.008819262153833923;  // std dev = 0.951, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.09803740412917973;  // std dev = 0.511, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.13889879489421755;  // std dev = 1.036, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, D) )
%   then if ( follows(C, A), follows(D, A) )
%   | then if ( recursion_accounttype(D, B), tweets(D, E) )
%   | | then if ( tweets(C, E), tweets(A, E) )
%   | | | then return 0.22481404494751547;  // std dev = 1.351, 12.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | | | else return -0.10616076855824295;  // std dev = 1.041, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | else return -0.23167332496914472;  // std dev = 0.316, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( recursion_accounttype(C, B), tweets(A, F) )
%   | | then return -0.008102018765655241;  // std dev = 0.899, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else if ( follows(D, A) )
%   | | | then return 0.3092771958840822;  // std dev = 0.939, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.05387326200521413;  // std dev = 1.332, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   else return 0.036588247046923185;  // std dev = 1.015, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.06195399764878206;  // std dev = 1.793, 21.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=11 */
%   | | | else return 0.03555355776559161;  // std dev = 1.427, 13.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.014044102580987275;  // std dev = 0.876, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.170239483169045;  // std dev = 1.005, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( follows(C, A) )
%   | | then return -0.36673359163927577;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.12476293730400327;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else return 0.06698089305380739;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B), follows(E, A) )
%   | | | then return 0.1512605740831575;  // std dev = 1.003, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return -0.025483594468855418;  // std dev = 1.463, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | else return -0.02626329524728373;  // std dev = 0.598, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( tweets(A, F) )
%   | | then return 0.0095843425018108;  // std dev = 0.633, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.04929314904856986;  // std dev = 0.398, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else if ( follows(A, G) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.034480482341766976;  // std dev = 1.391, 11.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=6 */
%   | | | else return 0.136144484593873;  // std dev = 0.935, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return -0.2863885614215492;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0.05046826575273211;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */


Results
   AUC ROC   = 0.7033
   AUC PR    = 0.691519
   CLL	      = -0.625038
   Precision = 0.666667 at threshold = 0.5
   Recall    = 0.487179
   F1        = 0.562963


Total learning time: 10.971 seconds
Total inference time: 1.628 seconds
AUC ROC: 0.7033


Results scoring model
   AUC ROC   = 0.8952
   AUC PR    = 0.881481
   CLL	      = -0.502093
   Precision = 0.857143 at threshold = 0.5
   Recall    = 0.72
   F1        = 0.782609


Total scoring time: 1.212 seconds
Refined model CLL: -0.502093


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.7033
   AUC PR    = 0.691519
   CLL	      = -0.625038
   Precision = 0.666667 at threshold = 0.5
   Recall    = 0.487179
   F1        = 0.562963


Total learning time: 14.131 seconds
Total inference time: 1.628 seconds
AUC ROC: 0.7033
Total revision time: 14.131
Best scored revision CLL: -0.502093


Dataset: 7_yeast_twitter, Fold: 1, Type: Transfer (trRDN-B), Time: 03:33:41
{'AUC ROC': 0.7033, 'AUC PR': 0.691519, 'CLL': -0.625038, 'Precision': [0.666667, 0.5], 'Recall': 0.487179, 'F1': 0.562963, 'Learning time': 14.131, 'Inference time': 1.628, 'parameter_0.2': {'AUC ROC': 0.641046, 'AUC PR': 0.64947, 'CLL': -0.686805, 'Precision': [0.626866, 0.5], 'Recall': 0.269231, 'F1': 0.376682, 'Learning time': 1.305, 'Inference time': 0.832}}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
0;false;interaction(D, A), interaction(D, D).;true;true
0;false,true;interaction(A, E), interaction(E, D).;true;true
0;false,true,true;interaction(A, A).;false;false
0;false,true,false;enzyme(A, F).;false;false
0;false,false;interaction(A, G), recursion_proteinclass(G, B).;true;true
0;false,false,true;complex(A, H).;false;false
0;false,false,false;interaction(I, A), interaction(J, I).;false;false
1;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
1;true;interaction(D, A), complex(A, E).;false;false
1;false;interaction(F, A), interaction(A, F).;true;true
1;false,true;enzyme(A, G), enzyme(F, G).;false;true
1;false,true,false;interaction(A, A).;false;false
1;false,false;interaction(A, H), enzyme(H, I).;true;true
1;false,false,true;phenotype(A, J), phenotype(H, K).;false;false
1;false,false,false;interaction(L, A), location(A, M).;false;false
2;;proteinclass(A, B) :- complex(A, C), interaction(D, A).;true;true
2;true;interaction(E, D), recursion_proteinclass(E, B).;false;true
2;true,false;interaction(A, D).;false;true
2;true,false,false;interaction(D, D), enzyme(A, F).;false;false
2;false;interaction(A, G), recursion_proteinclass(G, B).;false;true
2;false,false;interaction(A, H), interaction(H, H).;true;true
2;false,false,true;interaction(H, A).;false;false
2;false,false,false;phenotype(A, I), enzyme(A, J).;false;false
3;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
3;true;phenotype(C, D), enzyme(C, E).;false;false
3;false;interaction(A, F), interaction(F, A).;true;true
3;false,true;interaction(A, A).;false;true
3;false,true,false;enzyme(F, G), enzyme(A, G).;false;false
3;false,false;interaction(H, A), enzyme(H, I).;true;true
3;false,false,true;enzyme(A, I).;false;false
3;false,false,false;interaction(A, J), recursion_proteinclass(J, B).;false;false
4;;proteinclass(A, B) :- complex(A, C), interaction(A, D).;true;true
4;true;interaction(D, E), recursion_proteinclass(E, B).;false;true
4;true,false;interaction(D, A).;false;true
4;true,false,false;recursion_proteinclass(D, B).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;false;true
4;false,false;interaction(G, A), enzyme(G, H).;true;true
4;false,false,true;interaction(I, G), recursion_proteinclass(I, B).;false;false
4;false,false,false;phenotype(A, J), enzyme(A, K).;false;false
5;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
5;true;interaction(A, D), interaction(D, A).;true;true
5;true,true;interaction(C, D), interaction(A, C).;false;false
5;true,false;interaction(E, C), interaction(E, E).;false;true
5;true,false,false;enzyme(A, F), interaction(G, C).;false;false
5;false;interaction(A, H), recursion_proteinclass(H, B).;false;true
5;false,false;interaction(A, A).;false;true
5;false,false,false;interaction(A, I), enzyme(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
6;true;enzyme(C, D), phenotype(C, E).;true;true
6;true,true;enzyme(A, D).;false;false
6;true,false;interaction(C, F), interaction(F, A).;false;false
6;false;interaction(A, A).;false;true
6;false,false;interaction(G, A), enzyme(G, H).;true;true
6;false,false,true;interaction(I, G), phenotype(G, J).;false;false
6;false,false,false;interaction(A, K), enzyme(K, L).;false;false
7;;proteinclass(A, B) :- interaction(A, C), location(A, D).;false;true
7;false;interaction(E, A), complex(E, F).;true;true
7;false,true;interaction(E, E), enzyme(A, G).;true;true
7;false,true,true;interaction(E, H), recursion_proteinclass(H, B).;false;false
7;false,true,false;recursion_proteinclass(E, B).;false;false
7;false,false;complex(A, I), location(A, J).;true;true
7;false,false,true;complex(K, I), recursion_proteinclass(K, B).;false;false
7;false,false,false;interaction(L, A), recursion_proteinclass(L, B).;false;false
8;;proteinclass(A, B) :- interaction(C, A).;true;true
8;true;interaction(D, C), recursion_proteinclass(D, B).;true;true
8;true,true;interaction(D, A).;false;false
8;true,false;interaction(A, C).;false;true
8;true,false,false;enzyme(C, E), phenotype(A, F).;false;false
8;false;location(A, G).;true;false
8;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
8;false,true,true;interaction(H, I), interaction(A, I).;false;false
9;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
9;false;interaction(D, A), enzyme(D, E).;true;true
9;false,true;location(A, F), location(D, F).;true;true
9;false,true,true;interaction(G, D), recursion_proteinclass(G, B).;false;false
9;false,true,false;interaction(H, D), recursion_proteinclass(H, B).;false;false
9;false,false;phenotype(A, I), interaction(A, J).;true;true
9;false,false,true;interaction(J, K), recursion_proteinclass(K, B).;false;false
9;false,false,false;complex(A, L), location(A, M).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.3357608753980186;  // std dev = 4.089, 67.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=32 */
%   else if ( follows(A, D), follows(D, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.15814893509951225;  // std dev = 1.449, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return 0.41370449065506787;  // std dev = 2.108, 18.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=10 */
%   | | | else return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), tweets(A, E) )
%   | then return 0.33781873935374984;  // std dev = 3.232, 42.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=22 */
%   | else return 0.33569598042772947;  // std dev = 2.236, 21.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=11 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.25426318303018375;  // std dev = 2.219, 20.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=9 */
%   | else if ( follows(G, A) )
%   | | then return -0.18781981824337046;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.29099141307910126;  // std dev = 1.931, 16.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=8 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), follows(A, D) )
%   then if ( follows(D, E), recursion_accounttype(E, B) )
%   | then return 0.25870868977865774;  // std dev = 3.923, 62.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=31 */
%   | else if ( follows(D, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(D, D) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.21616317547108502;  // std dev = 0.882, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.2794785289183677;  // std dev = 2.227, 21.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=11 */
%   | else if ( follows(G, A), follows(G, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.2151729767396204;  // std dev = 0.489, 13.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.18661095643834105;  // std dev = 0.496, 67.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=32 */
%   else if ( follows(D, A), follows(A, D) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.26670253423022316;  // std dev = 0.489, 16.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=9 */
%   | else if ( follows(A, E) )
%   | | then return 0.36479908425474783;  // std dev = 0.428, 10.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=7 */
%   | | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.02198535539287629;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), follows(D, A) )
%   then if ( follows(E, D), recursion_accounttype(E, B) )
%   | then return 0.16316875980075715;  // std dev = 3.876, 61.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else if ( follows(A, D) )
%   | | then return -0.3360156733441028;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.2302785032801192;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return 0.10586665158114605;  // std dev = 2.360, 23.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=10 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.30658878620656466;  // std dev = 1.412, 10.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=7 */
%   | | | else return 0.30242368854558854;  // std dev = 0.745, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(D, C), follows(C, A) )
%   | | then return 0.2643910980227956;  // std dev = 2.763, 33.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=21 */
%   | | else return 0.0016313652490500563;  // std dev = 2.387, 25.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=9 */
%   | else if ( follows(C, E), follows(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(C, F) )
%   | | | then return -0.059986466315870735;  // std dev = 0.831, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.13952783209686137;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.056634961251206796;  // std dev = 1.560, 12.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
%   | else if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(H, A) )
%   | | | then return 0.14022852436102726;  // std dev = 1.800, 13.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
%   | | | else return 0.2554326264848598;  // std dev = 1.173, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), follows(A, D) )
%   | then return 0.15530391855917203;  // std dev = 3.260, 45.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=26 */
%   | else return 0.03398349840191555;  // std dev = 1.981, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.0405566985967021;  // std dev = 2.596, 29.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=13 */
%   | | | else return 0.07456174431190742;  // std dev = 1.118, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then return 0.07541358649846204;  // std dev = 4.423, 84.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=42 */
%   else if ( follows(A, D), tweets(D, E) )
%   | then if ( follows(D, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return -0.0825377022681732;  // std dev = 1.221, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return 0.17959110892862956;  // std dev = 1.171, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, D) )
%   | | then return 0.049982149470756236;  // std dev = 3.539, 54.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=27 */
%   | | else return 0.12052874801824472;  // std dev = 2.605, 29.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=17 */
%   | else if ( follows(C, A) )
%   | | then return -0.47713238485409;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.003188497814232404;  // std dev = 0.385, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   else if ( recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(F, A) )
%   | | then return -0.051554256205216684;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.033563652389724;  // std dev = 3.930, 67.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=32 */
%   else if ( follows(A, D) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then return 0.0903722493045435;  // std dev = 2.189, 21.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=13 */
%   | | else if ( follows(D, F), recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04013136426687023;  // std dev = 0.772, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | | then return -0.04012930756610834;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.655428
   AUC PR    = 0.63133
   CLL	      = -0.660402
   Precision = 0.622222 at threshold = 0.5
   Recall    = 0.538462
   F1        = 0.57732


Total learning time: 1.552 seconds
Total inference time: 0.944 seconds
AUC ROC: 0.655428


Results scoring model
   AUC ROC   = 0.7114
   AUC PR    = 0.707754
   CLL	      = -0.639508
   Precision = 0.654545 at threshold = 0.5
   Recall    = 0.72
   F1        = 0.685714


Total scoring time: 0.748 seconds
Parameter learned model CLL: -0.639508


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, D)', 'false,false': 'follows(E, A), recursion_accounttype(E, B)', 'false,false,true': 'tweets(A, F)', 'false,false,false': 'follows(A, G), follows(G, H)'}, {'true': [4.089, 35, 32], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.449, 7, 3], 'false,false,true,false': [0.0, 0, 2], 'false,false,false,true': [2.108, 8, 10], 'false,false,false,false': [2.11e-08, 0, 3]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(A, D), tweets(A, E)', 'false': 'follows(A, F), follows(F, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(G, A)', 'false,false,false': 'follows(A, H)'}, {'true,true': [3.232, 20, 22], 'true,false': [2.236, 10, 11], 'false,true,true': [0.0, 0, 0], 'false,true,false': [2.219, 11, 9], 'false,false,true': [0.0, 1, 0], 'false,false,false,true': [1.931, 8, 8], 'false,false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'tweets(A, C), follows(A, D)', 'true': 'follows(D, E), recursion_accounttype(E, B)', 'true,false': 'follows(D, A)', 'true,false,false': 'follows(D, D)', 'false': 'follows(F, A), recursion_accounttype(F, B)', 'false,false': 'follows(G, A), follows(G, G)'}, {'true,true': [3.923, 31, 31], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [0.882, 2, 2], 'false,true': [2.227, 10, 11], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.489, 7, 6]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A), follows(A, D)', 'false,true': 'follows(A, A)', 'false,false': 'follows(A, E)', 'false,false,false': 'follows(F, A), recursion_accounttype(F, B)'}, {'true': [0.496, 35, 32], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.489, 7, 9], 'false,false,true': [0.428, 3, 7], 'false,false,false,true': [1.195, 5, 2], 'false,false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'tweets(A, C), follows(D, A)', 'true': 'follows(E, D), recursion_accounttype(E, B)', 'true,false': 'follows(A, D)', 'true,false,false': 'recursion_accounttype(D, B)', 'false': 'follows(A, F), recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [3.876, 31, 30], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [0.0, 1, 0], 'false,true': [2.36, 13, 10], 'false,false,true,true': [1.412, 3, 7], 'false,false,true,false': [0.745, 1, 3], 'false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(D, C), follows(C, A)', 'true,false': 'follows(C, E), follows(E, E)', 'true,false,false': 'follows(C, F)', 'false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false': 'follows(A, A)', 'false,false,false': 'follows(H, A)'}, {'true,true,true': [2.763, 12, 21], 'true,true,false': [2.387, 16, 9], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.831, 3, 1], 'true,false,false,false': [0.894, 4, 1], 'false,true': [1.56, 7, 5], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [1.8, 6, 7], 'false,false,false,false': [1.173, 2, 6]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), follows(A, D)', 'false': 'follows(A, A)', 'false,false': 'follows(A, E)', 'false,false,true': 'follows(E, F)'}, {'true,true': [3.26, 19, 26], 'true,false': [1.981, 11, 7], 'false,true': [0.0, 0, 0], 'false,false,true,true': [2.596, 16, 13], 'false,false,true,false': [1.118, 4, 4], 'false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(C, A)', 'false': 'follows(A, D), tweets(D, E)', 'false,true': 'follows(D, D)', 'false,true,false': 'recursion_accounttype(D, B)'}, {'true': [4.423, 42, 42], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [1.221, 6, 2], 'false,true,false,false': [1.171, 2, 6], 'false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'true,true': 'follows(A, D)', 'true,false': 'follows(C, A)', 'false': 'recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(F, A)'}, {'true,true,true': [3.539, 27, 27], 'true,true,false': [2.605, 12, 17], 'true,false,true': [0.0, 1, 0], 'true,false,false': [0.385, 5, 4], 'false,true,true': [1.195, 5, 2], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(A, D)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,false': 'follows(D, F), recursion_accounttype(F, B)', 'false,false': 'follows(G, A)', 'false,false,true': 'follows(H, G), recursion_accounttype(H, B)'}, {'true': [3.93, 35, 32], 'false,true,true': [2.189, 8, 13], 'false,true,false,true': [0.0, 0, 0], 'false,true,false,false': [0.772, 2, 3], 'false,false,true,true': [1.195, 5, 2], 'false,false,true,false': [0.0, 0, 0], 'false,false,false': [0.0, 0, 0]}]]
[{'': [0.24949877478280397, 0.24793388429752033], 'false': [nan, 0.24793388429752033], 'false,false': [0.24305555555555536, 0.2358276643990929], 'false,false,true': [0.20999999999999988, 0.0], 'false,false,false': [0.24691358024691354, 1.4802973661668753e-16]}, {'': [0.24518648752221603, 0.23967975006477196], 'true': [0.24877982153948638, 0.2379968154173715], 'false': [0.24613305038546285, 0.23204799818565736], 'false,true': [nan, 0.24613305038546285], 'false,false': [0.0, 0.23306510423458202], 'false,false,false': [0.23306510423458202, nan]}, {'': [0.245044084785205, 0.23807372477937314], 'true': [0.2481899975252446, 0.19458202081705908], 'false': [0.2360709554180794, 0.23875487098020332], 'false,false': [nan, 0.23875487098020332], 'true,false': [nan, 0.19458202081705908], 'true,false,false': [nan, 0.19458202081705908]}, {'': [0.2464825163022662, 0.23010046855190458], 'false': [0.23960301849221782, 0.22025781836693295], 'false,true': [nan, 0.23960301849221782], 'false,false': [0.18319004431527472, 0.20408163265306117], 'false,false,false': [0.20408163265306117, nan]}, {'': [0.24463017227328143, 0.22880097884296705], 'true': [0.24623545061910007, 0.0027950872832849666], 'false': [0.24223124934969603, 0.181988303088869], 'false,false': [0.181988303088869, nan], 'false,false,true': [0.19924364775953704, 0.13883754995610914], 'true,false': [0.0, 0.0], 'true,false,false': [nan, 0.0]}, {'': [0.24367303913607855, 0.21931725901658508], 'true': [0.24679653413589284, 0.16711717652051963], 'true,true': [0.23131621222742627, 0.22794765652882934], 'false': [0.20273542602674796, 0.2228830050281832], 'false,false': [nan, 0.22288300502818317], 'false,false,false': [0.2491260344207692, 0.17202209146046632], 'true,false': [nan, 0.16711717652051963], 'true,false,false': [0.17247652518766576, 0.1600177736444448]}, {'': [0.23397147599827076, 0.2160852116643614], 'true': [0.2361647021860037, 0.2179750931381294], 'false': [nan, 0.21608521166436145], 'false,false': [0.21608521166436145, nan], 'false,false,true': [0.2323684898712407, 0.15615200516743188]}, {'': [0.23288125806469492, 0.19600522310504082], 'false': [0.19600522310504082, nan], 'false,true': [nan, 0.19600522310504082], 'false,true,false': [0.18636552326848957, 0.17128916611186756]}, {'': [0.22657658418258667, 0.20408163265306123], 'true': [0.23379017964777257, 0.1539644301963242], 'true,true': [0.23190731817204344, 0.23405826481390868], 'false': [0.20408163265306123, nan], 'false,true': [0.20408163265306123, nan], 'true,false': [0.0, 0.14800077407429926]}, {'': [0.23051964439160436, 0.20929312530875052], 'false': [0.2075987685032469, 0.20408163265306123], 'false,true': [0.22814109470826324, 0.1192822647069188], 'false,false': [0.20408163265306123, nan], 'false,false,true': [0.20408163265306123, nan], 'false,true,false': [nan, 0.1192822647069188]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
0;false;follows(E, A), recursion_accounttype(E, B).;true;true
0;false,true;tweets(A, F).;true;true
0;false,false;follows(A, G), follows(G, H).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, F), follows(F, A).;true;true
1;false,false;follows(G, A).;true;true
4;;accounttype(A, B) :- tweets(A, C), follows(D, A).;true;true
4;true;follows(E, D), recursion_accounttype(E, B).;true;true
4;true,false;follows(A, D).;true;true
8;;accounttype(A, B) :- follows(A, C).;true;true
8;true;follows(C, D), recursion_accounttype(D, B).;true;true
8;true,false;follows(C, A).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then if ( follows(E, A) )
%   | | | then return 0.7081489350995123;  // std dev = 1.597, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | | else return 0.2510060779566552;  // std dev = 2.584, 28.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=11 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.10814893509951218;  // std dev = 0.433, 16.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=4 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( tweets(A, G) )
%   | | then return 0.15814893509951225;  // std dev = 0.458, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | else return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( follows(J, A) )
%   | | | then return 0.3966104735610508;  // std dev = 1.797, 13.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
%   | | | else return 0.4581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( follows(D, A), follows(E, A) )
%   | | then return 0.4155516294037401;  // std dev = 0.462, 38.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=24 */
%   | | else if ( tweets(A, F), follows(E, A) )
%   | | | then return -0.1752316245797546;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.40762495949469835;  // std dev = 1.652, 12.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=7 */
%   | else return 0.08778665478297892;  // std dev = 0.433, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   else if ( follows(A, G), follows(G, A) )
%   | then if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.13018172355004126;  // std dev = 0.452, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.35827675990400937;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | | | else return 0.3027212043484538;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else if ( follows(J, A) )
%   | | then return -0.1555325621642444;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.30488316607525956;  // std dev = 0.475, 16.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=8 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, D) )
%   then if ( tweets(D, E), recursion_accounttype(D, B) )
%   | then if ( follows(A, D), tweets(A, E) )
%   | | then if ( follows(C, A), tweets(C, E) )
%   | | | then return 0.30179889389014447;  // std dev = 2.344, 26.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=15 */
%   | | | else return -0.18100572212800992;  // std dev = 0.114, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( follows(C, A), tweets(A, E) )
%   | | | then return 0.49151014787878206;  // std dev = 1.726, 17.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=13 */
%   | | | else return 0.28480785415926296;  // std dev = 2.548, 28.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=15 */
%   | else return 0.009854331951772502;  // std dev = 0.864, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return 1.0774425783478536E-4;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( follows(G, A) )
%   | | then return 0.07549998392401965;  // std dev = 0.433, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0.6540677287532826;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | | then return 0.2894126091893123;  // std dev = 2.342, 29.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=19 */
%   | | | else return 0.09820988724073453;  // std dev = 1.591, 15.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
%   | | else if ( tweets(D, C) )
%   | | | then return -0.008951257333646859;  // std dev = 1.122, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0.21708889380613028;  // std dev = 0.880, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else return 0.11776590411840117;  // std dev = 0.435, 19.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=7 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( follows(F, G) )
%   | | then if ( follows(A, G), follows(G, F) )
%   | | | then return 0.32382574183077445;  // std dev = 1.590, 11.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=7 */
%   | | | else return 0.07139276397375689;  // std dev = 0.839, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return -0.003544579024540828;  // std dev = 0.899, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.3907618221315274;  // std dev = 0.393, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), follows(D, A) )
%   then if ( follows(E, D), recursion_accounttype(E, B) )
%   | then if ( follows(A, F), follows(F, A) )
%   | | then if ( follows(F, G), follows(G, A) )
%   | | | then return 0.14314993596882838;  // std dev = 2.647, 37.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=20 */
%   | | | else return 0.20329847464845968;  // std dev = 1.752, 16.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=8 */
%   | | else return 0.04588944782529039;  // std dev = 0.433, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else return -0.19577179323167238;  // std dev = 0.067, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else if ( follows(A, H), recursion_accounttype(H, B) )
%   | then if ( follows(A, I), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B), follows(I, A) )
%   | | | then return 0.045212722824365614;  // std dev = 0.947, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.2871079656234973;  // std dev = 1.460, 10.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=6 */
%   | | else if ( follows(J, A) )
%   | | | then return 0.07067522117096409;  // std dev = 0.826, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return -0.04813428447510292;  // std dev = 0.932, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | else return 0.28179966583214744;  // std dev = 0.410, 14.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=10 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( tweets(D, C), tweets(E, C) )
%   | | | then return 0.1820555590972253;  // std dev = 2.534, 35.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=21 */
%   | | | else return -0.02616973377996368;  // std dev = 1.126, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | else if ( tweets(D, C) )
%   | | | then return -0.04904997079797264;  // std dev = 1.113, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0.14596773085857365;  // std dev = 0.824, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else return 0.06828497553634023;  // std dev = 0.423, 19.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=7 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( follows(F, G) )
%   | | then if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.034090446797155824;  // std dev = 0.946, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.22073195684075791;  // std dev = 1.502, 10.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=6 */
%   | | else return 6.329107884000207E-4;  // std dev = 0.904, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.23174862433215235;  // std dev = 0.389, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A), follows(C, A) )
%   | | then return 0.2813254102093156;  // std dev = 0.361, 18.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   | | else if ( tweets(C, E), follows(D, C) )
%   | | | then return -0.010696483024312288;  // std dev = 2.557, 36.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=13 */
%   | | | else return 0.5646635221438391;  // std dev = 0.107, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return -0.13637113390657066;  // std dev = 0.324, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), follows(G, A) )
%   | | then if ( tweets(F, H), recursion_accounttype(F, B) )
%   | | | then return 0.15048131543215448;  // std dev = 1.304, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | | else return -0.3654677548170098;  // std dev = 0.160, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( tweets(F, I), follows(A, F) )
%   | | | then return 0.24405574658413673;  // std dev = 1.426, 10.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=7 */
%   | | | else return -0.11163525623265902;  // std dev = 0.579, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return 0.22391047947296938;  // std dev = 0.388, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.04112546748897785;  // std dev = 0.386, 48.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=23 */
%   | else if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.039946139190899996;  // std dev = 0.423, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | else if ( follows(F, A) )
%   | | | then return 0.10047379632940893;  // std dev = 1.351, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | | | else return 0.12001364363549855;  // std dev = 1.064, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else if ( follows(G, A), follows(A, G) )
%   | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, G) )
%   | | | then return 0.1743539877511598;  // std dev = 1.382, 10.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=7 */
%   | | | else return -0.01793302448140564;  // std dev = 0.862, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.005822140164829496;  // std dev = 0.753, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return -0.04327975147387052;  // std dev = 0.928, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else return 0.18991751883316207;  // std dev = 0.355, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( tweets(F, E), follows(A, F) )
%   | | | then return 0.03734613445834974;  // std dev = 3.124, 59.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=29 */
%   | | | else return 0.17167419747495752;  // std dev = 0.635, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.06818073913804386;  // std dev = 1.803, 15.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
%   | | | else return 0.20710334280807374;  // std dev = 0.864, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( follows(C, A) )
%   | | then return -0.41546485402601124;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.047461288731075496;  // std dev = 0.513, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.08141107616809543;  // std dev = 0.878, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   else return 0.02767733413056772;  // std dev = 0.452, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A), follows(C, A) )
%   | | then return 0.188687151514481;  // std dev = 0.364, 18.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   | | else if ( tweets(C, E), follows(D, C) )
%   | | | then return -0.03280717544492646;  // std dev = 2.539, 36.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=13 */
%   | | | else return 0.3977507250612298;  // std dev = 0.123, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return -0.13875600006089794;  // std dev = 0.316, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), follows(G, A) )
%   | | then if ( tweets(F, H), recursion_accounttype(F, B) )
%   | | | then return 0.10107758231171693;  // std dev = 1.291, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | | else return -0.3129684056475828;  // std dev = 0.155, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( tweets(A, I), follows(A, F) )
%   | | | then return 0.19226874511201558;  // std dev = 1.150, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return -0.02039651638199517;  // std dev = 0.948, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.12108077977743109;  // std dev = 0.382, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */


Results
   AUC ROC   = 0.671988
   AUC PR    = 0.612507
   CLL	      = -0.660391
   Precision = 0.66443 at threshold = 0.5
   Recall    = 0.634615
   F1        = 0.64918


Total learning time: 18.997 seconds
Total inference time: 1.661 seconds
AUC ROC: 0.671988


Results scoring model
   AUC ROC   = 0.8784
   AUC PR    = 0.883665
   CLL	      = -0.50473
   Precision = 0.82 at threshold = 0.5
   Recall    = 0.82
   F1        = 0.82


Total scoring time: 1.109 seconds
Refined model CLL: -0.50473


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.671988
   AUC PR    = 0.612507
   CLL	      = -0.660391
   Precision = 0.66443 at threshold = 0.5
   Recall    = 0.634615
   F1        = 0.64918


Total learning time: 22.406 seconds
Total inference time: 1.661 seconds
AUC ROC: 0.671988
Total revision time: 22.406
Best scored revision CLL: -0.50473


Dataset: 7_yeast_twitter, Fold: 1, Type: Transfer (trRDN-B), Time: 03:34:07
{'AUC ROC': 0.671988, 'AUC PR': 0.612507, 'CLL': -0.660391, 'Precision': [0.66443, 0.5], 'Recall': 0.634615, 'F1': 0.64918, 'Learning time': 22.406, 'Inference time': 1.661, 'parameter_0.4': {'AUC ROC': 0.655428, 'AUC PR': 0.63133, 'CLL': -0.660402, 'Precision': [0.622222, 0.5], 'Recall': 0.538462, 'F1': 0.57732, 'Learning time': 1.552, 'Inference time': 0.944}}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
0;false;interaction(D, A), interaction(D, D).;true;true
0;false,true;interaction(A, E), interaction(E, D).;true;true
0;false,true,true;interaction(A, A).;false;false
0;false,true,false;enzyme(A, F).;false;false
0;false,false;interaction(A, G), recursion_proteinclass(G, B).;true;true
0;false,false,true;complex(A, H).;false;false
0;false,false,false;interaction(I, A), interaction(J, I).;false;false
1;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
1;true;interaction(D, A), complex(A, E).;false;false
1;false;interaction(F, A), interaction(A, F).;true;true
1;false,true;enzyme(A, G), enzyme(F, G).;false;true
1;false,true,false;interaction(A, A).;false;false
1;false,false;interaction(A, H), enzyme(H, I).;true;true
1;false,false,true;phenotype(A, J), phenotype(H, K).;false;false
1;false,false,false;interaction(L, A), location(A, M).;false;false
2;;proteinclass(A, B) :- complex(A, C), interaction(D, A).;true;true
2;true;interaction(E, D), recursion_proteinclass(E, B).;false;true
2;true,false;interaction(A, D).;false;true
2;true,false,false;interaction(D, D), enzyme(A, F).;false;false
2;false;interaction(A, G), recursion_proteinclass(G, B).;false;true
2;false,false;interaction(A, H), interaction(H, H).;true;true
2;false,false,true;interaction(H, A).;false;false
2;false,false,false;phenotype(A, I), enzyme(A, J).;false;false
3;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
3;true;phenotype(C, D), enzyme(C, E).;false;false
3;false;interaction(A, F), interaction(F, A).;true;true
3;false,true;interaction(A, A).;false;true
3;false,true,false;enzyme(F, G), enzyme(A, G).;false;false
3;false,false;interaction(H, A), enzyme(H, I).;true;true
3;false,false,true;enzyme(A, I).;false;false
3;false,false,false;interaction(A, J), recursion_proteinclass(J, B).;false;false
4;;proteinclass(A, B) :- complex(A, C), interaction(A, D).;true;true
4;true;interaction(D, E), recursion_proteinclass(E, B).;false;true
4;true,false;interaction(D, A).;false;true
4;true,false,false;recursion_proteinclass(D, B).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;false;true
4;false,false;interaction(G, A), enzyme(G, H).;true;true
4;false,false,true;interaction(I, G), recursion_proteinclass(I, B).;false;false
4;false,false,false;phenotype(A, J), enzyme(A, K).;false;false
5;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
5;true;interaction(A, D), interaction(D, A).;true;true
5;true,true;interaction(C, D), interaction(A, C).;false;false
5;true,false;interaction(E, C), interaction(E, E).;false;true
5;true,false,false;enzyme(A, F), interaction(G, C).;false;false
5;false;interaction(A, H), recursion_proteinclass(H, B).;false;true
5;false,false;interaction(A, A).;false;true
5;false,false,false;interaction(A, I), enzyme(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
6;true;enzyme(C, D), phenotype(C, E).;true;true
6;true,true;enzyme(A, D).;false;false
6;true,false;interaction(C, F), interaction(F, A).;false;false
6;false;interaction(A, A).;false;true
6;false,false;interaction(G, A), enzyme(G, H).;true;true
6;false,false,true;interaction(I, G), phenotype(G, J).;false;false
6;false,false,false;interaction(A, K), enzyme(K, L).;false;false
7;;proteinclass(A, B) :- interaction(A, C), location(A, D).;false;true
7;false;interaction(E, A), complex(E, F).;true;true
7;false,true;interaction(E, E), enzyme(A, G).;true;true
7;false,true,true;interaction(E, H), recursion_proteinclass(H, B).;false;false
7;false,true,false;recursion_proteinclass(E, B).;false;false
7;false,false;complex(A, I), location(A, J).;true;true
7;false,false,true;complex(K, I), recursion_proteinclass(K, B).;false;false
7;false,false,false;interaction(L, A), recursion_proteinclass(L, B).;false;false
8;;proteinclass(A, B) :- interaction(C, A).;true;true
8;true;interaction(D, C), recursion_proteinclass(D, B).;true;true
8;true,true;interaction(D, A).;false;false
8;true,false;interaction(A, C).;false;true
8;true,false,false;enzyme(C, E), phenotype(A, F).;false;false
8;false;location(A, G).;true;false
8;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
8;false,true,true;interaction(H, I), interaction(A, I).;false;false
9;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
9;false;interaction(D, A), enzyme(D, E).;true;true
9;false,true;location(A, F), location(D, F).;true;true
9;false,true,true;interaction(G, D), recursion_proteinclass(G, B).;false;false
9;false,true,false;interaction(H, D), recursion_proteinclass(H, B).;false;false
9;false,false;phenotype(A, I), interaction(A, J).;true;true
9;false,false,true;interaction(J, K), recursion_proteinclass(K, B).;false;false
9;false,false,false;complex(A, L), location(A, M).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.3189332488250034;  // std dev = 5.034, 102.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=47 */
%   else if ( follows(A, D), follows(D, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.324815601766179;  // std dev = 1.932, 15.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=7 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return 0.4581489350995123;  // std dev = 2.449, 25.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=15 */
%   | | | else return 0.5248156017661789;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), tweets(A, E) )
%   | then return 0.33774214981729017;  // std dev = 4.027, 65.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=34 */
%   | else return 0.3839868873766078;  // std dev = 2.491, 26.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=15 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.2263442615575947;  // std dev = 2.817, 33.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=14 */
%   | else if ( follows(G, A) )
%   | | then return -0.19630125140648783;  // std dev = 0.016, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.3235527668074009;  // std dev = 2.369, 23.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), follows(A, D) )
%   then if ( follows(D, E), recursion_accounttype(E, B) )
%   | then return 0.25514782347240994;  // std dev = 4.944, 99.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=49 */
%   | else if ( follows(D, A) )
%   | | then return -0.241710483218496;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( follows(D, D) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.17150148957024688;  // std dev = 1.288, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.3174601460275059;  // std dev = 2.486, 26.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=15 */
%   | else if ( follows(G, A), follows(G, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.23015117630209936;  // std dev = 0.488, 17.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1731022335478269;  // std dev = 0.493, 102.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=47 */
%   else if ( follows(D, A), follows(A, D) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.30694168369000147;  // std dev = 0.484, 23.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=14 */
%   | else if ( follows(A, E) )
%   | | then return 0.39350306991308476;  // std dev = 0.444, 14.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=10 */
%   | | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.08432880572636474;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return -0.2242037867528368;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), follows(D, A) )
%   then if ( follows(E, D), recursion_accounttype(E, B) )
%   | then return 0.1538721155552403;  // std dev = 4.930, 99.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=48 */
%   | else if ( follows(A, D) )
%   | | then return -0.32847852254586685;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.22285286401674326;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return 0.13390970193221025;  // std dev = 2.693, 30.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=14 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.3385208400245198;  // std dev = 1.474, 12.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.2649413525448186;  // std dev = 1.121, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(D, C), follows(C, A) )
%   | | then return 0.23776638490312527;  // std dev = 3.557, 53.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=32 */
%   | | else return -0.035892628707232366;  // std dev = 2.700, 35.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=11 */
%   | else if ( follows(C, E), follows(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(C, F) )
%   | | | then return -0.021474706972926045;  // std dev = 1.130, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return -0.0610261028488921;  // std dev = 1.186, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.12383157288868768;  // std dev = 1.965, 17.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   | else if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(H, A) )
%   | | | then return 0.1492185513282212;  // std dev = 2.178, 20.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=11 */
%   | | | else return 0.2432356009418122;  // std dev = 1.479, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), follows(A, D) )
%   | then return 0.15040600772962545;  // std dev = 3.993, 67.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=38 */
%   | else return 0.07209929916812337;  // std dev = 2.366, 24.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=11 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.0457854358195519;  // std dev = 3.241, 47.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=21 */
%   | | | else return 0.02993455364002935;  // std dev = 1.454, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
%   | | else if ( follows(G, A) )
%   | | | then return -0.23822282922601845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then return 0.0702912165969513;  // std dev = 5.423, 127.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=63 */
%   else if ( follows(A, D), tweets(D, E) )
%   | then if ( follows(D, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return -0.015559927706284832;  // std dev = 1.621, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | | else return 0.17303321975275707;  // std dev = 1.480, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, D) )
%   | | then return 0.04547035823665839;  // std dev = 4.384, 83.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=40 */
%   | | else return 0.13327672365969964;  // std dev = 3.057, 41.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=25 */
%   | else if ( follows(C, A) )
%   | | then return -0.38326430575390125;  // std dev = 0.148, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return 0.010500301007963338;  // std dev = 0.440, 13.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   else if ( recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(F, A) )
%   | | then return -0.04907735668122009;  // std dev = 1.558, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.02646817332455498;  // std dev = 4.834, 102.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=47 */
%   else if ( follows(A, D) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then return 0.1057771969811491;  // std dev = 2.520, 29.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=19 */
%   | | else if ( follows(D, F), recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.09171884349696588;  // std dev = 1.266, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | | then return -0.037433981115991825;  // std dev = 1.559, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.672563
   AUC PR    = 0.653907
   CLL	      = -0.657791
   Precision = 0.633333 at threshold = 0.5
   Recall    = 0.365385
   F1        = 0.463415


Total learning time: 1.752 seconds
Total inference time: 0.967 seconds
AUC ROC: 0.672563


Results scoring model
   AUC ROC   = 0.700444
   AUC PR    = 0.673905
   CLL	      = -0.64461
   Precision = 0.682927 at threshold = 0.5
   Recall    = 0.373333
   F1        = 0.482759


Total scoring time: 0.819 seconds
Parameter learned model CLL: -0.64461


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, D)', 'false,false': 'follows(E, A), recursion_accounttype(E, B)', 'false,false,true': 'tweets(A, F)', 'false,false,false': 'follows(A, G), follows(G, H)'}, {'true': [5.034, 55, 47], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.932, 8, 7], 'false,false,true,false': [0.0, 0, 2], 'false,false,false,true': [2.449, 10, 15], 'false,false,false,false': [1.155, 2, 4]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(A, D), tweets(A, E)', 'false': 'follows(A, F), follows(F, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(G, A)', 'false,false,false': 'follows(A, H)'}, {'true,true': [4.027, 31, 34], 'true,false': [2.491, 11, 15], 'false,true,true': [0.0, 0, 0], 'false,true,false': [2.817, 19, 14], 'false,false,true': [0.016, 3, 0], 'false,false,false,true': [2.369, 11, 12], 'false,false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'tweets(A, C), follows(A, D)', 'true': 'follows(D, E), recursion_accounttype(E, B)', 'true,false': 'follows(D, A)', 'true,false,false': 'follows(D, D)', 'false': 'follows(F, A), recursion_accounttype(F, B)', 'false,false': 'follows(G, A), follows(G, G)'}, {'true,true': [4.944, 50, 49], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [1.288, 4, 3], 'false,true': [2.486, 11, 15], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.488, 9, 8]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A), follows(A, D)', 'false,true': 'follows(A, A)', 'false,false': 'follows(A, E)', 'false,false,false': 'follows(F, A), recursion_accounttype(F, B)'}, {'true': [0.493, 55, 47], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.484, 9, 14], 'false,false,true': [0.444, 4, 10], 'false,false,false,true': [1.549, 6, 4], 'false,false,false,false': [0.0, 1, 0]}], ['accounttype(A, B)', {'': 'tweets(A, C), follows(D, A)', 'true': 'follows(E, D), recursion_accounttype(E, B)', 'true,false': 'follows(A, D)', 'true,false,false': 'recursion_accounttype(D, B)', 'false': 'follows(A, F), recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [4.93, 51, 48], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [0.0, 2, 0], 'false,true': [2.693, 16, 14], 'false,false,true,true': [1.474, 3, 9], 'false,false,true,false': [1.121, 2, 4], 'false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(D, C), follows(C, A)', 'true,false': 'follows(C, E), follows(E, E)', 'true,false,false': 'follows(C, F)', 'false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false': 'follows(A, A)', 'false,false,false': 'follows(H, A)'}, {'true,true,true': [3.557, 21, 32], 'true,true,false': [2.7, 24, 11], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.13, 5, 2], 'true,false,false,false': [1.186, 5, 2], 'false,true': [1.965, 8, 9], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [2.178, 9, 11], 'false,false,false,false': [1.479, 3, 8]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), follows(A, D)', 'false': 'follows(A, A)', 'false,false': 'follows(A, E)', 'false,false,true': 'follows(E, F)', 'false,false,false': 'follows(G, A)'}, {'true,true': [3.993, 29, 38], 'true,false': [2.366, 13, 11], 'false,true': [0.0, 0, 0], 'false,false,true,true': [3.241, 26, 21], 'false,false,true,false': [1.454, 6, 5], 'false,false,false,true': [0.0, 1, 0], 'false,false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(C, A)', 'false': 'follows(A, D), tweets(D, E)', 'false,true': 'follows(D, D)', 'false,true,false': 'recursion_accounttype(D, B)'}, {'true': [5.423, 64, 63], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [1.621, 8, 4], 'false,true,false,false': [1.48, 3, 8], 'false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'true,true': 'follows(A, D)', 'true,false': 'follows(C, A)', 'false': 'recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(F, A)'}, {'true,true,true': [4.384, 43, 40], 'true,true,false': [3.057, 16, 25], 'true,false,true': [0.148, 2, 0], 'true,false,false': [0.44, 7, 6], 'false,true,true': [1.558, 7, 4], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(A, D)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,false': 'follows(D, F), recursion_accounttype(F, B)', 'false,false': 'follows(G, A)', 'false,false,true': 'follows(H, G), recursion_accounttype(H, B)'}, {'true': [4.834, 55, 47], 'false,true,true': [2.52, 10, 19], 'false,true,false,true': [0.0, 0, 0], 'false,true,false,false': [1.266, 3, 5], 'false,false,true,true': [1.559, 7, 4], 'false,false,true,false': [0.0, 0, 0], 'false,false,false': [0.0, 0, 0]}]]
[{'': [0.24846212995001948, 0.24305555555555639], 'false': [nan, 0.24305555555555639], 'false,false': [0.24913494809688577, 0.23725286160249706], 'false,false,true': [0.24888888888888888, 0.0], 'false,false,false': [0.23999999999999955, 0.22222222222222213]}, {'': [0.24680373277217998, 0.2421520964353615], 'true': [0.2494569846746515, 0.23864304890747914], 'false': [0.24046995357022344, 0.24351205648054913], 'false,false': [0.00024353823505028627, 0.24406024812884877], 'false,false,false': [0.24406024812884877, nan], 'false,true': [nan, 0.24046995357022344]}, {'': [0.24665517749429344, 0.2395786348483143], 'true': [0.2469482125409305, 0.22609200158764758], 'false': [0.23774081976883255, 0.23778024199042982], 'false,false': [nan, 0.23778024199042982], 'true,false': [0.0, 0.23704784215031593], 'true,false,false': [nan, 0.23704784215031593]}, {'': [0.24307267517425957, 0.23712211792113544], 'false': [0.23424800385018646, 0.2379352674715065], 'false,false': [0.19723809235344833, 0.22604895542330067], 'false,true': [nan, 0.23424800385018646], 'false,false,false': [0.24000000000000007, 0.0]}, {'': [0.24316126904252902, 0.23062753392694713], 'true': [0.24546380266024748, 0.0024792843866024337], 'false': [0.2418261152206699, 0.19169418278325445], 'false,false': [0.19169418278325445, nan], 'false,false,true': [0.18102924412070295, 0.20941476612317386], 'true,false': [0.0, 0.0], 'true,false,false': [nan, 0.0]}, {'': [0.2407545237327794, 0.22692690096996138], 'true': [0.24454180227255248, 0.1919640396909177], 'true,true': [0.23867515833518435, 0.20832182108566305], 'false': [0.22707970683869846, 0.2256207645796095], 'false,false': [nan, 0.2256207645796095], 'false,false,false': [0.23724239631835223, 0.1987878117526586], 'true,false': [nan, 0.19196403969091763], 'true,false,false': [0.182340829866002, 0.20080509305796462]}, {'': [0.2378899520423411, 0.2152766519602784], 'true': [0.23792950906211935, 0.2332647965278666], 'false': [nan, 0.21527665196027848], 'false,false': [0.2176499766860581, 0.0], 'false,false,true': [0.2235428523966547, 0.19226772640715414], 'false,false,false': [0.0, nan]}, {'': [0.23154472336978915, 0.21826931809037514], 'false': [0.21826931809037514, nan], 'false,true': [nan, 0.21826931809037514], 'false,true,false': [0.21885793164369582, 0.1990703027695864]}, {'': [0.22851142949984254, 0.22074243551048775], 'true': [0.2320738533959515, 0.18695345161611335], 'true,true': [0.23155636891708545, 0.22796074636076755], 'false': [0.22074243551048775, nan], 'false,true': [0.22074243551048775, nan], 'true,false': [0.010960765915511372, 0.19335584067776249]}, {'': [0.2290947287554674, 0.2198405071464625], 'false': [0.2150346294321816, 0.22086035339440976], 'false,false': [0.22086035339440976, nan], 'false,false,true': [0.22086035339440976, nan], 'false,true': [0.21905314503649273, 0.20031260545363735], 'false,true,false': [nan, 0.20031260545363735]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
0;false;follows(E, A), recursion_accounttype(E, B).;true;true
0;false,true;tweets(A, F).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, F), follows(F, A).;true;true
1;false,false;follows(G, A).;true;true
2;;accounttype(A, B) :- tweets(A, C), follows(A, D).;true;true
2;true;follows(D, E), recursion_accounttype(E, B).;true;true
2;true,false;follows(D, A).;true;true
3;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
3;false;follows(D, A), follows(A, D).;true;true
3;false,false;follows(A, E).;true;true
3;false,false,false;follows(F, A), recursion_accounttype(F, B).;true;true
4;;accounttype(A, B) :- tweets(A, C), follows(D, A).;true;true
4;true;follows(E, D), recursion_accounttype(E, B).;true;true
4;true,false;follows(A, D).;true;true
6;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
6;false;follows(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.6522665821583351;  // std dev = 2.358, 34.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=27 */
%   | | | else return 0.17633075328133055;  // std dev = 2.185, 22.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=7 */
%   | | else return 0.1914822684328457;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | else return 0.10814893509951228;  // std dev = 0.433, 28.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=7 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( tweets(A, G) )
%   | | then if ( follows(H, A), follows(A, H) )
%   | | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.274815601766179;  // std dev = 1.708, 12.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
%   | | else return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(I, A) )
%   | | then return 0.40814893509951233;  // std dev = 0.497, 20.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=11 */
%   | | else return 0.5854216623722396;  // std dev = 0.445, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E) )
%   | | then return 0.3211163518153726;  // std dev = 0.482, 65.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=34 */
%   | | else return 0.22130064131695465;  // std dev = 0.490, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | else return 0.48359185703800367;  // std dev = 0.450, 16.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=11 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.058753152121469844;  // std dev = 0.410, 14.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=3 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.3723161621260512;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=8 */
%   | | | else return 0.4008875906974797;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else if ( follows(I, A) )
%   | | then return -0.170059177877003;  // std dev = 0.036, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.17780077116908888;  // std dev = 1.633, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | | else return 0.498380757744019;  // std dev = 1.477, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), follows(A, D) )
%   then if ( follows(D, E), recursion_accounttype(E, B) )
%   | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( tweets(A, G), tweets(F, G) )
%   | | | then return 0.19000886642599807;  // std dev = 3.858, 68.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=29 */
%   | | | else return 0.5366919818892386;  // std dev = 1.213, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.3885992253194765;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.29722071928234567;  // std dev = 2.152, 19.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=11 */
%   | else return 0.12210389870040536;  // std dev = 0.454, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   else if ( tweets(A, I) )
%   | then return 0.15377328755049463;  // std dev = 0.478, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then if ( follows(A, K), follows(K, J) )
%   | | | then return 0.38183743667105324;  // std dev = 1.724, 14.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=9 */
%   | | | else return 0.047492516825143216;  // std dev = 1.212, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0.4886900632070392;  // std dev = 0.382, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0.2487306135239078;  // std dev = 0.468, 71.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=40 */
%   | | else return -0.27276414371266045;  // std dev = 0.059, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.05226160858622432;  // std dev = 0.425, 28.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=7 */
%   else if ( follows(F, A), follows(A, F) )
%   | then if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0.3513859482316678;  // std dev = 0.833, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.24454498377622189;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=8 */
%   | | | else return 0.22299344229848797;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else if ( follows(A, I) )
%   | | then return 0.32893756562502086;  // std dev = 0.434, 14.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=10 */
%   | | else if ( follows(J, A), recursion_accounttype(J, B) )
%   | | | then return 0.15953109405157623;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return -0.19652807374225903;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), follows(D, A) )
%   then if ( follows(E, D), recursion_accounttype(E, B) )
%   | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(G, A) )
%   | | | then return 0.20942726167741105;  // std dev = 3.691, 62.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=35 */
%   | | | else return -0.06189724555286718;  // std dev = 1.409, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
%   | | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 7.243060227893949E-4;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | | else return 0.1649175263949015;  // std dev = 1.883, 15.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
%   | else return -0.1777012168429973;  // std dev = 0.018, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( follows(I, A), recursion_accounttype(I, B) )
%   | then return 0.26130741931480933;  // std dev = 0.434, 16.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=11 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.09696860410789823;  // std dev = 0.454, 16.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=5 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.17581689071657894;  // std dev = 1.582, 11.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=7 */
%   | | | else return 0.329407694628741;  // std dev = 0.858, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( tweets(E, C), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E) )
%   | | | then return 0.07090964476433317;  // std dev = 3.542, 62.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=26 */
%   | | | else return 0.2503960829070538;  // std dev = 2.623, 33.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=22 */
%   | | else return -0.1906251877475958;  // std dev = 0.778, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0.10379993113502357;  // std dev = 0.493, 12.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
%   | | else return -0.031280610502381595;  // std dev = 0.931, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then if ( follows(H, A), follows(H, G) )
%   | | then if ( recursion_accounttype(H, B), follows(G, H) )
%   | | | then return 0.1290928159760304;  // std dev = 1.092, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.2561737141526008;  // std dev = 1.267, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | | else return -0.015334314248438109;  // std dev = 0.427, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else return 0.25423634691550034;  // std dev = 0.370, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E) )
%   | | then if ( recursion_accounttype(E, B), tweets(E, D) )
%   | | | then return 0.07717206604101004;  // std dev = 3.286, 52.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=25 */
%   | | | else return 0.22673134500160289;  // std dev = 1.455, 13.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=9 */
%   | | else return 0.06314747599425441;  // std dev = 0.490, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | else return 0.16076189488488657;  // std dev = 0.426, 16.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=11 */
%   else if ( follows(A, F) )
%   | then if ( follows(G, A) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return -0.24593117127389993;  // std dev = 0.908, 15.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   | | | else return 0.234284894021248;  // std dev = 2.071, 20.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=13 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.1641179344011631;  // std dev = 1.665, 12.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=7 */
%   | | | else return 0.07940984223201943;  // std dev = 1.323, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
%   | else return -0.186786396139623;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, D), follows(D, A) )
%   | | then return 0.2662284600825846;  // std dev = 0.401, 34.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=27 */
%   | | else if ( follows(A, E), follows(E, C) )
%   | | | then return -0.08255961891628227;  // std dev = 2.380, 32.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=11 */
%   | | | else return 0.10604118476837904;  // std dev = 2.166, 22.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=11 */
%   | else return -0.32659256242723506;  // std dev = 0.094, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), follows(G, A) )
%   | | then return -0.1965827050016657;  // std dev = 0.226, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   | | else return 0.18134378808896773;  // std dev = 0.463, 20.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=13 */
%   | else if ( tweets(A, H) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.10948862011875676;  // std dev = 1.649, 11.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=6 */
%   | | | else return -0.009815229558818573;  // std dev = 0.912, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else return 0.1542263567632478;  // std dev = 0.358, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A), follows(A, D) )
%   | | then return 0.20170048183829858;  // std dev = 0.401, 34.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=27 */
%   | | else if ( tweets(C, E), tweets(A, F) )
%   | | | then return -0.05735652421621194;  // std dev = 2.677, 38.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=12 */
%   | | | else return 0.12131731203711536;  // std dev = 1.763, 16.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=10 */
%   | else return -0.2599576035589229;  // std dev = 0.081, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), follows(H, A) )
%   | | then return -0.16289267255026346;  // std dev = 0.225, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   | | else return 0.14009731567075728;  // std dev = 0.462, 20.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=13 */
%   | else if ( tweets(A, I) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.08517898574131627;  // std dev = 1.647, 11.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=6 */
%   | | | else return -0.007648571978566554;  // std dev = 0.912, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else return 0.12431722121099179;  // std dev = 0.357, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, C), follows(D, A) )
%   | | then return 0.1546847338048967;  // std dev = 0.401, 34.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=27 */
%   | | else if ( follows(C, E), follows(D, E) )
%   | | | then return -0.04500409470233652;  // std dev = 2.878, 46.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=16 */
%   | | | else return 0.2460627924441869;  // std dev = 1.262, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | else return -0.24666813440549992;  // std dev = 0.029, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( follows(F, A) )
%   | then return -7.758573769726215E-4;  // std dev = 0.395, 36.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=14 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), follows(H, I) )
%   | | | then return 0.15982967534714973;  // std dev = 1.140, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return -0.09240813308476836;  // std dev = 0.898, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.024680404279250945;  // std dev = 1.423, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | | | else return 0.26506254655474487;  // std dev = 0.011, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */


Results
   AUC ROC   = 0.725427
   AUC PR    = 0.693434
   CLL	      = -0.614367
   Precision = 0.701613 at threshold = 0.5
   Recall    = 0.557692
   F1        = 0.621429


Total learning time: 16.134 seconds
Total inference time: 1.389 seconds
AUC ROC: 0.725427


Results scoring model
   AUC ROC   = 0.822222
   AUC PR    = 0.79446
   CLL	      = -0.530353
   Precision = 0.767123 at threshold = 0.5
   Recall    = 0.746667
   F1        = 0.756757


Total scoring time: 1.2 seconds
Refined model CLL: -0.530353


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.725427
   AUC PR    = 0.693434
   CLL	      = -0.614367
   Precision = 0.701613 at threshold = 0.5
   Recall    = 0.557692
   F1        = 0.621429


Total learning time: 19.904999999999998 seconds
Total inference time: 1.389 seconds
AUC ROC: 0.725427
Total revision time: 19.904999999999998
Best scored revision CLL: -0.530353


Dataset: 7_yeast_twitter, Fold: 1, Type: Transfer (trRDN-B), Time: 03:34:30
{'AUC ROC': 0.725427, 'AUC PR': 0.693434, 'CLL': -0.614367, 'Precision': [0.701613, 0.5], 'Recall': 0.557692, 'F1': 0.621429, 'Learning time': 19.904999999999998, 'Inference time': 1.389, 'parameter_0.6': {'AUC ROC': 0.672563, 'AUC PR': 0.653907, 'CLL': -0.657791, 'Precision': [0.633333, 0.5], 'Recall': 0.365385, 'F1': 0.463415, 'Learning time': 1.752, 'Inference time': 0.967}}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
0;false;interaction(D, A), interaction(D, D).;true;true
0;false,true;interaction(A, E), interaction(E, D).;true;true
0;false,true,true;interaction(A, A).;false;false
0;false,true,false;enzyme(A, F).;false;false
0;false,false;interaction(A, G), recursion_proteinclass(G, B).;true;true
0;false,false,true;complex(A, H).;false;false
0;false,false,false;interaction(I, A), interaction(J, I).;false;false
1;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
1;true;interaction(D, A), complex(A, E).;false;false
1;false;interaction(F, A), interaction(A, F).;true;true
1;false,true;enzyme(A, G), enzyme(F, G).;false;true
1;false,true,false;interaction(A, A).;false;false
1;false,false;interaction(A, H), enzyme(H, I).;true;true
1;false,false,true;phenotype(A, J), phenotype(H, K).;false;false
1;false,false,false;interaction(L, A), location(A, M).;false;false
2;;proteinclass(A, B) :- complex(A, C), interaction(D, A).;true;true
2;true;interaction(E, D), recursion_proteinclass(E, B).;false;true
2;true,false;interaction(A, D).;false;true
2;true,false,false;interaction(D, D), enzyme(A, F).;false;false
2;false;interaction(A, G), recursion_proteinclass(G, B).;false;true
2;false,false;interaction(A, H), interaction(H, H).;true;true
2;false,false,true;interaction(H, A).;false;false
2;false,false,false;phenotype(A, I), enzyme(A, J).;false;false
3;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
3;true;phenotype(C, D), enzyme(C, E).;false;false
3;false;interaction(A, F), interaction(F, A).;true;true
3;false,true;interaction(A, A).;false;true
3;false,true,false;enzyme(F, G), enzyme(A, G).;false;false
3;false,false;interaction(H, A), enzyme(H, I).;true;true
3;false,false,true;enzyme(A, I).;false;false
3;false,false,false;interaction(A, J), recursion_proteinclass(J, B).;false;false
4;;proteinclass(A, B) :- complex(A, C), interaction(A, D).;true;true
4;true;interaction(D, E), recursion_proteinclass(E, B).;false;true
4;true,false;interaction(D, A).;false;true
4;true,false,false;recursion_proteinclass(D, B).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;false;true
4;false,false;interaction(G, A), enzyme(G, H).;true;true
4;false,false,true;interaction(I, G), recursion_proteinclass(I, B).;false;false
4;false,false,false;phenotype(A, J), enzyme(A, K).;false;false
5;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
5;true;interaction(A, D), interaction(D, A).;true;true
5;true,true;interaction(C, D), interaction(A, C).;false;false
5;true,false;interaction(E, C), interaction(E, E).;false;true
5;true,false,false;enzyme(A, F), interaction(G, C).;false;false
5;false;interaction(A, H), recursion_proteinclass(H, B).;false;true
5;false,false;interaction(A, A).;false;true
5;false,false,false;interaction(A, I), enzyme(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
6;true;enzyme(C, D), phenotype(C, E).;true;true
6;true,true;enzyme(A, D).;false;false
6;true,false;interaction(C, F), interaction(F, A).;false;false
6;false;interaction(A, A).;false;true
6;false,false;interaction(G, A), enzyme(G, H).;true;true
6;false,false,true;interaction(I, G), phenotype(G, J).;false;false
6;false,false,false;interaction(A, K), enzyme(K, L).;false;false
7;;proteinclass(A, B) :- interaction(A, C), location(A, D).;false;true
7;false;interaction(E, A), complex(E, F).;true;true
7;false,true;interaction(E, E), enzyme(A, G).;true;true
7;false,true,true;interaction(E, H), recursion_proteinclass(H, B).;false;false
7;false,true,false;recursion_proteinclass(E, B).;false;false
7;false,false;complex(A, I), location(A, J).;true;true
7;false,false,true;complex(K, I), recursion_proteinclass(K, B).;false;false
7;false,false,false;interaction(L, A), recursion_proteinclass(L, B).;false;false
8;;proteinclass(A, B) :- interaction(C, A).;true;true
8;true;interaction(D, C), recursion_proteinclass(D, B).;true;true
8;true,true;interaction(D, A).;false;false
8;true,false;interaction(A, C).;false;true
8;true,false,false;enzyme(C, E), phenotype(A, F).;false;false
8;false;location(A, G).;true;false
8;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
8;false,true,true;interaction(H, I), interaction(A, I).;false;false
9;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
9;false;interaction(D, A), enzyme(D, E).;true;true
9;false,true;location(A, F), location(D, F).;true;true
9;false,true,true;interaction(G, D), recursion_proteinclass(G, B).;false;false
9;false,true,false;interaction(H, D), recursion_proteinclass(H, B).;false;false
9;false,false;phenotype(A, I), interaction(A, J).;true;true
9;false,false,true;interaction(J, K), recursion_proteinclass(K, B).;false;false
9;false,false,false;complex(A, L), location(A, M).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.31616420227508596;  // std dev = 5.703, 131.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=60 */
%   else if ( follows(A, D), follows(D, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.3819584589090361;  // std dev = 2.289, 21.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=11 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return 0.4463842292171589;  // std dev = 2.870, 34.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=20 */
%   | | | else return 0.44148226843284566;  // std dev = 1.708, 12.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), tweets(A, E) )
%   | then return 0.3507493004163517;  // std dev = 4.516, 82.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=44 */
%   | else return 0.36447724710672413;  // std dev = 2.870, 34.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=19 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.2298155528678419;  // std dev = 3.370, 47.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=20 */
%   | else if ( follows(G, A) )
%   | | then return -0.19139293423309445;  // std dev = 0.009, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.35127364925095184;  // std dev = 2.753, 31.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=17 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), follows(A, D) )
%   then if ( follows(D, E), recursion_accounttype(E, B) )
%   | then return 0.2552182951034088;  // std dev = 5.643, 129.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=64 */
%   | else if ( follows(D, A) )
%   | | then return -0.2435919486408612;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( follows(D, D) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.24133849734742965;  // std dev = 1.398, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.301276887577957;  // std dev = 2.866, 34.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=19 */
%   | else if ( follows(G, A), follows(G, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.22510307083357242;  // std dev = 0.486, 28.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=13 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1709331433520842;  // std dev = 0.493, 131.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=60 */
%   else if ( follows(D, A), follows(A, D) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.24774180182560554;  // std dev = 0.495, 31.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=17 */
%   | else if ( follows(A, E) )
%   | | then return 0.37504731975461053;  // std dev = 0.458, 23.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=16 */
%   | | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.21813844763071996;  // std dev = 1.797, 13.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
%   | | | else return -0.2100195469688444;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), follows(D, A) )
%   then if ( follows(E, D), recursion_accounttype(E, B) )
%   | then return 0.17053204590674456;  // std dev = 5.667, 131.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=66 */
%   | else if ( follows(A, D) )
%   | | then return -0.33027643350077157;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.22285990460436947;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return 0.0930174389176387;  // std dev = 3.015, 38.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=16 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.33071199834732795;  // std dev = 1.698, 15.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=11 */
%   | | | else return 0.19189611473877366;  // std dev = 1.669, 12.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=7 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(D, C), follows(C, A) )
%   | | then return 0.23160884475308505;  // std dev = 3.950, 65.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=39 */
%   | | else return -0.0016151190341611177;  // std dev = 3.301, 49.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=17 */
%   | else if ( follows(C, E), follows(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(C, F) )
%   | | | then return -0.0919341170844277;  // std dev = 1.193, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | | else return -0.06076560767149196;  // std dev = 1.193, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.13824288992896686;  // std dev = 2.318, 23.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=13 */
%   | else if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(H, A) )
%   | | | then return 0.13850248270485452;  // std dev = 2.523, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return 0.21765735164248454;  // std dev = 2.034, 19.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=13 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), follows(A, D) )
%   | then return 0.12425796457832387;  // std dev = 4.595, 87.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=47 */
%   | else return 0.13796228163996566;  // std dev = 2.605, 29.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=16 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.05074802217369762;  // std dev = 3.847, 66.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=29 */
%   | | | else return 0.06157596845223004;  // std dev = 1.852, 16.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=8 */
%   | | else if ( follows(G, A) )
%   | | | then return -0.226918665059682;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then return 0.06776162258179814;  // std dev = 6.276, 169.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=83 */
%   else if ( follows(A, D), tweets(D, E) )
%   | then if ( follows(D, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return -0.011164278938174224;  // std dev = 1.633, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | | else return 0.14933823393804876;  // std dev = 2.034, 19.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=13 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, D) )
%   | | then return 0.04985393370024492;  // std dev = 5.051, 108.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=52 */
%   | | else return 0.11385103225952788;  // std dev = 3.554, 55.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=32 */
%   | else if ( follows(C, A) )
%   | | then return -0.4009101037925256;  // std dev = 0.119, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.006419543664054364;  // std dev = 0.452, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
%   else if ( recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(F, A) )
%   | | then return 0.010895356778862962;  // std dev = 1.826, 15.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=7 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.026865547339163687;  // std dev = 5.500, 131.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=60 */
%   else if ( follows(A, D) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then return 0.0942281211988628;  // std dev = 3.022, 40.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=25 */
%   | | else if ( follows(D, F), recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.049597485711687254;  // std dev = 1.738, 14.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=8 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.008301439221159385;  // std dev = 1.826, 15.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.669399
   AUC PR    = 0.656109
   CLL	      = -0.65466
   Precision = 0.62963 at threshold = 0.5
   Recall    = 0.326923
   F1        = 0.43038


Total learning time: 1.655 seconds
Total inference time: 0.9 seconds
AUC ROC: 0.669399


Results scoring model
   AUC ROC   = 0.66875
   AUC PR    = 0.637856
   CLL	      = -0.651031
   Precision = 0.634615 at threshold = 0.5
   Recall    = 0.33
   F1        = 0.434211


Total scoring time: 0.841 seconds
Parameter learned model CLL: -0.651031


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, D)', 'false,false': 'follows(E, A), recursion_accounttype(E, B)', 'false,false,true': 'tweets(A, F)', 'false,false,false': 'follows(A, G), follows(G, H)'}, {'true': [5.703, 71, 60], 'false,true': [0.0, 0, 0], 'false,false,true,true': [2.289, 10, 11], 'false,false,true,false': [0.0, 0, 2], 'false,false,false,true': [2.87, 14, 20], 'false,false,false,false': [1.708, 5, 7]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(A, D), tweets(A, E)', 'false': 'follows(A, F), follows(F, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(G, A)', 'false,false,false': 'follows(A, H)'}, {'true,true': [4.516, 38, 44], 'true,false': [2.87, 15, 19], 'false,true,true': [0.0, 0, 0], 'false,true,false': [3.37, 27, 20], 'false,false,true': [0.009, 6, 0], 'false,false,false,true': [2.753, 14, 17], 'false,false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'tweets(A, C), follows(A, D)', 'true': 'follows(D, E), recursion_accounttype(E, B)', 'true,false': 'follows(D, A)', 'true,false,false': 'follows(D, D)', 'false': 'follows(F, A), recursion_accounttype(F, B)', 'false,false': 'follows(G, A), follows(G, G)'}, {'true,true': [5.643, 65, 64], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [1.398, 4, 4], 'false,true': [2.866, 15, 19], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.486, 15, 13]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A), follows(A, D)', 'false,true': 'follows(A, A)', 'false,false': 'follows(A, E)', 'false,false,false': 'follows(F, A), recursion_accounttype(F, B)'}, {'true': [0.493, 71, 60], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.495, 14, 17], 'false,false,true': [0.458, 7, 16], 'false,false,false,true': [1.797, 6, 7], 'false,false,false,false': [0.0, 2, 0]}], ['accounttype(A, B)', {'': 'tweets(A, C), follows(D, A)', 'true': 'follows(E, D), recursion_accounttype(E, B)', 'true,false': 'follows(A, D)', 'true,false,false': 'recursion_accounttype(D, B)', 'false': 'follows(A, F), recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [5.667, 65, 66], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [0.0, 3, 0], 'false,true': [3.015, 22, 16], 'false,false,true,true': [1.698, 4, 11], 'false,false,true,false': [1.669, 5, 7], 'false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(D, C), follows(C, A)', 'true,false': 'follows(C, E), follows(E, E)', 'true,false,false': 'follows(C, F)', 'false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false': 'follows(A, A)', 'false,false,false': 'follows(H, A)'}, {'true,true,true': [3.95, 26, 39], 'true,true,false': [3.301, 32, 17], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.193, 8, 2], 'true,false,false,false': [1.193, 5, 2], 'false,true': [2.318, 10, 13], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [2.523, 13, 14], 'false,false,false,false': [2.034, 6, 13]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), follows(A, D)', 'false': 'follows(A, A)', 'false,false': 'follows(A, E)', 'false,false,true': 'follows(E, F)', 'false,false,false': 'follows(G, A)'}, {'true,true': [4.595, 40, 47], 'true,false': [2.605, 13, 16], 'false,true': [0.0, 0, 0], 'false,false,true,true': [3.847, 37, 29], 'false,false,true,false': [1.852, 8, 8], 'false,false,false,true': [0.0, 2, 0], 'false,false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(C, A)', 'false': 'follows(A, D), tweets(D, E)', 'false,true': 'follows(D, D)', 'false,true,false': 'recursion_accounttype(D, B)'}, {'true': [6.276, 86, 83], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [1.633, 8, 4], 'false,true,false,false': [2.034, 6, 13], 'false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'true,true': 'follows(A, D)', 'true,false': 'follows(C, A)', 'false': 'recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(F, A)'}, {'true,true,true': [5.051, 56, 52], 'true,true,false': [3.554, 23, 32], 'true,false,true': [0.119, 3, 0], 'true,false,false': [0.452, 10, 9], 'false,true,true': [1.826, 8, 7], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(A, D)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,false': 'follows(D, F), recursion_accounttype(F, B)', 'false,false': 'follows(G, A)', 'false,false,true': 'follows(H, G), recursion_accounttype(H, B)'}, {'true': [5.5, 71, 60], 'false,true,true': [3.022, 15, 25], 'false,true,false,true': [0.0, 0, 0], 'false,true,false,false': [1.738, 6, 8], 'false,false,true,true': [1.826, 8, 7], 'false,false,true,false': [0.0, 0, 0], 'false,false,false': [0.0, 0, 0]}]]
[{'': [0.24823728220966132, 0.24364629279563246], 'false': [nan, 0.24364629279563246], 'false,false': [0.24574669187145518, 0.2424385633270317], 'false,false,true': [0.2494331065759633, 0.0], 'false,false,false': [0.24221453287197228, 0.24305555555555544]}, {'': [0.24686962953310138, 0.24331310832684105], 'true': [0.24874277100089043, 0.24221883378758963], 'false': [0.24163574115427788, 0.24481746178249575], 'false,false': [8.565286021592251e-05, 0.2444302566441524], 'false,false,false': [0.2444302566441524, nan], 'false,true': [nan, 0.24163574115427788]}, {'': [0.24673490363464215, 0.24048794074468968], 'true': [0.2468887094826134, 0.24023825440997204], 'false': [0.24153197271573276, 0.23603819873131984], 'true,false': [0.0, 0.24413942093939606], 'true,false,false': [nan, 0.24413942093939606], 'false,false': [nan, 0.23603819873131984]}, {'': [0.24330663485486845, 0.23775785260740978], 'false': [0.24475286878269684, 0.23122711516626315], 'false,true': [nan, 0.24475286878269684], 'false,false': [0.2096670202861441, 0.2365681752816268], 'false,false,false': [0.24852071005917173, 0.0]}, {'': [0.24305619541670667, 0.23653549956623332], 'true': [0.24517890641813198, 0.002163433252528428], 'false': [0.23918724735435845, 0.21469464973374183], 'false,false': [0.21469464973374183, nan], 'false,false,true': [0.19224800680600782, 0.23204748142561818], 'true,false': [0.0, -9.25185853854297e-18], 'true,false,false': [nan, -9.25185853854297e-18]}, {'': [0.24062566606883598, 0.23131312316584185], 'true': [0.24576177922069725, 0.1676368085233112], 'true,true': [0.24000220778732292, 0.2223882364834514], 'false': [0.23355776795021962, 0.22982881217458145], 'false,false': [nan, 0.22982881217458168], 'false,false,false': [0.23569560364793574, 0.21781422057187244], 'true,false': [nan, 0.16763680852331123], 'true,false,false': [0.14227684073041147, 0.20329387748348987]}, {'': [0.24054444935233768, 0.21886812621106233], 'true': [0.24265688708824126, 0.23406627991503193], 'false': [nan, 0.21886812621106233], 'false,false': [0.22234264593722658, 0.0], 'false,false,true': [0.22427035999623077, 0.21429645798334296], 'false,false,false': [0.0, nan]}, {'': [0.23306383190164484, 0.22559800526942528], 'false': [0.22559800526942528, nan], 'false,true': [nan, 0.22559800526942528], 'false,true,false': [0.22230083655347854, 0.21770840569133934]}, {'': [0.2319504054664824, 0.22224118214214955], 'true': [0.23494276517887128, 0.19697062053448497], 'true,true': [0.23624301267722167, 0.22967588386402876], 'false': [0.22224118214214955, nan], 'false,true': [0.22224118214214955, nan], 'true,false': [0.004752980471855961, 0.20469566854261587]}, {'': [0.23091216158229502, 0.22563796654551188], 'false': [0.22539479912497223, 0.22218649678424854], 'false,true': [0.22823709078647897, 0.2157984890478708], 'false,false': [0.22218649678424854, nan], 'false,false,true': [0.22218649678424854, nan], 'false,true,false': [nan, 0.2157984890478708]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
0;false;follows(E, A), recursion_accounttype(E, B).;true;true
0;false,true;tweets(A, F).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, F), follows(F, A).;true;true
1;false,false;follows(G, A).;true;true
2;;accounttype(A, B) :- tweets(A, C), follows(A, D).;true;true
2;true;follows(D, E), recursion_accounttype(E, B).;true;true
2;true,false;follows(D, A).;true;true
3;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
3;false;follows(D, A), follows(A, D).;true;true
3;false,false;follows(A, E).;true;true
3;false,false,false;follows(F, A), recursion_accounttype(F, B).;true;true
4;;accounttype(A, B) :- tweets(A, C), follows(D, A).;true;true
4;true;follows(E, D), recursion_accounttype(E, B).;true;true
4;true,false;follows(A, D).;true;true
6;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
6;false;follows(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return 0.47243464938522706;  // std dev = 0.487, 70.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=43 */
%   | | else return 0.16249676118646889;  // std dev = 0.460, 23.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=7 */
%   | else return 0.12130682983635446;  // std dev = 0.440, 38.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=10 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( tweets(A, G) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.3581489350995123;  // std dev = 1.414, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | else return 0.3966104735610508;  // std dev = 1.797, 13.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
%   | | else return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(I, A) )
%   | | then if ( follows(I, J), follows(J, A) )
%   | | | then return 0.13087620782678497;  // std dev = 1.477, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | | | else return 0.5456489350995123;  // std dev = 1.854, 16.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=11 */
%   | | else return 0.5423594614153018;  // std dev = 0.465, 19.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=13 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | | then return 0.3789571187830723;  // std dev = 4.051, 69.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=40 */
%   | | | else return -0.20021091268045793;  // std dev = 0.042, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( follows(A, G), follows(G, A) )
%   | | | then return 0.20874113578563502;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.36634994149292527;  // std dev = 1.985, 16.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=9 */
%   | else return 0.3751465415285828;  // std dev = 0.485, 21.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=12 */
%   else if ( follows(A, H), follows(H, A) )
%   | then return 0.246001190100429;  // std dev = 0.484, 47.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=20 */
%   | else if ( follows(I, A) )
%   | | then return -0.15769273985373422;  // std dev = 0.001, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.17606474108263495;  // std dev = 1.633, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | | else return 0.4628301985635589;  // std dev = 2.026, 19.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=13 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), follows(A, D) )
%   then if ( follows(D, E), recursion_accounttype(E, B) )
%   | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(G, A) )
%   | | | then return 0.33115855344503464;  // std dev = 3.880, 65.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=39 */
%   | | | else return 0.06212329605967607;  // std dev = 1.677, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
%   | | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.0964994295073963;  // std dev = 2.232, 25.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=7 */
%   | | | else return 0.3085039129252287;  // std dev = 2.439, 25.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=14 */
%   | else return 0.1939274328281683;  // std dev = 0.458, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   else if ( follows(A, I), recursion_accounttype(I, B) )
%   | then if ( follows(J, I), follows(J, A) )
%   | | then if ( recursion_accounttype(J, B), follows(I, A) )
%   | | | then return 0.5549346931384167;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.17884572499300083;  // std dev = 1.904, 15.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=6 */
%   | | else return 0.021879024856141915;  // std dev = 0.416, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else return 0.31851062357344645;  // std dev = 0.473, 32.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=19 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then return 0.23926171523695008;  // std dev = 0.480, 89.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=50 */
%   | | else return -0.21455438897879991;  // std dev = 0.061, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.06336096179501874;  // std dev = 0.438, 38.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=10 */
%   else if ( follows(F, A), follows(A, F) )
%   | then if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0.18641393953890098;  // std dev = 1.170, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.28728625071430963;  // std dev = 2.071, 19.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=11 */
%   | | | else return 0.16593116643280403;  // std dev = 1.225, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else if ( follows(A, I) )
%   | | then return 0.32871396894721927;  // std dev = 0.460, 23.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=16 */
%   | | else if ( follows(J, A), recursion_accounttype(J, B) )
%   | | | then return 0.21074454058178;  // std dev = 1.797, 13.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
%   | | | else return -0.1811899931465999;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), follows(D, A) )
%   then if ( follows(E, D), recursion_accounttype(E, B) )
%   | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.18926564164403076;  // std dev = 4.589, 90.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=51 */
%   | | | else return -0.18076874985050254;  // std dev = 0.053, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.12073187269720768;  // std dev = 0.458, 37.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=15 */
%   | else return -0.18752880887788476;  // std dev = 0.052, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( follows(A, H), recursion_accounttype(H, B) )
%   | then if ( follows(A, I), follows(I, J) )
%   | | then if ( follows(H, J), follows(J, H) )
%   | | | then return 0.1170699344341266;  // std dev = 2.453, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.5298863115074313;  // std dev = 0.881, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return -0.03788349442432322;  // std dev = 0.924, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | else if ( tweets(A, K) )
%   | | then return 0.1506401859417861;  // std dev = 0.494, 10.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=6 */
%   | | else return 0.2703031964746792;  // std dev = 0.440, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A) )
%   | then if ( follows(C, D), follows(D, A) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.357068927612899;  // std dev = 2.389, 38.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=31 */
%   | | | else return -0.026558524217349215;  // std dev = 2.614, 30.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=12 */
%   | | else if ( tweets(C, E), tweets(A, F) )
%   | | | then return -0.18197720748728802;  // std dev = 0.938, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   | | | else return 0.19386025970109103;  // std dev = 1.695, 12.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=6 */
%   | else return 0.005716554351148747;  // std dev = 0.420, 41.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=10 */
%   else if ( follows(A, G) )
%   | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | then if ( follows(G, H), tweets(A, I) )
%   | | | then return 0.16188345269836737;  // std dev = 2.680, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   | | | else return 0.31011427799648905;  // std dev = 1.722, 20.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=16 */
%   | | else return -0.44189572686424783;  // std dev = 0.145, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.07878244018964171;  // std dev = 0.474, 15.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=7 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( tweets(E, D), follows(E, A) )
%   | | then if ( follows(F, A), follows(F, E) )
%   | | | then return 0.1085612674858649;  // std dev = 4.116, 78.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=45 */
%   | | | else return -0.043650989649981535;  // std dev = 1.356, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | | else return 0.17245687768631413;  // std dev = 1.013, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.11884716083208928;  // std dev = 0.450, 21.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=12 */
%   else if ( follows(A, G) )
%   | then if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I), tweets(H, I) )
%   | | | then return -0.018208287225378452;  // std dev = 1.934, 24.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=5 */
%   | | | else return 0.11312670046986237;  // std dev = 1.737, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
%   | | else if ( tweets(A, J), follows(K, A) )
%   | | | then return 0.1656270106186328;  // std dev = 2.029, 19.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=11 */
%   | | | else return 0.10350353194558512;  // std dev = 2.228, 25.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=16 */
%   | else return -0.18392449086893578;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), tweets(C, D) )
%   then if ( follows(C, E), follows(E, A) )
%   | then if ( recursion_accounttype(E, B), recursion_accounttype(C, B) )
%   | | then return 0.18486922272559553;  // std dev = 0.426, 49.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=36 */
%   | | else return -0.07691450873727125;  // std dev = 0.428, 63.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=20 */
%   | else if ( tweets(A, F), recursion_accounttype(C, B) )
%   | | then return -0.11578286122603332;  // std dev = 0.359, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | | else if ( follows(A, C), tweets(A, G) )
%   | | | then return 0.2925241694131186;  // std dev = 1.925, 19.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=13 */
%   | | | else return 0.07597703811367412;  // std dev = 2.208, 24.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=11 */
%   else if ( follows(A, H), follows(H, I) )
%   | then if ( follows(A, J), follows(J, H) )
%   | | then return 0.3428378845691598;  // std dev = 1.030, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( tweets(A, K), tweets(H, K) )
%   | | | then return -0.0952015580645553;  // std dev = 1.331, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.39127651346782616;  // std dev = 0.054, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.06451376242930588;  // std dev = 0.405, 16.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(C, A), tweets(C, D) )
%   then if ( follows(C, E), follows(E, A) )
%   | then if ( recursion_accounttype(E, B), recursion_accounttype(C, B) )
%   | | then return 0.14008881053730302;  // std dev = 0.426, 49.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=36 */
%   | | else if ( recursion_accounttype(E, B), tweets(A, D) )
%   | | | then return 0.029909943976588572;  // std dev = 2.670, 31.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=14 */
%   | | | else return -0.1461960860995115;  // std dev = 1.986, 32.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=6 */
%   | else if ( tweets(A, F), recursion_accounttype(C, B) )
%   | | then return -0.09384779456227077;  // std dev = 0.359, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | | else if ( follows(A, G), follows(G, C) )
%   | | | then return 0.21965005446132138;  // std dev = 2.160, 22.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=14 */
%   | | | else return 0.04251470290424131;  // std dev = 1.963, 21.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=10 */
%   else if ( follows(A, H), follows(H, I) )
%   | then if ( follows(A, I) )
%   | | then return 0.24447195550524678;  // std dev = 0.430, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | | else return -2.5721618827676294E-4;  // std dev = 0.424, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | else return 0.05085844568139057;  // std dev = 0.404, 16.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=8 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), tweets(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.013181110700499094;  // std dev = 0.419, 82.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=37 */
%   | | else return -0.26102533630402347;  // std dev = 0.109, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( tweets(A, F), follows(C, A) )
%   | | then return 0.2955438531637087;  // std dev = 0.318, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else if ( follows(G, A), follows(G, C) )
%   | | | then return 0.0684229122121776;  // std dev = 2.134, 23.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=12 */
%   | | | else return -0.05116345621183607;  // std dev = 1.430, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   else if ( follows(A, H) )
%   | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | then if ( tweets(A, J), follows(H, I) )
%   | | | then return 0.06860828351531789;  // std dev = 2.617, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   | | | else return 0.17537862479957758;  // std dev = 1.685, 20.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=16 */
%   | | else return -0.3759625942235536;  // std dev = 0.180, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.004992434071956268;  // std dev = 0.473, 15.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=7 */


Results
   AUC ROC   = 0.758958
   AUC PR    = 0.751319
   CLL	      = -0.602266
   Precision = 0.741071 at threshold = 0.5
   Recall    = 0.532051
   F1        = 0.619403


Total learning time: 27.834 seconds
Total inference time: 1.698 seconds
AUC ROC: 0.758958


Results scoring model
   AUC ROC   = 0.81845
   AUC PR    = 0.807266
   CLL	      = -0.549592
   Precision = 0.752809 at threshold = 0.5
   Recall    = 0.67
   F1        = 0.708995


Total scoring time: 1.395 seconds
Refined model CLL: -0.549592


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.758958
   AUC PR    = 0.751319
   CLL	      = -0.602266
   Precision = 0.741071 at threshold = 0.5
   Recall    = 0.532051
   F1        = 0.619403


Total learning time: 31.724999999999998 seconds
Total inference time: 1.698 seconds
AUC ROC: 0.758958
Total revision time: 31.724999999999998
Best scored revision CLL: -0.549592


Dataset: 7_yeast_twitter, Fold: 1, Type: Transfer (trRDN-B), Time: 03:35:05
{'AUC ROC': 0.758958, 'AUC PR': 0.751319, 'CLL': -0.602266, 'Precision': [0.741071, 0.5], 'Recall': 0.532051, 'F1': 0.619403, 'Learning time': 31.724999999999998, 'Inference time': 1.698, 'parameter_0.8': {'AUC ROC': 0.669399, 'AUC PR': 0.656109, 'CLL': -0.65466, 'Precision': [0.62963, 0.5], 'Recall': 0.326923, 'F1': 0.43038, 'Learning time': 1.655, 'Inference time': 0.9}}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
0;false;interaction(D, A), interaction(D, D).;true;true
0;false,true;interaction(A, E), interaction(E, D).;true;true
0;false,true,true;interaction(A, A).;false;false
0;false,true,false;enzyme(A, F).;false;false
0;false,false;interaction(A, G), recursion_proteinclass(G, B).;true;true
0;false,false,true;complex(A, H).;false;false
0;false,false,false;interaction(I, A), interaction(J, I).;false;false
1;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
1;true;interaction(D, A), complex(A, E).;false;false
1;false;interaction(F, A), interaction(A, F).;true;true
1;false,true;enzyme(A, G), enzyme(F, G).;false;true
1;false,true,false;interaction(A, A).;false;false
1;false,false;interaction(A, H), enzyme(H, I).;true;true
1;false,false,true;phenotype(A, J), phenotype(H, K).;false;false
1;false,false,false;interaction(L, A), location(A, M).;false;false
2;;proteinclass(A, B) :- complex(A, C), interaction(D, A).;true;true
2;true;interaction(E, D), recursion_proteinclass(E, B).;false;true
2;true,false;interaction(A, D).;false;true
2;true,false,false;interaction(D, D), enzyme(A, F).;false;false
2;false;interaction(A, G), recursion_proteinclass(G, B).;false;true
2;false,false;interaction(A, H), interaction(H, H).;true;true
2;false,false,true;interaction(H, A).;false;false
2;false,false,false;phenotype(A, I), enzyme(A, J).;false;false
3;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
3;true;phenotype(C, D), enzyme(C, E).;false;false
3;false;interaction(A, F), interaction(F, A).;true;true
3;false,true;interaction(A, A).;false;true
3;false,true,false;enzyme(F, G), enzyme(A, G).;false;false
3;false,false;interaction(H, A), enzyme(H, I).;true;true
3;false,false,true;enzyme(A, I).;false;false
3;false,false,false;interaction(A, J), recursion_proteinclass(J, B).;false;false
4;;proteinclass(A, B) :- complex(A, C), interaction(A, D).;true;true
4;true;interaction(D, E), recursion_proteinclass(E, B).;false;true
4;true,false;interaction(D, A).;false;true
4;true,false,false;recursion_proteinclass(D, B).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;false;true
4;false,false;interaction(G, A), enzyme(G, H).;true;true
4;false,false,true;interaction(I, G), recursion_proteinclass(I, B).;false;false
4;false,false,false;phenotype(A, J), enzyme(A, K).;false;false
5;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
5;true;interaction(A, D), interaction(D, A).;true;true
5;true,true;interaction(C, D), interaction(A, C).;false;false
5;true,false;interaction(E, C), interaction(E, E).;false;true
5;true,false,false;enzyme(A, F), interaction(G, C).;false;false
5;false;interaction(A, H), recursion_proteinclass(H, B).;false;true
5;false,false;interaction(A, A).;false;true
5;false,false,false;interaction(A, I), enzyme(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
6;true;enzyme(C, D), phenotype(C, E).;true;true
6;true,true;enzyme(A, D).;false;false
6;true,false;interaction(C, F), interaction(F, A).;false;false
6;false;interaction(A, A).;false;true
6;false,false;interaction(G, A), enzyme(G, H).;true;true
6;false,false,true;interaction(I, G), phenotype(G, J).;false;false
6;false,false,false;interaction(A, K), enzyme(K, L).;false;false
7;;proteinclass(A, B) :- interaction(A, C), location(A, D).;false;true
7;false;interaction(E, A), complex(E, F).;true;true
7;false,true;interaction(E, E), enzyme(A, G).;true;true
7;false,true,true;interaction(E, H), recursion_proteinclass(H, B).;false;false
7;false,true,false;recursion_proteinclass(E, B).;false;false
7;false,false;complex(A, I), location(A, J).;true;true
7;false,false,true;complex(K, I), recursion_proteinclass(K, B).;false;false
7;false,false,false;interaction(L, A), recursion_proteinclass(L, B).;false;false
8;;proteinclass(A, B) :- interaction(C, A).;true;true
8;true;interaction(D, C), recursion_proteinclass(D, B).;true;true
8;true,true;interaction(D, A).;false;false
8;true,false;interaction(A, C).;false;true
8;true,false,false;enzyme(C, E), phenotype(A, F).;false;false
8;false;location(A, G).;true;false
8;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
8;false,true,true;interaction(H, I), interaction(A, I).;false;false
9;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
9;false;interaction(D, A), enzyme(D, E).;true;true
9;false,true;location(A, F), location(D, F).;true;true
9;false,true,true;interaction(G, D), recursion_proteinclass(G, B).;false;false
9;false,true,false;interaction(H, D), recursion_proteinclass(H, B).;false;false
9;false,false;phenotype(A, I), interaction(A, J).;true;true
9;false,false,true;interaction(J, K), recursion_proteinclass(K, B).;false;false
9;false,false,false;complex(A, L), location(A, M).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.41979277071594934;  // std dev = 5.995, 146.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=82 */
%   else if ( follows(D, A), follows(D, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.10139217834275562;  // std dev = 2.610, 37.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=9 */
%   | | | else return 0.058148935099512224;  // std dev = 1.549, 15.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=3 */
%   | | else if ( follows(G, A), follows(H, G) )
%   | | | then return 0.35814893509951234;  // std dev = 2.739, 30.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
%   | | | else return 0.5664822684328457;  // std dev = 2.227, 24.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=17 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then return 0.2925041330813305;  // std dev = 5.468, 122.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=59 */
%   | else return 0.2008592850145284;  // std dev = 3.302, 48.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=18 */
%   else if ( follows(F, A), follows(A, F) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.34691811683954826;  // std dev = 3.031, 37.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=20 */
%   | else if ( follows(A, G) )
%   | | then return 0.5028113584735666;  // std dev = 0.448, 29.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=21 */
%   | | else if ( follows(H, A) )
%   | | | then return 0.3002388870767963;  // std dev = 1.995, 16.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=8 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), follows(D, A) )
%   then if ( follows(E, D), recursion_accounttype(E, B) )
%   | then return 0.2629671677628552;  // std dev = 6.331, 163.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=83 */
%   | else if ( follows(A, D) )
%   | | then return -0.22445019073414968;  // std dev = 0.039, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( follows(D, D) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1921103230630107;  // std dev = 1.066, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return 0.17020890765277719;  // std dev = 3.296, 48.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=18 */
%   | else if ( follows(A, G), follows(G, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.37134120973829915;  // std dev = 0.464, 34.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=23 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.26032796821622345;  // std dev = 0.495, 146.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.11733524039839735;  // std dev = 0.477, 57.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=22 */
%   | else if ( follows(E, A) )
%   | | then return -0.10077023079903649;  // std dev = 0.357, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.015406295845126242;  // std dev = 1.762, 18.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=4 */
%   | | | else return 0.2972200826599653;  // std dev = 2.227, 24.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=17 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), follows(A, D) )
%   then if ( follows(D, E), recursion_accounttype(E, B) )
%   | then return 0.16279370294582923;  // std dev = 6.335, 167.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=84 */
%   | else if ( follows(D, A) )
%   | | then return -0.362528157515216;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return -0.21213007925341743;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.2504113777006146;  // std dev = 1.172, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.24602725439483608;  // std dev = 3.044, 39.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=23 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.08104920865537836;  // std dev = 1.738, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
%   | | | else return -0.2975112972714506;  // std dev = 0.136, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.12421637169974432;  // std dev = 0.437, 18.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=9 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(C, D), follows(A, C) )
%   | | then return 0.20736023574829507;  // std dev = 4.536, 86.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=52 */
%   | | else return 0.0408924606424754;  // std dev = 3.049, 39.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=17 */
%   | else if ( follows(E, C), follows(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, C) )
%   | | | then return 0.1662381173559283;  // std dev = 2.167, 20.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=12 */
%   | | | else return 0.6159684660758524;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return -0.023867281045229085;  // std dev = 3.022, 52.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=12 */
%   | else if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, H) )
%   | | | then return 0.17855105598059026;  // std dev = 3.428, 52.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=32 */
%   | | | else return -0.28938639396283955;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, A) )
%   | then return 0.11594366082653218;  // std dev = 5.311, 118.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=63 */
%   | else return -0.020300666366878807;  // std dev = 3.081, 52.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=14 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A) )
%   | | then if ( follows(F, E) )
%   | | | then return 0.12551693030157873;  // std dev = 3.684, 58.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G) )
%   | | | then return 0.13888392799130841;  // std dev = 2.224, 24.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=17 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then return 0.07207260601084996;  // std dev = 7.283, 236.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=118 */
%   else if ( follows(D, A), tweets(D, E) )
%   | then if ( follows(D, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.0761511570290763;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=8 */
%   | | | else return -0.2568824803587532;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(D, A) )
%   | | then return 0.0943606645703372;  // std dev = 5.242, 114.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=67 */
%   | | else return 0.018696316853407592;  // std dev = 4.382, 86.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=36 */
%   | else if ( follows(A, C) )
%   | | then return -0.3158358458324081;  // std dev = 0.131, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.05352325073412726;  // std dev = 0.400, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   else if ( recursion_accounttype(E, B) )
%   | then if ( follows(E, F), follows(A, F) )
%   | | then return 0.09862455427174076;  // std dev = 2.572, 39.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=21 */
%   | | else return -0.6208613799603663;  // std dev = 0.024, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.05899741895384082;  // std dev = 5.903, 146.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=82 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0.015746713710539702;  // std dev = 3.486, 56.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=22 */
%   | | else if ( follows(F, D), recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11769846897349509;  // std dev = 0.933, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.06377046910907622;  // std dev = 2.071, 21.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=11 */
%   | | | else return 0.014261044080857826;  // std dev = 1.763, 21.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.727153
   AUC PR    = 0.714176
   CLL	      = -0.624994
   Precision = 0.703704 at threshold = 0.5
   Recall    = 0.608974
   F1        = 0.652921


Total learning time: 2.17 seconds
Total inference time: 0.99 seconds
AUC ROC: 0.727153


Results scoring model
   AUC ROC   = 0.707105
   AUC PR    = 0.688619
   CLL	      = -0.632
   Precision = 0.635036 at threshold = 0.5
   Recall    = 0.690476
   F1        = 0.661597


Total scoring time: 0.886 seconds
Parameter learned model CLL: -0.632


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(D, A), follows(D, D)', 'false,false': 'follows(A, E), recursion_accounttype(E, B)', 'false,false,true': 'tweets(A, F)', 'false,false,false': 'follows(G, A), follows(H, G)'}, {'true': [5.995, 64, 82], 'false,true': [0.0, 0, 0], 'false,false,true,true': [2.61, 28, 9], 'false,false,true,false': [1.549, 12, 3], 'false,false,false,true': [2.739, 15, 15], 'false,false,false,false': [2.227, 7, 17]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), tweets(A, E)', 'false': 'follows(F, A), follows(A, F)', 'false,true': 'follows(A, A)', 'false,false': 'follows(A, G)', 'false,false,false': 'follows(H, A)'}, {'true,true': [5.468, 63, 59], 'true,false': [3.302, 30, 18], 'false,true,true': [0.0, 0, 0], 'false,true,false': [3.031, 17, 20], 'false,false,true': [0.448, 8, 21], 'false,false,false,true': [1.995, 8, 8], 'false,false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'tweets(A, C), follows(D, A)', 'true': 'follows(E, D), recursion_accounttype(E, B)', 'true,false': 'follows(A, D)', 'true,false,false': 'follows(D, D)', 'false': 'follows(A, F), recursion_accounttype(F, B)', 'false,false': 'follows(A, G), follows(G, G)'}, {'true,true': [6.331, 80, 83], 'true,false,true': [0.039, 2, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [1.066, 3, 2], 'false,true': [3.296, 30, 18], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.464, 11, 23]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A)', 'false,false,false': 'follows(A, F), recursion_accounttype(F, B)'}, {'true': [0.495, 64, 82], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.477, 35, 22], 'false,false,true': [0.357, 6, 1], 'false,false,false,true': [1.762, 14, 4], 'false,false,false,false': [2.227, 7, 17]}], ['accounttype(A, B)', {'': 'tweets(A, C), follows(A, D)', 'true': 'follows(D, E), recursion_accounttype(E, B)', 'true,false': 'follows(D, A)', 'true,false,false': 'recursion_accounttype(D, B)', 'false': 'follows(F, A), recursion_accounttype(F, B)', 'false,false': 'follows(G, A)', 'false,false,true': 'follows(H, G), recursion_accounttype(H, B)'}, {'true,true': [6.335, 83, 84], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [0.0, 3, 0], 'true,false,false,false': [1.172, 2, 5], 'false,true': [3.044, 16, 23], 'false,false,true,true': [1.738, 9, 5], 'false,false,true,false': [0.136, 3, 0], 'false,false,false': [0.437, 9, 9]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(A, D), follows(D, A)', 'true,true': 'follows(C, D), follows(A, C)', 'true,false': 'follows(E, C), follows(E, E)', 'true,false,false': 'follows(F, C)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(A, A)', 'false,false,false': 'follows(A, H)'}, {'true,true,true': [4.536, 34, 52], 'true,true,false': [3.049, 22, 17], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [2.167, 8, 12], 'true,false,false,false': [0.0, 0, 1], 'false,true': [3.022, 40, 12], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [3.428, 20, 32], 'false,false,false,false': [0.0, 2, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), follows(D, A)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A)', 'false,false,true': 'follows(F, E)', 'false,false,false': 'follows(A, G)'}, {'true,true': [5.311, 55, 63], 'true,false': [3.081, 38, 14], 'false,true': [0.0, 0, 0], 'false,false,true,true': [3.684, 26, 32], 'false,false,true,false': [0.0, 0, 0], 'false,false,false,true': [2.224, 7, 17], 'false,false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'false': 'follows(D, A), tweets(D, E)', 'false,true': 'follows(D, D)', 'false,true,false': 'recursion_accounttype(D, B)'}, {'true': [7.283, 118, 118], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [1.852, 6, 8], 'false,true,false,false': [0.0, 2, 0], 'false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(D, A)', 'true,false': 'follows(A, C)', 'false': 'recursion_accounttype(E, B)', 'false,true': 'follows(E, F), follows(A, F)'}, {'true,true,true': [5.242, 47, 67], 'true,true,false': [4.382, 50, 36], 'true,false,true': [0.131, 4, 0], 'true,false,false': [0.4, 4, 2], 'false,true,true': [2.572, 18, 21], 'false,true,false': [0.024, 3, 0], 'false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'follows(F, D), recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true': [5.903, 64, 82], 'false,true,true': [3.486, 34, 22], 'false,true,false,true': [0.0, 0, 0], 'false,true,false,false': [0.933, 7, 1], 'false,false,true,true': [2.071, 10, 11], 'false,false,true,false': [1.763, 11, 10], 'false,false,false': [0.0, 0, 0]}]]
[{'': [0.2462000375304948, 0.24279102883588533], 'false': [nan, 0.24279102883588533], 'false,false': [0.17751479289940775, 0.24142661179698366], 'false,false,false': [0.24999999999999953, 0.2065972222222218], 'false,false,true': [0.18407596785975178, 0.15999999999999986]}, {'': [0.24172984748561882, 0.23839195586765258], 'true': [0.24509851312938952, 0.22714046385113137], 'false': [0.24830286676326532, 0.22706921799921403], 'false,true': [nan, 0.24830286676326532], 'false,false': [0.20049174470152004, 0.24879571993203817], 'false,false,false': [0.24879571993203817, nan]}, {'': [0.24537489069180743, 0.23152214984328684], 'true': [0.24592729302302482, 0.19794412275223824], 'false': [0.22627573630499898, 0.21524834226975575], 'false,false': [nan, 0.21524834226975575], 'true,false': [0.0007618072700720652, 0.2272391456151178], 'true,false,false': [nan, 0.2272391456151178]}, {'': [0.24458441355484242, 0.21899151391611482], 'false': [0.2275331723206399, 0.20885070644614503], 'false,true': [nan, 0.2275331723206399], 'false,false': [0.12770312153481356, 0.21139715618810295], 'false,false,false': [0.1724147764632275, 0.2065972222222223]}, {'': [0.23733806277794653, 0.22653755993157915], 'true': [0.24027903469280862, 0.18435433943833693], 'false': [0.23751816894483532, 0.1981201374071635], 'false,false': [0.19951331820783366, 0.1909302087665653], 'false,false,true': [0.21566105077621728, 0.006138833296588227], 'true,false': [0.0, 0.1823494169830226], 'true,false,false': [0.0, 0.19631578729825616]}, {'': [0.24329805422093964, 0.2095747863830037], 'true': [0.24491049997116315, 0.2328107164871084], 'true,true': [0.23920027846706454, 0.23843674460508774], 'true,false': [nan, 0.2328107164871084], 'true,false,false': [0.23481994818957125, 0.0], 'false': [0.1756256381520512, 0.22546108290220726], 'false,false': [nan, 0.22546108290220726], 'false,false,false': [0.22602283127088396, 0.0]}, {'': [0.225726205526078, 0.22588216790059465], 'false': [nan, 0.2258821679005946], 'false,false': [0.23402268220160327, 0.20608287731080233], 'false,false,true': [0.23402268220160327, nan], 'true': [0.23906744044669614, 0.1825672943346663], 'false,false,false': [0.20608287731080233, nan]}, {'': [0.22473278975825528, 0.22641664905793904], 'false': [0.22641664905793904, nan], 'false,true': [nan, 0.22641664905793904], 'false,true,false': [0.24489795918367355, 0.0]}, {'': [0.2309400122180079, 0.19189485889605598], 'true': [0.23480986206173893, 0.13035238530690174], 'true,true': [0.2410734230197144, 0.2232436988834188], 'false': [0.19189485889605598, nan], 'false,true': [0.16966537002185766, 0.0001939196712038941], 'true,false': [0.00431098095607621, 0.15980953132087325]}, {'': [0.23867554211783473, 0.19445597234640216], 'false': [0.20540831653973868, 0.17680307672569226], 'false,true': [0.2169712644743073, 0.10888601631387976], 'false,false': [0.17680307672569226, nan], 'false,false,true': [0.20429884404264279, 0.14808171782542953], 'false,true,false': [nan, 0.10888601631387976]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
2;;accounttype(A, B) :- tweets(A, C), follows(D, A).;true;true
2;true;follows(E, D), recursion_accounttype(E, B).;true;true
2;true,false;follows(A, D).;true;true
4;;accounttype(A, B) :- tweets(A, C), follows(A, D).;true;true
4;true;follows(D, E), recursion_accounttype(E, B).;true;true
4;true,false;follows(D, A).;true;true
4;true,false,false;recursion_accounttype(D, B).;true;true
5;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
5;true;follows(A, D), follows(D, A).;true;true
5;true,false;follows(F, C).;true;true
5;false;follows(A, G), recursion_accounttype(G, B).;true;true
5;false,false;follows(A, H).;true;true
7;;accounttype(A, B) :- follows(A, C).;true;true
7;false;recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(C, A).;true;true
8;false;follows(E, F), follows(A, F).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, D), follows(D, A) )
%   | | then return 0.6914822684328454;  // std dev = 0.373, 48.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=40 */
%   | | else if ( follows(A, E), follows(E, C) )
%   | | | then return 0.2140811384893424;  // std dev = 3.678, 59.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=21 */
%   | | | else return 0.5143989350995123;  // std dev = 2.687, 32.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=21 */
%   | else return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return 0.08891816586874314;  // std dev = 0.421, 52.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=12 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return 0.10814893509951223;  // std dev = 1.500, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
%   | | | else return 0.5248156017661789;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=12 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.5504566274072047;  // std dev = 1.664, 13.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=9 */
%   | | | else return 0.5854216623722396;  // std dev = 1.477, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, D), follows(D, A) )
%   | | then return 0.5851860008555367;  // std dev = 0.373, 48.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=40 */
%   | | else if ( follows(A, E), follows(E, C) )
%   | | | then return 0.18597334387608905;  // std dev = 3.678, 59.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=21 */
%   | | | else return 0.43965169314654007;  // std dev = 2.687, 32.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=21 */
%   | else return -0.12544463852839138;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return 0.0777457812144103;  // std dev = 0.421, 52.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=12 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return 0.09446743783575555;  // std dev = 1.500, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
%   | | | else return 0.448295606241962;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=12 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.5028264132382964;  // std dev = 1.474, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | | else return 0.4657667905884576;  // std dev = 1.666, 13.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=9 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), follows(D, A) )
%   then if ( follows(E, D), recursion_accounttype(E, B) )
%   | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.30571807979719906;  // std dev = 4.896, 112.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=66 */
%   | | | else return -0.11231637819360639;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.07472137030261641;  // std dev = 1.952, 21.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=5 */
%   | | | else return 0.2883692258574722;  // std dev = 2.227, 23.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=12 */
%   | else return 0.08322344901545353;  // std dev = 0.437, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   else if ( follows(A, I), recursion_accounttype(I, B) )
%   | then return 0.1618866586190152;  // std dev = 0.456, 48.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=18 */
%   | else if ( follows(J, A), recursion_accounttype(J, B) )
%   | | then return 0.7338695749863176;  // std dev = 0.084, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(K, A) )
%   | | | then return 0.12426810822738485;  // std dev = 1.309, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return 0.3876621971950649;  // std dev = 2.225, 24.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=17 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A), follows(A, D) )
%   | | then return 0.3926564668824246;  // std dev = 0.373, 48.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=40 */
%   | | else if ( tweets(C, E), tweets(D, F) )
%   | | | then return 0.13810538543843182;  // std dev = 4.269, 80.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=34 */
%   | | | else return 0.41765774952941714;  // std dev = 1.471, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | else return -0.10159632948783627;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.05036752486455241;  // std dev = 0.421, 52.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=12 */
%   | else if ( follows(H, A) )
%   | | then if ( tweets(H, I), follows(A, H) )
%   | | | then return 0.2530459541597708;  // std dev = 2.445, 27.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=15 */
%   | | | else return -0.25217835974236064;  // std dev = 0.097, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.284558577455756;  // std dev = 1.667, 13.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=9 */
%   | | | else return 0.31413735655401887;  // std dev = 1.472, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), follows(A, D) )
%   then if ( follows(D, E), recursion_accounttype(E, B) )
%   | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.14225225610034267;  // std dev = 0.436, 129.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=62 */
%   | | else if ( follows(G, A) )
%   | | | then return 0.22981317088266925;  // std dev = 2.542, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   | | | else return 0.14361543782614988;  // std dev = 1.369, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | else return 0.09935784928791519;  // std dev = 0.404, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then if ( follows(A, H) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return 0.22238176229183806;  // std dev = 1.537, 13.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=8 */
%   | | | else return 0.1203427157919069;  // std dev = 1.465, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.5386658641722097;  // std dev = 0.111, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.1706268960963613;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=8 */
%   | else return 0.0777842058171272;  // std dev = 0.437, 35.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=14 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(A, E) )
%   | | then return 0.12765949385572936;  // std dev = 0.434, 101.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=55 */
%   | | else return 0.16435391755671225;  // std dev = 0.442, 24.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=14 */
%   | else if ( follows(F, C) )
%   | | then if ( follows(A, G), follows(G, H) )
%   | | | then return 0.28533499673209023;  // std dev = 0.700, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.11797312447101871;  // std dev = 1.969, 16.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=9 */
%   | | else return 0.6183069537215102;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, I), recursion_accounttype(I, B) )
%   | then return 0.023654282313397217;  // std dev = 0.421, 52.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=12 */
%   | else if ( follows(A, J) )
%   | | then if ( follows(K, A) )
%   | | | then return 0.13807117910587652;  // std dev = 2.460, 28.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=15 */
%   | | | else return 0.19852790892031522;  // std dev = 2.228, 24.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=17 */
%   | | else return -0.18491312911916705;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( tweets(C, E), follows(D, C) )
%   | | then if ( tweets(D, E), follows(C, A) )
%   | | | then return 0.15558936714344923;  // std dev = 4.083, 87.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=56 */
%   | | | else return -0.04784284756708512;  // std dev = 2.843, 49.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=11 */
%   | | else return 0.5810461636798147;  // std dev = 0.260, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(F, C), follows(F, A) )
%   | | then return -0.12329638903752402;  // std dev = 0.263, 14.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=1 */
%   | | else return 0.03921284070845218;  // std dev = 0.410, 15.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=4 */
%   else if ( follows(A, G) )
%   | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | then if ( follows(G, H), tweets(A, I) )
%   | | | then return 0.13853997260497353;  // std dev = 2.838, 37.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=22 */
%   | | | else return 0.26434697021212655;  // std dev = 1.808, 24.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=19 */
%   | | else return -0.4873785258555299;  // std dev = 0.197, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.0674761413568449;  // std dev = 0.471, 16.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return 0.022101589537670514;  // std dev = 0.412, 115.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=49 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.3056761487498495;  // std dev = 1.566, 18.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=13 */
%   | | | else return 0.04558135680454576;  // std dev = 2.640, 37.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=15 */
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.12056789352658592;  // std dev = 2.659, 34.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=20 */
%   | | | else return -0.3658799952809136;  // std dev = 0.047, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.17368603652255565;  // std dev = 1.521, 14.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=11 */
%   | | | else return 0.09502222966246479;  // std dev = 1.605, 15.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=10 */
%   else if ( recursion_accounttype(K, B) )
%   | then return 0.051588667920726916;  // std dev = 0.470, 16.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, A), tweets(E, F) )
%   | | | then return 0.16011130452925965;  // std dev = 3.182, 62.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=48 */
%   | | | else return 0.006166618790540918;  // std dev = 3.946, 77.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=34 */
%   | | else return -0.11528670326188574;  // std dev = 0.037, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( follows(A, G), follows(G, A) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return -0.15446503108808193;  // std dev = 1.458, 25.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=3 */
%   | | | else return 0.19719762836670116;  // std dev = 2.636, 32.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=19 */
%   | | else return -0.05055204729773821;  // std dev = 0.346, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   else if ( follows(I, J), follows(A, J) )
%   | then if ( follows(A, K), recursion_accounttype(K, B) )
%   | | then return -0.012431140188962967;  // std dev = 0.399, 18.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=4 */
%   | | else return 0.08774904248109122;  // std dev = 0.420, 24.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=17 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, D) )
%   then if ( recursion_accounttype(D, B), tweets(D, E) )
%   | then if ( follows(A, D), tweets(A, E) )
%   | | then if ( recursion_accounttype(C, B), tweets(C, E) )
%   | | | then return 0.10451736260429499;  // std dev = 2.962, 53.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=34 */
%   | | | else return -0.09705432990814736;  // std dev = 2.752, 50.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=11 */
%   | | else if ( tweets(A, E), recursion_accounttype(C, B) )
%   | | | then return 0.2598897858659013;  // std dev = 1.536, 21.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=16 */
%   | | | else return 0.06464839452794363;  // std dev = 3.939, 82.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=45 */
%   | else return -0.20688837161305373;  // std dev = 0.295, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return -0.08017259033092082;  // std dev = 0.350, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | else if ( follows(A, G), tweets(A, H) )
%   | | then return 0.10832926775978592;  // std dev = 0.390, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else if ( follows(I, A), recursion_accounttype(I, B) )
%   | | | then return 0.04107952840592314;  // std dev = 1.847, 14.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=8 */
%   | | | else return -0.02760139339267072;  // std dev = 1.233, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */


Results
   AUC ROC   = 0.790701
   AUC PR    = 0.774336
   CLL	      = -0.568159
   Precision = 0.761538 at threshold = 0.5
   Recall    = 0.634615
   F1        = 0.692308


Total learning time: 25.494 seconds
Total inference time: 1.653 seconds
AUC ROC: 0.790701


Results scoring model
   AUC ROC   = 0.837207
   AUC PR    = 0.827004
   CLL	      = -0.528079
   Precision = 0.789916 at threshold = 0.5
   Recall    = 0.746032
   F1        = 0.767347


Total scoring time: 1.344 seconds
Refined model CLL: -0.528079


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.790701
   AUC PR    = 0.774336
   CLL	      = -0.568159
   Precision = 0.761538 at threshold = 0.5
   Recall    = 0.634615
   F1        = 0.692308


Total learning time: 29.894000000000002 seconds
Total inference time: 1.653 seconds
AUC ROC: 0.790701
Total revision time: 29.894000000000002
Best scored revision CLL: -0.528079


Dataset: 7_yeast_twitter, Fold: 1, Type: Transfer (trRDN-B), Time: 03:35:38
{'AUC ROC': 0.790701, 'AUC PR': 0.774336, 'CLL': -0.568159, 'Precision': [0.761538, 0.5], 'Recall': 0.634615, 'F1': 0.692308, 'Learning time': 29.894000000000002, 'Inference time': 1.653, 'parameter_1.0': {'AUC ROC': 0.727153, 'AUC PR': 0.714176, 'CLL': -0.624994, 'Precision': [0.703704, 0.5], 'Recall': 0.608974, 'F1': 0.652921, 'Learning time': 2.17, 'Inference time': 0.99}}


Starting fold 2

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 156

Target test facts examples: 1580
Target test pos	 examples: 126
Target test neg examples: 126

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
0;false;interaction(D, A), interaction(D, D).;true;true
0;false,true;interaction(A, E), interaction(E, D).;true;true
0;false,true,true;interaction(A, A).;false;false
0;false,true,false;enzyme(A, F).;false;false
0;false,false;interaction(A, G), recursion_proteinclass(G, B).;true;true
0;false,false,true;complex(A, H).;false;false
0;false,false,false;interaction(I, A), interaction(J, I).;false;false
1;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
1;true;interaction(D, A), complex(A, E).;false;false
1;false;interaction(F, A), interaction(A, F).;true;true
1;false,true;enzyme(A, G), enzyme(F, G).;false;true
1;false,true,false;interaction(A, A).;false;false
1;false,false;interaction(A, H), enzyme(H, I).;true;true
1;false,false,true;phenotype(A, J), phenotype(H, K).;false;false
1;false,false,false;interaction(L, A), location(A, M).;false;false
2;;proteinclass(A, B) :- complex(A, C), interaction(D, A).;true;true
2;true;interaction(E, D), recursion_proteinclass(E, B).;false;true
2;true,false;interaction(A, D).;false;true
2;true,false,false;interaction(D, D), enzyme(A, F).;false;false
2;false;interaction(A, G), recursion_proteinclass(G, B).;false;true
2;false,false;interaction(A, H), interaction(H, H).;true;true
2;false,false,true;interaction(H, A).;false;false
2;false,false,false;phenotype(A, I), enzyme(A, J).;false;false
3;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
3;true;phenotype(C, D), enzyme(C, E).;false;false
3;false;interaction(A, F), interaction(F, A).;true;true
3;false,true;interaction(A, A).;false;true
3;false,true,false;enzyme(F, G), enzyme(A, G).;false;false
3;false,false;interaction(H, A), enzyme(H, I).;true;true
3;false,false,true;enzyme(A, I).;false;false
3;false,false,false;interaction(A, J), recursion_proteinclass(J, B).;false;false
4;;proteinclass(A, B) :- complex(A, C), interaction(A, D).;true;true
4;true;interaction(D, E), recursion_proteinclass(E, B).;false;true
4;true,false;interaction(D, A).;false;true
4;true,false,false;recursion_proteinclass(D, B).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;false;true
4;false,false;interaction(G, A), enzyme(G, H).;true;true
4;false,false,true;interaction(I, G), recursion_proteinclass(I, B).;false;false
4;false,false,false;phenotype(A, J), enzyme(A, K).;false;false
5;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
5;true;interaction(A, D), interaction(D, A).;true;true
5;true,true;interaction(C, D), interaction(A, C).;false;false
5;true,false;interaction(E, C), interaction(E, E).;false;true
5;true,false,false;enzyme(A, F), interaction(G, C).;false;false
5;false;interaction(A, H), recursion_proteinclass(H, B).;false;true
5;false,false;interaction(A, A).;false;true
5;false,false,false;interaction(A, I), enzyme(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
6;true;enzyme(C, D), phenotype(C, E).;true;true
6;true,true;enzyme(A, D).;false;false
6;true,false;interaction(C, F), interaction(F, A).;false;false
6;false;interaction(A, A).;false;true
6;false,false;interaction(G, A), enzyme(G, H).;true;true
6;false,false,true;interaction(I, G), phenotype(G, J).;false;false
6;false,false,false;interaction(A, K), enzyme(K, L).;false;false
7;;proteinclass(A, B) :- interaction(A, C), location(A, D).;false;true
7;false;interaction(E, A), complex(E, F).;true;true
7;false,true;interaction(E, E), enzyme(A, G).;true;true
7;false,true,true;interaction(E, H), recursion_proteinclass(H, B).;false;false
7;false,true,false;recursion_proteinclass(E, B).;false;false
7;false,false;complex(A, I), location(A, J).;true;true
7;false,false,true;complex(K, I), recursion_proteinclass(K, B).;false;false
7;false,false,false;interaction(L, A), recursion_proteinclass(L, B).;false;false
8;;proteinclass(A, B) :- interaction(C, A).;true;true
8;true;interaction(D, C), recursion_proteinclass(D, B).;true;true
8;true,true;interaction(D, A).;false;false
8;true,false;interaction(A, C).;false;true
8;true,false,false;enzyme(C, E), phenotype(A, F).;false;false
8;false;location(A, G).;true;false
8;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
8;false,true,true;interaction(H, I), interaction(A, I).;false;false
9;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
9;false;interaction(D, A), enzyme(D, E).;true;true
9;false,true;location(A, F), location(D, F).;true;true
9;false,true,true;interaction(G, D), recursion_proteinclass(G, B).;false;false
9;false,true,false;interaction(H, D), recursion_proteinclass(H, B).;false;false
9;false,false;phenotype(A, I), interaction(A, J).;true;true
9;false,false,true;interaction(J, K), recursion_proteinclass(K, B).;false;false
9;false,false,false;complex(A, L), location(A, M).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.47883859027192616;  // std dev = 2.613, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   else if ( follows(D, A), follows(D, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.124815601766179;  // std dev = 1.713, 15.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=4 */
%   | | | else return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( follows(G, A), follows(H, G) )
%   | | | then return 0.4581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.3581489350995123;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then return 0.25406516248558364;  // std dev = 2.661, 29.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=13 */
%   | else return 0.2434446632546294;  // std dev = 1.656, 12.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
%   else if ( follows(F, A), follows(A, F) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.39211032084925923;  // std dev = 1.097, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else if ( follows(A, G) )
%   | | then return 0.4313203525546933;  // std dev = 0.482, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | | else if ( follows(H, A) )
%   | | | then return 0.5900587326658907;  // std dev = 0.891, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.14207446911896834;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), follows(D, A) )
%   then if ( follows(E, D), recursion_accounttype(E, B) )
%   | then return 0.28118160204853954;  // std dev = 2.977, 37.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=20 */
%   | else if ( follows(A, D) )
%   | | then return -0.19448618269730875;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( follows(D, D) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.3055138173026912;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return 0.20591394334496724;  // std dev = 1.648, 12.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
%   | else if ( follows(A, G), follows(G, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.24892601298131417;  // std dev = 0.495, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.29658890126887133;  // std dev = 0.480, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.18408355534901225;  // std dev = 0.473, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
%   | else if ( follows(E, A) )
%   | | then return 0.040624537377546344;  // std dev = 0.507, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return -0.008659710983367978;  // std dev = 1.244, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | | else return 0.19947288125947327;  // std dev = 1.565, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), follows(A, D) )
%   then if ( follows(D, E), recursion_accounttype(E, B) )
%   | then return 0.10789152261012334;  // std dev = 2.985, 38.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=17 */
%   | else if ( follows(D, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return -0.021326018837346417;  // std dev = 0.894, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.28376063188898965;  // std dev = 0.793, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.581846945035493;  // std dev = 0.133, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | | then return -0.3941296286028956;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.1446285307668374;  // std dev = 0.485, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(C, D), follows(A, C) )
%   | | then return 0.015942028210189085;  // std dev = 1.824, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.34694955440527037;  // std dev = 1.240, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | else if ( follows(E, C), follows(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, C) )
%   | | | then return 0.2849934071687827;  // std dev = 0.730, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.013830957767999355;  // std dev = 1.884, 18.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=5 */
%   | else if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, H) )
%   | | | then return 0.23113094133763631;  // std dev = 1.598, 11.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=7 */
%   | | | else return -0.07396083517438412;  // std dev = 0.859, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, A) )
%   | then return 0.07346858976551938;  // std dev = 2.339, 23.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=11 */
%   | else return 0.06183118844920796;  // std dev = 1.813, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A) )
%   | | then if ( follows(F, E) )
%   | | | then return 0.18921454212217192;  // std dev = 1.291, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G) )
%   | | | then return 0.1105837165230611;  // std dev = 1.313, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | | else return 0.0191664496318934;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then return 0.06528627251518125;  // std dev = 3.445, 54.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=26 */
%   else if ( follows(D, A), tweets(D, E) )
%   | then if ( follows(D, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.28849129898336945;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.32985032003302156;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.6816887627205267;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.3183112372794733;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(D, A) )
%   | | then return 0.005454966538619442;  // std dev = 2.221, 23.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=12 */
%   | | else return 0.18000592732276408;  // std dev = 1.680, 17.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | else if ( follows(A, C) )
%   | | then return -0.23457032226118954;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.20886493402463738;  // std dev = 0.513, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( recursion_accounttype(E, B) )
%   | then if ( follows(E, F), follows(A, F) )
%   | | then return 0.036014383026701534;  // std dev = 1.731, 15.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=6 */
%   | | else return -0.12980676683135317;  // std dev = 0.784, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.07838456337944465;  // std dev = 2.364, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0.015858275902067887;  // std dev = 1.518, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
%   | | else if ( follows(F, D), recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04430674666412012;  // std dev = 0.784, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.12765714605319442;  // std dev = 1.469, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
%   | | | else return -0.22580407078017894;  // std dev = 0.794, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.5522242242108447;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return -0.22976093941436748;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */


Results
   AUC ROC   = 0.615709
   AUC PR    = 0.565134
   CLL	      = -0.672939
   Precision = 0.557692 at threshold = 0.5
   Recall    = 0.460317
   F1        = 0.504348


Total learning time: 1.335 seconds
Total inference time: 0.823 seconds
AUC ROC: 0.615709


Results scoring model
   AUC ROC   = 0.82206
   AUC PR    = 0.835102
   CLL	      = -0.570159
   Precision = 0.833333 at threshold = 0.5
   Recall    = 0.645161
   F1        = 0.727273


Total scoring time: 0.722 seconds
Parameter learned model CLL: -0.570159


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(D, A), follows(D, D)', 'false,false': 'follows(A, E), recursion_accounttype(E, B)', 'false,false,true': 'tweets(A, F)', 'false,false,false': 'follows(G, A), follows(H, G)'}, {'true': [2.613, 11, 18], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.713, 11, 4], 'false,false,true,false': [0.816, 2, 1], 'false,false,false,true': [1.095, 2, 3], 'false,false,false,false': [1.581, 5, 5]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), tweets(A, E)', 'false': 'follows(F, A), follows(A, F)', 'false,true': 'follows(A, A)', 'false,false': 'follows(A, G)', 'false,false,false': 'follows(H, A)'}, {'true,true': [2.661, 16, 13], 'true,false': [1.656, 7, 5], 'false,true,true': [0.0, 0, 0], 'false,true,false': [1.097, 2, 3], 'false,false,true': [0.482, 3, 5], 'false,false,false,true': [0.891, 1, 4], 'false,false,false,false': [0.816, 2, 1]}], ['accounttype(A, B)', {'': 'tweets(A, C), follows(D, A)', 'true': 'follows(E, D), recursion_accounttype(E, B)', 'true,false': 'follows(A, D)', 'true,false,false': 'follows(D, D)', 'false': 'follows(A, F), recursion_accounttype(F, B)', 'false,false': 'follows(A, G), follows(G, G)'}, {'true,true': [2.977, 17, 20], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [0.707, 1, 1], 'false,true': [1.648, 7, 5], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.495, 5, 5]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A)', 'false,false,false': 'follows(A, F), recursion_accounttype(F, B)'}, {'true': [0.48, 11, 18], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.473, 6, 5], 'false,false,true': [0.507, 2, 1], 'false,false,false,true': [1.244, 7, 2], 'false,false,false,false': [1.565, 5, 5]}], ['accounttype(A, B)', {'': 'tweets(A, C), follows(A, D)', 'true': 'follows(D, E), recursion_accounttype(E, B)', 'true,false': 'follows(D, A)', 'true,false,false': 'recursion_accounttype(D, B)', 'false': 'follows(F, A), recursion_accounttype(F, B)', 'false,false': 'follows(G, A)', 'false,false,true': 'follows(H, G), recursion_accounttype(H, B)'}, {'true,true': [2.985, 21, 17], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.894, 3, 1], 'true,false,false,false': [0.793, 1, 2], 'false,true': [0.133, 0, 7], 'false,false,true,true': [0.0, 1, 0], 'false,false,true,false': [0.0, 0, 0], 'false,false,false': [0.485, 5, 4]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(A, D), follows(D, A)', 'true,true': 'follows(C, D), follows(A, C)', 'true,false': 'follows(E, C), follows(E, E)', 'true,false,false': 'follows(F, C)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(A, A)', 'false,false,false': 'follows(A, H)'}, {'true,true,true': [1.824, 8, 6], 'true,true,false': [1.24, 2, 7], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.73, 1, 5], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.884, 13, 5], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [1.598, 4, 7], 'false,false,false,false': [0.859, 3, 1]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), follows(D, A)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A)', 'false,false,true': 'follows(F, E)', 'false,false,false': 'follows(A, G)'}, {'true,true': [2.339, 12, 11], 'true,false': [1.813, 11, 7], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.291, 3, 8], 'false,false,true,false': [0.0, 0, 0], 'false,false,false,true': [1.313, 3, 4], 'false,false,false,false': [0.816, 2, 1]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'false': 'follows(D, A), tweets(D, E)', 'false,true': 'follows(D, D)', 'false,true,false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, F)', 'false,false,true': 'tweets(G, F), recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A), recursion_accounttype(H, B)'}, {'true': [3.445, 28, 26], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.0, 0, 4], 'false,true,false,false': [0.0, 1, 0], 'false,false,true,true': [0.0, 0, 1], 'false,false,true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 2, 0]}], ['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(D, A)', 'true,false': 'follows(A, C)', 'false': 'recursion_accounttype(E, B)', 'false,true': 'follows(E, F), follows(A, F)'}, {'true,true,true': [2.221, 11, 12], 'true,true,false': [1.68, 6, 11], 'true,false,true': [0.0, 1, 0], 'true,false,false': [0.513, 1, 1], 'false,true,true': [1.731, 9, 6], 'false,true,false': [0.784, 3, 1], 'false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'follows(F, D), recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)', 'false,false,false': 'tweets(A, I)'}, {'true': [2.364, 11, 18], 'false,true,true': [1.518, 6, 5], 'false,true,false,true': [0.0, 0, 0], 'false,true,false,false': [0.784, 2, 1], 'false,false,true,true': [1.469, 5, 5], 'false,false,true,false': [0.794, 5, 1], 'false,false,false,true': [0.0, 0, 1], 'false,false,false,false': [0.0, 2, 0]}]]
[{'': [0.2354340071343634, 0.23875114784205698], 'false': [nan, 0.23875114784205698], 'false,false': [0.20061728395061712, 0.24888888888888888], 'false,false,false': [0.23999999999999994, 0.24999999999999983], 'false,false,true': [0.1955555555555554, 0.22222222222222224]}, {'': [0.23958887353723976, 0.2336815841352612], 'true': [0.2441499224345663, 0.22848655686999694], 'false': [0.24082250594626928, 0.23116530163023358], 'false,true': [nan, 0.24082250594626928], 'false,false': [0.23260043391695218, 0.2296873351790133], 'false,false,false': [0.1589076903084586, 0.22222222222222224]}, {'': [0.23958436942080907, 0.2354092118725106], 'true': [0.23947267888114168, 0.22222222222222224], 'false': [0.22631320909381566, 0.24531530349727076], 'false,false': [nan, 0.24531530349727076], 'true,false': [0.0, 0.25], 'true,false,false': [nan, 0.25]}, {'': [0.2299470709430458, 0.22748547548671594], 'false': [0.2240034277210823, 0.2264408123120811], 'false,false': [0.2570200730988169, 0.22111734792126223], 'false,true': [nan, 0.2240034277210823], 'false,false,false': [0.1719889938433606, 0.2448132569290829]}, {'': [0.2332977501147258, 0.19950133819233082], 'true': [0.23445873894149658, 0.22699325254143748], 'true,false': [nan, 0.22699325254143746], 'true,false,false': [0.20001572387335573, 0.20977593965045313], 'false': [0.0025333146475153994, 0.23807220169788898], 'false,false': [0.0, 0.23549863312446373], 'false,false,true': [0.0, nan]}, {'': [0.2099965454663524, 0.22006360108568185], 'false': [0.19710328635182336, 0.2375358285745885], 'false,false': [nan, 0.2375358285745884], 'false,false,false': [0.23202076286121426, 0.18444286508317656], 'true': [0.23758017561970216, 0.08881939768685021], 'true,true': [0.23768094955212268, 0.1707310790575731], 'true,false': [nan, 0.08881939768685021], 'true,false,false': [0.08881939768685021, nan]}, {'': [0.2136548358448848, 0.1968585998788438], 'true': [0.2378306480275816, 0.18268754785088293], 'false': [nan, 0.19685859987884374], 'false,false': [0.1515558287493039, 0.24079990337290105], 'false,false,false': [0.24625463171743675, 0.22222222222222218], 'false,false,true': [0.1515558287493039, nan]}, {'': [0.21975065490891513, 0.1268274152204407], 'false': [0.06117541724924987, 0.2222222222222222], 'false,false': [0.0, 0.0], 'false,true': [nan, 0.06117541724924987], 'false,true,false': [0.0, 0.0], 'false,false,true': [0.0, nan], 'false,false,false': [nan, 0.0]}, {'': [0.20267151587932825, 0.19470372342258843], 'true': [0.20139532227525234, 0.21936609360028111], 'true,false': [0.0, 0.263504198227996], 'true,true': [0.21455051839178277, 0.1660779939660185], 'false': [0.19470372342258843, nan], 'false,true': [0.1998589518084917, 0.15366373244367693]}, {'': [0.19270539570354356, 0.1997414451764277], 'false': [0.20865575898794572, 0.1929824419208519], 'false,true': [0.2094612933211342, 0.20506624235846685], 'false,true,false': [nan, 0.20506624235846685], 'false,false': [0.20348518077462469, 0.13588906580665555], 'false,false,true': [0.21575530458187947, 0.10495070455086941], 'false,false,false': [0.0, 0.0]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
2;;accounttype(A, B) :- tweets(A, C), follows(D, A).;true;true
2;true;follows(E, D), recursion_accounttype(E, B).;true;true
2;true,false;follows(A, D).;true;true
4;;accounttype(A, B) :- tweets(A, C), follows(A, D).;true;true
4;false;follows(F, A), recursion_accounttype(F, B).;true;true
4;false,false;follows(G, A).;true;true
7;;accounttype(A, B) :- follows(A, C).;true;true
7;false;follows(D, A), tweets(D, E).;true;true
7;false,true;recursion_accounttype(D, B).;true;true
7;false,false;tweets(A, F).;true;true
8;;accounttype(A, B) :- follows(C, A).;true;true
8;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;true,false;follows(A, C).;true;true
9;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
9;false;follows(D, A).;true;true
9;false,false;follows(A, G).;true;true
9;false,false,false;tweets(A, I).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), follows(A, D) )
%   | then if ( tweets(A, E), tweets(C, E) )
%   | | then if ( follows(A, C), follows(D, A) )
%   | | | then return 0.10814893509951223;  // std dev = 1.500, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
%   | | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.7672398441904213;  // std dev = 0.287, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( follows(A, G), follows(G, F) )
%   | | then return 0.30259337954395676;  // std dev = 0.497, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | else return -0.030739953789376676;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then return 0.6081489350995123;  // std dev = 0.433, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.3581489350995122;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(D, C) )
%   | then if ( follows(A, E), tweets(A, F) )
%   | | then if ( tweets(C, F), tweets(D, F) )
%   | | | then return 0.10591668404693864;  // std dev = 1.654, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
%   | | | else return 0.46946942929415525;  // std dev = 0.771, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.733855210101789;  // std dev = 0.016, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.7411936642369624;  // std dev = 0.047, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then if ( follows(H, A), follows(H, G) )
%   | | then return 0.32463111232289615;  // std dev = 1.244, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.013629023265947721;  // std dev = 0.360, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then return 0.5170719622367218;  // std dev = 0.433, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.308741135785635;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), follows(D, A) )
%   then if ( follows(E, D), recursion_accounttype(E, B) )
%   | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.2729794155743667;  // std dev = 1.996, 21.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=11 */
%   | | | else return -0.019363984606875485;  // std dev = 0.880, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.4626910469102285;  // std dev = 0.777, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.28134043605784526;  // std dev = 1.046, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else if ( follows(A, D) )
%   | | then return -0.18485751347052842;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.29106507832939554;  // std dev = 0.746, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( follows(A, I), follows(I, J) )
%   | then if ( follows(A, J) )
%   | | then return 0.47833111922106547;  // std dev = 0.355, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | else return -0.05339422749020519;  // std dev = 0.300, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | else return 0.15538132861582335;  // std dev = 1.047, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, A) )
%   | then return 0.18847582584006675;  // std dev = 0.410, 23.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=12 */
%   | else return 0.5223565837179825;  // std dev = 0.242, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then if ( follows(E, F) )
%   | | then if ( tweets(A, G), tweets(F, G) )
%   | | | then return 0.062368354512008645;  // std dev = 1.342, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | | | else return 0.2905310421069744;  // std dev = 0.924, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return -0.2197277504028717;  // std dev = 0.114, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( follows(A, I), follows(I, H) )
%   | | | then return 0.2477250288632815;  // std dev = 0.798, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.41839673513106723;  // std dev = 0.837, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.22022751701926319;  // std dev = 1.013, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.12876593482109772;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), follows(A, D) )
%   then if ( follows(A, E), recursion_accounttype(E, B) )
%   | then if ( follows(E, F), follows(G, A) )
%   | | then if ( follows(E, A), follows(G, E) )
%   | | | then return 0.03366791019763083;  // std dev = 1.511, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | | else return 0.3221512862652762;  // std dev = 1.349, 13.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=9 */
%   | | else return -0.09530525786475044;  // std dev = 0.296, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | else if ( follows(H, A) )
%   | | then return 0.20923988908097144;  // std dev = 1.091, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.1288208379193625;  // std dev = 1.005, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else if ( follows(I, A), recursion_accounttype(I, B) )
%   | then return 0.3714962490567813;  // std dev = 0.111, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(J, A) )
%   | | then return -0.3471609816844334;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.23460974568883008;  // std dev = 0.841, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.083954629027778;  // std dev = 0.689, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C), tweets(A, D) )
%   then if ( follows(C, E), tweets(E, D) )
%   | then if ( recursion_accounttype(C, B), follows(E, C) )
%   | | then if ( recursion_accounttype(E, B), tweets(C, D) )
%   | | | then return 0.32760174485586174;  // std dev = 1.524, 16.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=12 */
%   | | | else return -0.13961499735040697;  // std dev = 0.862, 12.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=1 */
%   | | else if ( follows(A, E) )
%   | | | then return -0.1922905896011189;  // std dev = 0.788, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | | else return 0.1745216834273921;  // std dev = 0.867, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else return 0.23367671289591777;  // std dev = 1.023, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.2901438839368603;  // std dev = 0.097, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then return 0.18417778089343112;  // std dev = 0.827, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.003536413980445308;  // std dev = 0.748, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(A, D), follows(D, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.09680237154050353;  // std dev = 2.015, 27.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=13 */
%   | | | else return 0.30253302831472967;  // std dev = 0.316, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.05653512602917071;  // std dev = 0.740, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | else return -0.20551887605345862;  // std dev = 0.176, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( tweets(A, G) )
%   | then if ( follows(A, H), follows(H, I) )
%   | | then if ( follows(I, A) )
%   | | | then return -0.104325576679323;  // std dev = 0.782, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.20041383989093198;  // std dev = 0.811, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( follows(J, A), recursion_accounttype(J, B) )
%   | | | then return 0.29263419705152166;  // std dev = 0.192, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.1456566847931004;  // std dev = 0.973, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else return 0.07141260601103756;  // std dev = 0.536, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( follows(E, A), follows(D, E) )
%   | | then if ( follows(A, D), recursion_accounttype(E, B) )
%   | | | then return 0.013235317854214767;  // std dev = 1.477, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
%   | | | else return -0.12231221722608952;  // std dev = 0.628, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.1466655089334444;  // std dev = 1.301, 16.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=11 */
%   | | | else return 0.42084128239950847;  // std dev = 0.168, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), follows(G, H) )
%   | | | then return 0.11529260391021172;  // std dev = 0.923, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.13712778892670385;  // std dev = 0.115, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.006836142182519045;  // std dev = 1.006, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.18826109112602474;  // std dev = 0.393, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return 0.1077069989851632;  // std dev = 0.272, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.04588862859949808;  // std dev = 1.881, 26.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=12 */
%   | | | else return 0.09414277232892841;  // std dev = 0.980, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | else return 0.15348446621452197;  // std dev = 0.048, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, C) )
%   | | then return -0.2350049857227975;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.20940951917123865;  // std dev = 0.509, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then if ( follows(A, H), follows(G, H) )
%   | | then return 0.08820997421351207;  // std dev = 0.922, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return -0.11627142957740969;  // std dev = 0.100, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.07921035938735678;  // std dev = 0.396, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), tweets(A, E) )
%   | then return 0.053590327328031394;  // std dev = 0.365, 22.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=11 */
%   | else return 0.15491039395386966;  // std dev = 0.074, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(F, A) )
%   | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), follows(G, H) )
%   | | | then return -0.04754111736209876;  // std dev = 0.940, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0.07232763849723269;  // std dev = 0.546, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.02747813156163348;  // std dev = 0.782, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return -0.028532697933526974;  // std dev = 0.961, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | | else return 0.051064833908472836;  // std dev = 1.092, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.5835675618921585;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return -0.15513786300159338;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */


Results
   AUC ROC   = 0.604277
   AUC PR    = 0.557921
   CLL	      = -0.727786
   Precision = 0.605505 at threshold = 0.5
   Recall    = 0.52381
   F1        = 0.561702


Total learning time: 15.743 seconds
Total inference time: 1.775 seconds
AUC ROC: 0.604277


Results scoring model
   AUC ROC   = 0.952653
   AUC PR    = 0.956101
   CLL	      = -0.392737
   Precision = 0.928571 at threshold = 0.5
   Recall    = 0.83871
   F1        = 0.881356


Total scoring time: 1.679 seconds
Refined model CLL: -0.392737


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.604277
   AUC PR    = 0.557921
   CLL	      = -0.727786
   Precision = 0.605505 at threshold = 0.5
   Recall    = 0.52381
   F1        = 0.561702


Total learning time: 19.479 seconds
Total inference time: 1.775 seconds
AUC ROC: 0.604277
Total revision time: 19.479
Best scored revision CLL: -0.392737


Dataset: 7_yeast_twitter, Fold: 2, Type: Transfer (trRDN-B), Time: 03:36:01
{'AUC ROC': 0.604277, 'AUC PR': 0.557921, 'CLL': -0.727786, 'Precision': [0.605505, 0.5], 'Recall': 0.52381, 'F1': 0.561702, 'Learning time': 19.479, 'Inference time': 1.775, 'parameter_0.2': {'AUC ROC': 0.615709, 'AUC PR': 0.565134, 'CLL': -0.672939, 'Precision': [0.557692, 0.5], 'Recall': 0.460317, 'F1': 0.504348, 'Learning time': 1.335, 'Inference time': 0.823}}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
0;false;interaction(D, A), interaction(D, D).;true;true
0;false,true;interaction(A, E), interaction(E, D).;true;true
0;false,true,true;interaction(A, A).;false;false
0;false,true,false;enzyme(A, F).;false;false
0;false,false;interaction(A, G), recursion_proteinclass(G, B).;true;true
0;false,false,true;complex(A, H).;false;false
0;false,false,false;interaction(I, A), interaction(J, I).;false;false
1;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
1;true;interaction(D, A), complex(A, E).;false;false
1;false;interaction(F, A), interaction(A, F).;true;true
1;false,true;enzyme(A, G), enzyme(F, G).;false;true
1;false,true,false;interaction(A, A).;false;false
1;false,false;interaction(A, H), enzyme(H, I).;true;true
1;false,false,true;phenotype(A, J), phenotype(H, K).;false;false
1;false,false,false;interaction(L, A), location(A, M).;false;false
2;;proteinclass(A, B) :- complex(A, C), interaction(D, A).;true;true
2;true;interaction(E, D), recursion_proteinclass(E, B).;false;true
2;true,false;interaction(A, D).;false;true
2;true,false,false;interaction(D, D), enzyme(A, F).;false;false
2;false;interaction(A, G), recursion_proteinclass(G, B).;false;true
2;false,false;interaction(A, H), interaction(H, H).;true;true
2;false,false,true;interaction(H, A).;false;false
2;false,false,false;phenotype(A, I), enzyme(A, J).;false;false
3;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
3;true;phenotype(C, D), enzyme(C, E).;false;false
3;false;interaction(A, F), interaction(F, A).;true;true
3;false,true;interaction(A, A).;false;true
3;false,true,false;enzyme(F, G), enzyme(A, G).;false;false
3;false,false;interaction(H, A), enzyme(H, I).;true;true
3;false,false,true;enzyme(A, I).;false;false
3;false,false,false;interaction(A, J), recursion_proteinclass(J, B).;false;false
4;;proteinclass(A, B) :- complex(A, C), interaction(A, D).;true;true
4;true;interaction(D, E), recursion_proteinclass(E, B).;false;true
4;true,false;interaction(D, A).;false;true
4;true,false,false;recursion_proteinclass(D, B).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;false;true
4;false,false;interaction(G, A), enzyme(G, H).;true;true
4;false,false,true;interaction(I, G), recursion_proteinclass(I, B).;false;false
4;false,false,false;phenotype(A, J), enzyme(A, K).;false;false
5;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
5;true;interaction(A, D), interaction(D, A).;true;true
5;true,true;interaction(C, D), interaction(A, C).;false;false
5;true,false;interaction(E, C), interaction(E, E).;false;true
5;true,false,false;enzyme(A, F), interaction(G, C).;false;false
5;false;interaction(A, H), recursion_proteinclass(H, B).;false;true
5;false,false;interaction(A, A).;false;true
5;false,false,false;interaction(A, I), enzyme(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
6;true;enzyme(C, D), phenotype(C, E).;true;true
6;true,true;enzyme(A, D).;false;false
6;true,false;interaction(C, F), interaction(F, A).;false;false
6;false;interaction(A, A).;false;true
6;false,false;interaction(G, A), enzyme(G, H).;true;true
6;false,false,true;interaction(I, G), phenotype(G, J).;false;false
6;false,false,false;interaction(A, K), enzyme(K, L).;false;false
7;;proteinclass(A, B) :- interaction(A, C), location(A, D).;false;true
7;false;interaction(E, A), complex(E, F).;true;true
7;false,true;interaction(E, E), enzyme(A, G).;true;true
7;false,true,true;interaction(E, H), recursion_proteinclass(H, B).;false;false
7;false,true,false;recursion_proteinclass(E, B).;false;false
7;false,false;complex(A, I), location(A, J).;true;true
7;false,false,true;complex(K, I), recursion_proteinclass(K, B).;false;false
7;false,false,false;interaction(L, A), recursion_proteinclass(L, B).;false;false
8;;proteinclass(A, B) :- interaction(C, A).;true;true
8;true;interaction(D, C), recursion_proteinclass(D, B).;true;true
8;true,true;interaction(D, A).;false;false
8;true,false;interaction(A, C).;false;true
8;true,false,false;enzyme(C, E), phenotype(A, F).;false;false
8;false;location(A, G).;true;false
8;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
8;false,true,true;interaction(H, I), interaction(A, I).;false;false
9;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
9;false;interaction(D, A), enzyme(D, E).;true;true
9;false,true;location(A, F), location(D, F).;true;true
9;false,true,true;interaction(G, D), recursion_proteinclass(G, B).;false;false
9;false,true,false;interaction(H, D), recursion_proteinclass(H, B).;false;false
9;false,false;phenotype(A, I), interaction(A, J).;true;true
9;false,false,true;interaction(J, K), recursion_proteinclass(K, B).;false;false
9;false,false,false;complex(A, L), location(A, M).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.45814893509951116;  // std dev = 3.795, 60.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=36 */
%   else if ( follows(D, A), follows(D, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.14386322081379807;  // std dev = 2.070, 21.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=6 */
%   | | | else return -0.030739953789376676;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | | else if ( follows(G, A), follows(H, G) )
%   | | | then return 0.35814893509951234;  // std dev = 2.000, 16.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=8 */
%   | | | else return 0.4692600462106234;  // std dev = 2.068, 18.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=11 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then return 0.3049945655780893;  // std dev = 3.505, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | else return 0.19267007926189653;  // std dev = 2.321, 25.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=9 */
%   else if ( follows(F, A), follows(A, F) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.344749296984314;  // std dev = 1.807, 13.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
%   | else if ( follows(A, G) )
%   | | then return 0.5780779560793012;  // std dev = 0.411, 14.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=11 */
%   | | else if ( follows(H, A) )
%   | | | then return 0.29678092162919556;  // std dev = 1.984, 16.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=8 */
%   | | | else return 0.1242963388122947;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), follows(D, A) )
%   then if ( follows(E, D), recursion_accounttype(E, B) )
%   | then return 0.2611333781814461;  // std dev = 4.268, 74.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=38 */
%   | else if ( follows(A, D) )
%   | | then return -0.20568369659012903;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( follows(D, D) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5075809946820317;  // std dev = 0.826, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return 0.16427352457891917;  // std dev = 2.312, 25.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=9 */
%   | else if ( follows(A, G), follows(G, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.31367762058483695;  // std dev = 0.474, 20.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=12 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.2884576732211128;  // std dev = 0.491, 60.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=36 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.12453984420957392;  // std dev = 0.467, 26.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=10 */
%   | else if ( follows(E, A) )
%   | | then return -0.027698696753254797;  // std dev = 0.426, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.02721245769066895;  // std dev = 1.517, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | | | else return 0.25294266105921803;  // std dev = 1.995, 18.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=11 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), follows(A, D) )
%   then if ( follows(D, E), recursion_accounttype(E, B) )
%   | then return 0.16148564943925509;  // std dev = 4.116, 71.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=36 */
%   | else if ( follows(D, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return -0.02834173144252647;  // std dev = 0.857, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.35745663100622477;  // std dev = 0.908, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.33917594905938914;  // std dev = 2.059, 20.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=14 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | | then return -0.2615848359111223;  // std dev = 0.097, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return -0.20599195059530184;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return 0.10672034542787352;  // std dev = 0.458, 16.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=7 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(C, D), follows(A, C) )
%   | | then return 0.1003837636931264;  // std dev = 2.596, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | else return 0.22844828619837199;  // std dev = 1.982, 17.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | else if ( follows(E, C), follows(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, C) )
%   | | | then return 0.2083981235195204;  // std dev = 1.789, 15.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=10 */
%   | | | else return 0.5198226502741238;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return -0.018793352791102114;  // std dev = 2.267, 30.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=7 */
%   | else if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, H) )
%   | | | then return 0.26989005010495554;  // std dev = 2.213, 24.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=17 */
%   | | | else return -0.11734668244150462;  // std dev = 1.196, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, A) )
%   | then return 0.08418801843245924;  // std dev = 3.120, 40.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=20 */
%   | else return 0.07463682434632661;  // std dev = 2.530, 35.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=14 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A) )
%   | | then if ( follows(F, E) )
%   | | | then return 0.10015895049682001;  // std dev = 2.581, 31.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=17 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G) )
%   | | | then return 0.18272390320980994;  // std dev = 1.513, 12.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return -0.00955487896377342;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then return 0.0791606283062013;  // std dev = 4.693, 102.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=52 */
%   else if ( follows(D, A), tweets(D, E) )
%   | then if ( follows(D, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.12759060912537334;  // std dev = 1.630, 12.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | | | else return -0.23556767296669825;  // std dev = 0.008, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return -0.007405256276538245;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.007405256276538245;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(D, A) )
%   | | then return 0.009880078177659046;  // std dev = 3.357, 46.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=24 */
%   | | else return 0.11282407008925917;  // std dev = 2.787, 40.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=21 */
%   | else if ( follows(A, C) )
%   | | then return -0.21077985207512284;  // std dev = 0.040, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.2684296566154416;  // std dev = 0.384, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( recursion_accounttype(E, B) )
%   | then if ( follows(E, F), follows(A, F) )
%   | | then return 0.07659558842549742;  // std dev = 2.035, 24.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=12 */
%   | | else return -0.10047956731908848;  // std dev = 1.308, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.0761468755056496;  // std dev = 3.726, 60.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=36 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return -0.016997621368806417;  // std dev = 2.267, 27.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=10 */
%   | | else if ( follows(F, D), recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -4.1595518157550027E-4;  // std dev = 0.880, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.12231027607066812;  // std dev = 1.781, 18.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=10 */
%   | | | else return -0.1992863206821947;  // std dev = 0.959, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.016397479295510237;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.016397479295510237;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */


Results
   AUC ROC   = 0.642542
   AUC PR    = 0.626959
   CLL	      = -0.646928
   Precision = 0.583333 at threshold = 0.5
   Recall    = 0.722222
   F1        = 0.64539


Total learning time: 1.739 seconds
Total inference time: 0.829 seconds
AUC ROC: 0.642542


Results scoring model
   AUC ROC   = 0.75026
   AUC PR    = 0.73458
   CLL	      = -0.602795
   Precision = 0.647059 at threshold = 0.5
   Recall    = 0.709677
   F1        = 0.676923


Total scoring time: 0.75 seconds
Parameter learned model CLL: -0.602795


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(D, A), follows(D, D)', 'false,false': 'follows(A, E), recursion_accounttype(E, B)', 'false,false,true': 'tweets(A, F)', 'false,false,false': 'follows(G, A), follows(H, G)'}, {'true': [3.795, 24, 36], 'false,true': [0.0, 0, 0], 'false,false,true,true': [2.07, 15, 6], 'false,false,true,false': [0.943, 8, 1], 'false,false,false,true': [2.0, 8, 8], 'false,false,false,false': [2.068, 7, 11]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), tweets(A, E)', 'false': 'follows(F, A), follows(A, F)', 'false,true': 'follows(A, A)', 'false,false': 'follows(A, G)', 'false,false,false': 'follows(H, A)'}, {'true,true': [3.505, 25, 25], 'true,false': [2.321, 16, 9], 'false,true,true': [0.0, 0, 0], 'false,true,false': [1.807, 6, 7], 'false,false,true': [0.411, 3, 11], 'false,false,false,true': [1.984, 8, 8], 'false,false,false,false': [1.155, 4, 2]}], ['accounttype(A, B)', {'': 'tweets(A, C), follows(D, A)', 'true': 'follows(E, D), recursion_accounttype(E, B)', 'true,false': 'follows(A, D)', 'true,false,false': 'follows(D, D)', 'false': 'follows(A, F), recursion_accounttype(F, B)', 'false,false': 'follows(A, G), follows(G, G)'}, {'true,true': [4.268, 36, 38], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [0.826, 1, 3], 'false,true': [2.312, 16, 9], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.474, 8, 12]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A)', 'false,false,false': 'follows(A, F), recursion_accounttype(F, B)'}, {'true': [0.491, 24, 36], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.467, 16, 10], 'false,false,true': [0.426, 5, 2], 'false,false,false,true': [1.517, 10, 3], 'false,false,false,false': [1.995, 7, 11]}], ['accounttype(A, B)', {'': 'tweets(A, C), follows(A, D)', 'true': 'follows(D, E), recursion_accounttype(E, B)', 'true,false': 'follows(D, A)', 'true,false,false': 'recursion_accounttype(D, B)', 'false': 'follows(F, A), recursion_accounttype(F, B)', 'false,false': 'follows(G, A)', 'false,false,true': 'follows(H, G), recursion_accounttype(H, B)'}, {'true,true': [4.116, 35, 36], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.857, 3, 1], 'true,false,false,false': [0.908, 1, 4], 'false,true': [2.059, 6, 14], 'false,false,true,true': [0.097, 6, 0], 'false,false,true,false': [0.0, 2, 0], 'false,false,false': [0.458, 9, 7]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(A, D), follows(D, A)', 'true,true': 'follows(C, D), follows(A, C)', 'true,false': 'follows(E, C), follows(E, E)', 'true,false,false': 'follows(F, C)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(A, A)', 'false,false,false': 'follows(A, H)'}, {'true,true,true': [2.596, 13, 14], 'true,true,false': [1.982, 6, 11], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.789, 5, 10], 'true,false,false,false': [0.0, 0, 1], 'false,true': [2.267, 23, 7], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [2.213, 7, 17], 'false,false,false,false': [1.196, 8, 2]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), follows(D, A)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A)', 'false,false,true': 'follows(F, E)', 'false,false,false': 'follows(A, G)'}, {'true,true': [3.12, 20, 20], 'true,false': [2.53, 21, 14], 'false,true': [0.0, 0, 0], 'false,false,true,true': [2.581, 14, 17], 'false,false,true,false': [0.0, 0, 0], 'false,false,false,true': [1.513, 3, 9], 'false,false,false,false': [1.155, 4, 2]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'false': 'follows(D, A), tweets(D, E)', 'false,true': 'follows(D, D)', 'false,true,false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, F)', 'false,false,true': 'tweets(G, F), recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A), recursion_accounttype(H, B)'}, {'true': [4.693, 50, 52], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [1.63, 4, 8], 'false,true,false,false': [0.008, 4, 0], 'false,false,true,true': [0.816, 2, 1], 'false,false,true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.816, 2, 1]}], ['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(D, A)', 'true,false': 'follows(A, C)', 'false': 'recursion_accounttype(E, B)', 'false,true': 'follows(E, F), follows(A, F)'}, {'true,true,true': [3.357, 22, 24], 'true,true,false': [2.787, 19, 21], 'true,false,true': [0.04, 3, 0], 'true,false,false': [0.384, 1, 3], 'false,true,true': [2.035, 12, 12], 'false,true,false': [1.308, 5, 2], 'false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'follows(F, D), recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)', 'false,false,false': 'tweets(A, I)'}, {'true': [3.726, 24, 36], 'false,true,true': [2.267, 17, 10], 'false,true,false,true': [0.0, 0, 0], 'false,true,false,false': [0.88, 4, 2], 'false,false,true,true': [1.781, 8, 10], 'false,false,true,false': [0.959, 5, 2], 'false,false,false,true': [0.816, 2, 1], 'false,false,false,false': [0.816, 2, 1]}]]
[{'': [0.24000000000000174, 0.2412109374999995], 'false': [nan, 0.2412109374999995], 'false,false': [0.17888888888888904, 0.246539792387543], 'false,false,false': [0.24999999999999997, 0.23765432098765396], 'false,false,true': [0.20408163265306134, 0.09876543209876548]}, {'': [0.23847552276381853, 0.24416439956427982], 'false': [0.2511959134799098, 0.2413419430953979], 'false,true': [nan, 0.2511959134799098], 'false,false': [0.1689884853942782, 0.24546048573034043], 'false,false,false': [0.2460609441887428, 0.2222222222222223], 'true': [0.24573119345159505, 0.21555298790413438]}, {'': [0.24496025033506927, 0.22430409981345234], 'true': [0.24610638540268373, 0.21790597276242027], 'false': [0.21378511838247882, 0.2250519466558662], 'false,false': [nan, 0.2250519466558662], 'true,false': [0.0, 0.17063316198991124], 'true,false,false': [nan, 0.17063316198991124]}, {'': [0.24076786426376343, 0.21554026398700782], 'false': [0.21776165546796197, 0.2140202556445061], 'false,true': [nan, 0.21776165546796197], 'false,false': [0.18119072508123665, 0.21506177764962764], 'false,false,false': [0.17703831562992375, 0.22115530813554884]}, {'': [0.23541128902144748, 0.2185719839039926], 'true': [0.23857644037404352, 0.209908820492278], 'false': [0.21200517081379075, 0.16817422384467298], 'true,false': [nan, 0.209908820492278], 'true,false,false': [0.18362065705437716, 0.16478807281231506], 'false,false': [0.0017495099138877743, 0.20951848304221274], 'false,false,true': [0.0015600376607492101, 0.0]}, {'': [0.23673517896712293, 0.20328032647427502], 'true': [0.24637244440940187, 0.20577122276429421], 'true,true': [0.24962248124972508, 0.23114666455693236], 'true,false': [nan, 0.20577122276429421], 'true,false,false': [0.2134277270403933, 0.0], 'false': [0.17125631778462042, 0.21721572807862266], 'false,false': [nan, 0.21721572807862266], 'false,false,false': [0.2039710773866138, 0.14315421653949661]}, {'': [0.21519676161709456, 0.21299177195444044], 'true': [0.24340851220375231, 0.1829061074487772], 'false': [nan, 0.21299177195444038], 'false,false': [0.21495903551819104, 0.2093878357585086], 'false,false,true': [0.21495903551819104, nan], 'false,false,false': [0.19064693250193301, 0.22222222222222224]}, {'': [0.21590827792347494, 0.19980524868694685], 'false': [0.19086592092751317, 0.2222222222222222], 'false,false': [0.2222222222222222, 0.2222222222222222], 'false,false,true': [0.2222222222222222, nan], 'false,false,false': [nan, 0.2222222222222222], 'false,true': [nan, 0.19086592092751317], 'false,true,false': [0.22151123758810545, 1.7017556687808078e-05]}, {'': [0.21769859456139257, 0.19427397637968066], 'true': [0.22395673264180735, 0.1407869895644859], 'true,true': [0.24492392171035626, 0.19417605344958075], 'false': [0.19427397637968066, nan], 'false,true': [0.1725953292607595, 0.24432545492855892], 'true,false': [0.0005220697029360474, 0.1475677852237402]}, {'': [0.23144661601279287, 0.1858272847026384], 'false': [0.1792453378593054, 0.19187269728020073], 'false,false': [0.18454009090449364, 0.22222222222222224], 'false,false,false': [0.2222222222222222, 0.2222222222222222], 'false,false,true': [0.17623983326809645, 0.1314180633899668], 'false,true': [0.19037140849724674, 0.12895305954476027], 'false,true,false': [nan, 0.12895305954476027]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
2;;accounttype(A, B) :- tweets(A, C), follows(D, A).;true;true
2;true;follows(E, D), recursion_accounttype(E, B).;true;true
2;true,false;follows(A, D).;true;true
4;;accounttype(A, B) :- tweets(A, C), follows(A, D).;true;true
4;false;follows(F, A), recursion_accounttype(F, B).;true;true
4;false,false;follows(G, A).;true;true
4;false,false,true;follows(H, G), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
5;true;follows(A, D), follows(D, A).;true;true
5;true,false;follows(F, C).;true;true
7;;accounttype(A, B) :- follows(A, C).;true;true
7;false;follows(D, A), tweets(D, E).;true;true
7;false,true;recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(C, A).;true;true
8;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;true,false;follows(A, C).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(C, F) )
%   | | then if ( tweets(D, E), tweets(C, E) )
%   | | | then return 0.5686752508889852;  // std dev = 2.796, 38.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=27 */
%   | | | else return -0.016851064900487794;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then return 0.21109011157010057;  // std dev = 0.478, 17.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=6 */
%   | | else return -0.06492798797741087;  // std dev = 0.266, 13.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=1 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(J, I), follows(J, A) )
%   | | | then return 0.4295775065280837;  // std dev = 1.309, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | | else return 0.6228548174524535;  // std dev = 1.749, 17.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=13 */
%   | | else return 0.058148935099512175;  // std dev = 0.400, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(F, C) )
%   | | then if ( tweets(D, E), follows(D, C) )
%   | | | then return 0.4950169690778296;  // std dev = 2.794, 39.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=28 */
%   | | | else return -0.15211750629042348;  // std dev = 0.080, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.7262955297143819;  // std dev = 0.051, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then if ( follows(G, H), tweets(A, I) )
%   | | then return 0.19381786352481536;  // std dev = 0.475, 17.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=6 */
%   | | else return -0.07082493243360569;  // std dev = 0.261, 13.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=1 */
%   | else if ( follows(A, J) )
%   | | then if ( follows(K, A), follows(K, J) )
%   | | | then return 0.36887697659770574;  // std dev = 1.309, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | | else return 0.5291399941450576;  // std dev = 1.749, 17.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=13 */
%   | | else return 0.05092203251355425;  // std dev = 0.400, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), follows(D, A) )
%   then if ( follows(E, D), recursion_accounttype(E, B) )
%   | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.3173080550553459;  // std dev = 3.078, 46.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=28 */
%   | | | else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.2354809680574233;  // std dev = 2.178, 21.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=10 */
%   | | | else return -0.15565370239533147;  // std dev = 3.73e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( follows(A, D) )
%   | | then return -0.19859608819267788;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.49895246767467716;  // std dev = 0.741, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(I, A), recursion_accounttype(I, B) )
%   | then return 0.4056817305329273;  // std dev = 0.277, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.017719003300590147;  // std dev = 0.369, 17.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=3 */
%   | | else return 0.3046922964329973;  // std dev = 0.460, 19.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, C) )
%   | | then if ( follows(A, C), follows(D, E) )
%   | | | then return 0.28541782226658247;  // std dev = 1.960, 23.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=15 */
%   | | | else return -0.09886488510376869;  // std dev = 1.075, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | else return 0.38703354275459817;  // std dev = 0.371, 24.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=19 */
%   | else return -0.12091270607256506;  // std dev = 0.067, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return 0.049711381413840586;  // std dev = 0.406, 30.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=7 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.3016956554447906;  // std dev = 1.801, 15.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=10 */
%   | | | else return 0.58499503887657;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, J), tweets(A, K) )
%   | | | then return 0.323044865238728;  // std dev = 0.853, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return -0.020353942738704885;  // std dev = 1.305, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), follows(A, D) )
%   then if ( follows(A, E), recursion_accounttype(E, B) )
%   | then if ( follows(E, F) )
%   | | then if ( recursion_accounttype(F, B), follows(F, E) )
%   | | | then return 0.20473324752994615;  // std dev = 2.876, 42.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=24 */
%   | | | else return 0.016640066974986108;  // std dev = 1.078, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else return -0.12363136683289844;  // std dev = 0.652, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return -0.07957084141832464;  // std dev = 0.720, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( follows(H, A), follows(A, H) )
%   | | | then return 0.21900598761682713;  // std dev = 1.577, 11.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=7 */
%   | | | else return 0.251677887355512;  // std dev = 1.216, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   else if ( follows(I, A), recursion_accounttype(I, B) )
%   | then return 0.2410104283420647;  // std dev = 0.329, 20.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=14 */
%   | else if ( follows(J, A) )
%   | | then return -0.1460912264620639;  // std dev = 0.022, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0.14742533981638514;  // std dev = 0.421, 16.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=7 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then return 0.1257340439389053;  // std dev = 0.389, 44.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=25 */
%   | else return 0.19154993831801445;  // std dev = 0.384, 16.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=11 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then if ( follows(A, F), follows(F, E) )
%   | | then if ( follows(G, A), follows(G, F) )
%   | | | then return -0.182155842436777;  // std dev = 0.188, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0.358178334903886;  // std dev = 1.492, 10.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=6 */
%   | | else return -0.10411360999672457;  // std dev = 0.276, 11.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( tweets(A, J) )
%   | | | then return 0.17399200738916;  // std dev = 1.800, 15.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=10 */
%   | | | else return 0.40393217355512034;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, K), follows(A, L) )
%   | | | then return 0.18059343684517642;  // std dev = 0.853, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return -0.02737088612274002;  // std dev = 1.293, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, A) )
%   | then if ( follows(A, E), follows(E, C) )
%   | | then if ( recursion_accounttype(D, B), follows(D, C) )
%   | | | then return 0.1761959349254023;  // std dev = 1.343, 10.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=7 */
%   | | | else return -0.09605800907825031;  // std dev = 1.510, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | | else if ( follows(D, C), tweets(A, F) )
%   | | | then return 0.07402695354283349;  // std dev = 1.437, 12.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=7 */
%   | | | else return 0.39414607830662607;  // std dev = 0.142, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.2775271426087752;  // std dev = 0.285, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   else if ( tweets(A, G), follows(A, H) )
%   | then if ( follows(H, I), tweets(I, G) )
%   | | then if ( recursion_accounttype(I, B), follows(I, H) )
%   | | | then return 0.09184068964074067;  // std dev = 2.364, 30.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=14 */
%   | | | else return -0.11404661119947448;  // std dev = 0.643, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.26369847588594747;  // std dev = 1.024, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.02025633369892463;  // std dev = 0.344, 24.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=7 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( recursion_accounttype(D, B), recursion_accounttype(E, B) )
%   | | then if ( follows(E, D) )
%   | | | then return 0.1198688187744974;  // std dev = 2.854, 51.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=31 */
%   | | | else return -0.18764476829506396;  // std dev = 0.057, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( follows(D, A), follows(A, E) )
%   | | | then return -0.05147710640152575;  // std dev = 1.560, 21.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=5 */
%   | | | else return 0.12699908723251846;  // std dev = 1.595, 20.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=12 */
%   | else if ( follows(F, A) )
%   | | then return 0.07645368853439032;  // std dev = 0.749, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.10818202192826114;  // std dev = 0.904, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else if ( follows(G, A), tweets(G, H) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.10704839566287734;  // std dev = 0.368, 12.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | | else return -0.1312471600300209;  // std dev = 0.049, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.11343859493111004;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.061865240889530965;  // std dev = 0.370, 59.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=35 */
%   | | else return 0.018004211307691753;  // std dev = 0.388, 27.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=10 */
%   | else return 0.09598447915875351;  // std dev = 0.313, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( follows(A, G), follows(G, F) )
%   | | then if ( tweets(A, H) )
%   | | | then return 0.13484073356491066;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.05375931748106096;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return -0.15795950465610833;  // std dev = 0.065, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then return 0.19830521930317624;  // std dev = 0.322, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else if ( follows(A, K) )
%   | | | then return -0.08310961408072136;  // std dev = 0.903, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.09336284193694218;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(C, F) )
%   | | then return 0.036524449859501505;  // std dev = 0.415, 42.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=22 */
%   | | else return 0.1748924605292127;  // std dev = 0.271, 12.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | else return -0.06717296255991852;  // std dev = 0.258, 21.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=3 */
%   else if ( follows(G, A), follows(A, G) )
%   | then if ( follows(A, H), follows(G, H) )
%   | | then if ( follows(H, A) )
%   | | | then return -0.19671352335249923;  // std dev = 0.814, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.11350161397651662;  // std dev = 1.068, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.12308295841190064;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then return 0.1568794081260716;  // std dev = 0.323, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else if ( tweets(A, K), follows(A, L) )
%   | | | then return 0.16634949639030513;  // std dev = 0.886, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.018661308284562673;  // std dev = 1.805, 23.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=10 */


Results
   AUC ROC   = 0.728269
   AUC PR    = 0.66269
   CLL	      = -0.595657
   Precision = 0.668874 at threshold = 0.5
   Recall    = 0.801587
   F1        = 0.729242


Total learning time: 15.561 seconds
Total inference time: 1.348 seconds
AUC ROC: 0.728269


Results scoring model
   AUC ROC   = 0.903226
   AUC PR    = 0.897064
   CLL	      = -0.452145
   Precision = 0.806452 at threshold = 0.5
   Recall    = 0.806452
   F1        = 0.806452


Total scoring time: 1.362 seconds
Refined model CLL: -0.452145


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.728269
   AUC PR    = 0.66269
   CLL	      = -0.595657
   Precision = 0.668874 at threshold = 0.5
   Recall    = 0.801587
   F1        = 0.729242


Total learning time: 19.412 seconds
Total inference time: 1.348 seconds
AUC ROC: 0.728269
Total revision time: 19.412
Best scored revision CLL: -0.452145


Dataset: 7_yeast_twitter, Fold: 2, Type: Transfer (trRDN-B), Time: 03:36:23
{'AUC ROC': 0.728269, 'AUC PR': 0.66269, 'CLL': -0.595657, 'Precision': [0.668874, 0.5], 'Recall': 0.801587, 'F1': 0.729242, 'Learning time': 19.412, 'Inference time': 1.348, 'parameter_0.4': {'AUC ROC': 0.642542, 'AUC PR': 0.626959, 'CLL': -0.646928, 'Precision': [0.583333, 0.5], 'Recall': 0.722222, 'F1': 0.64539, 'Learning time': 1.739, 'Inference time': 0.829}}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
0;false;interaction(D, A), interaction(D, D).;true;true
0;false,true;interaction(A, E), interaction(E, D).;true;true
0;false,true,true;interaction(A, A).;false;false
0;false,true,false;enzyme(A, F).;false;false
0;false,false;interaction(A, G), recursion_proteinclass(G, B).;true;true
0;false,false,true;complex(A, H).;false;false
0;false,false,false;interaction(I, A), interaction(J, I).;false;false
1;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
1;true;interaction(D, A), complex(A, E).;false;false
1;false;interaction(F, A), interaction(A, F).;true;true
1;false,true;enzyme(A, G), enzyme(F, G).;false;true
1;false,true,false;interaction(A, A).;false;false
1;false,false;interaction(A, H), enzyme(H, I).;true;true
1;false,false,true;phenotype(A, J), phenotype(H, K).;false;false
1;false,false,false;interaction(L, A), location(A, M).;false;false
2;;proteinclass(A, B) :- complex(A, C), interaction(D, A).;true;true
2;true;interaction(E, D), recursion_proteinclass(E, B).;false;true
2;true,false;interaction(A, D).;false;true
2;true,false,false;interaction(D, D), enzyme(A, F).;false;false
2;false;interaction(A, G), recursion_proteinclass(G, B).;false;true
2;false,false;interaction(A, H), interaction(H, H).;true;true
2;false,false,true;interaction(H, A).;false;false
2;false,false,false;phenotype(A, I), enzyme(A, J).;false;false
3;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
3;true;phenotype(C, D), enzyme(C, E).;false;false
3;false;interaction(A, F), interaction(F, A).;true;true
3;false,true;interaction(A, A).;false;true
3;false,true,false;enzyme(F, G), enzyme(A, G).;false;false
3;false,false;interaction(H, A), enzyme(H, I).;true;true
3;false,false,true;enzyme(A, I).;false;false
3;false,false,false;interaction(A, J), recursion_proteinclass(J, B).;false;false
4;;proteinclass(A, B) :- complex(A, C), interaction(A, D).;true;true
4;true;interaction(D, E), recursion_proteinclass(E, B).;false;true
4;true,false;interaction(D, A).;false;true
4;true,false,false;recursion_proteinclass(D, B).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;false;true
4;false,false;interaction(G, A), enzyme(G, H).;true;true
4;false,false,true;interaction(I, G), recursion_proteinclass(I, B).;false;false
4;false,false,false;phenotype(A, J), enzyme(A, K).;false;false
5;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
5;true;interaction(A, D), interaction(D, A).;true;true
5;true,true;interaction(C, D), interaction(A, C).;false;false
5;true,false;interaction(E, C), interaction(E, E).;false;true
5;true,false,false;enzyme(A, F), interaction(G, C).;false;false
5;false;interaction(A, H), recursion_proteinclass(H, B).;false;true
5;false,false;interaction(A, A).;false;true
5;false,false,false;interaction(A, I), enzyme(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
6;true;enzyme(C, D), phenotype(C, E).;true;true
6;true,true;enzyme(A, D).;false;false
6;true,false;interaction(C, F), interaction(F, A).;false;false
6;false;interaction(A, A).;false;true
6;false,false;interaction(G, A), enzyme(G, H).;true;true
6;false,false,true;interaction(I, G), phenotype(G, J).;false;false
6;false,false,false;interaction(A, K), enzyme(K, L).;false;false
7;;proteinclass(A, B) :- interaction(A, C), location(A, D).;false;true
7;false;interaction(E, A), complex(E, F).;true;true
7;false,true;interaction(E, E), enzyme(A, G).;true;true
7;false,true,true;interaction(E, H), recursion_proteinclass(H, B).;false;false
7;false,true,false;recursion_proteinclass(E, B).;false;false
7;false,false;complex(A, I), location(A, J).;true;true
7;false,false,true;complex(K, I), recursion_proteinclass(K, B).;false;false
7;false,false,false;interaction(L, A), recursion_proteinclass(L, B).;false;false
8;;proteinclass(A, B) :- interaction(C, A).;true;true
8;true;interaction(D, C), recursion_proteinclass(D, B).;true;true
8;true,true;interaction(D, A).;false;false
8;true,false;interaction(A, C).;false;true
8;true,false,false;enzyme(C, E), phenotype(A, F).;false;false
8;false;location(A, G).;true;false
8;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
8;false,true,true;interaction(H, I), interaction(A, I).;false;false
9;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
9;false;interaction(D, A), enzyme(D, E).;true;true
9;false,true;location(A, F), location(D, F).;true;true
9;false,true,true;interaction(G, D), recursion_proteinclass(G, B).;false;false
9;false,true,false;interaction(H, D), recursion_proteinclass(H, B).;false;false
9;false,false;phenotype(A, I), interaction(A, J).;true;true
9;false,false,true;interaction(J, K), recursion_proteinclass(K, B).;false;false
9;false,false,false;complex(A, L), location(A, M).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.4726067664248142;  // std dev = 4.434, 83.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=51 */
%   else if ( follows(D, A), follows(D, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.1308762078267851;  // std dev = 2.558, 33.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=9 */
%   | | | else return -0.06492798797741087;  // std dev = 0.961, 13.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=1 */
%   | | else if ( follows(G, A), follows(H, G) )
%   | | | then return 0.274815601766179;  // std dev = 2.415, 24.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=10 */
%   | | | else return 0.5248156017661783;  // std dev = 2.708, 33.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=22 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then return 0.2756940765600985;  // std dev = 4.120, 70.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=33 */
%   | else return 0.22976947007069354;  // std dev = 2.905, 38.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=15 */
%   else if ( follows(F, A), follows(A, F) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.24693002006238637;  // std dev = 2.280, 21.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=9 */
%   | else if ( follows(A, G) )
%   | | then return 0.653682507352645;  // std dev = 0.338, 23.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=20 */
%   | | else if ( follows(H, A) )
%   | | | then return 0.32010274160550306;  // std dev = 2.261, 21.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=11 */
%   | | | else return 0.16624432419067997;  // std dev = 1.754, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), follows(D, A) )
%   then if ( follows(E, D), recursion_accounttype(E, B) )
%   | then return 0.2452036166180244;  // std dev = 5.030, 104.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=51 */
%   | else if ( follows(A, D) )
%   | | then return -0.20835415012852182;  // std dev = 0.013, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( follows(D, D) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5121093977834451;  // std dev = 0.824, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return 0.1959026767364965;  // std dev = 2.889, 38.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=15 */
%   | else if ( follows(A, G), follows(G, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.3311847796241893;  // std dev = 0.457, 38.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=24 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.30340922213874566;  // std dev = 0.485, 83.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=51 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.0643629960535106;  // std dev = 0.453, 39.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=12 */
%   | else if ( follows(E, A) )
%   | | then return -0.04536003895465632;  // std dev = 0.402, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.04962408747233601;  // std dev = 2.087, 23.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
%   | | | else return 0.2833037865307854;  // std dev = 2.570, 33.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=22 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), follows(A, D) )
%   then if ( follows(D, E), recursion_accounttype(E, B) )
%   | then return 0.16753273203685315;  // std dev = 4.968, 106.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=53 */
%   | else if ( follows(D, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return -0.07162791353878781;  // std dev = 0.890, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.3272645382744213;  // std dev = 0.926, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.3383106130496389;  // std dev = 2.403, 28.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=20 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | | then return -0.2550179875187505;  // std dev = 0.092, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return -0.23209272871466932;  // std dev = 0.074, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.10304197457983204;  // std dev = 0.441, 32.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=15 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(C, D), follows(A, C) )
%   | | then return 0.15865440064710967;  // std dev = 3.038, 38.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=22 */
%   | | else return 0.18919945141039599;  // std dev = 2.325, 23.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=14 */
%   | else if ( follows(E, C), follows(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, C) )
%   | | | then return 0.19666697154378537;  // std dev = 2.114, 21.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=14 */
%   | | | else return 0.5171552147670717;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return -0.03286313228572978;  // std dev = 2.753, 46.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=10 */
%   | else if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, H) )
%   | | | then return 0.25232385587373113;  // std dev = 2.723, 40.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=27 */
%   | | | else return -0.06722276378048432;  // std dev = 1.791, 17.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=5 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, A) )
%   | then return 0.08262619044000093;  // std dev = 3.669, 58.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=29 */
%   | else return 0.06458187556420285;  // std dev = 3.063, 50.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=19 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A) )
%   | | then if ( follows(F, E) )
%   | | | then return 0.08778799127457243;  // std dev = 3.120, 45.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=23 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G) )
%   | | | then return 0.2503681182950928;  // std dev = 1.617, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | | else return -0.002694946500912262;  // std dev = 1.754, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then return 0.08054519715413103;  // std dev = 5.585, 152.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=77 */
%   else if ( follows(D, A), tweets(D, E) )
%   | then if ( follows(D, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.10362707121518773;  // std dev = 1.963, 17.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | | | else return -0.2283203902093357;  // std dev = 0.013, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.11332898794372416;  // std dev = 1.225, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10095672634199014;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(D, A) )
%   | | then return 0.05652513165785711;  // std dev = 3.823, 61.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=35 */
%   | | else return 0.052982058454531286;  // std dev = 3.487, 60.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=27 */
%   | else if ( follows(A, C) )
%   | | then return -0.24474235045597476;  // std dev = 0.139, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.2838055763029568;  // std dev = 0.386, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( recursion_accounttype(E, B) )
%   | then if ( follows(E, F), follows(A, F) )
%   | | then return 0.10009248941092079;  // std dev = 2.555, 42.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=23 */
%   | | else return -0.0525719630316923;  // std dev = 1.866, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.0808105505435577;  // std dev = 4.380, 83.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=51 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return -0.03509042350469207;  // std dev = 2.698, 39.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=12 */
%   | | else if ( follows(F, D), recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.053942948167825355;  // std dev = 0.951, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.15242524864208307;  // std dev = 2.236, 33.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=21 */
%   | | | else return -0.238951311148787;  // std dev = 0.964, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.09882465356437242;  // std dev = 1.225, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return -0.06523800561475175;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */


Results
   AUC ROC   = 0.65325
   AUC PR    = 0.627825
   CLL	      = -0.643086
   Precision = 0.589286 at threshold = 0.5
   Recall    = 0.785714
   F1        = 0.673469


Total learning time: 1.986 seconds
Total inference time: 0.943 seconds
AUC ROC: 0.65325


Results scoring model
   AUC ROC   = 0.7772
   AUC PR    = 0.759375
   CLL	      = -0.588883
   Precision = 0.669903 at threshold = 0.5
   Recall    = 0.741935
   F1        = 0.704082


Total scoring time: 0.861 seconds
Parameter learned model CLL: -0.588883


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(D, A), follows(D, D)', 'false,false': 'follows(A, E), recursion_accounttype(E, B)', 'false,false,true': 'tweets(A, F)', 'false,false,false': 'follows(G, A), follows(H, G)'}, {'true': [4.434, 32, 51], 'false,true': [0.0, 0, 0], 'false,false,true,true': [2.558, 24, 9], 'false,false,true,false': [0.961, 12, 1], 'false,false,false,true': [2.415, 14, 10], 'false,false,false,false': [2.708, 11, 22]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), tweets(A, E)', 'false': 'follows(F, A), follows(A, F)', 'false,true': 'follows(A, A)', 'false,false': 'follows(A, G)', 'false,false,false': 'follows(H, A)'}, {'true,true': [4.12, 37, 33], 'true,false': [2.905, 23, 15], 'false,true,true': [0.0, 0, 0], 'false,true,false': [2.28, 12, 9], 'false,false,true': [0.338, 3, 20], 'false,false,false,true': [2.261, 10, 11], 'false,false,false,false': [1.754, 8, 5]}], ['accounttype(A, B)', {'': 'tweets(A, C), follows(D, A)', 'true': 'follows(E, D), recursion_accounttype(E, B)', 'true,false': 'follows(A, D)', 'true,false,false': 'follows(D, D)', 'false': 'follows(A, F), recursion_accounttype(F, B)', 'false,false': 'follows(A, G), follows(G, G)'}, {'true,true': [5.03, 53, 51], 'true,false,true': [0.013, 2, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [0.824, 1, 3], 'false,true': [2.889, 23, 15], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.457, 14, 24]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A)', 'false,false,false': 'follows(A, F), recursion_accounttype(F, B)'}, {'true': [0.485, 32, 51], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.453, 27, 12], 'false,false,true': [0.402, 6, 2], 'false,false,false,true': [2.087, 17, 6], 'false,false,false,false': [2.57, 11, 22]}], ['accounttype(A, B)', {'': 'tweets(A, C), follows(A, D)', 'true': 'follows(D, E), recursion_accounttype(E, B)', 'true,false': 'follows(D, A)', 'true,false,false': 'recursion_accounttype(D, B)', 'false': 'follows(F, A), recursion_accounttype(F, B)', 'false,false': 'follows(G, A)', 'false,false,true': 'follows(H, G), recursion_accounttype(H, B)'}, {'true,true': [4.968, 53, 53], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.89, 4, 1], 'true,false,false,false': [0.926, 1, 4], 'false,true': [2.403, 8, 20], 'false,false,true,true': [0.092, 7, 0], 'false,false,true,false': [0.074, 3, 0], 'false,false,false': [0.441, 17, 15]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(A, D), follows(D, A)', 'true,true': 'follows(C, D), follows(A, C)', 'true,false': 'follows(E, C), follows(E, E)', 'true,false,false': 'follows(F, C)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(A, A)', 'false,false,false': 'follows(A, H)'}, {'true,true,true': [3.038, 16, 22], 'true,true,false': [2.325, 9, 14], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [2.114, 7, 14], 'true,false,false,false': [0.0, 0, 1], 'false,true': [2.753, 36, 10], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [2.723, 13, 27], 'false,false,false,false': [1.791, 12, 5]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), follows(D, A)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A)', 'false,false,true': 'follows(F, E)', 'false,false,false': 'follows(A, G)'}, {'true,true': [3.669, 29, 29], 'true,false': [3.063, 31, 19], 'false,true': [0.0, 0, 0], 'false,false,true,true': [3.12, 22, 23], 'false,false,true,false': [0.0, 0, 0], 'false,false,false,true': [1.617, 3, 17], 'false,false,false,false': [1.754, 8, 5]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'false': 'follows(D, A), tweets(D, E)', 'false,true': 'follows(D, D)', 'false,true,false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, F)', 'false,false,true': 'tweets(G, F), recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A), recursion_accounttype(H, B)'}, {'true': [5.585, 75, 77], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [1.963, 6, 11], 'false,true,false,false': [0.013, 4, 0], 'false,false,true,true': [1.225, 3, 3], 'false,false,true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.195, 5, 2]}], ['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(D, A)', 'true,false': 'follows(A, C)', 'false': 'recursion_accounttype(E, B)', 'false,true': 'follows(E, F), follows(A, F)'}, {'true,true,true': [3.823, 26, 35], 'true,true,false': [3.487, 33, 27], 'true,false,true': [0.139, 5, 0], 'true,false,false': [0.386, 1, 3], 'false,true,true': [2.555, 19, 23], 'false,true,false': [1.866, 9, 5], 'false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'follows(F, D), recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)', 'false,false,false': 'tweets(A, I)'}, {'true': [4.38, 32, 51], 'false,true,true': [2.698, 27, 12], 'false,true,false,true': [0.0, 0, 0], 'false,true,false,false': [0.951, 6, 2], 'false,false,true,true': [2.236, 12, 21], 'false,false,true,false': [0.964, 8, 2], 'false,false,false,true': [1.225, 3, 3], 'false,false,false,false': [1.195, 5, 2]}]]
[{'': [0.2368994048483088, 0.24149307192006828], 'false': [nan, 0.24149307192006828], 'false,false': [0.170132325141777, 0.2462296091104963], 'false,false,false': [0.24305555555555558, 0.2222222222222232], 'false,false,true': [0.19834710743801665, 0.07100591715976336]}, {'': [0.2357524362256254, 0.24066231306088445], 'false': [0.24750194492058236, 0.23011399801701687], 'false,true': [nan, 0.24750194492058236], 'true': [0.2424687152017868, 0.22201335389624247], 'false,false': [0.11413962469847197, 0.246433345311531], 'false,false,false': [0.24341595787448306, 0.23668639053254442]}, {'': [0.2425118100599825, 0.2187588340350147], 'true': [0.24328159388157466, 0.2284922946701755], 'true,false': [9.012394877437602e-05, 0.16967080540757645], 'false': [0.21958522974699, 0.2087818146421816], 'false,false': [nan, 0.2087818146421816], 'true,false,false': [nan, 0.16967080540757645]}, {'': [0.23547110901148244, 0.20959334272331498], 'false': [0.20528941841260848, 0.2088789723566989], 'false,false': [0.16135324280470462, 0.2089003854658636], 'false,false,false': [0.18929221497567153, 0.2001391389623806], 'false,true': [nan, 0.20528941841260848]}, {'': [0.230547206312939, 0.20925689563385647], 'true': [0.23284129678480184, 0.20478858072720424], 'false': [0.20621873433827562, 0.17060766393197146], 'true,false': [nan, 0.20478858072720424], 'true,false,false': [0.15836831818758762, 0.17165124921004424], 'false,false': [0.0015074353064136292, 0.1940874217695641], 'false,false,true': [0.0012108343622198672, 0.0018316069323352318]}, {'': [0.23185242034974188, 0.19744194437488982], 'true': [0.24013485937838286, 0.20764822841886046], 'true,true': [0.24289748467852332, 0.23498930873264873], 'true,false': [nan, 0.20764822841886046], 'true,false,false': [0.21286747956666047, 0.0], 'false': [0.16473297313109442, 0.20773607420080434], 'false,false': [nan, 0.2077360742008042], 'false,false,false': [0.1853989470844773, 0.1886378504393691]}, {'': [0.21156303322086695, 0.20520595203437844], 'true': [0.23204304309048898, 0.18763136396320132], 'false': [nan, 0.2052059520343783], 'false,false': [0.2163514710776559, 0.18772579883861962], 'false,false,true': [0.2163514710776559, nan], 'false,false,false': [0.13067317508813467, 0.23668639053254445]}, {'': [0.20522349916931584, 0.21475018198362847], 'false': [0.20048147367288804, 0.2366863905325444], 'false,false': [0.24999999999999997, 0.2040816326530612], 'false,false,true': [0.24999999999999997, nan], 'false,false,false': [nan, 0.2040816326530612], 'false,true': [nan, 0.20048147367288804], 'false,true,false': [0.22665482417326277, 4.4020166050096066e-05]}, {'': [0.21577203276203086, 0.18313074421179087], 'true': [0.22131521685118782, 0.13736270560872485], 'true,true': [0.23963977264908226, 0.20267892323271217], 'false': [0.18313074421179087, nan], 'false,true': [0.15542650142881756, 0.24876364628100925], 'true,false': [0.003859132164018941, 0.14904055525840454]}, {'': [0.2311346282260624, 0.17990552244472116], 'false': [0.17416410155413006, 0.1811997656698498], 'false,false': [0.16525041422958145, 0.23196404691822162], 'false,false,false': [0.25, 0.20408163265306117], 'false,true': [0.18662536572613364, 0.11312051765687253], 'false,false,true': [0.15154988074717365, 0.0929087984128458], 'false,true,false': [nan, 0.11312051765687253]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
2;;accounttype(A, B) :- tweets(A, C), follows(D, A).;true;true
2;true;follows(E, D), recursion_accounttype(E, B).;true;true
2;true,false;follows(A, D).;true;true
4;;accounttype(A, B) :- tweets(A, C), follows(A, D).;true;true
4;false;follows(F, A), recursion_accounttype(F, B).;true;true
4;false,false;follows(G, A).;true;true
4;false,false,true;follows(H, G), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
5;true;follows(A, D), follows(D, A).;true;true
5;true,false;follows(F, C).;true;true
7;;accounttype(A, B) :- follows(A, C).;true;true
7;false;follows(D, A), tweets(D, E).;true;true
7;false,true;recursion_accounttype(D, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, C) )
%   | | then if ( tweets(A, E), tweets(C, F) )
%   | | | then return 0.5188632208137969;  // std dev = 3.543, 56.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=37 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.024815601766178873;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | else return -0.1418510649004878;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.07554023944733845;  // std dev = 0.412, 46.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=10 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, A), follows(I, H) )
%   | | | then return 0.24276431971489695;  // std dev = 1.754, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
%   | | | else return 0.6729637499143272;  // std dev = 2.018, 27.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=22 */
%   | | else if ( follows(J, A) )
%   | | | then return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.24276431971489695;  // std dev = 1.754, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, C) )
%   | | then if ( tweets(A, E), tweets(C, F) )
%   | | | then return 0.44335750497272125;  // std dev = 3.543, 56.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=37 */
%   | | | else return 0.7194734122109542;  // std dev = 5.16e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.02176788419240575;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | else return -0.12544463852839138;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.06609369457227725;  // std dev = 0.412, 46.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=10 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), follows(I, A) )
%   | | | then return 0.2105717177991725;  // std dev = 1.754, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
%   | | | else return 0.5701063497272523;  // std dev = 2.018, 27.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=22 */
%   | | else if ( follows(J, A) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.2105717177991725;  // std dev = 1.754, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), follows(D, A) )
%   then if ( follows(E, D), recursion_accounttype(E, B) )
%   | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.3247698043495603;  // std dev = 3.720, 63.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=39 */
%   | | | else return -0.11231637819360639;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.027518544902159603;  // std dev = 1.561, 16.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=3 */
%   | | | else return 0.232281003705081;  // std dev = 2.063, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
%   | else if ( follows(A, D) )
%   | | then return -0.1831988816934296;  // std dev = 0.033, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return 0.5420405443484303;  // std dev = 0.829, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(I, A), recursion_accounttype(I, B) )
%   | then return 0.45264600367860913;  // std dev = 0.241, 13.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=11 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.062240767124381806;  // std dev = 0.416, 27.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=6 */
%   | | else return 0.3196187951026743;  // std dev = 0.447, 36.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=22 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, C) )
%   | | then if ( follows(A, E), follows(E, C) )
%   | | | then return 0.25886576196575495;  // std dev = 2.933, 42.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=28 */
%   | | | else return 0.40646989146796486;  // std dev = 1.968, 27.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=22 */
%   | | else return -0.03266763835129186;  // std dev = 0.880, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | else return -0.11768326319157646;  // std dev = 0.079, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return 0.047829868169877957;  // std dev = 0.410, 46.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=10 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( follows(G, A) )
%   | | | then return 0.17404555897594592;  // std dev = 2.106, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
%   | | | else return 0.4965509074136667;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.16815422601342733;  // std dev = 1.612, 13.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | | else return -0.048321229660742225;  // std dev = 1.276, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), follows(A, D) )
%   then if ( follows(E, A), follows(A, E) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then if ( recursion_accounttype(E, B), follows(A, F) )
%   | | | then return 0.15258790570447373;  // std dev = 2.493, 31.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=17 */
%   | | | else return -0.07974753033896259;  // std dev = 1.545, 17.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=4 */
%   | | else if ( follows(E, G), recursion_accounttype(G, B) )
%   | | | then return 0.2355125417354959;  // std dev = 2.621, 32.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=18 */
%   | | | else return -0.10843660550457239;  // std dev = 0.042, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(H, I), follows(A, I) )
%   | | | then return 0.34347707459730953;  // std dev = 1.591, 11.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=6 */
%   | | | else return -0.009462747518185266;  // std dev = 1.265, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.31940504754342236;  // std dev = 0.362, 13.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=11 */
%   else if ( follows(J, A), recursion_accounttype(J, B) )
%   | then return 0.23433444851620502;  // std dev = 0.339, 28.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=20 */
%   | else return 0.05783256386474946;  // std dev = 0.386, 42.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=15 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(A, E) )
%   | | then return 0.11172762530652065;  // std dev = 0.443, 50.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=27 */
%   | | else return 0.22540207472202634;  // std dev = 0.193, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   | else if ( follows(F, C) )
%   | | then return 0.16865294435898784;  // std dev = 0.400, 21.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=14 */
%   | | else return 0.7779062378988802;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.02151059422194913;  // std dev = 0.400, 46.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=10 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( follows(H, A) )
%   | | | then return 0.10316493246768679;  // std dev = 2.067, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
%   | | | else return 0.3317009945198372;  // std dev = 1.011, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.1029466073953918;  // std dev = 1.584, 13.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | | else return -0.05015528423854305;  // std dev = 1.276, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( tweets(C, E), follows(D, F) )
%   | | | then return 0.24908041170787554;  // std dev = 2.825, 48.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=37 */
%   | | | else return -0.14191665172096743;  // std dev = 1.260, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | else return -0.004051868411175441;  // std dev = 0.330, 19.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=11 */
%   | else return -0.13737153410048053;  // std dev = 0.137, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else if ( follows(G, A) )
%   | then if ( tweets(A, H), follows(A, I) )
%   | | then return 0.07589735019554786;  // std dev = 0.437, 37.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=14 */
%   | | else return -0.21034228706574792;  // std dev = 0.063, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( follows(A, J), follows(J, K) )
%   | | then return 0.147250865583551;  // std dev = 0.379, 38.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=21 */
%   | | else if ( follows(A, L) )
%   | | | then return -0.07404257733892816;  // std dev = 0.936, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.0935164905487865;  // std dev = 1.729, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then if ( follows(D, E), recursion_accounttype(D, B) )
%   | | | then return 0.13222872062779326;  // std dev = 2.833, 47.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=34 */
%   | | | else return -0.002121189921175598;  // std dev = 2.768, 48.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=14 */
%   | | else return -0.2049736748225283;  // std dev = 0.146, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G), follows(G, F) )
%   | | | then return 0.2500265882489396;  // std dev = 1.722, 12.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=6 */
%   | | | else return -0.09889378825227264;  // std dev = 1.304, 17.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=3 */
%   | | else return 0.19795338283303515;  // std dev = 0.307, 23.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=20 */
%   else if ( follows(H, A), tweets(H, I) )
%   | then return 0.04332936566789262;  // std dev = 0.346, 21.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=11 */
%   | else if ( tweets(A, J) )
%   | | then return 0.14670692870636048;  // std dev = 1.225, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.011664694834132476;  // std dev = 0.452, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(C, D), follows(D, A) )
%   | then if ( recursion_accounttype(C, B), follows(A, D) )
%   | | then if ( follows(D, C), tweets(C, E) )
%   | | | then return -0.01077166057157446;  // std dev = 2.164, 30.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
%   | | | else return 0.28279985792715095;  // std dev = 0.846, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else return -0.11854992871785687;  // std dev = 0.360, 19.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=4 */
%   | else if ( follows(F, C), recursion_accounttype(F, B) )
%   | | then if ( tweets(A, G), tweets(F, G) )
%   | | | then return 0.17444943267489593;  // std dev = 2.416, 30.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=18 */
%   | | | else return -0.029303098743827583;  // std dev = 0.819, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | else return -0.17430704587088908;  // std dev = 0.129, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( follows(A, H), follows(H, I) )
%   | then return 0.11464908431746314;  // std dev = 0.370, 44.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=25 */
%   | else if ( follows(A, J) )
%   | | then return -0.05163340719749458;  // std dev = 0.414, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | else return 0.043215565831665026;  // std dev = 0.401, 34.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=16 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( tweets(C, E), follows(D, F) )
%   | | then if ( recursion_accounttype(F, B), follows(C, F) )
%   | | | then return 0.20229919271667682;  // std dev = 2.887, 47.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=36 */
%   | | | else return -0.14972177691763533;  // std dev = 1.558, 29.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=6 */
%   | | else return 0.4298448412476527;  // std dev = 0.286, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return -0.11344315937568931;  // std dev = 0.260, 29.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=3 */
%   else if ( follows(G, A), follows(A, G) )
%   | then if ( follows(G, H), follows(H, A) )
%   | | then return -0.17655232640379767;  // std dev = 1.010, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( follows(A, I), follows(I, G) )
%   | | | then return 0.17850451319596808;  // std dev = 1.123, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | | else return -0.009907289374023211;  // std dev = 1.327, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | else if ( follows(J, A), follows(A, K) )
%   | | then return 0.312147173243656;  // std dev = 0.003, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.06582394213168025;  // std dev = 0.375, 54.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=33 */


Results
   AUC ROC   = 0.711987
   AUC PR    = 0.66602
   CLL	      = -0.610771
   Precision = 0.628378 at threshold = 0.5
   Recall    = 0.738095
   F1        = 0.678832


Total learning time: 19.274 seconds
Total inference time: 1.503 seconds
AUC ROC: 0.711987


Results scoring model
   AUC ROC   = 0.898717
   AUC PR    = 0.88027
   CLL	      = -0.461978
   Precision = 0.797753 at threshold = 0.5
   Recall    = 0.763441
   F1        = 0.78022


Total scoring time: 1.614 seconds
Refined model CLL: -0.461978


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.711987
   AUC PR    = 0.66602
   CLL	      = -0.610771
   Precision = 0.628378 at threshold = 0.5
   Recall    = 0.738095
   F1        = 0.678832


Total learning time: 23.735000000000003 seconds
Total inference time: 1.503 seconds
AUC ROC: 0.711987
Total revision time: 23.735000000000003
Best scored revision CLL: -0.461978


Dataset: 7_yeast_twitter, Fold: 2, Type: Transfer (trRDN-B), Time: 03:36:50
{'AUC ROC': 0.711987, 'AUC PR': 0.66602, 'CLL': -0.610771, 'Precision': [0.628378, 0.5], 'Recall': 0.738095, 'F1': 0.678832, 'Learning time': 23.735000000000003, 'Inference time': 1.503, 'parameter_0.6': {'AUC ROC': 0.65325, 'AUC PR': 0.627825, 'CLL': -0.643086, 'Precision': [0.589286, 0.5], 'Recall': 0.785714, 'F1': 0.673469, 'Learning time': 1.986, 'Inference time': 0.943}}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
0;false;interaction(D, A), interaction(D, D).;true;true
0;false,true;interaction(A, E), interaction(E, D).;true;true
0;false,true,true;interaction(A, A).;false;false
0;false,true,false;enzyme(A, F).;false;false
0;false,false;interaction(A, G), recursion_proteinclass(G, B).;true;true
0;false,false,true;complex(A, H).;false;false
0;false,false,false;interaction(I, A), interaction(J, I).;false;false
1;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
1;true;interaction(D, A), complex(A, E).;false;false
1;false;interaction(F, A), interaction(A, F).;true;true
1;false,true;enzyme(A, G), enzyme(F, G).;false;true
1;false,true,false;interaction(A, A).;false;false
1;false,false;interaction(A, H), enzyme(H, I).;true;true
1;false,false,true;phenotype(A, J), phenotype(H, K).;false;false
1;false,false,false;interaction(L, A), location(A, M).;false;false
2;;proteinclass(A, B) :- complex(A, C), interaction(D, A).;true;true
2;true;interaction(E, D), recursion_proteinclass(E, B).;false;true
2;true,false;interaction(A, D).;false;true
2;true,false,false;interaction(D, D), enzyme(A, F).;false;false
2;false;interaction(A, G), recursion_proteinclass(G, B).;false;true
2;false,false;interaction(A, H), interaction(H, H).;true;true
2;false,false,true;interaction(H, A).;false;false
2;false,false,false;phenotype(A, I), enzyme(A, J).;false;false
3;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
3;true;phenotype(C, D), enzyme(C, E).;false;false
3;false;interaction(A, F), interaction(F, A).;true;true
3;false,true;interaction(A, A).;false;true
3;false,true,false;enzyme(F, G), enzyme(A, G).;false;false
3;false,false;interaction(H, A), enzyme(H, I).;true;true
3;false,false,true;enzyme(A, I).;false;false
3;false,false,false;interaction(A, J), recursion_proteinclass(J, B).;false;false
4;;proteinclass(A, B) :- complex(A, C), interaction(A, D).;true;true
4;true;interaction(D, E), recursion_proteinclass(E, B).;false;true
4;true,false;interaction(D, A).;false;true
4;true,false,false;recursion_proteinclass(D, B).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;false;true
4;false,false;interaction(G, A), enzyme(G, H).;true;true
4;false,false,true;interaction(I, G), recursion_proteinclass(I, B).;false;false
4;false,false,false;phenotype(A, J), enzyme(A, K).;false;false
5;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
5;true;interaction(A, D), interaction(D, A).;true;true
5;true,true;interaction(C, D), interaction(A, C).;false;false
5;true,false;interaction(E, C), interaction(E, E).;false;true
5;true,false,false;enzyme(A, F), interaction(G, C).;false;false
5;false;interaction(A, H), recursion_proteinclass(H, B).;false;true
5;false,false;interaction(A, A).;false;true
5;false,false,false;interaction(A, I), enzyme(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
6;true;enzyme(C, D), phenotype(C, E).;true;true
6;true,true;enzyme(A, D).;false;false
6;true,false;interaction(C, F), interaction(F, A).;false;false
6;false;interaction(A, A).;false;true
6;false,false;interaction(G, A), enzyme(G, H).;true;true
6;false,false,true;interaction(I, G), phenotype(G, J).;false;false
6;false,false,false;interaction(A, K), enzyme(K, L).;false;false
7;;proteinclass(A, B) :- interaction(A, C), location(A, D).;false;true
7;false;interaction(E, A), complex(E, F).;true;true
7;false,true;interaction(E, E), enzyme(A, G).;true;true
7;false,true,true;interaction(E, H), recursion_proteinclass(H, B).;false;false
7;false,true,false;recursion_proteinclass(E, B).;false;false
7;false,false;complex(A, I), location(A, J).;true;true
7;false,false,true;complex(K, I), recursion_proteinclass(K, B).;false;false
7;false,false,false;interaction(L, A), recursion_proteinclass(L, B).;false;false
8;;proteinclass(A, B) :- interaction(C, A).;true;true
8;true;interaction(D, C), recursion_proteinclass(D, B).;true;true
8;true,true;interaction(D, A).;false;false
8;true,false;interaction(A, C).;false;true
8;true,false,false;enzyme(C, E), phenotype(A, F).;false;false
8;false;location(A, G).;true;false
8;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
8;false,true,true;interaction(H, I), interaction(A, I).;false;false
9;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
9;false;interaction(D, A), enzyme(D, E).;true;true
9;false,true;location(A, F), location(D, F).;true;true
9;false,true,true;interaction(G, D), recursion_proteinclass(G, B).;false;false
9;false,true,false;interaction(H, D), recursion_proteinclass(H, B).;false;false
9;false,false;phenotype(A, I), interaction(A, J).;true;true
9;false,false,true;interaction(J, K), recursion_proteinclass(K, B).;false;false
9;false,false,false;complex(A, L), location(A, M).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.5152917922423703;  // std dev = 4.864, 105.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=69 */
%   else if ( follows(D, A), follows(D, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.09070707463439608;  // std dev = 2.770, 43.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=10 */
%   | | | else return -0.0918510649004878;  // std dev = 0.975, 20.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=1 */
%   | | else if ( follows(G, A), follows(H, G) )
%   | | | then return 0.25208832903890627;  // std dev = 2.807, 33.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=13 */
%   | | | else return 0.5177234031846177;  // std dev = 3.249, 47.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=31 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then return 0.29589690312666234;  // std dev = 4.672, 91.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=45 */
%   | else return 0.1591247642607947;  // std dev = 3.156, 50.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=16 */
%   else if ( follows(F, A), follows(A, F) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.2686089672978603;  // std dev = 2.684, 29.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=13 */
%   | else if ( follows(A, G) )
%   | | then return 0.6023348495993892;  // std dev = 0.386, 33.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=27 */
%   | | else if ( follows(H, A) )
%   | | | then return 0.33125671074705615;  // std dev = 2.490, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   | | | else return 0.2565212648979907;  // std dev = 2.176, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), follows(D, A) )
%   then if ( follows(E, D), recursion_accounttype(E, B) )
%   | then return 0.2635909449746092;  // std dev = 5.706, 136.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=70 */
%   | else if ( follows(A, D) )
%   | | then return -0.21034561715091168;  // std dev = 0.018, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( follows(D, D) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.3658308510731032;  // std dev = 1.057, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return 0.13668920977093232;  // std dev = 3.141, 50.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=16 */
%   | else if ( follows(A, G), follows(G, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.34808191896718105;  // std dev = 0.464, 54.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=35 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.3329402016768321;  // std dev = 0.474, 105.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=69 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.059292382720076385;  // std dev = 0.448, 53.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=16 */
%   | else if ( follows(E, A) )
%   | | then return -0.10298749854735399;  // std dev = 0.357, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.01012362732444924;  // std dev = 2.180, 31.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=6 */
%   | | | else return 0.27453397192552165;  // std dev = 3.171, 47.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=31 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), follows(A, D) )
%   then if ( follows(D, E), recursion_accounttype(E, B) )
%   | then return 0.16911141125544218;  // std dev = 5.675, 142.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=73 */
%   | else if ( follows(D, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return -0.09355866041518933;  // std dev = 0.940, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | | else return 0.3457557024267206;  // std dev = 0.938, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.34657598765331216;  // std dev = 2.582, 34.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=25 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | | then return -0.1438322371917308;  // std dev = 0.903, 11.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
%   | | | else return -0.23174752927337877;  // std dev = 0.110, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.09293085087199401;  // std dev = 0.438, 45.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=20 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(C, D), follows(A, C) )
%   | | then return 0.20635677632983948;  // std dev = 3.414, 51.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=33 */
%   | | else return 0.1520383706478146;  // std dev = 2.565, 27.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=16 */
%   | else if ( follows(E, C), follows(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, C) )
%   | | | then return 0.230480601443291;  // std dev = 2.207, 26.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=19 */
%   | | | else return 0.5301954215105392;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return -0.051784370322212364;  // std dev = 2.976, 63.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=11 */
%   | else if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, H) )
%   | | | then return 0.22016229332794496;  // std dev = 3.362, 55.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=35 */
%   | | | else return -0.017804690581252593;  // std dev = 2.260, 25.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=9 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, A) )
%   | then return 0.09890273415884841;  // std dev = 4.166, 79.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=42 */
%   | else return 0.021963933365204642;  // std dev = 3.242, 62.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=19 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A) )
%   | | then if ( follows(F, E) )
%   | | | then return 0.10208944826492547;  // std dev = 3.536, 60.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G) )
%   | | | then return 0.20694259038076016;  // std dev = 2.185, 28.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=22 */
%   | | | else return 0.05496010959301977;  // std dev = 2.176, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then return 0.07552340018510807;  // std dev = 6.372, 203.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=101 */
%   else if ( follows(D, A), tweets(D, E) )
%   | then if ( follows(D, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.11809005065349129;  // std dev = 2.044, 20.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=14 */
%   | | | else return -0.24994744790884993;  // std dev = 0.014, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return -0.0035862714920263305;  // std dev = 1.309, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06784229993654511;  // std dev = 1.732, 12.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(D, A) )
%   | | then return 0.09481538229092361;  // std dev = 4.220, 79.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=51 */
%   | | else return 0.02286708996034706;  // std dev = 3.978, 80.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=33 */
%   | else if ( follows(A, C) )
%   | | then return -0.23878163237244596;  // std dev = 0.177, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.22831379348474198;  // std dev = 0.407, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   else if ( recursion_accounttype(E, B) )
%   | then if ( follows(E, F), follows(A, F) )
%   | | then return 0.07154908512123277;  // std dev = 3.032, 58.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=28 */
%   | | else return -0.004676111053210305;  // std dev = 2.284, 20.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=9 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.09026400418613896;  // std dev = 4.823, 105.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=69 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return -0.037758768639185515;  // std dev = 3.156, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | else if ( follows(F, D), recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0617073906407174;  // std dev = 1.050, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.10114868479480758;  // std dev = 2.800, 46.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=25 */
%   | | | else return -0.15386783833855383;  // std dev = 1.099, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.0015598515286496012;  // std dev = 1.309, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return 0.052279964203360084;  // std dev = 1.732, 12.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=6 */


Results
   AUC ROC   = 0.680902
   AUC PR    = 0.652572
   CLL	      = -0.640981
   Precision = 0.589286 at threshold = 0.5
   Recall    = 0.785714
   F1        = 0.673469


Total learning time: 1.874 seconds
Total inference time: 0.81 seconds
AUC ROC: 0.680902


Results scoring model
   AUC ROC   = 0.768665
   AUC PR    = 0.739381
   CLL	      = -0.581676
   Precision = 0.686567 at threshold = 0.5
   Recall    = 0.741935
   F1        = 0.713178


Total scoring time: 0.843 seconds
Parameter learned model CLL: -0.581676


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(D, A), follows(D, D)', 'false,false': 'follows(A, E), recursion_accounttype(E, B)', 'false,false,true': 'tweets(A, F)', 'false,false,false': 'follows(G, A), follows(H, G)'}, {'true': [4.864, 36, 69], 'false,true': [0.0, 0, 0], 'false,false,true,true': [2.77, 33, 10], 'false,false,true,false': [0.975, 19, 1], 'false,false,false,true': [2.807, 20, 13], 'false,false,false,false': [3.249, 16, 31]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), tweets(A, E)', 'false': 'follows(F, A), follows(A, F)', 'false,true': 'follows(A, A)', 'false,false': 'follows(A, G)', 'false,false,false': 'follows(H, A)'}, {'true,true': [4.672, 46, 45], 'true,false': [3.156, 34, 16], 'false,true,true': [0.0, 0, 0], 'false,true,false': [2.684, 16, 13], 'false,false,true': [0.386, 6, 27], 'false,false,false,true': [2.49, 12, 14], 'false,false,false,false': [2.176, 10, 9]}], ['accounttype(A, B)', {'': 'tweets(A, C), follows(D, A)', 'true': 'follows(E, D), recursion_accounttype(E, B)', 'true,false': 'follows(A, D)', 'true,false,false': 'follows(D, D)', 'false': 'follows(A, F), recursion_accounttype(F, B)', 'false,false': 'follows(A, G), follows(G, G)'}, {'true,true': [5.706, 66, 70], 'true,false,true': [0.018, 3, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [1.057, 2, 3], 'false,true': [3.141, 34, 16], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.464, 19, 35]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A)', 'false,false,false': 'follows(A, F), recursion_accounttype(F, B)'}, {'true': [0.474, 36, 69], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.448, 37, 16], 'false,false,true': [0.357, 10, 2], 'false,false,false,true': [2.18, 25, 6], 'false,false,false,false': [3.171, 16, 31]}], ['accounttype(A, B)', {'': 'tweets(A, C), follows(A, D)', 'true': 'follows(D, E), recursion_accounttype(E, B)', 'true,false': 'follows(D, A)', 'true,false,false': 'recursion_accounttype(D, B)', 'false': 'follows(F, A), recursion_accounttype(F, B)', 'false,false': 'follows(G, A)', 'false,false,true': 'follows(H, G), recursion_accounttype(H, B)'}, {'true,true': [5.675, 69, 73], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.94, 6, 1], 'true,false,false,false': [0.938, 1, 4], 'false,true': [2.582, 9, 25], 'false,false,true,true': [0.903, 10, 1], 'false,false,true,false': [0.11, 4, 0], 'false,false,false': [0.438, 25, 20]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(A, D), follows(D, A)', 'true,true': 'follows(C, D), follows(A, C)', 'true,false': 'follows(E, C), follows(E, E)', 'true,false,false': 'follows(F, C)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(A, A)', 'false,false,false': 'follows(A, H)'}, {'true,true,true': [3.414, 18, 33], 'true,true,false': [2.565, 11, 16], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [2.207, 7, 19], 'true,false,false,false': [0.0, 0, 1], 'false,true': [2.976, 52, 11], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [3.362, 20, 35], 'false,false,false,false': [2.26, 16, 9]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), follows(D, A)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A)', 'false,false,true': 'follows(F, E)', 'false,false,false': 'follows(A, G)'}, {'true,true': [4.166, 37, 42], 'true,false': [3.242, 43, 19], 'false,true': [0.0, 0, 0], 'false,false,true,true': [3.536, 28, 32], 'false,false,true,false': [0.0, 0, 0], 'false,false,false,true': [2.185, 6, 22], 'false,false,false,false': [2.176, 10, 9]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'false': 'follows(D, A), tweets(D, E)', 'false,true': 'follows(D, D)', 'false,true,false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, F)', 'false,false,true': 'tweets(G, F), recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A), recursion_accounttype(H, B)'}, {'true': [6.372, 102, 101], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [2.044, 6, 14], 'false,true,false,false': [0.014, 6, 0], 'false,false,true,true': [1.309, 4, 3], 'false,false,true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.732, 6, 6]}], ['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(D, A)', 'true,false': 'follows(A, C)', 'false': 'recursion_accounttype(E, B)', 'false,true': 'follows(E, F), follows(A, F)'}, {'true,true,true': [4.22, 28, 51], 'true,true,false': [3.978, 47, 33], 'true,false,true': [0.177, 6, 0], 'true,false,false': [0.407, 2, 3], 'false,true,true': [3.032, 30, 28], 'false,true,false': [2.284, 11, 9], 'false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'follows(F, D), recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)', 'false,false,false': 'tweets(A, I)'}, {'true': [4.823, 36, 69], 'false,true,true': [3.156, 39, 16], 'false,true,false,true': [0.0, 0, 0], 'false,true,false,false': [1.05, 8, 2], 'false,false,true,true': [2.8, 21, 25], 'false,false,true,false': [1.099, 10, 3], 'false,false,false,true': [1.309, 4, 3], 'false,false,false,false': [1.732, 6, 6]}]]
[{'': [0.22530612244897877, 0.23668639053254492], 'false': [nan, 0.23668639053254492], 'false,false': [0.14411690602166738, 0.24750000000000102], 'false,false,false': [0.23875114784205645, 0.22453598913535694], 'false,false,true': [0.17847485127095739, 0.04750000000000004]}, {'': [0.22968638649789566, 0.23749002908556277], 'false': [0.24846691690273826, 0.22654582184822175], 'false,true': [nan, 0.24846691690273826], 'true': [0.23982807747652946, 0.19915544341845204], 'false,false': [0.14929003955587147, 0.2444518022788029], 'false,false,false': [0.23854514851777936, 0.24930747922437663]}, {'': [0.23886395745347444, 0.2179870298034798], 'true': [0.23939354587116407, 0.21762433581804272], 'false': [0.19735544638261157, 0.21560627206397276], 'true,false': [0.000107262180053543, 0.22364233405017392], 'true,false,false': [nan, 0.22364233405017392], 'false,false': [nan, 0.21560627206397276]}, {'': [0.22484630270448863, 0.20452609147816278], 'false': [0.2009609058819676, 0.20460529820976853], 'false,false': [0.12748840251568125, 0.20657330307859828], 'false,false,false': [0.15327529984962224, 0.21394143674304344], 'false,true': [nan, 0.2009609058819676]}, {'': [0.2247010077789452, 0.20333950580230817], 'true': [0.22681039763336286, 0.19389416958045813], 'false': [0.19604412784729341, 0.1707362885122448], 'true,false': [nan, 0.19389416958045813], 'true,false,false': [0.12619244859656498, 0.17609493180837904], 'false,false': [0.05673842601050937, 0.19180863370960896], 'false,false,true': [0.07420719289972343, 0.0030313114385162737]}, {'': [0.22196241720734844, 0.19314883430858196], 'true': [0.23446820975318255, 0.18366624203662368], 'true,true': [0.2285853611920449, 0.24365109102266724], 'false': [0.140602044171776, 0.2173305904570833], 'false,false': [nan, 0.21733059045708325], 'false,false,false': [0.20555381123818786, 0.20430755850495064], 'true,false': [nan, 0.1836662420366238], 'true,false,false': [0.1874033292551741, 0.0]}, {'': [0.19906235563252025, 0.20863186930236072], 'false': [nan, 0.20863186930236044], 'false,false': [0.20834487370341173, 0.20794139170483789], 'false,false,true': [0.20834487370341173, nan], 'false,false,false': [0.17053378458396343, 0.2493074792243767], 'true': [0.21967914636697197, 0.16947593029918823]}, {'': [0.2000279768834061, 0.21198242698829928], 'false': [0.1846768604872723, 0.24930747922437677], 'false,false': [0.2448979591836735, 0.25000000000000017], 'false,false,false': [nan, 0.25000000000000017], 'false,false,true': [0.2448979591836735, nan], 'false,true': [nan, 0.1846768604872723], 'false,true,false': [0.2088115527617466, 3.434750977464781e-05]}, {'': [0.20805892812122626, 0.1858870077294111], 'true': [0.2128394453608827, 0.13218841669971096], 'true,true': [0.22542486908759712, 0.197839339526516], 'false': [0.1858870077294111, nan], 'false,true': [0.15851879113126446, 0.2609343708531856], 'true,false': [0.0052356231556168475, 0.1655255124853287]}, {'': [0.22156899623494605, 0.1800966931169516], 'false': [0.17028616428966106, 0.1851140473472227], 'false,false': [0.16456853905049573, 0.24879479649613664], 'false,false,false': [0.2448979591836735, 0.24999999999999997], 'false,true': [0.18111806500630256, 0.11022541023632541], 'false,false,true': [0.17047345928325205, 0.0929701780333175], 'false,true,false': [nan, 0.11022541023632541]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
2;;accounttype(A, B) :- tweets(A, C), follows(D, A).;true;true
2;true;follows(E, D), recursion_accounttype(E, B).;true;true
2;true,false;follows(A, D).;true;true
5;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
5;true;follows(A, D), follows(D, A).;true;true
5;true,false;follows(F, C).;true;true
7;;accounttype(A, B) :- follows(A, C).;true;true
7;false;follows(D, A), tweets(D, E).;true;true
7;false,true;recursion_accounttype(D, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, C) )
%   | | then if ( tweets(A, E), tweets(C, F) )
%   | | | then return 0.5841763323597868;  // std dev = 3.811, 73.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=53 */
%   | | | else return 0.7956489350995123;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else return 0.0010060779566550668;  // std dev = 0.350, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | else return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.03275210970268697;  // std dev = 0.380, 63.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=11 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.04185106490048778;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   | | | else return 0.37988806553429494;  // std dev = 2.396, 23.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=12 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.6842358916212513;  // std dev = 1.818, 23.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=19 */
%   | | | else return 0.35814893509951234;  // std dev = 2.449, 24.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=12 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, C) )
%   | | then if ( tweets(C, E), tweets(A, F) )
%   | | | then return 0.49735515480907033;  // std dev = 3.811, 73.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=53 */
%   | | | else return 0.6694131893798131;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else return 8.835646163369372E-4;  // std dev = 0.350, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | else return -0.12544463852839138;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.028718259987384094;  // std dev = 0.380, 63.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=11 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, A) )
%   | | | then return 0.2780120249396842;  // std dev = 2.515, 26.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=12 */
%   | | | else return 0.5576796983889293;  // std dev = 2.165, 29.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=23 */
%   | | else if ( follows(I, A) )
%   | | | then return -0.14646777059980717;  // std dev = 0.053, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.28242534631195054;  // std dev = 2.176, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), follows(D, A) )
%   then if ( follows(E, D), recursion_accounttype(E, B) )
%   | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.3628286439930679;  // std dev = 4.030, 81.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=55 */
%   | | | else return -0.11231637819360639;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.024413248355141783;  // std dev = 1.818, 23.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=4 */
%   | | | else return 0.2312727192429256;  // std dev = 2.371, 25.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=11 */
%   | else if ( follows(A, D) )
%   | | then return -0.21112328086029633;  // std dev = 0.075, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.4283305793319211;  // std dev = 1.036, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   else if ( follows(A, I), recursion_accounttype(I, B) )
%   | then return 0.11312877364085862;  // std dev = 0.400, 50.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=16 */
%   | else if ( follows(A, J), follows(J, K) )
%   | | then return 0.42538395336181467;  // std dev = 0.402, 27.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=21 */
%   | | else return 0.25907349001960156;  // std dev = 0.485, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, C) )
%   | | then if ( follows(A, E), follows(E, C) )
%   | | | then return 0.2941991718927229;  // std dev = 3.355, 56.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=40 */
%   | | | else return 0.42595694401121414;  // std dev = 2.039, 33.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=28 */
%   | | else return -0.05090254627180768;  // std dev = 0.346, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | else return -0.106597080110963;  // std dev = 0.028, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return 0.013570285221486306;  // std dev = 0.378, 63.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=11 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(H, A), follows(H, G) )
%   | | | then return 0.1502042574545117;  // std dev = 1.969, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
%   | | | else return 0.33010980629126363;  // std dev = 2.624, 38.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=28 */
%   | | else if ( follows(I, A) )
%   | | | then return -0.1625325819916967;  // std dev = 0.060, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.1847060908519028;  // std dev = 2.176, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, C) )
%   | | then if ( tweets(A, E), tweets(C, F) )
%   | | | then return 0.2292041238871742;  // std dev = 3.792, 73.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=53 */
%   | | | else return 0.390215523806309;  // std dev = 0.947, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else return -0.04307506844627781;  // std dev = 0.346, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | else return -0.09687105465023794;  // std dev = 0.026, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( follows(G, A) )
%   | then if ( tweets(A, H), follows(A, I) )
%   | | then return 0.10651735526581615;  // std dev = 0.441, 50.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=17 */
%   | | else return -0.12895011692045655;  // std dev = 0.217, 15.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.02721376919707864;  // std dev = 0.395, 31.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=6 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.2768942705378991;  // std dev = 1.818, 23.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=19 */
%   | | | else return 0.15114115296209393;  // std dev = 2.437, 24.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=12 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, A), tweets(E, F) )
%   | | | then return 0.12864134371269062;  // std dev = 3.421, 70.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=43 */
%   | | | else return 0.40653018754843206;  // std dev = 0.141, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.20850943219383658;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( follows(G, C) )
%   | | then return 0.19380242376743992;  // std dev = 0.374, 26.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=19 */
%   | | else return 0.8121066856356189;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, H), recursion_accounttype(H, B) )
%   | then return 0.005439961096723566;  // std dev = 0.377, 63.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=11 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(J, I), follows(J, A) )
%   | | | then return 0.10793117848619944;  // std dev = 1.951, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
%   | | | else return 0.19865845769689455;  // std dev = 2.616, 38.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=28 */
%   | | else return 0.05407053153006863;  // std dev = 0.447, 25.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=9 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( tweets(C, E), follows(D, F) )
%   | | | then return 0.2251949049239239;  // std dev = 3.081, 63.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=51 */
%   | | | else return -0.10237202130561572;  // std dev = 1.403, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
%   | | else return 0.024482883532431554;  // std dev = 0.388, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | else return -0.10032283429775107;  // std dev = 0.026, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.004675019695810658;  // std dev = 0.377, 63.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=11 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, A) )
%   | | | then return 0.09839737228007991;  // std dev = 2.455, 26.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=12 */
%   | | | else return 0.16039846150189274;  // std dev = 2.148, 29.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=23 */
%   | | else if ( follows(I, A) )
%   | | | then return -0.13285553512480622;  // std dev = 0.051, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.09859252544884702;  // std dev = 2.176, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(D, F), follows(E, G) )
%   | | | then return 0.09589773776202813;  // std dev = 4.118, 97.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=54 */
%   | | | else return 0.5629046577525623;  // std dev = 0.534, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.11350580705222982;  // std dev = 0.217, 40.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=3 */
%   | else if ( follows(H, A), follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.10996890179448382;  // std dev = 2.479, 25.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=13 */
%   | | | else return -0.3545188524916499;  // std dev = 0.138, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.1475158095801193;  // std dev = 0.379, 33.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=27 */
%   else if ( follows(J, A), tweets(J, K) )
%   | then return 0.05656871573292188;  // std dev = 0.326, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   | else if ( tweets(A, L) )
%   | | then return 0.030100884802265342;  // std dev = 0.495, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | else return 0.10152945623083683;  // std dev = 0.500, 12.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), tweets(A, D) )
%   | then if ( follows(C, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, D), follows(E, F) )
%   | | | then return 0.15219163632957125;  // std dev = 3.080, 63.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=51 */
%   | | | else return -0.3610379177324332;  // std dev = 1.042, 14.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=1 */
%   | | else return -0.14808613438639756;  // std dev = 0.172, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0.21516512128317422;  // std dev = 0.242, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   else if ( follows(A, G), tweets(A, H) )
%   | then if ( follows(I, A), recursion_accounttype(G, B) )
%   | | then if ( follows(I, G), follows(J, I) )
%   | | | then return 0.06902283070151286;  // std dev = 1.873, 20.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | | | else return -0.1741198859188592;  // std dev = 0.056, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( follows(G, K), follows(A, K) )
%   | | | then return 0.15294837675557227;  // std dev = 2.591, 30.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
%   | | | else return 0.012678553161400688;  // std dev = 2.112, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | else return -0.007319798290711923;  // std dev = 0.373, 60.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=21 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.07605743450771804;  // std dev = 0.405, 101.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=58 */
%   | else return -0.10161238874421281;  // std dev = 0.215, 40.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=3 */
%   else if ( tweets(A, E) )
%   | then if ( follows(A, F), follows(F, A) )
%   | | then if ( follows(F, G), follows(G, A) )
%   | | | then return -0.19920944180765363;  // std dev = 1.223, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return 0.11226844821230005;  // std dev = 1.984, 18.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=10 */
%   | | else if ( follows(H, A), follows(A, I) )
%   | | | then return 0.29875556655353097;  // std dev = 0.088, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.035721113314912865;  // std dev = 2.640, 46.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=27 */
%   | else if ( follows(J, A), follows(A, J) )
%   | | then return -0.03611897393791478;  // std dev = 0.777, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.17509147779826606;  // std dev = 0.949, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | | else return 0.06219560607773847;  // std dev = 1.911, 17.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */


Results
   AUC ROC   = 0.724017
   AUC PR    = 0.700884
   CLL	      = -0.600016
   Precision = 0.615854 at threshold = 0.5
   Recall    = 0.801587
   F1        = 0.696552


Total learning time: 16.947 seconds
Total inference time: 1.401 seconds
AUC ROC: 0.724017


Results scoring model
   AUC ROC   = 0.873862
   AUC PR    = 0.853302
   CLL	      = -0.471211
   Precision = 0.761905 at threshold = 0.5
   Recall    = 0.774194
   F1        = 0.768


Total scoring time: 1.203 seconds
Refined model CLL: -0.471211


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.724017
   AUC PR    = 0.700884
   CLL	      = -0.600016
   Precision = 0.615854 at threshold = 0.5
   Recall    = 0.801587
   F1        = 0.696552


Total learning time: 20.866999999999997 seconds
Total inference time: 1.401 seconds
AUC ROC: 0.724017
Total revision time: 20.866999999999997
Best scored revision CLL: -0.471211


Dataset: 7_yeast_twitter, Fold: 2, Type: Transfer (trRDN-B), Time: 03:37:14
{'AUC ROC': 0.724017, 'AUC PR': 0.700884, 'CLL': -0.600016, 'Precision': [0.615854, 0.5], 'Recall': 0.801587, 'F1': 0.696552, 'Learning time': 20.866999999999997, 'Inference time': 1.401, 'parameter_0.8': {'AUC ROC': 0.680902, 'AUC PR': 0.652572, 'CLL': -0.640981, 'Precision': [0.589286, 0.5], 'Recall': 0.785714, 'F1': 0.673469, 'Learning time': 1.874, 'Inference time': 0.81}}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
0;false;interaction(D, A), interaction(D, D).;true;true
0;false,true;interaction(A, E), interaction(E, D).;true;true
0;false,true,true;interaction(A, A).;false;false
0;false,true,false;enzyme(A, F).;false;false
0;false,false;interaction(A, G), recursion_proteinclass(G, B).;true;true
0;false,false,true;complex(A, H).;false;false
0;false,false,false;interaction(I, A), interaction(J, I).;false;false
1;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
1;true;interaction(D, A), complex(A, E).;false;false
1;false;interaction(F, A), interaction(A, F).;true;true
1;false,true;enzyme(A, G), enzyme(F, G).;false;true
1;false,true,false;interaction(A, A).;false;false
1;false,false;interaction(A, H), enzyme(H, I).;true;true
1;false,false,true;phenotype(A, J), phenotype(H, K).;false;false
1;false,false,false;interaction(L, A), location(A, M).;false;false
2;;proteinclass(A, B) :- complex(A, C), interaction(D, A).;true;true
2;true;interaction(E, D), recursion_proteinclass(E, B).;false;true
2;true,false;interaction(A, D).;false;true
2;true,false,false;interaction(D, D), enzyme(A, F).;false;false
2;false;interaction(A, G), recursion_proteinclass(G, B).;false;true
2;false,false;interaction(A, H), interaction(H, H).;true;true
2;false,false,true;interaction(H, A).;false;false
2;false,false,false;phenotype(A, I), enzyme(A, J).;false;false
3;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
3;true;phenotype(C, D), enzyme(C, E).;false;false
3;false;interaction(A, F), interaction(F, A).;true;true
3;false,true;interaction(A, A).;false;true
3;false,true,false;enzyme(F, G), enzyme(A, G).;false;false
3;false,false;interaction(H, A), enzyme(H, I).;true;true
3;false,false,true;enzyme(A, I).;false;false
3;false,false,false;interaction(A, J), recursion_proteinclass(J, B).;false;false
4;;proteinclass(A, B) :- complex(A, C), interaction(A, D).;true;true
4;true;interaction(D, E), recursion_proteinclass(E, B).;false;true
4;true,false;interaction(D, A).;false;true
4;true,false,false;recursion_proteinclass(D, B).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;false;true
4;false,false;interaction(G, A), enzyme(G, H).;true;true
4;false,false,true;interaction(I, G), recursion_proteinclass(I, B).;false;false
4;false,false,false;phenotype(A, J), enzyme(A, K).;false;false
5;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
5;true;interaction(A, D), interaction(D, A).;true;true
5;true,true;interaction(C, D), interaction(A, C).;false;false
5;true,false;interaction(E, C), interaction(E, E).;false;true
5;true,false,false;enzyme(A, F), interaction(G, C).;false;false
5;false;interaction(A, H), recursion_proteinclass(H, B).;false;true
5;false,false;interaction(A, A).;false;true
5;false,false,false;interaction(A, I), enzyme(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
6;true;enzyme(C, D), phenotype(C, E).;true;true
6;true,true;enzyme(A, D).;false;false
6;true,false;interaction(C, F), interaction(F, A).;false;false
6;false;interaction(A, A).;false;true
6;false,false;interaction(G, A), enzyme(G, H).;true;true
6;false,false,true;interaction(I, G), phenotype(G, J).;false;false
6;false,false,false;interaction(A, K), enzyme(K, L).;false;false
7;;proteinclass(A, B) :- interaction(A, C), location(A, D).;false;true
7;false;interaction(E, A), complex(E, F).;true;true
7;false,true;interaction(E, E), enzyme(A, G).;true;true
7;false,true,true;interaction(E, H), recursion_proteinclass(H, B).;false;false
7;false,true,false;recursion_proteinclass(E, B).;false;false
7;false,false;complex(A, I), location(A, J).;true;true
7;false,false,true;complex(K, I), recursion_proteinclass(K, B).;false;false
7;false,false,false;interaction(L, A), recursion_proteinclass(L, B).;false;false
8;;proteinclass(A, B) :- interaction(C, A).;true;true
8;true;interaction(D, C), recursion_proteinclass(D, B).;true;true
8;true,true;interaction(D, A).;false;false
8;true,false;interaction(A, C).;false;true
8;true,false,false;enzyme(C, E), phenotype(A, F).;false;false
8;false;location(A, G).;true;false
8;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
8;false,true,true;interaction(H, I), interaction(A, I).;false;false
9;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
9;false;interaction(D, A), enzyme(D, E).;true;true
9;false,true;location(A, F), location(D, F).;true;true
9;false,true,true;interaction(G, D), recursion_proteinclass(G, B).;false;false
9;false,true,false;interaction(H, D), recursion_proteinclass(H, B).;false;false
9;false,false;phenotype(A, I), interaction(A, J).;true;true
9;false,false,true;interaction(J, K), recursion_proteinclass(K, B).;false;false
9;false,false,false;complex(A, L), location(A, M).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.5020883290389042;  // std dev = 5.501, 132.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=85 */
%   else if ( follows(D, A), follows(D, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.084564029439135;  // std dev = 3.047, 53.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=12 */
%   | | | else return -0.05489454316135737;  // std dev = 1.351, 23.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=2 */
%   | | else if ( follows(G, A), follows(H, G) )
%   | | | then return 0.24451257146314873;  // std dev = 3.230, 44.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=17 */
%   | | | else return 0.5248156017661789;  // std dev = 3.651, 60.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=40 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then return 0.30235838254975606;  // std dev = 5.235, 114.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=57 */
%   | else return 0.1819955886728555;  // std dev = 3.564, 61.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=21 */
%   else if ( follows(F, A), follows(A, F) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.23901974415192567;  // std dev = 2.962, 36.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=15 */
%   | else if ( follows(A, G) )
%   | | then return 0.5609000987482388;  // std dev = 0.416, 45.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=35 */
%   | | else if ( follows(H, A) )
%   | | | then return 0.29731318252726213;  // std dev = 2.876, 34.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=17 */
%   | | | else return 0.28162893957529533;  // std dev = 2.345, 22.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=11 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), follows(D, A) )
%   then if ( follows(E, D), recursion_accounttype(E, B) )
%   | then return 0.2665723983980679;  // std dev = 6.348, 167.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=86 */
%   | else if ( follows(A, D) )
%   | | then return -0.2061874172724234;  // std dev = 0.013, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( follows(D, D) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.15822925564989573;  // std dev = 1.497, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return 0.15593462267953045;  // std dev = 3.547, 61.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=21 */
%   | else if ( follows(A, G), follows(G, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.3379810314007348;  // std dev = 0.469, 71.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=45 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.3219910400187789;  // std dev = 0.480, 132.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.05113508964143264;  // std dev = 0.447, 65.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=19 */
%   | else if ( follows(E, A) )
%   | | then return -0.04785728037091366;  // std dev = 0.403, 19.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=4 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.023522917851093953;  // std dev = 2.494, 37.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=8 */
%   | | | else return 0.2952906091680208;  // std dev = 3.525, 59.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=40 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), follows(A, D) )
%   then if ( follows(D, E), recursion_accounttype(E, B) )
%   | then return 0.16489529555773738;  // std dev = 6.420, 181.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=92 */
%   | else if ( follows(D, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return -0.1089904625038692;  // std dev = 0.973, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | | else return 0.3610930599761678;  // std dev = 0.953, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.32577855587479093;  // std dev = 2.947, 41.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=29 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | | then return -0.07570871096476364;  // std dev = 1.531, 18.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=3 */
%   | | | else return -0.22807971180433628;  // std dev = 0.082, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.13061908050071475;  // std dev = 0.451, 54.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=27 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(C, D), follows(A, C) )
%   | | then return 0.22950177051406795;  // std dev = 3.832, 66.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=44 */
%   | | else return 0.14052651411778755;  // std dev = 2.851, 33.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   | else if ( follows(E, C), follows(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, C) )
%   | | | then return 0.1614560302744436;  // std dev = 2.631, 31.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=20 */
%   | | | else return 0.5548407782522442;  // std dev = 0.045, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return -0.04875732213645549;  // std dev = 3.351, 76.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=14 */
%   | else if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, H) )
%   | | | then return 0.19927255919269737;  // std dev = 3.870, 72.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=44 */
%   | | | else return 0.026624619345739862;  // std dev = 2.668, 32.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=13 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, A) )
%   | then return 0.10979122429926406;  // std dev = 4.653, 99.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=54 */
%   | else return 0.02471963630997867;  // std dev = 3.678, 76.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=24 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A) )
%   | | then if ( follows(F, E) )
%   | | | then return 0.08395872554238833;  // std dev = 4.135, 76.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=37 */
%   | | | else return -0.027030927081726913;  // std dev = 0.585, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | else if ( follows(A, G) )
%   | | | then return 0.21349924823171956;  // std dev = 2.515, 37.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=29 */
%   | | | else return 0.050586362396989305;  // std dev = 2.345, 22.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=11 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then return 0.07548259093958612;  // std dev = 7.213, 256.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=128 */
%   else if ( follows(D, A), tweets(D, E) )
%   | then if ( follows(D, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.08234722734717363;  // std dev = 2.376, 24.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=15 */
%   | | | else return -0.061293397403419825;  // std dev = 1.245, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.038039790284138515;  // std dev = 1.414, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03803979028413851;  // std dev = 1.871, 14.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(D, A) )
%   | | then return 0.10109633113651108;  // std dev = 4.715, 98.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=63 */
%   | | else return 0.024680881774095713;  // std dev = 4.606, 101.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=41 */
%   | else if ( follows(A, C) )
%   | | then return -0.23319608451214566;  // std dev = 0.145, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.006378832110440355;  // std dev = 0.433, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   else if ( recursion_accounttype(E, B) )
%   | then if ( follows(E, F), follows(A, F) )
%   | | then return 0.0885370770279788;  // std dev = 3.431, 72.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=37 */
%   | | else return -0.028578498932367496;  // std dev = 2.523, 24.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.08680336303934041;  // std dev = 5.482, 132.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=85 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return -0.026231610931739473;  // std dev = 3.689, 70.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=21 */
%   | | else if ( follows(F, D), recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10361646032543358;  // std dev = 1.226, 14.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.11046044949363355;  // std dev = 3.180, 58.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=33 */
%   | | | else return -0.163872754972753;  // std dev = 1.301, 16.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=4 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.035687329062148804;  // std dev = 1.414, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | else return 0.03568732906214884;  // std dev = 1.871, 14.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */


Results
   AUC ROC   = 0.686823
   AUC PR    = 0.652454
   CLL	      = -0.641368
   Precision = 0.589286 at threshold = 0.5
   Recall    = 0.785714
   F1        = 0.673469


Total learning time: 2.144 seconds
Total inference time: 0.875 seconds
AUC ROC: 0.686823


Results scoring model
   AUC ROC   = 0.751849
   AUC PR    = 0.712199
   CLL	      = -0.596671
   Precision = 0.678571 at threshold = 0.5
   Recall    = 0.730769
   F1        = 0.703704


Total scoring time: 0.99 seconds
Parameter learned model CLL: -0.596671


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(D, A), follows(D, D)', 'false,false': 'follows(A, E), recursion_accounttype(E, B)', 'false,false,true': 'tweets(A, F)', 'false,false,false': 'follows(G, A), follows(H, G)'}, {'true': [5.501, 47, 85], 'false,true': [0.0, 0, 0], 'false,false,true,true': [3.047, 41, 12], 'false,false,true,false': [1.351, 21, 2], 'false,false,false,true': [3.23, 27, 17], 'false,false,false,false': [3.651, 20, 40]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), tweets(A, E)', 'false': 'follows(F, A), follows(A, F)', 'false,true': 'follows(A, A)', 'false,false': 'follows(A, G)', 'false,false,false': 'follows(H, A)'}, {'true,true': [5.235, 57, 57], 'true,false': [3.564, 40, 21], 'false,true,true': [0.0, 0, 0], 'false,true,false': [2.962, 21, 15], 'false,false,true': [0.416, 10, 35], 'false,false,false,true': [2.876, 17, 17], 'false,false,false,false': [2.345, 11, 11]}], ['accounttype(A, B)', {'': 'tweets(A, C), follows(D, A)', 'true': 'follows(E, D), recursion_accounttype(E, B)', 'true,false': 'follows(A, D)', 'true,false,false': 'follows(D, D)', 'false': 'follows(A, F), recursion_accounttype(F, B)', 'false,false': 'follows(A, G), follows(G, G)'}, {'true,true': [6.348, 81, 86], 'true,false,true': [0.013, 3, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [1.497, 6, 4], 'false,true': [3.547, 40, 21], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.469, 26, 45]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A)', 'false,false,false': 'follows(A, F), recursion_accounttype(F, B)'}, {'true': [0.48, 47, 85], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.447, 46, 19], 'false,false,true': [0.403, 15, 4], 'false,false,false,true': [2.494, 29, 8], 'false,false,false,false': [3.525, 19, 40]}], ['accounttype(A, B)', {'': 'tweets(A, C), follows(A, D)', 'true': 'follows(D, E), recursion_accounttype(E, B)', 'true,false': 'follows(D, A)', 'true,false,false': 'recursion_accounttype(D, B)', 'false': 'follows(F, A), recursion_accounttype(F, B)', 'false,false': 'follows(G, A)', 'false,false,true': 'follows(H, G), recursion_accounttype(H, B)'}, {'true,true': [6.42, 89, 92], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.973, 7, 1], 'true,false,false,false': [0.953, 1, 4], 'false,true': [2.947, 12, 29], 'false,false,true,true': [1.531, 15, 3], 'false,false,true,false': [0.082, 5, 0], 'false,false,false': [0.451, 27, 27]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(A, D), follows(D, A)', 'true,true': 'follows(C, D), follows(A, C)', 'true,false': 'follows(E, C), follows(E, E)', 'true,false,false': 'follows(F, C)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(A, A)', 'false,false,false': 'follows(A, H)'}, {'true,true,true': [3.832, 22, 44], 'true,true,false': [2.851, 14, 19], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [2.631, 11, 20], 'true,false,false,false': [0.045, 0, 2], 'false,true': [3.351, 62, 14], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [3.87, 28, 44], 'false,false,false,false': [2.668, 19, 13]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), follows(D, A)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A)', 'false,false,true': 'follows(F, E)', 'false,false,false': 'follows(A, G)'}, {'true,true': [4.653, 45, 54], 'true,false': [3.678, 52, 24], 'false,true': [0.0, 0, 0], 'false,false,true,true': [4.135, 39, 37], 'false,false,true,false': [0.585, 1, 1], 'false,false,false,true': [2.515, 8, 29], 'false,false,false,false': [2.345, 11, 11]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'false': 'follows(D, A), tweets(D, E)', 'false,true': 'follows(D, D)', 'false,true,false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, F)', 'false,false,true': 'tweets(G, F), recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A), recursion_accounttype(H, B)'}, {'true': [7.213, 128, 128], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [2.376, 9, 15], 'false,true,false,false': [1.245, 8, 2], 'false,false,true,true': [1.414, 4, 4], 'false,false,true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.871, 7, 7]}], ['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(D, A)', 'true,false': 'follows(A, C)', 'false': 'recursion_accounttype(E, B)', 'false,true': 'follows(E, F), follows(A, F)'}, {'true,true,true': [4.715, 35, 63], 'true,true,false': [4.606, 60, 41], 'true,false,true': [0.145, 6, 0], 'true,false,false': [0.433, 7, 4], 'false,true,true': [3.431, 35, 37], 'false,true,false': [2.523, 13, 11], 'false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'follows(F, D), recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)', 'false,false,false': 'tweets(A, I)'}, {'true': [5.482, 47, 85], 'false,true,true': [3.689, 49, 21], 'false,true,false,true': [0.0, 0, 0], 'false,true,false,false': [1.226, 12, 2], 'false,false,true,true': [3.18, 25, 33], 'false,false,true,false': [1.301, 12, 4], 'false,false,false,true': [1.414, 4, 4], 'false,false,false,false': [1.871, 7, 7]}]]
[{'': [0.2292814508723619, 0.23885802469135872], 'false': [nan, 0.23885802469135872], 'false,false': [0.15027700831024876, 0.24768860946745574], 'false,false,false': [0.23708677685950363, 0.22222222222222296], 'false,false,true': [0.1751512993948019, 0.07939508506616262]}, {'': [0.23247764139200439, 0.24053552967319958], 'false': [0.24373776835438646, 0.23159157808484662], 'false,true': [nan, 0.24373776835438646], 'true': [0.24041965761724832, 0.20819780743943378], 'false,false': [0.17337484732643157, 0.24595314281805195], 'false,false,false': [0.24323794709066812, 0.25]}, {'': [0.24048514512400937, 0.22182567417737883], 'true': [0.24127659234261742, 0.1959598060998928], 'false': [0.2062382691187458, 0.21990255953778187], 'false,false': [nan, 0.21990255953778187], 'true,false': [5.447929946735449e-05, 0.22408536302376528], 'true,false,false': [nan, 0.22408536302376528]}, {'': [0.23080128396722813, 0.20947600610873893], 'false': [0.19947742958631448, 0.21151458716330404], 'false,false': [0.1628067646031925, 0.21176429696542656], 'false,false,false': [0.16813328816678352, 0.21066013596318636], 'false,true': [nan, 0.19947742958631448]}, {'': [0.226096133000496, 0.211531030050202], 'true': [0.22774195049524157, 0.19509720792685506], 'false': [0.21186356319164468, 0.18664264287579677], 'true,false': [nan, 0.19509720792685495], 'true,false,false': [0.11844387344375173, 0.18175576272613453], 'false,false': [0.10620407735017368, 0.20377681040667012], 'false,false,true': [0.13028714424519344, 0.0013352715653479285]}, {'': [0.22880333325028313, 0.19806938610968344], 'true': [0.23214307391434955, 0.21862542556436715], 'true,true': [0.22243392410791882, 0.24628364269335656], 'true,false': [nan, 0.2186254255643672], 'true,false,false': [0.22328582726549703, 0.0010165216759974172], 'false': [0.1477317597770761, 0.21881481279276396], 'false,false': [nan, 0.21881481279276382], 'false,false,false': [0.2080428388166758, 0.22241592345430178]}, {'': [0.20282457295308062, 0.21771795219537504], 'false': [nan, 0.2177179521953751], 'false,false': [0.22392326869535667, 0.20659234246920177], 'false,false,true': [0.22500454062516137, 0.1708320965523816], 'false,false,false': [0.17088588590073175, 0.25000000000000006], 'true': [0.2187188448609983, 0.1780260191087719]}, {'': [0.20323292167786644, 0.229259049283472], 'false': [0.21583676667057272, 0.25000000000000006], 'false,false': [0.24999999999999997, 0.24999999999999997], 'false,false,true': [0.24999999999999997, nan], 'false,false,false': [nan, 0.24999999999999997], 'false,true': [nan, 0.21583676667057272], 'false,true,false': [0.2351551708690388, 0.1549083878327898]}, {'': [0.2146642060941881, 0.19146840359243], 'true': [0.2197825455352071, 0.13436588927989138], 'true,true': [0.22687995077398493, 0.21002030884446066], 'false': [0.19146840359243, nan], 'false,true': [0.1634785051270797, 0.2651510553890881], 'true,false': [0.003521139345547597, 0.18757831782618642]}, {'': [0.22763041212435356, 0.18758134693805423], 'false': [0.18068305383709732, 0.19010689542191442], 'false,false': [0.1722460791665099, 0.2500000000000001], 'false,false,false': [0.24999999999999994, 0.24999999999999997], 'false,true': [0.19436105054683284, 0.10730272452534864], 'false,false,true': [0.17432143256751814, 0.10573636889566337], 'false,true,false': [nan, 0.10730272452534864]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
2;;accounttype(A, B) :- tweets(A, C), follows(D, A).;true;true
2;true;follows(E, D), recursion_accounttype(E, B).;true;true
2;true,false;follows(A, D).;true;true
4;;accounttype(A, B) :- tweets(A, C), follows(A, D).;true;true
4;false;follows(F, A), recursion_accounttype(F, B).;true;true
4;false,false;follows(G, A).;true;true
4;false,false,true;follows(H, G), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
5;true;follows(A, D), follows(D, A).;true;true
5;true,false;follows(F, C).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, C) )
%   | | then if ( tweets(A, E), tweets(C, F) )
%   | | | then return 0.5884860137511985;  // std dev = 4.187, 89.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=65 */
%   | | | else return 0.8055173561521439;  // std dev = 0.973, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | else return 0.039967116917694;  // std dev = 0.386, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | else return -0.1418510649004878;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.04235946141530185;  // std dev = 0.388, 76.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=14 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.0793510649004878;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   | | | else return 0.4098730730305468;  // std dev = 2.678, 29.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=16 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.691482268432845;  // std dev = 2.041, 30.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=25 */
%   | | | else return 0.37539031440985715;  // std dev = 2.691, 29.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=15 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, C) )
%   | | then if ( tweets(A, E), tweets(C, F) )
%   | | | then return 0.5009038004895718;  // std dev = 4.187, 89.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=65 */
%   | | | else return 0.6773408397065112;  // std dev = 0.973, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | else return 0.03503196034273708;  // std dev = 0.386, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | else return -0.12544463852839138;  // std dev = 7.45e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.03712443430138824;  // std dev = 0.388, 76.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=14 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.06996342934731038;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   | | | else return 0.3523366434768775;  // std dev = 2.678, 29.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=16 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.5851860008555363;  // std dev = 2.041, 30.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=25 */
%   | | | else return 0.32330143199938716;  // std dev = 2.691, 29.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=15 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C), follows(D, A) )
%   then if ( follows(E, D), recursion_accounttype(E, B) )
%   | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.3598498153724629;  // std dev = 4.457, 99.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=67 */
%   | | | else return -0.11231637819360638;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else return 0.1459130535791171;  // std dev = 0.441, 58.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=19 */
%   | else if ( follows(A, D) )
%   | | then return -0.22498595615926864;  // std dev = 0.090, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( follows(H, A), follows(I, H) )
%   | | | then return 0.17229217846416942;  // std dev = 1.079, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0.32104061214259005;  // std dev = 1.058, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else if ( follows(A, J), recursion_accounttype(J, B) )
%   | then return 0.13188428286274795;  // std dev = 0.407, 61.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=21 */
%   | else if ( follows(K, A), follows(A, K) )
%   | | then return -0.03418689311720656;  // std dev = 0.872, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.3568428713433448;  // std dev = 0.446, 66.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=44 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, C) )
%   | | then if ( tweets(A, E), tweets(C, F) )
%   | | | then return 0.31713903325492643;  // std dev = 4.187, 89.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=65 */
%   | | | else return 0.4787068720970769;  // std dev = 0.964, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | else return -0.020411777245452182;  // std dev = 0.388, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | else return -0.10933645681196374;  // std dev = 0.056, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.013940724151810281;  // std dev = 0.388, 76.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=14 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.0780610111779901;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   | | | else return 0.2661644252110294;  // std dev = 2.645, 29.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=16 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.3748596716690476;  // std dev = 2.041, 30.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=25 */
%   | | | else return 0.19521291894379128;  // std dev = 2.691, 29.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=15 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C), follows(A, D) )
%   then if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( tweets(A, G), tweets(F, G) )
%   | | | then return 0.27104328556003526;  // std dev = 3.673, 75.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=56 */
%   | | | else return -0.366676145056759;  // std dev = 0.382, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return -0.0920423835027318;  // std dev = 3.73e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.13145988059236202;  // std dev = 2.637, 33.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=10 */
%   | | | else return -0.07416960406526828;  // std dev = 1.341, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.1817110790469892;  // std dev = 3.050, 46.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=26 */
%   | | | else return 0.3868475665191099;  // std dev = 0.869, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(L, A), recursion_accounttype(L, B) )
%   | then return 0.23615232932429786;  // std dev = 0.361, 41.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=29 */
%   | else return 0.07712900597264957;  // std dev = 0.412, 77.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=30 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then return 0.14460911997608503;  // std dev = 0.389, 99.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=63 */
%   | else if ( follows(E, C) )
%   | | then if ( follows(A, F), follows(F, G) )
%   | | | then return 0.21670310560664988;  // std dev = 0.874, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.12147621130126635;  // std dev = 2.093, 26.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=16 */
%   | | else return 0.7601184109297269;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, H), recursion_accounttype(H, B) )
%   | then return 0.00283786109793853;  // std dev = 0.385, 76.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=14 */
%   | else if ( follows(I, A) )
%   | | then if ( follows(I, J), follows(J, A) )
%   | | | then return -0.08453516641316386;  // std dev = 0.961, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   | | | else return 0.17141299524330508;  // std dev = 2.625, 29.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=16 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.2480412072884222;  // std dev = 2.057, 30.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=25 */
%   | | | else return 0.12533029517168168;  // std dev = 2.681, 29.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=15 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, C) )
%   | | then if ( tweets(A, E), tweets(C, F) )
%   | | | then return 0.1451086675486153;  // std dev = 4.088, 89.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=65 */
%   | | | else return 0.27112521960871244;  // std dev = 0.964, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | else return -0.08374631199362761;  // std dev = 0.324, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | else return -0.1155363461085179;  // std dev = 0.112, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.0024165961448833657;  // std dev = 0.385, 76.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=14 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.10219678863810244;  // std dev = 2.663, 38.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=16 */
%   | | | else return -0.18390139070882708;  // std dev = 0.810, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.18941312964524357;  // std dev = 2.056, 30.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=25 */
%   | | | else return 0.09515983871422969;  // std dev = 2.681, 29.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=15 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(C, E), follows(E, F) )
%   | | | then return 0.23062662748155893;  // std dev = 2.916, 81.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=71 */
%   | | | else return -0.14796133950270898;  // std dev = 2.563, 28.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=13 */
%   | | else return -0.13674397740957703;  // std dev = 0.255, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   | else return -0.10434133024525087;  // std dev = 0.102, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.002057266715132162;  // std dev = 0.385, 76.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=14 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.12974775259799654;  // std dev = 3.456, 69.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=44 */
%   | | | else return -0.469814510426096;  // std dev = 0.057, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( follows(J, A) )
%   | | | then return -0.03459166390089923;  // std dev = 0.970, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | | else return 0.06257847654202639;  // std dev = 2.345, 22.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=11 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(D, C) )
%   then if ( recursion_accounttype(D, B), follows(C, D) )
%   | then return 0.05414877862530724;  // std dev = 0.385, 192.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=104 */
%   | else return -0.09291661359880965;  // std dev = 0.273, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then if ( follows(E, F), follows(A, F) )
%   | | then if ( follows(E, G), follows(F, G) )
%   | | | then return 0.34883546831054907;  // std dev = 1.797, 13.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
%   | | | else return -0.034126797227747516;  // std dev = 0.942, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | else return -0.1342703793179802;  // std dev = 0.186, 19.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=1 */
%   | else if ( follows(A, H) )
%   | | then if ( tweets(A, I), follows(H, J) )
%   | | | then return 0.047515534586084866;  // std dev = 1.918, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.18286754806633992;  // std dev = 1.534, 20.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=16 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.04712343914081521;  // std dev = 1.414, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | else return 0.04712343914081525;  // std dev = 1.871, 14.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), follows(E, C) )
%   | then return 0.04611049841685954;  // std dev = 0.372, 127.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=80 */
%   | else return 0.385600174768497;  // std dev = 0.504, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(F, A) )
%   | then if ( tweets(A, G), follows(H, F) )
%   | | then if ( follows(H, A), tweets(H, G) )
%   | | | then return -0.12795063178691085;  // std dev = 0.973, 23.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=1 */
%   | | | else return 0.12473214302501684;  // std dev = 2.986, 44.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=20 */
%   | | else return -0.1698740740696626;  // std dev = 0.284, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then if ( follows(I, J), follows(A, J) )
%   | | | then return 0.1778866845930181;  // std dev = 2.139, 20.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=8 */
%   | | | else return -0.15850238457293855;  // std dev = 0.043, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.0987351706669525;  // std dev = 2.038, 30.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=25 */
%   | | | else return 0.04271673211016289;  // std dev = 2.622, 29.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=15 */


Results
   AUC ROC   = 0.700995
   AUC PR    = 0.646505
   CLL	      = -0.621099
   Precision = 0.634731 at threshold = 0.5
   Recall    = 0.84127
   F1        = 0.723549


Total learning time: 19.667 seconds
Total inference time: 1.202 seconds
AUC ROC: 0.700995


Results scoring model
   AUC ROC   = 0.875041
   AUC PR    = 0.858659
   CLL	      = -0.472253
   Precision = 0.794872 at threshold = 0.5
   Recall    = 0.794872
   F1        = 0.794872


Total scoring time: 1.42 seconds
Refined model CLL: -0.472253


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.700995
   AUC PR    = 0.646505
   CLL	      = -0.621099
   Precision = 0.634731 at threshold = 0.5
   Recall    = 0.84127
   F1        = 0.723549


Total learning time: 24.221000000000004 seconds
Total inference time: 1.202 seconds
AUC ROC: 0.700995
Total revision time: 24.221000000000004
Best scored revision CLL: -0.472253


Dataset: 7_yeast_twitter, Fold: 2, Type: Transfer (trRDN-B), Time: 03:37:41
{'AUC ROC': 0.700995, 'AUC PR': 0.646505, 'CLL': -0.621099, 'Precision': [0.634731, 0.5], 'Recall': 0.84127, 'F1': 0.723549, 'Learning time': 24.221000000000004, 'Inference time': 1.202, 'parameter_1.0': {'AUC ROC': 0.686823, 'AUC PR': 0.652454, 'CLL': -0.641368, 'Precision': [0.589286, 0.5], 'Recall': 0.785714, 'F1': 0.673469, 'Learning time': 2.144, 'Inference time': 0.875}}


