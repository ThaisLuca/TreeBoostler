Starting experiment #1 for 4_cora_imdb

Start learning from source dataset

Source train facts examples: 42558
Source train pos examples: 3017
Source train neg examples: 5022

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.25375166443991654;  // std dev = 0.489, 6,595.000 (wgt'ed) examples reached here.  /* #neg=3,986 #pos=2,609 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.11529179224236855;  // std dev = 4.479, 105.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=27 */
%   | | | else return 0.31078051404687906;  // std dev = 6.861, 190.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=86 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, A) )
%   | | | then return 0.4778672449586677;  // std dev = 4.091, 71.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=44 */
%   | | | else return 0.2775037738091898;  // std dev = 2.747, 31.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=13 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.4748156017661778;  // std dev = 3.766, 60.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=37 */
%   | | | else return 0.6142464960751212;  // std dev = 2.750, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | then return 0.045745834324316524;  // std dev = 0.390, 645.000 (wgt'ed) examples reached here.  /* #neg=524 #pos=121 */
%   | else return 0.02093963277393071;  // std dev = 0.369, 301.000 (wgt'ed) examples reached here.  /* #neg=252 #pos=49 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.2202789253000489;  // std dev = 0.489, 6,595.000 (wgt'ed) examples reached here.  /* #neg=3,986 #pos=2,609 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.0815140714063931;  // std dev = 4.479, 105.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=27 */
%   | | | else return 0.2685926717395528;  // std dev = 6.861, 190.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=86 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.40767823500744416;  // std dev = 4.399, 82.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=50 */
%   | | | else return 0.14118079077600226;  // std dev = 2.128, 20.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=7 */
%   | | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | | then return 0.7993321453104812;  // std dev = 0.046, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.4418802615820285;  // std dev = 4.626, 97.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=64 */
%   else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | then return 0.04145180608364211;  // std dev = 0.390, 645.000 (wgt'ed) examples reached here.  /* #neg=524 #pos=121 */
%   | else return 0.015443642182564108;  // std dev = 0.369, 301.000 (wgt'ed) examples reached here.  /* #neg=252 #pos=49 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.18612745546670761;  // std dev = 0.489, 6,595.000 (wgt'ed) examples reached here.  /* #neg=3,986 #pos=2,609 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.1417697000866624;  // std dev = 7.707, 263.000 (wgt'ed) examples reached here.  /* #neg=170 #pos=93 */
%   | | | else return 0.39717383827381164;  // std dev = 2.739, 32.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.33187111783358475;  // std dev = 4.356, 82.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=50 */
%   | | | else return 0.10206388571937572;  // std dev = 2.136, 20.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=7 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.333757023670504;  // std dev = 3.742, 60.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=37 */
%   | | | else return 0.43192953107598786;  // std dev = 2.744, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | then return 0.036270579657639114;  // std dev = 0.390, 645.000 (wgt'ed) examples reached here.  /* #neg=524 #pos=121 */
%   | else return 0.013348050031270688;  // std dev = 0.369, 301.000 (wgt'ed) examples reached here.  /* #neg=252 #pos=49 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.15376240055336185;  // std dev = 0.489, 6,595.000 (wgt'ed) examples reached here.  /* #neg=3,986 #pos=2,609 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.039355388262597046;  // std dev = 4.479, 105.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=27 */
%   | | | else return 0.19026773487392346;  // std dev = 6.825, 190.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=86 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.26101168367636923;  // std dev = 4.349, 82.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=50 */
%   | | | else return 0.0825480915843306;  // std dev = 2.136, 20.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=7 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.2615307549528812;  // std dev = 3.738, 60.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=37 */
%   | | | else return 0.3312929277687879;  // std dev = 2.743, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | then return 0.03279533904980068;  // std dev = 0.390, 645.000 (wgt'ed) examples reached here.  /* #neg=524 #pos=121 */
%   | else return 0.008982215589516453;  // std dev = 0.369, 301.000 (wgt'ed) examples reached here.  /* #neg=252 #pos=49 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then if ( author(E, D), venue(E, B) )
%   | | then return 0.6986232514665297;  // std dev = 0.133, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( haswordtitle(F, C) )
%   | | | then return 0.3446880426032579;  // std dev = 1.951, 16.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=10 */
%   | | | else return 0.40740780978203534;  // std dev = 1.158, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | else if ( haswordtitle(G, C) )
%   | | then if ( title(H, G), venue(H, A) )
%   | | | then return 0.12352997135775219;  // std dev = 39.619, 6,576.000 (wgt'ed) examples reached here.  /* #neg=3,982 #pos=2,594 */
%   | | | else return 0.104203124611548;  // std dev = 8.127, 288.000 (wgt'ed) examples reached here.  /* #neg=178 #pos=110 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.17065139356660994;  // std dev = 4.862, 101.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=56 */
%   | | | else return 0.21422377446515728;  // std dev = 4.624, 99.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=66 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then return 0.028577432851189462;  // std dev = 0.390, 645.000 (wgt'ed) examples reached here.  /* #neg=524 #pos=121 */
%   | else return 0.007549432746836227;  // std dev = 0.369, 301.000 (wgt'ed) examples reached here.  /* #neg=252 #pos=49 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.09938944038793375;  // std dev = 0.489, 6,595.000 (wgt'ed) examples reached here.  /* #neg=3,986 #pos=2,609 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 7.2942048426765E-4;  // std dev = 4.479, 105.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=27 */
%   | | | else return 0.1276064474509265;  // std dev = 6.823, 190.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=86 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return 0.30804996582888944;  // std dev = 0.356, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | | then return 0.2694052046511009;  // std dev = 1.109, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.13574226219027347;  // std dev = 6.503, 186.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=112 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( haswordauthor(M, K) )
%   | | then return 0.10544322935663519;  // std dev = 0.443, 63.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=17 */
%   | | else return 0.0172129793847778;  // std dev = 0.383, 582.000 (wgt'ed) examples reached here.  /* #neg=478 #pos=104 */
%   | else return 0.004173689208583256;  // std dev = 0.369, 301.000 (wgt'ed) examples reached here.  /* #neg=252 #pos=49 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.0784113261338352;  // std dev = 0.489, 6,595.000 (wgt'ed) examples reached here.  /* #neg=3,986 #pos=2,609 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.04089066785565177;  // std dev = 7.676, 263.000 (wgt'ed) examples reached here.  /* #neg=170 #pos=93 */
%   | | | else return 0.22401813445526392;  // std dev = 2.739, 32.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=20 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return 0.14716948248971956;  // std dev = 4.006, 71.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=44 */
%   | | | else return -0.03974625123883623;  // std dev = 2.679, 31.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=13 */
%   | | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | | then return 0.3479628705323421;  // std dev = 0.139, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.1259911202385434;  // std dev = 4.549, 97.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=64 */
%   else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | then return 0.04381835191306946;  // std dev = 0.405, 91.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=19 */
%   | else return 0.013394835466303486;  // std dev = 0.381, 855.000 (wgt'ed) examples reached here.  /* #neg=704 #pos=151 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.06119725998048433;  // std dev = 0.489, 6,595.000 (wgt'ed) examples reached here.  /* #neg=3,986 #pos=2,609 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return -0.016654400016956117;  // std dev = 4.479, 105.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=27 */
%   | | | else return 0.08213809536101611;  // std dev = 6.800, 190.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=86 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, B) )
%   | | | then return 0.11112437076424313;  // std dev = 4.006, 71.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=44 */
%   | | | else return -0.029975593467184893;  // std dev = 2.679, 31.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=13 */
%   | | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | | then return 0.27506389482893306;  // std dev = 0.121, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.09518768788086017;  // std dev = 4.549, 97.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=64 */
%   else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | then return 0.019894177453302807;  // std dev = 0.390, 645.000 (wgt'ed) examples reached here.  /* #neg=524 #pos=121 */
%   | else return 0.0015957085866570477;  // std dev = 0.369, 301.000 (wgt'ed) examples reached here.  /* #neg=252 #pos=49 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.04766224640668635;  // std dev = 0.489, 6,595.000 (wgt'ed) examples reached here.  /* #neg=3,986 #pos=2,609 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return -0.026928293864638325;  // std dev = 4.479, 105.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=27 */
%   | | | else return 0.0629196869104975;  // std dev = 6.799, 190.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=86 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.07981229721296121;  // std dev = 4.309, 82.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=50 */
%   | | | else return -0.06427100245036602;  // std dev = 2.137, 20.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=7 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.05818115747727304;  // std dev = 3.637, 60.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=37 */
%   | | | else return 0.1076424260847174;  // std dev = 2.739, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | then return 0.01809194293825315;  // std dev = 0.390, 645.000 (wgt'ed) examples reached here.  /* #neg=524 #pos=121 */
%   | else return -7.458906572803026E-4;  // std dev = 0.369, 301.000 (wgt'ed) examples reached here.  /* #neg=252 #pos=49 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.5789693211440419;  // std dev = 1.428, 48.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=46 */
%   | | | else return -0.35987901086621643;  // std dev = 7.30e-08, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.20636101702340529;  // std dev = 2.277, 24.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=16 */
%   | | | else return -0.11823279451929372;  // std dev = 4.200, 99.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=25 */
%   | else if ( haswordtitle(H, C) )
%   | | then if ( title(I, H), venue(I, B) )
%   | | | then return 0.036553917350111285;  // std dev = 39.122, 6,411.000 (wgt'ed) examples reached here.  /* #neg=3,878 #pos=2,533 */
%   | | | else return 0.023647351460892845;  // std dev = 8.056, 288.000 (wgt'ed) examples reached here.  /* #neg=178 #pos=110 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.02453553584700615;  // std dev = 4.675, 94.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=51 */
%   | | | else return 0.0580389901837293;  // std dev = 4.556, 99.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=66 */
%   else return 0.010384388664107708;  // std dev = 0.383, 946.000 (wgt'ed) examples reached here.  /* #neg=776 #pos=170 */


Starting fold 1

Target train facts examples: 215
Target train pos examples: 56
Target train neg examples: 56

Target test facts examples: 863
Target test pos	 examples: 326
Target test neg examples: 326

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
3;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
3;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
3;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordauthor(D, C).;true;true
4;true,true;author(E, D), venue(E, B).;false;true
4;true,true,false;haswordtitle(F, C).;false;false
4;true,false;haswordtitle(G, C).;true;true
4;true,false,true;title(H, G), venue(H, A).;false;false
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(A, K), haswordtitle(L, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(B, I), haswordauthor(J, I).;false;false
5;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, B).;false;true
6;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
6;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
6;true,false,true;title(J, I), venue(J, B).;false;false
6;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
6;false;haswordvenue(A, M), haswordauthor(N, M).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
7;true,false,true;title(I, H), venue(I, B).;false;false
7;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
7;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;title(F, D), venue(F, B).;false;false
8;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
8;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
8;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;haswordvenue(A, D).;false;false
9;true,false;haswordtitle(H, C).;true;true
9;true,false,true;title(I, H), venue(I, B).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109542;  // std dev = 4.21e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.37731768609564714;  // std dev = 0.295, 15.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=11 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.46134229679225547;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return -0.15577873108014506;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783627;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.35062744886489833;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return -0.1363718735542127;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.09269127618926097;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.27549687709413906;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.12109210840601736;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.08518475138839687;  // std dev = 9.31e-10, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.22401735022872488;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10878417714486825;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109173;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18748675596093392;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return -0.09867761248699966;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333704;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.16058109912122442;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.09024209518885223;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.14009611947420283;  // std dev = 7.45e-09, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( movie(D, A) )
%   | | | then return -0.08310221713126553;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.0641918400820262;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */


Results
   AUC ROC   = 0.977516
   AUC PR    = 0.979007
   CLL	      = -0.320111
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.819018
   F1        = 0.900506


Total learning time: 0.986 seconds
Total inference time: 0.934 seconds
AUC ROC: 0.977516


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.100628
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.461 seconds
Parameter learned model CLL: -0.100628


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 11], 'true,false,false,true': [0.0, 4, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 7, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [4.21e-08, 0, 11], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 4, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 7, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.295, 4, 11], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 7, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 11], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 4, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 7, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 11], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 4, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 7, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 11], 'true,false,false,true': [0.0, 4, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.31e-10, 7, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 11], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.0, 4, 0], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 7, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 11], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 4, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.63e-09, 7, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 11], 'true,false,false,true': [0.0, 4, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.63e-09, 7, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'movie(D, A)'}, {'true,true,true,true': [0.0, 0, 0], 'true,true,true,false': [7.45e-09, 0, 11], 'true,true,false,true': [0.0, 4, 0], 'true,true,false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false': [0.0, 7, 0]}]]
[{'': [0.1955555555555553, -7.93016446160826e-18], 'true': [nan, 0.1955555555555553], 'true,false': [-1.6148698540002277e-16, 0.0], 'true,false,false': [0.0, nan], 'false': [-7.93016446160826e-18, nan]}, {'': [0.13960447354874544, -1.982541115402065e-18], 'true': [1.6148698540002277e-16, 0.0], 'true,false': [nan, 0.0], 'true,false,false': [0.0, nan], 'false': [-1.982541115402065e-18, nan]}, {'': [0.08717873342269535, -1.982541115402065e-18], 'true': [nan, 0.08717873342269535], 'true,false': [0.08717873342269535, nan], 'false': [-1.982541115402065e-18, nan]}, {'': [0.07447505766160302, 0.0], 'true': [0.0, 0.0], 'false': [0.0, nan], 'true,false': [nan, 0.0], 'true,false,false': [0.0, nan]}, {'': [0.04637958649606054, 0.0], 'true': [0.0, 0.0], 'false': [0.0, nan], 'true,false': [nan, 0.0], 'true,false,false': [0.0, nan]}, {'': [0.03075752991325293, 9.912705577010326e-19], 'true': [nan, 0.03075752991325293], 'true,false': [0.0, 0.0], 'false': [9.912705577010326e-19, nan], 'true,false,false': [0.0, nan]}, {'': [0.021659118628340624, -9.912705577010326e-19], 'true': [-2.0185873175002847e-17, 0.0], 'true,false': [0.0, nan], 'true,false,true': [nan, 0.0], 'false': [-9.912705577010326e-19, nan]}, {'': [0.016014053394866692, 9.912705577010326e-19], 'true': [-1.5139404881252134e-17, 0.0], 'false': [9.912705577010326e-19, nan], 'true,false': [nan, 0.0], 'true,false,false': [0.0, nan]}, {'': [0.012302844850542493, 9.912705577010326e-19], 'true': [nan, 0.012302844850542493], 'true,false': [0.0, 0.0], 'false': [9.912705577010326e-19, nan], 'true,false,false': [0.0, nan]}, {'': [0.009742088392852056, -4.956352788505163e-19], 'true': [0.009742088392852056, nan], 'true,true': [5.046468293750712e-18, 0.0], 'true,true,true': [nan, 5.046468293750712e-18], 'true,true,false': [0.0, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, D).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, E).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, D).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109542;  // std dev = 4.21e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.12544463852839138;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.5553664367462846;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.11231637819360639;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4175135841583098;  // std dev = 4.21e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.10159632948783627;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.3207118471601497;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.09269127618926097;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2551722425694894;  // std dev = 2.11e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.08518475138839687;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.20975771563253562;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.07877675473109173;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17709649774527736;  // std dev = 7.45e-09, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.07324622576333704;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15274385809367094;  // std dev = 7.45e-09, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.06842697784420272;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13400703000801117;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.0641918400820262;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.281707
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.819018
   F1        = 0.900506


Total learning time: 0.938 seconds
Total inference time: 0.803 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.462 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.281707
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.819018
   F1        = 0.900506


Total learning time: 2.847 seconds
Total inference time: 0.803 seconds
AUC ROC: 1.0
Total revision time: 2.847
Best scored revision CLL: -0.094637


Dataset: 4_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 03:30:14
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.281707, 'Precision': [1.0, 0.5], 'Recall': 0.819018, 'F1': 0.900506, 'Learning time': 2.847, 'Inference time': 0.803, 'parameter_0.2': {'AUC ROC': 0.977516, 'AUC PR': 0.979007, 'CLL': -0.320111, 'Precision': [1.0, 0.5], 'Recall': 0.819018, 'F1': 0.900506, 'Learning time': 0.986, 'Inference time': 0.934}}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
3;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
3;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
3;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordauthor(D, C).;true;true
4;true,true;author(E, D), venue(E, B).;false;true
4;true,true,false;haswordtitle(F, C).;false;false
4;true,false;haswordtitle(G, C).;true;true
4;true,false,true;title(H, G), venue(H, A).;false;false
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(A, K), haswordtitle(L, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(B, I), haswordauthor(J, I).;false;false
5;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, B).;false;true
6;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
6;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
6;true,false,true;title(J, I), venue(J, B).;false;false
6;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
6;false;haswordvenue(A, M), haswordauthor(N, M).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
7;true,false,true;title(I, H), venue(I, B).;false;false
7;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
7;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;title(F, D), venue(F, B).;false;false
8;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
8;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
8;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;haswordvenue(A, D).;false;false
9;true,false;haswordtitle(H, C).;true;true
9;true,false,true;title(I, H), venue(I, B).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995121;  // std dev = 5.96e-08, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109542;  // std dev = 7.30e-08, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 7.45e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.39420161934700065;  // std dev = 0.286, 29.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=22 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360635;  // std dev = 1.39e-08, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4571493814292565;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return -0.15801209296697336;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783631;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.3477433644409907;  // std dev = 5.16e-08, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return -0.1381065487378478;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.09269127618926094;  // std dev = 7.45e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.27354374521669644;  // std dev = 2.11e-08, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.1224734729677037;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.08518475138839685;  // std dev = 2.63e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.22265505559932833;  // std dev = 2.11e-08, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10990750863001177;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109173;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18649987471629104;  // std dev = 1.83e-08, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return -0.09960746493479643;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333704;  // std dev = 3.73e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.15984048975102294;  // std dev = 3.16e-08, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.09102352928953326;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 3.73e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.13952318568092179;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( movie(D, A) )
%   | | | then return -0.0837675266875393;  // std dev = 4.56e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202619;  // std dev = 7.90e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */


Results
   AUC ROC   = 0.977516
   AUC PR    = 0.979007
   CLL	      = -0.319282
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.819018
   F1        = 0.900506


Total learning time: 1.054 seconds
Total inference time: 0.906 seconds
AUC ROC: 0.977516


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.100064
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.563 seconds
Parameter learned model CLL: -0.100064


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [5.96e-08, 0, 22], 'true,false,false,true': [0.0, 7, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 15, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [7.3e-08, 0, 22], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 7, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.45e-09, 15, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.286, 7, 22], 'true,false,false': [0.0, 0, 0], 'false,true': [1.39e-08, 15, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 22], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 7, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 15, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [5.16e-08, 0, 22], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 7, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.45e-09, 15, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [2.11e-08, 0, 22], 'true,false,false,true': [0.0, 7, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.63e-09, 15, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [2.11e-08, 0, 22], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.0, 7, 0], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 15, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.83e-08, 0, 22], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 7, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.73e-09, 15, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [3.16e-08, 0, 22], 'true,false,false,true': [0.0, 7, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.73e-09, 15, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'movie(D, A)'}, {'true,true,true,true': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 22], 'true,true,false,true': [4.56e-09, 7, 0], 'true,true,false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false': [7.9e-09, 15, 0]}]]
[{'': [0.18311533888228385, -1.4802973661668754e-17], 'true': [nan, 0.18311533888228385], 'true,false': [1.6148698540002277e-16, -7.93016446160826e-18], 'true,false,false': [-7.93016446160826e-18, nan], 'false': [-1.4802973661668754e-17, nan]}, {'': [0.13072357065355164, 3.7007434154171884e-18], 'true': [2.4223047810003414e-16, -1.982541115402065e-18], 'false': [3.7007434154171884e-18, nan], 'true,false': [nan, -1.982541115402065e-18], 'true,false,false': [-1.982541115402065e-18, nan]}, {'': [0.08163288058308255, 1.295260195396016e-17], 'true': [nan, 0.08163288058308255], 'true,false': [0.08163288058308255, nan], 'false': [1.295260195396016e-17, nan]}, {'': [0.06929517300300471, -5.551115123125783e-18], 'true': [-1.2111523905001707e-16, -7.93016446160826e-18], 'false': [-5.551115123125783e-18, nan], 'true,false': [nan, -7.93016446160826e-18], 'true,false,false': [-7.93016446160826e-18, nan]}, {'': [0.04322440103796232, 3.7007434154171884e-18], 'true': [1.2111523905001707e-16, 0.0], 'false': [3.7007434154171884e-18, nan], 'true,false': [nan, 0.0], 'true,false,false': [0.0, nan]}, {'': [0.02871791214407929, 5.551115123125783e-18], 'true': [nan, 0.02871791214407929], 'true,false': [2.0185873175002847e-17, -3.96508223080413e-18], 'false': [5.551115123125783e-18, nan], 'true,false,false': [-3.96508223080413e-18, nan]}, {'': [0.02025216445365786, -1.8503717077085942e-18], 'true': [2.0185873175002847e-17, -1.982541115402065e-18], 'false': [-1.8503717077085942e-18, nan], 'true,false': [-1.982541115402065e-18, nan], 'true,false,true': [nan, -1.982541115402065e-18]}, {'': [0.014989347335959939, 9.251858538542971e-19], 'true': [1.5139404881252134e-17, 0.0], 'false': [9.251858538542971e-19, nan], 'true,false': [nan, 0.0], 'true,false,false': [0.0, nan]}, {'': [0.011523952950741781, 9.251858538542971e-19], 'true': [nan, 0.011523952950741781], 'true,false': [4.5418214643756407e-17, -1.982541115402065e-18], 'false': [9.251858538542971e-19, nan], 'true,false,false': [-1.982541115402065e-18, nan]}, {'': [0.009129900479693542, 4.163336342344337e-18], 'true': [0.009129900479693542, nan], 'true,true': [-2.0185873175002847e-17, 2.9738116731030977e-18], 'true,true,false': [2.9738116731030977e-18, nan], 'true,true,true': [nan, -2.0185873175002847e-17]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, D).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, E).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, D).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.8581489350995121;  // std dev = 5.96e-08, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.1418510649004878;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109542;  // std dev = 7.30e-08, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else return -0.12544463852839138;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.12544463852839138;  // std dev = 7.45e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.5553664367462846;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else return -0.11231637819360639;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.11231637819360635;  // std dev = 1.39e-08, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4175135841583099;  // std dev = 3.65e-08, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else return -0.10159632948783627;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.10159632948783631;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.32071184716014955;  // std dev = 2.11e-08, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else return -0.09269127618926097;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.09269127618926094;  // std dev = 7.45e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2551722425694895;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else return -0.08518475138839687;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.08518475138839685;  // std dev = 9.13e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.20975771563253573;  // std dev = 2.11e-08, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else return -0.07877675473109173;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.07877675473109173;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17709649774527747;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else return -0.07324622576333704;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.07324622576333704;  // std dev = 3.73e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1527438580936709;  // std dev = 2.58e-08, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else return -0.06842697784420272;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.06842697784420272;  // std dev = 3.73e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13400703000801117;  // std dev = 7.45e-09, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else return -0.0641918400820262;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.06419184008202619;  // std dev = 7.90e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.281707
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.819018
   F1        = 0.900506


Total learning time: 0.985 seconds
Total inference time: 0.887 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.552 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.281707
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.819018
   F1        = 0.900506


Total learning time: 3.154 seconds
Total inference time: 0.887 seconds
AUC ROC: 1.0
Total revision time: 3.154
Best scored revision CLL: -0.094637


Dataset: 4_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 03:30:20
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.281707, 'Precision': [1.0, 0.5], 'Recall': 0.819018, 'F1': 0.900506, 'Learning time': 3.154, 'Inference time': 0.887, 'parameter_0.4': {'AUC ROC': 0.977516, 'AUC PR': 0.979007, 'CLL': -0.319282, 'Precision': [1.0, 0.5], 'Recall': 0.819018, 'F1': 0.900506, 'Learning time': 1.054, 'Inference time': 0.906}}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
3;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
3;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
3;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordauthor(D, C).;true;true
4;true,true;author(E, D), venue(E, B).;false;true
4;true,true,false;haswordtitle(F, C).;false;false
4;true,false;haswordtitle(G, C).;true;true
4;true,false,true;title(H, G), venue(H, A).;false;false
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(A, K), haswordtitle(L, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(B, I), haswordauthor(J, I).;false;false
5;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, B).;false;true
6;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
6;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
6;true,false,true;title(J, I), venue(J, B).;false;false
6;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
6;false;haswordvenue(A, M), haswordauthor(N, M).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
7;true,false,true;title(I, H), venue(I, B).;false;false
7;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
7;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;title(F, D), venue(F, B).;false;false
8;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
8;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
8;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;haswordvenue(A, D).;false;false
9;true,false;haswordtitle(H, C).;true;true
9;true,false,true;title(I, H), venue(I, B).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995116;  // std dev = 2.23e-07, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109547;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.12544463852839138;  // std dev = 7.45e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, A) )
%   | | then return 0.36667346730674966;  // std dev = 0.301, 46.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=33 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360635;  // std dev = 1.67e-08, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4639885084586308;  // std dev = 1.15e-07, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.1543840149417574;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783635;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.3524506662860573;  // std dev = 5.96e-08, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | else if ( genre(A, E) )
%   | | then return -0.09269127618926096;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.1352861765632196;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.09269127618926093;  // std dev = 1.18e-08, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.2767310618956546;  // std dev = 2.11e-08, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.12022592847858295;  // std dev = 1.05e-08, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.08518475138839683;  // std dev = 2.95e-09, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.22487736414899295;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10598569302738134;  // std dev = 0.028, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109179;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18810916757480536;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | else if ( genre(A, E) )
%   | | then return -0.07142056130594482;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.09827817918937341;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.0668265462309312;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.16104779107541345;  // std dev = 2.79e-08, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.08990608038968184;  // std dev = 5.27e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420274;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.14045688971333944;  // std dev = 1.49e-08, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | else if ( movie(D, A) )
%   | | | then return -0.08138460241304737;  // std dev = 0.019, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.0641918400820262;  // std dev = 6.45e-09, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */


Results
   AUC ROC   = 0.983068
   AUC PR    = 0.98398
   CLL	      = -0.319358
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.819018
   F1        = 0.900506


Total learning time: 1.09 seconds
Total inference time: 0.934 seconds
AUC ROC: 0.983068


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.100993
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.559 seconds
Parameter learned model CLL: -0.100993


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [2.23e-07, 0, 33], 'true,false,false,true': [0.0, 13, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 19, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 33], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [7.45e-09, 13, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 19, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.301, 13, 33], 'true,false,false': [0.0, 0, 0], 'false,true': [1.67e-08, 19, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [1.15e-07, 0, 33], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [0.0, 13, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 19, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [5.96e-08, 0, 33], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [0.0, 13, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.18e-08, 19, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [2.11e-08, 0, 33], 'true,false,false,true': [1.05e-08, 13, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.95e-09, 19, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 33], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.028, 14, 0], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 19, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 33], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [0.0, 13, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 19, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [2.79e-08, 0, 33], 'true,false,false,true': [5.27e-09, 13, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 19, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'movie(D, A)'}, {'true,true,true,true': [0.0, 0, 0], 'true,true,true,false': [1.49e-08, 0, 33], 'true,true,false,true': [0.019, 14, 0], 'true,true,false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false': [6.45e-09, 19, 0]}]]
[{'': [0.20914440923494962, 0.0], 'true': [0.0, 0.20274102079395248], 'true,false': [1.5072118637335459e-15, -1.2810265668751807e-17], 'false': [0.0, nan], 'true,false,false': [-1.2810265668751807e-17, nan]}, {'': [0.14930537291032686, 0.0], 'true': [-6.459479416000911e-16, 3.96508223080413e-18], 'true,false': [0.0, 4.270088556250602e-18], 'true,false,false': [4.270088556250602e-18, nan], 'false': [0.0, nan]}, {'': [0.09323664903174254, 1.460819769243627e-17], 'true': [0.0, 0.09038201627884654], 'true,false': [0.09038201627884654, nan], 'false': [1.460819769243627e-17, nan]}, {'': [0.07905633940361315, -5.843279076974508e-18], 'true': [4.037174635000569e-16, 0.0001848215130743109], 'true,false': [0.0, -1.708035422500241e-17], 'false': [-5.843279076974508e-18, nan], 'true,false,false': [-1.708035422500241e-17, nan]}, {'': [0.04916985129230538, 7.304098846218135e-18], 'true': [1.0765799026668185e-16, 0.00012033791832794358], 'true,false': [0.0, -2.135044278125301e-18], 'false': [7.304098846218135e-18, nan], 'true,false,false': [-2.135044278125301e-18, nan]}, {'': [0.03256587366901418, 8.764918615461762e-18], 'true': [0.0, 0.03194688638789755], 'true,false': [1.3457248783335231e-17, 8.540177112501205e-18], 'false': [8.764918615461762e-18, nan], 'true,false,false': [8.540177112501205e-18, nan]}, {'': [0.022912077602844232, -7.304098846218135e-19], 'true': [-6.7286243916676156e-18, 5.694817870855303e-05], 'true,false': [5.694817870855303e-05, nan], 'true,false,true': [nan, 5.694817870855303e-05], 'false': [-7.304098846218135e-19, nan]}, {'': [0.016938756618772033, -7.304098846218135e-19], 'true': [-6.728624391667616e-17, 4.7843424994075443e-05], 'true,false': [0.0, -4.270088556250602e-18], 'false': [-7.304098846218135e-19, nan], 'true,false,false': [-4.270088556250602e-18, nan]}, {'': [0.013009507449695555, -2.1912296538654404e-18], 'true': [0.0, 0.012768192705020836], 'true,false': [2.3550185370836655e-17, 2.135044278125301e-18], 'true,false,false': [2.135044278125301e-18, nan], 'false': [-2.1912296538654404e-18, nan]}, {'': [0.010300692046643248, 2.1912296538654404e-18], 'true': [0.010300692046643248, nan], 'true,true': [6.7286243916676156e-18, 2.6631499241349825e-05], 'true,true,false': [2.6631499241349825e-05, nan], 'true,true,true': [nan, 6.7286243916676156e-18]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, D).;true;true
4;true,false;genre(A, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(A, D).;true;true
5;true,false;genre(B, E).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, D).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
8;true,false;genre(B, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995116;  // std dev = 2.23e-07, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else return -0.14185106490048777;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109547;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.12544463852839138;  // std dev = 7.45e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else return -0.12544463852839138;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( actor(B) )
%   | | then if ( female(A) )
%   | | | then return -0.11231637819360639;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return -0.11231637819360639;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( female(A) )
%   | | | then return 0.5553664367462846;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.5553664367462846;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( female(A) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( female(B) )
%   | | then return -0.11231637819360638;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.11231637819360639;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.41751358415831014;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.1015963294878363;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else return -0.10159632948783633;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.3207118471601494;  // std dev = 6.45e-09, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.3207118471601494;  // std dev = 3.73e-09, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( genre(A, E) )
%   | | then return -0.09269127618926096;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( female(B) )
%   | | | then return -0.09269127618926097;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return -0.09269127618926096;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( female(B) )
%   | then return -0.09269127618926098;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( female(A) )
%   | | then return -0.09269127618926096;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.09269127618926097;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then if ( female(A) )
%   | | | then return 0.2551722425694894;  // std dev = 2.11e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.25517224256948945;  // std dev = 1.49e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else if ( female(A) )
%   | | | then return -0.08518475138839687;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return -0.08518475138839687;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( female(A) )
%   | then return -0.08518475138839687;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( female(B) )
%   | | then return -0.08518475138839687;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.08518475138839687;  // std dev = 1.32e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.20975771563253562;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.2097577156325356;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.07877675473109172;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else return -0.07877675473109176;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1770964977452775;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | else if ( genre(A, E) )
%   | | then return -0.07324622576333704;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( female(B) )
%   | | | then return -0.07324622576333704;  // std dev = 2.63e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return -0.07324622576333704;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.07324622576333704;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.06842697784420272;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.15274385809367083;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | else if ( female(B) )
%   | | | then return -0.06842697784420272;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return -0.06842697784420272;  // std dev = 1.86e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.06842697784420274;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13400703000801117;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | else if ( female(A) )
%   | | then return -0.0641918400820262;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return -0.0641918400820262;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.06419184008202619;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.281707
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.819018
   F1        = 0.900506


Total learning time: 2.08 seconds
Total inference time: 0.864 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.542 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.281707
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.819018
   F1        = 0.900506


Total learning time: 4.271 seconds
Total inference time: 0.864 seconds
AUC ROC: 1.0
Total revision time: 4.271
Best scored revision CLL: -0.094637


Dataset: 4_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 03:30:27
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.281707, 'Precision': [1.0, 0.5], 'Recall': 0.819018, 'F1': 0.900506, 'Learning time': 4.271, 'Inference time': 0.864, 'parameter_0.6': {'AUC ROC': 0.983068, 'AUC PR': 0.98398, 'CLL': -0.319358, 'Precision': [1.0, 0.5], 'Recall': 0.819018, 'F1': 0.900506, 'Learning time': 1.09, 'Inference time': 0.934}}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
3;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
3;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
3;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordauthor(D, C).;true;true
4;true,true;author(E, D), venue(E, B).;false;true
4;true,true,false;haswordtitle(F, C).;false;false
4;true,false;haswordtitle(G, C).;true;true
4;true,false,true;title(H, G), venue(H, A).;false;false
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(A, K), haswordtitle(L, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(B, I), haswordauthor(J, I).;false;false
5;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, B).;false;true
6;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
6;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
6;true,false,true;title(J, I), venue(J, B).;false;false
6;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
6;false;haswordvenue(A, M), haswordauthor(N, M).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
7;true,false,true;title(I, H), venue(I, B).;false;false
7;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
7;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;title(F, D), venue(F, B).;false;false
8;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
8;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
8;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;haswordvenue(A, D).;false;false
9;true,false;haswordtitle(H, C).;true;true
9;true,false,true;title(I, H), venue(I, B).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.858148935099512;  // std dev = 2.38e-07, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004877;  // std dev = 2.58e-08, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109551;  // std dev = 0.000, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.12544463852839138;  // std dev = 7.45e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, A) )
%   | | then return 0.3856165685412267;  // std dev = 0.291, 59.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=44 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.1123163781936064;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.45928065142094704;  // std dev = 0.000, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.15687325175096906;  // std dev = 1.29e-08, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783635;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.34920863229324484;  // std dev = 8.94e-08, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | else if ( genre(A, E) )
%   | | then return -0.09269127618926096;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.13722258922475536;  // std dev = 1.05e-08, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.09269127618926097;  // std dev = 5.27e-09, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.27453616942747777;  // std dev = 6.32e-08, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.1217699489827912;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0851847513883968;  // std dev = 3.73e-09, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.22334746424011095;  // std dev = 4.21e-08, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10742573836144372;  // std dev = 0.030, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109179;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1870016205737323;  // std dev = 0.000, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | else if ( genre(A, E) )
%   | | then return -0.07132511690447546;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.09930500913021538;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333704;  // std dev = 5.27e-09, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.0667427447187237;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.1602171244518464;  // std dev = 0.000, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.09076947020297539;  // std dev = 9.86e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420276;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1398146132167746;  // std dev = 2.11e-08, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | else if ( movie(D, A) )
%   | | | then return -0.08224833820411287;  // std dev = 0.020, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202623;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */


Results
   AUC ROC   = 0.983068
   AUC PR    = 0.98398
   CLL	      = -0.318448
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.819018
   F1        = 0.900506


Total learning time: 1.221 seconds
Total inference time: 0.929 seconds
AUC ROC: 0.983068


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.100358
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.63 seconds
Parameter learned model CLL: -0.100358


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [2.38e-07, 0, 44], 'true,false,false,true': [0.0, 15, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.58e-08, 28, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 44], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [7.45e-09, 15, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 28, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.291, 15, 44], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 28, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 44], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [1.29e-08, 15, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 28, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [8.94e-08, 0, 44], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [1.05e-08, 15, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.27e-09, 28, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [6.32e-08, 0, 44], 'true,false,false,true': [0.0, 15, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.73e-09, 28, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [4.21e-08, 0, 44], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.03, 16, 0], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 28, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 44], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [0.0, 15, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.27e-09, 28, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 44], 'true,false,false,true': [9.86e-09, 15, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 28, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'movie(D, A)'}, {'true,true,true,true': [0.0, 0, 0], 'true,true,true,false': [2.11e-08, 0, 44], 'true,true,false,true': [0.02, 16, 0], 'true,true,false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false': [0.0, 28, 0]}]]
[{'': [0.19555555555555604, 2.3790493384824782e-17], 'true': [0.0, 0.18960068945705308], 'true,false': [1.2918958832001822e-15, -1.4802973661668754e-17], 'false': [2.3790493384824782e-17, nan], 'true,false,false': [-1.4802973661668754e-17, nan]}, {'': [0.13960447354874556, -5.9476233462061954e-18], 'true': [-1.049665405100148e-15, 3.469446951953614e-18], 'true,false': [0.0, 3.7007434154171884e-18], 'true,false,false': [3.7007434154171884e-18, nan], 'false': [-5.9476233462061954e-18, nan]}, {'': [0.08717873342269575, -5.9476233462061954e-18], 'true': [0.0, 0.08452405208319397], 'true,false': [0.08452405208319397, nan], 'false': [-5.9476233462061954e-18, nan]}, {'': [0.07345933386428942, -1.982541115402065e-18], 'true': [-2.8260222445003984e-16, 0.00017903543759089507], 'true,false': [0.0, 1.1102230246251566e-17], 'true,false,false': [1.1102230246251566e-17, nan], 'false': [-1.982541115402065e-18, nan]}, {'': [0.045774441334804836, 9.912705577010326e-19], 'true': [1.8167285857502563e-16, 0.0001161936234764828], 'true,false': [0.0, 7.401486830834377e-18], 'true,false,false': [7.401486830834377e-18, nan], 'false': [9.912705577010326e-19, nan]}, {'': [0.03038118761434838, 1.2886517250113425e-17], 'true': [0.0, 0.029778407372310703], 'true,false': [9.083642928751281e-17, -5.551115123125783e-18], 'false': [1.2886517250113425e-17, nan], 'true,false,false': [-5.551115123125783e-18, nan]}, {'': [0.02141050295849306, 0.0], 'true': [4.0371746350005693e-17, 5.471761753681782e-05], 'true,false': [5.471761753681782e-05, nan], 'true,false,true': [nan, 5.471761753681782e-05], 'false': [0.0, nan]}, {'': [0.015846989711325078, 9.912705577010326e-19], 'true': [-7.065055611250996e-17, 4.5871545056482e-05], 'true,false': [0.0, 0.0], 'false': [9.912705577010326e-19, nan], 'true,false,false': [0.0, nan]}, {'': [0.012180931202809626, -5.9476233462061954e-18], 'true': [0.0, 0.011943757155886137], 'true,false': [-4.5418214643756407e-17, 6.47630097698008e-18], 'true,false,false': [6.47630097698008e-18, nan], 'false': [-5.9476233462061954e-18, nan]}, {'': [0.009650017582432469, -4.956352788505163e-19], 'true': [0.009650017582432469, nan], 'true,true': [1.0092936587501423e-17, 2.546604536776513e-05], 'true,true,false': [2.546604536776513e-05, nan], 'true,true,true': [nan, 1.0092936587501423e-17]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, D).;true;true
4;true,false;genre(A, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(A, D).;true;true
5;true,false;genre(B, E).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, D).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
8;true,false;genre(B, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.858148935099512;  // std dev = 2.38e-07, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else return -0.1418510649004877;  // std dev = 2.58e-08, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109551;  // std dev = 0.000, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.12544463852839138;  // std dev = 7.45e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else return -0.12544463852839138;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( actor(B) )
%   | | then if ( female(A) )
%   | | | then return -0.11231637819360639;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return -0.11231637819360639;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.5553664367462839;  // std dev = 0.000, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   else return -0.1123163781936064;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.41751358415831025;  // std dev = 0.000, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.10159632948783631;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else return -0.10159632948783635;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.3207118471601496;  // std dev = 5.27e-09, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return 0.32071184716014955;  // std dev = 3.73e-09, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else if ( genre(A, E) )
%   | | then return -0.09269127618926096;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( female(B) )
%   | | | then return -0.09269127618926097;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return -0.09269127618926096;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( female(A) )
%   | then if ( female(B) )
%   | | then return -0.09269127618926094;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.09269127618926097;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( female(B) )
%   | | then return -0.09269127618926097;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return -0.09269127618926097;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.2551722425694896;  // std dev = 0.000, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | else if ( female(B) )
%   | | | then return -0.08518475138839687;  // std dev = 3.73e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return -0.08518475138839687;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( female(A) )
%   | then if ( female(B) )
%   | | then return -0.08518475138839687;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.08518475138839687;  // std dev = 9.31e-10, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( female(B) )
%   | | then return -0.08518475138839687;  // std dev = 9.31e-10, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return -0.08518475138839687;  // std dev = 1.61e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.20975771563253562;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return 0.2097577156325355;  // std dev = 4.56e-09, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return -0.07877675473109173;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return -0.07877675473109176;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17709649774527753;  // std dev = 0.000, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | else if ( genre(A, E) )
%   | | then return -0.07324622576333704;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( female(B) )
%   | | | then return -0.07324622576333704;  // std dev = 2.63e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return -0.07324622576333704;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( female(A) )
%   | then if ( female(B) )
%   | | then return -0.07324622576333704;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.07324622576333704;  // std dev = 9.31e-10, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( female(B) )
%   | | then return -0.07324622576333704;  // std dev = 9.31e-10, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return -0.07324622576333704;  // std dev = 1.32e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.06842697784420272;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.15274385809367083;  // std dev = 0.000, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | else if ( female(A) )
%   | | | then return -0.06842697784420272;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return -0.06842697784420272;  // std dev = 1.86e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.06842697784420276;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.13400703000801092;  // std dev = 3.23e-09, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return 0.13400703000801117;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else if ( female(A) )
%   | | then return -0.0641918400820262;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else return -0.0641918400820262;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.06419184008202622;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.281707
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.819018
   F1        = 0.900506


Total learning time: 2.059 seconds
Total inference time: 0.98 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.667 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.281707
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.819018
   F1        = 0.900506


Total learning time: 4.577 seconds
Total inference time: 0.98 seconds
AUC ROC: 1.0
Total revision time: 4.577
Best scored revision CLL: -0.094637


Dataset: 4_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 03:30:34
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.281707, 'Precision': [1.0, 0.5], 'Recall': 0.819018, 'F1': 0.900506, 'Learning time': 4.577, 'Inference time': 0.98, 'parameter_0.8': {'AUC ROC': 0.983068, 'AUC PR': 0.98398, 'CLL': -0.318448, 'Precision': [1.0, 0.5], 'Recall': 0.819018, 'F1': 0.900506, 'Learning time': 1.221, 'Inference time': 0.929}}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
3;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
3;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
3;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordauthor(D, C).;true;true
4;true,true;author(E, D), venue(E, B).;false;true
4;true,true,false;haswordtitle(F, C).;false;false
4;true,false;haswordtitle(G, C).;true;true
4;true,false,true;title(H, G), venue(H, A).;false;false
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(A, K), haswordtitle(L, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(B, I), haswordauthor(J, I).;false;false
5;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, B).;false;true
6;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
6;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
6;true,false,true;title(J, I), venue(J, B).;false;false
6;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
6;false;haswordvenue(A, M), haswordauthor(N, M).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
7;true,false,true;title(I, H), venue(I, B).;false;false
7;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
7;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;title(F, D), venue(F, B).;false;false
8;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
8;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
8;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;haswordvenue(A, D).;false;false
9;true,false;haswordtitle(H, C).;true;true
9;true,false,true;title(I, H), venue(I, B).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995124;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.14185106490048777;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048768;  // std dev = 3.80e-08, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109544;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839147;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, A) )
%   | | then return 0.3929571033825264;  // std dev = 0.286, 74.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=56 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.1123163781936064;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.45745824170175897;  // std dev = 7.30e-08, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.15784658770913712;  // std dev = 1.05e-08, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783634;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.3479556181381373;  // std dev = 7.88e-08, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else if ( genre(A, E) )
%   | | then return -0.09269127618926096;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.1379781608624459;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.092691276189261;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.27368752144638;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.122371342655158;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0851847513883968;  // std dev = 3.61e-09, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2227553932273878;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10819043647277442;  // std dev = 0.030, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109179;  // std dev = 5.27e-09, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18657260212280313;  // std dev = 3.33e-08, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else if ( genre(A, E) )
%   | | then return -0.07127448155089335;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.09968539130583288;  // std dev = 7.45e-09, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333704;  // std dev = 9.13e-09, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.06669828082783769;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.15989509495535886;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.09108896771106785;  // std dev = 7.45e-09, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420274;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.13956544557886286;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else if ( movie(D, A) )
%   | | | then return -0.0827095835920583;  // std dev = 0.021, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202623;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */


Results
   AUC ROC   = 0.983068
   AUC PR    = 0.98398
   CLL	      = -0.31812
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.819018
   F1        = 0.900506


Total learning time: 1.251 seconds
Total inference time: 0.949 seconds
AUC ROC: 0.983068


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.100112
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.568 seconds
Parameter learned model CLL: -0.100112


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 56], 'true,false,false,true': [0.0, 18, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.8e-08, 37, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 56], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [0.0, 18, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 37, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.286, 18, 56], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 37, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [7.3e-08, 0, 56], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [1.05e-08, 18, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 37, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [7.88e-08, 0, 56], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [0.0, 18, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 37, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 56], 'true,false,false,true': [0.0, 18, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.61e-09, 37, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 56], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.03, 19, 0], 'true,false,false': [0.0, 0, 0], 'false,true': [5.27e-09, 37, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [3.33e-08, 0, 56], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [7.45e-09, 18, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.13e-09, 37, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 56], 'true,false,false,true': [7.45e-09, 18, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 37, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'movie(D, A)'}, {'true,true,true,true': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 56], 'true,true,false,true': [0.021, 19, 0], 'true,true,false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false': [0.0, 37, 0]}]]
[{'': [0.18915555555555524, 3.900783600034334e-17], 'true': [0.0, 0.18407596785975125], 'true,false': [-1.2688263138573217e-16, -3.0839528461809902e-18], 'false': [3.900783600034334e-17, nan], 'true,false,false': [-3.0839528461809902e-18, nan]}, {'': [0.1350355998689688, -2.100421938480026e-17], 'true': [-1.9032394707859825e-16, 0.0], 'true,false': [0.0, 0.0], 'true,false,false': [0.0, nan], 'false': [-2.100421938480026e-17, nan]}, {'': [0.08432561123795267, -9.00180830777154e-18], 'true': [0.0, 0.08206112930916451], 'true,false': [0.08206112930916451, nan], 'false': [-9.00180830777154e-18, nan]}, {'': [0.07096678040335133, -9.00180830777154e-18], 'true': [9.516197353929913e-17, 0.0001577663376712893], 'true,false': [0.0, 6.1679056923619804e-18], 'true,false,false': [6.1679056923619804e-18, nan], 'false': [-9.00180830777154e-18, nan]}, {'': [0.04425441943038241, -1.050210969240013e-17], 'true': [1.1102230246251565e-16, 0.00010226103773196491], 'true,false': [0.0, -1.5419764230904953e-17], 'false': [-1.050210969240013e-17, nan], 'true,false,false': [-1.5419764230904953e-17, nan]}, {'': [0.02939637640001161, 1.350271246165731e-17], 'true': [0.0, 0.028874639303153222], 'true,false': [-1.7446361815538174e-16, -6.1679056923619804e-18], 'false': [1.350271246165731e-17, nan], 'true,false,false': [-6.1679056923619804e-18, nan]}, {'': [0.02072946551107471, 7.50150692314295e-19], 'true': [0.0, 4.806470408893745e-05], 'true,false': [4.806470408893745e-05, nan], 'true,false,true': [nan, 4.806470408893745e-05], 'false': [7.50150692314295e-19, nan]}, {'': [0.015348779340050649, 2.250452076942885e-18], 'true': [1.9825411154020653e-17, 4.024719189989274e-05], 'true,false': [0.0, 3.0839528461809902e-18], 'true,false,false': [3.0839528461809902e-18, nan], 'false': [2.250452076942885e-18, nan]}, {'': [0.011801412845564256, -7.50150692314295e-19], 'true': [0.0, 0.011595497390475768], 'true,false': [0.0, 3.0839528461809902e-18], 'true,false,false': [3.0839528461809902e-18, nan], 'false': [-7.50150692314295e-19, nan]}, {'': [0.009351110138222292, -1.50030138462859e-18], 'true': [0.009351110138222292, nan], 'true,true': [-1.9825411154020653e-17, 2.2322712013321167e-05], 'true,true,false': [2.2322712013321167e-05, nan], 'true,true,true': [nan, -1.9825411154020653e-17]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, D).;true;true
4;true,false;genre(A, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(A, D).;true;true
5;true,false;genre(B, E).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, D).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
8;true,false;genre(B, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995124;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else return -0.14185106490048768;  // std dev = 3.80e-08, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109544;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else return -0.12544463852839147;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( actor(B) )
%   | | then if ( female(A) )
%   | | | then return -0.11231637819360638;  // std dev = 7.45e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return -0.11231637819360639;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( female(A) )
%   | | | then return 0.5553664367462846;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return 0.5553664367462845;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   else return -0.1123163781936064;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4175135841583103;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.10159632948783633;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else return -0.10159632948783634;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.3207118471601496;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else if ( genre(A, E) )
%   | | then return -0.09269127618926096;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.09269127618926098;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else return -0.092691276189261;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.2551722425694894;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else if ( female(A) )
%   | | | then return -0.08518475138839687;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return -0.08518475138839687;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else if ( female(B) )
%   | then if ( female(A) )
%   | | then return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.08518475138839687;  // std dev = 9.31e-10, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( female(A) )
%   | | then return -0.08518475138839687;  // std dev = 1.32e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else return -0.08518475138839686;  // std dev = 2.28e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.20975771563253562;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else return -0.07877675473109176;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else return -0.07877675473109176;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17709649774527722;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else if ( genre(A, E) )
%   | | then return -0.07324622576333704;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.07324622576333704;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else if ( female(A) )
%   | then if ( female(B) )
%   | | then return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.07324622576333704;  // std dev = 1.32e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.06842697784420272;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.1527438580936708;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else return -0.06842697784420274;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else return -0.06842697784420274;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.13400703000801087;  // std dev = 5.27e-09, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return 0.13400703000801117;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else return -0.0641918400820262;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else return -0.06419184008202623;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.281707
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.819018
   F1        = 0.900506


Total learning time: 1.831 seconds
Total inference time: 0.864 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.573 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.281707
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.819018
   F1        = 0.900506


Total learning time: 4.223 seconds
Total inference time: 0.864 seconds
AUC ROC: 1.0
Total revision time: 4.223
Best scored revision CLL: -0.094637


Dataset: 4_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 03:30:41
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.281707, 'Precision': [1.0, 0.5], 'Recall': 0.819018, 'F1': 0.900506, 'Learning time': 4.223, 'Inference time': 0.864, 'parameter_1.0': {'AUC ROC': 0.983068, 'AUC PR': 0.98398, 'CLL': -0.31812, 'Precision': [1.0, 0.5], 'Recall': 0.819018, 'F1': 0.900506, 'Learning time': 1.251, 'Inference time': 0.949}}


Starting fold 2

Target train facts examples: 208
Target train pos examples: 58
Target train neg examples: 58

Target test facts examples: 870
Target test pos	 examples: 324
Target test neg examples: 324

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
3;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
3;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
3;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordauthor(D, C).;true;true
4;true,true;author(E, D), venue(E, B).;false;true
4;true,true,false;haswordtitle(F, C).;false;false
4;true,false;haswordtitle(G, C).;true;true
4;true,false,true;title(H, G), venue(H, A).;false;false
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(A, K), haswordtitle(L, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(B, I), haswordauthor(J, I).;false;false
5;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, B).;false;true
6;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
6;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
6;true,false,true;title(J, I), venue(J, B).;false;false
6;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
6;false;haswordvenue(A, M), haswordauthor(N, M).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
7;true,false,true;title(I, H), venue(I, B).;false;false
7;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
7;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;title(F, D), venue(F, B).;false;false
8;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
8;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
8;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;haswordvenue(A, D).;false;false
9;true,false;haswordtitle(H, C).;true;true
9;true,false,true;title(I, H), venue(I, B).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109542;  // std dev = 4.21e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, A) )
%   | | then return 0.49972620216796043;  // std dev = 0.185, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.43110393398787833;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.17256315463257307;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783627;  // std dev = 5.27e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.32994087490102153;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( genre(A, E) )
%   | | then return -0.09269127618926096;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.14929608555119467;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.09269127618926097;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.2614601154439045;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.13130961769465885;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.08518475138839687;  // std dev = 1.32e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.21418967810789183;  // std dev = 2.11e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09790970963912783;  // std dev = 0.027, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109173;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18034037104237055;  // std dev = 7.45e-09, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( genre(A, E) )
%   | | then return -0.071958015130891;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.10729749613909086;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333704;  // std dev = 2.63e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.06729819257910245;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.15520023367508698;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.09744464371611451;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.13592177615482556;  // std dev = 1.05e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( movie(D, A) )
%   | | | then return -0.07619960430437364;  // std dev = 0.018, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.0641918400820262;  // std dev = 2.63e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */


Results
   AUC ROC   = 0.981453
   AUC PR    = 0.982617
   CLL	      = -0.312659
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.817901
   F1        = 0.89983


Total learning time: 0.928 seconds
Total inference time: 0.981 seconds
AUC ROC: 0.981453


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.096543
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.53 seconds
Parameter learned model CLL: -0.096543


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 11], 'true,false,false,true': [0.0, 1, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 9, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [4.21e-08, 0, 11], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [0.0, 1, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 9, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.185, 1, 11], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 9, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 11], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [0.0, 1, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.27e-09, 9, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 11], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [0.0, 1, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 9, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 11], 'true,false,false,true': [0.0, 1, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.32e-09, 9, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [2.11e-08, 0, 11], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.027, 2, 0], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 9, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [7.45e-09, 0, 11], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [0.0, 1, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.63e-09, 9, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 11], 'true,false,false,true': [0.0, 1, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 9, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'movie(D, A)'}, {'true,true,true,true': [0.0, 0, 0], 'true,true,true,false': [1.05e-08, 0, 11], 'true,true,false,true': [0.018, 2, 0], 'true,true,false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false': [2.63e-09, 9, 0]}]]
[{'': [0.13017751479289916, -9.25185853854297e-18], 'true': [0.0, 0.07638888888888877], 'true,false': [-1.6148698540002277e-16, 0.0], 'true,false,false': [0.0, nan], 'false': [-9.25185853854297e-18, nan]}, {'': [0.09293197203688684, 0.0], 'true': [1.6148698540002277e-16, 0.0], 'false': [0.0, nan], 'true,false': [0.0, 0.0], 'true,false,false': [0.0, nan]}, {'': [0.058033180532859226, -1.5419764230904951e-18], 'true': [0.0, 0.03405419274324021], 'true,false': [0.03405419274324021, nan], 'false': [-1.5419764230904951e-18, nan]}, {'': [0.04221926071460098, 3.0839528461809902e-18], 'true': [-1.6148698540002277e-16, 0.0012590725677809125], 'true,false': [0.0, 0.0], 'false': [3.0839528461809902e-18, nan], 'true,false,false': [0.0, nan]}, {'': [0.02659378756111456, 0.0], 'true': [-2.0185873175002847e-17, 0.0008010261107252153], 'true,false': [0.0, 0.0], 'false': [0.0, nan], 'true,false,false': [0.0, nan]}, {'': [0.017874943786816047, 1.5419764230904951e-18], 'true': [0.0, 0.011784365944216104], 'true,false': [-3.027880976250427e-17, 0.0], 'false': [1.5419764230904951e-18, nan], 'true,false,false': [0.0, nan]}, {'': [0.01273639308495126, 0.0], 'true': [4.0371746350005693e-17, 0.00036606996351294316], 'true,false': [0.00036606996351294316, nan], 'true,false,true': [nan, 0.00036606996351294316], 'false': [0.0, nan]}, {'': [0.00953573420262476, 7.709882115452476e-19], 'true': [5.046468293750712e-18, 0.00031221972948223056], 'true,false': [0.0, 0.0], 'false': [7.709882115452476e-19, nan], 'true,false,false': [0.0, nan]}, {'': [0.007382210827513752, 0.0], 'true': [0.0, 0.0048758595471678256], 'true,false': [-1.0092936587501423e-17, 0.0], 'false': [0.0, nan], 'true,false,false': [0.0, nan]}, {'': [0.0058834182825470765, 7.709882115452476e-19], 'true': [0.0058834182825470765, nan], 'true,true': [1.0092936587501423e-17, 0.00016912033447290167], 'true,true,false': [0.00016912033447290167, nan], 'true,true,true': [nan, 1.0092936587501423e-17]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, D).;true;true
4;true,false;genre(A, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(A, D).;true;true
5;true,false;genre(B, E).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, D).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
8;true,false;genre(B, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109542;  // std dev = 4.21e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else return -0.12544463852839138;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0.49972620216796043;  // std dev = 0.185, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   else return -0.11231637819360639;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.43110393398787833;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.17256315463257307;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else return -0.10159632948783627;  // std dev = 1.32e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.32994087490102153;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( genre(A, E) )
%   | | then return -0.09269127618926096;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.14929608555119467;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else return -0.09269127618926097;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.2614601154439045;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.13130961769465885;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else return -0.08518475138839687;  // std dev = 1.32e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.21418967810789183;  // std dev = 6.45e-09, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.09790970963912783;  // std dev = 0.027, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else return -0.07877675473109173;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18034037104237055;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( genre(A, E) )
%   | | then return -0.071958015130891;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.10729749613909086;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( female(A) )
%   | then return -0.07324622576333704;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.06729819257910245;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.15520023367508698;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.09744464371611451;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else return -0.06842697784420272;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13592177615482556;  // std dev = 3.23e-09, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.07619960430437364;  // std dev = 0.018, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else return -0.0641918400820262;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */


Results
   AUC ROC   = 0.981453
   AUC PR    = 0.982617
   CLL	      = -0.312659
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.817901
   F1        = 0.89983


Total learning time: 1.056 seconds
Total inference time: 0.833 seconds
AUC ROC: 0.981453


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.096543
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.481 seconds
Refined model CLL: -0.096543


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.981453
   AUC PR    = 0.982617
   CLL	      = -0.312659
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.817901
   F1        = 0.89983


Total learning time: 2.995 seconds
Total inference time: 0.981 seconds
AUC ROC: 0.981453
Total revision time: 2.995
Best scored revision CLL: -0.096543


Dataset: 4_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 03:30:46
{'AUC ROC': 0.981453, 'AUC PR': 0.982617, 'CLL': -0.312659, 'Precision': [1.0, 0.5], 'Recall': 0.817901, 'F1': 0.89983, 'Learning time': 2.995, 'Inference time': 0.981, 'parameter_0.2': {'AUC ROC': 0.981453, 'AUC PR': 0.982617, 'CLL': -0.312659, 'Precision': [1.0, 0.5], 'Recall': 0.817901, 'F1': 0.89983, 'Learning time': 0.928, 'Inference time': 0.981}}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
3;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
3;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
3;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordauthor(D, C).;true;true
4;true,true;author(E, D), venue(E, B).;false;true
4;true,true,false;haswordtitle(F, C).;false;false
4;true,false;haswordtitle(G, C).;true;true
4;true,false,true;title(H, G), venue(H, A).;false;false
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(A, K), haswordtitle(L, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(B, I), haswordauthor(J, I).;false;false
5;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, B).;false;true
6;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
6;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
6;true,false,true;title(J, I), venue(J, B).;false;false
6;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
6;false;haswordvenue(A, M), haswordauthor(N, M).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
7;true,false,true;title(I, H), venue(I, B).;false;false
7;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
7;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;title(F, D), venue(F, B).;false;false
8;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
8;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
8;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;haswordvenue(A, D).;false;false
9;true,false;haswordtitle(H, C).;true;true
9;true,false,true;title(I, H), venue(I, B).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995121;  // std dev = 8.43e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109543;  // std dev = 5.96e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( movie(E, A) )
%   | | then return 0.4564504641625971;  // std dev = 0.237, 27.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=23 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360635;  // std dev = 1.49e-08, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4417475260523373;  // std dev = 5.16e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.1664712962888784;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783631;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.3371947974535993;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else if ( genre(A, E) )
%   | | then return -0.09269127618926096;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.14463480396117248;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.09269127618926094;  // std dev = 9.13e-09, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.2663901987199288;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.12764412459088403;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.08518475138839685;  // std dev = 2.63e-09, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.21765146593963144;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10232109408581032;  // std dev = 0.041, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109173;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1828649020612253;  // std dev = 3.33e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else if ( genre(A, E) )
%   | | then return -0.07166397831057802;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.10415226376600269;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.06704021016713876;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.1571058371493268;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.09482726478847382;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.13740321972951278;  // std dev = 2.24e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else if ( movie(D, A) )
%   | | | then return -0.07898534268605112;  // std dev = 0.028, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202619;  // std dev = 7.45e-09, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */


Results
   AUC ROC   = 0.981453
   AUC PR    = 0.982617
   CLL	      = -0.315482
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.817901
   F1        = 0.89983


Total learning time: 1.082 seconds
Total inference time: 0.984 seconds
AUC ROC: 0.981453


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.098003
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.549 seconds
Parameter learned model CLL: -0.098003


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [8.43e-08, 0, 23], 'true,false,false,true': [0.0, 4, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 17, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [5.96e-08, 0, 23], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [0.0, 4, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 17, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [0.237, 4, 23], 'true,false,false': [0.0, 0, 0], 'false,true': [1.49e-08, 17, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [5.16e-08, 0, 23], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [0.0, 4, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 17, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 23], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [0.0, 4, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.13e-09, 17, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [0.0, 0, 23], 'true,false,false,true': [0.0, 4, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.63e-09, 17, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 23], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.041, 6, 0], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 17, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [3.33e-08, 0, 23], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [0.0, 4, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 17, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [0.0, 0, 23], 'true,false,false,true': [0.0, 4, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 17, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'movie(D, A)'}, {'true,true,true,true': [0.0, 0, 0], 'true,true,true,false': [2.24e-08, 0, 23], 'true,true,false,true': [0.028, 6, 0], 'true,true,false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false': [7.45e-09, 17, 0]}]]
[{'': [0.1640903686087999, -3.2653618371328133e-18], 'true': [0.0, 0.12620027434842318], 'true,false': [3.089316242435218e-16, 0.0], 'true,false,false': [0.0, nan], 'false': [-3.2653618371328133e-18, nan]}, {'': [0.11714190097526078, 0.0], 'true': [1.544658121217609e-16, -2.3129646346357427e-18], 'false': [0.0, nan], 'true,false': [0.0, 0.0], 'true,false,false': [0.0, nan]}, {'': [0.07315154234068434, 1.3061447348531253e-17], 'true': [0.0, 0.05626012538501639], 'true,false': [0.05626012538501639, nan], 'false': [1.3061447348531253e-17, nan]}, {'': [0.05665574277645918, -8.163404592832034e-18], 'true': [1.1584935909132068e-16, 0.0009352802927636248], 'true,false': [0.0, 0.0], 'true,false,false': [0.0, nan], 'false': [-8.163404592832034e-18, nan]}, {'': [0.0355305315963498, 4.89804275569922e-18], 'true': [-3.8616453030440226e-17, 0.0005995844616425253], 'true,false': [0.0, 0.0], 'false': [4.89804275569922e-18, nan], 'true,false,false': [0.0, nan]}, {'': [0.02376272329740283, 8.163404592832034e-18], 'true': [0.0, 0.019594239247084914], 'true,false': [-5.792467954566034e-17, 0.0], 'false': [8.163404592832034e-18, nan], 'true,false,false': [0.0, nan]}, {'': [0.016857317277070124, -2.44902137784961e-18], 'true': [-9.654113257610057e-18, 0.00027716795782507564], 'true,false': [0.00027716795782507564, nan], 'true,false,true': [nan, 0.00027716795782507564], 'false': [-2.44902137784961e-18, nan]}, {'': [0.012565286769371097, 0.0], 'true': [4.827056628805028e-17, 0.00023455304262959392], 'true,false': [0.0, 0.0], 'false': [0.0, nan], 'true,false,false': [0.0, nan]}, {'': [0.009698632782270894, -8.163404592832033e-19], 'true': [0.0, 0.008009967739896038], 'true,false': [0.0, 0.0], 'true,false,false': [0.0, nan], 'false': [-8.163404592832033e-19, nan]}, {'': [0.007709912956718312, 3.2653618371328133e-18], 'true': [0.007709912956718312, nan], 'true,true': [2.172175482962263e-17, 0.00012829554189779566], 'true,true,false': [0.00012829554189779566, nan], 'true,true,true': [nan, 2.172175482962263e-17]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, D).;true;true
4;true,false;genre(A, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(A, D).;true;true
5;true,false;genre(B, E).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, D).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
8;true,false;genre(B, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995121;  // std dev = 8.43e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.1418510649004878;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109543;  // std dev = 5.96e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.12544463852839138;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( actor(B) )
%   | | then return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.5553664367462846;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   else if ( female(B) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return -0.11231637819360638;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.4175135841583099;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.4175135841583098;  // std dev = 1.29e-08, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.10159632948783631;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.3207118471601497;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.32071184716014967;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( genre(A, E) )
%   | | then return -0.09269127618926096;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( female(B) )
%   | then return -0.09269127618926097;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return -0.09269127618926097;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.2551722425694895;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( female(B) )
%   | then if ( female(A) )
%   | | then return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.08518475138839687;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return -0.08518475138839687;  // std dev = 9.31e-10, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.20975771563253556;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else return -0.07877675473109173;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.07877675473109173;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17709649774527747;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else if ( genre(A, E) )
%   | | then return -0.07324622576333704;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.07324622576333704;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.06842697784420272;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.15274385809367083;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.06842697784420272;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13400703000801117;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else return -0.0641918400820262;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( female(B) )
%   | then return -0.0641918400820262;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return -0.06419184008202619;  // std dev = 1.61e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.282862
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.817901
   F1        = 0.89983


Total learning time: 1.329 seconds
Total inference time: 0.992 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.484 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.282862
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.817901
   F1        = 0.89983


Total learning time: 3.444 seconds
Total inference time: 0.992 seconds
AUC ROC: 1.0
Total revision time: 3.444
Best scored revision CLL: -0.094637


Dataset: 4_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 03:30:52
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.282862, 'Precision': [1.0, 0.5], 'Recall': 0.817901, 'F1': 0.89983, 'Learning time': 3.444, 'Inference time': 0.992, 'parameter_0.4': {'AUC ROC': 0.981453, 'AUC PR': 0.982617, 'CLL': -0.315482, 'Precision': [1.0, 0.5], 'Recall': 0.817901, 'F1': 0.89983, 'Learning time': 1.082, 'Inference time': 0.984}}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
3;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
3;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
3;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordauthor(D, C).;true;true
4;true,true;author(E, D), venue(E, B).;false;true
4;true,true,false;haswordtitle(F, C).;false;false
4;true,false;haswordtitle(G, C).;true;true
4;true,false,true;title(H, G), venue(H, A).;false;false
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(A, K), haswordtitle(L, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(B, I), haswordauthor(J, I).;false;false
5;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, B).;false;true
6;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
6;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
6;true,false,true;title(J, I), venue(J, B).;false;false
6;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
6;false;haswordvenue(A, M), haswordauthor(N, M).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
7;true,false,true;title(I, H), venue(I, B).;false;false
7;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
7;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;title(F, D), venue(F, B).;false;false
8;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
8;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
8;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;haswordvenue(A, D).;false;false
9;true,false;haswordtitle(H, C).;true;true
9;true,false,true;title(I, H), venue(I, B).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995115;  // std dev = 2.38e-07, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004877;  // std dev = 1.83e-08, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109548;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( movie(E, A) )
%   | | then return 0.4413718098053272;  // std dev = 0.251, 41.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=34 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.44546922098492864;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.16438951233977436;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783635;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.3397376894402525;  // std dev = 6.32e-08, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | else if ( genre(A, E) )
%   | | then return -0.09269127618926096;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.14303430329217567;  // std dev = 5.27e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.09269127618926096;  // std dev = 9.13e-09, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.26811624356677927;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.12638050212590457;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.08518475138839682;  // std dev = 3.48e-09, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2188608247203279;  // std dev = 4.47e-08, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1054516776697853;  // std dev = 0.043, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109176;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18374496152637673;  // std dev = 4.21e-08, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | else if ( genre(A, E) )
%   | | then return -0.07145598513195903;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.10292121575544991;  // std dev = 5.27e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.06685764549331577;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.15776890541037678;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.09379949606217343;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420276;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1379178912494039;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | else if ( movie(D, A) )
%   | | | then return -0.08094246878738819;  // std dev = 0.029, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202622;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */


Results
   AUC ROC   = 0.981453
   AUC PR    = 0.982617
   CLL	      = -0.316648
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.817901
   F1        = 0.89983


Total learning time: 1.086 seconds
Total inference time: 0.947 seconds
AUC ROC: 0.981453


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.098503
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.632 seconds
Parameter learned model CLL: -0.098503


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [2.38e-07, 0, 34], 'true,false,false,true': [0.0, 7, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.83e-08, 25, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 34], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [0.0, 7, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 25, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [0.251, 7, 34], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 25, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 34], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [0.0, 7, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 25, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [6.32e-08, 0, 34], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [5.27e-09, 7, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.13e-09, 25, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [0.0, 0, 34], 'true,false,false,true': [0.0, 7, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.48e-09, 25, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [4.47e-08, 0, 34], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.043, 9, 0], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 25, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [4.21e-08, 0, 34], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [5.27e-09, 7, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 25, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [0.0, 0, 34], 'true,false,false,true': [2.63e-09, 7, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 25, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'movie(D, A)'}, {'true,true,true,true': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 34], 'true,true,false,true': [0.029, 9, 0], 'true,true,false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false': [0.0, 25, 0]}]]
[{'': [0.1654948620876167, 1.3322676295501878e-17], 'true': [0.0, 0.14158239143367216], 'true,false': [1.6718652606120004e-15, -7.93016446160826e-18], 'false': [1.3322676295501878e-17, nan], 'true,false,false': [-7.93016446160826e-18, nan]}, {'': [0.11814454992663277, -4.440892098500626e-18], 'true': [-7.314410515177502e-16, 0.0], 'true,false': [0.0, -1.982541115402065e-18], 'true,false,false': [-1.982541115402065e-18, nan], 'false': [-4.440892098500626e-18, nan]}, {'': [0.07377766601298767, 0.0], 'true': [0.0, 0.06311747843255335], 'true,false': [0.06311747843255335, nan], 'false': [0.0, nan]}, {'': [0.05891026341486608, -2.220446049250313e-18], 'true': [-3.657205257588751e-16, 0.0006815033750305929], 'true,false': [0.0, -3.96508223080413e-18], 'false': [-2.220446049250313e-18, nan], 'true,false,false': [-3.96508223080413e-18, nan]}, {'': [0.0368964319442111, 3.3306690738754695e-18], 'true': [1.1755302613678128e-16, 0.0004380479665479868], 'true,false': [0.0, 3.96508223080413e-18], 'true,false,false': [3.96508223080413e-18, nan], 'false': [3.3306690738754695e-18, nan]}, {'': [0.024635487283373288, 1.2212453270876722e-17], 'true': [0.0, 0.0220341394421083], 'true,false': [-2.6122894697062506e-17, -1.982541115402065e-18], 'false': [1.2212453270876722e-17, nan], 'true,false,false': [-1.982541115402065e-18, nan]}, {'': [0.017449069023570477, -3.3306690738754695e-18], 'true': [5.877651306839064e-17, 0.00020330043251006672], 'true,false': [0.00020330043251006672, nan], 'true,false,true': [nan, 0.00020330043251006672], 'false': [-3.3306690738754695e-18, nan]}, {'': [0.012980409280276535, -1.1102230246251566e-18], 'true': [5.224578939412501e-17, 0.00017112160906978936], 'true,false': [0.0, 3.96508223080413e-18], 'true,false,false': [3.96508223080413e-18, nan], 'false': [-1.1102230246251566e-18, nan]}, {'': [0.01000728461601924, -4.440892098500626e-18], 'true': [0.0, 0.008960276756353407], 'true,false': [-1.3061447348531253e-17, 9.912705577010326e-19], 'true,false,false': [9.912705577010326e-19, nan], 'false': [-4.440892098500626e-18, nan]}, {'': [0.007946851866376045, -2.220446049250313e-18], 'true': [0.007946851866376045, nan], 'true,true': [-1.3061447348531253e-17, 9.398656105024137e-05], 'true,true,false': [9.398656105024137e-05, nan], 'true,true,true': [nan, -1.3061447348531253e-17]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, D).;true;true
4;true,false;genre(A, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(A, D).;true;true
5;true,false;genre(B, E).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, D).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
8;true,false;genre(B, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995115;  // std dev = 2.38e-07, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.1418510649004877;  // std dev = 1.83e-08, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109548;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.12544463852839138;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( actor(B) )
%   | | then return -0.11231637819360639;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( female(A) )
%   | | | then return 0.5553664367462846;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.5553664367462846;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   else return -0.11231637819360639;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4175135841583102;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return -0.10159632948783627;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.10159632948783635;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.3207118471601494;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | else if ( genre(A, E) )
%   | | then return -0.09269127618926096;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return -0.09269127618926097;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else if ( female(B) )
%   | then return -0.09269127618926097;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return -0.09269127618926094;  // std dev = 1.86e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.25517224256948956;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | else if ( female(A) )
%   | | | then return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.08518475138839687;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( female(B) )
%   | then if ( female(A) )
%   | | then return -0.08518475138839687;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.08518475138839685;  // std dev = 2.63e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.2097577156325356;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.20975771563253554;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | else return -0.07877675473109173;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else return -0.07877675473109176;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1770964977452775;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | else if ( genre(A, E) )
%   | | then return -0.07324622576333704;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( female(A) )
%   | | | then return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.07324622576333704;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.07324622576333704;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.06842697784420272;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.15274385809367083;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | else if ( female(A) )
%   | | | then return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.06842697784420272;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.06842697784420276;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13400703000801115;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | else if ( female(A) )
%   | | then return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.0641918400820262;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.06419184008202622;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.282862
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.817901
   F1        = 0.89983


Total learning time: 1.474 seconds
Total inference time: 0.981 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.64 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.282862
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.817901
   F1        = 0.89983


Total learning time: 3.8320000000000003 seconds
Total inference time: 0.981 seconds
AUC ROC: 1.0
Total revision time: 3.8320000000000003
Best scored revision CLL: -0.094637


Dataset: 4_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 03:30:59
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.282862, 'Precision': [1.0, 0.5], 'Recall': 0.817901, 'F1': 0.89983, 'Learning time': 3.8320000000000003, 'Inference time': 0.981, 'parameter_0.6': {'AUC ROC': 0.981453, 'AUC PR': 0.982617, 'CLL': -0.316648, 'Precision': [1.0, 0.5], 'Recall': 0.817901, 'F1': 0.89983, 'Learning time': 1.086, 'Inference time': 0.947}}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
3;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
3;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
3;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordauthor(D, C).;true;true
4;true,true;author(E, D), venue(E, B).;false;true
4;true,true,false;haswordtitle(F, C).;false;false
4;true,false;haswordtitle(G, C).;true;true
4;true,false,true;title(H, G), venue(H, A).;false;false
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(A, K), haswordtitle(L, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(B, I), haswordauthor(J, I).;false;false
5;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, B).;false;true
6;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
6;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
6;true,false,true;title(J, I), venue(J, B).;false;false
6;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
6;false;haswordvenue(A, M), haswordauthor(N, M).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
7;true,false,true;title(I, H), venue(I, B).;false;false
7;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
7;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;title(F, D), venue(F, B).;false;false
8;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
8;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
8;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;haswordvenue(A, D).;false;false
9;true,false;haswordtitle(H, C).;true;true
9;true,false,true;title(I, H), venue(I, B).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995121;  // std dev = 2.06e-07, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004877;  // std dev = 3.49e-08, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.719473412210955;  // std dev = 0.000, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839136;  // std dev = 1.49e-08, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( movie(E, A) )
%   | | then return 0.4461092488470289;  // std dev = 0.247, 55.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=46 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360643;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4442992529343109;  // std dev = 8.43e-08, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.16504130859304597;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783635;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.3389379067555148;  // std dev = 0.000, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | else if ( genre(A, E) )
%   | | then return -0.09269127618926096;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.14353583371608214;  // std dev = 7.45e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.092691276189261;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.2675734889787128;  // std dev = 8.16e-08, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.1267767486785845;  // std dev = 9.13e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0851847513883968;  // std dev = 3.73e-09, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.21848068629122627;  // std dev = 6.32e-08, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10709928619332895;  // std dev = 0.044, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109179;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.183468435465402;  // std dev = 4.71e-08, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | else if ( genre(A, E) )
%   | | then return -0.0713467434187196;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.1030635123076317;  // std dev = 5.27e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333704;  // std dev = 1.05e-08, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.0667617342527646;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.15756062895021272;  // std dev = 0.000, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.09391839182911622;  // std dev = 3.73e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420274;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.13775627241670654;  // std dev = 3.94e-08, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | | else if ( movie(D, A) )
%   | | | then return -0.08195163750837012;  // std dev = 0.030, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202623;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */


Results
   AUC ROC   = 0.981453
   AUC PR    = 0.982617
   CLL	      = -0.316566
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.817901
   F1        = 0.89983


Total learning time: 1.219 seconds
Total inference time: 0.98 seconds
AUC ROC: 0.981453


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.098339
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.625 seconds
Parameter learned model CLL: -0.098339


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [2.06e-07, 0, 46], 'true,false,false,true': [0.0, 9, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.49e-08, 35, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 46], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [0.0, 9, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.49e-08, 35, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [0.247, 9, 46], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 35, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [8.43e-08, 0, 46], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [0.0, 9, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 35, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 46], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [7.45e-09, 9, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 35, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [8.16e-08, 0, 46], 'true,false,false,true': [9.13e-09, 9, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.73e-09, 35, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [6.32e-08, 0, 46], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.044, 11, 0], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 35, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [4.71e-08, 0, 46], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [5.27e-09, 9, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.05e-08, 35, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [0.0, 0, 46], 'true,false,false,true': [3.73e-09, 9, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 35, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'movie(D, A)'}, {'true,true,true,true': [0.0, 0, 0], 'true,true,true,false': [3.94e-08, 0, 46], 'true,true,false,true': [0.03, 11, 0], 'true,true,false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false': [0.0, 35, 0]}]]
[{'': [0.1557402277623888, 3.489272363107635e-17], 'true': [0.0, 0.1368595041322319], 'true,false': [9.267948727305654e-16, -9.25185853854297e-18], 'false': [3.489272363107635e-17, nan], 'true,false,false': [-9.25185853854297e-18, nan]}, {'': [0.11118084804782356, 6.3441315692866086e-18], 'true': [-9.267948727305654e-16, 2.523234146875356e-18], 'false': [6.3441315692866086e-18, nan], 'true,false': [0.0, 0.0], 'true,false,false': [0.0, nan]}, {'': [0.06942904670090035, -1.2688263138573217e-17], 'true': [0.0, 0.06101201366133818], 'true,false': [0.06101201366133818, nan], 'false': [-1.2688263138573217e-17, nan]}, {'': [0.0557725910803842, -1.5860328923216522e-18], 'true': [1.544658121217609e-16, 0.0005987998076519588], 'true,false': [0.0, -1.2335811384723961e-17], 'false': [-1.5860328923216522e-18, nan], 'true,false,false': [-1.2335811384723961e-17, nan]}, {'': [0.03495160819582303, -9.516197353929913e-18], 'true': [-7.723290606088045e-17, 0.000384570599518746], 'true,false': [0.0, 6.1679056923619804e-18], 'true,false,false': [6.1679056923619804e-18, nan], 'false': [-9.516197353929913e-18, nan]}, {'': [0.023349178891080843, 1.4274296030894868e-17], 'true': [0.0, 0.02128331025299582], 'true,false': [1.4481169886415086e-16, 9.25185853854297e-18], 'false': [1.4274296030894868e-17, nan], 'true,false,false': [9.25185853854297e-18, nan]}, {'': [0.016543226095909004, 0.0], 'true': [8.688701931849052e-17, 0.00017825906409542979], 'true,false': [0.00017825906409542979, nan], 'true,false,true': [nan, 0.00017825906409542979], 'false': [0.0, nan]}, {'': [0.012305746117187525, 3.1720657846433043e-18], 'true': [4.827056628805028e-17, 0.00014964596460783554], 'true,false': [0.0, 3.0839528461809902e-18], 'false': [3.1720657846433043e-18, nan], 'true,false,false': [3.0839528461809902e-18, nan]}, {'': [0.009487480985684148, -2.3790493384824783e-18], 'true': [0.0, 0.008655227413997274], 'true,false': [-4.344350965924526e-17, 1.5419764230904951e-18], 'true,false,false': [1.5419764230904951e-18, nan], 'false': [-2.3790493384824783e-18, nan]}, {'': [0.0075336849801476416, -1.5860328923216522e-18], 'true': [0.0075336849801476416, nan], 'true,true': [3.37893964016352e-17, 8.218542994400568e-05], 'true,true,false': [8.218542994400568e-05, nan], 'true,true,true': [nan, 3.37893964016352e-17]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, D).;true;true
4;true,false;genre(A, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(A, D).;true;true
5;true,false;genre(B, E).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, D).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
8;true,false;genre(B, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995121;  // std dev = 2.06e-07, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else return -0.1418510649004877;  // std dev = 3.49e-08, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.719473412210955;  // std dev = 0.000, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else return -0.12544463852839136;  // std dev = 1.49e-08, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( director(B) )
%   | | then return 0.5553664367462839;  // std dev = 0.000, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | | else return -0.11231637819360639;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else return -0.11231637819360643;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.41751358415831025;  // std dev = 0.000, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( female(A) )
%   | | | then return -0.10159632948783628;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.10159632948783635;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.3207118471601497;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.3207118471601495;  // std dev = 3.73e-09, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | else if ( genre(A, E) )
%   | | then return -0.09269127618926096;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return -0.09269127618926097;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else return -0.092691276189261;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.2551722425694896;  // std dev = 0.000, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | | else if ( female(A) )
%   | | | then return -0.08518475138839687;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( female(B) )
%   | then if ( female(A) )
%   | | then return -0.08518475138839687;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.08518475138839687;  // std dev = 9.31e-10, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( female(A) )
%   | | then return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.08518475138839685;  // std dev = 2.63e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.20975771563253562;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.20975771563253545;  // std dev = 7.90e-09, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | else return -0.07877675473109172;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return -0.07877675473109176;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1770964977452775;  // std dev = 0.000, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | else if ( genre(A, E) )
%   | | then return -0.07324622576333704;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( female(A) )
%   | | | then return -0.07324622576333704;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( female(A) )
%   | then if ( female(B) )
%   | | then return -0.07324622576333704;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.06842697784420272;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.15274385809367083;  // std dev = 0.000, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | | else return -0.06842697784420272;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else return -0.06842697784420274;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.13400703000801095;  // std dev = 1.86e-09, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.13400703000801117;  // std dev = 0.000, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | else if ( female(A) )
%   | | then return -0.0641918400820262;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.0641918400820262;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.06419184008202622;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.282862
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.817901
   F1        = 0.89983


Total learning time: 1.586 seconds
Total inference time: 0.902 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.67 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.282862
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.817901
   F1        = 0.89983


Total learning time: 4.1000000000000005 seconds
Total inference time: 0.902 seconds
AUC ROC: 1.0
Total revision time: 4.1000000000000005
Best scored revision CLL: -0.094637


Dataset: 4_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 03:31:05
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.282862, 'Precision': [1.0, 0.5], 'Recall': 0.817901, 'F1': 0.89983, 'Learning time': 4.1000000000000005, 'Inference time': 0.902, 'parameter_0.8': {'AUC ROC': 0.981453, 'AUC PR': 0.982617, 'CLL': -0.316566, 'Precision': [1.0, 0.5], 'Recall': 0.817901, 'F1': 0.89983, 'Learning time': 1.219, 'Inference time': 0.98}}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
3;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
3;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
3;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordauthor(D, C).;true;true
4;true,true;author(E, D), venue(E, B).;false;true
4;true,true,false;haswordtitle(F, C).;false;false
4;true,false;haswordtitle(G, C).;true;true
4;true,false,true;title(H, G), venue(H, A).;false;false
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(A, K), haswordtitle(L, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(B, I), haswordauthor(J, I).;false;false
5;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, B).;false;true
6;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
6;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
6;true,false,true;title(J, I), venue(J, B).;false;false
6;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
6;false;haswordvenue(A, M), haswordauthor(N, M).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
7;true,false,true;title(I, H), venue(I, B).;false;false
7;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
7;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;title(F, D), venue(F, B).;false;false
8;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
8;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
8;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;haswordvenue(A, D).;false;false
9;true,false;haswordtitle(H, C).;true;true
9;true,false,true;title(I, H), venue(I, B).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995125;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048768;  // std dev = 4.47e-08, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109544;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.12544463852839138;  // std dev = 7.45e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839152;  // std dev = 0.000, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( movie(E, A) )
%   | | then return 0.4331146537291206;  // std dev = 0.258, 71.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=58 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360636;  // std dev = 0.000, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4475098637204162;  // std dev = 8.43e-08, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( genre(A, E) )
%   | | then return -0.1015963294878363;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.1632584040768232;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783633;  // std dev = 0.000, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.3411335389475678;  // std dev = 2.98e-08, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( genre(A, E) )
%   | | then return -0.09269127618926094;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.1421630444355702;  // std dev = 7.45e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.09269127618926101;  // std dev = 0.000, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.26906325883360255;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.12569153274834013;  // std dev = 1.18e-08, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.08518475138839679;  // std dev = 3.48e-09, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2195237877998015;  // std dev = 6.66e-08, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1061899749415843;  // std dev = 0.053, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109179;  // std dev = 0.000, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18422699801074255;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( genre(A, E) )
%   | | then return -0.0714070145839613;  // std dev = 1.32e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.10234062177040319;  // std dev = 5.27e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333704;  // std dev = 1.18e-08, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.06681465282227236;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.15813182117530586;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.09331411980833235;  // std dev = 7.45e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420271;  // std dev = 7.45e-09, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.13819940977594042;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else if ( movie(D, A) )
%   | | | then return -0.08141077641285965;  // std dev = 0.036, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202625;  // std dev = 0.000, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */


Results
   AUC ROC   = 0.981453
   AUC PR    = 0.982617
   CLL	      = -0.317184
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.817901
   F1        = 0.89983


Total learning time: 1.249 seconds
Total inference time: 0.897 seconds
AUC ROC: 0.981453


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.098778
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.655 seconds
Parameter learned model CLL: -0.098778


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 3, 0], 'true,false,true': [0.0, 0, 58], 'true,false,false,true': [0.0, 13, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.47e-08, 42, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 58], 'true,false,true': [0.0, 3, 0], 'true,false,false,true': [7.45e-09, 13, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 42, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [2.63e-09, 3, 0], 'true,false,true': [0.258, 13, 58], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 42, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [8.43e-08, 0, 58], 'true,false,true': [0.0, 3, 0], 'true,false,false,true': [0.0, 13, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 42, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [2.98e-08, 0, 58], 'true,false,true': [2.63e-09, 3, 0], 'true,false,false,true': [7.45e-09, 13, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 42, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 3, 0], 'true,false,true': [0.0, 0, 58], 'true,false,false,true': [1.18e-08, 13, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.48e-09, 42, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [6.66e-08, 0, 58], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.053, 16, 0], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 42, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 58], 'true,false,true': [1.32e-09, 3, 0], 'true,false,false,true': [5.27e-09, 13, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.18e-08, 42, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 3, 0], 'true,false,true': [0.0, 0, 58], 'true,false,false,true': [7.45e-09, 13, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.45e-09, 42, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'movie(D, A)'}, {'true,true,true,true': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 58], 'true,true,false,true': [0.036, 16, 0], 'true,true,false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false': [0.0, 42, 0]}]]
[{'': [0.16946676406135816, 4.7580986769649563e-17], 'true': [0.0, 0.1495734973219595], 'true,false': [-3.675221047035001e-16, -1.2810265668751807e-17], 'false': [4.7580986769649563e-17, nan], 'true,false,false': [-1.2810265668751807e-17, nan]}, {'': [0.12098003717452253, -2.6433881538694202e-17], 'true': [-1.2250736823450003e-16, 3.469446951953614e-18], 'true,false': [0.0, 4.270088556250602e-18], 'true,false,false': [4.270088556250602e-18, nan], 'false': [-2.6433881538694202e-17, nan]}, {'': [0.07554834126875462, 0.0], 'true': [2.3129646346357427e-18, 0.06667991616544468], 'true,false': [0.06667991616544468, nan], 'false': [0.0, nan]}, {'': [0.060972043435373595, -3.96508223080413e-18], 'true': [1.2250736823450003e-16, 0.0005792431494612976], 'true,false': [-1.1564823173178713e-18, -1.2810265668751807e-17], 'false': [-3.96508223080413e-18, nan], 'true,false,false': [-1.2810265668751807e-17, nan]}, {'': [0.038159045759759466, -1.4538634846281813e-17], 'true': [1.5313421029312504e-17, 0.0003728546026689275], 'true,false': [2.3129646346357427e-18, 4.270088556250602e-18], 'true,false,false': [4.270088556250602e-18, nan], 'false': [-1.4538634846281813e-17, nan]}, {'': [0.025455875318031593, 1.1895246692412391e-17], 'true': [0.0, 0.02330823933536693], 'true,false': [-3.062684205862501e-17, 1.0675221390626506e-17], 'false': [1.1895246692412391e-17, nan], 'true,false,false': [1.0675221390626506e-17, nan]}, {'': [0.018016132795620192, 0.0], 'true': [7.656710514656253e-17, 0.00017341953284051755], 'true,false': [0.00017341953284051755, nan], 'true,false,true': [nan, 0.00017341953284051755], 'false': [0.0, nan]}, {'': [0.01339065657194443, 3.3042351923367752e-18], 'true': [-7.656710514656252e-18, 0.00014577591441030345], 'true,false': [5.782411586589357e-19, 2.135044278125301e-18], 'false': [3.3042351923367752e-18, nan], 'true,false,false': [2.135044278125301e-18, nan]}, {'': [0.010318415309277984, 1.32169407693471e-18], 'true': [0.0, 0.009456793527635166], 'true,false': [-2.6798486801296883e-17, 4.270088556250602e-18], 'true,false,false': [4.270088556250602e-18, nan], 'false': [1.32169407693471e-18, nan]}, {'': [0.008190493208152011, -1.982541115402065e-18], 'true': [0.008190493208152011, nan], 'true,true': [-3.4455197315953135e-17, 8.020994017610833e-05], 'true,true,false': [8.020994017610833e-05, nan], 'true,true,true': [nan, -3.4455197315953135e-17]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, D).;true;true
4;true,false;genre(A, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(A, D).;true;true
5;true,false;genre(B, E).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, D).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
8;true,false;genre(B, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995125;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else return -0.14185106490048768;  // std dev = 4.47e-08, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109544;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.12544463852839138;  // std dev = 7.45e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else return -0.12544463852839152;  // std dev = 0.000, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( actor(B) )
%   | | then if ( female(A) )
%   | | | then return -0.11231637819360639;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return -0.11231637819360639;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( female(A) )
%   | | | then return 0.5553664367462845;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.5553664367462842;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   else return -0.11231637819360636;  // std dev = 0.000, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4175135841583103;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( genre(A, E) )
%   | | then return -0.1015963294878363;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.1015963294878363;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else return -0.10159632948783633;  // std dev = 0.000, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.32071184716014967;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( genre(A, E) )
%   | | then return -0.09269127618926094;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( female(A) )
%   | | | then return -0.09269127618926097;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return -0.09269127618926097;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.09269127618926101;  // std dev = 0.000, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then if ( female(A) )
%   | | | then return 0.2551722425694892;  // std dev = 1.49e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.2551722425694892;  // std dev = 3.65e-08, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else return -0.08518475138839686;  // std dev = 2.08e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else if ( actor(A) )
%   | then if ( female(B) )
%   | | then if ( female(A) )
%   | | | then return -0.08518475138839687;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return -0.08518475138839687;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( female(A) )
%   | | | then return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.08518475138839685;  // std dev = 1.18e-08, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return -0.08518475138839687;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.20975771563253562;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else return -0.07877675473109173;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return -0.07877675473109177;  // std dev = 0.000, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17709649774527733;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( genre(A, E) )
%   | | then return -0.07324622576333704;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( female(A) )
%   | | | then return -0.07324622576333704;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return -0.07324622576333704;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( female(B) )
%   | then if ( female(A) )
%   | | then return -0.07324622576333704;  // std dev = 9.31e-10, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return -0.07324622576333704;  // std dev = 1.32e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.06842697784420272;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then if ( female(A) )
%   | | | then return 0.1527438580936708;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.15274385809367083;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else if ( female(B) )
%   | | | then return -0.06842697784420272;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.06842697784420272;  // std dev = 2.63e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else if ( female(A) )
%   | then if ( female(B) )
%   | | then return -0.06842697784420272;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.06842697784420275;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.13400703000801117;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.1340070300080111;  // std dev = 2.63e-09, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | else if ( female(A) )
%   | | then return -0.0641918400820262;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( female(B) )
%   | | | then return -0.0641918400820262;  // std dev = 1.32e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.0641918400820262;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.06419184008202623;  // std dev = 0.000, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.282862
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.817901
   F1        = 0.89983


Total learning time: 1.959 seconds
Total inference time: 0.854 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.575 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.282862
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.817901
   F1        = 0.89983


Total learning time: 4.438000000000001 seconds
Total inference time: 0.854 seconds
AUC ROC: 1.0
Total revision time: 4.438000000000001
Best scored revision CLL: -0.094637


Dataset: 4_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 03:31:12
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.282862, 'Precision': [1.0, 0.5], 'Recall': 0.817901, 'F1': 0.89983, 'Learning time': 4.438000000000001, 'Inference time': 0.854, 'parameter_1.0': {'AUC ROC': 0.981453, 'AUC PR': 0.982617, 'CLL': -0.317184, 'Precision': [1.0, 0.5], 'Recall': 0.817901, 'F1': 0.89983, 'Learning time': 1.249, 'Inference time': 0.897}}


Starting fold 3

Target train facts examples: 341
Target train pos examples: 178
Target train neg examples: 178

Target test facts examples: 737
Target test pos	 examples: 204
Target test neg examples: 204

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
3;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
3;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
3;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordauthor(D, C).;true;true
4;true,true;author(E, D), venue(E, B).;false;true
4;true,true,false;haswordtitle(F, C).;false;false
4;true,false;haswordtitle(G, C).;true;true
4;true,false,true;title(H, G), venue(H, A).;false;false
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(A, K), haswordtitle(L, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(B, I), haswordauthor(J, I).;false;false
5;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, B).;false;true
6;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
6;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
6;true,false,true;title(J, I), venue(J, B).;false;false
6;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
6;false;haswordvenue(A, M), haswordauthor(N, M).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
7;true,false,true;title(I, H), venue(I, B).;false;false
7;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
7;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;title(F, D), venue(F, B).;false;false
8;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
8;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
8;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;haswordvenue(A, D).;false;false
9;true,false;haswordtitle(H, C).;true;true
9;true,false,true;title(I, H), venue(I, B).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995118;  // std dev = 1.46e-07, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.42064893509951234;  // std dev = 1.984, 16.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004877;  // std dev = 2.36e-08, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.361386758207022;  // std dev = 1.984, 16.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, A) )
%   | | then return 0.4569700347332709;  // std dev = 0.331, 42.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=35 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.1123163781936064;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.44161940037560815;  // std dev = 7.30e-08, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.1991825644013959;  // std dev = 1.984, 16.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783635;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.33710731726221455;  // std dev = 3.65e-08, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else if ( genre(A, E) )
%   | | then return -0.09269127618926096;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.15197892651504658;  // std dev = 1.984, 16.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.09269127618926097;  // std dev = 5.27e-09, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.2663308001922111;  // std dev = 1.49e-08, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.11476656200439432;  // std dev = 1.984, 16.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.08518475138839682;  // std dev = 3.48e-09, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.21760982425696263;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07654129354746197;  // std dev = 1.991, 17.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109175;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18283458195342603;  // std dev = 2.98e-08, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else if ( genre(A, E) )
%   | | then return -0.08451359190971265;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.06713109893477406;  // std dev = 1.984, 16.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07820013665010117;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.15708298160932876;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.0503508484701526;  // std dev = 1.984, 16.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420276;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1373854719248461;  // std dev = 3.07e-08, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else if ( movie(D, A) )
%   | | | then return 0.031279342856414115;  // std dev = 1.987, 17.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202622;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */


Results
   AUC ROC   = 0.994233
   AUC PR    = 0.994929
   CLL	      = -0.190741
   Precision = 0.809524 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.894737


Total learning time: 1.149 seconds
Total inference time: 0.852 seconds
AUC ROC: 0.994233


Results scoring model
   AUC ROC   = 0.974286
   AUC PR    = 0.975216
   CLL	      = -0.230501
   Precision = 0.833333 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.909091


Total scoring time: 0.634 seconds
Parameter learned model CLL: -0.230501


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [1.46e-07, 0, 26], 'true,false,false,true': [1.984, 7, 9], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.36e-08, 27, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 26], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [1.984, 7, 9], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 27, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.331, 7, 35], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 27, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [7.3e-08, 0, 26], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [1.984, 7, 9], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 27, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [3.65e-08, 0, 26], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [1.984, 7, 9], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.27e-09, 27, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [1.49e-08, 0, 26], 'true,false,false,true': [1.984, 7, 9], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.48e-09, 27, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 26], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.991, 8, 9], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 27, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [2.98e-08, 0, 26], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [1.984, 7, 9], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 27, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 26], 'true,false,false,true': [1.984, 7, 9], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 27, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'movie(D, A)'}, {'true,true,true,true': [0.0, 0, 0], 'true,true,true,false': [3.07e-08, 0, 26], 'true,true,false,true': [1.987, 8, 9], 'true,true,false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false': [0.0, 27, 0]}]]
[{'': [0.1514332071389958, 2.05596856412066e-17], 'true': [0.0, 0.13888888888889064], 'true,false': [8.198570028001156e-16, 0.24609374999999992], 'true,false,false': [0.24609374999999992, nan], 'false': [2.05596856412066e-17, nan]}, {'': [0.13250820108402128, -4.11193712824132e-18], 'true': [-1.3664283380001927e-16, 0.24473902055902313], 'true,false': [0.0, 0.24609375000000006], 'true,false,false': [0.24609375000000006, nan], 'false': [-4.11193712824132e-18, nan]}, {'': [0.11429852341079431, -4.11193712824132e-18], 'true': [0.0, 0.10948300938479863], 'true,false': [0.10948300938479863, nan], 'false': [-4.11193712824132e-18, nan]}, {'': [0.10972569569089562, -2.05596856412066e-18], 'true': [2.049642507000289e-16, 0.2366262529001651], 'true,false': [0.0, 0.2460937500000001], 'true,false,false': [0.2460937500000001, nan], 'false': [-2.05596856412066e-18, nan]}, {'': [0.10239620470251026, 1.02798428206033e-18], 'true': [5.124106267500723e-17, 0.23493188972132123], 'true,false': [0.0, 0.24609374999999983], 'true,false,false': [0.24609374999999983, nan], 'false': [1.02798428206033e-18, nan]}, {'': [0.09882156085097837, 1.2335811384723961e-17], 'true': [0.0, 0.09916736667332227], 'true,false': [8.540177112501205e-18, 0.24609375], 'true,false,false': [0.24609375, nan], 'false': [1.2335811384723961e-17, nan]}, {'': [0.09692298398275842, -3.0839528461809902e-18], 'true': [-2.5620531337503614e-17, 0.23312537806638978], 'true,false': [0.23312537806638978, nan], 'true,false,true': [nan, 0.23312537806638978], 'false': [-3.0839528461809902e-18, nan]}, {'': [0.0957857783248942, 0.0], 'true': [3.416070845000482e-17, 0.23289078822208], 'true,false': [0.0, 0.24609375000000003], 'true,false,false': [0.24609375000000003, nan], 'false': [0.0, nan]}, {'': [0.09505418320782998, -5.13992141030165e-18], 'true': [0.0, 0.09643648938190848], 'true,false': [-3.843079700625542e-17, 0.24609375000000008], 'true,false,false': [0.24609375000000008, nan], 'false': [-5.13992141030165e-18, nan]}, {'': [0.09452847834806985, -2.569960705150825e-18], 'true': [0.09452847834806985, nan], 'true,true': [3.629575272813012e-17, 0.2322939736921192], 'true,true,false': [0.2322939736921192, nan], 'true,true,true': [nan, 3.629575272813012e-17]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, D).;true;true
4;true,false;genre(A, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(A, D).;true;true
5;true,false;genre(B, E).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, D).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
8;true,false;genre(B, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995118;  // std dev = 1.46e-07, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else if ( actor(B) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.1418510649004877;  // std dev = 2.36e-08, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( actor(B) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0.7194734122109543;  // std dev = 2.98e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.12544463852839138;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( director(B) )
%   | | then return 0.5553664367462844;  // std dev = 9.42e-08, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else return -0.11231637819360639;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.1123163781936064;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.41751358415831;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( actor(B) )
%   | | | then return -0.10159632948783627;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0.41751358415830986;  // std dev = 3.33e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.10159632948783635;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.32071184716014955;  // std dev = 2.11e-08, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else if ( genre(A, E) )
%   | | then return -0.09269127618926096;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( actor(B) )
%   | | | then return -0.09269127618926097;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0.3207118471601497;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.09269127618926097;  // std dev = 5.27e-09, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.25517224256948956;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else if ( actor(B) )
%   | | | then return -0.08518475138839687;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0.2551722425694894;  // std dev = 1.83e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.08518475138839682;  // std dev = 1.83e-08, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2097577156325355;  // std dev = 2.11e-08, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else if ( actor(B) )
%   | | then return -0.07877675473109173;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0.2097577156325357;  // std dev = 1.67e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.07877675473109175;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17709649774527747;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else if ( genre(A, E) )
%   | | then return -0.07324622576333704;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( actor(B) )
%   | | | then return -0.07324622576333704;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0.17709649774527736;  // std dev = 7.45e-09, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.07324622576333704;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.06842697784420272;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.15274385809367083;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else if ( actor(B) )
%   | | | then return -0.06842697784420272;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0.15274385809367097;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.06842697784420276;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13400703000801117;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else if ( actor(B) )
%   | | then return -0.0641918400820262;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0.13400703000801117;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.06419184008202622;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.337 seconds
Total inference time: 0.895 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.623 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.7430000000000003 seconds
Total inference time: 0.895 seconds
AUC ROC: 1.0
Total revision time: 3.7430000000000003
Best scored revision CLL: -0.094637


Dataset: 4_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 03:31:18
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.094637, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 3.7430000000000003, 'Inference time': 0.895, 'parameter_0.2': {'AUC ROC': 0.994233, 'AUC PR': 0.994929, 'CLL': -0.190741, 'Precision': [0.809524, 0.5], 'Recall': 1.0, 'F1': 0.894737, 'Learning time': 1.149, 'Inference time': 0.852}}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
3;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
3;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
3;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordauthor(D, C).;true;true
4;true,true;author(E, D), venue(E, B).;false;true
4;true,true,false;haswordtitle(F, C).;false;false
4;true,false;haswordtitle(G, C).;true;true
4;true,false,true;title(H, G), venue(H, A).;false;false
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(A, K), haswordtitle(L, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(B, I), haswordauthor(J, I).;false;false
5;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, B).;false;true
6;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
6;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
6;true,false,true;title(J, I), venue(J, B).;false;false
6;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
6;false;haswordvenue(A, M), haswordauthor(N, M).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
7;true,false,true;title(I, H), venue(I, B).;false;false
7;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
7;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;title(F, D), venue(F, B).;false;false
8;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
8;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
8;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;haswordvenue(A, D).;false;false
9;true,false;haswordtitle(H, C).;true;true
9;true,false,true;title(I, H), venue(I, B).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995122;  // std dev = 1.69e-07, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.5052077586289233;  // std dev = 2.787, 34.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=22 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048766;  // std dev = 5.77e-08, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109547;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.4320160447055319;  // std dev = 2.787, 34.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=22 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839158;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( movie(E, A) )
%   | | then return 0.4713629815177539;  // std dev = 0.322, 83.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=71 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360629;  // std dev = 3.94e-08, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.43807326000801056;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | else if ( genre(A, E) )
%   | | then return -0.1015963294878363;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.24368167926146048;  // std dev = 2.787, 34.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=22 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783623;  // std dev = 3.80e-08, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.3346877239208919;  // std dev = 6.66e-08, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | else if ( genre(A, E) )
%   | | then return -0.09269127618926094;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.18392468330263753;  // std dev = 2.787, 34.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=22 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.09269127618926107;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.26468737958719624;  // std dev = 7.60e-08, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.13801152427499433;  // std dev = 2.787, 34.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=22 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.08518475138839679;  // std dev = 2.28e-09, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.21645705706957238;  // std dev = 2.98e-08, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08882874047119717;  // std dev = 2.803, 37.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=22 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109176;  // std dev = 1.83e-08, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18199477452740895;  // std dev = 3.65e-08, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | else if ( genre(A, E) )
%   | | then return -0.08546915087603657;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.0816769985746734;  // std dev = 2.787, 34.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=22 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333704;  // std dev = 7.45e-09, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07902090871424695;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.1564496282307439;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.061724541206681506;  // std dev = 2.787, 34.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=22 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420268;  // std dev = 1.67e-08, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.13689346298993763;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | else if ( movie(D, A) )
%   | | | then return 0.03707332114322022;  // std dev = 2.794, 37.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=22 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202625;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */


Results
   AUC ROC   = 0.994233
   AUC PR    = 0.994929
   CLL	      = -0.208298
   Precision = 0.809524 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.894737


Total learning time: 1.399 seconds
Total inference time: 0.829 seconds
AUC ROC: 0.994233


Results scoring model
   AUC ROC   = 0.973815
   AUC PR    = 0.97371
   CLL	      = -0.227149
   Precision = 0.855422 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.922078


Total scoring time: 0.686 seconds
Parameter learned model CLL: -0.227149


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 3, 0], 'true,false,true': [1.69e-07, 0, 49], 'true,false,false,true': [2.787, 12, 22], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.77e-08, 56, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 49], 'true,false,true': [0.0, 3, 0], 'true,false,false,true': [2.787, 12, 22], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 56, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [2.63e-09, 3, 0], 'true,false,true': [0.322, 12, 71], 'true,false,false': [0.0, 0, 0], 'false,true': [3.94e-08, 56, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 49], 'true,false,true': [0.0, 3, 0], 'true,false,false,true': [2.787, 12, 22], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.8e-08, 56, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [6.66e-08, 0, 49], 'true,false,true': [2.63e-09, 3, 0], 'true,false,false,true': [2.787, 12, 22], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 56, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 3, 0], 'true,false,true': [7.6e-08, 0, 49], 'true,false,false,true': [2.787, 12, 22], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.28e-09, 56, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [2.98e-08, 0, 49], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [2.803, 15, 22], 'true,false,false': [0.0, 0, 0], 'false,true': [1.83e-08, 56, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [3.65e-08, 0, 49], 'true,false,true': [0.0, 3, 0], 'true,false,false,true': [2.787, 12, 22], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.45e-09, 56, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 3, 0], 'true,false,true': [0.0, 0, 49], 'true,false,false,true': [2.787, 12, 22], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.67e-08, 56, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'movie(D, A)'}, {'true,true,true,true': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 49], 'true,true,false,true': [2.794, 15, 22], 'true,true,false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false': [0.0, 56, 0]}]]
[{'': [0.14399675500270298, 5.947623346206196e-17], 'true': [0.0, 0.12367542458992477], 'true,false': [5.800348863347756e-16, 0.22837370242214636], 'true,false,false': [0.22837370242214636, nan], 'false': [5.947623346206196e-17, nan]}, {'': [0.1273753738651189, -3.766828119263924e-17], 'true': [-5.800348863347756e-16, 0.23301087202989426], 'true,false': [0.0, 0.22837370242214536], 'true,false,false': [0.22837370242214536, nan], 'false': [-3.766828119263924e-17, nan]}, {'': [0.11157197089178579, 2.7755575615628914e-17], 'true': [2.3129646346357427e-18, 0.10372045104683884], 'true,false': [0.10372045104683884, nan], 'false': [2.7755575615628914e-17, nan]}, {'': [0.10623209065470976, 2.577303450022685e-17], 'true': [-3.6252180395923476e-17, 0.21873940232746444], 'true,false': [-1.1564823173178713e-18, 0.2283737024221455], 'true,false,false': [0.2283737024221455, nan], 'false': [2.577303450022685e-17, nan]}, {'': [0.10009284455028375, -9.912705577010326e-19], 'true': [9.06304509898087e-17, 0.21555791769884042], 'true,false': [2.3129646346357427e-18, 0.2283737024221455], 'true,false,false': [0.2283737024221455, nan], 'false': [-9.912705577010326e-19, nan]}, {'': [0.09702193944683424, 5.9476233462061954e-18], 'true': [0.0, 0.09743134140207228], 'true,false': [1.1781958628675131e-16, 0.2283737024221453], 'true,false,false': [0.2283737024221453, nan], 'false': [5.9476233462061954e-18, nan]}, {'': [0.09534664278681991, 5.9476233462061954e-18], 'true': [1.8126090197961738e-17, 0.21233558650591605], 'true,false': [0.21233558650591605, nan], 'true,false,true': [nan, 0.21233558650591605], 'false': [5.9476233462061954e-18, nan]}, {'': [0.09436132343400563, 9.912705577010326e-19], 'true': [2.718913529694261e-17, 0.211938478338372], 'true,false': [0.0, 0.2283737024221455], 'true,false,false': [0.2283737024221455, nan], 'false': [9.912705577010326e-19, nan]}, {'': [0.09368369720324894, 4.956352788505163e-18], 'true': [0.0, 0.09572061884067531], 'true,false': [-7.250436079184695e-17, 0.22837370242214525], 'true,false,false': [0.22837370242214525, nan], 'false': [4.956352788505163e-18, nan]}, {'': [0.0931935773539302, -2.9738116731030977e-18], 'true': [0.0931935773539302, nan], 'true,true': [-3.6252180395923476e-17, 0.2109349013285329], 'true,true,false': [0.2109349013285329, nan], 'true,true,true': [nan, -3.6252180395923476e-17]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, D).;true;true
4;true,false;genre(A, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(A, D).;true;true
5;true,false;genre(B, E).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, D).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
8;true,false;genre(B, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995122;  // std dev = 1.69e-07, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | else if ( actor(B) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.8581489350995121;  // std dev = 5.96e-08, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else return -0.14185106490048766;  // std dev = 5.77e-08, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109547;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( actor(B) )
%   | | | then return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.7194734122109542;  // std dev = 7.30e-08, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else return -0.12544463852839158;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( director(B) )
%   | | then return 0.5553664367462836;  // std dev = 2.53e-07, 71.000 (wgt'ed) examples reached here.  /* #pos=71 */
%   | | else return -0.11231637819360636;  // std dev = 9.13e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else return -0.11231637819360629;  // std dev = 3.94e-08, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.41751358415831047;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | else if ( genre(A, E) )
%   | | then return -0.1015963294878363;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( actor(B) )
%   | | | then return -0.1015963294878363;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.41751358415831047;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else return -0.10159632948783623;  // std dev = 3.80e-08, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.32071184716014944;  // std dev = 2.98e-08, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | else if ( genre(A, E) )
%   | | then return -0.09269127618926094;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( actor(B) )
%   | | | then return -0.09269127618926097;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.32071184716014955;  // std dev = 2.11e-08, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else return -0.09269127618926107;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.2551722425694896;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | else if ( actor(B) )
%   | | | then return -0.08518475138839687;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.2551722425694895;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else return -0.08518475138839679;  // std dev = 1.83e-08, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.20975771563253554;  // std dev = 4.21e-08, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | else if ( actor(B) )
%   | | then return -0.07877675473109173;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else return 0.20975771563253573;  // std dev = 2.11e-08, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else return -0.07877675473109176;  // std dev = 1.83e-08, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17709649774527744;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | else if ( genre(A, E) )
%   | | then return -0.07324622576333704;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( actor(B) )
%   | | | then return -0.07324622576333704;  // std dev = 3.73e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.17709649774527747;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else return -0.07324622576333704;  // std dev = 7.45e-09, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.06842697784420272;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.15274385809367083;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | else if ( actor(B) )
%   | | | then return -0.06842697784420272;  // std dev = 2.63e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.1527438580936709;  // std dev = 2.58e-08, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else return -0.06842697784420268;  // std dev = 1.67e-08, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.134007030008011;  // std dev = 2.98e-08, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | else if ( actor(B) )
%   | | then return -0.06419184008202619;  // std dev = 7.90e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else return 0.13400703000801117;  // std dev = 7.45e-09, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else return -0.06419184008202625;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.002 seconds
Total inference time: 0.866 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.7 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 4.787 seconds
Total inference time: 0.866 seconds
AUC ROC: 1.0
Total revision time: 4.787
Best scored revision CLL: -0.094637


Dataset: 4_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 03:31:25
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.094637, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 4.787, 'Inference time': 0.866, 'parameter_0.4': {'AUC ROC': 0.994233, 'AUC PR': 0.994929, 'CLL': -0.208298, 'Precision': [0.809524, 0.5], 'Recall': 1.0, 'F1': 0.894737, 'Learning time': 1.399, 'Inference time': 0.829}}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
3;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
3;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
3;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordauthor(D, C).;true;true
4;true,true;author(E, D), venue(E, B).;false;true
4;true,true,false;haswordtitle(F, C).;false;false
4;true,false;haswordtitle(G, C).;true;true
4;true,false,true;title(H, G), venue(H, A).;false;false
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(A, K), haswordtitle(L, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(B, I), haswordauthor(J, I).;false;false
5;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, B).;false;true
6;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
6;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
6;true,false,true;title(J, I), venue(J, B).;false;false
6;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
6;false;haswordvenue(A, M), haswordauthor(N, M).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
7;true,false,true;title(I, H), venue(I, B).;false;false
7;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
7;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;title(F, D), venue(F, B).;false;false
8;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
8;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
8;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;haswordvenue(A, D).;false;false
9;true,false;haswordtitle(H, C).;true;true
9;true,false,true;title(I, H), venue(I, B).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995128;  // std dev = 0.000, 74.000 (wgt'ed) examples reached here.  /* #pos=74 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.5538011090125547;  // std dev = 3.121, 46.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048763;  // std dev = 8.16e-08, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.719473412210954;  // std dev = 1.88e-07, 74.000 (wgt'ed) examples reached here.  /* #pos=74 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.47229335143132617;  // std dev = 3.121, 46.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1254446385283914;  // std dev = 0.000, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( movie(E, A) )
%   | | then return 0.4881492707666705;  // std dev = 0.297, 120.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=106 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360621;  // std dev = 7.15e-08, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4339454496604054;  // std dev = 0.000, 74.000 (wgt'ed) examples reached here.  /* #pos=74 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.26660905521623274;  // std dev = 3.121, 46.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1015963294878362;  // std dev = 5.27e-08, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.3318749605414552;  // std dev = 4.21e-08, 74.000 (wgt'ed) examples reached here.  /* #pos=74 */
%   | else if ( genre(A, E) )
%   | | then return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.20043883106856744;  // std dev = 3.121, 46.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.09269127618926105;  // std dev = 2.11e-08, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.26277557271376395;  // std dev = 7.30e-08, 74.000 (wgt'ed) examples reached here.  /* #pos=74 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.15045299724201516;  // std dev = 3.121, 46.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.08518475138839682;  // std dev = 5.51e-09, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2151144665308009;  // std dev = 0.000, 74.000 (wgt'ed) examples reached here.  /* #pos=74 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.09808875641413844;  // std dev = 3.142, 50.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=32 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109162;  // std dev = 5.05e-08, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.181015563402063;  // std dev = 0.000, 74.000 (wgt'ed) examples reached here.  /* #pos=74 */
%   | else if ( genre(A, E) )
%   | | then return -0.08619573623508027;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.08981829561357785;  // std dev = 3.121, 46.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333707;  // std dev = 0.000, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07964417806665239;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.15571040802583982;  // std dev = 0.000, 74.000 (wgt'ed) examples reached here.  /* #pos=74 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.06858586316718494;  // std dev = 3.121, 46.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420265;  // std dev = 4.21e-08, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.13631873171965816;  // std dev = 0.000, 74.000 (wgt'ed) examples reached here.  /* #pos=74 */
%   | | else if ( movie(D, A) )
%   | | | then return 0.04255634599391517;  // std dev = 3.130, 50.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202626;  // std dev = 0.000, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */


Results
   AUC ROC   = 0.994233
   AUC PR    = 0.994929
   CLL	      = -0.220274
   Precision = 0.809524 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.894737


Total learning time: 1.496 seconds
Total inference time: 0.818 seconds
AUC ROC: 0.994233


Results scoring model
   AUC ROC   = 0.980064
   AUC PR    = 0.979577
   CLL	      = -0.206667
   Precision = 0.883333 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.938053


Total scoring time: 0.723 seconds
Parameter learned model CLL: -0.206667


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 4, 0], 'true,false,true': [0.0, 0, 74], 'true,false,false,true': [3.121, 14, 32], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.16e-08, 88, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.88e-07, 0, 74], 'true,false,true': [0.0, 4, 0], 'true,false,false,true': [3.121, 14, 32], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 88, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 4, 0], 'true,false,true': [0.297, 14, 106], 'true,false,false': [0.0, 0, 0], 'false,true': [7.15e-08, 88, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 74], 'true,false,true': [0.0, 4, 0], 'true,false,false,true': [3.121, 14, 32], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.27e-08, 88, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [4.21e-08, 0, 74], 'true,false,true': [0.0, 4, 0], 'true,false,false,true': [3.121, 14, 32], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.11e-08, 88, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 4, 0], 'true,false,true': [7.3e-08, 0, 74], 'true,false,false,true': [3.121, 14, 32], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.51e-09, 88, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 74], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [3.142, 18, 32], 'true,false,false': [0.0, 0, 0], 'false,true': [5.05e-08, 88, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 74], 'true,false,true': [0.0, 4, 0], 'true,false,false,true': [3.121, 14, 32], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 88, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 4, 0], 'true,false,true': [0.0, 0, 74], 'true,false,false,true': [3.121, 14, 32], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.21e-08, 88, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'movie(D, A)'}, {'true,true,true,true': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 74], 'true,true,false,true': [3.13, 18, 32], 'true,true,false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false': [0.0, 88, 0]}]]
[{'': [0.12408949011446704, 7.569702440626067e-17], 'true': [0.0, 0.10305555555555847], 'true,false': [-1.4402893292434464e-15, 0.21172022684310182], 'true,false,false': [0.21172022684310182, nan], 'false': [7.569702440626067e-17, nan]}, {'': [0.11008595236123331, -1.766263902812749e-17], 'true': [4.800964430811488e-16, 0.22107920455723692], 'true,false': [0.0, 0.2117202268431011], 'true,false,false': [0.2117202268431011, nan], 'false': [-1.766263902812749e-17, nan]}, {'': [0.0968309803676117, 5.803438537813318e-17], 'true': [0.0, 0.08842774437186694], 'true,false': [0.08842774437186694, nan], 'false': [5.803438537813318e-17, nan]}, {'': [0.09188405898949953, 3.154042683594195e-17], 'true': [-1.0322073526244698e-15, 0.2047609438075775], 'true,false': [0.0, 0.21172022684310024], 'true,false,false': [0.21172022684310024, nan], 'false': [3.154042683594195e-17, nan]}, {'': [0.08686420364438421, 5.046468293750712e-18], 'true': [2.400482215405744e-17, 0.20110670781553253], 'true,false': [0.0, 0.21172022684310005], 'true,false,false': [0.21172022684310005, nan], 'false': [5.046468293750712e-18, nan]}, {'': [0.08432970242961645, 3.027880976250427e-17], 'true': [0.0, 0.08414178783915395], 'true,false': [7.201446646217232e-17, 0.21172022684310005], 'true,false,false': [0.21172022684310005, nan], 'false': [3.027880976250427e-17, nan]}, {'': [0.08293369509821655, 2.901719268906659e-17], 'true': [-1.0802169969325848e-16, 0.19750273122023151], 'true,false': [0.19750273122023151, nan], 'true,false,true': [nan, 0.19750273122023151], 'false': [2.901719268906659e-17, nan]}, {'': [0.08212789361532621, -7.569702440626067e-18], 'true': [-9.601928861622976e-17, 0.197062805836053], 'true,false': [0.0, 0.2117202268431002], 'true,false,false': [0.2117202268431002, nan], 'false': [-7.569702440626067e-18, nan]}, {'': [0.081551099900626, 2.0185873175002847e-17], 'true': [0.0, 0.082953774194194], 'true,false': [-1.50030138462859e-17, 0.21172022684310007], 'true,false,false': [0.21172022684310007, nan], 'false': [2.0185873175002847e-17, nan]}, {'': [0.08113321821626779, -1.2616170734376778e-17], 'true': [0.08113321821626779, nan], 'true,true': [-5.401084984662924e-17, 0.19596390949653186], 'true,true,false': [0.19596390949653186, nan], 'true,true,true': [nan, -5.401084984662924e-17]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, D).;true;true
4;true,false;genre(A, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(A, D).;true;true
5;true,false;genre(B, E).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, D).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
8;true,false;genre(B, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995128;  // std dev = 0.000, 74.000 (wgt'ed) examples reached here.  /* #pos=74 */
%   | | else if ( actor(B) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return 0.8581489350995116;  // std dev = 2.15e-07, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   else return -0.14185106490048763;  // std dev = 8.16e-08, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.719473412210954;  // std dev = 1.88e-07, 74.000 (wgt'ed) examples reached here.  /* #pos=74 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( actor(B) )
%   | | | then return -0.12544463852839138;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return 0.7194734122109547;  // std dev = 0.000, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   else return -0.1254446385283914;  // std dev = 0.000, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( actor(B) )
%   | | then return -0.11231637819360636;  // std dev = 1.18e-08, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else return 0.5553664367462834;  // std dev = 3.77e-07, 106.000 (wgt'ed) examples reached here.  /* #pos=106 */
%   else return -0.11231637819360621;  // std dev = 7.15e-08, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4175135841583105;  // std dev = 0.000, 74.000 (wgt'ed) examples reached here.  /* #pos=74 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( actor(B) )
%   | | | then return -0.1015963294878363;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return 0.4175135841583105;  // std dev = 0.000, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   else return -0.1015963294878362;  // std dev = 5.27e-08, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.32071184716015;  // std dev = 0.000, 74.000 (wgt'ed) examples reached here.  /* #pos=74 */
%   | else if ( genre(A, E) )
%   | | then return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( actor(B) )
%   | | | then return -0.09269127618926096;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return 0.3207118471601495;  // std dev = 2.11e-08, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   else return -0.09269127618926105;  // std dev = 2.11e-08, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.2551722425694895;  // std dev = 0.000, 74.000 (wgt'ed) examples reached here.  /* #pos=74 */
%   | | else if ( actor(B) )
%   | | | then return -0.08518475138839686;  // std dev = 8.33e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return 0.2551722425694897;  // std dev = 0.000, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   else return -0.08518475138839682;  // std dev = 5.16e-08, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.20975771563253573;  // std dev = 0.000, 74.000 (wgt'ed) examples reached here.  /* #pos=74 */
%   | else if ( actor(B) )
%   | | then return -0.07877675473109175;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else return 0.20975771563253584;  // std dev = 0.000, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   else return -0.07877675473109162;  // std dev = 5.05e-08, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1770964977452772;  // std dev = 2.98e-08, 74.000 (wgt'ed) examples reached here.  /* #pos=74 */
%   | else if ( genre(A, E) )
%   | | then return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( actor(B) )
%   | | | then return -0.07324622576333704;  // std dev = 3.73e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return 0.1770964977452775;  // std dev = 0.000, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   else return -0.07324622576333707;  // std dev = 0.000, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.15274385809367058;  // std dev = 7.30e-08, 74.000 (wgt'ed) examples reached here.  /* #pos=74 */
%   | | else if ( actor(B) )
%   | | | then return -0.06842697784420272;  // std dev = 3.73e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return 0.1527438580936709;  // std dev = 3.33e-08, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   else return -0.06842697784420265;  // std dev = 4.21e-08, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13400703000801092;  // std dev = 5.16e-08, 74.000 (wgt'ed) examples reached here.  /* #pos=74 */
%   | else if ( director(B) )
%   | | then return 0.13400703000801117;  // std dev = 0.000, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | else return -0.06419184008202619;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else return -0.06419184008202626;  // std dev = 0.000, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.289 seconds
Total inference time: 0.826 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.748 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 5.256 seconds
Total inference time: 0.826 seconds
AUC ROC: 1.0
Total revision time: 5.256
Best scored revision CLL: -0.094637


Dataset: 4_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 03:31:33
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.094637, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 5.256, 'Inference time': 0.826, 'parameter_0.6': {'AUC ROC': 0.994233, 'AUC PR': 0.994929, 'CLL': -0.220274, 'Precision': [0.809524, 0.5], 'Recall': 1.0, 'F1': 0.894737, 'Learning time': 1.496, 'Inference time': 0.818}}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
3;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
3;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
3;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordauthor(D, C).;true;true
4;true,true;author(E, D), venue(E, B).;false;true
4;true,true,false;haswordtitle(F, C).;false;false
4;true,false;haswordtitle(G, C).;true;true
4;true,false,true;title(H, G), venue(H, A).;false;false
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(A, K), haswordtitle(L, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(B, I), haswordauthor(J, I).;false;false
5;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, B).;false;true
6;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
6;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
6;true,false,true;title(J, I), venue(J, B).;false;false
6;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
6;false;haswordvenue(A, M), haswordauthor(N, M).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
7;true,false,true;title(I, H), venue(I, B).;false;false
7;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
7;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;title(F, D), venue(F, B).;false;false
8;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
8;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
8;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;haswordvenue(A, D).;false;false
9;true,false;haswordtitle(H, C).;true;true
9;true,false,true;title(I, H), venue(I, B).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995113;  // std dev = 4.13e-07, 100.000 (wgt'ed) examples reached here.  /* #pos=100 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.4757959939230421;  // std dev = 4.007, 68.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=42 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048763;  // std dev = 7.88e-08, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109544;  // std dev = 0.000, 100.000 (wgt'ed) examples reached here.  /* #pos=100 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.40752735208725743;  // std dev = 4.007, 68.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=42 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839133;  // std dev = 0.000, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( movie(E, A) )
%   | | then return 0.4649608777200952;  // std dev = 0.328, 168.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=142 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360618;  // std dev = 8.69e-08, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4396498540680602;  // std dev = 0.000, 100.000 (wgt'ed) examples reached here.  /* #pos=100 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.22869415642835064;  // std dev = 4.007, 68.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=42 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783634;  // std dev = 0.000, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.3357630848539299;  // std dev = 0.000, 100.000 (wgt'ed) examples reached here.  /* #pos=100 */
%   | else if ( genre(A, E) )
%   | | then return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.17317250763864742;  // std dev = 4.007, 68.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=42 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.09269127618926087;  // std dev = 6.75e-08, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.2654179072420957;  // std dev = 0.000, 100.000 (wgt'ed) examples reached here.  /* #pos=100 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.13010675685377332;  // std dev = 4.007, 68.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=42 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0851847513883968;  // std dev = 5.82e-09, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.21696963355634935;  // std dev = 5.16e-08, 100.000 (wgt'ed) examples reached here.  /* #pos=100 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0877950682560814;  // std dev = 4.022, 72.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=42 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109157;  // std dev = 6.50e-08, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18236830257748818;  // std dev = 0.000, 100.000 (wgt'ed) examples reached here.  /* #pos=100 */
%   | else if ( genre(A, E) )
%   | | then return -0.08538838935260995;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.0757324791615737;  // std dev = 4.007, 68.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=42 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333709;  // std dev = 0.000, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07895158692358487;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.15673140154639154;  // std dev = 9.88e-08, 100.000 (wgt'ed) examples reached here.  /* #pos=100 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.05700082037825889;  // std dev = 4.007, 68.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=42 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420264;  // std dev = 5.37e-08, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.13711240035255667;  // std dev = 8.94e-08, 100.000 (wgt'ed) examples reached here.  /* #pos=100 */
%   | | else if ( movie(D, A) )
%   | | | then return 0.036545168399953615;  // std dev = 4.014, 72.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=42 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202626;  // std dev = 0.000, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */


Results
   AUC ROC   = 0.994233
   AUC PR    = 0.994929
   CLL	      = -0.201992
   Precision = 0.809524 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.894737


Total learning time: 1.625 seconds
Total inference time: 0.872 seconds
AUC ROC: 0.994233


Results scoring model
   AUC ROC   = 0.972922
   AUC PR    = 0.973192
   CLL	      = -0.231237
   Precision = 0.845238 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.916129


Total scoring time: 0.796 seconds
Parameter learned model CLL: -0.231237


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 4, 0], 'true,false,true': [4.13e-07, 0, 100], 'true,false,false,true': [4.007, 26, 42], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.88e-08, 112, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 100], 'true,false,true': [0.0, 4, 0], 'true,false,false,true': [4.007, 26, 42], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 112, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 4, 0], 'true,false,true': [0.328, 26, 142], 'true,false,false': [0.0, 0, 0], 'false,true': [8.69e-08, 112, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 100], 'true,false,true': [0.0, 4, 0], 'true,false,false,true': [4.007, 26, 42], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 112, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 100], 'true,false,true': [0.0, 4, 0], 'true,false,false,true': [4.007, 26, 42], 'true,false,false,false': [0.0, 0, 0], 'false,true': [6.75e-08, 112, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 4, 0], 'true,false,true': [0.0, 0, 100], 'true,false,false,true': [4.007, 26, 42], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.82e-09, 112, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [5.16e-08, 0, 100], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [4.022, 30, 42], 'true,false,false': [0.0, 0, 0], 'false,true': [6.5e-08, 112, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 100], 'true,false,true': [0.0, 4, 0], 'true,false,false,true': [4.007, 26, 42], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 112, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 4, 0], 'true,false,true': [9.88e-08, 0, 100], 'true,false,false,true': [4.007, 26, 42], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.37e-08, 112, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'movie(D, A)'}, {'true,true,true,true': [0.0, 0, 0], 'true,true,true,false': [8.94e-08, 0, 100], 'true,true,false,true': [4.014, 30, 42], 'true,true,false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false': [0.0, 112, 0]}]]
[{'': [0.14399675500270925, 5.551115123125783e-17], 'true': [0.0, 0.13081065759637708], 'true,false': [1.7053025658242404e-15, 0.23615916955017344], 'true,false,false': [0.23615916955017344, nan], 'false': [5.551115123125783e-17, nan]}, {'': [0.12799644000077248, -5.9476233462061954e-18], 'true': [-1.4210854715202004e-16, 0.23794355342477377], 'true,false': [0.0, 0.23615916955017305], 'true,false,false': [0.23615916955017305, nan], 'false': [-5.9476233462061954e-18, nan]}, {'': [0.1126748389257326, 6.740639792367021e-17], 'true': [0.0, 0.1076075957394677], 'true,false': [0.1076075957394677, nan], 'false': [6.740639792367021e-17, nan]}, {'': [0.10855818259265865, -7.93016446160826e-18], 'true': [-1.4210854715202004e-16, 0.22876316842230768], 'true,false': [0.0, 0.23615916955017296], 'true,false,false': [0.23615916955017296, nan], 'false': [-7.93016446160826e-18, nan]}, {'': [0.10257353840975132, 4.0642092865742335e-17], 'true': [-2.6645352591003756e-16, 0.2267479205516198], 'true,false': [0.0, 0.23615916955017274], 'true,false,false': [0.23615916955017274, nan], 'false': [4.0642092865742335e-17, nan]}, {'': [0.09966183697688263, 3.271192840413408e-17], 'true': [0.0, 0.09999944314743402], 'true,false': [-1.865174681370263e-16, 0.2361591695501728], 'true,false,false': [0.2361591695501728, nan], 'false': [3.271192840413408e-17, nan]}, {'': [0.09810943785018914, 3.766828119263924e-17], 'true': [2.6645352591003756e-17, 0.2246713434635258], 'true,false': [0.2246713434635258, nan], 'true,false,true': [nan, 0.2246713434635258], 'false': [3.766828119263924e-17, nan]}, {'': [0.09718700512749553, -4.956352788505163e-18], 'true': [-7.549516567451065e-17, 0.22440131100295066], 'true,false': [0.0, 0.23615916955017321], 'true,false,false': [0.23615916955017321, nan], 'false': [-4.956352788505163e-18, nan]}, {'': [0.09657239423253443, 2.577303450022685e-17], 'true': [0.0, 0.09798456763456914], 'true,false': [9.769962616701378e-17, 0.23615916955017321], 'true,false,false': [0.23615916955017321, nan], 'false': [2.577303450022685e-17, nan]}, {'': [0.09612432887359586, -1.734723475976807e-17], 'true': [0.09612432887359586, nan], 'true,true': [7.993605777301127e-17, 0.22375024344070393], 'true,true,false': [0.22375024344070393, nan], 'true,true,true': [nan, 7.993605777301127e-17]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, D).;true;true
4;true,false;genre(A, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(A, D).;true;true
5;true,false;genre(B, E).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, D).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
8;true,false;genre(B, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995113;  // std dev = 4.13e-07, 100.000 (wgt'ed) examples reached here.  /* #pos=100 */
%   | | else if ( actor(B) )
%   | | | then return -0.1418510649004877;  // std dev = 2.11e-08, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | | else return 0.8581489350995118;  // std dev = 2.38e-07, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   else return -0.14185106490048763;  // std dev = 7.88e-08, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109544;  // std dev = 0.000, 100.000 (wgt'ed) examples reached here.  /* #pos=100 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( actor(B) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | | else return 0.719473412210955;  // std dev = 0.000, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   else return -0.12544463852839133;  // std dev = 0.000, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( director(B) )
%   | | then return 0.5553664367462834;  // std dev = 4.99e-07, 142.000 (wgt'ed) examples reached here.  /* #pos=142 */
%   | | else return -0.11231637819360639;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   else return -0.11231637819360618;  // std dev = 8.69e-08, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4175135841583098;  // std dev = 2.46e-07, 100.000 (wgt'ed) examples reached here.  /* #pos=100 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( actor(B) )
%   | | | then return -0.10159632948783635;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | | else return 0.41751358415831047;  // std dev = 0.000, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   else return -0.10159632948783634;  // std dev = 0.000, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.3207118471601504;  // std dev = 4.21e-08, 100.000 (wgt'ed) examples reached here.  /* #pos=100 */
%   | else if ( genre(A, E) )
%   | | then return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( actor(B) )
%   | | | then return -0.09269127618926096;  // std dev = 7.45e-09, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | | else return 0.32071184716014944;  // std dev = 2.98e-08, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   else return -0.09269127618926087;  // std dev = 6.75e-08, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.2551722425694897;  // std dev = 0.000, 100.000 (wgt'ed) examples reached here.  /* #pos=100 */
%   | | else if ( actor(B) )
%   | | | then return -0.08518475138839682;  // std dev = 1.75e-08, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | | else return 0.2551722425694896;  // std dev = 0.000, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   else return -0.0851847513883968;  // std dev = 6.05e-08, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.20975771563253562;  // std dev = 1.37e-07, 100.000 (wgt'ed) examples reached here.  /* #pos=100 */
%   | else if ( actor(B) )
%   | | then return -0.07877675473109176;  // std dev = 0.000, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | else return 0.20975771563253545;  // std dev = 5.96e-08, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   else return -0.07877675473109157;  // std dev = 6.50e-08, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17709649774527725;  // std dev = 6.66e-08, 100.000 (wgt'ed) examples reached here.  /* #pos=100 */
%   | else if ( genre(A, E) )
%   | | then return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( actor(B) )
%   | | | then return -0.07324622576333704;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | | else return 0.17709649774527753;  // std dev = 0.000, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   else return -0.07324622576333709;  // std dev = 0.000, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.15274385809367133;  // std dev = 0.000, 100.000 (wgt'ed) examples reached here.  /* #pos=100 */
%   | | else if ( actor(B) )
%   | | | then return -0.06842697784420276;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | | else return 0.15274385809367083;  // std dev = 0.000, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   else return -0.06842697784420264;  // std dev = 5.37e-08, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13400703000801115;  // std dev = 3.65e-08, 100.000 (wgt'ed) examples reached here.  /* #pos=100 */
%   | else if ( actor(B) )
%   | | then return -0.06419184008202622;  // std dev = 0.000, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | else return 0.13400703000801106;  // std dev = 2.11e-08, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   else return -0.06419184008202626;  // std dev = 0.000, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.128 seconds
Total inference time: 0.822 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.699 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 5.248 seconds
Total inference time: 0.822 seconds
AUC ROC: 1.0
Total revision time: 5.248
Best scored revision CLL: -0.094637


Dataset: 4_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 03:31:41
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.094637, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 5.248, 'Inference time': 0.822, 'parameter_0.8': {'AUC ROC': 0.994233, 'AUC PR': 0.994929, 'CLL': -0.201992, 'Precision': [0.809524, 0.5], 'Recall': 1.0, 'F1': 0.894737, 'Learning time': 1.625, 'Inference time': 0.872}}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
3;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
3;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
3;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordauthor(D, C).;true;true
4;true,true;author(E, D), venue(E, B).;false;true
4;true,true,false;haswordtitle(F, C).;false;false
4;true,false;haswordtitle(G, C).;true;true
4;true,false,true;title(H, G), venue(H, A).;false;false
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(A, K), haswordtitle(L, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(B, I), haswordauthor(J, I).;false;false
5;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, B).;false;true
6;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
6;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
6;true,false,true;title(J, I), venue(J, B).;false;false
6;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
6;false;haswordvenue(A, M), haswordauthor(N, M).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
7;true,false,true;title(I, H), venue(I, B).;false;false
7;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
7;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;title(F, D), venue(F, B).;false;false
8;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
8;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
8;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;haswordvenue(A, D).;false;false
9;true,false;haswordtitle(H, C).;true;true
9;true,false,true;title(I, H), venue(I, B).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995104;  // std dev = 7.54e-07, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.47064893509951294;  // std dev = 4.357, 80.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.141851064900488;  // std dev = 0.000, 141.000 (wgt'ed) examples reached here.  /* #neg=141 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109555;  // std dev = 0.000, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.40323327305327894;  // std dev = 4.357, 80.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839122;  // std dev = 6.66e-08, 141.000 (wgt'ed) examples reached here.  /* #neg=141 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( movie(E, A) )
%   | | then return 0.4686374681566149;  // std dev = 0.321, 209.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=178 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360615;  // std dev = 1.04e-07, 141.000 (wgt'ed) examples reached here.  /* #neg=141 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.43874429906355045;  // std dev = 0.000, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783627;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.22491626893863154;  // std dev = 4.357, 80.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783644;  // std dev = 0.000, 141.000 (wgt'ed) examples reached here.  /* #neg=141 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.33514535278157104;  // std dev = 0.000, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else if ( genre(A, E) )
%   | | then return -0.09269127618926097;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.17038037187507196;  // std dev = 4.357, 80.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.09269127618926074;  // std dev = 8.30e-08, 141.000 (wgt'ed) examples reached here.  /* #neg=141 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.26499828713551926;  // std dev = 0.000, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.1280409132281683;  // std dev = 4.357, 80.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0851847513883968;  // std dev = 5.89e-09, 141.000 (wgt'ed) examples reached here.  /* #neg=141 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.21667523603044442;  // std dev = 1.79e-07, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08384500831863663;  // std dev = 4.377, 86.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=49 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109153;  // std dev = 7.88e-08, 141.000 (wgt'ed) examples reached here.  /* #neg=141 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1821537886367016;  // std dev = 1.26e-07, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else if ( genre(A, E) )
%   | | then return -0.08508040548119324;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.07514417865159857;  // std dev = 4.357, 80.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333727;  // std dev = 0.000, 141.000 (wgt'ed) examples reached here.  /* #neg=141 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07868714739230952;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.15656959558632302;  // std dev = 1.40e-07, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.05652402357684884;  // std dev = 4.357, 80.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420264;  // std dev = 6.41e-08, 141.000 (wgt'ed) examples reached here.  /* #neg=141 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.13698668661683147;  // std dev = 2.11e-08, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | else if ( movie(D, A) )
%   | | | then return 0.03453971146494787;  // std dev = 4.366, 86.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202626;  // std dev = 0.000, 141.000 (wgt'ed) examples reached here.  /* #neg=141 */


Results
   AUC ROC   = 0.994233
   AUC PR    = 0.994929
   CLL	      = -0.200689
   Precision = 0.809524 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.894737


Total learning time: 1.565 seconds
Total inference time: 0.869 seconds
AUC ROC: 0.994233


Results scoring model
   AUC ROC   = 0.976029
   AUC PR    = 0.976327
   CLL	      = -0.223559
   Precision = 0.851675 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.919897


Total scoring time: 0.798 seconds
Parameter learned model CLL: -0.223559


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 6, 0], 'true,false,true': [7.54e-07, 0, 129], 'true,false,false,true': [4.357, 31, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 141, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 129], 'true,false,true': [0.0, 6, 0], 'true,false,false,true': [4.357, 31, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [6.66e-08, 141, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 6, 0], 'true,false,true': [0.321, 31, 178], 'true,false,false': [0.0, 0, 0], 'false,true': [1.04e-07, 141, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 129], 'true,false,true': [0.0, 6, 0], 'true,false,false,true': [4.357, 31, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 141, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 129], 'true,false,true': [2.63e-09, 6, 0], 'true,false,false,true': [4.357, 31, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.3e-08, 141, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [2.63e-09, 6, 0], 'true,false,true': [0.0, 0, 129], 'true,false,false,true': [4.357, 31, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.89e-09, 141, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [1.79e-07, 0, 129], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [4.377, 37, 49], 'true,false,false': [0.0, 0, 0], 'false,true': [7.88e-08, 141, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.26e-07, 0, 129], 'true,false,true': [2.63e-09, 6, 0], 'true,false,false,true': [4.357, 31, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 141, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 6, 0], 'true,false,true': [1.4e-07, 0, 129], 'true,false,false,true': [4.357, 31, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [6.41e-08, 141, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'movie(D, A)'}, {'true,true,true,true': [0.0, 0, 0], 'true,true,true,false': [2.11e-08, 0, 129], 'true,true,false,true': [4.366, 37, 49], 'true,true,false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false': [0.0, 141, 0]}]]
[{'': [0.14247701460249396, -8.188879046880587e-17], 'true': [-6.938893903907228e-18, 0.12632494677320283], 'true,false': [4.40646657835721e-15, 0.23734375000000005], 'true,false,false': [0.23734375000000005, nan], 'false': [-8.188879046880587e-17, nan]}, {'': [0.12549705963012422, 3.1495688641848415e-17], 'true': [-1.7625866313428842e-15, 0.23892444029384757], 'true,false': [-2.3129646346357427e-18, 0.23734375000000069], 'true,false,false': [0.23734375000000069, nan], 'false': [3.1495688641848415e-17, nan]}, {'': [0.10926051351979352, 7.716443717252861e-17], 'true': [0.0, 0.10297836860976305], 'true,false': [0.10297836860976305, nan], 'false': [7.716443717252861e-17, nan]}, {'': [0.10451755972075097, -4.881831739486504e-17], 'true': [-2.2032332891786052e-16, 0.22770389790792098], 'true,false': [0.0, 0.2373437500000008], 'true,false,false': [0.2373437500000008, nan], 'false': [-4.881831739486504e-17, nan]}, {'': [0.09815835797339396, 4.881831739486504e-17], 'true': [-3.5802540949152334e-16, 0.22527639428979665], 'true,false': [1.1564823173178713e-18, 0.23734375000000002], 'true,false,false': [0.23734375000000002, nan], 'false': [4.881831739486504e-17, nan]}, {'': [0.09502705355002383, 3.622004193812568e-17], 'true': [1.1564823173178713e-18, 0.09528085588245756], 'true,false': [-5.508083222946513e-17, 0.23734375000000033], 'true,false,false': [0.23734375000000033, nan], 'false': [3.622004193812568e-17, nan]}, {'': [0.09334185727744707, 4.409396409858778e-17], 'true': [2.478637450325931e-16, 0.22276832155723533], 'true,false': [0.22276832155723533, nan], 'true,false,true': [nan, 0.22276832155723533], 'false': [4.409396409858778e-17, nan]}, {'': [0.09233281664410033, -2.2834374265340098e-17], 'true': [1.2393187251629654e-16, 0.22245098976920644], 'true,false': [1.1564823173178713e-18, 0.23734374999999983], 'true,false,false': [0.23734374999999983, nan], 'false': [-2.2834374265340098e-17, nan]}, {'': [0.09166510698113639, 2.913351199370978e-17], 'true': [-1.1564823173178713e-18, 0.09321401941485337], 'true,false': [1.514722886310291e-16, 0.23734374999999996], 'true,false,false': [0.23734374999999996, nan], 'false': [2.913351199370978e-17, nan]}, {'': [0.09118087701581824, -1.2598275456739365e-17], 'true': [0.09118087701581824, nan], 'true,true': [3.4425520143415706e-18, 0.22165496290888317], 'true,true,false': [0.22165496290888317, nan], 'true,true,true': [nan, 3.4425520143415706e-18]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, D).;true;true
4;true,false;genre(A, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(A, D).;true;true
5;true,false;genre(B, E).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, D).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
8;true,false;genre(B, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995104;  // std dev = 7.54e-07, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | else if ( actor(B) )
%   | | | then return -0.1418510649004877;  // std dev = 2.79e-08, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | | else return 0.8581489350995122;  // std dev = 1.69e-07, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   else return -0.141851064900488;  // std dev = 0.000, 141.000 (wgt'ed) examples reached here.  /* #neg=141 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109555;  // std dev = 0.000, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( actor(B) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | | else return 0.7194734122109547;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   else return -0.12544463852839122;  // std dev = 6.66e-08, 141.000 (wgt'ed) examples reached here.  /* #neg=141 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( actor(B) )
%   | | then return -0.11231637819360642;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | else return 0.5553664367462833;  // std dev = 5.72e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   else return -0.11231637819360615;  // std dev = 1.04e-07, 141.000 (wgt'ed) examples reached here.  /* #neg=141 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4175135841583092;  // std dev = 3.77e-07, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783627;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( actor(B) )
%   | | | then return -0.10159632948783635;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | | else return 0.41751358415831047;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   else return -0.10159632948783644;  // std dev = 0.000, 141.000 (wgt'ed) examples reached here.  /* #neg=141 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.3207118471601498;  // std dev = 2.49e-07, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else if ( genre(A, E) )
%   | | then return -0.09269127618926097;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( actor(B) )
%   | | | then return -0.09269127618926098;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | | else return 0.32071184716014944;  // std dev = 2.98e-08, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   else return -0.09269127618926074;  // std dev = 8.30e-08, 141.000 (wgt'ed) examples reached here.  /* #neg=141 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.2551722425694898;  // std dev = 4.21e-08, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | else if ( actor(B) )
%   | | | then return -0.0851847513883968;  // std dev = 2.04e-08, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | | else return 0.2551722425694896;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   else return -0.0851847513883968;  // std dev = 7.15e-08, 141.000 (wgt'ed) examples reached here.  /* #neg=141 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.20975771563253534;  // std dev = 2.09e-07, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else if ( actor(B) )
%   | | then return -0.07877675473109179;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | else return 0.20975771563253554;  // std dev = 4.21e-08, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   else return -0.07877675473109153;  // std dev = 7.88e-08, 141.000 (wgt'ed) examples reached here.  /* #neg=141 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17709649774527814;  // std dev = 0.000, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else if ( genre(A, E) )
%   | | then return -0.07324622576333704;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( actor(B) )
%   | | | then return -0.07324622576333704;  // std dev = 7.45e-09, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | | else return 0.17709649774527744;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   else return -0.07324622576333727;  // std dev = 0.000, 141.000 (wgt'ed) examples reached here.  /* #neg=141 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.06842697784420272;  // std dev = 1.86e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.15274385809367141;  // std dev = 0.000, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | else if ( actor(B) )
%   | | | then return -0.06842697784420275;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | | else return 0.15274385809367083;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   else return -0.06842697784420264;  // std dev = 6.41e-08, 141.000 (wgt'ed) examples reached here.  /* #neg=141 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13400703000801106;  // std dev = 5.58e-08, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else if ( actor(B) )
%   | | then return -0.06419184008202623;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | else return 0.134007030008011;  // std dev = 2.98e-08, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   else return -0.06419184008202626;  // std dev = 0.000, 141.000 (wgt'ed) examples reached here.  /* #neg=141 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.563 seconds
Total inference time: 0.788 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.844 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 5.7700000000000005 seconds
Total inference time: 0.788 seconds
AUC ROC: 1.0
Total revision time: 5.7700000000000005
Best scored revision CLL: -0.094637


Dataset: 4_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 03:31:49
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.094637, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 5.7700000000000005, 'Inference time': 0.788, 'parameter_1.0': {'AUC ROC': 0.994233, 'AUC PR': 0.994929, 'CLL': -0.200689, 'Precision': [0.809524, 0.5], 'Recall': 1.0, 'F1': 0.894737, 'Learning time': 1.565, 'Inference time': 0.869}}


Starting fold 4

Target train facts examples: 151
Target train pos examples: 45
Target train neg examples: 45

Target test facts examples: 927
Target test pos	 examples: 337
Target test neg examples: 337

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
3;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
3;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
3;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordauthor(D, C).;true;true
4;true,true;author(E, D), venue(E, B).;false;true
4;true,true,false;haswordtitle(F, C).;false;false
4;true,false;haswordtitle(G, C).;true;true
4;true,false,true;title(H, G), venue(H, A).;false;false
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(A, K), haswordtitle(L, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(B, I), haswordauthor(J, I).;false;false
5;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, B).;false;true
6;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
6;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
6;true,false,true;title(J, I), venue(J, B).;false;false
6;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
6;false;haswordvenue(A, M), haswordauthor(N, M).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
7;true,false,true;title(I, H), venue(I, B).;false;false
7;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
7;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;title(F, D), venue(F, B).;false;false
8;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
8;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
8;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;haswordvenue(A, D).;false;false
9;true,false;haswordtitle(H, C).;true;true
9;true,false,true;title(I, H), venue(I, B).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109543;  // std dev = 2.98e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.38844573301131197;  // std dev = 0.289, 12.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.45857813264297054;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return -0.15724781181727557;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783627;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.34872548173646933;  // std dev = 1.49e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return -0.13751345496256326;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.09269127618926097;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.27420896229476227;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.12200153302082763;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.08518475138839687;  // std dev = 9.31e-10, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2231192196306559;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10952396856408497;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109173;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18683625947582927;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return -0.09929015573397787;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.16009301868318604;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.0907569905524312;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 1.86e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.13971859884545523;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( movie(D, A) )
%   | | | then return -0.08354068735946622;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.0641918400820262;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */


Results
   AUC ROC   = 0.976362
   AUC PR    = 0.978237
   CLL	      = -0.31262
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.824926
   F1        = 0.904065


Total learning time: 0.968 seconds
Total inference time: 1.038 seconds
AUC ROC: 0.976362


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.100256
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.44 seconds
Parameter learned model CLL: -0.100256


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 9], 'true,false,false,true': [0.0, 3, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 6, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [2.98e-08, 0, 9], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 3, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 6, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.289, 3, 9], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 6, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 9], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 3, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 6, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [1.49e-08, 0, 9], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [2.63e-09, 3, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.63e-09, 6, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 9], 'true,false,false,true': [0.0, 3, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.31e-10, 6, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 9], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.0, 3, 0], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 6, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 9], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 3, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 6, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 9], 'true,false,false,true': [0.0, 3, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.86e-09, 6, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'movie(D, A)'}, {'true,true,true,true': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 9], 'true,true,false,true': [1.86e-09, 3, 0], 'true,true,false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false': [0.0, 6, 0]}]]
[{'': [0.18749999999999978, -6.938893903907228e-18], 'true': [nan, 0.18749999999999978], 'true,false': [-2.9605947323337506e-16, 0.0], 'true,false,false': [0.0, nan], 'false': [-6.938893903907228e-18, nan]}, {'': [0.1338537210872204, -2.3129646346357427e-18], 'true': [9.868649107779169e-17, 0.0], 'true,false': [nan, 0.0], 'true,false,false': [0.0, nan], 'false': [-2.3129646346357427e-18, nan]}, {'': [0.08358756400613548, 0.0], 'true': [nan, 0.08358756400613548], 'true,false': [0.08358756400613548, nan], 'false': [0.0, nan]}, {'': [0.07110779885069139, 0.0], 'true': [-4.9343245538895844e-17, -4.625929269271485e-18], 'false': [0.0, nan], 'true,false': [nan, -4.625929269271485e-18], 'true,false,false': [-4.625929269271485e-18, nan]}, {'': [0.04433030691791361, 1.1564823173178713e-18], 'true': [2.4671622769447922e-17, 2.3129646346357427e-18], 'true,false': [nan, 2.3129646346357427e-18], 'true,false,false': [2.3129646346357427e-18, nan], 'false': [1.1564823173178713e-18, nan]}, {'': [0.029434266862167168, 1.1564823173178713e-18], 'true': [nan, 0.029434266862167168], 'true,false': [-3.700743415417188e-17, 0.0], 'false': [1.1564823173178713e-18, nan], 'true,false,false': [0.0, nan]}, {'': [0.02074715449731782, -1.1564823173178713e-18], 'true': [-2.4671622769447922e-17, -2.3129646346357427e-18], 'false': [-1.1564823173178713e-18, nan], 'true,false': [-2.3129646346357427e-18, nan], 'true,false,true': [nan, -2.3129646346357427e-18]}, {'': [0.015350311027652797, 0.0], 'true': [-6.1679056923619804e-18, -1.1564823173178713e-18], 'false': [0.0, nan], 'true,false': [nan, -1.1564823173178713e-18], 'true,false,false': [-1.1564823173178713e-18, nan]}, {'': [0.011798573837532985, 5.782411586589357e-19], 'true': [nan, 0.011798573837532985], 'true,false': [0.0, 0.0], 'false': [5.782411586589357e-19, nan], 'true,false,false': [0.0, nan]}, {'': [0.009345882914387064, -5.782411586589357e-19], 'true': [0.009345882914387064, nan], 'true,true': [0.0, 1.1564823173178713e-18], 'true,true,false': [1.1564823173178713e-18, nan], 'true,true,true': [nan, 0.0]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, D).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, E).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, D).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109543;  // std dev = 2.98e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.11231637819360639;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.5553664367462846;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.11231637819360639;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.41751358415830986;  // std dev = 3.33e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.1015963294878363;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.10159632948783627;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.3207118471601497;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.09269127618926094;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.09269127618926097;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2551722425694894;  // std dev = 1.83e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.08518475138839687;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.08518475138839687;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2097577156325356;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.07877675473109173;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.07877675473109173;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17709649774527736;  // std dev = 7.45e-09, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.07324622576333704;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.07324622576333704;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15274385809367097;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.06842697784420272;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.06842697784420272;  // std dev = 1.86e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13400703000801117;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.0641918400820262;  // std dev = 1.32e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.0641918400820262;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.275601
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.824926
   F1        = 0.904065


Total learning time: 0.929 seconds
Total inference time: 0.864 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.442 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.275601
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.824926
   F1        = 0.904065


Total learning time: 2.779 seconds
Total inference time: 0.864 seconds
AUC ROC: 1.0
Total revision time: 2.779
Best scored revision CLL: -0.094637


Dataset: 4_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 03:31:54
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.275601, 'Precision': [1.0, 0.5], 'Recall': 0.824926, 'F1': 0.904065, 'Learning time': 2.779, 'Inference time': 0.864, 'parameter_0.2': {'AUC ROC': 0.976362, 'AUC PR': 0.978237, 'CLL': -0.31262, 'Precision': [1.0, 0.5], 'Recall': 0.824926, 'F1': 0.904065, 'Learning time': 0.968, 'Inference time': 1.038}}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
3;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
3;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
3;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordauthor(D, C).;true;true
4;true,true;author(E, D), venue(E, B).;false;true
4;true,true,false;haswordtitle(F, C).;false;false
4;true,false;haswordtitle(G, C).;true;true
4;true,false,true;title(H, G), venue(H, A).;false;false
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(A, K), haswordtitle(L, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(B, I), haswordauthor(J, I).;false;false
5;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, B).;false;true
6;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
6;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
6;true,false,true;title(J, I), venue(J, B).;false;false
6;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
6;false;haswordvenue(A, M), haswordauthor(N, M).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
7;true,false,true;title(I, H), venue(I, B).;false;false
7;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
7;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;title(F, D), venue(F, B).;false;false
8;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
8;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
8;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;haswordvenue(A, D).;false;false
9;true,false;haswordtitle(H, C).;true;true
9;true,false,true;title(I, H), venue(I, B).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109542;  // std dev = 7.30e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.4339695613026681;  // std dev = 0.258, 22.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=18 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360636;  // std dev = 1.18e-08, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4472985017782668;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return -0.16337522243222216;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1015963294878363;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.34098890949148;  // std dev = 2.98e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return -0.14225308019409186;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.09269127618926096;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.26896514918272724;  // std dev = 2.98e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.12576276667507458;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.08518475138839686;  // std dev = 2.28e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2194551240975842;  // std dev = 3.33e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11257371458115872;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109172;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18417708636111735;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return -0.10180838784869307;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333704;  // std dev = 3.73e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.15809425245146652;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.09286880287113371;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 3.73e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.13817027297614848;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( movie(D, A) )
%   | | | then return -0.08533539607416461;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202619;  // std dev = 6.97e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */


Results
   AUC ROC   = 0.976362
   AUC PR    = 0.978237
   CLL	      = -0.310474
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.824926
   F1        = 0.904065


Total learning time: 0.998 seconds
Total inference time: 0.873 seconds
AUC ROC: 0.976362


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.098731
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.538 seconds
Parameter learned model CLL: -0.098731


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 18], 'true,false,false,true': [0.0, 4, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [7.3e-08, 0, 18], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 4, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.45e-09, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.258, 4, 18], 'true,false,false': [0.0, 0, 0], 'false,true': [1.18e-08, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 18], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 4, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [2.98e-08, 0, 18], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 4, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.45e-09, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [2.98e-08, 0, 18], 'true,false,false,true': [0.0, 4, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.28e-09, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [3.33e-08, 0, 18], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.0, 4, 0], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 18], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 4, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.73e-09, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 18], 'true,false,false,true': [0.0, 4, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.73e-09, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'movie(D, A)'}, {'true,true,true,true': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 18], 'true,true,false,true': [0.0, 4, 0], 'true,true,false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false': [6.97e-09, 14, 0]}]]
[{'': [0.148760330578512, -1.1895246692412391e-17], 'true': [nan, 0.148760330578512], 'true,false': [-2.9605947323337506e-16, 0.0], 'true,false,false': [0.0, nan], 'false': [-1.1895246692412391e-17, nan]}, {'': [0.1061979935898608, 3.96508223080413e-18], 'true': [2.9605947323337506e-16, 0.0], 'false': [3.96508223080413e-18, nan], 'true,false': [nan, 0.0], 'true,false,false': [0.0, nan]}, {'': [0.06631740615362797, 9.912705577010326e-18], 'true': [nan, 0.06631740615362797], 'true,false': [0.06631740615362797, nan], 'false': [9.912705577010326e-18, nan]}, {'': [0.05547605912347058, -3.96508223080413e-18], 'true': [-9.868649107779169e-17, 0.0], 'true,false': [nan, 0.0], 'true,false,false': [0.0, nan], 'false': [-3.96508223080413e-18, nan]}, {'': [0.0347389319893791, 3.96508223080413e-18], 'true': [4.9343245538895844e-17, 0.0], 'false': [3.96508223080413e-18, nan], 'true,false': [nan, 0.0], 'true,false,false': [0.0, nan]}, {'': [0.02317836608292557, 4.956352788505163e-18], 'true': [nan, 0.02317836608292557], 'true,false': [4.9343245538895844e-17, 0.0], 'false': [4.956352788505163e-18, nan], 'true,false,false': [0.0, nan]}, {'': [0.0163998073955239, -9.912705577010326e-19], 'true': [6.167905692361981e-17, 0.0], 'true,false': [0.0, nan], 'true,false,true': [nan, 0.0], 'false': [-9.912705577010326e-19, nan]}, {'': [0.012166764018695715, 9.912705577010326e-19], 'true': [-1.2335811384723961e-17, 0.0], 'false': [9.912705577010326e-19, nan], 'true,false': [nan, 0.0], 'true,false,false': [0.0, nan]}, {'': [0.00936929084680479, 9.912705577010326e-19], 'true': [nan, 0.00936929084680479], 'true,false': [-1.5419764230904953e-17, 0.0], 'false': [9.912705577010326e-19, nan], 'true,false,false': [0.0, nan]}, {'': [0.007431290196341364, 3.469446951953614e-18], 'true': [0.007431290196341364, nan], 'true,true': [-6.1679056923619804e-18, 0.0], 'true,true,false': [0.0, nan], 'true,true,true': [nan, -6.1679056923619804e-18]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, D).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, E).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, D).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109542;  // std dev = 7.30e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.12544463852839138;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.5553664367462846;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else return -0.11231637819360636;  // std dev = 1.18e-08, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4175135841583098;  // std dev = 5.58e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.1015963294878363;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.3207118471601496;  // std dev = 2.11e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.09269127618926096;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.25517224256948945;  // std dev = 1.49e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.08518475138839686;  // std dev = 8.33e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.20975771563253562;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.07877675473109172;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17709649774527744;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.07324622576333704;  // std dev = 3.73e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1527438580936708;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.06842697784420272;  // std dev = 3.73e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13400703000801117;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.06419184008202619;  // std dev = 6.97e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.275601
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.824926
   F1        = 0.904065


Total learning time: 0.975 seconds
Total inference time: 0.949 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.465 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.275601
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.824926
   F1        = 0.904065


Total learning time: 2.976 seconds
Total inference time: 0.949 seconds
AUC ROC: 1.0
Total revision time: 2.976
Best scored revision CLL: -0.094637


Dataset: 4_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 03:32:00
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.275601, 'Precision': [1.0, 0.5], 'Recall': 0.824926, 'F1': 0.904065, 'Learning time': 2.976, 'Inference time': 0.949, 'parameter_0.4': {'AUC ROC': 0.976362, 'AUC PR': 0.978237, 'CLL': -0.310474, 'Precision': [1.0, 0.5], 'Recall': 0.824926, 'F1': 0.904065, 'Learning time': 0.998, 'Inference time': 0.873}}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
3;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
3;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
3;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordauthor(D, C).;true;true
4;true,true;author(E, D), venue(E, B).;false;true
4;true,true,false;haswordtitle(F, C).;false;false
4;true,false;haswordtitle(G, C).;true;true
4;true,false,true;title(H, G), venue(H, A).;false;false
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(A, K), haswordtitle(L, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(B, I), haswordauthor(J, I).;false;false
5;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, B).;false;true
6;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
6;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
6;true,false,true;title(J, I), venue(J, B).;false;false
6;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
6;false;haswordvenue(A, M), haswordauthor(N, M).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
7;true,false,true;title(I, H), venue(I, B).;false;false
7;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
7;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;title(F, D), venue(F, B).;false;false
8;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
8;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
8;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;haswordvenue(A, D).;false;false
9;true,false;haswordtitle(H, C).;true;true
9;true,false,true;title(I, H), venue(I, B).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995118;  // std dev = 1.58e-07, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048774;  // std dev = 1.05e-08, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.43396956130266817;  // std dev = 0.258, 33.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=27 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360636;  // std dev = 1.29e-08, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.44729850177826685;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return -0.16337522243222216;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783634;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.34098890949148003;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return -0.14225308019409186;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.09269127618926103;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.26896514918272724;  // std dev = 4.21e-08, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.12576276667507458;  // std dev = 3.73e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.08518475138839683;  // std dev = 2.95e-09, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2194551240975843;  // std dev = 1.49e-08, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11257371458115872;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109179;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18417708636111738;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return -0.10180838784869307;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.15809425245146652;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.09286880287113371;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420275;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.13817027297614848;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else if ( movie(D, A) )
%   | | | then return -0.08533539607416461;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.0641918400820262;  // std dev = 5.27e-09, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */


Results
   AUC ROC   = 0.976362
   AUC PR    = 0.978237
   CLL	      = -0.310474
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.824926
   F1        = 0.904065


Total learning time: 1.041 seconds
Total inference time: 1.024 seconds
AUC ROC: 0.976362


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.098731
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.62 seconds
Parameter learned model CLL: -0.098731


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [1.58e-07, 0, 27], 'true,false,false,true': [0.0, 6, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.05e-08, 21, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 27], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 6, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 21, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.258, 6, 27], 'true,false,false': [0.0, 0, 0], 'false,true': [1.29e-08, 21, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 27], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 6, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 21, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 27], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 6, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 21, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [4.21e-08, 0, 27], 'true,false,false,true': [3.73e-09, 6, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.95e-09, 21, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [1.49e-08, 0, 27], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.0, 6, 0], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 21, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 27], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [2.63e-09, 6, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 21, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 27], 'true,false,false,true': [0.0, 6, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 21, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'movie(D, A)'}, {'true,true,true,true': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 27], 'true,true,false,true': [2.63e-09, 6, 0], 'true,true,false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false': [5.27e-09, 21, 0]}]]
[{'': [0.14876033057851368, 5.28677630773884e-18], 'true': [nan, 0.14876033057851368], 'true,false': [9.210739167260557e-16, -6.938893903907228e-18], 'false': [5.28677630773884e-18, nan], 'true,false,false': [-6.938893903907228e-18, nan]}, {'': [0.10619799358986087, -2.64338815386942e-18], 'true': [-2.631639762074445e-16, -2.3129646346357427e-18], 'true,false': [nan, -2.3129646346357427e-18], 'true,false,false': [-2.3129646346357427e-18, nan], 'false': [-2.64338815386942e-18, nan]}, {'': [0.06631740615362809, 7.93016446160826e-18], 'true': [nan, 0.06631740615362809], 'true,false': [0.06631740615362809, nan], 'false': [7.93016446160826e-18, nan]}, {'': [0.055476059123470645, -2.64338815386942e-18], 'true': [-6.579099405186112e-17, 0.0], 'true,false': [nan, 0.0], 'true,false,false': [0.0, nan], 'false': [-2.64338815386942e-18, nan]}, {'': [0.034738931989379024, -7.93016446160826e-18], 'true': [-4.9343245538895844e-17, -2.3129646346357427e-18], 'true,false': [nan, -2.3129646346357427e-18], 'true,false,false': [-2.3129646346357427e-18, nan], 'false': [-7.93016446160826e-18, nan]}, {'': [0.023178366082925592, 1.057355261547768e-17], 'true': [nan, 0.023178366082925592], 'true,false': [6.579099405186112e-17, 2.3129646346357427e-18], 'false': [1.057355261547768e-17, nan], 'true,false,false': [2.3129646346357427e-18, nan]}, {'': [0.01639980739552388, 0.0], 'true': [8.22387425648264e-18, 0.0], 'false': [0.0, nan], 'true,false': [0.0, nan], 'true,false,true': [nan, 0.0]}, {'': [0.012166764018695682, -1.32169407693471e-18], 'true': [-3.289549702593056e-17, 1.1564823173178713e-18], 'true,false': [nan, 1.1564823173178713e-18], 'true,false,false': [1.1564823173178713e-18, nan], 'false': [-1.32169407693471e-18, nan]}, {'': [0.009369290846804783, -2.64338815386942e-18], 'true': [nan, 0.009369290846804783], 'true,false': [-1.2335811384723961e-17, -1.1564823173178713e-18], 'true,false,false': [-1.1564823173178713e-18, nan], 'false': [-2.64338815386942e-18, nan]}, {'': [0.007431290196341376, 1.32169407693471e-18], 'true': [0.007431290196341376, nan], 'true,true': [-4.11193712824132e-18, 1.1564823173178713e-18], 'true,true,false': [1.1564823173178713e-18, nan], 'true,true,true': [nan, -4.11193712824132e-18]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, D).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, E).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, D).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.8581489350995118;  // std dev = 1.58e-07, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.14185106490048774;  // std dev = 1.05e-08, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.12544463852839138;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.5553664367462846;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   else return -0.11231637819360636;  // std dev = 1.29e-08, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.41751358415831;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else return -0.10159632948783627;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.10159632948783634;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.3207118471601494;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else return -0.09269127618926097;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.09269127618926103;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.25517224256948956;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else return -0.08518475138839687;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.08518475138839683;  // std dev = 1.49e-08, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2097577156325355;  // std dev = 2.98e-08, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else return -0.07877675473109173;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.07877675473109179;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17709649774527747;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.07324622576333704;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15274385809367083;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else return -0.06842697784420272;  // std dev = 1.86e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.06842697784420275;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13400703000801117;  // std dev = 7.45e-09, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else return -0.0641918400820262;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.0641918400820262;  // std dev = 5.27e-09, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.275601
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.824926
   F1        = 0.904065


Total learning time: 0.939 seconds
Total inference time: 0.888 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.544 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.275601
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.824926
   F1        = 0.904065


Total learning time: 3.144 seconds
Total inference time: 0.888 seconds
AUC ROC: 1.0
Total revision time: 3.144
Best scored revision CLL: -0.094637


Dataset: 4_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 03:32:05
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.275601, 'Precision': [1.0, 0.5], 'Recall': 0.824926, 'F1': 0.904065, 'Learning time': 3.144, 'Inference time': 0.888, 'parameter_0.6': {'AUC ROC': 0.976362, 'AUC PR': 0.978237, 'CLL': -0.310474, 'Precision': [1.0, 0.5], 'Recall': 0.824926, 'F1': 0.904065, 'Learning time': 1.041, 'Inference time': 1.024}}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
3;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
3;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
3;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordauthor(D, C).;true;true
4;true,true;author(E, D), venue(E, B).;false;true
4;true,true,false;haswordtitle(F, C).;false;false
4;true,false;haswordtitle(G, C).;true;true
4;true,false,true;title(H, G), venue(H, A).;false;false
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(A, K), haswordtitle(L, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(B, I), haswordauthor(J, I).;false;false
5;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, B).;false;true
6;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
6;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
6;true,false,true;title(J, I), venue(J, B).;false;false
6;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
6;false;haswordvenue(A, M), haswordauthor(N, M).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
7;true,false,true;title(I, H), venue(I, B).;false;false
7;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
7;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;title(F, D), venue(F, B).;false;false
8;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
8;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
8;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;haswordvenue(A, D).;false;false
9;true,false;haswordtitle(H, C).;true;true
9;true,false,true;title(I, H), venue(I, B).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995115;  // std dev = 2.53e-07, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004877;  // std dev = 2.58e-08, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109548;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.43396956130266756;  // std dev = 0.258, 44.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=36 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.1123163781936064;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4472985017782668;  // std dev = 4.21e-08, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return -0.16337522243222205;  // std dev = 7.45e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783635;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.3409889094914805;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return -0.1422530801940918;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.09269127618926097;  // std dev = 5.27e-09, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.2689651491827274;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.1257627666750745;  // std dev = 5.27e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0851847513883968;  // std dev = 3.73e-09, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2194551240975844;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11257371458115872;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109179;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18417708636111715;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return -0.10180838784869305;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333704;  // std dev = 5.27e-09, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.15809425245146644;  // std dev = 2.36e-08, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.09286880287113372;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420276;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1381702729761486;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else if ( movie(D, A) )
%   | | | then return -0.0853353960741646;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202623;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */


Results
   AUC ROC   = 0.976362
   AUC PR    = 0.978237
   CLL	      = -0.310474
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.824926
   F1        = 0.904065


Total learning time: 1.057 seconds
Total inference time: 0.906 seconds
AUC ROC: 0.976362


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.098731
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.554 seconds
Parameter learned model CLL: -0.098731


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [2.53e-07, 0, 36], 'true,false,false,true': [0.0, 8, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.58e-08, 28, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 36], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 8, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 28, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.258, 8, 36], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 28, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [4.21e-08, 0, 36], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [7.45e-09, 8, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 28, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 36], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 8, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.27e-09, 28, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 36], 'true,false,false,true': [5.27e-09, 8, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.73e-09, 28, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 36], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.0, 8, 0], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 28, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 36], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 8, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.27e-09, 28, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [2.36e-08, 0, 36], 'true,false,false,true': [0.0, 8, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 28, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'movie(D, A)'}, {'true,true,true,true': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 36], 'true,true,false,true': [0.0, 8, 0], 'true,true,false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false': [0.0, 28, 0]}]]
[{'': [0.1487603305785142, 2.3790493384824782e-17], 'true': [nan, 0.1487603305785142], 'true,false': [1.7763568394002505e-15, -6.938893903907228e-18], 'false': [2.3790493384824782e-17, nan], 'true,false,false': [-6.938893903907228e-18, nan]}, {'': [0.1061979935898608, -5.9476233462061954e-18], 'true': [-6.908054375445419e-16, 0.0], 'true,false': [nan, 0.0], 'true,false,false': [0.0, nan], 'false': [-5.9476233462061954e-18, nan]}, {'': [0.06631740615362877, -5.9476233462061954e-18], 'true': [nan, 0.06631740615362877], 'true,false': [0.06631740615362877, nan], 'false': [-5.9476233462061954e-18, nan]}, {'': [0.05547605912347071, -1.982541115402065e-18], 'true': [4.9343245538895844e-17, 6.938893903907228e-18], 'true,false': [nan, 6.938893903907228e-18], 'true,false,false': [6.938893903907228e-18, nan], 'false': [-1.982541115402065e-18, nan]}, {'': [0.034738931989378934, 9.912705577010326e-19], 'true': [-1.2335811384723962e-16, 0.0], 'false': [9.912705577010326e-19, nan], 'true,false': [nan, 0.0], 'true,false,false': [0.0, nan]}, {'': [0.023178366082925565, 1.2886517250113425e-17], 'true': [nan, 0.023178366082925565], 'true,false': [-6.167905692361981e-17, 3.469446951953614e-18], 'false': [1.2886517250113425e-17, nan], 'true,false,false': [3.469446951953614e-18, nan]}, {'': [0.01639980739552386, 0.0], 'true': [-1.850371707708594e-17, 0.0], 'false': [0.0, nan], 'true,false': [0.0, nan], 'true,false,true': [nan, 0.0]}, {'': [0.012166764018695687, 9.912705577010326e-19], 'true': [-6.1679056923619804e-18, -3.469446951953614e-18], 'false': [9.912705577010326e-19, nan], 'true,false': [nan, -3.469446951953614e-18], 'true,false,false': [-3.469446951953614e-18, nan]}, {'': [0.00936929084680479, -5.9476233462061954e-18], 'true': [nan, 0.00936929084680479], 'true,false': [1.5419764230904953e-17, -3.469446951953614e-18], 'true,false,false': [-3.469446951953614e-18, nan], 'false': [-5.9476233462061954e-18, nan]}, {'': [0.007431290196341353, -4.956352788505163e-19], 'true': [0.007431290196341353, nan], 'true,true': [-2.1587669923266933e-17, -2.6020852139652106e-18], 'true,true,false': [-2.6020852139652106e-18, nan], 'true,true,true': [nan, -2.1587669923266933e-17]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, D).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, E).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, D).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.8581489350995115;  // std dev = 2.53e-07, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | else return -0.1418510649004878;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return -0.1418510649004877;  // std dev = 2.58e-08, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109548;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | else return -0.12544463852839138;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return -0.12544463852839138;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.5553664367462843;  // std dev = 1.03e-07, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | else return -0.11231637819360639;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return -0.1123163781936064;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4175135841583102;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | else return -0.10159632948783627;  // std dev = 3.73e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return -0.10159632948783635;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.3207118471601495;  // std dev = 2.11e-08, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | else return -0.09269127618926097;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return -0.09269127618926097;  // std dev = 5.27e-09, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.25517224256948956;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | else return -0.08518475138839687;  // std dev = 3.73e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return -0.0851847513883968;  // std dev = 1.90e-08, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.20975771563253542;  // std dev = 5.37e-08, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | else return -0.07877675473109173;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return -0.07877675473109179;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1770964977452775;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | else return -0.07324622576333704;  // std dev = 2.63e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return -0.07324622576333704;  // std dev = 5.27e-09, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1527438580936709;  // std dev = 3.65e-08, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | else return -0.06842697784420272;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return -0.06842697784420276;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13400703000801112;  // std dev = 1.05e-08, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | else return -0.0641918400820262;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return -0.06419184008202623;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.275601
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.824926
   F1        = 0.904065


Total learning time: 0.982 seconds
Total inference time: 0.868 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.562 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.275601
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.824926
   F1        = 0.904065


Total learning time: 3.1550000000000002 seconds
Total inference time: 0.868 seconds
AUC ROC: 1.0
Total revision time: 3.1550000000000002
Best scored revision CLL: -0.094637


Dataset: 4_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 03:32:11
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.275601, 'Precision': [1.0, 0.5], 'Recall': 0.824926, 'F1': 0.904065, 'Learning time': 3.1550000000000002, 'Inference time': 0.868, 'parameter_0.8': {'AUC ROC': 0.976362, 'AUC PR': 0.978237, 'CLL': -0.310474, 'Precision': [1.0, 0.5], 'Recall': 0.824926, 'F1': 0.904065, 'Learning time': 1.057, 'Inference time': 0.906}}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
3;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
3;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
3;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordauthor(D, C).;true;true
4;true,true;author(E, D), venue(E, B).;false;true
4;true,true,false;haswordtitle(F, C).;false;false
4;true,false;haswordtitle(G, C).;true;true
4;true,false,true;title(H, G), venue(H, A).;false;false
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(A, K), haswordtitle(L, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(B, I), haswordauthor(J, I).;false;false
5;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, B).;false;true
6;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
6;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
6;true,false,true;title(J, I), venue(J, B).;false;false
6;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
6;false;haswordvenue(A, M), haswordauthor(N, M).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
7;true,false,true;title(I, H), venue(I, B).;false;false
7;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
7;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;title(F, D), venue(F, B).;false;false
8;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
8;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
8;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;haswordvenue(A, D).;false;false
9;true,false;haswordtitle(H, C).;true;true
9;true,false,true;title(I, H), venue(I, B).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.858148935099512;  // std dev = 2.23e-07, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004877;  // std dev = 3.49e-08, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.719473412210955;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return -0.12544463852839138;  // std dev = 5.27e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839136;  // std dev = 1.49e-08, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.4339695613026673;  // std dev = 0.258, 55.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=45 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360643;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.44729850177826685;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return -0.16337522243222202;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783635;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.34098890949148053;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return -0.14225308019409177;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.092691276189261;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.2689651491827275;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.1257627666750745;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0851847513883968;  // std dev = 3.73e-09, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.21945512409758428;  // std dev = 2.11e-08, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1125737145811587;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109179;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1841770863611172;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return -0.10180838784869303;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333704;  // std dev = 1.05e-08, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.15809425245146616;  // std dev = 3.65e-08, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.09286880287113367;  // std dev = 3.73e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420274;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.13817027297614864;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else if ( movie(D, A) )
%   | | | then return -0.0853353960741646;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202623;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */


Results
   AUC ROC   = 0.976362
   AUC PR    = 0.978237
   CLL	      = -0.310474
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.824926
   F1        = 0.904065


Total learning time: 1.134 seconds
Total inference time: 0.95 seconds
AUC ROC: 0.976362


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.098731
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.639 seconds
Parameter learned model CLL: -0.098731


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [2.23e-07, 0, 45], 'true,false,false,true': [0.0, 10, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.49e-08, 35, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 45], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [5.27e-09, 10, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.49e-08, 35, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.258, 10, 45], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 35, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 45], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 10, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 35, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 45], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 10, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 35, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 45], 'true,false,false,true': [0.0, 10, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.73e-09, 35, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [2.11e-08, 0, 45], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.0, 10, 0], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 35, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 45], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 10, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.05e-08, 35, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [3.65e-08, 0, 45], 'true,false,false,true': [3.73e-09, 10, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 35, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'movie(D, A)'}, {'true,true,true,true': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 45], 'true,true,false,true': [0.0, 10, 0], 'true,true,false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false': [0.0, 35, 0]}]]
[{'': [0.14876033057851296, 3.489272363107635e-17], 'true': [nan, 0.14876033057851296], 'true,false': [1.105288700071267e-15, -1.1102230246251566e-17], 'false': [3.489272363107635e-17, nan], 'true,false,false': [-1.1102230246251566e-17, nan]}, {'': [0.1061979935898607, 6.3441315692866086e-18], 'true': [-9.473903143468002e-16, 2.7755575615628915e-18], 'false': [6.3441315692866086e-18, nan], 'true,false': [nan, 2.7755575615628915e-18], 'true,false,false': [2.7755575615628915e-18, nan]}, {'': [0.06631740615362845, -1.2688263138573217e-17], 'true': [nan, 0.06631740615362845], 'true,false': [0.06631740615362845, nan], 'false': [-1.2688263138573217e-17, nan]}, {'': [0.05547605912347049, -1.5860328923216522e-18], 'true': [-3.947459643111668e-17, -5.551115123125783e-18], 'false': [-1.5860328923216522e-18, nan], 'true,false': [nan, -5.551115123125783e-18], 'true,false,false': [-5.551115123125783e-18, nan]}, {'': [0.034738931989378934, -9.516197353929913e-18], 'true': [-1.3816108750890837e-16, -2.7755575615628915e-18], 'true,false': [nan, -2.7755575615628915e-18], 'true,false,false': [-2.7755575615628915e-18, nan], 'false': [-9.516197353929913e-18, nan]}, {'': [0.0231783660829255, 1.4274296030894868e-17], 'true': [nan, 0.0231783660829255], 'true,false': [-1.5789838572446671e-16, 0.0], 'false': [1.4274296030894868e-17, nan], 'true,false,false': [0.0, nan]}, {'': [0.01639980739552379, 0.0], 'true': [9.86864910777917e-18, -8.326672684688674e-18], 'false': [0.0, nan], 'true,false': [-8.326672684688674e-18, nan], 'true,false,true': [nan, -8.326672684688674e-18]}, {'': [0.012166764018695687, 3.1720657846433043e-18], 'true': [-1.973729821555834e-17, -2.7755575615628915e-18], 'false': [3.1720657846433043e-18, nan], 'true,false': [nan, -2.7755575615628915e-18], 'true,false,false': [-2.7755575615628915e-18, nan]}, {'': [0.009369290846804778, -2.3790493384824783e-18], 'true': [nan, 0.009369290846804778], 'true,false': [2.960594732333751e-17, 1.3877787807814458e-18], 'true,false,false': [1.3877787807814458e-18, nan], 'false': [-2.3790493384824783e-18, nan]}, {'': [0.007431290196341347, -1.5860328923216522e-18], 'true': [0.007431290196341347, nan], 'true,true': [-3.454027187722709e-17, -4.163336342344337e-18], 'true,true,false': [-4.163336342344337e-18, nan], 'true,true,true': [nan, -3.454027187722709e-17]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, D).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, E).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, D).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.858148935099512;  // std dev = 2.23e-07, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.1418510649004878;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return -0.1418510649004877;  // std dev = 3.49e-08, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.719473412210955;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.12544463852839138;  // std dev = 5.27e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return -0.12544463852839136;  // std dev = 1.49e-08, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.11231637819360638;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0.5553664367462839;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.11231637819360643;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.41751358415831025;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.10159632948783628;  // std dev = 3.73e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return -0.10159632948783635;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.32071184716014944;  // std dev = 2.98e-08, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.09269127618926097;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return -0.092691276189261;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2551722425694896;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.08518475138839687;  // std dev = 3.73e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return -0.0851847513883968;  // std dev = 2.24e-08, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2097577156325355;  // std dev = 5.58e-08, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.07877675473109172;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return -0.07877675473109179;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17709649774527753;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.07324622576333704;  // std dev = 2.63e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return -0.07324622576333704;  // std dev = 1.05e-08, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15274385809367083;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.06842697784420272;  // std dev = 2.63e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return -0.06842697784420274;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13400703000801104;  // std dev = 2.36e-08, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.06419184008202619;  // std dev = 3.73e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return -0.06419184008202623;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.275601
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.824926
   F1        = 0.904065


Total learning time: 1.079 seconds
Total inference time: 0.852 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.634 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.275601
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.824926
   F1        = 0.904065


Total learning time: 3.4859999999999998 seconds
Total inference time: 0.852 seconds
AUC ROC: 1.0
Total revision time: 3.4859999999999998
Best scored revision CLL: -0.094637


Dataset: 4_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 03:32:17
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.275601, 'Precision': [1.0, 0.5], 'Recall': 0.824926, 'F1': 0.904065, 'Learning time': 3.4859999999999998, 'Inference time': 0.852, 'parameter_1.0': {'AUC ROC': 0.976362, 'AUC PR': 0.978237, 'CLL': -0.310474, 'Precision': [1.0, 0.5], 'Recall': 0.824926, 'F1': 0.904065, 'Learning time': 1.134, 'Inference time': 0.95}}


Starting fold 5

Target train facts examples: 163
Target train pos examples: 45
Target train neg examples: 45

Target test facts examples: 915
Target test pos	 examples: 337
Target test neg examples: 337

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
3;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
3;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
3;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordauthor(D, C).;true;true
4;true,true;author(E, D), venue(E, B).;false;true
4;true,true,false;haswordtitle(F, C).;false;false
4;true,false;haswordtitle(G, C).;true;true
4;true,false,true;title(H, G), venue(H, A).;false;false
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(A, K), haswordtitle(L, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(B, I), haswordauthor(J, I).;false;false
5;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, B).;false;true
6;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
6;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
6;true,false,true;title(J, I), venue(J, B).;false;false
6;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
6;false;haswordvenue(A, M), haswordauthor(N, M).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
7;true,false,true;title(I, H), venue(I, B).;false;false
7;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
7;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;title(F, D), venue(F, B).;false;false
8;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
8;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
8;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;haswordvenue(A, D).;false;false
9;true,false;haswordtitle(H, C).;true;true
9;true,false,true;title(I, H), venue(I, B).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109544;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.5553664367462846;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4175135841583099;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return 0.41751358415830997;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783627;  // std dev = 5.27e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.3207118471601497;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return 0.32071184716014967;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.09269127618926097;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.2551722425694894;  // std dev = 7.45e-09, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.25517224256948945;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.08518475138839687;  // std dev = 1.32e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.20975771563253556;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.20975771563253554;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109173;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17709649774527736;  // std dev = 5.27e-09, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.17709649774527736;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333704;  // std dev = 2.63e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.15274385809367097;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.15274385809367097;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.13400703000801117;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( movie(D, A) )
%   | | | then return 0.13400703000801117;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.0641918400820262;  // std dev = 2.63e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */


Results
   AUC ROC   = 0.893175
   AUC PR    = 0.823961
   CLL	      = -0.317369
   Precision = 0.823961 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.903485


Total learning time: 0.871 seconds
Total inference time: 0.904 seconds
AUC ROC: 0.893175


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.49 seconds
Parameter learned model CLL: -0.094637


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 6], 'true,false,false,true': [2.11e-08, 0, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 9, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [2.11e-08, 0, 6], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 9, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 9], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 9, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [2.11e-08, 0, 6], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.27e-09, 9, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 6], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 9, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [7.45e-09, 0, 6], 'true,false,false,true': [0.0, 0, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.32e-09, 9, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 6], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.0, 0, 3], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 9, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [5.27e-09, 0, 6], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.63e-09, 9, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 6], 'true,false,false,true': [0.0, 0, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 9, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'movie(D, A)'}, {'true,true,true,true': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 6], 'true,true,false,true': [0.0, 0, 3], 'true,true,false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false': [2.63e-09, 9, 0]}]]
[{'': [-2.9605947323337506e-16, -9.25185853854297e-18], 'false': [-9.25185853854297e-18, nan], 'true': [nan, -2.9605947323337506e-16], 'true,false': [-1.4802973661668753e-16, 1.4802973661668753e-16], 'true,false,false': [1.4802973661668753e-16, nan]}, {'': [2.9605947323337506e-16, 0.0], 'true': [7.401486830834377e-17, 0.0], 'false': [0.0, nan], 'true,false': [nan, 0.0], 'true,false,false': [0.0, nan]}, {'': [-1.4802973661668753e-16, -1.5419764230904951e-18], 'false': [-1.5419764230904951e-18, nan], 'true': [nan, -1.4802973661668753e-16], 'true,false': [-1.4802973661668753e-16, nan]}, {'': [1.2335811384723962e-16, 3.0839528461809902e-18], 'true': [7.401486830834377e-17, -3.700743415417188e-17], 'false': [3.0839528461809902e-18, nan], 'true,false': [nan, -3.700743415417188e-17], 'true,false,false': [-3.700743415417188e-17, nan]}, {'': [-3.700743415417188e-17, 0.0], 'false': [0.0, nan], 'true': [-3.700743415417188e-17, 0.0], 'true,false': [nan, 0.0], 'true,false,false': [0.0, nan]}, {'': [3.700743415417188e-17, 1.5419764230904951e-18], 'true': [nan, 3.700743415417188e-17], 'true,false': [9.25185853854297e-18, 0.0], 'false': [1.5419764230904951e-18, nan], 'true,false,false': [0.0, nan]}, {'': [-2.4671622769447922e-17, 0.0], 'false': [0.0, nan], 'true': [-9.25185853854297e-18, 0.0], 'true,false': [0.0, nan], 'true,false,true': [nan, 0.0]}, {'': [6.1679056923619804e-18, 7.709882115452476e-19], 'true': [4.625929269271485e-18, 0.0], 'false': [7.709882115452476e-19, nan], 'true,false': [nan, 0.0], 'true,false,false': [0.0, nan]}, {'': [-3.0839528461809902e-18, 0.0], 'false': [0.0, nan], 'true': [nan, -3.0839528461809902e-18], 'true,false': [-4.625929269271485e-18, -4.625929269271485e-18], 'true,false,false': [-4.625929269271485e-18, nan]}, {'': [0.0, 7.709882115452476e-19], 'true': [0.0, nan], 'true,true': [0.0, -2.3129646346357427e-18], 'true,true,true': [nan, 0.0], 'true,true,false': [-2.3129646346357427e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, D).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, E).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, D).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109544;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( female(B) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.5553664367462846;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( female(B) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.11231637819360638;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4175135841583099;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.41751358415830997;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( female(B) )
%   | then return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.10159632948783628;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.3207118471601497;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.32071184716014967;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( female(B) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.09269127618926096;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2551722425694894;  // std dev = 7.45e-09, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.25517224256948945;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( female(B) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.08518475138839687;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.20975771563253556;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.20975771563253554;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( female(B) )
%   | then return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.07877675473109173;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17709649774527736;  // std dev = 5.27e-09, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.17709649774527736;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( female(B) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15274385809367097;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.15274385809367097;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( female(B) )
%   | then return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.06842697784420272;  // std dev = 1.86e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13400703000801117;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.13400703000801117;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( female(B) )
%   | then return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.0641918400820262;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */


Results
   AUC ROC   = 0.878338
   AUC PR    = 0.804296
   CLL	      = -0.345817
   Precision = 0.804296 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.891534


Total learning time: 1.154 seconds
Total inference time: 0.827 seconds
AUC ROC: 0.878338


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.478 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.893175
   AUC PR    = 0.823961
   CLL	      = -0.317369
   Precision = 0.823961 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.903485


Total learning time: 2.9929999999999994 seconds
Total inference time: 0.904 seconds
AUC ROC: 0.893175
Total revision time: 2.9929999999999994
Best scored revision CLL: -0.094637


Dataset: 4_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 03:32:22
{'AUC ROC': 0.893175, 'AUC PR': 0.823961, 'CLL': -0.317369, 'Precision': [0.823961, 0.5], 'Recall': 1.0, 'F1': 0.903485, 'Learning time': 2.9929999999999994, 'Inference time': 0.904, 'parameter_0.2': {'AUC ROC': 0.893175, 'AUC PR': 0.823961, 'CLL': -0.317369, 'Precision': [0.823961, 0.5], 'Recall': 1.0, 'F1': 0.903485, 'Learning time': 0.871, 'Inference time': 0.904}}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
3;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
3;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
3;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordauthor(D, C).;true;true
4;true,true;author(E, D), venue(E, B).;false;true
4;true,true,false;haswordtitle(F, C).;false;false
4;true,false;haswordtitle(G, C).;true;true
4;true,false,true;title(H, G), venue(H, A).;false;false
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(A, K), haswordtitle(L, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(B, I), haswordauthor(J, I).;false;false
5;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, B).;false;true
6;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
6;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
6;true,false,true;title(J, I), venue(J, B).;false;false
6;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
6;false;haswordvenue(A, M), haswordauthor(N, M).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
7;true,false,true;title(I, H), venue(I, B).;false;false
7;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
7;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;title(F, D), venue(F, B).;false;false
8;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
8;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
8;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;haswordvenue(A, D).;false;false
9;true,false;haswordtitle(H, C).;true;true
9;true,false,true;title(I, H), venue(I, B).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.5724346493852266;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109542;  // std dev = 4.21e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.48767788391726297;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 7.45e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.49792812061982367;  // std dev = 0.278, 20.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=18 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360635;  // std dev = 1.39e-08, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.43154497399646247;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return 0.2744821569518715;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783631;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.3302409587071774;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return 0.20615572816757316;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.09269127618926094;  // std dev = 9.13e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.26166426408528387;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.1548977439501232;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.08518475138839685;  // std dev = 2.63e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2143332514901046;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.11714239492342525;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109173;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18044523241823057;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.08931078005452951;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.15527949159434565;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.06862266856958228;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1359834613187858;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( movie(D, A) )
%   | | | then return 0.0530844321685844;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202619;  // std dev = 7.45e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */


Results
   AUC ROC   = 0.984468
   AUC PR    = 0.985712
   CLL	      = -0.229442
   Precision = 0.823961 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.903485


Total learning time: 1.022 seconds
Total inference time: 0.92 seconds
AUC ROC: 0.984468


Results scoring model
   AUC ROC   = 0.984568
   AUC PR    = 0.984211
   CLL	      = -0.191294
   Precision = 0.9 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.947368


Total scoring time: 0.537 seconds
Parameter learned model CLL: -0.191294


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 13], 'true,false,false,true': [1.195, 2, 5], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 16, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [4.21e-08, 0, 13], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.195, 2, 5], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.45e-09, 16, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.278, 2, 18], 'true,false,false': [0.0, 0, 0], 'false,true': [1.39e-08, 16, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 13], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.195, 2, 5], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 16, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 13], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.195, 2, 5], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.13e-09, 16, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 13], 'true,false,false,true': [1.195, 2, 5], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.63e-09, 16, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 13], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.195, 2, 5], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 16, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 13], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.195, 2, 5], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 16, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 13], 'true,false,false,true': [1.195, 2, 5], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 16, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'movie(D, A)'}, {'true,true,true,true': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 13], 'true,true,false,true': [1.195, 2, 5], 'true,true,false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false': [7.45e-09, 16, 0]}]]
[{'': [0.08999999999999968, -6.938893903907228e-18], 'true': [nan, 0.08999999999999968], 'true,false': [-2.7328566760003855e-16, 0.20408163265306106], 'true,false,false': [0.20408163265306106, nan], 'false': [-6.938893903907228e-18, nan]}, {'': [0.08365195690672796, 3.469446951953614e-18], 'true': [1.3664283380001927e-16, 0.20408163265306115], 'true,false': [nan, 0.20408163265306115], 'true,false,false': [0.20408163265306115, nan], 'false': [3.469446951953614e-18, nan]}, {'': [0.07755558315325169, 1.214306433183765e-17], 'true': [nan, 0.07755558315325169], 'true,false': [0.07755558315325169, nan], 'false': [1.214306433183765e-17, nan]}, {'': [0.07704070716186237, -6.938893903907228e-18], 'true': [-3.416070845000482e-17, 0.20408163265306126], 'true,false': [nan, 0.20408163265306126], 'true,false,false': [0.20408163265306126, nan], 'false': [-6.938893903907228e-18, nan]}, {'': [0.07493142178823156, 5.204170427930421e-18], 'true': [-6.832141690000964e-17, 0.2040816326530612], 'true,false': [nan, 0.2040816326530612], 'true,false,false': [0.2040816326530612, nan], 'false': [5.204170427930421e-18, nan]}, {'': [0.07402186436302444, 6.938893903907228e-18], 'true': [nan, 0.07402186436302444], 'true,false': [-3.416070845000482e-17, 0.2040816326530612], 'true,false,false': [0.2040816326530612, nan], 'false': [6.938893903907228e-18, nan]}, {'': [0.07357755067010888, -1.734723475976807e-18], 'true': [-1.708035422500241e-17, 0.2040816326530612], 'true,false': [0.2040816326530612, nan], 'true,false,true': [nan, 0.2040816326530612], 'false': [-1.734723475976807e-18, nan]}, {'': [0.07331807004130761, 0.0], 'true': [-8.540177112501205e-18, 0.2040816326530612], 'true,false': [nan, 0.2040816326530612], 'true,false,false': [0.2040816326530612, nan], 'false': [0.0, nan]}, {'': [0.07313696106078094, 0.0], 'true': [nan, 0.07313696106078094], 'true,false': [-4.270088556250602e-18, 0.20408163265306123], 'true,false,false': [0.20408163265306123, nan], 'false': [0.0, nan]}, {'': [0.07299200808381687, 3.469446951953614e-18], 'true': [0.07299200808381687, nan], 'true,true': [-4.270088556250602e-18, 0.2040816326530612], 'true,true,false': [0.2040816326530612, nan], 'true,true,true': [nan, -4.270088556250602e-18]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, D).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, E).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, D).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( female(A), director(B) )
%   | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.3581489350995122;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109542;  // std dev = 4.21e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( female(A), director(B) )
%   | | then return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.308741135785635;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return -0.12544463852839138;  // std dev = 7.45e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.43245042628663877;  // std dev = 0.288, 13.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=11 */
%   | else return 0.6128081316069424;  // std dev = 0.091, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.11231637819360635;  // std dev = 1.39e-08, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4307277807320901;  // std dev = 0.077, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( female(A), director(B) )
%   | | then return 0.4476740962120094;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.14777615508437894;  // std dev = 0.959, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return -0.10159632948783631;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.32985492366087116;  // std dev = 0.069, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( female(A), director(B) )
%   | | then return 0.3412459274614499;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.1134367060288968;  // std dev = 0.957, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return -0.09269127618926094;  // std dev = 9.13e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2615014857542874;  // std dev = 0.060, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( female(A), director(B) )
%   | | then return 0.26913949552542893;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.08626974383169947;  // std dev = 0.956, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return -0.08518475138839685;  // std dev = 1.05e-08, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.21427859129584284;  // std dev = 0.053, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( female(A), director(B) )
%   | | then return 0.21957714040069087;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.0652426714409928;  // std dev = 0.956, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return -0.07877675473109173;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18044281391420244;  // std dev = 0.046, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( female(A), director(B) )
%   | | then return 0.18426577789877752;  // std dev = 3.73e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.04917927304090697;  // std dev = 0.955, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return -0.07324622576333704;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15530231179774362;  // std dev = 0.041, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( female(A), director(B) )
%   | | then return 0.1581610095743573;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.03700098441919525;  // std dev = 0.955, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return -0.06842697784420272;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.136018121247729;  // std dev = 0.037, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( female(A), director(B) )
%   | | then return 0.13822204621451173;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.027808478753414162;  // std dev = 0.955, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return -0.06419184008202619;  // std dev = 7.45e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */


Results
   AUC ROC   = 0.998675
   AUC PR    = 0.998771
   CLL	      = -0.171378
   Precision = 0.886842 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.940028


Total learning time: 1.299 seconds
Total inference time: 0.895 seconds
AUC ROC: 0.998675


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.157341
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.486 seconds
Refined model CLL: -0.157341


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.998675
   AUC PR    = 0.998771
   CLL	      = -0.171378
   Precision = 0.886842 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.940028


Total learning time: 3.3440000000000003 seconds
Total inference time: 0.895 seconds
AUC ROC: 0.998675
Total revision time: 3.3440000000000003
Best scored revision CLL: -0.157341


Dataset: 4_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 03:32:28
{'AUC ROC': 0.998675, 'AUC PR': 0.998771, 'CLL': -0.171378, 'Precision': [0.886842, 0.5], 'Recall': 1.0, 'F1': 0.940028, 'Learning time': 3.3440000000000003, 'Inference time': 0.895, 'parameter_0.4': {'AUC ROC': 0.984468, 'AUC PR': 0.985712, 'CLL': -0.229442, 'Precision': [0.823961, 0.5], 'Recall': 1.0, 'F1': 0.903485, 'Learning time': 1.022, 'Inference time': 0.92}}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
3;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
3;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
3;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordauthor(D, C).;true;true
4;true,true;author(E, D), venue(E, B).;false;true
4;true,true,false;haswordtitle(F, C).;false;false
4;true,false;haswordtitle(G, C).;true;true
4;true,false,true;title(H, G), venue(H, A).;false;false
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(A, K), haswordtitle(L, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(B, I), haswordauthor(J, I).;false;false
5;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, B).;false;true
6;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
6;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
6;true,false,true;title(J, I), venue(J, B).;false;false
6;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
6;false;haswordvenue(A, M), haswordauthor(N, M).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
7;true,false,true;title(I, H), venue(I, B).;false;false
7;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
7;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;title(F, D), venue(F, B).;false;false
8;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
8;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
8;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;haswordvenue(A, D).;false;false
9;true,false;haswordtitle(H, C).;true;true
9;true,false,true;title(I, H), venue(I, B).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.40360348055405776;  // std dev = 1.651, 11.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=6 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048774;  // std dev = 1.05e-08, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109543;  // std dev = 7.30e-08, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.34706599335169436;  // std dev = 1.651, 11.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=6 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, A) )
%   | | then return 0.46280639699134757;  // std dev = 0.319, 32.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=27 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360636;  // std dev = 1.29e-08, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4401806961460216;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.18802176814645802;  // std dev = 1.651, 11.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=6 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783634;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.3361252953783518;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( genre(A, E) )
%   | | then return -0.09269127618926096;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.1437823285715277;  // std dev = 1.651, 11.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=6 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.09269127618926103;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.2656639222155679;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.10879246417844306;  // std dev = 1.651, 11.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=6 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.08518475138839683;  // std dev = 2.95e-09, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.21714219554555386;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06848445284759418;  // std dev = 1.659, 12.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=6 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109179;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18249401385033798;  // std dev = 1.49e-08, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( genre(A, E) )
%   | | then return -0.08389230883853249;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.06480565384116117;  // std dev = 1.651, 11.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=6 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07766582364262029;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.15682620687151333;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.048613868787327916;  // std dev = 1.651, 11.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=6 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420275;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.13718604699668369;  // std dev = 1.05e-08, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else if ( movie(D, A) )
%   | | | then return 0.02739949290413964;  // std dev = 1.655, 12.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=6 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.0641918400820262;  // std dev = 5.27e-09, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */


Results
   AUC ROC   = 0.984468
   AUC PR    = 0.985712
   CLL	      = -0.205809
   Precision = 0.823961 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.903485


Total learning time: 1.145 seconds
Total inference time: 0.897 seconds
AUC ROC: 0.984468


Results scoring model
   AUC ROC   = 0.979424
   AUC PR    = 0.980285
   CLL	      = -0.216867
   Precision = 0.84375 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.915254


Total scoring time: 0.626 seconds
Parameter learned model CLL: -0.216867


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 21], 'true,false,false,true': [1.651, 5, 6], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.05e-08, 21, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [7.3e-08, 0, 21], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [1.651, 5, 6], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 21, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.319, 5, 27], 'true,false,false': [0.0, 0, 0], 'false,true': [1.29e-08, 21, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 21], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [1.651, 5, 6], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 21, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 21], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [1.651, 5, 6], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 21, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 21], 'true,false,false,true': [1.651, 5, 6], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.95e-09, 21, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 21], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.659, 6, 6], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 21, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.49e-08, 0, 21], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [1.651, 5, 6], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 21, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 21], 'true,false,false,true': [1.651, 5, 6], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 21, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'movie(D, A)'}, {'true,true,true,true': [0.0, 0, 0], 'true,true,true,false': [1.05e-08, 0, 21], 'true,true,false,true': [1.655, 6, 6], 'true,true,false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false': [5.27e-09, 21, 0]}]]
[{'': [0.14876033057851368, 5.28677630773884e-18], 'true': [0.0, 0.13183593750000117], 'true,false': [0.0, 0.2479338842975207], 'true,false,false': [0.2479338842975207, nan], 'false': [5.28677630773884e-18, nan]}, {'': [0.1280847649310861, -2.64338815386942e-18], 'true': [2.5376526277146434e-16, 0.24432779164520568], 'true,false': [0.0, 0.2479338842975206], 'true,false,false': [0.2479338842975206, nan], 'false': [-2.64338815386942e-18, nan]}, {'': [0.10822435105912599, 7.93016446160826e-18], 'true': [0.0, 0.10158314364983145], 'true,false': [0.10158314364983145, nan], 'false': [7.93016446160826e-18, nan]}, {'': [0.10263963929374893, -2.64338815386942e-18], 'true': [-4.229421046191072e-17, 0.23368012357307721], 'true,false': [0.0, 0.2479338842975207], 'true,false,false': [0.2479338842975207, nan], 'false': [-2.64338815386942e-18, nan]}, {'': [0.09460303747988708, -7.93016446160826e-18], 'true': [-6.344131569286608e-17, 0.23154437604518696], 'true,false': [0.0, 0.24793388429752075], 'true,false,false': [0.24793388429752075, nan], 'false': [-7.93016446160826e-18, nan]}, {'': [0.09061844677961313, 1.057355261547768e-17], 'true': [0.0, 0.09077863908868494], 'true,false': [0.0, 0.24793388429752064], 'true,false,false': [0.24793388429752064, nan], 'false': [1.057355261547768e-17, nan]}, {'': [0.08847536312416197, 0.0], 'true': [-1.586032892321652e-17, 0.2292441693870484], 'true,false': [0.2292441693870484, nan], 'true,false,true': [nan, 0.2292441693870484], 'false': [0.0, nan]}, {'': [0.08717437477065815, -1.32169407693471e-18], 'true': [1.057355261547768e-17, 0.2289617684196439], 'true,false': [0.0, 0.2479338842975206], 'true,false,false': [0.2479338842975206, nan], 'false': [-1.32169407693471e-18, nan]}, {'': [0.0863499707658787, -2.64338815386942e-18], 'true': [0.0, 0.08786886377830028], 'true,false': [-3.172065784643304e-17, 0.2479338842975207], 'true,false,false': [0.2479338842975207, nan], 'false': [-2.64338815386942e-18, nan]}, {'': [0.08576224593160692, 1.32169407693471e-18], 'true': [0.08576224593160692, nan], 'true,true': [5.28677630773884e-18, 0.22817602974677298], 'true,true,false': [0.22817602974677298, nan], 'true,true,true': [nan, 5.28677630773884e-18]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, D).;true;true
4;true,false;genre(A, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(A, D).;true;true
5;true,false;genre(B, E).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, D).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
8;true,false;genre(B, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else if ( actor(B) )
%   | | | then return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.14185106490048774;  // std dev = 1.05e-08, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109543;  // std dev = 7.30e-08, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( actor(B) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.7194734122109544;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.12544463852839138;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( director(B) )
%   | | then return 0.5553664367462846;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return -0.11231637819360638;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.11231637819360636;  // std dev = 1.29e-08, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.41751358415830986;  // std dev = 4.71e-08, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( actor(B) )
%   | | | then return -0.10159632948783633;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.4175135841583099;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.10159632948783634;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.3207118471601496;  // std dev = 2.98e-08, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( genre(A, E) )
%   | | then return -0.09269127618926096;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( actor(B) )
%   | | | then return -0.09269127618926098;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.3207118471601497;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.09269127618926103;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.2551722425694895;  // std dev = 1.49e-08, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else if ( actor(B) )
%   | | | then return -0.08518475138839687;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.2551722425694894;  // std dev = 7.45e-09, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.08518475138839683;  // std dev = 1.49e-08, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2097577156325356;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( actor(B) )
%   | | then return -0.07877675473109176;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.20975771563253556;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.07877675473109179;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17709649774527744;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( genre(A, E) )
%   | | then return -0.07324622576333704;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( actor(B) )
%   | | | then return -0.07324622576333704;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.17709649774527736;  // std dev = 5.27e-09, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.07324622576333704;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.06842697784420272;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.1527438580936708;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else if ( actor(B) )
%   | | | then return -0.06842697784420272;  // std dev = 1.86e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.15274385809367097;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.06842697784420275;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13400703000801117;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( actor(B) )
%   | | then return -0.0641918400820262;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.13400703000801117;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.0641918400820262;  // std dev = 5.27e-09, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.499 seconds
Total inference time: 0.98 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.586 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.856 seconds
Total inference time: 0.98 seconds
AUC ROC: 1.0
Total revision time: 3.856
Best scored revision CLL: -0.094637


Dataset: 4_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 03:32:34
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.094637, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 3.856, 'Inference time': 0.98, 'parameter_0.6': {'AUC ROC': 0.984468, 'AUC PR': 0.985712, 'CLL': -0.205809, 'Precision': [0.823961, 0.5], 'Recall': 1.0, 'F1': 0.903485, 'Learning time': 1.145, 'Inference time': 0.897}}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
3;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
3;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
3;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordauthor(D, C).;true;true
4;true,true;author(E, D), venue(E, B).;false;true
4;true,true,false;haswordtitle(F, C).;false;false
4;true,false;haswordtitle(G, C).;true;true
4;true,false,true;title(H, G), venue(H, A).;false;false
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(A, K), haswordtitle(L, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(B, I), haswordauthor(J, I).;false;false
5;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, B).;false;true
6;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
6;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
6;true,false,true;title(J, I), venue(J, B).;false;false
6;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
6;false;haswordvenue(A, M), haswordauthor(N, M).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
7;true,false,true;title(I, H), venue(I, B).;false;false
7;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
7;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;title(F, D), venue(F, B).;false;false
8;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
8;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
8;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;haswordvenue(A, D).;false;false
9;true,false;haswordtitle(H, C).;true;true
9;true,false,true;title(I, H), venue(I, B).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995117;  // std dev = 1.69e-07, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.42957750652808374;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=8 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004877;  // std dev = 2.58e-08, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109546;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.3688769765977055;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=8 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, A) )
%   | | then return 0.4711745940258364;  // std dev = 0.310, 42.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=36 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.1123163781936064;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.43811963497070044;  // std dev = 5.16e-08, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.20099819110566772;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=8 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783635;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.3347193468560336;  // std dev = 3.65e-08, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | else if ( genre(A, E) )
%   | | then return -0.09269127618926096;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.1530353164180512;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=8 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.09269127618926097;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.2647088650479628;  // std dev = 4.71e-08, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.115399046196383;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=8 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0851847513883968;  // std dev = 3.73e-09, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.21647213589291345;  // std dev = 3.33e-08, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07562943729244008;  // std dev = 1.859, 15.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109179;  // std dev = 5.27e-09, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18200576535692917;  // std dev = 3.33e-08, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | else if ( genre(A, E) )
%   | | then return -0.08444306736274262;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.06775587044310981;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=8 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333704;  // std dev = 7.45e-09, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07813951087692128;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.15645792087356816;  // std dev = 2.11e-08, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.05082850453054614;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=8 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420276;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1368999074343655;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | else if ( movie(D, A) )
%   | | | then return 0.030768803133388457;  // std dev = 1.855, 15.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202623;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */


Results
   AUC ROC   = 0.984468
   AUC PR    = 0.985712
   CLL	      = -0.207939
   Precision = 0.823961 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.903485


Total learning time: 1.09 seconds
Total inference time: 0.93 seconds
AUC ROC: 0.984468


Results scoring model
   AUC ROC   = 0.981481
   AUC PR    = 0.982028
   CLL	      = -0.209727
   Precision = 0.857143 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.923077


Total scoring time: 0.621 seconds
Parameter learned model CLL: -0.209727


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [1.69e-07, 0, 28], 'true,false,false,true': [1.852, 6, 8], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.58e-08, 29, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 28], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [1.852, 6, 8], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 29, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.31, 6, 36], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 29, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [5.16e-08, 0, 28], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [1.852, 6, 8], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 29, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [3.65e-08, 0, 28], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [1.852, 6, 8], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 29, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [4.71e-08, 0, 28], 'true,false,false,true': [1.852, 6, 8], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.73e-09, 29, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [3.33e-08, 0, 28], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.859, 7, 8], 'true,false,false': [0.0, 0, 0], 'false,true': [5.27e-09, 29, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [3.33e-08, 0, 28], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [1.852, 6, 8], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.45e-09, 29, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [2.11e-08, 0, 28], 'true,false,false,true': [1.852, 6, 8], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 29, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'movie(D, A)'}, {'true,true,true,true': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 28], 'true,true,false,true': [1.855, 7, 8], 'true,true,false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false': [0.0, 29, 0]}]]
[{'': [0.13628988642509646, 2.2970131543968756e-17], 'true': [0.0, 0.12244897959183858], 'true,false': [1.0150610510858574e-15, 0.24489795918367338], 'true,false,false': [0.24489795918367338, nan], 'false': [2.2970131543968756e-17, nan]}, {'': [0.11845438030648774, -5.742532885992189e-18], 'true': [-3.1720657846433045e-16, 0.24377566869823852], 'true,false': [0.0, 0.24489795918367352], 'true,false,false': [0.24489795918367352, nan], 'false': [-5.742532885992189e-18, nan]}, {'': [0.10131464662591637, -7.656710514656252e-18], 'true': [0.0, 0.09580918582255399], 'true,false': [0.09580918582255399, nan], 'false': [-7.656710514656252e-18, nan]}, {'': [0.09675905445666125, 0.0], 'true': [9.516197353929913e-17, 0.2342687095247839], 'true,false': [0.0, 0.24489795918367332], 'true,false,false': [0.24489795918367332, nan], 'false': [0.0, nan]}, {'': [0.08995592799107328, 0.0], 'true': [4.7580986769649563e-17, 0.2323285033109913], 'true,false': [0.0, 0.24489795918367352], 'true,false,false': [0.24489795918367352, nan], 'false': [0.0, nan]}, {'': [0.0866191357986563, 1.3399243400648442e-17], 'true': [0.0, 0.08658674684022279], 'true,false': [7.930164461608261e-17, 0.24489795918367346], 'true,false,false': [0.24489795918367346, nan], 'false': [1.3399243400648442e-17, nan]}, {'': [0.08483416577036644, 9.570888143320315e-19], 'true': [3.9650822308041306e-17, 0.23027437658108624], 'true,false': [0.23027437658108624, nan], 'true,false,true': [nan, 0.23027437658108624], 'false': [9.570888143320315e-19, nan]}, {'': [0.08375204175336964, 1.914177628664063e-18], 'true': [3.9650822308041306e-17, 0.23001277627529176], 'true,false': [0.0, 0.24489795918367346], 'true,false,false': [0.24489795918367346, nan], 'false': [1.914177628664063e-18, nan]}, {'': [0.08305906192758605, -5.742532885992189e-18], 'true': [0.0, 0.0841121138605506], 'true,false': [1.586032892321652e-17, 0.24489795918367344], 'true,false,false': [0.24489795918367344, nan], 'false': [-5.742532885992189e-18, nan]}, {'': [0.08255951212597731, -4.785444071660157e-19], 'true': [0.08255951212597731, nan], 'true,true': [-1.9825411154020653e-17, 0.2293360266277073], 'true,true,false': [0.2293360266277073, nan], 'true,true,true': [nan, -1.9825411154020653e-17]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, D).;true;true
4;true,false;genre(A, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(A, D).;true;true
5;true,false;genre(B, E).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, D).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
8;true,false;genre(B, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995117;  // std dev = 1.69e-07, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | else if ( actor(B) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.1418510649004877;  // std dev = 2.58e-08, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109546;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( actor(B) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.7194734122109543;  // std dev = 2.98e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.12544463852839138;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( actor(B) )
%   | | then return -0.11231637819360639;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.5553664367462843;  // std dev = 1.03e-07, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   else return -0.1123163781936064;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4175135841583101;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( actor(B) )
%   | | | then return -0.10159632948783627;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.41751358415830986;  // std dev = 2.98e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.10159632948783635;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.3207118471601495;  // std dev = 2.11e-08, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | else if ( genre(A, E) )
%   | | then return -0.09269127618926096;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( actor(B) )
%   | | | then return -0.09269127618926097;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.3207118471601497;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.09269127618926097;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.25517224256948956;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | else if ( actor(B) )
%   | | | then return -0.08518475138839687;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.2551722425694894;  // std dev = 1.49e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.0851847513883968;  // std dev = 1.97e-08, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.20975771563253548;  // std dev = 2.98e-08, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | else if ( actor(B) )
%   | | then return -0.07877675473109173;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.2097577156325357;  // std dev = 1.49e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.07877675473109179;  // std dev = 5.27e-09, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1770964977452775;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | else if ( genre(A, E) )
%   | | then return -0.07324622576333704;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( actor(B) )
%   | | | then return -0.07324622576333704;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.17709649774527736;  // std dev = 7.45e-09, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.07324622576333704;  // std dev = 7.45e-09, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.06842697784420272;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.15274385809367083;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | else if ( actor(B) )
%   | | | then return -0.06842697784420272;  // std dev = 1.86e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.15274385809367097;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.06842697784420276;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13400703000801117;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | else if ( actor(B) )
%   | | then return -0.0641918400820262;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.13400703000801117;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.06419184008202623;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.413 seconds
Total inference time: 0.873 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.629 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.753 seconds
Total inference time: 0.873 seconds
AUC ROC: 1.0
Total revision time: 3.753
Best scored revision CLL: -0.094637


Dataset: 4_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 03:32:41
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.094637, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 3.753, 'Inference time': 0.873, 'parameter_0.8': {'AUC ROC': 0.984468, 'AUC PR': 0.985712, 'CLL': -0.207939, 'Precision': [0.823961, 0.5], 'Recall': 1.0, 'F1': 0.903485, 'Learning time': 1.09, 'Inference time': 0.93}}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
3;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
3;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
3;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordauthor(D, C).;true;true
4;true,true;author(E, D), venue(E, B).;false;true
4;true,true,false;haswordtitle(F, C).;false;false
4;true,false;haswordtitle(G, C).;true;true
4;true,false,true;title(H, G), venue(H, A).;false;false
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(A, K), haswordtitle(L, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(B, I), haswordauthor(J, I).;false;false
5;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, B).;false;true
6;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
6;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
6;true,false,true;title(J, I), venue(J, B).;false;false
6;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
6;false;haswordvenue(A, M), haswordauthor(N, M).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
7;true,false,true;title(I, H), venue(I, B).;false;false
7;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
7;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;title(F, D), venue(F, B).;false;false
8;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
8;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
8;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;false;false
9;true,true,false;haswordvenue(A, D).;false;false
9;true,false;haswordtitle(H, C).;true;true
9;true,false,true;title(I, H), venue(I, B).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995115;  // std dev = 2.38e-07, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.44638422921715937;  // std dev = 2.029, 17.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048768;  // std dev = 3.80e-08, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109548;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.382955427940009;  // std dev = 2.029, 17.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839147;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, A) )
%   | | then return 0.4762902684922165;  // std dev = 0.303, 52.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=45 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.1123163781936064;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4368607064619766;  // std dev = 1.03e-07, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.20937066260071735;  // std dev = 2.029, 17.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783634;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.33386106594486853;  // std dev = 2.98e-08, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( genre(A, E) )
%   | | then return -0.09269127618926096;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.15900676189592922;  // std dev = 2.029, 17.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.092691276189261;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.26412566145715943;  // std dev = 6.66e-08, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.11969185541096104;  // std dev = 2.029, 17.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0851847513883968;  // std dev = 3.61e-09, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.21606275922465268;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08044452961445692;  // std dev = 2.036, 18.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109179;  // std dev = 5.27e-09, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18170732036440115;  // std dev = 4.71e-08, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( genre(A, E) )
%   | | then return -0.08481607953460156;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.06970784711502033;  // std dev = 2.029, 17.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07324622576333704;  // std dev = 9.13e-09, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07846009068853685;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.1562327071103127;  // std dev = 4.08e-08, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.05233428633189541;  // std dev = 2.029, 17.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420274;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1367248643321037;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else if ( movie(D, A) )
%   | | | then return 0.033105703257205056;  // std dev = 2.032, 18.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.06419184008202623;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */


Results
   AUC ROC   = 0.984468
   AUC PR    = 0.985712
   CLL	      = -0.209566
   Precision = 0.823961 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.903485


Total learning time: 1.202 seconds
Total inference time: 0.946 seconds
AUC ROC: 0.984468


Results scoring model
   AUC ROC   = 0.982716
   AUC PR    = 0.983099
   CLL	      = -0.205165
   Precision = 0.865385 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.927835


Total scoring time: 0.607 seconds
Parameter learned model CLL: -0.205165


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [2.38e-07, 0, 35], 'true,false,false,true': [2.029, 7, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.8e-08, 37, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 35], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [2.029, 7, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 37, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.303, 7, 45], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 37, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [1.03e-07, 0, 35], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [2.029, 7, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 37, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [2.98e-08, 0, 35], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [2.029, 7, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 37, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [6.66e-08, 0, 35], 'true,false,false,true': [2.029, 7, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.61e-09, 37, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 35], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [2.036, 8, 10], 'true,false,false': [0.0, 0, 0], 'false,true': [5.27e-09, 37, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [4.71e-08, 0, 35], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [2.029, 7, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.13e-09, 37, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [4.08e-08, 0, 35], 'true,false,false,true': [2.029, 7, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 37, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true,true,false': 'movie(D, A)'}, {'true,true,true,true': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 35], 'true,true,false,true': [2.032, 8, 10], 'true,true,false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false': [0.0, 37, 0]}]]
[{'': [0.12815948736205124, 3.900783600034334e-17], 'true': [0.0, 0.11649408284023735], 'true,false': [1.6240976817373718e-15, 0.24221453287197228], 'true,false,false': [0.24221453287197228, nan], 'false': [3.900783600034334e-17, nan]}, {'': [0.11213802534597815, -2.100421938480026e-17], 'true': [-7.105427357601002e-16, 0.24231990039435092], 'true,false': [0.0, 0.2422145328719721], 'true,false,false': [0.2422145328719721, nan], 'false': [-2.100421938480026e-17, nan]}, {'': [0.09673605756972632, -9.00180830777154e-18], 'true': [0.0, 0.09205942703852663], 'true,false': [0.09205942703852663, nan], 'false': [-9.00180830777154e-18, nan]}, {'': [0.09285127619386495, -9.00180830777154e-18], 'true': [3.0451831532575723e-16, 0.23383196003607948], 'true,false': [0.0, 0.24221453287197225], 'true,false,false': [0.24221453287197225, nan], 'false': [-9.00180830777154e-18, nan]}, {'': [0.08681807206364667, -1.050210969240013e-17], 'true': [2.5376526277146434e-17, 0.23208218950374812], 'true,false': [0.0, 0.24221453287197225], 'true,false,false': [0.24221453287197225, nan], 'false': [-1.050210969240013e-17, nan]}, {'': [0.08388460308291561, 1.350271246165731e-17], 'true': [0.0, 0.08377589350391022], 'true,false': [1.2688263138573217e-16, 0.2422145328719724], 'true,false,false': [0.2422145328719724, nan], 'false': [1.350271246165731e-17, nan]}, {'': [0.0823229290347969, 7.50150692314295e-19], 'true': [-5.709718412357947e-17, 0.23024942978103147], 'true,false': [0.23024942978103147, nan], 'true,false,true': [nan, 0.23024942978103147], 'false': [7.50150692314295e-19, nan]}, {'': [0.08137808442619897, 2.250452076942885e-18], 'true': [6.344131569286608e-17, 0.23001100927545126], 'true,false': [0.0, 0.24221453287197225], 'true,false,false': [0.24221453287197225, nan], 'false': [2.250452076942885e-18, nan]}, {'': [0.08076785173138866, -7.50150692314295e-19], 'true': [0.0, 0.08156087342964928], 'true,false': [4.7580986769649563e-17, 0.24221453287197228], 'true,false,false': [0.24221453287197228, nan], 'false': [-7.50150692314295e-19, nan]}, {'': [0.08032432056800094, -1.50030138462859e-18], 'true': [0.08032432056800094, nan], 'true,true': [-3.8064789415719653e-17, 0.22942007362069106], 'true,true,false': [0.22942007362069106, nan], 'true,true,true': [nan, -3.8064789415719653e-17]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, D).;true;true
4;true,false;genre(A, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(A, D).;true;true
5;true,false;genre(B, E).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, D).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
8;true,false;genre(B, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995115;  // std dev = 2.38e-07, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else if ( actor(B) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.14185106490048768;  // std dev = 3.80e-08, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109548;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( actor(B) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0.7194734122109544;  // std dev = 2.98e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.12544463852839147;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( actor(B) )
%   | | then return -0.11231637819360639;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.555366436746284;  // std dev = 1.79e-07, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.1123163781936064;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.41751358415831047;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( actor(B) )
%   | | | then return -0.10159632948783627;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0.4175135841583102;  // std dev = 2.11e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.10159632948783634;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.3207118471601495;  // std dev = 2.98e-08, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( genre(A, E) )
%   | | then return -0.09269127618926096;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( actor(B) )
%   | | | then return -0.09269127618926097;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0.3207118471601497;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.092691276189261;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.25517224256948956;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else if ( actor(B) )
%   | | | then return -0.08518475138839687;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0.2551722425694894;  // std dev = 1.83e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.0851847513883968;  // std dev = 2.24e-08, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.20975771563253542;  // std dev = 5.37e-08, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( actor(B) )
%   | | then return -0.07877675473109173;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0.2097577156325357;  // std dev = 1.97e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.07877675473109179;  // std dev = 5.27e-09, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1770964977452775;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( genre(A, E) )
%   | | then return -0.07324622576333704;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( actor(B) )
%   | | | then return -0.07324622576333704;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0.17709649774527736;  // std dev = 7.45e-09, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.07324622576333704;  // std dev = 9.13e-09, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.06842697784420272;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.1527438580936709;  // std dev = 3.49e-08, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else if ( actor(B) )
%   | | | then return -0.06842697784420272;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0.15274385809367094;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.06842697784420274;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13400703000801115;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( actor(B) )
%   | | then return -0.0641918400820262;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0.13400703000801117;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.06419184008202623;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.44 seconds
Total inference time: 0.947 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.629 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.8779999999999997 seconds
Total inference time: 0.947 seconds
AUC ROC: 1.0
Total revision time: 3.8779999999999997
Best scored revision CLL: -0.094637


Dataset: 4_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 03:32:47
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.094637, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 3.8779999999999997, 'Inference time': 0.947, 'parameter_1.0': {'AUC ROC': 0.984468, 'AUC PR': 0.985712, 'CLL': -0.209566, 'Precision': [0.823961, 0.5], 'Recall': 1.0, 'F1': 0.903485, 'Learning time': 1.202, 'Inference time': 0.946}}


