Starting experiment #6 for 11_yeast_cora

Loading pre-trained trees.
Starting fold 1

Target train facts examples: 7463
Target train pos examples: 368
Target train neg examples: 688

Target test facts examples: 35095
Target test pos  examples: 2649
Target test neg examples: 4334

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.23843062524035266;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.4581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.424815601766179;  // std dev = 2.714, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.004815601766179008;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.004815601766179008;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.20686012285620575;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.45935396641210174;  // std dev = 0.810, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.3982164798305049;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.36287359443791467;  // std dev = 2.715, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, A) )
%   | | then if ( samebib(K, L), venue(L, B) )
%   | | | then return 0.1488242116562869;  // std dev = 2.789, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return -0.14162905569876189;  // std dev = 0.023, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.12787230110394693;  // std dev = 0.016, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | then return 0.004228390109386251;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.1751801570305961;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.37391135762433364;  // std dev = 0.808, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.3269052770205085;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.2976445171077738;  // std dev = 2.715, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, B) )
%   | | then if ( samebib(K, L), venue(L, A) )
%   | | | then return 0.14976876060774358;  // std dev = 2.783, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return -0.14148503077066793;  // std dev = 0.043, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.13359848245519318;  // std dev = 0.038, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return 0.004507924439813003;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.14514481334590568;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.29107789104287257;  // std dev = 0.807, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.26358767085800217;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.23427726647373656;  // std dev = 2.715, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.11782635975506077;  // std dev = 0.047, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.003934642525147681;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.003958717519531329;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.11804668707041945;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.22080200794107122;  // std dev = 0.807, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.20295547503731384;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.18035198942428982;  // std dev = 2.715, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.10613899675299487;  // std dev = 0.043, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0034537792951347315;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.003474967571653639;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.09457696812283496;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.1585757331570609;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return 0.19406775007189458;  // std dev = 0.790, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.1331641893970731;  // std dev = 2.718, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then return -0.02924928858071336;  // std dev = 0.328, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, M), haswordvenue(A, M) )
%   | | | then return -0.09649651296227824;  // std dev = 0.040, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0030305752673812775;  // std dev = 2.996, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | | | then return 0.006905746264301325;  // std dev = 2.848, 67.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=10 */
%   | | | else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C) )
%   | | then return -0.10539005564974935;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.12761893168227487;  // std dev = 0.801, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.07595587115072004;  // std dev = 0.486, 847.000 (wgt'ed) examples reached here.  /* #neg=524 #pos=323 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.12040747229823859;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.10187486274421446;  // std dev = 2.716, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( title(L, K), venue(L, B) )
%   | | then return -0.002551969202656602;  // std dev = 0.336, 80.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=11 */
%   | | else return -0.09392243062559512;  // std dev = 0.045, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return 0.0026983133071839475;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.05876995206281016;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.09373361439671882;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return 0.11846823019467541;  // std dev = 0.788, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.0736778284425446;  // std dev = 2.718, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then return -0.029370117035154377;  // std dev = 0.328, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, M), haswordvenue(B, M) )
%   | | | then return -0.084685983225042;  // std dev = 0.038, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0023662943144487254;  // std dev = 2.996, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, N), haswordtitle(P, N) )
%   | | | then return 0.006980917514174799;  // std dev = 2.847, 67.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=10 */
%   | | | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04581813968556683;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.0894627006627543;  // std dev = 0.789, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.07033476462677712;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.05528934015916164;  // std dev = 2.718, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.07835726599111992;  // std dev = 0.035, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0020746068679060015;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.0027466459509703028;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.035543411401875155;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.06789330529428188;  // std dev = 0.789, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.05285664269140513;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.041507573532736625;  // std dev = 2.718, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then return -0.025932877867436466;  // std dev = 0.328, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then if ( title(M, L), venue(M, A) )
%   | | | then return -0.0018839476572566113;  // std dev = 2.998, 80.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=11 */
%   | | | else return -0.08393884838687045;  // std dev = 0.055, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(B, N), haswordtitle(P, N) )
%   | | | then return 0.005792869143047507;  // std dev = 2.847, 67.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=10 */
%   | | | else return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.557227
   AUC PR    = 0.428362
   CLL	      = -0.65536
   Precision = 0.637427 at threshold = 0.5
   Recall    = 0.041148
   F1        = 0.077305


Total learning time: 63.72303652763367 seconds
Total inference time: 6.816 seconds
AUC ROC: 0.557227


Results scoring model
   AUC ROC   = 0.593517
   AUC PR    = 0.42064
   CLL	      = -0.618662
   Precision = 0.578947 at threshold = 0.5
   Recall    = 0.059783
   F1        = 0.108374


Total scoring time: 1.013 seconds
Parameter learned model CLL: -0.618662


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)', 'false,false': 'haswordvenue(B, L), haswordtitle(M, L)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.816, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.714, 13, 17], 'false,true,true': [0.0, 12, 0], 'false,true,false': [0.354, 64, 11], 'false,false,true': [0.354, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'title(K, J), venue(K, A)', 'false,true,true': 'samebib(K, L), venue(L, B)', 'false,false': 'haswordvenue(B, M), haswordtitle(N, M)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.81, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.715, 13, 17], 'false,true,true,true': [2.789, 27, 11], 'false,true,true,false': [0.023, 42, 0], 'false,true,false': [0.016, 7, 0], 'false,false,true': [0.354, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'title(K, J), venue(K, B)', 'false,true,true': 'samebib(K, L), venue(L, A)', 'false,false': 'haswordvenue(A, M), haswordtitle(N, M)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.808, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.715, 13, 17], 'false,true,true,true': [2.783, 27, 11], 'false,true,true,false': [0.043, 42, 0], 'false,true,false': [0.038, 7, 0], 'false,false,true': [0.346, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(A, K)', 'false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.807, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.715, 13, 17], 'false,true,true': [0.047, 12, 0], 'false,true,false': [0.346, 64, 11], 'false,false,true': [0.346, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(A, K)', 'false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.807, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.715, 13, 17], 'false,true,true': [0.043, 12, 0], 'false,true,false': [0.346, 64, 11], 'false,false,true': [0.346, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordauthor(H, G)', 'false': 'haswordvenue(B, I), haswordauthor(J, I)', 'false,false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false,false,true': 'haswordtitle(L, M), haswordvenue(A, M)', 'false,false,false': 'haswordvenue(A, N), haswordtitle(P, N)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [1.095, 2, 3], 'true,false,false,true': [0.79, 1, 2], 'true,false,false,false': [2.718, 13, 17], 'false,true': [0.328, 7, 1], 'false,false,true,true': [0.04, 12, 0], 'false,false,true,false': [2.996, 64, 11], 'false,false,false,true': [2.848, 57, 10], 'false,false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordtitle(F, C)', 'true,false': 'haswordtitle(G, C)', 'true,false,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false,true': 'title(L, K), venue(L, B)', 'false,false': 'haswordvenue(A, M), haswordtitle(N, M)'}, {'true,true,true': [0.894, 4, 1], 'true,true,false': [0.801, 1, 2], 'true,false,true': [0.486, 524, 323], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.716, 13, 17], 'false,true,true': [0.336, 69, 11], 'false,true,false': [0.045, 7, 0], 'false,false,true': [0.346, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordauthor(H, G)', 'false': 'haswordvenue(A, I), haswordauthor(J, I)', 'false,false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false,false,true': 'haswordtitle(L, M), haswordvenue(B, M)', 'false,false,false': 'haswordvenue(B, N), haswordtitle(P, N)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [1.095, 2, 3], 'true,false,false,true': [0.788, 1, 2], 'true,false,false,false': [2.718, 13, 17], 'false,true': [0.328, 7, 1], 'false,false,true,true': [0.038, 12, 0], 'false,false,true,false': [2.996, 64, 11], 'false,false,false,true': [2.847, 57, 10], 'false,false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)', 'false,false': 'haswordvenue(B, L), haswordtitle(M, L)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.789, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.718, 13, 17], 'false,true,true': [0.035, 12, 0], 'false,true,false': [0.346, 64, 11], 'false,false,true': [0.346, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordauthor(J, I)', 'false,false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false,false,true': 'title(M, L), venue(M, A)', 'false,false,false': 'haswordvenue(B, N), haswordtitle(P, N)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.789, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.718, 13, 17], 'false,true': [0.328, 7, 1], 'false,false,true,true': [2.998, 69, 11], 'false,false,true,false': [0.055, 7, 0], 'false,false,false,true': [2.847, 57, 10], 'false,false,false,false': [0.0, 4, 0]}]]
[{'': [0.23762656230272572, 0.11496588764697444], 'true': [0.2356675262844691, 0.24376731301939172], 'true,false': [0.22222222222222224, 0.2448979591836734], 'true,false,false': [0.23999999999999994, 0.2455555555555551], 'false': [0.1104505218655035, 0.11985258772632539], 'false,false': [0.12515555555555502, 0.0], 'false,true': [-1.1564823173178714e-17, 0.12515555555555502]}, {'': [0.23716066162823082, 0.11455688633284844], 'true': [0.2356675262844735, 0.24352902641532298], 'true,false': [0.21859724583033524, 0.2450060599606714], 'true,false,false': [0.23999999999999994, 0.24566195763775367], 'false': [0.10989213699570438, 0.1196268538653256], 'false,false': [0.125155555555556, 0.0], 'false,true': [0.11826329058716308, 3.536127348451442e-05], 'false,true,true': [0.20467024545790047, 1.3096767957214494e-05]}, {'': [0.23670497169729687, 0.11200792539903102], 'true': [0.23566752628446727, 0.2432006312450957], 'true,false': [0.2176873624141201, 0.24497723310199554], 'true,false,false': [0.23999999999999994, 0.24568445879937517], 'false': [0.1098029509778292, 0.1143578111986426], 'false,false': [0.11976586065569501, 0.0], 'false,true': [0.11802298805418568, 0.0002095079382072417], 'false,true,true': [0.2038865424851494, 4.3248776258093215e-05]}, {'': [0.23636692863361694, 0.10942475837381227], 'true': [0.23566752628446358, 0.24295287544358243], 'true,false': [0.2171137183240305, 0.24494912041488717], 'true,false,false': [0.24000000000000005, 0.2456512452737729], 'false': [0.10500611231737597, 0.11422186192353925], 'false,false': [0.11974954934686752, 0.0], 'false,true': [0.00018710289543618272, 0.11973222393850279]}, {'': [0.23616359234674214, 0.10918423356002241], 'true': [0.235667526284474, 0.24279756660608162], 'true,false': [0.21685949250830014, 0.24491145649056065], 'true,false,false': [0.24000000000000005, 0.2456570443491981], 'false': [0.1046546882142193, 0.1141172078451467], 'false,false': [0.11973520847760942, 0.0], 'false,true': [0.00015548797119565444, 0.11971792900318097]}, {'': [0.23605801136481658, 0.10900163713688905], 'true': [0.23566752628446164, 0.24272183411996126], 'true,false': [0.23999999999999994, 0.24308225823984228], 'true,false,false': [0.20826812968158373, 0.2462264671226798], 'false': [0.10737257418635811, 0.10905605887068211], 'false,false': [0.10439019809387821, 0.11468851303083975], 'false,false,false': [0.12105780478733244, 0.0], 'false,false,true': [0.00013103775693821518, 0.11970536839724043]}, {'': [0.23600360696911463, 0.1088422826065404], 'true': [0.1928684272128383, 0.23631355933028983], 'true,false': [0.23592121091316542, 0.2450247284400093], 'true,false,false': [0.24, 0.24581311780617046], 'true,true': [0.15999999999999998, 0.21371589662330084], 'false': [0.10418646559556585, 0.11393191691323053], 'false,false': [0.11967217509568255, 0.0], 'false,true': [0.11260529222745708, 0.0002944661842005409]}, {'': [0.23591108296193422, 0.10876600556972965], 'true': [0.23559515405302808, 0.2425690319619927], 'true,false': [0.24, 0.24292466264235787], 'true,false,false': [0.20723714854496178, 0.24631103404399596], 'false': [0.10736684078308903, 0.10880632405625973], 'false,false': [0.10407447014341667, 0.11452386649665479], 'false,false,false': [0.12099849848196063, 0.0], 'false,false,true': [0.00011773183762420897, 0.11966229323443829]}, {'': [0.23589722613103134, 0.10864819369475111], 'true': [0.23559370784290773, 0.24251078560321437], 'true,false': [0.2074799670116386, 0.2454324637113295], 'true,false,false': [0.24, 0.24630553650168296], 'false': [0.1039329907798203, 0.11380596802826147], 'false,false': [0.11961912929065634, 0.0], 'false,true': [0.00010207859656979901, 0.11965362139512514]}, {'': [0.2358905921291721, 0.10856699223155748], 'true': [0.23559263159770755, 0.24248404522473857], 'true,false': [0.2077212127906335, 0.24541529994738914], 'true,false,false': [0.24000000000000005, 0.24629944974279652], 'false': [0.10740009111995857, 0.10860255603835009], 'false,false': [0.10381907916255632, 0.11440517229188407], 'false,false,false': [0.12095939608379282, 0.0], 'false,false,true': [0.11232358750445989, 0.00043342755246296736]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
0;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true
0;false,false;haswordvenue(B, L), haswordtitle(M, L).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
1;false,true;title(K, J), venue(K, A).;true;true
1;false,true,true;samebib(K, L), venue(L, B).;true;true
1;false,false;haswordvenue(B, M), haswordtitle(N, M).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
2;false,true;title(K, J), venue(K, B).;true;true
2;false,true,true;samebib(K, L), venue(L, A).;true;true
2;false,false;haswordvenue(A, M), haswordtitle(N, M).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
3;false,true;haswordtitle(J, K), haswordvenue(A, K).;true;true
3;false,false;haswordvenue(A, L), haswordtitle(M, L).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
4;false,true;haswordtitle(J, K), haswordvenue(A, K).;true;true
4;false,false;haswordvenue(A, L), haswordtitle(M, L).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;false;haswordvenue(B, I), haswordauthor(J, I).;true;true
5;false,false;haswordvenue(B, K), haswordtitle(L, K).;true;true
5;false,false,true;haswordtitle(L, M), haswordvenue(A, M).;true;true
5;false,false,false;haswordvenue(A, N), haswordtitle(P, N).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;false;haswordvenue(B, J), haswordtitle(K, J).;true;true
6;false,true;title(L, K), venue(L, B).;true;true
6;false,false;haswordvenue(A, M), haswordtitle(N, M).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;false;haswordvenue(A, I), haswordauthor(J, I).;true;true
7;false,false;haswordvenue(A, K), haswordtitle(L, K).;true;true
7;false,false,true;haswordtitle(L, M), haswordvenue(B, M).;true;true
7;false,false,false;haswordvenue(B, N), haswordtitle(P, N).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
8;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true
8;false,false;haswordvenue(B, L), haswordtitle(M, L).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;false;haswordvenue(A, I), haswordauthor(J, I).;true;true
9;false,false;haswordvenue(A, K), haswordtitle(L, K).;true;true
9;false,false,true;title(M, L), venue(M, A).;true;true
9;false,false,false;haswordvenue(B, N), haswordtitle(P, N).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.23843062524035266;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.4581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.424815601766179;  // std dev = 2.714, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.004815601766179008;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.004815601766179008;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.20686012285620575;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.3982164798305049;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return 0.448295606241962;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.3639794304549286;  // std dev = 2.714, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, A) )
%   | | then if ( samebib(K, L), venue(L, B) )
%   | | | then return 0.1488242116562869;  // std dev = 2.789, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return -0.14162905569876189;  // std dev = 0.023, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.12787230110394693;  // std dev = 0.016, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | then return 0.004228390109386251;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.1751801570305961;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.3874028246526538;  // std dev = 0.802, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.326685698020276;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.29629366162004606;  // std dev = 2.716, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.12205676751791567;  // std dev = 0.051, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0037111125833978686;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.004507924439813003;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.14514481334590568;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.30343404142094477;  // std dev = 0.800, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.2572776609517914;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.23409518151899947;  // std dev = 2.716, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.10959153340338802;  // std dev = 0.046, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0032558270569705674;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.003958717519531329;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.11804668707041945;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.22704465640986907;  // std dev = 0.801, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.20982557127366733;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.178585899586726;  // std dev = 2.716, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.09936314977686865;  // std dev = 0.042, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0028554031467501392;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.003474967571653639;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.09457696812283496;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.1589134469358017;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.15362357151153508;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.13598103958014834;  // std dev = 2.611, 28.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=16 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then return -0.02924928858071336;  // std dev = 0.328, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, M), haswordvenue(A, M) )
%   | | | then return -0.09083148463204621;  // std dev = 0.039, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.002503460836945874;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | | | then return 0.006905746264301325;  // std dev = 2.848, 67.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=10 */
%   | | | else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.07489163449109286;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.1367494341112044;  // std dev = 0.801, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.11945019440726082;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.10112455904340086;  // std dev = 2.715, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then return -0.02547885425532247;  // std dev = 0.328, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, M), haswordvenue(A, M) )
%   | | | then return -0.08361444281056883;  // std dev = 0.036, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0021943081594878503;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | | | then return 0.0060627512250952245;  // std dev = 2.848, 67.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=10 */
%   | | | else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C) )
%   | | then return -0.12150391422280449;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.10292317702002181;  // std dev = 0.801, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.05984201257766986;  // std dev = 0.486, 847.000 (wgt'ed) examples reached here.  /* #neg=524 #pos=323 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.09014483786378462;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.07582344997247645;  // std dev = 2.715, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | then return -0.022256437277363594;  // std dev = 0.328, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return -0.009023028145667288;  // std dev = 0.330, 87.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=11 */
%   | | else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | | | then return 0.005319246817521065;  // std dev = 2.847, 67.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=10 */
%   | | | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04581639818104974;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.07067529597994984;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return 0.10001505092901024;  // std dev = 0.789, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.0541610406063261;  // std dev = 2.718, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, A) )
%   | | then if ( samebib(K, L), venue(L, B) )
%   | | | then return 0.13366842096736273;  // std dev = 2.765, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return -0.12601022804063094;  // std dev = 0.083, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.07884204798571702;  // std dev = 0.056, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | then return 0.003036291169087561;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.035542037491345754;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.07575042821991584;  // std dev = 0.789, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.05419587130449401;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.04048288042179696;  // std dev = 2.718, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, A) )
%   | | then if ( samebib(K, L), venue(L, B) )
%   | | | then return 0.11534845032338509;  // std dev = 2.762, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return -0.11279180384865664;  // std dev = 0.075, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.07333522069673122;  // std dev = 0.053, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | then return 0.0026624210020518477;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.5572
   AUC PR    = 0.428419
   CLL	      = -0.654243
   Precision = 0.637427 at threshold = 0.5
   Recall    = 0.041148
   F1        = 0.077305


Total learning time: 59.53157901763916 seconds
Total inference time: 7.947 seconds
AUC ROC: 0.5572


Results scoring model
   AUC ROC   = 0.592437
   AUC PR    = 0.420344
   CLL	      = -0.618137
   Precision = 0.578947 at threshold = 0.5
   Recall    = 0.059783
   F1        = 0.108374


Total scoring time: 1.106 seconds
Refined model CLL: -0.618137


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.5572
   AUC PR    = 0.428419
   CLL	      = -0.654243
   Precision = 0.637427 at threshold = 0.5
   Recall    = 0.041148
   F1        = 0.077305


Total learning time: 125.37361554527283 seconds
Total inference time: 7.947 seconds
AUC ROC: 0.5572
Total revision time: 125.37361554527283
Best scored revision CLL: -0.618137


Dataset: 11_yeast_cora, Fold: 1, Type: Transfer (trRDN-B), Time: 00:02:20
{'AUC ROC': 0.5572, 'AUC PR': 0.428419, 'CLL': -0.654243, 'Precision': [0.637427, 0.5], 'Recall': 0.041148, 'F1': 0.077305, 'Learning time': 125.37361554527283, 'Inference time': 7.947, 'parameter': {'AUC ROC': 0.557227, 'AUC PR': 0.428362, 'CLL': -0.65536, 'Precision': [0.637427, 0.5], 'Recall': 0.041148, 'F1': 0.077305, 'Learning time': 63.72303652763367, 'Inference time': 6.816}}


Starting fold 2

Target train facts examples: 9016
Target train pos examples: 771
Target train neg examples: 544

Target test facts examples: 33542
Target test pos  examples: 2246
Target test neg examples: 4478

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.4356367001892301;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.5949910403626703;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.5640312880406888;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.37395569825543723;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.5062567560764839;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.48074388375574334;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.7194734122109543;  // std dev = 7.30e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.5791684237702857;  // std dev = 0.357, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(A, C) )
%   | | then return 0.22916842377028543;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, A) )
%   | | | then return -0.008145345695425868;  // std dev = 0.852, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.07083157622971455;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.3045453081923796;  // std dev = 0.494, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.4047531668618019;  // std dev = 1.919, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.4246457186582997;  // std dev = 1.908, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then return 0.43170309793098227;  // std dev = 0.348, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | else return 0.20848477447886868;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.24202763793698798;  // std dev = 0.493, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.3098169854894562;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.2877826293809521;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.44960468245709945;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.44785888933339724;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.17062637354018512;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.1316730160126654;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.45582386531502966;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.12696337948380887;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return -0.15761628867465108;  // std dev = 0.411, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then if ( haswordtitle(H, F) )
%   | | then return 0.3843074996866285;  // std dev = 0.365, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | else if ( author(I, G), venue(I, A) )
%   | | | then return -0.05005598060633537;  // std dev = 0.846, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.10593105372516383;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, J), haswordvenue(B, J) )
%   | | then if ( haswordtitle(K, J) )
%   | | | then return 0.18243715358426912;  // std dev = 16.896, 1,167.000 (wgt'ed) examples reached here.  /* #neg=498 #pos=669 */
%   | | | else return 0.23950150742553888;  // std dev = 2.697, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | | else return 0.23313045189186318;  // std dev = 0.387, 46.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.14102390748116136;  // std dev = 0.492, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.17335674088763253;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.15686404918843033;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.29082631070165044;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.2910448708292866;  // std dev = 4.21e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.09208876864605069;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.05449232621719143;  // std dev = 0.487, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.10615107903249343;  // std dev = 0.492, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.14745670194951416;  // std dev = 0.439, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.1003248406824972;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.23465675922697118;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.23480781430934297;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.07127250192219396;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.041734075890796314;  // std dev = 0.487, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.23560656877061179;  // std dev = 0.357, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.036204817827179006;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.0968287293479842;  // std dev = 1.220, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.07841406709149748;  // std dev = 0.493, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.11230208586484315;  // std dev = 1.915, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.1035691871257904;  // std dev = 1.893, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.19526310630973093;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.05477980406408624;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.03185733431476397;  // std dev = 0.487, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.2614084840490138;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.02719023869428383;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.18146857933875202;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.05819928768645119;  // std dev = 0.493, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.08636158531370781;  // std dev = 1.915, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.08158041803994065;  // std dev = 1.895, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.16639009137095254;  // std dev = 2.36e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.04189949055738364;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.024261387840744244;  // std dev = 0.487, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.0450105238791079;  // std dev = 0.491, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.06413077851011592;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.03776343739531888;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.16770130546183382;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.14457244593840896;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.03193888603245625;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.018446003051164114;  // std dev = 0.487, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */


Results
   AUC ROC   = 0.537416
   AUC PR    = 0.345724
   CLL	      = -0.756811
   Precision = 0.353813 at threshold = 0.5
   Recall    = 0.956367
   F1        = 0.516532


Total learning time: 58.51071119308472 seconds
Total inference time: 6.427 seconds
AUC ROC: 0.537416


Results scoring model
   AUC ROC   = 0.553717
   AUC PR    = 0.662696
   CLL	      = -0.66487
   Precision = 0.594317 at threshold = 0.5
   Recall    = 0.976654
   F1        = 0.73896


Total scoring time: 1.096 seconds
Parameter learned model CLL: -0.66487


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)'}, {'true,true': [0.494, 518, 708], 'true,false,true': [0.44, 5, 14], 'true,false,false,true': [1.879, 5, 12], 'true,false,false,false': [0.0, 0, 5], 'false,true,true': [0.0, 0, 20], 'false,true,false': [0.495, 8, 6], 'false,false': [0.495, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)'}, {'true,true': [0.494, 518, 708], 'true,false,true': [0.44, 5, 14], 'true,false,false,true': [1.879, 5, 12], 'true,false,false,false': [0.0, 0, 5], 'false,true,true': [7.3e-08, 0, 20], 'false,true,false': [0.495, 8, 6], 'false,false': [0.495, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(B, C), haswordauthor(D, C)', 'true': 'haswordtitle(E, C)', 'true,false': 'haswordvenue(A, C)', 'true,false,false': 'author(F, D), venue(F, A)', 'false': 'haswordvenue(A, G), haswordvenue(B, G)', 'false,true': 'haswordtitle(H, G)', 'false,true,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,false': 'haswordvenue(B, K), haswordtitle(L, K)'}, {'true,true': [0.357, 3, 17], 'true,false,true': [1.0, 2, 2], 'true,false,false,true': [0.852, 3, 1], 'true,false,false,false': [0.894, 4, 1], 'false,true,true': [0.494, 507, 687], 'false,true,false,true': [1.919, 5, 14], 'false,true,false,false': [1.908, 5, 17], 'false,false,true': [0.348, 7, 26], 'false,false,false': [0.495, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)'}, {'true,true': [0.493, 518, 708], 'true,false,true': [0.44, 5, 14], 'true,false,false,true': [1.879, 5, 12], 'true,false,false,false': [0.0, 0, 5], 'false,true,true': [0.0, 0, 20], 'false,true,false': [0.495, 8, 6], 'false,false': [0.49, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(E, C)', 'true,false': 'haswordvenue(B, C)', 'false': 'haswordvenue(B, F), haswordauthor(G, F)', 'false,true': 'haswordtitle(H, F)', 'false,true,false': 'author(I, G), venue(I, A)', 'false,false': 'haswordvenue(A, J), haswordvenue(B, J)', 'false,false,true': 'haswordtitle(K, J)'}, {'true,true': [0.356, 3, 17], 'true,false,true': [1.0, 2, 2], 'true,false,false': [0.411, 7, 2], 'false,true,true': [0.365, 3, 16], 'false,true,false,true': [0.846, 3, 1], 'false,true,false,false': [0.894, 4, 1], 'false,false,true,true': [16.896, 498, 669], 'false,false,true,false': [2.697, 10, 31], 'false,false,false': [0.387, 14, 32]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)'}, {'true,true': [0.492, 518, 708], 'true,false,true': [0.44, 5, 14], 'true,false,false,true': [1.879, 5, 12], 'true,false,false,false': [0.0, 0, 5], 'false,true,true': [4.21e-08, 0, 20], 'false,true,false': [0.49, 8, 6], 'false,false': [0.487, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)'}, {'true,true': [0.492, 518, 708], 'true,false,true': [0.439, 5, 14], 'true,false,false,true': [1.879, 5, 12], 'true,false,false,false': [0.0, 0, 5], 'false,true,true': [0.0, 0, 20], 'false,true,false': [0.49, 8, 6], 'false,false': [0.487, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordtitle(F, D)', 'true,true,false': 'haswordvenue(A, D)', 'true,false': 'haswordtitle(G, C)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)'}, {'true,true,true': [0.357, 3, 17], 'true,true,false,true': [1.0, 2, 2], 'true,true,false,false': [1.22, 6, 2], 'true,false,true': [0.493, 507, 687], 'true,false,false,true': [1.915, 5, 14], 'true,false,false,false': [1.893, 5, 17], 'false,true,true': [0.0, 0, 20], 'false,true,false': [0.49, 8, 6], 'false,false': [0.487, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordtitle(F, D)', 'true,true,false': 'haswordvenue(B, D)', 'true,false': 'haswordtitle(G, C)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)'}, {'true,true,true': [0.356, 3, 17], 'true,true,false,true': [1.0, 2, 2], 'true,true,false,false': [1.225, 6, 2], 'true,false,true': [0.493, 507, 687], 'true,false,false,true': [1.915, 5, 14], 'true,false,false,false': [1.895, 5, 17], 'false,true,true': [2.36e-08, 0, 20], 'false,true,false': [0.49, 8, 6], 'false,false': [0.487, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)'}, {'true,true': [0.491, 518, 708], 'true,false,true': [0.44, 5, 14], 'true,false,false,true': [1.879, 5, 12], 'true,false,false,false': [0.0, 0, 5], 'false,true,true': [0.0, 0, 20], 'false,true,false': [0.49, 8, 6], 'false,false': [0.487, 8, 6]}]]
[{'': [0.24306651325713594, 0.22222222222222385], 'true': [0.24399564626142126, 0.1844140392623454], 'false': [0.17993079584775207, 0.24489795918367352], 'true,false': [0.19390581717451486, 0.17561983471074338], 'false,true': [-8.881784197001253e-17, 0.24489795918367352], 'true,false,false': [0.20761245674740453, 0.0]}, {'': [0.2426572019465864, 0.1968581969586748], 'true': [0.2439956462613994, 0.18151807630785113], 'false': [0.15465453537750254, 0.24489795918367324], 'true,false': [0.193905817174515, 0.170436695832288], 'true,false,false': [0.20761245674740458, 0.0], 'false,true': [2.6645352591003756e-16, 0.24489795918367324]}, {'': [0.22952352137572604, 0.2399408807915939], 'false': [0.2425357552287182, 0.16862805083149526], 'false,true': [0.24431832529482975, 0.17873720595178566], 'true': [0.12749999999999978, 0.21079846857026777], 'true,false': [0.25, 0.17058790973374105], 'false,true,false': [0.1939058171745152, 0.16545366223293653], 'true,false,false': [0.18163970606836305, 0.16000000000000003], 'false,false': [0.12142920769740266, 0.2448979591836735]}, {'': [0.24128939398264887, 0.163109397436664], 'true': [0.24320497507578648, 0.17846373208604324], 'true,false': [0.1939058171745152, 0.16502665466276994], 'true,false,false': [0.20761245674740475, -4.4408920985006264e-17], 'false': [0.11945642868432348, 0.2402119567889687], 'false,true': [-4.4408920985006264e-17, 0.24489795918367352]}, {'': [0.2259874237000261, 0.23815862947593605], 'false': [0.1918526221578641, 0.23914109313580628], 'false,false': [0.24245971700904134, 0.14970114887353728], 'false,false,true': [0.24463227179307584, 0.17747557038612435], 'true': [0.12670848542176477, 0.21112012601826036], 'true,false': [0.25, 0.1689215397097055], 'false,true': [0.13296398891966743, 0.16919314925079756], 'false,true,false': [0.178950128149831, 0.15999999999999998]}, {'': [0.2398465125666374, 0.15098858776410343], 'true': [0.24187412787286452, 0.1776815512923005], 'true,false': [0.19390581717451524, 0.16357946128482845], 'true,false,false': [0.2076124567474048, 0.0], 'false': [0.10854676167825768, 0.23712515636127476], 'false,true': [8.881784197001253e-17, 0.2403291343134472]}, {'': [0.2397985249474197, 0.14703271133216264], 'true': [0.2418559381797228, 0.17726123082266249], 'true,false': [0.192935217271088, 0.1635968787033383], 'true,false,false': [0.20761245674740483, -2.2204460492503132e-17], 'false': [0.10537690749095874, 0.23699844003581497], 'false,true': [-1.1102230246251566e-17, 0.2401837006475438]}, {'': [0.2397735464581338, 0.14480876480212726], 'true': [0.17821156919395245, 0.24131002446319014], 'true,false': [0.24349518693402628, 0.17684937879360377], 'true,true': [0.12726122895195727, 0.2112561161180344], 'true,true,false': [0.25, 0.18598486595238284], 'true,false,false': [0.19296634363731985, 0.16289484025172313], 'false': [0.1036364072193658, 0.23690592285239917], 'false,true': [-2.7755575615628914e-17, 0.24007926564460344]}, {'': [0.2395399518402008, 0.1434438561920344], 'true': [0.19346586995405773, 0.24063554838581544], 'true,false': [0.24279770497806644, 0.17703588519367364], 'true,true': [0.1264761701834714, 0.2180085560762097], 'true,true,false': [0.24999999999999997, 0.18749999999999994], 'true,false,false': [0.1929954296201435, 0.1632420488250386], 'false': [0.10257913337073797, 0.23683806780202876], 'false,true': [2.7755575615628914e-17, 0.24000433500654306]}, {'': [0.2391232466608485, 0.14253918527464393], 'true': [0.24117995531980901, 0.1772032764314508], 'true,false': [0.1931888132658081, 0.16339294635523027], 'true,false,false': [0.20761245674740486, 0.0], 'false': [0.10187590756861505, 0.23678805062742764], 'false,true': [-1.6653345369377347e-17, 0.2399503779002823]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,false;haswordvenue(A, E), haswordtitle(F, E).;true;true
0;true,false,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
0;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
0;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,false;haswordvenue(A, E), haswordtitle(F, E).;true;true
1;true,false,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
1;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,false;haswordvenue(A, E), haswordtitle(F, E).;true;true
3;true,false,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
3;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
3;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,false;haswordvenue(A, E), haswordtitle(F, E).;true;true
5;true,false,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
5;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
5;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,false;haswordvenue(B, E), haswordtitle(F, E).;true;true
6;true,false,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
6;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;false;haswordvenue(A, J), haswordtitle(K, J).;true;true
7;false,true;haswordtitle(K, L), haswordvenue(B, L).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;false;haswordvenue(A, J), haswordtitle(K, J).;true;true
8;false,true;haswordtitle(K, L), haswordvenue(B, L).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,false;haswordvenue(A, E), haswordtitle(F, E).;true;true
9;true,false,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
9;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
9;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.4356367001892301;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.5949910403626703;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.5640312880406888;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.37395569825543723;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.5062567560764839;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.48074388375574334;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.7194734122109543;  // std dev = 7.30e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.30665618885999163;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.4047531668618019;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.386198448632422;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.5553664367462845;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return 0.5553664367462846;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.20848477447886868;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.20848477447886868;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.24206322397592006;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.3261448737160187;  // std dev = 0.439, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.2788572331674748;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.4175135841583099;  // std dev = 1.49e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return 0.41751358415830986;  // std dev = 5.16e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.17062637354018512;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.17062637354018512;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.18614898381430323;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.24558668125641064;  // std dev = 0.439, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.20966773150020385;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.32071184716014967;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return 0.3207118471601496;  // std dev = 2.11e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.13664585375352212;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.13664585375352212;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.4135394151203006;  // std dev = 0.357, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordauthor(G, C) )
%   | | | then return 0.06353941512030048;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.18646058487969952;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.13891629954241463;  // std dev = 0.494, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.18620428986064227;  // std dev = 1.914, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.1780591823696338;  // std dev = 1.889, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(B, M) )
%   | | then return 0.25517224256948945;  // std dev = 1.49e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.10762034996184425;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.10762034996184425;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.10607297606371259;  // std dev = 0.493, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.14069831902044802;  // std dev = 0.439, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.11182490944275833;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.22282594249614798;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return 0.2097577156325356;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.08372807955323866;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.08372807955323866;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.28436269371614803;  // std dev = 0.357, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.021468495816831842;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, B) )
%   | | | then return -0.15359877422512092;  // std dev = 0.852, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.21679924075512394;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.07801434228425021;  // std dev = 0.494, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.11338907398478108;  // std dev = 1.913, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.1029967727968177;  // std dev = 1.891, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then return 0.14575648741360903;  // std dev = 0.315, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | else return 0.06457405393631672;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.32729464503742767;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(A, C) )
%   | | then return 0.01610900228836465;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, A) )
%   | | | then return -0.23241319313053402;  // std dev = 0.834, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.31685970905863414;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.05763556343164669;  // std dev = 0.493, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.08717198788728615;  // std dev = 1.913, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.08121098580551007;  // std dev = 1.893, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then return 0.12754308155564562;  // std dev = 0.315, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | else return 0.03514825127375719;  // std dev = 0.491, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04494788940633013;  // std dev = 0.492, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.06760447246468297;  // std dev = 0.439, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.03644612829664183;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.1602583480670301;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.1407053679176325;  // std dev = 2.11e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.026741040421907634;  // std dev = 0.491, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.02500777762497341;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */


Results
   AUC ROC   = 0.537393
   AUC PR    = 0.346154
   CLL	      = -0.755848
   Precision = 0.35429 at threshold = 0.5
   Recall    = 0.955922
   F1        = 0.516976


Total learning time: 60.57134127616882 seconds
Total inference time: 6.275 seconds
AUC ROC: 0.537393


Results scoring model
   AUC ROC   = 0.553404
   AUC PR    = 0.660708
   CLL	      = -0.666233
   Precision = 0.594317 at threshold = 0.5
   Recall    = 0.976654
   F1        = 0.73896


Total scoring time: 1.016 seconds
Refined model CLL: -0.666233


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.537416
   AUC PR    = 0.345724
   CLL	      = -0.756811
   Precision = 0.353813 at threshold = 0.5
   Recall    = 0.956367
   F1        = 0.516532


Total learning time: 121.19405246925355 seconds
Total inference time: 6.427 seconds
AUC ROC: 0.537416
Total revision time: 121.19405246925355
Best scored revision CLL: -0.66487


Dataset: 11_yeast_cora, Fold: 2, Type: Transfer (trRDN-B), Time: 00:04:35
{'AUC ROC': 0.537416, 'AUC PR': 0.345724, 'CLL': -0.756811, 'Precision': [0.353813, 0.5], 'Recall': 0.956367, 'F1': 0.516532, 'Learning time': 121.19405246925355, 'Inference time': 6.427, 'parameter': {'AUC ROC': 0.537416, 'AUC PR': 0.345724, 'CLL': -0.756811, 'Precision': [0.353813, 0.5], 'Recall': 0.956367, 'F1': 0.516532, 'Learning time': 58.51071119308472, 'Inference time': 6.427}}


Starting fold 3

Target train facts examples: 9306
Target train pos examples: 581
Target train neg examples: 2222

Target test facts examples: 33252
Target test pos  examples: 2436
Target test neg examples: 2800

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.21931527042091228;  // std dev = 0.480, 1,509.000 (wgt'ed) examples reached here.  /* #neg=964 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.524815601766179;  // std dev = 2.309, 24.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=16 */
%   | | | else return -0.14185106490048766;  // std dev = 6.50e-08, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   | | else if ( title(H, E), venue(H, B) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0.0803711573217344;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.017440970497742472;  // std dev = 3.890, 113.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=18 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.18667851970528962;  // std dev = 0.479, 1,525.000 (wgt'ed) examples reached here.  /* #neg=980 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return -0.010696589574320712;  // std dev = 0.312, 15.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | then if ( title(H, G), venue(H, B) )
%   | | | then return 0.05113451789015799;  // std dev = 3.589, 82.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=16 */
%   | | | else return -0.05307834242026366;  // std dev = 1.348, 22.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.023282025702456924;  // std dev = 3.368, 95.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=16 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.16215819393536646;  // std dev = 0.480, 1,510.000 (wgt'ed) examples reached here.  /* #neg=965 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return -0.03960326004812092;  // std dev = 0.305, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then if ( title(H, G), venue(H, A) )
%   | | | then return 0.035759900952917034;  // std dev = 3.292, 87.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=16 */
%   | | | else return -0.0262104998261396;  // std dev = 1.313, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.024965098340584916;  // std dev = 3.633, 93.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=16 */
%   | | | else return -0.11231637819360638;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13506900891897308;  // std dev = 0.480, 1,510.000 (wgt'ed) examples reached here.  /* #neg=965 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.6141141771384806;  // std dev = 1.591, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return -0.1312352101852378;  // std dev = 0.014, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | | else if ( title(H, E), venue(H, B) )
%   | | | then return -0.1251237129106246;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.048457941718671196;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return 0.043148437417540125;  // std dev = 3.586, 82.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=16 */
%   | | | else return -0.035293737124978984;  // std dev = 1.338, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | | else return -0.10413839712580875;  // std dev = 0.011, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10286413846473397;  // std dev = 0.478, 1,543.000 (wgt'ed) examples reached here.  /* #neg=998 #pos=545 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.5370697008677385;  // std dev = 2.209, 23.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=16 */
%   | | | else return -0.15734013443879624;  // std dev = 0.049, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   | | else if ( title(H, E), venue(H, A) )
%   | | | then return -0.13634722964963222;  // std dev = 7.45e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.030319437017034465;  // std dev = 1.291, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return -0.010465925520989105;  // std dev = 2.934, 99.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=16 */
%   | | | else return -0.04518439983652267;  // std dev = 1.323, 21.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=2 */
%   | | else return -0.0958414143158145;  // std dev = 0.008, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.15843191689982739;  // std dev = 0.495, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | else return 0.039384297852208136;  // std dev = 0.462, 42.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=13 */
%   | else return 0.08826157233925137;  // std dev = 0.480, 1,476.000 (wgt'ed) examples reached here.  /* #neg=947 #pos=529 */
%   else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | then if ( title(I, H), venue(I, A) )
%   | | then if ( samebib(I, J), venue(J, B) )
%   | | | then return 0.411148188385161;  // std dev = 1.954, 21.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=16 */
%   | | | else return -0.11605826401178887;  // std dev = 0.013, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   | | else return -0.04188112754526254;  // std dev = 0.275, 23.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=2 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( title(M, L), venue(M, A) )
%   | | | then return -0.007811807209335007;  // std dev = 3.330, 106.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=16 */
%   | | | else return 0.08226515219949605;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return -0.08777164761157825;  // std dev = 0.009, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.12608444998277524;  // std dev = 0.495, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | else return 0.017479944447618925;  // std dev = 0.456, 44.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=13 */
%   | else return 0.07099725111224969;  // std dev = 0.480, 1,474.000 (wgt'ed) examples reached here.  /* #neg=945 #pos=529 */
%   else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | then if ( title(I, H), venue(I, B) )
%   | | then if ( samebib(I, J), venue(J, A) )
%   | | | then return 0.5583401076445444;  // std dev = 1.786, 20.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=16 */
%   | | | else return -0.13745369558559267;  // std dev = 0.029, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   | | else if ( title(K, H), venue(K, A) )
%   | | | then return -0.12024363367002334;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.07206665251121448;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.002899704374677408;  // std dev = 0.270, 106.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=18 */
%   | | else return -0.07925872672900916;  // std dev = 0.005, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.059909234759386726;  // std dev = 0.481, 1,505.000 (wgt'ed) examples reached here.  /* #neg=960 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.35028907301934203;  // std dev = 1.791, 20.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=16 */
%   | | | else return -0.10463105916865216;  // std dev = 0.014, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | | else if ( title(H, E), venue(H, B) )
%   | | | then return -0.10395159517787704;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return -0.004150601788710226;  // std dev = 1.309, 14.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return -0.01874722151169364;  // std dev = 2.966, 98.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=16 */
%   | | | else return -0.05247983608923107;  // std dev = 1.327, 23.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=2 */
%   | | else return -0.07484945569872546;  // std dev = 0.008, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.08546678948337735;  // std dev = 0.495, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | else return -0.026564282632076185;  // std dev = 0.453, 45.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=13 */
%   | else return 0.046201395994039385;  // std dev = 0.480, 1,465.000 (wgt'ed) examples reached here.  /* #neg=936 #pos=529 */
%   else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | then if ( title(I, H), venue(I, B) )
%   | | then if ( samebib(I, J), venue(J, A) )
%   | | | then return 0.4083860947125468;  // std dev = 1.950, 21.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=16 */
%   | | | else return -0.1189842443761027;  // std dev = 0.040, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   | | else if ( title(K, H), venue(K, A) )
%   | | | then return -0.1031366670217768;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.0011739682870265345;  // std dev = 1.301, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return -0.012050333859842974;  // std dev = 0.269, 98.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=18 */
%   | | else return -0.06776925597219068;  // std dev = 1.32e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.028620529513070907;  // std dev = 0.478, 1,543.000 (wgt'ed) examples reached here.  /* #neg=998 #pos=545 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.30980856456242345;  // std dev = 1.956, 21.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=16 */
%   | | | else return -0.10744771066802414;  // std dev = 0.026, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
%   | | else if ( title(H, E), venue(H, A) )
%   | | | then return -0.09397950638537408;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return -0.00996697315101422;  // std dev = 1.309, 14.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then return -0.009763699036680427;  // std dev = 0.197, 14.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | | then return -0.08869182613775865;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.029665194425145664;  // std dev = 2.718, 90.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=16 */


Results
   AUC ROC   = 0.564258
   AUC PR    = 0.510273
   CLL	      = -0.705965
   Precision = 0.566372 at threshold = 0.5
   Recall    = 0.052545
   F1        = 0.096168


Total learning time: 44.12182092666626 seconds
Total inference time: 5.434 seconds
AUC ROC: 0.564258


Results scoring model
   AUC ROC   = 0.594627
   AUC PR    = 0.278165
   CLL	      = -0.510974
   Precision = 0.592593 at threshold = 0.5
   Recall    = 0.055077
   F1        = 0.100787


Total scoring time: 1.494 seconds
Parameter learned model CLL: -0.510974


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordtitle(E, D)', 'false,true': 'title(F, E), venue(F, A)', 'false,true,true': 'samebib(F, G), venue(G, B)', 'false,true,false': 'title(H, E), venue(H, B)', 'false,false': 'haswordvenue(B, I), haswordauthor(J, I)', 'false,false,false': 'haswordvenue(B, K), haswordtitle(L, K)'}, {'true': [0.48, 964, 545], 'false,true,true,true': [2.309, 8, 16], 'false,true,true,false': [6.5e-08, 64, 0], 'false,true,false,true': [0.0, 7, 0], 'false,true,false,false': [1.247, 7, 2], 'false,false,true': [0.0, 4, 0], 'false,false,false,true': [3.89, 95, 18], 'false,false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(B, F), haswordtitle(G, F)', 'false,false,true': 'title(H, G), venue(H, B)', 'false,false,false': 'haswordvenue(A, I), haswordtitle(J, I)'}, {'true': [0.479, 980, 545], 'false,true': [0.312, 13, 2], 'false,false,true,true': [3.589, 66, 16], 'false,false,true,false': [1.348, 20, 2], 'false,false,false,true': [3.368, 79, 16], 'false,false,false,false': [0.0, 5, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(A, F), haswordtitle(G, F)', 'false,false,true': 'title(H, G), venue(H, A)', 'false,false,false': 'haswordvenue(B, I), haswordtitle(J, I)'}, {'true': [0.48, 965, 545], 'false,true': [0.305, 17, 2], 'false,false,true,true': [3.292, 71, 16], 'false,false,true,false': [1.313, 15, 2], 'false,false,false,true': [3.633, 77, 16], 'false,false,false,false': [0.0, 5, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordtitle(E, D)', 'false,true': 'title(F, E), venue(F, A)', 'false,true,true': 'samebib(F, G), venue(G, B)', 'false,true,false': 'title(H, E), venue(H, B)', 'false,false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,false,true': 'title(K, J), venue(K, B)'}, {'true': [0.48, 965, 545], 'false,true,true,true': [1.591, 3, 16], 'false,true,true,false': [0.014, 61, 0], 'false,true,false,true': [0.0, 8, 0], 'false,true,false,false': [1.265, 8, 2], 'false,false,true,true': [3.586, 66, 16], 'false,false,true,false': [1.338, 17, 2], 'false,false,false': [0.011, 7, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordtitle(E, D)', 'false,true': 'title(F, E), venue(F, B)', 'false,true,true': 'samebib(F, G), venue(G, A)', 'false,true,false': 'title(H, E), venue(H, A)', 'false,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,false,true': 'title(K, J), venue(K, A)'}, {'true': [0.478, 998, 545], 'false,true,true,true': [2.209, 7, 16], 'false,true,true,false': [0.049, 63, 0], 'false,true,false,true': [7.45e-09, 8, 0], 'false,true,false,false': [1.291, 10, 2], 'false,false,true,true': [2.934, 83, 16], 'false,false,true,false': [1.323, 19, 2], 'false,false,false': [0.008, 3, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordauthor(F, C)', 'false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false,true': 'title(I, H), venue(I, A)', 'false,true,true': 'samebib(I, J), venue(J, B)', 'false,false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false,false,true': 'title(M, L), venue(M, A)'}, {'true,true,true': [0.495, 4, 3], 'true,true,false': [0.462, 29, 13], 'true,false': [0.48, 947, 529], 'false,true,true,true': [1.954, 5, 16], 'false,true,true,false': [0.013, 66, 0], 'false,true,false': [0.275, 21, 2], 'false,false,true,true': [3.33, 90, 16], 'false,false,true,false': [1.247, 7, 2], 'false,false,false': [0.009, 5, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordauthor(F, C)', 'false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false,true': 'title(I, H), venue(I, B)', 'false,true,true': 'samebib(I, J), venue(J, A)', 'false,true,false': 'title(K, H), venue(K, A)', 'false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true,true': [0.495, 4, 3], 'true,true,false': [0.456, 31, 13], 'true,false': [0.48, 945, 529], 'false,true,true,true': [1.786, 4, 16], 'false,true,true,false': [0.029, 64, 0], 'false,true,false,true': [0.0, 8, 0], 'false,true,false,false': [1.247, 7, 2], 'false,false,true': [0.27, 88, 18], 'false,false,false': [0.005, 5, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordtitle(E, D)', 'false,true': 'title(F, E), venue(F, A)', 'false,true,true': 'samebib(F, G), venue(G, B)', 'false,true,false': 'title(H, E), venue(H, B)', 'false,false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,false,true': 'title(K, J), venue(K, B)'}, {'true': [0.481, 960, 545], 'false,true,true,true': [1.791, 4, 16], 'false,true,true,false': [0.014, 61, 0], 'false,true,false,true': [0.0, 6, 0], 'false,true,false,false': [1.309, 12, 2], 'false,false,true,true': [2.966, 82, 16], 'false,false,true,false': [1.327, 21, 2], 'false,false,false': [0.008, 6, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordauthor(F, C)', 'false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false,true': 'title(I, H), venue(I, B)', 'false,true,true': 'samebib(I, J), venue(J, A)', 'false,true,false': 'title(K, H), venue(K, A)', 'false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true,true': [0.495, 4, 3], 'true,true,false': [0.453, 32, 13], 'true,false': [0.48, 936, 529], 'false,true,true,true': [1.95, 5, 16], 'false,true,true,false': [0.04, 68, 0], 'false,true,false,true': [0.0, 8, 0], 'false,true,false,false': [1.301, 11, 2], 'false,false,true': [0.269, 80, 18], 'false,false,false': [1.32e-09, 3, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordtitle(E, D)', 'false,true': 'title(F, E), venue(F, B)', 'false,true,true': 'samebib(F, G), venue(G, A)', 'false,true,false': 'title(H, E), venue(H, A)', 'false,false': 'haswordvenue(B, I), haswordauthor(J, I)', 'false,false,false': 'haswordvenue(A, K), haswordauthor(L, K)'}, {'true': [0.478, 998, 545], 'false,true,true,true': [1.956, 5, 16], 'false,true,true,false': [0.026, 67, 0], 'false,true,false,true': [0.0, 10, 0], 'false,true,false,false': [1.309, 12, 2], 'false,false,true': [0.197, 12, 2], 'false,false,false,true': [1.86e-09, 3, 0], 'false,false,false,false': [2.718, 74, 16]}]]
[{'': [0.23072521355189787, 0.13440000000000107], 'false': [0.1431213017751474, 0.12663069462468354], 'false,true': [0.14876033057851187, 0.10937500000000004], 'false,true,true': [0.2222222222222218, 6.591949208711867e-17], 'false,false': [0.0, 0.13017751479289885], 'false,false,false': [0.13391808285691856, 0.0], 'false,true,false': [-7.93016446160826e-18, 0.17283950617283952]}, {'': [0.22965869389946814, 0.12701423115338814], 'false': [0.09711290339950758, 0.12913693409202612], 'false,false': [0.14312130177514856, 0.11450377302882947], 'false,false,true': [0.15704937537180308, 0.08264462809917364], 'false,false,false': [0.11942430636610613, 0.0]}, {'': [0.23065874303757378, 0.1255177147310064], 'false': [0.09314150097925754, 0.12823769712713426], 'false,false': [0.12130249165421977, 0.13556722532612822], 'false,false,false': [0.14189424481735907, 0.0], 'false,false,true': [0.1245689271794066, 0.10137344326681128]}, {'': [0.23065874303759873, 0.1323370108982206], 'false': [0.12647144065628282, 0.1375874509335492], 'false,false': [0.1459835836501506, 1.7374188073291624e-05], 'false,false,true': [0.156828670424313, 0.09418282548476464], 'false,true': [0.1322348508833781, 0.096328540944159], 'false,true,true': [0.133164654888908, 3.133868526665314e-06], 'false,true,false': [0.0, 0.16]}, {'': [0.22845211939100857, 0.11065382223350556], 'false': [0.14032950501420033, 0.08452428367675903], 'false,true': [0.1512436913286104, 0.08999999999999993], 'false,true,true': [0.21217364334688585, 3.761562541250804e-05], 'false,true,false': [6.938893903907228e-18, 0.13888888888888884], 'false,false': [0.08648344818332494, 2.262900603434634e-05], 'false,false,true': [0.08693972027031642, 0.08333801892328559]}, {'': [0.2296586938994908, 0.09910046942047507], 'true': [0.2199083715118704, 0.22994974699069634], 'true,true': [0.2448979591836735, 0.21371882086167834], 'false': [0.09128393296630626, 0.10625599592228356], 'false,false': [0.1105597266426536, 1.5006562785085942e-05], 'false,false,true': [0.10463682320264285, 0.1728395061728395], 'false,true': [0.09477151228503801, 0.07586344363853023], 'false,true,true': [0.18176047360816372, 2.637301124472778e-06]}, {'': [0.22961748980871113, 0.09487095440076941], 'true': [0.21460017258283345, 0.23008722883670787], 'true,true': [0.24489795918367344, 0.2081611570247935], 'false': [0.12190063290963765, 0.0700630353344579], 'false,true': [0.12582158154822073, 0.1007170870891499], 'false,true,true': [0.1595496996611813, 1.2731158524958985e-05], 'false,true,false': [0.0, 0.17283950617283952], 'false,false': [0.07306362072415552, 4.671676918471812e-06]}, {'': [0.23094019097508134, 0.08219605811243635], 'false': [0.08027947316409406, 0.08339907478628254], 'false,false': [0.0874173977216321, 1.0426066307381762e-05], 'false,false,true': [0.08975809071859285, 0.07652241388795111], 'false,true': [0.0780753342673127, 0.08780593575339324], 'false,true,false': [0.0, 0.12244897959183668], 'false,true,true': [0.16034221140758897, 3.2477454388239938e-06]}, {'': [0.23017153962371376, 0.08136130838536242], 'true': [0.21220692344917172, 0.23069513054231736], 'true,true': [0.24489795918367346, 0.2054320987654322], 'false': [0.09131631826454306, 0.07045892810247652], 'false,true': [0.092872868144906, 0.08315205269131123], 'false,true,true': [0.1810334357486722, 2.311426031914424e-05], 'false,true,false': [0.0, 0.13017751479289946], 'false,false': [0.07252361827426171, 5.782411586589357e-19]}, {'': [0.22831606728862322, 0.07464799342529815], 'false': [0.07491904555631539, 0.0742792806018912], 'false,true': [0.07510822880824064, 0.07314408324048745], 'false,true,true': [0.18215116613390156, 1.0198503081995865e-05], 'false,false': [0.03896513312749698, 0.07953317605150334], 'false,false,false': [1.1564823173178713e-18, 0.08207189020210173], 'false,true,false': [-5.551115123125783e-18, 0.1224489795918368]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;false;haswordvenue(A, D), haswordtitle(E, D).;true;true
0;false,true;title(F, E), venue(F, A).;true;true
0;false,true,true;samebib(F, G), venue(G, B).;true;true
0;false,true,false;title(H, E), venue(H, B).;true;true
0;false,false;haswordvenue(B, I), haswordauthor(J, I).;true;true
0;false,false,false;haswordvenue(B, K), haswordtitle(L, K).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
1;false,false;haswordvenue(B, F), haswordtitle(G, F).;true;true
1;false,false,false;haswordvenue(A, I), haswordtitle(J, I).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
2;false,false;haswordvenue(A, F), haswordtitle(G, F).;true;true
2;false,false,false;haswordvenue(B, I), haswordtitle(J, I).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;false;haswordvenue(A, D), haswordtitle(E, D).;true;true
3;false,true;title(F, E), venue(F, A).;true;true
3;false,true,true;samebib(F, G), venue(G, B).;true;true
3;false,true,false;title(H, E), venue(H, B).;true;true
3;false,false;haswordvenue(B, I), haswordtitle(J, I).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
4;false,true;title(F, E), venue(F, B).;true;true
4;false,true,true;samebib(F, G), venue(G, A).;true;true
4;false,true,false;title(H, E), venue(H, A).;true;true
4;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;false;haswordvenue(A, G), haswordtitle(H, G).;true;true
5;false,true;title(I, H), venue(I, A).;true;true
5;false,true,true;samebib(I, J), venue(J, B).;true;true
5;false,false;haswordvenue(B, K), haswordtitle(L, K).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;false,true;title(I, H), venue(I, B).;true;true
6;false,true,true;samebib(I, J), venue(J, A).;true;true
6;false,true,false;title(K, H), venue(K, A).;true;true
6;false,false;haswordvenue(A, L), haswordtitle(M, L).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;false;haswordvenue(A, D), haswordtitle(E, D).;true;true
7;false,true;title(F, E), venue(F, A).;true;true
7;false,true,true;samebib(F, G), venue(G, B).;true;true
7;false,true,false;title(H, E), venue(H, B).;true;true
7;false,false;haswordvenue(B, I), haswordtitle(J, I).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;false;haswordvenue(B, G), haswordtitle(H, G).;true;true
8;false,true;title(I, H), venue(I, B).;true;true
8;false,true,true;samebib(I, J), venue(J, A).;true;true
8;false,true,false;title(K, H), venue(K, A).;true;true
8;false,false;haswordvenue(A, L), haswordtitle(M, L).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
9;false,true;title(F, E), venue(F, B).;true;true
9;false,true,true;samebib(F, G), venue(G, A).;true;true
9;false,true,false;title(H, E), venue(H, A).;true;true
9;false,false;haswordvenue(B, I), haswordauthor(J, I).;true;true
9;false,false,false;haswordvenue(A, K), haswordauthor(L, K).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.21836043542997663;  // std dev = 0.480, 1,513.000 (wgt'ed) examples reached here.  /* #neg=968 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.6581489350995123;  // std dev = 1.789, 20.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=16 */
%   | | | else return -0.14185106490048766;  // std dev = 5.77e-08, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | | else if ( title(H, E), venue(H, B) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0.024815601766178853;  // std dev = 1.291, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | | then return 0.024815601766178853;  // std dev = 1.291, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | | | else return 0.023097388707759806;  // std dev = 3.655, 97.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=16 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C) )
%   | | then return 0.1555235515077918;  // std dev = 0.469, 46.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=15 */
%   | | else return 0.029436594986052594;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.19807770996864996;  // std dev = 0.482, 1,435.000 (wgt'ed) examples reached here.  /* #neg=906 #pos=529 */
%   else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | then if ( title(I, H), venue(I, B) )
%   | | then if ( title(J, H), venue(J, A) )
%   | | | then return 0.3224289417817891;  // std dev = 2.560, 30.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=16 */
%   | | | else return -0.12745388037062869;  // std dev = 0.116, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | | else return 0.10510121752573909;  // std dev = 0.433, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( title(M, L), venue(M, B) )
%   | | | then return 0.03153532446824089;  // std dev = 3.630, 91.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=16 */
%   | | | else return -0.06135268703995441;  // std dev = 1.354, 24.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=2 */
%   | | else return -0.14468602037328773;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C) )
%   | | then return 0.12623487389693444;  // std dev = 0.469, 46.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=15 */
%   | | else return 0.1585650147076376;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return 0.16255909375840483;  // std dev = 0.481, 1,458.000 (wgt'ed) examples reached here.  /* #neg=929 #pos=529 */
%   else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | then if ( title(I, H), venue(I, B) )
%   | | then if ( title(J, H), venue(J, A) )
%   | | | then return 0.44394400557912034;  // std dev = 2.553, 27.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=16 */
%   | | | else return -0.14796404435518265;  // std dev = 0.027, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | | else return -0.06582919462941794;  // std dev = 0.258, 28.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=2 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then if ( title(M, L), venue(M, A) )
%   | | | then return 0.004953739138655156;  // std dev = 3.052, 96.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=16 */
%   | | | else return -0.02183886924396448;  // std dev = 1.308, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | else return -0.12774835098448253;  // std dev = 0.000156, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13872085287132985;  // std dev = 0.482, 1,489.000 (wgt'ed) examples reached here.  /* #neg=944 #pos=545 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.628149255266418;  // std dev = 1.589, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return -0.14267160238874066;  // std dev = 0.246, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   | | else if ( title(H, E), venue(H, A) )
%   | | | then return -0.12964688840536054;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.05217129341282128;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.009965719106624036;  // std dev = 3.039, 92.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=16 */
%   | | | else return -0.03587187308579123;  // std dev = 1.319, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | | else return -0.11416284762407036;  // std dev = 0.000151, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.11364058177374549;  // std dev = 0.482, 1,488.000 (wgt'ed) examples reached here.  /* #neg=943 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.386588993914972;  // std dev = 2.207, 23.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=16 */
%   | | | else return -0.11922272279462645;  // std dev = 0.146, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | | else return 0.09913002126355197;  // std dev = 0.433, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return -0.00457834782321923;  // std dev = 0.272, 14.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | | else return -0.0022633893133566724;  // std dev = 0.308, 99.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=16 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08041391116240107;  // std dev = 0.479, 1,535.000 (wgt'ed) examples reached here.  /* #neg=990 #pos=545 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.3635229801635561;  // std dev = 2.172, 23.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=16 */
%   | | | else return -0.12113009761292559;  // std dev = 0.180, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | | else return 0.1503310227198506;  // std dev = 0.452, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return 0.004403022279200662;  // std dev = 2.775, 81.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=16 */
%   | | | else return -0.026326067416522436;  // std dev = 1.301, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | | else return -0.10001613063383237;  // std dev = 0.013, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.16357830885062788;  // std dev = 0.491, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | else return 0.05056715623896279;  // std dev = 0.471, 39.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=13 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return 0.04096862421508106;  // std dev = 0.468, 40.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=13 */
%   | | else return 0.07088378841553541;  // std dev = 0.481, 1,424.000 (wgt'ed) examples reached here.  /* #neg=908 #pos=516 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then return -0.03470834558772821;  // std dev = 0.204, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then if ( title(M, L), venue(M, B) )
%   | | | then return 0.002256665354591122;  // std dev = 2.752, 86.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=16 */
%   | | | else return 0.03956431907866724;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else if ( haswordvenue(B, N), haswordtitle(P, N) )
%   | | | then return -0.01220888382601961;  // std dev = 2.850, 94.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=16 */
%   | | | else return -0.09399703408229446;  // std dev = 2.63e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04834149752088037;  // std dev = 0.478, 1,540.000 (wgt'ed) examples reached here.  /* #neg=995 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.36329328428087176;  // std dev = 1.952, 21.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=16 */
%   | | | else return -0.10774762881939784;  // std dev = 0.153, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
%   | | else return 0.05638552675892296;  // std dev = 0.416, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return -0.004874835935848891;  // std dev = 2.663, 91.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=16 */
%   | | | else return -0.031377417257883386;  // std dev = 1.318, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | | else return -0.08724009674785509;  // std dev = 0.004, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.19032648620329562;  // std dev = 1.217, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.0069858877347108266;  // std dev = 0.462, 42.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=13 */
%   | else return 0.04059075375231344;  // std dev = 0.479, 1,482.000 (wgt'ed) examples reached here.  /* #neg=953 #pos=529 */
%   else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | then if ( title(I, H), venue(I, A) )
%   | | then if ( samebib(I, J), venue(J, B) )
%   | | | then return 0.28955050785456493;  // std dev = 2.128, 23.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=16 */
%   | | | else return -0.10852492486483306;  // std dev = 0.187, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
%   | | else return 0.018295259175773383;  // std dev = 0.373, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | then return -0.09016178240533079;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return -0.024602716967532447;  // std dev = 2.876, 104.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=18 */
%   | | | else return -0.07683583556788849;  // std dev = 0.010, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C) )
%   | | then return -0.0036042950460846144;  // std dev = 0.462, 48.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=15 */
%   | | else return -0.14105050531550023;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return 0.047337316061210964;  // std dev = 0.477, 37.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=13 */
%   | | else return 0.028608930953095253;  // std dev = 0.478, 1,457.000 (wgt'ed) examples reached here.  /* #neg=941 #pos=516 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, B) )
%   | | then if ( samebib(K, L), venue(L, A) )
%   | | | then return 0.22331435058279875;  // std dev = 2.142, 23.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=16 */
%   | | | else return -0.09563747268409449;  // std dev = 0.131, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
%   | | else return 0.011537996283394664;  // std dev = 0.386, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | then return -0.02320058094237089;  // std dev = 0.260, 118.000 (wgt'ed) examples reached here.  /* #neg=100 #pos=18 */
%   | | else return -0.07420286885144847;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */


Results
   AUC ROC   = 0.563336
   AUC PR    = 0.510543
   CLL	      = -0.706053
   Precision = 0.585987 at threshold = 0.5
   Recall    = 0.037767
   F1        = 0.07096


Total learning time: 54.63253569602966 seconds
Total inference time: 5.859 seconds
AUC ROC: 0.563336


Results scoring model
   AUC ROC   = 0.594901
   AUC PR    = 0.281618
   CLL	      = -0.510631
   Precision = 0.64 at threshold = 0.5
   Recall    = 0.027539
   F1        = 0.052805


Total scoring time: 1.651 seconds
Refined model CLL: -0.510631


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.563336
   AUC PR    = 0.510543
   CLL	      = -0.706053
   Precision = 0.585987 at threshold = 0.5
   Recall    = 0.037767
   F1        = 0.07096


Total learning time: 101.89935662269592 seconds
Total inference time: 5.859 seconds
AUC ROC: 0.563336
Total revision time: 101.89935662269592
Best scored revision CLL: -0.510631


Dataset: 11_yeast_cora, Fold: 3, Type: Transfer (trRDN-B), Time: 00:06:28
{'AUC ROC': 0.563336, 'AUC PR': 0.510543, 'CLL': -0.706053, 'Precision': [0.585987, 0.5], 'Recall': 0.037767, 'F1': 0.07096, 'Learning time': 101.89935662269592, 'Inference time': 5.859, 'parameter': {'AUC ROC': 0.564258, 'AUC PR': 0.510273, 'CLL': -0.705965, 'Precision': [0.566372, 0.5], 'Recall': 0.052545, 'F1': 0.096168, 'Learning time': 44.12182092666626, 'Inference time': 5.434}}


Starting fold 4

Target train facts examples: 8129
Target train pos examples: 747
Target train neg examples: 1068

Target test facts examples: 34429
Target test pos  examples: 2270
Target test neg examples: 3954

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.27854694504975613;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.2867203636709409;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.44905802600860323;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.44905802600860323;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.5724346493852266;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.1914822684328457;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.05814893509951237;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.05814893509951237;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.2411503606196619;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.24811816884741328;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.3851926776601658;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.3851926776601658;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.48767788391726297;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.16653882456488167;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.05092203251355405;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.05092203251355405;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.20289930723994204;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.20848477447886868;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.31518052304212246;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.31518052304212246;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.3912569620992536;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.1420942428155646;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.04434629760466855;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.04434629760466855;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.16640029396569495;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.17062637354018492;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.24804771389482108;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.24804771389482108;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.3005711547884894;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.11914890490746433;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.03842866223690456;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.03842866223690456;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.13360339271793026;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.13664585375352234;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.19020231164899937;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.19020231164899937;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.22629823971521876;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.0984134027840187;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.033154945921885746;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.033154945921885746;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.10551742939082928;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.10762034996184403;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.14379027326522745;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.14379027326522745;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.16984358676510128;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.08026654944252247;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.028495105925721097;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.028495105925721097;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.08232251291348108;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.08372807955323855;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.10803450809035726;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.10803450809035726;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.12813320688246752;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.06479591611329234;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.024408230135271918;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.024408230135271918;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.643264127386356;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.3567358726136441;  // std dev = 1.05e-08, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.44326412738635596;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.06140014753749459;  // std dev = 0.493, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.07181637161845014;  // std dev = 3.490, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.08499200024019614;  // std dev = 2.598, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(B, M) )
%   | | then return 0.05187916934404051;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.02084688910874009;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.02084688910874009;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04885269410068614;  // std dev = 0.492, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.047791622767503754;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.05982472210084225;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.06310719533483268;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.07755378535239986;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.04126932998424623;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.017760671541598414;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.017760671541598414;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.0373839853112712;  // std dev = 0.492, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.03646059667981454;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.04495842566861542;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.047411920818227433;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.05981227890717639;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.03266374873483021;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.015098879183171418;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.015098879183171418;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */


Results
   AUC ROC   = 0.569277
   AUC PR    = 0.430631
   CLL	      = -0.641283
   Precision = 0.721212 at threshold = 0.5
   Recall    = 0.052423
   F1        = 0.097741


Total learning time: 88.8569929599762 seconds
Total inference time: 7.184 seconds
AUC ROC: 0.569277


Results scoring model
   AUC ROC   = 0.548071
   AUC PR    = 0.461521
   CLL	      = -0.668103
   Precision = 0.661017 at threshold = 0.5
   Recall    = 0.052209
   F1        = 0.096774


Total scoring time: 1.339 seconds
Parameter learned model CLL: -0.668103


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(B, G)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)'}, {'true,true': [0.494, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(B, G)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)'}, {'true,true': [0.494, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(B, G)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)'}, {'true,true': [0.494, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(B, G)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(A, L)'}, {'true,true': [0.494, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(B, G)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)'}, {'true,true': [0.494, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(A, G)', 'true,false,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)'}, {'true,true': [0.494, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(A, G)', 'true,false,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)'}, {'true,true': [0.494, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, B)', 'true,true,true': 'samebib(F, G), venue(G, A)', 'true,false': 'haswordtitle(H, C)', 'true,false,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false,true': 'haswordtitle(L, M), haswordvenue(B, M)'}, {'true,true,true,true': [0.0, 0, 8], 'true,true,true,false': [1.05e-08, 7, 0], 'true,true,false': [0.894, 1, 4], 'true,false,true': [0.493, 924, 664], 'true,false,false,true': [3.49, 25, 25], 'true,false,false,false': [2.598, 11, 18], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(A, G)', 'true,false,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)'}, {'true,true': [0.492, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(A, G)', 'true,false,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)'}, {'true,true': [0.492, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}]]
[{'': [0.24455361249545102, 0.17089843750000108], 'true': [0.24366352318011741, 0.24803717352988336], 'true,false': [0.25000000000000133, 0.2354340071343634], 'true,false,true': [0.24489795918367302, 0.2417355371900822], 'true,false,false': [0.2417355371900822, 0.20408163265306106], 'false': [0.17864514918371124, 0.15999999999999948], 'false,true': [0.22222222222222232, 0.15999999999999948]}, {'': [0.24423965838627765, 0.17036542604714272], 'true': [0.24366352318012574, 0.24554974033866359], 'true,false': [0.24813620683257942, 0.2345699639132994], 'true,false,true': [0.244897959183673, 0.2417355371900833], 'true,false,false': [0.2417355371900833, 0.20408163265306115], 'false': [0.177825777852918, 0.1600000000000007], 'false,true': [0.22222222222222207, 0.1600000000000007]}, {'': [0.2439315722131504, 0.16990467702453838], 'true': [0.2436635231801326, 0.2431019584682027], 'true,false': [0.2463115068589203, 0.2337064665173659], 'true,false,true': [0.24489795918367316, 0.24173553719008264], 'true,false,false': [0.24173553719008264, 0.20408163265306115], 'false': [0.1771174918718374, 0.15999999999999953], 'false,true': [0.22222222222222218, 0.15999999999999953]}, {'': [0.24371075047936075, 0.16953742675793848], 'true': [0.24366352318009946, 0.24136967032829015], 'true,false': [0.24498343086187796, 0.23315182613521263], 'true,false,true': [0.24489795918367355, 0.24173553719008264], 'true,false,false': [0.24173553719008264, 0.2040816326530612], 'false': [0.17655293676131073, 0.15999999999999967], 'false,true': [0.2222222222222222, 0.15999999999999967]}, {'': [0.24358519092549577, 0.16926465814576508], 'true': [0.2436635231801065, 0.24040290855188662], 'true,false': [0.2442132411930144, 0.2328852475902263], 'true,false,true': [0.24489795918367332, 0.2417355371900829], 'true,false,false': [0.2417355371900829, 0.20408163265306128], 'false': [0.1761336234809733, 0.15999999999999995], 'false,true': [0.22222222222222218, 0.15999999999999995]}, {'': [0.24352324389713034, 0.16907391107668154], 'true': [0.2436635231801034, 0.2399333213191563], 'true,false': [0.24382884959637013, 0.232770957821724], 'true,false,true': [0.2448979591836737, 0.24173553719008273], 'true,false,false': [0.24173553719008273, 0.2040816326530612], 'false': [0.17584039773694396, 0.1599999999999999], 'false,true': [0.22222222222222215, 0.1599999999999999]}, {'': [0.24349468828678997, 0.168947125674667], 'true': [0.24366352318011533, 0.23971846166636634], 'true,false': [0.24365206723466531, 0.23272063453101924], 'true,false,true': [0.24489795918367374, 0.24173553719008273], 'true,false,false': [0.24173553719008273, 0.20408163265306126], 'false': [0.17564549700260332, 0.16000000000000006], 'false,true': [0.22222222222222227, 0.16000000000000006]}, {'': [0.2434817327151265, 0.16886637846587366], 'true': [0.2399999999999999, 0.2431345055989353], 'true,false': [0.24329828880328883, 0.23962063189587657], 'true,true': [0.2488888888888888, 0.15999999999999998], 'true,true,true': [-5.551115123125783e-17, 1.586032892321652e-17], 'true,false,false': [0.24357324953519557, 0.23269590225807743], 'false': [0.17552136843543573, 0.16000000000000014], 'false,true': [0.2222222222222222, 0.16000000000000014]}, {'': [0.24232283070515176, 0.16881678838519856], 'true': [0.24245269502368455, 0.23959897735418634], 'true,false': [0.24354217111265875, 0.23268488057808212], 'true,false,true': [0.2448979591836736, 0.24173553719008262], 'true,false,false': [0.2417355371900827, 0.20408163265306126], 'false': [0.1754451361327745, 0.16000000000000014], 'false,true': [0.22222222222222213, 0.16000000000000014]}, {'': [0.24231108890729683, 0.16878728508251153], 'true': [0.2424439482542363, 0.23956576957677556], 'true,false': [0.24352428681372307, 0.2326748211218517], 'true,false,true': [0.24489795918367369, 0.24173553719008262], 'true,false,false': [0.24173553719008273, 0.20408163265306123], 'false': [0.17539978220978475, 0.16000000000000011], 'false,true': [0.22222222222222202, 0.16000000000000011]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordvenue(A, D), haswordauthor(E, D).;true;true
7;true,true;author(F, E), venue(F, B).;true;true
7;true,true,true;samebib(F, G), venue(G, A).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.27854694504975613;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.2867203636709409;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.44905802600860323;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.44905802600860323;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.5724346493852266;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.1914822684328457;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.05814893509951237;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.05814893509951237;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.2411503606196619;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.24811816884741328;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.3851926776601658;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.3851926776601658;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.48767788391726297;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.16653882456488167;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.05092203251355405;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.05092203251355405;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.20289930723994204;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.20848477447886868;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.31518052304212246;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.31518052304212246;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.3912569620992536;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.1420942428155646;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.04434629760466855;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.04434629760466855;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.16640029396569495;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.17062637354018492;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.24804771389482108;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.24804771389482108;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.3005711547884894;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.11914890490746433;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.03842866223690456;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.03842866223690456;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.13360339271793026;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.13664585375352234;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.19020231164899937;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.19020231164899937;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.22629823971521876;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( title(L, K), venue(L, B) )
%   | | then if ( samebib(L, M), venue(M, A) )
%   | | | then return 0.3234299635688567;  // std dev = 2.623, 28.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=14 */
%   | | | else return -0.1765700364311428;  // std dev = 0.141, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | else return 0.07188755709780537;  // std dev = 0.454, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | else return 0.033154945921885746;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.10551742939082928;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.10762034996184403;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.14379027326522745;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.14379027326522745;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.16984358676510128;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.0862347787799619;  // std dev = 0.454, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.028495105925721097;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.02380666001612694;  // std dev = 0.381, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, B) )
%   | then if ( samebib(E, F), venue(F, A) )
%   | | then return 0.6619245029632226;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.31415049403603673;  // std dev = 0.063, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0.46192450296322257;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.08006052311436539;  // std dev = 0.493, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.09442290810957082;  // std dev = 3.490, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.1128859181436253;  // std dev = 2.598, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, M), haswordvenue(A, M) )
%   | | | then return 0.06994291324218899;  // std dev = 1.923, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.024408230135271918;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.023449125540929813;  // std dev = 0.383, 54.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.6261213289298206;  // std dev = 0.132, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.35621697000062597;  // std dev = 1.05e-08, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.42548591742271225;  // std dev = 0.878, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.06143834897304951;  // std dev = 0.492, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.06989444765074912;  // std dev = 3.490, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.08844418635859636;  // std dev = 2.598, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(A, M) )
%   | | then return 0.05623587149796373;  // std dev = 0.453, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.02084688910874009;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.017598723432629016;  // std dev = 0.380, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.4738295136086452;  // std dev = 0.132, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.2792794226499696;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.32245579128417506;  // std dev = 0.877, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.047228518933871755;  // std dev = 0.492, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.053040161076097;  // std dev = 3.490, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.06670007574050647;  // std dev = 2.598, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(A, M) )
%   | | then return 0.04490356233790243;  // std dev = 0.452, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.017760671541598414;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.014985375111165702;  // std dev = 0.380, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.03725946590902054;  // std dev = 0.491, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.03311343795250355;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.04579413424616789;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.04916181494246716;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.06495179667361996;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.03566104264835142;  // std dev = 0.452, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.015098879183171418;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.012737588997782138;  // std dev = 0.380, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */


Results
   AUC ROC   = 0.574491
   AUC PR    = 0.435796
   CLL	      = -0.636676
   Precision = 0.592105 at threshold = 0.5
   Recall    = 0.079295
   F1        = 0.13986


Total learning time: 96.11368250846863 seconds
Total inference time: 7.96 seconds
AUC ROC: 0.574491


Results scoring model
   AUC ROC   = 0.557419
   AUC PR    = 0.478535
   CLL	      = -0.662759
   Precision = 0.704225 at threshold = 0.5
   Recall    = 0.066934
   F1        = 0.122249


Total scoring time: 1.257 seconds
Refined model CLL: -0.662759


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.574491
   AUC PR    = 0.435796
   CLL	      = -0.636676
   Precision = 0.592105 at threshold = 0.5
   Recall    = 0.079295
   F1        = 0.13986


Total learning time: 187.56667546844483 seconds
Total inference time: 7.96 seconds
AUC ROC: 0.574491
Total revision time: 187.56667546844483
Best scored revision CLL: -0.662759


Dataset: 11_yeast_cora, Fold: 4, Type: Transfer (trRDN-B), Time: 00:09:52
{'AUC ROC': 0.574491, 'AUC PR': 0.435796, 'CLL': -0.636676, 'Precision': [0.592105, 0.5], 'Recall': 0.079295, 'F1': 0.13986, 'Learning time': 187.56667546844483, 'Inference time': 7.96, 'parameter': {'AUC ROC': 0.569277, 'AUC PR': 0.430631, 'CLL': -0.641283, 'Precision': [0.721212, 0.5], 'Recall': 0.052423, 'F1': 0.097741, 'Learning time': 88.8569929599762, 'Inference time': 7.184}}


Starting fold 5

Target train facts examples: 8644
Target train pos examples: 550
Target train neg examples: 500

Target test facts examples: 33914
Target test pos  examples: 2467
Target test neg examples: 4522

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.443242102801371;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.7291166770349955;  // std dev = 0.335, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, B) )
%   | | then if ( author(H, F), venue(H, A) )
%   | | | then return 0.3581489350995122;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.16249676118646889;  // std dev = 0.460, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( haswordtitle(K, I) )
%   | | | then return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.17522210583121967;  // std dev = 2.980, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.04458961306561406;  // std dev = 2.992, 59.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return 0.05814893509951237;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.3803254334818479;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.6157326050686436;  // std dev = 0.335, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, A) )
%   | | then if ( samebib(G, H), venue(H, B) )
%   | | | then return 0.6258134041158594;  // std dev = 0.882, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.16671450685702074;  // std dev = 0.054, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(I, F), venue(I, B) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.129877843165277;  // std dev = 2.913, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, B) )
%   | | | then return 0.21625389107086207;  // std dev = 1.368, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.12574084969515806;  // std dev = 2.793, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.044790460982400505;  // std dev = 0.395, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.6805851247859591;  // std dev = 0.056, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.2449182844345499;  // std dev = 2.596, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.047462026339214675;  // std dev = 1.980, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.3226813064206765;  // std dev = 0.491, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.47549952672721435;  // std dev = 0.343, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, A) )
%   | | then if ( samebib(K, L), venue(L, B) )
%   | | | then return 0.5173682729146571;  // std dev = 0.877, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14490392605306548;  // std dev = 0.048, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.09613911016437177;  // std dev = 0.443, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.06268207570660964;  // std dev = 0.416, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.5216077804329589;  // std dev = 0.063, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(F, D) )
%   | | | then return 0.1792580649666844;  // std dev = 2.582, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.12537094389750977;  // std dev = 1.924, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(I, G) )
%   | | | then return 0.21359899927553702;  // std dev = 2.542, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   | | | else return -0.027890661976806116;  // std dev = 1.969, 23.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
%   | | else return 0.27111971520688233;  // std dev = 0.485, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | then if ( author(L, K), venue(L, B) )
%   | | then return 0.20111799217596285;  // std dev = 0.490, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.07843372815162718;  // std dev = 0.436, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.05090873955238155;  // std dev = 0.410, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.18666807809525462;  // std dev = 0.486, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then return 0.29780901286614114;  // std dev = 0.400, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return 0.38972123242136664;  // std dev = 0.167, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.45288890235140605;  // std dev = 0.189, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | then return 0.08471218136386138;  // std dev = 0.448, 54.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then if ( haswordtitle(M, N), haswordvenue(A, N) )
%   | | | then return -0.17435544807103046;  // std dev = 0.046, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.05013663547922853;  // std dev = 2.987, 54.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=12 */
%   | | else if ( haswordvenue(A, P), haswordtitle(Q, P) )
%   | | | then return 0.10114315479858484;  // std dev = 4.060, 83.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=24 */
%   | | | else return -0.18568727989986586;  // std dev = 0.056, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.1404765428058318;  // std dev = 0.487, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.2606061890551779;  // std dev = 0.327, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, A) )
%   | | then if ( samebib(G, H), venue(H, B) )
%   | | | then return 0.3674600360342673;  // std dev = 0.876, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14372822976264774;  // std dev = 0.050, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.06339610265389252;  // std dev = 0.438, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | | then return -0.15436897573549985;  // std dev = 0.070, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.09244699005705082;  // std dev = 4.100, 83.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=24 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.034942534218033824;  // std dev = 3.056, 54.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=12 */
%   | | | else return -0.17885683336909405;  // std dev = 0.121, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.1062664390975106;  // std dev = 0.486, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then return 0.16826242424497756;  // std dev = 0.400, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else return 0.2812334322923238;  // std dev = 0.069, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, B) )
%   | | then return 0.010660745989262099;  // std dev = 0.254, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0.06482841437033963;  // std dev = 0.444, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, M), haswordvenue(A, M) )
%   | | | then return -0.13532781143064576;  // std dev = 0.063, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.07748950074062799;  // std dev = 4.098, 83.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=24 */
%   | | else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | | | then return 0.02957244363434824;  // std dev = 3.056, 54.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=12 */
%   | | | else return -0.15427633042384317;  // std dev = 0.107, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return -0.4788865326809192;  // std dev = 2.11e-08, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.27870772536628147;  // std dev = 1.895, 24.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=19 */
%   | | else return -0.08465428047366871;  // std dev = 0.374, 29.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=11 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.0867312488038489;  // std dev = 0.488, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.14582079452297936;  // std dev = 0.334, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, B) )
%   | | then if ( samebib(K, L), venue(L, A) )
%   | | | then return 0.5219756660646452;  // std dev = 0.910, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.2692838910422525;  // std dev = 0.044, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.03558918372891157;  // std dev = 0.426, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.02152440873043863;  // std dev = 0.403, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordvenue(B, C) )
%   | then return 0.25327086254642606;  // std dev = 0.058, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( author(E, D), venue(E, B) )
%   | | then if ( samebib(E, F), venue(F, A) )
%   | | | then return 0.43228557714992727;  // std dev = 1.291, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | | | else return -0.4242736370759411;  // std dev = 0.551, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else if ( author(G, D), venue(G, A) )
%   | | | then return -0.3535282931509597;  // std dev = 0.920, 18.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=1 */
%   | | | else return 0.05887104370338659;  // std dev = 2.923, 46.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=16 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( haswordtitle(K, H) )
%   | | | then return -0.06213242649904896;  // std dev = 2.755, 44.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=16 */
%   | | | else return 0.2589651810789862;  // std dev = 0.882, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.07721419025744133;  // std dev = 0.484, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   | else return 0.018101602023340373;  // std dev = 0.402, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.04409120794378659;  // std dev = 0.478, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then return 0.09169949127149453;  // std dev = 0.399, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else return 0.19529008563044128;  // std dev = 0.057, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | then if ( title(J, I), venue(J, A) )
%   | | then if ( title(K, I), venue(K, B) )
%   | | | then return 0.6269705477650632;  // std dev = 1.774, 29.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=26 */
%   | | | else return -0.20233479909763302;  // std dev = 0.307, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | | else return -0.14157517193240243;  // std dev = 0.103, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then if ( haswordauthor(N, L) )
%   | | | then return 0.09069237240569614;  // std dev = 0.623, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.04192738545318864;  // std dev = 4.055, 86.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=24 */
%   | | else return -0.17300819301668033;  // std dev = 0.049, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */


Results
   AUC ROC   = 0.563176
   AUC PR    = 0.412131
   CLL	      = -0.703703
   Precision = 0.374433 at threshold = 0.5
   Recall    = 0.936765
   F1        = 0.535016


Total learning time: 47.85411190986633 seconds
Total inference time: 5.796 seconds
AUC ROC: 0.563176


Results scoring model
   AUC ROC   = 0.697595
   AUC PR    = 0.69195
   CLL	      = -0.601465
   Precision = 0.636709 at threshold = 0.5
   Recall    = 0.914545
   F1        = 0.750746


Total scoring time: 1.114 seconds
Parameter learned model CLL: -0.601465


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'false': 'haswordvenue(B, E), haswordauthor(F, E)', 'false,true': 'author(G, F), venue(G, B)', 'false,true,true': 'author(H, F), venue(H, A)', 'false,false': 'haswordvenue(A, I), haswordauthor(J, I)', 'false,false,true': 'haswordtitle(K, I)', 'false,false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true': [0.493, 334, 471], 'true,false': [0.335, 4, 27], 'false,true,true,true': [1.0, 2, 2], 'false,true,true,false': [0.0, 4, 0], 'false,true,false': [0.46, 32, 14], 'false,false,true,true': [0.894, 4, 1], 'false,false,true,false': [2.98, 28, 13], 'false,false,false,true': [2.992, 48, 11], 'false,false,false,false': [2.966, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'false': 'haswordvenue(B, E), haswordauthor(F, E)', 'false,true': 'author(G, F), venue(G, A)', 'false,true,true': 'samebib(G, H), venue(H, B)', 'false,true,false': 'author(I, F), venue(I, B)', 'false,false': 'haswordvenue(A, J), haswordauthor(K, J)', 'false,false,true': 'author(L, K), venue(L, B)'}, {'true,true': [0.493, 334, 471], 'true,false': [0.335, 4, 27], 'false,true,true,true': [0.882, 1, 4], 'false,true,true,false': [0.054, 5, 0], 'false,true,false,true': [0.0, 3, 0], 'false,true,false,false': [2.913, 29, 12], 'false,false,true,true': [1.368, 5, 3], 'false,false,true,false': [2.793, 27, 11], 'false,false,false': [0.395, 92, 22]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordauthor(F, C)', 'true,true,false': 'haswordtitle(G, D)', 'true,false': 'haswordtitle(H, C)', 'false': 'haswordvenue(B, I), haswordauthor(J, I)', 'false,true': 'author(K, J), venue(K, A)', 'false,true,true': 'samebib(K, L), venue(L, B)'}, {'true,true,true': [0.056, 0, 10], 'true,true,false,true': [2.596, 13, 14], 'true,true,false,false': [1.98, 18, 6], 'true,false,true': [0.491, 304, 449], 'true,false,false': [0.343, 3, 19], 'false,true,true,true': [0.877, 1, 4], 'false,true,true,false': [0.048, 5, 0], 'false,true,false': [0.443, 32, 12], 'false,false': [0.416, 124, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordvenue(B, D)', 'true,true,false': 'haswordtitle(F, D)', 'true,false': 'haswordvenue(B, G), haswordauthor(H, G)', 'true,false,true': 'haswordtitle(I, G)', 'false': 'haswordvenue(A, J), haswordauthor(K, J)', 'false,true': 'author(L, K), venue(L, B)'}, {'true,true,true': [0.063, 0, 10], 'true,true,false,true': [2.582, 13, 14], 'true,true,false,false': [1.924, 18, 6], 'true,false,true,true': [2.542, 12, 14], 'true,false,true,false': [1.969, 17, 6], 'true,false,false': [0.485, 278, 448], 'false,true,true': [0.49, 6, 4], 'false,true,false': [0.436, 32, 12], 'false,false': [0.41, 124, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordtitle(E, D)', 'true,false': 'haswordvenue(A, F), haswordtitle(G, F)', 'true,false,false': 'haswordvenue(A, H), haswordauthor(I, H)', 'false': 'haswordvenue(A, J), haswordauthor(K, J)', 'false,false': 'haswordvenue(B, L), haswordtitle(M, L)', 'false,false,true': 'haswordtitle(M, N), haswordvenue(A, N)', 'false,false,false': 'haswordvenue(A, P), haswordtitle(Q, P)'}, {'true,true': [0.486, 336, 479], 'true,false,true': [0.4, 2, 8], 'true,false,false,true': [0.167, 0, 3], 'true,false,false,false': [0.189, 0, 8], 'false,true': [0.448, 38, 16], 'false,false,true,true': [0.046, 12, 0], 'false,false,true,false': [2.987, 42, 12], 'false,false,false,true': [4.06, 59, 24], 'false,false,false,false': [0.056, 11, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'false': 'haswordvenue(B, E), haswordauthor(F, E)', 'false,true': 'author(G, F), venue(G, A)', 'false,true,true': 'samebib(G, H), venue(H, B)', 'false,false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,false,true': 'haswordtitle(J, K), haswordvenue(A, K)', 'false,false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true': [0.487, 334, 471], 'true,false': [0.327, 4, 27], 'false,true,true,true': [0.876, 1, 4], 'false,true,true,false': [0.05, 5, 0], 'false,true,false': [0.438, 32, 12], 'false,false,true,true': [0.07, 12, 0], 'false,false,true,false': [4.1, 59, 24], 'false,false,false,true': [3.056, 42, 12], 'false,false,false,false': [0.121, 11, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordtitle(E, D)', 'true,false': 'haswordvenue(A, F), haswordtitle(G, F)', 'false': 'haswordvenue(B, H), haswordauthor(I, H)', 'false,true': 'author(J, I), venue(J, B)', 'false,false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false,false,true': 'haswordtitle(L, M), haswordvenue(A, M)', 'false,false,false': 'haswordvenue(A, N), haswordtitle(P, N)'}, {'true,true': [0.486, 336, 479], 'true,false,true': [0.4, 2, 8], 'true,false,false': [0.069, 0, 11], 'false,true,true': [0.254, 6, 2], 'false,true,false': [0.444, 32, 14], 'false,false,true,true': [0.063, 12, 0], 'false,false,true,false': [4.098, 59, 24], 'false,false,false,true': [3.056, 42, 12], 'false,false,false,false': [0.107, 11, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordtitle(F, D)', 'true,true,true': 'author(G, E), venue(G, A)', 'true,false': 'haswordtitle(H, C)', 'false': 'haswordvenue(A, I), haswordauthor(J, I)', 'false,true': 'author(K, J), venue(K, B)', 'false,true,true': 'samebib(K, L), venue(L, A)'}, {'true,true,true,true': [2.11e-08, 8, 0], 'true,true,true,false': [1.895, 5, 19], 'true,true,false': [0.374, 18, 11], 'true,false,true': [0.488, 304, 449], 'true,false,false': [0.334, 3, 19], 'false,true,true,true': [0.91, 1, 4], 'false,true,true,false': [0.044, 5, 0], 'false,true,false': [0.426, 32, 12], 'false,false': [0.403, 124, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordauthor(D, C)', 'true': 'haswordvenue(B, C)', 'true,false': 'author(E, D), venue(E, B)', 'true,false,true': 'samebib(E, F), venue(F, A)', 'true,false,false': 'author(G, D), venue(G, A)', 'false': 'haswordvenue(A, H), haswordvenue(B, H)', 'false,true': 'haswordvenue(B, I), haswordauthor(J, I)', 'false,true,true': 'haswordtitle(K, H)'}, {'true,true': [0.058, 0, 10], 'true,false,true,true': [1.291, 2, 19], 'true,false,true,false': [0.551, 20, 0], 'true,false,false,true': [0.92, 17, 1], 'true,false,false,false': [2.923, 30, 16], 'false,true,true,true': [2.755, 28, 16], 'false,true,true,false': [0.882, 1, 4], 'false,true,false': [0.484, 278, 448], 'false,false': [0.402, 124, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordtitle(E, D)', 'true,false': 'haswordvenue(A, F), haswordtitle(G, F)', 'false': 'haswordvenue(A, H), haswordtitle(I, H)', 'false,true': 'title(J, I), venue(J, A)', 'false,true,true': 'title(K, I), venue(K, B)', 'false,false': 'haswordvenue(B, L), haswordtitle(M, L)', 'false,false,true': 'haswordauthor(N, L)'}, {'true,true': [0.478, 336, 479], 'true,false,true': [0.399, 2, 8], 'true,false,false': [0.057, 0, 11], 'false,true,true,true': [1.774, 3, 26], 'false,true,true,false': [0.307, 69, 0], 'false,true,false': [0.103, 7, 0], 'false,false,true,true': [0.623, 3, 2], 'false,false,true,false': [4.055, 62, 24], 'false,false,false': [0.049, 18, 0]}]]
[{'': [0.24084270048762138, 0.18394619617433927], 'true': [0.2427591528104568, 0.11238293444328941], 'false': [0.20850480109739317, 0.17437500000000122], 'false,true': [0.18750000000000003, 0.21172022684309966], 'false,true,true': [0.25, 0.0], 'false,false': [0.21172022684309966, 0.15574022776238935], 'false,false,true': [0.16000000000000003, 0.2165377751338484], 'false,false,false': [0.15168055156564153, 0.15999999999999948]}, {'': [0.2399033482150972, 0.18256900384978317], 'true': [0.24275915281046145, 0.11238293444328855], 'false': [0.20616907815531804, 0.17364766588905414], 'false,true': [0.23513983610578615, 0.1970463490196832], 'false,true,true': [0.15564170334256625, 0.0005877240334873635], 'false,true,false': [0.0, 0.20701963117192157], 'false,false': [0.21139250536203277, 0.15572936782372815], 'false,false,true': [0.23394767670323896, 0.20521924638381536]}, {'': [0.23897284752961942, 0.1791885474064998], 'true': [0.23816220413684794, 0.237883468142118], 'true,true': [0.0031484720128159616, 0.23037050068870066], 'true,false': [0.2407298649580488, 0.11776859504132223], 'true,true,false': [0.24965706447187935, 0.16341569201183295], 'false': [0.19560423483393627, 0.17301385046084544], 'false,true': [0.18687875527284808, 0.1960841946578199], 'false,true,true': [0.1539901782562366, 0.000465099526688198]}, {'': [0.236429046081018, 0.1768668551811515], 'true': [0.22228318412191325, 0.23601279887198168], 'true,false': [0.22551678752637735, 0.2348751665470547], 'true,false,true': [0.2485207100591715, 0.1685685029754811], 'true,true': [0.004027855333989594, 0.22640475593211415], 'true,true,false': [0.246882266123149, 0.1542387630040101], 'false': [0.20174435059906706, 0.16783367979896477], 'false,true': [0.23974733645107799, 0.19032000676012337]}, {'': [0.23326718195054644, 0.17638484352648398], 'true': [0.23625683367314715, 0.08446769996005422], 'false': [0.2008312657194408, 0.167706562641816], 'false,false': [0.14268847882546584, 0.18387242861018374], 'false,false,false': [0.19857589252616234, 0.0002839508613070989], 'false,false,true': [0.00017750078267901592, 0.16519454949778975], 'true,false': [0.16019344334504004, 0.006576939583953586], 'true,false,false': [0.009317516736318162, 0.0044609991906195134]}, {'': [0.23268386283254708, 0.1742922846829747], 'true': [0.23698503774429427, 0.10709605650165095], 'false': [0.18280513942306406, 0.1710830929819031], 'false,true': [0.1423600280598221, 0.19156215063951923], 'false,false': [0.18368786382690785, 0.1503407217139943], 'false,false,true': [0.0004048871213432152, 0.2024916869033968], 'false,false,false': [0.17296052334653267, 0.0013234567334086628], 'false,true,true': [0.1535590695471601, 0.0005042650282554156]}, {'': [0.23239882019844255, 0.1713479758410622], 'true': [0.23591115054121872, 0.08177329245462675], 'false': [0.1777426049795617, 0.169000603167815], 'false,true': [0.06464675528894372, 0.19697676154507754], 'false,false': [0.18183728724227974, 0.14862465978427822], 'false,false,true': [0.0003285739853300269, 0.2023585161055082], 'false,false,false': [0.1729671726552382, 0.0010447423292384876], 'true,false': [0.1598050738914301, 0.004757952825863151]}, {'': [0.2322144776814999, 0.17010360436922822], 'true': [0.18952637564094643, 0.2350861674268194], 'true,false': [0.23859796143754022, 0.11149457730734252], 'true,true': [0.21988438010719946, 0.14015206950487505], 'true,true,true': [5.551115123125783e-17, 0.1496919085197438], 'false': [0.193337770813771, 0.16202158294324806], 'false,true': [0.23948034400620402, 0.1813254928643853], 'false,true,true': [0.16553286131937578, 0.00038198333653027827]}, {'': [0.1909978656974471, 0.22019842780749574], 'false': [0.2317576562140573, 0.16193478596724403], 'false,true': [0.18021086840946798, 0.23451848775586112], 'true': [0.0033121099833352875, 0.20193589951578758], 'true,false': [0.23136690524727468, 0.1810816460789893], 'true,false,true': [0.07933890231575533, 0.015201980594151166], 'true,false,false': [0.047033235289363234, 0.18570228087323667], 'false,true,true': [0.17250702930889955, 0.15542176192175852]}, {'': [0.22474743424167748, 0.16421421452377208], 'true': [0.22820749390870626, 0.08034734344763839], 'false': [0.16683470624692437, 0.16145042677725593], 'false,true': [0.17637037981132145, 0.0015137096924482793], 'false,true,true': [0.10853351068263001, 0.0013644522803092185], 'false,false': [0.18509743346740473, 0.002365696665927144], 'false,false,true': [0.07773652863669729, 0.19120868588222792], 'true,false': [0.15955317952713255, 0.0032320325686160793]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;false;haswordvenue(B, E), haswordauthor(F, E).;true;true
0;false,true;author(G, F), venue(G, B).;true;true
0;false,true,true;author(H, F), venue(H, A).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;false;haswordvenue(B, E), haswordauthor(F, E).;true;true
1;false,true;author(G, F), venue(G, A).;true;true
1;false,true,true;samebib(G, H), venue(H, B).;true;true
1;false,true,false;author(I, F), venue(I, B).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;false;haswordvenue(B, I), haswordauthor(J, I).;true;true
2;false,true;author(K, J), venue(K, A).;true;true
2;false,true,true;samebib(K, L), venue(L, B).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;false;haswordvenue(A, J), haswordauthor(K, J).;true;true
4;false,false;haswordvenue(B, L), haswordtitle(M, L).;true;true
4;false,false,true;haswordtitle(M, N), haswordvenue(A, N).;true;true
4;false,false,false;haswordvenue(A, P), haswordtitle(Q, P).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;false;haswordvenue(B, E), haswordauthor(F, E).;true;true
5;false,true;author(G, F), venue(G, A).;true;true
5;false,true,true;samebib(G, H), venue(H, B).;true;true
5;false,false;haswordvenue(B, I), haswordtitle(J, I).;true;true
5;false,false,true;haswordtitle(J, K), haswordvenue(A, K).;true;true
5;false,false,false;haswordvenue(A, L), haswordtitle(M, L).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;false;haswordvenue(B, H), haswordauthor(I, H).;true;true
6;false,false;haswordvenue(B, K), haswordtitle(L, K).;true;true
6;false,false,true;haswordtitle(L, M), haswordvenue(A, M).;true;true
6;false,false,false;haswordvenue(A, N), haswordtitle(P, N).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
7;true,true;haswordtitle(F, D).;true;true
7;true,true,true;author(G, E), venue(G, A).;true;true
7;false;haswordvenue(A, I), haswordauthor(J, I).;true;true
7;false,true;author(K, J), venue(K, B).;true;true
7;false,true,true;samebib(K, L), venue(L, A).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;false;haswordvenue(A, H), haswordtitle(I, H).;true;true
9;false,true;title(J, I), venue(J, A).;true;true
9;false,true,true;title(K, I), venue(K, B).;true;true
9;false,false;haswordvenue(B, L), haswordtitle(M, L).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.443242102801371;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else if ( haswordauthor(E, C) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.6359267128772901;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return 0.7470378239884012;  // std dev = 1.333, 18.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=16 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then return 0.15444523139580865;  // std dev = 0.457, 54.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( haswordtitle(L, J) )
%   | | | then return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.17522210583121967;  // std dev = 2.980, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return 0.04458961306561406;  // std dev = 2.992, 59.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return 0.05814893509951237;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.3803254334818479;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.6155071565116975;  // std dev = 0.333, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, B) )
%   | | then if ( samebib(G, H), venue(H, A) )
%   | | | then return 0.6382893592786268;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.1617106407213732;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(I, F), venue(I, A) )
%   | | | then return -0.1617106407213732;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.13097228610789485;  // std dev = 2.913, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, A) )
%   | | | then return 0.21625389107086207;  // std dev = 1.368, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.12574084969515803;  // std dev = 2.793, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.044790460982400505;  // std dev = 0.395, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.6681876709221133;  // std dev = 0.071, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(F, D) )
%   | | | then return 0.2449182844345499;  // std dev = 2.596, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.04398085699564148;  // std dev = 1.997, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(I, G) )
%   | | | then return 0.2648613043775699;  // std dev = 2.542, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   | | | else return -0.03854530362201418;  // std dev = 1.962, 23.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
%   | | else return 0.3408791703567908;  // std dev = 0.485, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | then if ( author(L, K), venue(L, B) )
%   | | then return 0.19575784694917062;  // std dev = 0.440, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.095145590889297;  // std dev = 0.444, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.06268207570660965;  // std dev = 0.416, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.2432445102753922;  // std dev = 0.489, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.41895251093325636;  // std dev = 0.328, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, A) )
%   | | then if ( samebib(G, H), venue(H, B) )
%   | | | then return 0.5995150517073613;  // std dev = 0.901, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.19677912353079885;  // std dev = 0.019, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.08008530756754272;  // std dev = 0.440, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( haswordtitle(K, I) )
%   | | | then return -0.0059655832577993895;  // std dev = 0.781, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.11749413245786079;  // std dev = 2.932, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.023521719765919918;  // std dev = 2.990, 59.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return 0.03841103242373467;  // std dev = 2.967, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.4371359756078842;  // std dev = 0.097, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.13821724446898334;  // std dev = 2.596, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.09562091061440843;  // std dev = 1.940, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.19582762802802442;  // std dev = 0.489, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.31133391465229726;  // std dev = 0.340, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, A) )
%   | | then return 0.15950810989260927;  // std dev = 0.434, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( author(L, J), venue(L, B) )
%   | | | then return -0.2057704028563405;  // std dev = 0.002, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.08733828721659774;  // std dev = 2.877, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else return 0.04387881083199676;  // std dev = 0.412, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( haswordvenue(B, D) )
%   | | | then return 0.408025063799861;  // std dev = 1.05e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.09132184638860519;  // std dev = 2.572, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | else return -0.08178903427113347;  // std dev = 0.386, 29.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=11 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.15028277534440773;  // std dev = 0.487, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.26492290130511226;  // std dev = 0.343, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, B) )
%   | | then return 0.1396811758316851;  // std dev = 0.430, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( author(K, I), venue(K, A) )
%   | | | then return -0.17527015450842554;  // std dev = 0.000715, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.07131481935728884;  // std dev = 2.876, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else return 0.03711679894027571;  // std dev = 0.411, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.10545158104732862;  // std dev = 0.485, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else return 0.25064771547013137;  // std dev = 0.288, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, A) )
%   | | then if ( samebib(H, I), venue(I, B) )
%   | | | then return 0.4412276753982816;  // std dev = 0.903, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.19783847064953888;  // std dev = 0.019, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(J, G), venue(J, B) )
%   | | | then return -0.18128000250075726;  // std dev = 0.006, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.06577706102450853;  // std dev = 2.871, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, M), haswordvenue(A, M) )
%   | | | then return -0.18210746796096175;  // std dev = 0.047, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.08368488891173252;  // std dev = 4.063, 83.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=24 */
%   | | else return -2.5303850388333705E-4;  // std dev = 0.385, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.2699475217592027;  // std dev = 0.059, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.04420348462476163;  // std dev = 2.585, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.14495087554367853;  // std dev = 1.866, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.08621013060567842;  // std dev = 0.488, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.15691570627221207;  // std dev = 0.340, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.16519970913273602;  // std dev = 0.090, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( haswordauthor(L, I) )
%   | | | then return 0.13035780451013887;  // std dev = 0.914, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.07147264688749305;  // std dev = 4.064, 86.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=24 */
%   | else return 0.018357785562719074;  // std dev = 0.412, 109.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=26 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.2209243576908456;  // std dev = 0.052, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.023196027349446577;  // std dev = 2.564, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.18496411816659541;  // std dev = 1.860, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.0416020324996356;  // std dev = 2.668, 36.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
%   | | | else return -0.1964645511617748;  // std dev = 1.597, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | else return 0.07521768609548335;  // std dev = 0.484, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(B, M) )
%   | | then return -0.14373786541536587;  // std dev = 0.080, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else return 0.062205768341783575;  // std dev = 0.436, 91.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=26 */
%   | else return 0.015241426090817755;  // std dev = 0.412, 109.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=26 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordvenue(B, C) )
%   | then return 0.18574398525628655;  // std dev = 0.146, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( author(E, D), venue(E, B) )
%   | | then if ( samebib(E, F), venue(F, A) )
%   | | | then return 0.44396371353746594;  // std dev = 1.243, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | | | else return -0.41353729290332436;  // std dev = 0.538, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else if ( author(G, D), venue(G, A) )
%   | | | then return -0.2703932897204188;  // std dev = 0.831, 18.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=1 */
%   | | | else return 0.06398677813412032;  // std dev = 2.988, 46.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=16 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then if ( haswordtitle(I, H) )
%   | | then return 0.04937553050383762;  // std dev = 0.486, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.14627047472416443;  // std dev = 0.351, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | then return 0.03417777628373499;  // std dev = 0.419, 95.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=24 */
%   | | else return -0.015721986120430482;  // std dev = 0.382, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */


Results
   AUC ROC   = 0.562283
   AUC PR    = 0.410359
   CLL	      = -0.707232
   Precision = 0.377789 at threshold = 0.5
   Recall    = 0.940413
   F1        = 0.539033


Total learning time: 44.193366050720215 seconds
Total inference time: 6.08 seconds
AUC ROC: 0.562283


Results scoring model
   AUC ROC   = 0.682978
   AUC PR    = 0.681625
   CLL	      = -0.616356
   Precision = 0.635669 at threshold = 0.5
   Recall    = 0.907273
   F1        = 0.747566


Total scoring time: 1.12 seconds
Refined model CLL: -0.616356


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.563176
   AUC PR    = 0.412131
   CLL	      = -0.703703
   Precision = 0.374433 at threshold = 0.5
   Recall    = 0.936765
   F1        = 0.535016


Total learning time: 94.28147796058656 seconds
Total inference time: 5.796 seconds
AUC ROC: 0.563176
Total revision time: 94.28147796058656
Best scored revision CLL: -0.601465


Dataset: 11_yeast_cora, Fold: 5, Type: Transfer (trRDN-B), Time: 00:11:38
{'AUC ROC': 0.563176, 'AUC PR': 0.412131, 'CLL': -0.703703, 'Precision': [0.374433, 0.5], 'Recall': 0.936765, 'F1': 0.535016, 'Learning time': 94.28147796058656, 'Inference time': 5.796, 'parameter': {'AUC ROC': 0.563176, 'AUC PR': 0.412131, 'CLL': -0.703703, 'Precision': [0.374433, 0.5], 'Recall': 0.936765, 'F1': 0.535016, 'Learning time': 47.85411190986633, 'Inference time': 5.796}}


Starting fold 1

Target train facts examples: 7463
Target train pos examples: 368
Target train neg examples: 688

Target test facts examples: 35095
Target test pos  examples: 2649
Target test neg examples: 4334

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.23843062524035266;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.4581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.424815601766179;  // std dev = 2.714, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.004815601766179008;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.004815601766179008;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.20686012285620575;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.45935396641210174;  // std dev = 0.810, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.3982164798305049;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.3628735944379147;  // std dev = 2.715, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, A) )
%   | | then if ( samebib(K, L), venue(L, B) )
%   | | | then return 0.1488242116562869;  // std dev = 2.789, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return -0.14162905569876183;  // std dev = 0.023, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.12787230110394693;  // std dev = 0.016, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | then return 0.004228390109386251;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.1751801570305961;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.37391135762433364;  // std dev = 0.808, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.3269052770205085;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.2976445171077738;  // std dev = 2.715, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, B) )
%   | | then if ( samebib(K, L), venue(L, A) )
%   | | | then return 0.1497687606077436;  // std dev = 2.783, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return -0.14148503077066796;  // std dev = 0.043, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.13359848245519318;  // std dev = 0.038, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return 0.004507924439813024;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.14514481334590568;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.29107789104287257;  // std dev = 0.807, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.26358767085800217;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.23427726647373656;  // std dev = 2.715, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.11782635975506077;  // std dev = 0.047, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.003934642525147688;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.003958717519531335;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.11804668707041945;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.24185760298278067;  // std dev = 0.794, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.20295547503731384;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.17824642992011888;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.10613899675299487;  // std dev = 0.043, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0034537792951347306;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.0034749675716536214;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.09457696812283496;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.18213891260273649;  // std dev = 0.794, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.15909483439814323;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.13426751126146078;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then return -0.029307766537031314;  // std dev = 0.328, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then if ( title(M, L), venue(M, A) )
%   | | | then return -0.00274687186912645;  // std dev = 3.003, 80.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=11 */
%   | | | else return -0.1013596735649632;  // std dev = 0.041, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(B, N), haswordtitle(P, N) )
%   | | | then return 0.006891869811191756;  // std dev = 2.848, 67.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=10 */
%   | | | else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.07489163449109286;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.1367774456565101;  // std dev = 0.794, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.10373708290669705;  // std dev = 0.495, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | then return -0.02889194378753994;  // std dev = 0.328, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return -0.0024949686555494717;  // std dev = 3.001, 80.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=11 */
%   | | | else return -0.10068809434932126;  // std dev = 0.041, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.007398840640309501;  // std dev = 2.848, 67.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=10 */
%   | | | else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.05877777591804268;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.10547045830630752;  // std dev = 0.793, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.09366468486992434;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.07499210901555857;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then return -0.025210558218200264;  // std dev = 0.328, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, M), haswordvenue(B, M) )
%   | | | then return -0.08784234481076765;  // std dev = 0.036, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.003119761719492813;  // std dev = 2.996, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, N), haswordtitle(P, N) )
%   | | | then return 0.006513985390288962;  // std dev = 2.847, 67.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=10 */
%   | | | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04582386394015474;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.07976990957547188;  // std dev = 0.794, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.07028323886786395;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.05626640856503589;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.08106271255412499;  // std dev = 0.034, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.002736779159988287;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.0027578405833483784;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.03554750876544446;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.061470621070089534;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return 0.060632762917023984;  // std dev = 0.794, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.040790663954127025;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then return -0.022372073971810263;  // std dev = 0.328, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then if ( title(M, L), venue(M, A) )
%   | | | then return -0.0018855742062623305;  // std dev = 2.999, 80.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=11 */
%   | | | else return -0.08170528402206886;  // std dev = 0.046, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(B, N), haswordtitle(P, N) )
%   | | | then return 0.005378701476790504;  // std dev = 2.847, 67.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=10 */
%   | | | else return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.557392
   AUC PR    = 0.428417
   CLL	      = -0.654731
   Precision = 0.637427 at threshold = 0.5
   Recall    = 0.041148
   F1        = 0.077305


Total learning time: 56.28832411766052 seconds
Total inference time: 7.128 seconds
AUC ROC: 0.557392


Results scoring model
   AUC ROC   = 0.592
   AUC PR    = 0.419788
   CLL	      = -0.618814
   Precision = 0.578947 at threshold = 0.5
   Recall    = 0.059783
   F1        = 0.108374


Total scoring time: 1.014 seconds
Parameter learned model CLL: -0.618814


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)', 'false,false': 'haswordvenue(B, L), haswordtitle(M, L)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.816, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.714, 13, 17], 'false,true,true': [0.0, 12, 0], 'false,true,false': [0.354, 64, 11], 'false,false,true': [0.354, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'title(K, J), venue(K, A)', 'false,true,true': 'samebib(K, L), venue(L, B)', 'false,false': 'haswordvenue(B, M), haswordtitle(N, M)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.81, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.715, 13, 17], 'false,true,true,true': [2.789, 27, 11], 'false,true,true,false': [0.023, 42, 0], 'false,true,false': [0.016, 7, 0], 'false,false,true': [0.354, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'title(K, J), venue(K, B)', 'false,true,true': 'samebib(K, L), venue(L, A)', 'false,false': 'haswordvenue(A, M), haswordtitle(N, M)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.808, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.715, 13, 17], 'false,true,true,true': [2.783, 27, 11], 'false,true,true,false': [0.043, 42, 0], 'false,true,false': [0.038, 7, 0], 'false,false,true': [0.346, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(A, K)', 'false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.807, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.715, 13, 17], 'false,true,true': [0.047, 12, 0], 'false,true,false': [0.346, 64, 11], 'false,false,true': [0.346, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(A, K)', 'false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.794, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.717, 13, 17], 'false,true,true': [0.043, 12, 0], 'false,true,false': [0.346, 64, 11], 'false,false,true': [0.346, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordauthor(J, I)', 'false,false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false,false,true': 'title(M, L), venue(M, A)', 'false,false,false': 'haswordvenue(B, N), haswordtitle(P, N)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.794, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.717, 13, 17], 'false,true': [0.328, 7, 1], 'false,false,true,true': [3.003, 69, 11], 'false,false,true,false': [0.041, 7, 0], 'false,false,false,true': [2.848, 57, 10], 'false,false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordauthor(F, E)', 'false': 'haswordvenue(B, G), haswordauthor(H, G)', 'false,false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,false,true': 'title(K, J), venue(K, B)', 'false,false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.794, 1, 2], 'true,false,false': [0.495, 15, 20], 'false,true': [0.328, 7, 1], 'false,false,true,true': [3.001, 69, 11], 'false,false,true,false': [0.041, 7, 0], 'false,false,false,true': [2.848, 57, 10], 'false,false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordauthor(J, I)', 'false,false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false,false,true': 'haswordtitle(L, M), haswordvenue(B, M)', 'false,false,false': 'haswordvenue(B, N), haswordtitle(P, N)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.793, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.717, 13, 17], 'false,true': [0.328, 7, 1], 'false,false,true,true': [0.036, 12, 0], 'false,false,true,false': [2.996, 64, 11], 'false,false,false,true': [2.847, 57, 10], 'false,false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)', 'false,false': 'haswordvenue(B, L), haswordtitle(M, L)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.794, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.717, 13, 17], 'false,true,true': [0.034, 12, 0], 'false,true,false': [0.346, 64, 11], 'false,false,true': [0.346, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordauthor(H, G)', 'false': 'haswordvenue(A, I), haswordauthor(J, I)', 'false,false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false,false,true': 'title(M, L), venue(M, A)', 'false,false,false': 'haswordvenue(B, N), haswordtitle(P, N)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [1.095, 2, 3], 'true,false,false,true': [0.794, 1, 2], 'true,false,false,false': [2.717, 13, 17], 'false,true': [0.328, 7, 1], 'false,false,true,true': [2.999, 69, 11], 'false,false,true,false': [0.046, 7, 0], 'false,false,false,true': [2.847, 57, 10], 'false,false,false,false': [0.0, 4, 0]}]]
[{'': [0.23762656230272572, 0.11496588764697444], 'true': [0.2356675262844691, 0.24376731301939172], 'true,false': [0.22222222222222224, 0.2448979591836734], 'true,false,false': [0.23999999999999994, 0.2455555555555551], 'false': [0.1104505218655035, 0.11985258772632539], 'false,false': [0.12515555555555502, 0.0], 'false,true': [-1.1564823173178714e-17, 0.12515555555555502]}, {'': [0.2371606616282308, 0.11455688633284844], 'true': [0.2356675262844735, 0.24352902641532279], 'true,false': [0.21859724583033524, 0.2450060599606714], 'true,false,false': [0.23999999999999994, 0.2456619576377536], 'false': [0.10989213699570438, 0.1196268538653256], 'false,false': [0.125155555555556, 0.0], 'false,true': [0.11826329058716308, 3.536127348451442e-05], 'false,true,true': [0.20467024545790047, 1.3096767957225067e-05]}, {'': [0.2367049716972969, 0.11200792539903102], 'true': [0.23566752628446727, 0.24320063124509572], 'true,false': [0.2176873624141201, 0.24497723310199565], 'true,false,false': [0.23999999999999994, 0.24568445879937517], 'false': [0.1098029509778292, 0.1143578111986426], 'false,false': [0.11976586065569504, 0.0], 'false,true': [0.11802298805418568, 0.0002095079382072417], 'false,true,true': [0.20388654248514937, 4.324877625808529e-05]}, {'': [0.23636692863361694, 0.10942475837381223], 'true': [0.23566752628446358, 0.24295287544358235], 'true,false': [0.2171137183240305, 0.24494912041488714], 'true,false,false': [0.24000000000000005, 0.2456512452737729], 'false': [0.10500611231737596, 0.1142218619235393], 'false,false': [0.11974954934686757, 0.0], 'false,true': [0.0001871028954361804, 0.11973222393850276]}, {'': [0.2361635923467421, 0.10918423356002238], 'true': [0.235667526284474, 0.24279756660608162], 'true,false': [0.21040997107607098, 0.24528866487439993], 'true,false,false': [0.24000000000000005, 0.24608288946147558], 'false': [0.1046546882142193, 0.11411720784514673], 'false,false': [0.11973520847760942, 0.0], 'false,true': [0.00015548797119565444, 0.119717929003181]}, {'': [0.23605472895497864, 0.10900163713688905], 'true': [0.23566752628446164, 0.2426451717431571], 'true,false': [0.21021536400516302, 0.24526976372372009], 'true,false,false': [0.24000000000000005, 0.24606000110993995], 'false': [0.10736743985498297, 0.10905617575661654], 'false,false': [0.10440550022282617, 0.11467042083444166], 'false,false,false': [0.12103877643650406, 0.0], 'false,false,true': [0.11273762703231435, 0.00023913897046664141]}, {'': [0.23600226629781326, 0.1088894094247705], 'true': [0.23566752628447166, 0.24256038386092066], 'true,false': [0.21028400916139342, 0.24524074613973948], 'false': [0.10737600459144332, 0.10893755454282146], 'false,false': [0.10423829969231851, 0.11460360438939157], 'false,false,false': [0.12102723128426361, 0.0], 'false,false,true': [0.11256201737783567, 0.00024399188613387357]}, {'': [0.23597910670504993, 0.10878083653625956], 'true': [0.23566752628446394, 0.2425397777200189], 'true,false': [0.20972540143059126, 0.24529137727623193], 'true,false,false': [0.24, 0.24612346419050327], 'false': [0.10740713696924334, 0.10882928379684927], 'false,false': [0.10414050292030708, 0.11450253745080444], 'false,false,false': [0.12098010469320764, 0.0], 'false,false,true': [0.00011046493206968873, 0.11964405316057361]}, {'': [0.23596800363556392, 0.1086567873823419], 'true': [0.23566752628446355, 0.24251355419944554], 'true,false': [0.20993108052044004, 0.24526984051355347], 'true,false,false': [0.24, 0.24612007990413548], 'false': [0.10397966882990074, 0.1137742026822645], 'false,false': [0.119585589101712, 0.0], 'false,true': [9.533681497284757e-05, 0.11963256128862798]}, {'': [0.2359631021691802, 0.10856787448637305], 'true': [0.23566752628447613, 0.24250326900812708], 'true,false': [0.24, 0.24283566952256894], 'true,false,false': [0.21012490765910039, 0.24607095399152906], 'false': [0.107435022671528, 0.1086088233870287], 'false,false': [0.10385090515165762, 0.11438642040948883], 'false,false,false': [0.12094278098307472, 0.0], 'false,false,true': [0.11239836574280013, 0.0003070793447665524]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
0;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true
0;false,false;haswordvenue(B, L), haswordtitle(M, L).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
1;false,true;title(K, J), venue(K, A).;true;true
1;false,true,true;samebib(K, L), venue(L, B).;true;true
1;false,false;haswordvenue(B, M), haswordtitle(N, M).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
2;false,true;title(K, J), venue(K, B).;true;true
2;false,true,true;samebib(K, L), venue(L, A).;true;true
2;false,false;haswordvenue(A, M), haswordtitle(N, M).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
3;false,true;haswordtitle(J, K), haswordvenue(A, K).;true;true
3;false,false;haswordvenue(A, L), haswordtitle(M, L).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
4;false,true;haswordtitle(J, K), haswordvenue(A, K).;true;true
4;false,false;haswordvenue(A, L), haswordtitle(M, L).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;false;haswordvenue(A, I), haswordauthor(J, I).;true;true
5;false,false;haswordvenue(A, K), haswordtitle(L, K).;true;true
5;false,false,true;title(M, L), venue(M, A).;true;true
5;false,false,false;haswordvenue(B, N), haswordtitle(P, N).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;false;haswordvenue(B, G), haswordauthor(H, G).;true;true
6;false,false;haswordvenue(B, I), haswordtitle(J, I).;true;true
6;false,false,true;title(K, J), venue(K, B).;true;true
6;false,false,false;haswordvenue(A, L), haswordtitle(M, L).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;false;haswordvenue(A, I), haswordauthor(J, I).;true;true
7;false,false;haswordvenue(A, K), haswordtitle(L, K).;true;true
7;false,false,true;haswordtitle(L, M), haswordvenue(B, M).;true;true
7;false,false,false;haswordvenue(B, N), haswordtitle(P, N).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
8;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true
8;false,false;haswordvenue(B, L), haswordtitle(M, L).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;false;haswordvenue(A, I), haswordauthor(J, I).;true;true
9;false,false;haswordvenue(A, K), haswordtitle(L, K).;true;true
9;false,false,true;title(M, L), venue(M, A).;true;true
9;false,false,false;haswordvenue(B, N), haswordtitle(P, N).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.23843062524035266;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.4581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.424815601766179;  // std dev = 2.714, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.004815601766179008;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.004815601766179008;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.20686012285620575;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.45935396641210174;  // std dev = 0.810, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.3982164798305049;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.3628735944379147;  // std dev = 2.715, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.004228390109386251;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.004228390109386251;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.1751801570305961;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.3269052770205085;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return 0.37391135762433364;  // std dev = 0.808, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.2976445171077738;  // std dev = 2.715, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.11231637819360636;  // std dev = 9.13e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0037111125833978686;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.0037111125833978686;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.14514481334590568;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.26358767085800217;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return 0.29107789104287257;  // std dev = 0.807, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.23427726647373656;  // std dev = 2.715, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, A) )
%   | | then if ( samebib(K, L), venue(L, B) )
%   | | | then return 0.15046437198207863;  // std dev = 2.779, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return -0.1414196724610361;  // std dev = 0.058, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.10756983093381625;  // std dev = 0.039, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | then return 0.0032558270569705674;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.11804668707041945;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.22080200794107122;  // std dev = 0.807, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.20295547503731384;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.18035198942428982;  // std dev = 2.715, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, B) )
%   | | then if ( samebib(K, L), venue(L, A) )
%   | | | then return 0.1510962244400982;  // std dev = 2.776, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return -0.14135311420467178;  // std dev = 0.071, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.11247270814237575;  // std dev = 0.046, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return 0.003395227114469539;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.09457696812283496;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.19406775007189458;  // std dev = 0.790, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.1585757331570609;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.13316418939707308;  // std dev = 2.718, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then return -0.029392598649217852;  // std dev = 0.328, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, M), haswordvenue(B, M) )
%   | | | then return -0.09719778683405687;  // std dev = 0.040, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0029790656544216383;  // std dev = 2.996, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, N), haswordtitle(P, N) )
%   | | | then return 0.006823563513070037;  // std dev = 2.848, 67.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=10 */
%   | | | else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C) )
%   | | then return -0.10539005564974935;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.14578609530086692;  // std dev = 0.791, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.07595587115072004;  // std dev = 0.486, 847.000 (wgt'ed) examples reached here.  /* #neg=524 #pos=323 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.12040747229823859;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.10005814638235527;  // std dev = 2.718, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return -0.08900775699919361;  // std dev = 0.037, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0026130881676001347;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | then return 0.0026205083738088547;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.058769952062810174;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.09418772719394611;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.09031815790743906;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.07542714070778318;  // std dev = 2.610, 28.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=16 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then return -0.03007406928281177;  // std dev = 0.328, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, M), haswordvenue(A, M) )
%   | | | then return -0.08205875019167545;  // std dev = 0.034, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0022979369949705933;  // std dev = 2.995, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | | | then return 0.0061559724143154726;  // std dev = 2.847, 67.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=10 */
%   | | | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04581813968556683;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.09126891023317292;  // std dev = 0.791, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.05726712747131545;  // std dev = 0.495, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then return -0.026230168769924386;  // std dev = 0.328, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | | then return -0.07609313403739412;  // std dev = 0.032, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0020325860938806674;  // std dev = 2.995, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.005387087150487955;  // std dev = 2.847, 67.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=10 */
%   | | | else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.03554341140187514;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.056434503614973375;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return 0.06922271458544534;  // std dev = 0.792, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.04075754757773968;  // std dev = 2.718, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.07091905175373521;  // std dev = 0.030, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0017774698755877948;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.0017815880952524348;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.557332
   AUC PR    = 0.428456
   CLL	      = -0.655727
   Precision = 0.637427 at threshold = 0.5
   Recall    = 0.041148
   F1        = 0.077305


Total learning time: 58.73019099235535 seconds
Total inference time: 7.1 seconds
AUC ROC: 0.557332


Results scoring model
   AUC ROC   = 0.593517
   AUC PR    = 0.42064
   CLL	      = -0.61863
   Precision = 0.578947 at threshold = 0.5
   Recall    = 0.059783
   F1        = 0.108374


Total scoring time: 1.026 seconds
Refined model CLL: -0.61863


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.557332
   AUC PR    = 0.428456
   CLL	      = -0.655727
   Precision = 0.637427 at threshold = 0.5
   Recall    = 0.041148
   F1        = 0.077305


Total learning time: 117.05851511001588 seconds
Total inference time: 7.1 seconds
AUC ROC: 0.557332
Total revision time: 117.05851511001588
Best scored revision CLL: -0.61863


Dataset: 11_yeast_cora, Fold: 1, Type: Transfer (trRDN-B), Time: 00:13:50
{'AUC ROC': 0.557332, 'AUC PR': 0.428456, 'CLL': -0.655727, 'Precision': [0.637427, 0.5], 'Recall': 0.041148, 'F1': 0.077305, 'Learning time': 117.05851511001588, 'Inference time': 7.1, 'parameter': {'AUC ROC': 0.557392, 'AUC PR': 0.428417, 'CLL': -0.654731, 'Precision': [0.637427, 0.5], 'Recall': 0.041148, 'F1': 0.077305, 'Learning time': 56.28832411766052, 'Inference time': 7.128}}


Starting fold 2

Target train facts examples: 9016
Target train pos examples: 771
Target train neg examples: 544

Target test facts examples: 33542
Target test pos  examples: 2246
Target test neg examples: 4478

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.4356367001892301;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.5949910403626703;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.5640312880406888;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.37395569825543723;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.5062567560764839;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.48074388375574334;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.7194734122109543;  // std dev = 7.30e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.5791684237702857;  // std dev = 0.357, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.22916842377028543;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, B) )
%   | | | then return -0.008145345695425868;  // std dev = 0.852, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.07083157622971455;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.3045453081923796;  // std dev = 0.494, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.4047531668618019;  // std dev = 1.919, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.42464571865829975;  // std dev = 1.908, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then return 0.4317030979309822;  // std dev = 0.348, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | else return 0.20848477447886868;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.4513849731813856;  // std dev = 0.357, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.18162271221626702;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, B) )
%   | | | then return -0.006592444675509679;  // std dev = 0.852, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.05707271743850968;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.24042272651457108;  // std dev = 0.494, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.3098169854894562;  // std dev = 1.919, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.32456036871644;  // std dev = 1.905, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then return 0.33370432400678046;  // std dev = 0.346, 34.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=26 */
%   | | else return 0.15862414845603107;  // std dev = 0.499, 13.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.18608136871121453;  // std dev = 0.493, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.23288770051702257;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.20738703360610133;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.3712569085691976;  // std dev = 1.05e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return 0.3674830626152011;  // std dev = 3.65e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.10183264543670413;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.0997167650237253;  // std dev = 0.488, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.4084387498214248;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.09713341145539167;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.18552148385032738;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.1388996313014777;  // std dev = 0.493, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.17498421379444495;  // std dev = 1.919, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.18610388889644786;  // std dev = 1.897, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.2868949074503533;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.0790491450754914;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.0774458362118892;  // std dev = 0.488, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.30698146512891156;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(A, C) )
%   | | then return 0.073562644160144;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, A) )
%   | | | then return -0.13485948984379176;  // std dev = 0.860, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.1905788549317322;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.10453942390976202;  // std dev = 0.493, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.1324762415840328;  // std dev = 1.919, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.1425959904557603;  // std dev = 1.899, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then return 0.17753380591096915;  // std dev = 0.320, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | else return 0.05968774912059184;  // std dev = 0.488, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.23255280078070756;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(A, C) )
%   | | then return 0.055480366612004964;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, A) )
%   | | | then return -0.10348004815572924;  // std dev = 0.860, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.14627386357373595;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.07847754774279443;  // std dev = 0.493, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.10127711761073177;  // std dev = 1.919, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.11055635040133423;  // std dev = 1.902, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then return 0.14267613435799723;  // std dev = 0.321, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | else return 0.04575419017989203;  // std dev = 0.488, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.20978524859894213;  // std dev = 0.355, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.041742284396087626;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, B) )
%   | | | then return -0.10102686321804599;  // std dev = 0.839, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.1519875910379042;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.058652141603699616;  // std dev = 0.493, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.07815629510841408;  // std dev = 1.919, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.08666042363682984;  // std dev = 1.904, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then return 0.1319667656174113;  // std dev = 0.318, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | else return -0.006861360737896949;  // std dev = 0.488, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04513931754173038;  // std dev = 0.491, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.06080926191424572;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.03167316277173863;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.19403496331812375;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.16116512090426052;  // std dev = 2.36e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.006504104394908132;  // std dev = 0.486, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return -0.005183115989881708;  // std dev = 0.488, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */


Results
   AUC ROC   = 0.535609
   AUC PR    = 0.344413
   CLL	      = -0.755743
   Precision = 0.35393 at threshold = 0.5
   Recall    = 0.956367
   F1        = 0.516657


Total learning time: 58.882832050323486 seconds
Total inference time: 5.332 seconds
AUC ROC: 0.535609


Results scoring model
   AUC ROC   = 0.553802
   AUC PR    = 0.662973
   CLL	      = -0.664508
   Precision = 0.594317 at threshold = 0.5
   Recall    = 0.976654
   F1        = 0.73896


Total scoring time: 1.055 seconds
Parameter learned model CLL: -0.664508


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)'}, {'true,true': [0.494, 518, 708], 'true,false,true': [0.44, 5, 14], 'true,false,false,true': [1.879, 5, 12], 'true,false,false,false': [0.0, 0, 5], 'false,true,true': [0.0, 0, 20], 'false,true,false': [0.495, 8, 6], 'false,false': [0.495, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)'}, {'true,true': [0.494, 518, 708], 'true,false,true': [0.44, 5, 14], 'true,false,false,true': [1.879, 5, 12], 'true,false,false,false': [0.0, 0, 5], 'false,true,true': [7.3e-08, 0, 20], 'false,true,false': [0.495, 8, 6], 'false,false': [0.495, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(E, C)', 'true,false': 'haswordvenue(B, C)', 'true,false,false': 'author(F, D), venue(F, B)', 'false': 'haswordvenue(A, G), haswordvenue(B, G)', 'false,true': 'haswordtitle(H, G)', 'false,true,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,false': 'haswordvenue(A, K), haswordtitle(L, K)'}, {'true,true': [0.357, 3, 17], 'true,false,true': [1.0, 2, 2], 'true,false,false,true': [0.852, 3, 1], 'true,false,false,false': [0.894, 4, 1], 'false,true,true': [0.494, 507, 687], 'false,true,false,true': [1.919, 5, 14], 'false,true,false,false': [1.908, 5, 17], 'false,false,true': [0.348, 7, 26], 'false,false,false': [0.495, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(E, C)', 'true,false': 'haswordvenue(B, C)', 'true,false,false': 'author(F, D), venue(F, B)', 'false': 'haswordvenue(A, G), haswordvenue(B, G)', 'false,true': 'haswordtitle(H, G)', 'false,true,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,false': 'haswordvenue(B, K), haswordtitle(L, K)'}, {'true,true': [0.357, 3, 17], 'true,false,true': [1.0, 2, 2], 'true,false,false,true': [0.852, 3, 1], 'true,false,false,false': [0.894, 4, 1], 'false,true,true': [0.494, 507, 687], 'false,true,false,true': [1.919, 5, 14], 'false,true,false,false': [1.905, 5, 17], 'false,false,true': [0.346, 8, 26], 'false,false,false': [0.499, 7, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(A, K)'}, {'true,true': [0.493, 518, 708], 'true,false,true': [0.44, 5, 14], 'true,false,false,true': [1.879, 5, 12], 'true,false,false,false': [1.05e-08, 0, 5], 'false,true,true': [3.65e-08, 0, 20], 'false,true,false': [0.495, 8, 6], 'false,false': [0.488, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordtitle(F, D)', 'true,true,false': 'haswordvenue(A, D)', 'true,false': 'haswordtitle(G, C)', 'true,false,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(A, L)'}, {'true,true,true': [0.356, 3, 17], 'true,true,false,true': [1.0, 2, 2], 'true,true,false,false': [1.225, 6, 2], 'true,false,true': [0.493, 507, 687], 'true,false,false,true': [1.919, 5, 14], 'true,false,false,false': [1.897, 5, 17], 'false,true,true': [0.0, 0, 20], 'false,true,false': [0.495, 8, 6], 'false,false': [0.488, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(B, C), haswordauthor(D, C)', 'true': 'haswordtitle(E, C)', 'true,false': 'haswordvenue(A, C)', 'true,false,false': 'author(F, D), venue(F, A)', 'false': 'haswordvenue(A, G), haswordvenue(B, G)', 'false,true': 'haswordtitle(H, G)', 'false,true,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,false': 'haswordvenue(B, K), haswordtitle(L, K)'}, {'true,true': [0.356, 3, 17], 'true,false,true': [1.0, 2, 2], 'true,false,false,true': [0.86, 3, 1], 'true,false,false,false': [0.894, 4, 1], 'false,true,true': [0.493, 507, 687], 'false,true,false,true': [1.919, 5, 14], 'false,true,false,false': [1.899, 5, 17], 'false,false,true': [0.32, 7, 26], 'false,false,false': [0.488, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(B, C), haswordauthor(D, C)', 'true': 'haswordtitle(E, C)', 'true,false': 'haswordvenue(A, C)', 'true,false,false': 'author(F, D), venue(F, A)', 'false': 'haswordvenue(A, G), haswordvenue(B, G)', 'false,true': 'haswordtitle(H, G)', 'false,true,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,false': 'haswordvenue(B, K), haswordtitle(L, K)'}, {'true,true': [0.356, 3, 17], 'true,false,true': [1.0, 2, 2], 'true,false,false,true': [0.86, 3, 1], 'true,false,false,false': [0.894, 4, 1], 'false,true,true': [0.493, 507, 687], 'false,true,false,true': [1.919, 5, 14], 'false,true,false,false': [1.902, 5, 17], 'false,false,true': [0.321, 7, 26], 'false,false,false': [0.488, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(E, C)', 'true,false': 'haswordvenue(B, C)', 'true,false,false': 'author(F, D), venue(F, B)', 'false': 'haswordvenue(A, G), haswordvenue(B, G)', 'false,true': 'haswordtitle(H, G)', 'false,true,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,false': 'haswordvenue(A, K), haswordtitle(L, K)'}, {'true,true': [0.355, 3, 17], 'true,false,true': [1.0, 2, 2], 'true,false,false,true': [0.839, 3, 1], 'true,false,false,false': [0.894, 4, 1], 'false,true,true': [0.493, 507, 687], 'false,true,false,true': [1.919, 5, 14], 'false,true,false,false': [1.904, 5, 17], 'false,false,true': [0.318, 7, 26], 'false,false,false': [0.488, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)'}, {'true,true': [0.491, 518, 708], 'true,false,true': [0.44, 5, 14], 'true,false,false,true': [1.879, 5, 12], 'true,false,false,false': [0.0, 0, 5], 'false,true,true': [2.36e-08, 0, 20], 'false,true,false': [0.486, 8, 6], 'false,false': [0.488, 8, 6]}]]
[{'': [0.24306651325713594, 0.22222222222222385], 'true': [0.24399564626142126, 0.1844140392623454], 'false': [0.17993079584775207, 0.24489795918367352], 'true,false': [0.19390581717451486, 0.17561983471074338], 'false,true': [-8.881784197001253e-17, 0.24489795918367352], 'true,false,false': [0.20761245674740453, 0.0]}, {'': [0.24265720194658602, 0.1968581969586748], 'true': [0.2439956462613994, 0.18151807630785113], 'false': [0.15465453537750254, 0.24489795918367324], 'true,false': [0.193905817174515, 0.17043669583228802], 'true,false,false': [0.20761245674740458, 0.0], 'false,true': [2.6645352591003756e-16, 0.24489795918367324]}, {'': [0.22952352137572604, 0.23994088079159395], 'false': [0.24253575522871818, 0.16862805083149526], 'false,true': [0.24431832529482975, 0.1787372059517855], 'true': [0.12749999999999978, 0.21079846857026777], 'true,false': [0.25, 0.17058790973374105], 'false,true,false': [0.1939058171745152, 0.16545366223293648], 'true,false,false': [0.18163970606836305, 0.16000000000000003], 'false,false': [0.12142920769740283, 0.2448979591836735]}, {'': [0.19994562389889503, 0.23941615243062975], 'false': [0.24232387034928365, 0.16128844856615307], 'false,true': [0.24431832529481307, 0.17846373208604321], 'true': [0.1275000000000001, 0.20475562200934608], 'true,false': [0.24999999999999997, 0.17025676935000267], 'false,true,false': [0.1939058171745152, 0.16502665466276994], 'true,false,false': [0.18166203218293545, 0.16000000000000003], 'false,false': [0.11945642868432348, 0.24852071005917167]}, {'': [0.24069494216805867, 0.15828487640135067], 'true': [0.24268337587691347, 0.17850681904003904], 'true,false': [0.19390581717451524, 0.1651437859024073], 'true,false,false': [0.20761245674740478, 2.2204460492503132e-17], 'false': [0.11793345063375366, 0.2385130172301659], 'false,true': [6.661338147750939e-17, 0.24489795918367332]}, {'': [0.24060288142074818, 0.15150827503449465], 'true': [0.22230432679374126, 0.2409123687073101], 'true,false': [0.24302571027689795, 0.17765813695300844], 'true,true': [0.12638116687022224, 0.2260875088533971], 'true,true,false': [0.24999999999999997, 0.18749999999999997], 'true,false,false': [0.19390581717451524, 0.16356874957890366], 'false': [0.11130397027148874, 0.23827957804200292], 'false,true': [0.0, 0.24489795918367357]}, {'': [0.1965967042202861, 0.23744943105556632], 'false': [0.24088892986637161, 0.14576768408393248], 'false,true': [0.2430155508612814, 0.1778811866614475], 'true': [0.12639779087092962, 0.20804108641382954], 'true,false': [0.25000000000000006, 0.1717614467176559], 'false,true,false': [0.1939058171745152, 0.16399427506024972], 'true,false,false': [0.18473845086705726, 0.16], 'false,false': [0.1024554415744294, 0.23810989368812444]}, {'': [0.1785073527626498, 0.23742331062019154], 'false': [0.24088304019708184, 0.14537302026665738], 'false,true': [0.24301349745852366, 0.17809393090622702], 'true': [0.12643712792266854, 0.20275994159694474], 'true,false': [0.24999999999999997, 0.17148990122477997], 'false,true,false': [0.19390581717451524, 0.16439830901889801], 'true,false,false': [0.18483488295684916, 0.16000000000000006], 'false,false': [0.10328411169135238, 0.23798689925247798]}, {'': [0.17469696962894593, 0.23724585763617195], 'false': [0.24067713955195422, 0.14614794634736555], 'false,true': [0.2428004701668, 0.1782816016285716], 'false,true,false': [0.19390581717451524, 0.1647544466898381], 'true': [0.1263522257018248, 0.19933243705205544], 'true,false': [0.25, 0.1678077991781984], 'true,false,false': [0.17612477271765212, 0.15999999999999998], 'false,false': [0.10142398020465175, 0.2380364427045761]}, {'': [0.2388801991342497, 0.14449600462773618], 'true': [0.2408886740276802, 0.1784411606326859], 'true,false': [0.19390581717451524, 0.16505738416745014], 'true,false,false': [0.20761245674740483, 0.0], 'false': [0.102901273309302, 0.2380459783647237], 'false,true': [2.7755575615628914e-17, 0.23583248642393984]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,false;haswordvenue(A, E), haswordtitle(F, E).;true;true
0;true,false,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
0;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
0;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,false;haswordvenue(A, E), haswordtitle(F, E).;true;true
1;true,false,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
1;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,false;haswordvenue(A, E), haswordtitle(F, E).;true;true
4;true,false,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
4;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
4;false,true;haswordtitle(J, K), haswordvenue(A, K).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;false;haswordvenue(B, J), haswordtitle(K, J).;true;true
5;false,true;haswordtitle(K, L), haswordvenue(A, L).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,false;haswordvenue(A, E), haswordtitle(F, E).;true;true
9;true,false,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
9;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
9;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.4356367001892301;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.5949910403626703;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.5640312880406888;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.37395569825543723;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.5062567560764839;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.48074388375574334;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.7194734122109543;  // std dev = 7.30e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.30665618885999163;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.4047531668618019;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.386198448632422;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.5553664367462845;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return 0.5553664367462846;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.20848477447886868;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.20848477447886868;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.5145754588862081;  // std dev = 0.357, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.16457545888620817;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, B) )
%   | | | then return -0.06605466959315473;  // std dev = 0.846, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.13542454111379182;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.2399523433083081;  // std dev = 0.494, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.3261448737160187;  // std dev = 1.915, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.3103700402108463;  // std dev = 1.898, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then return 0.3332419990230316;  // std dev = 0.330, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | else return 0.17062637354018512;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.18613466623308164;  // std dev = 0.493, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.23233438181079052;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.2166010869669191;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.344487667745488;  // std dev = 1.05e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return 0.33934134460665244;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.13664585375352212;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.10772948932183568;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.14103842422531224;  // std dev = 0.493, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.1911614910571029;  // std dev = 0.439, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.14402452645856367;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.27133764558638873;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return 0.2678472860901805;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.10762034996184425;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.08386661726494864;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.31058267993521105;  // std dev = 0.357, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.047853794842377284;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, B) )
%   | | | then return -0.11758876583868606;  // std dev = 0.838, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.17942185786550097;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.10450037608210848;  // std dev = 0.494, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.1443302724589107;  // std dev = 1.914, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.13443622748774933;  // std dev = 1.892, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then return 0.16855464060807163;  // std dev = 0.319, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | else return 0.08372807955323866;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.07966321317674256;  // std dev = 0.493, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.11000702093483646;  // std dev = 0.439, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.07706043617269055;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.1988304151112834;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return 0.19123984105724506;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.06457405393631672;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.029170483965027198;  // std dev = 0.487, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.05978456375266236;  // std dev = 0.493, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.087716912439261;  // std dev = 0.439, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.055841595783490856;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.1690393686666608;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return 0.16339056531069357;  // std dev = 2.36e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.04949778322519479;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.02219745903083579;  // std dev = 0.487, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.3124272308559641;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(A, C) )
%   | | then return 0.0011753207299811663;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, A) )
%   | | | then return -0.24653871588843623;  // std dev = 0.833, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.3317876128719524;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.04275366246496408;  // std dev = 0.493, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.07138095225889375;  // std dev = 1.912, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.06382881359035952;  // std dev = 1.890, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then return 0.11409096261802591;  // std dev = 0.315, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | else return 0.01686612174098096;  // std dev = 0.487, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */


Results
   AUC ROC   = 0.537183
   AUC PR    = 0.346014
   CLL	      = -0.755939
   Precision = 0.353871 at threshold = 0.5
   Recall    = 0.956367
   F1        = 0.516595


Total learning time: 60.011045932769775 seconds
Total inference time: 5.777 seconds
AUC ROC: 0.537183


Results scoring model
   AUC ROC   = 0.553404
   AUC PR    = 0.660708
   CLL	      = -0.666182
   Precision = 0.594317 at threshold = 0.5
   Recall    = 0.976654
   F1        = 0.73896


Total scoring time: 1.034 seconds
Refined model CLL: -0.666182


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.535609
   AUC PR    = 0.344413
   CLL	      = -0.755743
   Precision = 0.35393 at threshold = 0.5
   Recall    = 0.956367
   F1        = 0.516657


Total learning time: 120.98287798309327 seconds
Total inference time: 5.332 seconds
AUC ROC: 0.535609
Total revision time: 120.98287798309327
Best scored revision CLL: -0.664508


Dataset: 11_yeast_cora, Fold: 2, Type: Transfer (trRDN-B), Time: 00:16:03
{'AUC ROC': 0.535609, 'AUC PR': 0.344413, 'CLL': -0.755743, 'Precision': [0.35393, 0.5], 'Recall': 0.956367, 'F1': 0.516657, 'Learning time': 120.98287798309327, 'Inference time': 5.332, 'parameter': {'AUC ROC': 0.535609, 'AUC PR': 0.344413, 'CLL': -0.755743, 'Precision': [0.35393, 0.5], 'Recall': 0.956367, 'F1': 0.516657, 'Learning time': 58.882832050323486, 'Inference time': 5.332}}


Starting fold 3

Target train facts examples: 9306
Target train pos examples: 581
Target train neg examples: 2222

Target test facts examples: 33252
Target test pos  examples: 2436
Target test neg examples: 2800

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.21089974416099605;  // std dev = 0.478, 1,545.000 (wgt'ed) examples reached here.  /* #neg=1,000 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return -0.030739953789376686;  // std dev = 0.314, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then if ( title(H, G), venue(H, A) )
%   | | | then return 0.05092001943686177;  // std dev = 3.594, 83.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=16 */
%   | | | else return -0.0168510649004878;  // std dev = 1.323, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.019765096715673995;  // std dev = 3.663, 99.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=16 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.18530718604223786;  // std dev = 0.478, 1,536.000 (wgt'ed) examples reached here.  /* #neg=991 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.5791094503237476;  // std dev = 2.089, 22.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return -0.14797784862059984;  // std dev = 0.010, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   | | else if ( title(H, E), venue(H, B) )
%   | | | then return -0.13981214937855654;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.02685451728811014;  // std dev = 1.291, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return 0.03653328223200071;  // std dev = 3.622, 89.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=16 */
%   | | | else return -0.033163019606523715;  // std dev = 1.333, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.15783396155135493;  // std dev = 0.479, 1,535.000 (wgt'ed) examples reached here.  /* #neg=990 #pos=545 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.547355379844309;  // std dev = 2.208, 23.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=16 */
%   | | | else return -0.1478114020492812;  // std dev = 0.019, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
%   | | else if ( title(H, E), venue(H, A) )
%   | | | then return -0.14022795726902806;  // std dev = 5.27e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.04159022454915373;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.00930039654724569;  // std dev = 3.306, 98.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=16 */
%   | | | else return -0.02554719281026521;  // std dev = 1.324, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | | else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1346810514763685;  // std dev = 0.479, 1,522.000 (wgt'ed) examples reached here.  /* #neg=977 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.4887271875747624;  // std dev = 2.089, 22.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return -0.13104793204344117;  // std dev = 0.015, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | | else if ( title(H, E), venue(H, B) )
%   | | | then return -0.1210834043825966;  // std dev = 5.27e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return 0.041848733390511095;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return 0.024029389365306394;  // std dev = 3.306, 88.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=16 */
%   | | | else return -0.04575256642603621;  // std dev = 1.336, 22.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
%   | | else return -0.10512964216006966;  // std dev = 0.009, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.352367303941084;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.07736730394108404;  // std dev = 0.468, 40.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=13 */
%   | else return 0.11321314295880795;  // std dev = 0.480, 1,466.000 (wgt'ed) examples reached here.  /* #neg=937 #pos=529 */
%   else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | then if ( title(H, G), venue(H, A) )
%   | | then return 0.01858803087980521;  // std dev = 0.343, 92.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=16 */
%   | | else return 0.08249534277627103;  // std dev = 0.416, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return -0.010231003709213331;  // std dev = 2.979, 103.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=16 */
%   | | | else return 0.1406308653973384;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | else return -0.09564423144549161;  // std dev = 0.008, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09942221790122847;  // std dev = 0.482, 1,478.000 (wgt'ed) examples reached here.  /* #neg=933 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return -0.03537731190812287;  // std dev = 0.277, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then if ( title(H, G), venue(H, B) )
%   | | | then return 0.011424508700585772;  // std dev = 2.947, 86.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=16 */
%   | | | else return 0.036588963197243404;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.00482114605800573;  // std dev = 3.354, 100.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=16 */
%   | | | else return -0.08468064560946441;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06386305406186114;  // std dev = 0.478, 1,543.000 (wgt'ed) examples reached here.  /* #neg=998 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return -0.03980604679580969;  // std dev = 0.262, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return -0.020472995809168434;  // std dev = 0.282, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.01890459380333843;  // std dev = 3.321, 91.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=16 */
%   | | | else return 0.011106392067251817;  // std dev = 2.989, 93.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=16 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.39465484868011447;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return -0.0062352802252217164;  // std dev = 0.453, 45.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=13 */
%   | else return 0.05919771578024862;  // std dev = 0.481, 1,462.000 (wgt'ed) examples reached here.  /* #neg=933 #pos=529 */
%   else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | then if ( title(H, G), venue(H, B) )
%   | | then if ( samebib(H, I), venue(I, A) )
%   | | | then return 0.42540627570697925;  // std dev = 2.310, 24.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=16 */
%   | | | else return -0.13726097259497685;  // std dev = 0.033, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | | else if ( title(J, G), venue(J, A) )
%   | | | then return -0.12378506822543135;  // std dev = 5.27e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.02882808345758286;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then return -0.007127756841839785;  // std dev = 0.304, 113.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=18 */
%   | | else return -0.0804057908123266;  // std dev = 0.010, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04690075361990854;  // std dev = 0.480, 1,505.000 (wgt'ed) examples reached here.  /* #neg=960 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.4624772523469213;  // std dev = 1.786, 20.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=16 */
%   | | | else return -0.1164265548225183;  // std dev = 0.027, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
%   | | else if ( title(H, E), venue(H, B) )
%   | | | then return -0.10927951889458799;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return -0.015186786813386366;  // std dev = 1.301, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return 0.00336143011334307;  // std dev = 2.985, 92.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=16 */
%   | | | else return -0.041900375293178464;  // std dev = 1.320, 21.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=2 */
%   | | else return -0.07348383794911326;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.036002716691503935;  // std dev = 0.480, 1,508.000 (wgt'ed) examples reached here.  /* #neg=963 #pos=545 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.36778834497537205;  // std dev = 2.206, 23.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=16 */
%   | | | else return -0.1217155443540376;  // std dev = 0.036, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   | | else if ( title(H, E), venue(H, A) )
%   | | | then return -0.10690521474664201;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.0179704768651496;  // std dev = 1.317, 15.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return -0.00814362083950273;  // std dev = 2.580, 91.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=16 */
%   | | | else return -0.050465859754466394;  // std dev = 1.317, 23.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=2 */
%   | | else return -0.06863492365961131;  // std dev = 1.32e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.565045
   AUC PR    = 0.51236
   CLL	      = -0.706311
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 42.41350483894348 seconds
Total inference time: 4.645 seconds
AUC ROC: 0.565045


Results scoring model
   AUC ROC   = 0.592784
   AUC PR    = 0.271838
   CLL	      = -0.514222
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 1.355 seconds
Parameter learned model CLL: -0.514222


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(A, F), haswordtitle(G, F)', 'false,false,true': 'title(H, G), venue(H, A)', 'false,false,false': 'haswordvenue(B, I), haswordtitle(J, I)'}, {'true': [0.478, 1, 545], 'false,true': [0.314, 16, 2], 'false,false,true,true': [3.594, 67, 16], 'false,false,true,false': [1.323, 14, 2], 'false,false,false,true': [3.663, 83, 16], 'false,false,false,false': [0.0, 5, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordtitle(E, D)', 'false,true': 'title(F, E), venue(F, A)', 'false,true,true': 'samebib(F, G), venue(G, B)', 'false,true,false': 'title(H, E), venue(H, B)', 'false,false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,false,true': 'title(K, J), venue(K, B)'}, {'true': [0.478, 991, 545], 'false,true,true,true': [2.089, 6, 16], 'false,true,true,false': [0.01, 54, 0], 'false,true,false,true': [0.0, 6, 0], 'false,true,false,false': [1.291, 10, 2], 'false,false,true,true': [3.622, 73, 16], 'false,false,true,false': [1.333, 16, 2], 'false,false,false': [0.0, 3, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordtitle(E, D)', 'false,true': 'title(F, E), venue(F, B)', 'false,true,true': 'samebib(F, G), venue(G, A)', 'false,true,false': 'title(H, E), venue(H, A)', 'false,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,false,true': 'title(K, J), venue(K, A)'}, {'true': [0.479, 990, 545], 'false,true,true,true': [2.208, 7, 16], 'false,true,true,false': [0.019, 67, 0], 'false,true,false,true': [5.27e-09, 8, 0], 'false,true,false,false': [1.279, 9, 2], 'false,false,true,true': [3.306, 82, 16], 'false,false,true,false': [1.324, 16, 2], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordtitle(E, D)', 'false,true': 'title(F, E), venue(F, A)', 'false,true,true': 'samebib(F, G), venue(G, B)', 'false,true,false': 'title(H, E), venue(H, B)', 'false,false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,false,true': 'title(K, J), venue(K, B)'}, {'true': [0.479, 977, 545], 'false,true,true,true': [2.089, 6, 16], 'false,true,true,false': [0.015, 60, 0], 'false,true,false,true': [5.27e-09, 10, 0], 'false,true,false,false': [1.279, 9, 2], 'false,false,true,true': [3.306, 72, 16], 'false,false,true,false': [1.336, 20, 2], 'false,false,false': [0.009, 3, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordvenue(A, D)', 'false': 'haswordvenue(B, F), haswordtitle(G, F)', 'false,true': 'title(H, G), venue(H, A)', 'false,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,false,true': 'title(K, J), venue(K, B)'}, {'true,true,true': [1.095, 2, 3], 'true,true,false': [0.468, 27, 13], 'true,false': [0.48, 937, 529], 'false,true,true': [0.343, 76, 16], 'false,true,false': [0.416, 7, 2], 'false,false,true,true': [2.979, 87, 16], 'false,false,true,false': [1.195, 5, 2], 'false,false,false': [0.008, 3, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(A, F), haswordtitle(G, F)', 'false,false,true': 'title(H, G), venue(H, B)', 'false,false,false': 'haswordvenue(B, I), haswordtitle(J, I)'}, {'true': [0.482, 933, 545], 'false,true': [0.277, 17, 2], 'false,false,true,true': [2.947, 70, 16], 'false,false,true,false': [1.265, 8, 2], 'false,false,false,true': [3.354, 84, 16], 'false,false,false,false': [0.0, 3, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(A, F), haswordauthor(G, F)', 'false,false,false': 'haswordvenue(B, H), haswordtitle(I, H)'}, {'true': [0.478, 998, 545], 'false,true': [0.262, 15, 2], 'false,false,true': [0.282, 16, 2], 'false,false,false,true': [3.321, 75, 16], 'false,false,false,false': [2.989, 77, 16]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordvenue(A, D)', 'false': 'haswordvenue(B, F), haswordtitle(G, F)', 'false,true': 'title(H, G), venue(H, B)', 'false,true,true': 'samebib(H, I), venue(I, A)', 'false,true,false': 'title(J, G), venue(J, A)', 'false,false': 'haswordvenue(A, K), haswordtitle(L, K)'}, {'true,true,true': [0.866, 1, 3], 'true,true,false': [0.453, 32, 13], 'true,false': [0.481, 933, 529], 'false,true,true,true': [2.31, 8, 16], 'false,true,true,false': [0.033, 61, 0], 'false,true,false,true': [5.27e-09, 8, 0], 'false,true,false,false': [1.279, 9, 2], 'false,false,true': [0.304, 95, 18], 'false,false,false': [0.01, 5, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordtitle(E, D)', 'false,true': 'title(F, E), venue(F, A)', 'false,true,true': 'samebib(F, G), venue(G, B)', 'false,true,false': 'title(H, E), venue(H, B)', 'false,false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,false,true': 'title(K, J), venue(K, B)'}, {'true': [0.48, 960, 545], 'false,true,true,true': [1.786, 4, 16], 'false,true,true,false': [0.027, 73, 0], 'false,true,false,true': [0.0, 7, 0], 'false,true,false,false': [1.301, 11, 2], 'false,false,true,true': [2.985, 76, 16], 'false,false,true,false': [1.32, 19, 2], 'false,false,false': [0.0, 3, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordtitle(E, D)', 'false,true': 'title(F, E), venue(F, B)', 'false,true,true': 'samebib(F, G), venue(G, A)', 'false,true,false': 'title(H, E), venue(H, A)', 'false,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,false,true': 'title(K, J), venue(K, A)'}, {'true': [0.48, 963, 545], 'false,true,true,true': [2.206, 7, 16], 'false,true,true,false': [0.036, 68, 0], 'false,true,false,true': [0.0, 5, 0], 'false,true,false,false': [1.317, 13, 2], 'false,false,true,true': [2.58, 75, 16], 'false,false,true,false': [1.317, 21, 2], 'false,false,false': [1.32e-09, 3, 0]}]]
[{'': [0.22831767576793993, 0.13636084437255694], 'false': [0.09876543209876548, 0.13943556019316278], 'false,false': [0.14876033057851185, 0.13017751479289885], 'false,false,true': [0.1556103933807514, 0.10937500000000004], 'false,false,false': [0.1354963779206198, -2.7755575615628915e-18]}, {'': [0.22892210218640385, 0.14504006024244243], 'false': [0.15453482807337235, 0.13665379264127742], 'false,true': [0.16615081363505704, 0.09876543209876537], 'false,true,true': [0.19834710743801612, 1.8223342432391423e-06], 'false,false': [0.13986949674450871, 0.0], 'false,false,true': [0.14736551629452188, 0.09876543209876552], 'false,true,false': [-4.625929269271485e-18, 0.13888888888888884]}, {'': [0.22898916699379968, 0.12131738650362767], 'false': [0.13768299963400896, 0.10628858587650965], 'false,true': [0.14613426588769515, 0.09418282548476449], 'false,true,true': [0.21205606203398264, 5.421603146350921e-06], 'false,false': [0.10950355544851519, 0.0], 'false,false,true': [0.11153414341892023, 0.09742221188654533], 'false,true,false': [3.469446951953614e-18, 0.14876033057851237]}, {'': [0.2298591313387045, 0.11691840833743089], 'false': [0.12045545828591428, 0.11360423231574143], 'false,true': [0.12862541646717113, 0.08454374904934471], 'false,true,true': [0.19834710743801642, 3.889423177882989e-06], 'false,false': [0.11634950395258789, 2.49685968795275e-05], 'false,false,true': [0.12416821687699055, 0.08117903517172524], 'false,true,false': [2.7755575615628915e-18, 0.1487603305785124]}, {'': [0.23059224631546665, 0.1072180866494161], 'true': [0.2291358024691353, 0.23063611948132853], 'true,true': [0.24000000000000007, 0.2193749999999997], 'false': [0.12300706710837703, 0.09275055159478408], 'false,true': [0.117768220921652, 0.17283950617283944], 'false,false': [0.09503986605471305, 2.1120815688045514e-05], 'false,false,true': [0.08618094124089958, 0.20408163265306128]}, {'': [0.23270057215626577, 0.10579435227680661], 'false': [0.07685211046423988, 0.1083942795480941], 'false,false': [0.10716240704827645, 0.10947490230395998], 'false,false,false': [0.11252583177953453, 0.0], 'false,false,true': [0.10095253737337867, 0.16000000000000006]}, {'': [0.22839762458468044, 0.10328850263983144], 'false': [0.0684109798869457, 0.10601696494512174], 'false,false': [0.07930829972801053, 0.10851787351500598], 'false,false,false': [0.12118832809001379, 0.09608982635865623]}, {'': [0.23046050580099528, 0.10409157874974652], 'true': [0.21601670094104514, 0.23090990921868274], 'true,true': [0.18750000000000003, 0.2054320987654319], 'false': [0.120994950084236, 0.08897871513839953], 'false,true': [0.12692605052029787, 0.09180193132623794], 'false,true,true': [0.22228109796074882, 1.7941420424548006e-05], 'false,true,false': [3.469446951953614e-18, 0.14876033057851246], 'false,false': [0.09268738133231191, 2.0717294356210893e-05]}, {'': [0.23087497112990327, 0.09145244276326368], 'false': [0.09059920921353032, 0.09227154856194673], 'false,false': [0.09460011890226912, -1.1564823173178713e-18], 'false,false,true': [0.09688020522622558, 0.08294325730462211], 'false,true': [0.09089412110493181, 0.0866295427228245], 'false,true,true': [0.15956365187437416, 9.665449332871925e-06], 'false,true,false': [0.0, 0.13017751479289943]}, {'': [0.23065528588120074, 0.08428823995584135], 'false': [0.09710329619942494, 0.07205533574614867], 'false,true': [0.09875010989476352, 0.08814967684205101], 'false,true,true': [0.21159722483830293, 1.9437986142476103e-05], 'false,true,false': [-1.3877787807814458e-18, 0.11555555555555559], 'false,false': [0.07388232178651698, 5.782411586589357e-19], 'false,false,true': [0.07313808128657338, 0.0753971303851186]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
0;false,false;haswordvenue(A, F), haswordtitle(G, F).;true;true
0;false,false,false;haswordvenue(B, I), haswordtitle(J, I).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;false;haswordvenue(A, D), haswordtitle(E, D).;true;true
1;false,true;title(F, E), venue(F, A).;true;true
1;false,true,true;samebib(F, G), venue(G, B).;true;true
1;false,true,false;title(H, E), venue(H, B).;true;true
1;false,false;haswordvenue(B, I), haswordtitle(J, I).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
2;false,true;title(F, E), venue(F, B).;true;true
2;false,true,true;samebib(F, G), venue(G, A).;true;true
2;false,true,false;title(H, E), venue(H, A).;true;true
2;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;false;haswordvenue(A, D), haswordtitle(E, D).;true;true
3;false,true;title(F, E), venue(F, A).;true;true
3;false,true,true;samebib(F, G), venue(G, B).;true;true
3;false,true,false;title(H, E), venue(H, B).;true;true
3;false,false;haswordvenue(B, I), haswordtitle(J, I).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;false;haswordvenue(B, F), haswordtitle(G, F).;true;true
4;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
5;false,false;haswordvenue(A, F), haswordtitle(G, F).;true;true
5;false,false,false;haswordvenue(B, I), haswordtitle(J, I).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;false;haswordvenue(B, F), haswordtitle(G, F).;true;true
7;false,true;title(H, G), venue(H, B).;true;true
7;false,true,true;samebib(H, I), venue(I, A).;true;true
7;false,true,false;title(J, G), venue(J, A).;true;true
7;false,false;haswordvenue(A, K), haswordtitle(L, K).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;false;haswordvenue(A, D), haswordtitle(E, D).;true;true
8;false,true;title(F, E), venue(F, A).;true;true
8;false,true,true;samebib(F, G), venue(G, B).;true;true
8;false,true,false;title(H, E), venue(H, B).;true;true
8;false,false;haswordvenue(B, I), haswordtitle(J, I).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
9;false,true;title(F, E), venue(F, B).;true;true
9;false,true,true;samebib(F, G), venue(G, A).;true;true
9;false,true,false;title(H, E), venue(H, A).;true;true
9;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22075705219864244;  // std dev = 0.481, 1,503.000 (wgt'ed) examples reached here.  /* #neg=958 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return -0.0418510649004878;  // std dev = 0.300, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return -0.024204006076958388;  // std dev = 0.322, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.030191945852200554;  // std dev = 3.640, 93.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=16 */
%   | | | else return 0.013488740924755091;  // std dev = 3.676, 103.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=16 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.18368413171727163;  // std dev = 0.478, 1,537.000 (wgt'ed) examples reached here.  /* #neg=992 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return -0.005596856481039112;  // std dev = 0.340, 15.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then if ( title(H, G), venue(H, A) )
%   | | | then return 0.06507065304824375;  // std dev = 3.561, 77.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=16 */
%   | | | else return -0.03238987504072102;  // std dev = 1.333, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | | else return 0.026780748186379558;  // std dev = 0.377, 93.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=16 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.40147819382345773;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.12647819382345804;  // std dev = 0.468, 40.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=13 */
%   | else return 0.16756815922139287;  // std dev = 0.482, 1,445.000 (wgt'ed) examples reached here.  /* #neg=916 #pos=529 */
%   else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | then if ( title(I, H), venue(I, A) )
%   | | then if ( samebib(I, J), venue(J, B) )
%   | | | then return 0.6493619855631775;  // std dev = 1.787, 20.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=16 */
%   | | | else return -0.15025942458165242;  // std dev = 0.025, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | | else return -0.048656689492751815;  // std dev = 0.287, 22.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( title(M, L), venue(M, B) )
%   | | | then return 0.034404991933149956;  // std dev = 3.617, 88.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=16 */
%   | | | else return -0.053690723267065026;  // std dev = 1.345, 21.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=2 */
%   | | else return -0.145464565285743;  // std dev = 0.006, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.12784222586705848;  // std dev = 0.478, 1,538.000 (wgt'ed) examples reached here.  /* #neg=993 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.030248383302586355;  // std dev = 0.342, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | then if ( title(H, G), venue(H, B) )
%   | | | then return 0.027906501623267247;  // std dev = 3.622, 89.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=16 */
%   | | | else return -0.024603988007283282;  // std dev = 1.328, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | | then return -0.12131241139455283;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.009212213095804918;  // std dev = 3.305, 96.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=16 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10475696891010472;  // std dev = 0.478, 1,538.000 (wgt'ed) examples reached here.  /* #neg=993 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.43945459423104116;  // std dev = 2.209, 23.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=16 */
%   | | | else return -0.1323753276382594;  // std dev = 0.043, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | | else if ( title(H, E), venue(H, B) )
%   | | | then return -0.13489600107658697;  // std dev = 1.05e-08, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0.04692218074159487;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return 0.010179687049773189;  // std dev = 3.652, 97.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=16 */
%   | | | else return -0.04403722174416658;  // std dev = 1.345, 21.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=2 */
%   | | else return -0.13056381093574773;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.085419725821497;  // std dev = 0.479, 1,534.000 (wgt'ed) examples reached here.  /* #neg=989 #pos=545 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.5382755578487682;  // std dev = 2.210, 23.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=16 */
%   | | | else return -0.15438339242971458;  // std dev = 0.065, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
%   | | else return 0.0881426111851929;  // std dev = 0.416, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return -0.0055657752910013795;  // std dev = 2.916, 99.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=16 */
%   | | | else return 0.08175604286434703;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return -0.116443745798666;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07617969816925411;  // std dev = 0.481, 1,501.000 (wgt'ed) examples reached here.  /* #neg=956 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return -0.021487964980495936;  // std dev = 0.258, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | then if ( title(H, G), venue(H, B) )
%   | | | then return 0.03189128164653097;  // std dev = 3.252, 81.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=16 */
%   | | | else return -0.03238429494493802;  // std dev = 1.321, 21.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=2 */
%   | | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | | then return -0.09410066950300944;  // std dev = 0.008, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.00322144171195938;  // std dev = 3.003, 94.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=16 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.03978911912404612;  // std dev = 0.471, 47.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=16 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.006679948333902642;  // std dev = 0.462, 42.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=13 */
%   | | else return 0.06546448998782842;  // std dev = 0.482, 1,401.000 (wgt'ed) examples reached here.  /* #neg=885 #pos=516 */
%   else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | then if ( title(J, I), venue(J, A) )
%   | | then if ( samebib(J, K), venue(K, B) )
%   | | | then return 0.4957279920881296;  // std dev = 1.585, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return -0.11753072739917698;  // std dev = 0.054, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   | | else return -0.038492507847562266;  // std dev = 0.296, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then if ( title(N, M), venue(N, B) )
%   | | | then return 0.002584338654588287;  // std dev = 3.293, 96.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=16 */
%   | | | else return -0.047284760969615695;  // std dev = 1.341, 24.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=2 */
%   | | else return -0.09516492932943314;  // std dev = 0.019, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04315792276547765;  // std dev = 0.480, 1,516.000 (wgt'ed) examples reached here.  /* #neg=971 #pos=545 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.39175543379339706;  // std dev = 2.401, 25.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=16 */
%   | | | else return -0.13727107118571533;  // std dev = 0.090, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   | | else return 0.15064782170674568;  // std dev = 0.452, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return -0.01797501714623247;  // std dev = 2.544, 95.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=16 */
%   | | | else return 0.020493754982893554;  // std dev = 1.291, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | | else return -0.09088949925448633;  // std dev = 0.020, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.3764307789663863;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.013246653283243637;  // std dev = 0.468, 40.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=13 */
%   | else return 0.031997908225729996;  // std dev = 0.479, 1,478.000 (wgt'ed) examples reached here.  /* #neg=949 #pos=529 */
%   else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | then if ( title(I, H), venue(I, A) )
%   | | then if ( samebib(I, J), venue(J, B) )
%   | | | then return 0.3993745508176054;  // std dev = 2.088, 22.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return -0.12176548309107099;  // std dev = 0.074, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   | | else return 0.06856990290728678;  // std dev = 0.416, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then if ( title(M, L), venue(M, A) )
%   | | | then return 2.2334282737256024E-4;  // std dev = 2.491, 85.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=16 */
%   | | | else return -0.05339140642946815;  // std dev = 1.336, 25.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=2 */
%   | | else return -0.08783913608331562;  // std dev = 0.004, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.564352
   AUC PR    = 0.509673
   CLL	      = -0.707084
   Precision = 0.6 at threshold = 0.5
   Recall    = 0.012315
   F1        = 0.024135


Total learning time: 39.937464237213135 seconds
Total inference time: 4.828 seconds
AUC ROC: 0.564352


Results scoring model
   AUC ROC   = 0.594534
   AUC PR    = 0.272608
   CLL	      = -0.514113
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 1.392 seconds
Refined model CLL: -0.514113


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.564352
   AUC PR    = 0.509673
   CLL	      = -0.707084
   Precision = 0.6 at threshold = 0.5
   Recall    = 0.012315
   F1        = 0.024135


Total learning time: 85.0979690761566 seconds
Total inference time: 4.828 seconds
AUC ROC: 0.564352
Total revision time: 85.0979690761566
Best scored revision CLL: -0.514113


Dataset: 11_yeast_cora, Fold: 3, Type: Transfer (trRDN-B), Time: 00:17:38
{'AUC ROC': 0.564352, 'AUC PR': 0.509673, 'CLL': -0.707084, 'Precision': [0.6, 0.5], 'Recall': 0.012315, 'F1': 0.024135, 'Learning time': 85.0979690761566, 'Inference time': 4.828, 'parameter': {'AUC ROC': 0.565045, 'AUC PR': 0.51236, 'CLL': -0.706311, 'Precision': [nan, 0.5], 'Recall': 0.0, 'F1': nan, 'Learning time': 42.41350483894348, 'Inference time': 4.645}}


Starting fold 4

Target train facts examples: 8129
Target train pos examples: 747
Target train neg examples: 1068

Target test facts examples: 34429
Target test pos  examples: 2270
Target test neg examples: 3954

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.27854694504975613;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.2867203636709409;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.44905802600860323;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.44905802600860323;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.5724346493852266;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.1914822684328457;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.05814893509951237;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.05814893509951237;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.2411503606196619;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.24811816884741328;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.3851926776601658;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.3851926776601658;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.48767788391726297;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.16653882456488167;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.05092203251355405;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.05092203251355405;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.20289930723994204;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.20848477447886868;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.31518052304212246;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.31518052304212246;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.3912569620992536;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.1420942428155646;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.04434629760466855;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.04434629760466855;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.16640029396569495;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.17062637354018492;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.24804771389482108;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.24804771389482108;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.3005711547884894;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.11914890490746433;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.03842866223690456;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.03842866223690456;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.7132053827676746;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.2867946172323253;  // std dev = 1.49e-08, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.5132053827676747;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.131341402918815;  // std dev = 0.493, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.1602106952275325;  // std dev = 3.494, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.19891512187188015;  // std dev = 2.599, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(B, M) )
%   | | then return 0.0984134027840187;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.033154945921885746;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.033154945921885746;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.10541434031987182;  // std dev = 0.492, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.10246307220535986;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.14163545619459858;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.15119201431602758;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.17664313168463983;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.08026654944252247;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.028495105925721097;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.028495105925721097;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.08225472376743981;  // std dev = 0.492, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.07955753113999157;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.10639675506619288;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.11367293071724269;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.1331350168403033;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.06479591611329234;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.024408230135271918;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.024408230135271918;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.06362123873371807;  // std dev = 0.492, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.0612717998300316;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.0798043488611261;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.085270684716156;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.10112116534072403;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.05187916934404051;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.02084688910874009;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.02084688910874009;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04890210787741369;  // std dev = 0.492, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.046920611825756985;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.059891317083841364;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.06397886100952203;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.07742717832062947;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( title(L, K), venue(L, B) )
%   | | then if ( samebib(L, M), venue(M, A) )
%   | | | then return 0.3020714322715009;  // std dev = 2.612, 28.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=14 */
%   | | | else return -0.19792856772849957;  // std dev = 0.227, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | else return 0.01891846413998146;  // std dev = 0.452, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | else return 0.017760671541598414;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.03742232630149843;  // std dev = 0.492, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.035787875884971454;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.045008206178553535;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.048063395929009566;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.05971712734840816;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.035499666942662884;  // std dev = 0.452, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.015098879183171418;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.011251361743546424;  // std dev = 0.380, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */


Results
   AUC ROC   = 0.571271
   AUC PR    = 0.43114
   CLL	      = -0.637666
   Precision = 0.721212 at threshold = 0.5
   Recall    = 0.052423
   F1        = 0.097741


Total learning time: 94.38093113899231 seconds
Total inference time: 7.602 seconds
AUC ROC: 0.571271


Results scoring model
   AUC ROC   = 0.548741
   AUC PR    = 0.461692
   CLL	      = -0.666141
   Precision = 0.661017 at threshold = 0.5
   Recall    = 0.052209
   F1        = 0.096774


Total scoring time: 1.279 seconds
Parameter learned model CLL: -0.666141


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(B, G)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)'}, {'true,true': [0.494, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(B, G)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)'}, {'true,true': [0.494, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(A, G)', 'true,false,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)'}, {'true,true': [0.494, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(B, G)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(A, L)'}, {'true,true': [0.494, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, A)', 'true,true,true': 'samebib(F, G), venue(G, B)', 'true,false': 'haswordtitle(H, C)', 'true,false,false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false,true': 'haswordtitle(L, M), haswordvenue(B, M)'}, {'true,true,true,true': [0.0, 0, 8], 'true,true,true,false': [1.49e-08, 7, 0], 'true,true,false': [0.894, 1, 4], 'true,false,true': [0.493, 924, 664], 'true,false,false,true': [3.494, 25, 25], 'true,false,false,false': [2.599, 11, 18], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(B, G)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(A, L)'}, {'true,true': [0.492, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(B, G)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)'}, {'true,true': [0.492, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(B, G)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)'}, {'true,true': [0.492, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(B, G)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'title(L, K), venue(L, B)', 'false,true,true': 'samebib(L, M), venue(M, A)'}, {'true,true': [0.492, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true,true': [2.612, 14, 14], 'false,true,true,false': [0.227, 35, 0], 'false,true,false': [0.452, 7, 3], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(B, G)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(A, L)'}, {'true,true': [0.492, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.452, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.38, 44, 11]}]]
[{'': [0.24455361249545102, 0.17089843750000108], 'true': [0.24366352318011741, 0.24803717352988336], 'true,false': [0.25000000000000133, 0.2354340071343634], 'true,false,true': [0.24489795918367302, 0.2417355371900822], 'true,false,false': [0.2417355371900822, 0.20408163265306106], 'false': [0.17864514918371124, 0.15999999999999948], 'false,true': [0.22222222222222232, 0.15999999999999948]}, {'': [0.24423965838627754, 0.17036542604714272], 'true': [0.24366352318012574, 0.2455497403386633], 'true,false': [0.24813620683257942, 0.23456996391329935], 'true,false,true': [0.244897959183673, 0.2417355371900833], 'true,false,false': [0.2417355371900833, 0.20408163265306115], 'false': [0.17782577785291803, 0.1600000000000007], 'false,true': [0.22222222222222207, 0.1600000000000007]}, {'': [0.24393157221315037, 0.16990467702453835], 'true': [0.2436635231801326, 0.24310195846820273], 'true,false': [0.2463115068589202, 0.23370646651736574], 'true,false,true': [0.24489795918367316, 0.24173553719008264], 'true,false,false': [0.24173553719008264, 0.20408163265306115], 'false': [0.1771174918718374, 0.15999999999999953], 'false,true': [0.22222222222222218, 0.15999999999999953]}, {'': [0.24371075047936078, 0.1695374267579385], 'true': [0.24366352318009946, 0.24136967032829015], 'true,false': [0.24498343086187796, 0.23315182613521265], 'true,false,true': [0.24489795918367355, 0.24173553719008264], 'true,false,false': [0.24173553719008264, 0.2040816326530612], 'false': [0.17655293676131073, 0.15999999999999967], 'false,true': [0.2222222222222222, 0.15999999999999967]}, {'': [0.24358519092549577, 0.16926465814576508], 'true': [0.24000000000000005, 0.2432448478729685], 'true,false': [0.24329828880329155, 0.24040290855188667], 'true,false,false': [0.24421324119301435, 0.2328852475902263], 'true,true': [0.24888888888888885, 0.16], 'true,true,true': [0.0, 3.172065784643304e-17], 'false': [0.17613362348097325, 0.15999999999999995], 'false,true': [0.22222222222222218, 0.15999999999999995]}, {'': [0.24243805756859266, 0.16907391107668152], 'true': [0.24251437894791988, 0.24013191904549552], 'true,false': [0.24388458831094095, 0.23276527835867059], 'true,false,true': [0.2448979591836735, 0.24173553719008264], 'true,false,false': [0.24173553719008253, 0.20408163265306123], 'false': [0.175840397736944, 0.1599999999999999], 'false,true': [0.22222222222222215, 0.1599999999999999]}, {'': [0.24237696831986036, 0.168947125674667], 'true': [0.24248528768989264, 0.2398271924703455], 'true,false': [0.24368398625354626, 0.2327160227900932], 'true,false,true': [0.24489795918367346, 0.24173553719008256], 'true,false,false': [0.24173553719008256, 0.20408163265306123], 'false': [0.17564549700260337, 0.16000000000000006], 'false,true': [0.22222222222222227, 0.16000000000000006]}, {'': [0.24234291224511137, 0.16886637846587363], 'true': [0.2424657782580905, 0.23968032069224313], 'true,false': [0.24359112091054616, 0.23269266916431955], 'true,false,true': [0.24489795918367332, 0.24173553719008262], 'true,false,false': [0.24173553719008264, 0.20408163265306126], 'false': [0.1755213684354357, 0.16000000000000014], 'false,true': [0.2222222222222222, 0.16000000000000014]}, {'': [0.24232319760442833, 0.16881678838519856], 'true': [0.2424527353603251, 0.23960787365020292], 'true,false': [0.24354794764411491, 0.2326797814156637], 'true,false,true': [0.24489795918367332, 0.2417355371900827], 'true,false,false': [0.24173553719008256, 0.20408163265306123], 'false': [0.1754451361327745, 0.16000000000000014], 'false,true': [0.17082992193050853, 0.20449605083589484], 'false,true,true': [0.2436322937381972, 0.0014769133732462248]}, {'': [0.24231129035820945, 0.1595141083169191], 'true': [0.24244397546745425, 0.23957063465216624], 'true,false': [0.24352744107700744, 0.23267153247570443], 'true,false,true': [0.2448979591836736, 0.24173553719008273], 'true,false,false': [0.24173553719008262, 0.20408163265306123], 'false': [0.17095028445034452, 0.14429023376840153], 'false,true': [0.20409591751605008, 0.16000000000000011]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
4;true,true;author(F, E), venue(F, A).;true;true
4;true,true,true;samebib(F, G), venue(G, B).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;false;haswordvenue(A, J), haswordtitle(K, J).;true;true
8;false,true;title(L, K), venue(L, B).;true;true
8;false,true,true;samebib(L, M), venue(M, A).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.27854694504975613;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.2867203636709409;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.44905802600860323;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.44905802600860323;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.5724346493852266;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.1914822684328457;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.05814893509951237;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.05814893509951237;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.2411503606196619;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.24811816884741328;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.3851926776601658;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.3851926776601658;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.48767788391726297;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.16653882456488167;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.05092203251355405;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.05092203251355405;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.20289930723994204;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.20848477447886868;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.31518052304212246;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.31518052304212246;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.3912569620992536;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.1420942428155646;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.04434629760466855;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.04434629760466855;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.16640029396569495;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.17062637354018492;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.24804771389482108;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.24804771389482108;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.3005711547884894;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.11914890490746433;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.03842866223690456;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.03842866223690456;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.13360339271793026;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.13664585375352234;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.19020231164899937;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.19020231164899937;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.22629823971521876;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.0984134027840187;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.033154945921885746;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.033154945921885746;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.10551742939082928;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.10762034996184403;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.14379027326522745;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.14379027326522745;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.16984358676510128;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.08026654944252247;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.028495105925721097;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.028495105925721097;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.08232251291348108;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.08372807955323855;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.10803450809035726;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.10803450809035726;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.12813320688246752;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.06479591611329234;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.024408230135271918;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.024408230135271918;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.06366213733661014;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.06457405393631681;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.08103386685025628;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.08103386685025628;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.09743184803714998;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.05187916934404051;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.02084688910874009;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.02084688910874009;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.048923799915716965;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.049497783225195;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.0608105509549485;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.0608105509549485;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.07468131696953094;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.04126932998424623;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.017760671541598414;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.017760671541598414;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, B) )
%   | then if ( samebib(E, F), venue(F, A) )
%   | | then return 0.6170330324588362;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.3582087367006219;  // std dev = 0.066, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0.4170330324588362;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.035169052609968436;  // std dev = 0.493, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.04126240947148117;  // std dev = 3.489, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.04858140536147815;  // std dev = 2.598, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, M), haswordvenue(B, M) )
%   | | | then return 0.03266374873483021;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.018802582886875124;  // std dev = 2.960, 54.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=11 */
%   | | else return 0.015098879183171418;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */


Results
   AUC ROC   = 0.568438
   AUC PR    = 0.4296
   CLL	      = -0.641205
   Precision = 0.721212 at threshold = 0.5
   Recall    = 0.052423
   F1        = 0.097741


Total learning time: 88.24008202552795 seconds
Total inference time: 7.411 seconds
AUC ROC: 0.568438


Results scoring model
   AUC ROC   = 0.548092
   AUC PR    = 0.461526
   CLL	      = -0.668094
   Precision = 0.661017 at threshold = 0.5
   Recall    = 0.052209
   F1        = 0.096774


Total scoring time: 1.28 seconds
Refined model CLL: -0.668094


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.571271
   AUC PR    = 0.43114
   CLL	      = -0.637666
   Precision = 0.721212 at threshold = 0.5
   Recall    = 0.052423
   F1        = 0.097741


Total learning time: 185.18001316452026 seconds
Total inference time: 7.602 seconds
AUC ROC: 0.571271
Total revision time: 185.18001316452026
Best scored revision CLL: -0.666141


Dataset: 11_yeast_cora, Fold: 4, Type: Transfer (trRDN-B), Time: 00:20:58
{'AUC ROC': 0.571271, 'AUC PR': 0.43114, 'CLL': -0.637666, 'Precision': [0.721212, 0.5], 'Recall': 0.052423, 'F1': 0.097741, 'Learning time': 185.18001316452026, 'Inference time': 7.602, 'parameter': {'AUC ROC': 0.571271, 'AUC PR': 0.43114, 'CLL': -0.637666, 'Precision': [0.721212, 0.5], 'Recall': 0.052423, 'F1': 0.097741, 'Learning time': 94.38093113899231, 'Inference time': 7.602}}


Starting fold 5

Target train facts examples: 8644
Target train pos examples: 550
Target train neg examples: 500

Target test facts examples: 33914
Target test pos  examples: 2467
Target test neg examples: 4522

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.443242102801371;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.7291166770349955;  // std dev = 0.335, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, B) )
%   | | then if ( samebib(G, H), venue(H, A) )
%   | | | then return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.13087620782678508;  // std dev = 0.445, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( haswordtitle(K, I) )
%   | | | then return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.17522210583121967;  // std dev = 2.980, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.04458961306561406;  // std dev = 2.992, 59.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return 0.05814893509951237;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.3803254334818479;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.6157326050686436;  // std dev = 0.335, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, A) )
%   | | then if ( samebib(G, H), venue(H, B) )
%   | | | then return 0.6397480032138977;  // std dev = 0.899, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.15715819152444083;  // std dev = 0.016, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.10855824646068735;  // std dev = 0.441, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( haswordtitle(K, I) )
%   | | | then return 0.03800959748909183;  // std dev = 0.806, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.15404125523550588;  // std dev = 2.947, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.03765285941803126;  // std dev = 2.990, 59.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return 0.05244716084236053;  // std dev = 2.967, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.6805851247859591;  // std dev = 0.056, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.2449182844345499;  // std dev = 2.596, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.047462026339214695;  // std dev = 1.980, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.3226813064206765;  // std dev = 0.491, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.47549952672721435;  // std dev = 0.343, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, A) )
%   | | then if ( samebib(K, L), venue(L, B) )
%   | | | then return 0.5343528314941616;  // std dev = 0.902, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.13745030991066803;  // std dev = 0.014, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.09313650877267977;  // std dev = 0.441, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.06267676197734857;  // std dev = 0.413, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.5216077804329589;  // std dev = 0.063, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.1792580649666844;  // std dev = 2.582, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.12537094389750977;  // std dev = 1.924, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.2565951072431471;  // std dev = 0.489, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.3876766473547287;  // std dev = 0.342, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, B) )
%   | | then if ( samebib(K, L), venue(L, A) )
%   | | | then return 0.5212932873133195;  // std dev = 0.900, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14510852774542207;  // std dev = 0.015, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.08130169754433866;  // std dev = 0.438, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.05088145978448437;  // std dev = 0.410, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return -0.3834526280204868;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.3757855882270984;  // std dev = 1.896, 24.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=19 */
%   | | else return -0.021880302675246047;  // std dev = 0.397, 29.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=11 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.1970138272768638;  // std dev = 0.489, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.29185061813702196;  // std dev = 0.342, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, A) )
%   | | then return 0.13833202849767937;  // std dev = 0.390, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( author(L, J), venue(L, B) )
%   | | | then return -0.2015184848927595;  // std dev = 0.002, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.08844624553967495;  // std dev = 2.862, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else return 0.043496505183325554;  // std dev = 0.410, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.35241853825674113;  // std dev = 0.110, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.09245005973860462;  // std dev = 2.573, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.14862118453665432;  // std dev = 1.902, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.1504639494328065;  // std dev = 0.486, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.24145587261412474;  // std dev = 0.345, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, B) )
%   | | then return 0.1295944863910667;  // std dev = 0.388, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( author(L, J), venue(L, A) )
%   | | | then return -0.21122209869926903;  // std dev = 0.004, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.08082800693875476;  // std dev = 2.856, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else return 0.034951265015125056;  // std dev = 0.409, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.2770702068456221;  // std dev = 0.099, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(G, C) )
%   | | | then return -0.05031582085218754;  // std dev = 3.058, 46.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=16 */
%   | | | else return 0.29044933717457705;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.1131641065330241;  // std dev = 0.486, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.1881842379509921;  // std dev = 0.345, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, A) )
%   | | then return 0.10524840178971173;  // std dev = 0.382, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.05074776991892154;  // std dev = 0.435, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return -0.0015282262704060102;  // std dev = 0.379, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | else return 0.051328407102005105;  // std dev = 0.428, 94.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=24 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(F, D) )
%   | | then return 0.06908782042908786;  // std dev = 0.409, 32.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=19 */
%   | | else return 0.07986037487514631;  // std dev = 0.485, 783.000 (wgt'ed) examples reached here.  /* #neg=323 #pos=460 */
%   | else return 0.19530805506866974;  // std dev = 0.292, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then if ( author(I, H), venue(I, B) )
%   | | then return 0.09886814216207739;  // std dev = 0.381, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( author(J, H), venue(J, A) )
%   | | | then return -0.18057203893619053;  // std dev = 0.010, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.058034588589712666;  // std dev = 2.850, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, M), haswordvenue(B, M) )
%   | | | then return -0.18393165606261141;  // std dev = 0.043, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.08049736894666899;  // std dev = 4.048, 83.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=24 */
%   | | else return -0.009960068186872709;  // std dev = 0.382, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(F, D) )
%   | | then if ( haswordvenue(B, D) )
%   | | | then return 0.21414438509882894;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.06246677740591289;  // std dev = 2.572, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | else return 0.058496632312213186;  // std dev = 0.483, 783.000 (wgt'ed) examples reached here.  /* #neg=323 #pos=460 */
%   | else return 0.16719457754689465;  // std dev = 0.288, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | then if ( haswordtitle(H, I), haswordvenue(A, I) )
%   | | then return -0.16581495550649783;  // std dev = 0.082, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( haswordauthor(J, G) )
%   | | | then return 0.1165269138034152;  // std dev = 0.765, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.06337951163315912;  // std dev = 4.070, 86.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=24 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then return 0.06262058468335198;  // std dev = 0.434, 91.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=26 */
%   | | else return -0.22195275202862433;  // std dev = 0.102, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( haswordvenue(A, C) )
%   | then return 0.18150960312106476;  // std dev = 0.104, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( author(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.3733077087668487;  // std dev = 1.257, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | | | else return -0.3731833620240967;  // std dev = 0.586, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else if ( author(G, D), venue(G, B) )
%   | | | then return -0.3199205604734283;  // std dev = 0.835, 18.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=1 */
%   | | | else return 0.05984428690918664;  // std dev = 2.940, 46.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=16 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then if ( haswordtitle(I, H) )
%   | | then return 0.053446220110005556;  // std dev = 0.487, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.09404407216890248;  // std dev = 0.341, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | then return 0.03603022174805631;  // std dev = 0.420, 95.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=24 */
%   | | else return -0.01529274279540463;  // std dev = 0.378, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */


Results
   AUC ROC   = 0.549323
   AUC PR    = 0.395611
   CLL	      = -0.706815
   Precision = 0.373561 at threshold = 0.5
   Recall    = 0.920957
   F1        = 0.531524


Total learning time: 58.11993074417114 seconds
Total inference time: 14.759 seconds
AUC ROC: 0.549323


Results scoring model
   AUC ROC   = 0.686847
   AUC PR    = 0.686464
   CLL	      = -0.615286
   Precision = 0.632813 at threshold = 0.5
   Recall    = 0.883636
   F1        = 0.737481


Total scoring time: 1.195 seconds
Parameter learned model CLL: -0.615286


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'false': 'haswordvenue(A, E), haswordauthor(F, E)', 'false,true': 'author(G, F), venue(G, B)', 'false,true,true': 'samebib(G, H), venue(H, A)', 'false,false': 'haswordvenue(B, I), haswordauthor(J, I)', 'false,false,true': 'haswordtitle(K, I)', 'false,false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true': [0.493, 334, 471], 'true,false': [0.335, 4, 27], 'false,true,true,true': [0.894, 1, 4], 'false,true,true,false': [0.0, 5, 0], 'false,true,false': [0.445, 32, 12], 'false,false,true,true': [0.894, 4, 1], 'false,false,true,false': [2.98, 28, 13], 'false,false,false,true': [2.992, 48, 11], 'false,false,false,false': [2.966, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'false': 'haswordvenue(B, E), haswordauthor(F, E)', 'false,true': 'author(G, F), venue(G, A)', 'false,true,true': 'samebib(G, H), venue(H, B)', 'false,false': 'haswordvenue(A, I), haswordauthor(J, I)', 'false,false,true': 'haswordtitle(K, I)', 'false,false,false': 'haswordvenue(B, L), haswordtitle(M, L)'}, {'true,true': [0.493, 334, 471], 'true,false': [0.335, 4, 27], 'false,true,true,true': [0.899, 1, 4], 'false,true,true,false': [0.016, 5, 0], 'false,true,false': [0.441, 32, 12], 'false,false,true,true': [0.806, 4, 1], 'false,false,true,false': [2.947, 28, 13], 'false,false,false,true': [2.99, 48, 11], 'false,false,false,false': [2.967, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordauthor(F, C)', 'true,true,false': 'haswordtitle(G, D)', 'true,false': 'haswordtitle(H, C)', 'false': 'haswordvenue(B, I), haswordauthor(J, I)', 'false,true': 'author(K, J), venue(K, A)', 'false,true,true': 'samebib(K, L), venue(L, B)'}, {'true,true,true': [0.056, 0, 10], 'true,true,false,true': [2.596, 13, 14], 'true,true,false,false': [1.98, 18, 6], 'true,false,true': [0.491, 304, 449], 'true,false,false': [0.343, 3, 19], 'false,true,true,true': [0.902, 1, 4], 'false,true,true,false': [0.014, 5, 0], 'false,true,false': [0.441, 32, 12], 'false,false': [0.413, 124, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordauthor(F, C)', 'true,true,false': 'haswordtitle(G, D)', 'true,false': 'haswordtitle(H, C)', 'false': 'haswordvenue(A, I), haswordauthor(J, I)', 'false,true': 'author(K, J), venue(K, B)', 'false,true,true': 'samebib(K, L), venue(L, A)'}, {'true,true,true': [0.063, 0, 10], 'true,true,false,true': [2.582, 13, 14], 'true,true,false,false': [1.924, 18, 6], 'true,false,true': [0.489, 304, 449], 'true,false,false': [0.342, 3, 19], 'false,true,true,true': [0.9, 1, 4], 'false,true,true,false': [0.015, 5, 0], 'false,true,false': [0.438, 32, 12], 'false,false': [0.41, 124, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordtitle(F, D)', 'true,true,true': 'author(G, E), venue(G, A)', 'true,false': 'haswordtitle(H, C)', 'false': 'haswordvenue(B, I), haswordauthor(J, I)', 'false,true': 'author(K, J), venue(K, A)', 'false,true,false': 'author(L, J), venue(L, B)'}, {'true,true,true,true': [0.0, 8, 0], 'true,true,true,false': [1.896, 5, 19], 'true,true,false': [0.397, 18, 11], 'true,false,true': [0.489, 304, 449], 'true,false,false': [0.342, 3, 19], 'false,true,true': [0.39, 6, 4], 'false,true,false,true': [0.002, 3, 0], 'false,true,false,false': [2.862, 29, 12], 'false,false': [0.41, 124, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordauthor(F, C)', 'true,true,false': 'haswordtitle(G, D)', 'true,false': 'haswordtitle(H, C)', 'false': 'haswordvenue(A, I), haswordauthor(J, I)', 'false,true': 'author(K, J), venue(K, B)', 'false,true,false': 'author(L, J), venue(L, A)'}, {'true,true,true': [0.11, 0, 10], 'true,true,false,true': [2.573, 13, 14], 'true,true,false,false': [1.902, 18, 6], 'true,false,true': [0.486, 304, 449], 'true,false,false': [0.345, 3, 19], 'false,true,true': [0.388, 6, 4], 'false,true,false,true': [0.004, 3, 0], 'false,true,false,false': [2.856, 29, 12], 'false,false': [0.409, 124, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordauthor(F, C)', 'true,true,false': 'haswordtitle(G, C)', 'true,false': 'haswordtitle(H, C)', 'false': 'haswordvenue(B, I), haswordauthor(J, I)', 'false,true': 'author(K, J), venue(K, A)', 'false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true,true': [0.099, 0, 10], 'true,true,false,true': [3.058, 30, 16], 'true,true,false,false': [0.894, 1, 4], 'true,false,true': [0.486, 304, 449], 'true,false,false': [0.345, 3, 19], 'false,true,true': [0.382, 6, 4], 'false,true,false': [0.435, 32, 12], 'false,false,true': [0.379, 54, 12], 'false,false,false': [0.428, 70, 24]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordtitle(E, D)', 'true,true': 'haswordauthor(F, D)', 'false': 'haswordvenue(A, G), haswordauthor(H, G)', 'false,true': 'author(I, H), venue(I, B)', 'false,true,false': 'author(J, H), venue(J, A)', 'false,false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false,false,true': 'haswordtitle(L, M), haswordvenue(B, M)'}, {'true,true,true': [0.409, 13, 19], 'true,true,false': [0.485, 323, 460], 'true,false': [0.292, 2, 19], 'false,true,true': [0.381, 6, 4], 'false,true,false,true': [0.01, 3, 0], 'false,true,false,false': [2.85, 29, 12], 'false,false,true,true': [0.043, 12, 0], 'false,false,true,false': [4.048, 59, 24], 'false,false,false': [0.382, 53, 12]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordtitle(E, D)', 'true,true': 'haswordauthor(F, D)', 'true,true,true': 'haswordvenue(B, D)', 'false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false,true': 'haswordtitle(H, I), haswordvenue(A, I)', 'false,true,false': 'haswordauthor(J, G)', 'false,false': 'haswordvenue(A, K), haswordtitle(L, K)'}, {'true,true,true,true': [0.0, 0, 5], 'true,true,true,false': [2.572, 13, 14], 'true,true,false': [0.483, 323, 460], 'true,false': [0.288, 2, 19], 'false,true,true': [0.082, 14, 0], 'false,true,false,true': [0.765, 3, 2], 'false,true,false,false': [4.07, 62, 24], 'false,false,true': [0.434, 65, 26], 'false,false,false': [0.102, 18, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(B, C), haswordauthor(D, C)', 'true': 'haswordvenue(A, C)', 'true,false': 'author(E, D), venue(E, A)', 'true,false,true': 'samebib(E, F), venue(F, B)', 'true,false,false': 'author(G, D), venue(G, B)', 'false': 'haswordvenue(A, H), haswordvenue(B, H)', 'false,true': 'haswordtitle(I, H)', 'false,false': 'haswordvenue(B, J), haswordtitle(K, J)'}, {'true,true': [0.104, 0, 10], 'true,false,true,true': [1.257, 2, 19], 'true,false,true,false': [0.586, 20, 0], 'true,false,false,true': [0.835, 17, 1], 'true,false,false,false': [2.94, 30, 16], 'false,true,true': [0.487, 304, 449], 'false,true,false': [0.341, 3, 19], 'false,false,true': [0.42, 71, 24], 'false,false,false': [0.378, 53, 12]}]]
[{'': [0.24084270048762138, 0.18394619617433927], 'true': [0.2427591528104568, 0.11238293444328941], 'false': [0.20850480109739317, 0.17437500000000122], 'false,true': [0.23999999999999985, 0.19834710743801603], 'false,true,true': [0.15999999999999986, -2.7755575615628915e-18], 'false,false': [0.21172022684309966, 0.15574022776238935], 'false,false,true': [0.16000000000000003, 0.2165377751338484], 'false,false,false': [0.15168055156564153, 0.15999999999999948]}, {'': [0.23990334821509715, 0.18089461947223098], 'true': [0.24275915281046145, 0.11238293444328855], 'false': [0.20577225212445388, 0.171572817225926], 'false,true': [0.2396663510462111, 0.1948062662047146], 'false,true,true': [0.16175462426720671, 4.833621904624108e-05], 'false,false': [0.20418295894968494, 0.15572936782372818], 'false,false,true': [0.12982257968417046, 0.21178789075413634], 'false,false,false': [0.15157277294947036, 0.16007498498138042]}, {'': [0.23897284752961942, 0.1776793317490082], 'true': [0.23816220413684797, 0.23788346814211808], 'true,true': [0.0031484720128159616, 0.2303705006887006], 'true,false': [0.2407298649580488, 0.11776859504132223], 'true,true,false': [0.24965706447187935, 0.16341569201183295], 'false': [0.1961699560286622, 0.17080885137827953], 'false,true': [0.1941376415733746, 0.1945779203085472], 'false,true,true': [0.16257684465033026, 3.870809572011635e-05]}, {'': [0.236429046081018, 0.17526015652221696], 'true': [0.22228318412191328, 0.23601279887198168], 'true,false': [0.2390037512510435, 0.11694604352600325], 'true,true': [0.004027855333989594, 0.22640475593211415], 'true,true,false': [0.246882266123149, 0.1542387630040101], 'false': [0.1934632561129652, 0.1684808064535605], 'false,true': [0.1921269816365828, 0.19165505674404162], 'false,true,true': [0.1621630119788211, 4.5261737551971495e-05]}, {'': [0.2339552560356687, 0.17283076761259147], 'true': [0.20128851219995222, 0.2356021927165265], 'true,false': [0.23881420121529873, 0.11692519895422207], 'true,true': [0.22040803077313093, 0.15752658425619115], 'true,true,true': [0.0, 0.14976670711147078], 'false': [0.1849556426329272, 0.16837273768872932], 'false,true': [0.15236071813581856, 0.19146506649424777], 'false,true,false': [1.1126740649079296e-06, 0.19974192784802236]}, {'': [0.23138402038457112, 0.17202501731664724], 'true': [0.19918686899326601, 0.23298939231700155], 'true,false': [0.2360816687806163, 0.11910470418624299], 'true,true': [0.0012117759159398834, 0.2151468518123848], 'true,true,false': [0.24511922440296666, 0.1506609853922278], 'false': [0.1839838678304293, 0.16761132392467154], 'false,true': [0.1504210582801698, 0.1907382970163069], 'false,true,false': [5.555927919601948e-06, 0.1988789014102515]}, {'': [0.22992773179337106, 0.17124115381165733], 'true': [0.18703347250035662, 0.23278897388582268], 'true,false': [0.23596141636811815, 0.11873666286646395], 'true,true': [0.0009767981959560412, 0.2093474888075097], 'true,true,false': [0.2033269450194294, 0.15999999999999998], 'false': [0.18149031409471747, 0.16753460686610627], 'false,true': [0.14611810172060455, 0.18897939421985344], 'false,false': [0.1435013882588017, 0.18325654212616407]}, {'': [0.22904307511747762, 0.17076184248874135], 'true': [0.23241599126813248, 0.08505305372551383], 'true,true': [0.16709405362586116, 0.23508104143195735], 'false': [0.18075850264157264, 0.16718410715606188], 'false,true': [0.1454449534700592, 0.1881804833842934], 'false,true,false': [3.3436339535730664e-05, 0.1980655366647235], 'false,false': [0.18022175011092043, 0.14619621281381348], 'false,false,true': [0.0001534368537156744, 0.19742338088871667]}, {'': [0.22889177184598875, 0.1690998810781115], 'true': [0.23235564359430314, 0.08317120969681], 'true,true': [0.20975337973613348, 0.23324930218415685], 'true,true,true': [0.0, 0.24500189560024932], 'false': [0.16972063927928346, 0.1683110158158177], 'false,true': [0.0004767533087451211, 0.18857453184649384], 'false,true,false': [0.11704059374938225, 0.19257828138655073], 'false,false': [0.1881162141929628, 0.0005759228283127151]}, {'': [0.16798910623252022, 0.22171171652565363], 'false': [0.23342320653391593, 0.1636962686903266], 'false,true': [0.23680819190340432, 0.1159629907267074], 'true': [0.0010780672831663452, 0.18017533973728977], 'true,false': [0.18613161367838485, 0.17512936335245252], 'true,false,true': [0.07523956113154909, 0.017148090945663365], 'true,false,false': [0.038700852395571625, 0.18795218117707324], 'false,false': [0.17675994325251235, 0.14303924064676357]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;false;haswordvenue(A, E), haswordauthor(F, E).;true;true
0;false,true;author(G, F), venue(G, B).;true;true
0;false,true,true;samebib(G, H), venue(H, A).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;false;haswordvenue(B, E), haswordauthor(F, E).;true;true
1;false,true;author(G, F), venue(G, A).;true;true
1;false,true,true;samebib(G, H), venue(H, B).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;false;haswordvenue(B, I), haswordauthor(J, I).;true;true
2;false,true;author(K, J), venue(K, A).;true;true
2;false,true,true;samebib(K, L), venue(L, B).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;false;haswordvenue(A, I), haswordauthor(J, I).;true;true
3;false,true;author(K, J), venue(K, B).;true;true
3;false,true,true;samebib(K, L), venue(L, A).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
4;true,true;haswordtitle(F, D).;true;true
4;true,true,true;author(G, E), venue(G, A).;true;true
4;false;haswordvenue(B, I), haswordauthor(J, I).;true;true
4;false,true;author(K, J), venue(K, A).;true;true
4;false,true,false;author(L, J), venue(L, B).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordvenue(A, D), haswordauthor(E, D).;true;true
5;true,true;haswordauthor(F, C).;true;true
5;false;haswordvenue(A, I), haswordauthor(J, I).;true;true
5;false,true;author(K, J), venue(K, B).;true;true
5;false,true,false;author(L, J), venue(L, A).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordvenue(A, D), haswordauthor(E, D).;true;true
6;true,true;haswordauthor(F, C).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;false;haswordvenue(A, G), haswordauthor(H, G).;true;true
7;false,true;author(I, H), venue(I, B).;true;true
7;false,true,false;author(J, H), venue(J, A).;true;true
7;false,false;haswordvenue(A, K), haswordtitle(L, K).;true;true
7;false,false,true;haswordtitle(L, M), haswordvenue(B, M).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordvenue(A, D), haswordtitle(E, D).;true;true
8;true,true;haswordauthor(F, D).;true;true
8;true,true,true;haswordvenue(B, D).;true;true
8;false;haswordvenue(B, G), haswordtitle(H, G).;true;true
8;false,true;haswordtitle(H, I), haswordvenue(A, I).;true;true
8;false,false;haswordvenue(A, K), haswordtitle(L, K).;true;true
9;;samevenue(A, B) :- haswordvenue(B, C), haswordauthor(D, C).;true;true
9;true;haswordvenue(A, C).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.443242102801371;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.7291166770349955;  // std dev = 0.335, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, A) )
%   | | then if ( samebib(G, H), venue(H, B) )
%   | | | then return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.13087620782678508;  // std dev = 0.445, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0803711573217346;  // std dev = 3.055, 54.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=12 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.14730556160553568;  // std dev = 4.130, 83.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=24 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.3803254334818479;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.6157326050686436;  // std dev = 0.335, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, A) )
%   | | then if ( samebib(G, H), venue(H, B) )
%   | | | then return 0.5580193346218546;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(I, F), venue(I, B) )
%   | | | then return -0.1585410350598063;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.1341418917694617;  // std dev = 2.913, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then if ( haswordtitle(L, J) )
%   | | | then return 0.058670758244403556;  // std dev = 0.883, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.16106353023966496;  // std dev = 2.960, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.04098548220292864;  // std dev = 0.393, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.6805851247859591;  // std dev = 0.056, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( haswordtitle(E, C) )
%   | | then return 0.30837723775582815;  // std dev = 0.493, 799.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=465 */
%   | | else return 0.46371501494270256;  // std dev = 0.355, 27.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=23 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, B) )
%   | | then if ( samebib(H, I), venue(I, A) )
%   | | | then return 0.6224138879361344;  // std dev = 0.901, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.17277738490744263;  // std dev = 0.025, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(J, G), venue(J, A) )
%   | | | then return -0.17499038891463167;  // std dev = 0.003, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.115240761633097;  // std dev = 2.835, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | then return 0.11869394744614174;  // std dev = 0.443, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.03563266865890676;  // std dev = 0.393, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.5216077804329589;  // std dev = 0.063, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(F, D) )
%   | | | then return 0.17958607359853515;  // std dev = 2.596, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.12293423997308432;  // std dev = 1.926, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(I, G) )
%   | | | then return 0.19952909354155507;  // std dev = 2.542, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   | | | else return -0.11354301367104523;  // std dev = 1.913, 23.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
%   | | else return 0.27432575552584315;  // std dev = 0.485, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | then if ( author(L, K), venue(L, A) )
%   | | then return 0.14488262970685067;  // std dev = 0.391, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.08021056339305632;  // std dev = 0.439, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.0533928175740813;  // std dev = 0.410, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.3948654896780916;  // std dev = 0.060, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.13625740414004958;  // std dev = 2.583, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.10002961693124655;  // std dev = 1.938, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.19641290468934366;  // std dev = 0.489, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.31583992391632293;  // std dev = 0.342, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, B) )
%   | | then if ( samebib(K, L), venue(L, A) )
%   | | | then return 0.5010059965896498;  // std dev = 0.903, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.1571166895380159;  // std dev = 0.024, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.0715148791904946;  // std dev = 0.431, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.04129356164275219;  // std dev = 0.408, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then return 0.14101597596728457;  // std dev = 0.486, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else return 0.2946043519072146;  // std dev = 0.290, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, B) )
%   | | then if ( samebib(H, I), venue(I, A) )
%   | | | then return 0.38699942310319607;  // std dev = 0.905, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.13742640367788272;  // std dev = 0.021, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(J, G), venue(J, A) )
%   | | | then return -0.16915038900173315;  // std dev = 0.006, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.07665676388294178;  // std dev = 2.824, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, M), haswordvenue(B, M) )
%   | | | then return -0.15706934580533574;  // std dev = 0.090, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.09141598595066994;  // std dev = 4.055, 83.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=24 */
%   | | else return -0.0013367933759232781;  // std dev = 0.380, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.2703050529880946;  // std dev = 0.059, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.05888667292451297;  // std dev = 2.583, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.18034574590681418;  // std dev = 1.877, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.1154108172545553;  // std dev = 0.487, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.20402022535257885;  // std dev = 0.342, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, A) )
%   | | then return 0.09845246234565037;  // std dev = 0.380, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.04701453041597701;  // std dev = 0.430, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.04907369127011355;  // std dev = 0.420, 95.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=24 */
%   | | else return -8.806602305230321E-4;  // std dev = 0.377, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(A, D), haswordauthor(F, C) )
%   | | then return 0.26270681948171415;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( haswordauthor(G, D) )
%   | | | then return 0.04424146461236798;  // std dev = 2.583, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return 0.07900838032243772;  // std dev = 13.570, 782.000 (wgt'ed) examples reached here.  /* #neg=323 #pos=459 */
%   | else return 0.20577032289408034;  // std dev = 0.288, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, A) )
%   | | then return 0.024620244741948037;  // std dev = 0.275, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( author(K, I), venue(K, B) )
%   | | | then return 0.02778869801622093;  // std dev = 0.869, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.055338220112480865;  // std dev = 2.814, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.04538254946251942;  // std dev = 0.422, 95.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=24 */
%   | | else return -0.008380926016965752;  // std dev = 0.379, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( haswordvenue(A, C) )
%   | then return 0.18382788569847605;  // std dev = 0.122, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( author(E, D), venue(E, A) )
%   | | then return 0.03151939645459777;  // std dev = 0.470, 41.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=19 */
%   | | else return -0.03363782849518331;  // std dev = 0.418, 64.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=17 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, B) )
%   | | then if ( samebib(H, I), venue(I, A) )
%   | | | then return 0.41481158131329154;  // std dev = 1.312, 20.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=18 */
%   | | | else return -0.40264757086334607;  // std dev = 0.652, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( author(J, G), venue(J, A) )
%   | | | then return -0.2852243760309178;  // std dev = 0.860, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   | | | else return 0.07919574140985422;  // std dev = 2.876, 41.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=15 */
%   | else if ( haswordvenue(A, K), haswordvenue(B, K) )
%   | | then return 0.07704435447829466;  // std dev = 0.484, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   | | else return 0.006923014918538795;  // std dev = 0.391, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.04357736431984381;  // std dev = 0.359, 39.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=21 */
%   | else if ( author(F, D), venue(F, A) )
%   | | then return -0.18337067791774067;  // std dev = 0.259, 24.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=4 */
%   | | else return 0.05538560285973629;  // std dev = 0.424, 52.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=21 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.01636415268076384;  // std dev = 2.722, 36.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
%   | | | else return -0.2244624766387106;  // std dev = 1.523, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | else return 0.05807182964857026;  // std dev = 0.484, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then if ( title(M, L), venue(M, A) )
%   | | | then return 0.054504016775568154;  // std dev = 4.074, 88.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=24 */
%   | | | else return -0.1558949460903228;  // std dev = 0.072, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return -0.007639330882432956;  // std dev = 0.379, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */


Results
   AUC ROC   = 0.562026
   AUC PR    = 0.411035
   CLL	      = -0.70692
   Precision = 0.37586 at threshold = 0.5
   Recall    = 0.93028
   F1        = 0.535402


Total learning time: 47.79598522186279 seconds
Total inference time: 15.729 seconds
AUC ROC: 0.562026


Results scoring model
   AUC ROC   = 0.684571
   AUC PR    = 0.682605
   CLL	      = -0.615713
   Precision = 0.632813 at threshold = 0.5
   Recall    = 0.883636
   F1        = 0.737481


Total scoring time: 1.129 seconds
Refined model CLL: -0.615713


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.549323
   AUC PR    = 0.395611
   CLL	      = -0.706815
   Precision = 0.373561 at threshold = 0.5
   Recall    = 0.920957
   F1        = 0.531524


Total learning time: 108.23991596603393 seconds
Total inference time: 14.759 seconds
AUC ROC: 0.549323
Total revision time: 108.23991596603393
Best scored revision CLL: -0.615286


Dataset: 11_yeast_cora, Fold: 5, Type: Transfer (trRDN-B), Time: 00:23:18
{'AUC ROC': 0.549323, 'AUC PR': 0.395611, 'CLL': -0.706815, 'Precision': [0.373561, 0.5], 'Recall': 0.920957, 'F1': 0.531524, 'Learning time': 108.23991596603393, 'Inference time': 14.759, 'parameter': {'AUC ROC': 0.549323, 'AUC PR': 0.395611, 'CLL': -0.706815, 'Precision': [0.373561, 0.5], 'Recall': 0.920957, 'F1': 0.531524, 'Learning time': 58.11993074417114, 'Inference time': 14.759}}


Starting fold 1

Target train facts examples: 7463
Target train pos examples: 368
Target train neg examples: 688

Target test facts examples: 35095
Target test pos  examples: 2649
Target test neg examples: 4334

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.23843062524035266;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.4581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.424815601766179;  // std dev = 2.714, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.004815601766179008;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.004815601766179008;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.20686012285620575;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.45935396641210174;  // std dev = 0.810, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.3982164798305049;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.36287359443791467;  // std dev = 2.715, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.004228390109386251;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.004228390109386251;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.1751801570305961;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.37391135762433364;  // std dev = 0.808, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.3269052770205085;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.2976445171077738;  // std dev = 2.715, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, A) )
%   | | then if ( samebib(K, L), venue(L, B) )
%   | | | then return 0.14974330653669568;  // std dev = 2.784, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return -0.1414965457075706;  // std dev = 0.042, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.11669340332070102;  // std dev = 0.028, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | then return 0.0037111125833978686;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.14514481334590568;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.3022417434729106;  // std dev = 0.801, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.26358767085800217;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.23316088123073278;  // std dev = 2.716, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.10980429489397554;  // std dev = 0.045, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0032558270569705674;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.003911681670084829;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.11804668707041945;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.2299388596657689;  // std dev = 0.800, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.20322270711158522;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.17939506450759005;  // std dev = 2.716, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then return -0.028852528790529;  // std dev = 0.328, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, M), haswordvenue(A, M) )
%   | | | then return -0.09953837016457324;  // std dev = 0.041, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0028554031467501392;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | | | then return 0.007288616733969846;  // std dev = 2.848, 67.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=10 */
%   | | | else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.09457696812283496;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.1806804792162545;  // std dev = 0.795, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.1588116678226005;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.13446104468286807;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.09097804211946432;  // std dev = 0.038, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.002503460836945874;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.003036347396448831;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.07489163449109286;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.13556467207785725;  // std dev = 0.795, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.10384057994354268;  // std dev = 0.495, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | then if ( haswordtitle(H, I), haswordvenue(A, I) )
%   | | then return -0.08373867220642335;  // std dev = 0.035, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0021943081594878503;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | then return 0.002663421179122184;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.05877777591804268;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.09434698600470486;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.09342248400407116;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.0748430672140152;  // std dev = 2.610, 28.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=16 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then return -0.025868019377695693;  // std dev = 0.328, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, M), haswordvenue(A, M) )
%   | | | then return -0.0775414818010331;  // std dev = 0.033, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0019228798175884457;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | | | then return 0.00570323768401021;  // std dev = 2.847, 67.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=10 */
%   | | | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04582386394015474;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.07079328581363101;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return 0.08382980412487402;  // std dev = 0.796, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.055752263073293055;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.07217994386844805;  // std dev = 0.031, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0016846780662751325;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.002059278474335023;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.03554750876544446;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.07347919051014935;  // std dev = 0.791, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.056240659230693345;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.040357240314730196;  // std dev = 2.718, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, B) )
%   | | then if ( samebib(K, L), venue(L, A) )
%   | | | then return 0.15304673934361251;  // std dev = 2.765, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return -0.14122628098262716;  // std dev = 0.115, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.08336718938046983;  // std dev = 0.070, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return 0.0018050112014890403;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.557478
   AUC PR    = 0.42844
   CLL	      = -0.655498
   Precision = 0.637427 at threshold = 0.5
   Recall    = 0.041148
   F1        = 0.077305


Total learning time: 58.25389909744263 seconds
Total inference time: 7.555 seconds
AUC ROC: 0.557478


Results scoring model
   AUC ROC   = 0.591937
   AUC PR    = 0.419771
   CLL	      = -0.618775
   Precision = 0.578947 at threshold = 0.5
   Recall    = 0.059783
   F1        = 0.108374


Total scoring time: 1.105 seconds
Parameter learned model CLL: -0.618775


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)', 'false,false': 'haswordvenue(B, L), haswordtitle(M, L)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.816, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.714, 13, 17], 'false,true,true': [0.0, 12, 0], 'false,true,false': [0.354, 64, 11], 'false,false,true': [0.354, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)', 'false,false': 'haswordvenue(B, L), haswordtitle(M, L)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.81, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.715, 13, 17], 'false,true,true': [5.27e-09, 12, 0], 'false,true,false': [0.354, 64, 11], 'false,false,true': [0.354, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'title(K, J), venue(K, A)', 'false,true,true': 'samebib(K, L), venue(L, B)', 'false,false': 'haswordvenue(B, M), haswordtitle(N, M)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.808, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.715, 13, 17], 'false,true,true,true': [2.784, 27, 11], 'false,true,true,false': [0.042, 42, 0], 'false,true,false': [0.028, 7, 0], 'false,false,true': [0.354, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(A, K)', 'false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.801, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.716, 13, 17], 'false,true,true': [0.045, 12, 0], 'false,true,false': [0.354, 64, 11], 'false,false,true': [0.346, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordauthor(J, I)', 'false,false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false,false,true': 'haswordtitle(L, M), haswordvenue(A, M)', 'false,false,false': 'haswordvenue(A, N), haswordtitle(P, N)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.8, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.716, 13, 17], 'false,true': [0.328, 7, 1], 'false,false,true,true': [0.041, 12, 0], 'false,false,true,false': [3.064, 64, 11], 'false,false,false,true': [2.848, 57, 10], 'false,false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(A, K)', 'false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.795, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.717, 13, 17], 'false,true,true': [0.038, 12, 0], 'false,true,false': [0.354, 64, 11], 'false,false,true': [0.346, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordauthor(F, E)', 'false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false,true': 'haswordtitle(H, I), haswordvenue(A, I)', 'false,false': 'haswordvenue(A, J), haswordtitle(K, J)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.795, 1, 2], 'true,false,false': [0.495, 15, 20], 'false,true,true': [0.035, 12, 0], 'false,true,false': [0.354, 64, 11], 'false,false,true': [0.346, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordauthor(J, I)', 'false,false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false,false,true': 'haswordtitle(L, M), haswordvenue(A, M)', 'false,false,false': 'haswordvenue(A, N), haswordtitle(P, N)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [1.095, 2, 3], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.61, 12, 16], 'false,true': [0.328, 7, 1], 'false,false,true,true': [0.033, 12, 0], 'false,false,true,false': [3.064, 64, 11], 'false,false,false,true': [2.847, 57, 10], 'false,false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordauthor(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(A, K)', 'false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [1.095, 2, 3], 'true,false,false,true': [0.796, 1, 2], 'true,false,false,false': [2.717, 13, 17], 'false,true,true': [0.031, 12, 0], 'false,true,false': [0.354, 64, 11], 'false,false,true': [0.346, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'title(K, J), venue(K, B)', 'false,true,true': 'samebib(K, L), venue(L, A)', 'false,false': 'haswordvenue(A, M), haswordtitle(N, M)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.791, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.718, 13, 17], 'false,true,true,true': [2.765, 27, 11], 'false,true,true,false': [0.115, 42, 0], 'false,true,false': [0.07, 7, 0], 'false,false,true': [0.346, 64, 11], 'false,false,false': [0.0, 4, 0]}]]
[{'': [0.23762656230272572, 0.11496588764697444], 'true': [0.2356675262844691, 0.24376731301939172], 'true,false': [0.22222222222222224, 0.2448979591836734], 'true,false,false': [0.23999999999999994, 0.2455555555555551], 'false': [0.1104505218655035, 0.11985258772632539], 'false,false': [0.12515555555555502, 0.0], 'false,true': [-1.1564823173178714e-17, 0.12515555555555502]}, {'': [0.2371606616282308, 0.11455688633284844], 'true': [0.2356675262844735, 0.24352902641532298], 'true,false': [0.21859724583033524, 0.2450060599606714], 'true,false,false': [0.23999999999999994, 0.24566195763775367], 'false': [0.10989213699570438, 0.1196268538653256], 'false,false': [0.125155555555556, 0.0], 'false,true': [2.3129646346357427e-18, 0.125155555555556]}, {'': [0.23670497169729693, 0.11426488031687218], 'true': [0.23566752628446727, 0.24320063124509558], 'true,false': [0.2176873624141201, 0.24497723310199565], 'true,false,false': [0.23999999999999994, 0.24568445879937517], 'false': [0.10949347876263749, 0.1194656914359021], 'false,false': [0.12515555555555488, 0.0], 'false,true': [0.11802694340978195, 0.00011495009377930632], 'false,true,true': [0.20389987794958447, 4.257410880718441e-05]}, {'': [0.236366928633617, 0.11173833815389327], 'true': [0.23566752628446358, 0.24295287544358235], 'true,false': [0.21362996677670285, 0.24513543757798248], 'true,false,false': [0.24000000000000005, 0.24585908819426222], 'false': [0.109435906756026, 0.11421156581709418], 'false,false': [0.11973920677450375, 0.0], 'false,true': [0.00016862660761780834, 0.12515555555555585]}, {'': [0.23616142231892123, 0.1115379511702413], 'true': [0.235667526284474, 0.24274660783094112], 'true,false': [0.2131559320007038, 0.2451075173866], 'true,false,false': [0.2399999999999999, 0.2458776622055004], 'false': [0.10737189784113672, 0.11172251974978196], 'false,false': [0.10915897713879817, 0.11477179253653014], 'false,false,false': [0.12106068610628806, 0.0], 'false,false,true': [0.00014201305740469775, 0.1251555555555548]}, {'': [0.23605459920567265, 0.11136683089152064], 'true': [0.23566752628446164, 0.24264209786280003], 'true,false': [0.21070271881342814, 0.24523553994238217], 'true,false,false': [0.24000000000000005, 0.24602342238316596], 'false': [0.10894851429369481, 0.11398796505159954], 'false,false': [0.11967324914865674, 0.0], 'false,true': [0.00012106554931307079, 0.12515555555555608]}, {'': [0.23600236580835926, 0.11124661633369123], 'true': [0.23566752628447166, 0.24256273973932227], 'true,false': [0.21080419210675908, 0.24520544691062213], 'false': [0.10878516879530492, 0.11392209802386895], 'false,false': [0.11966212035295863, 0.0], 'false,true': [0.00010432299669362738, 0.12515555555555608]}, {'': [0.23597930463337294, 0.11115094394272419], 'true': [0.23566752628446394, 0.24254446102481353], 'true,false': [0.24, 0.2428933383300659], 'true,false,false': [0.24, 0.2433577036574519], 'false': [0.10740080140663823, 0.1113186392202088], 'false,false': [0.10865608064015563, 0.11452287256967536], 'false,false,false': [0.12100890306055545, 0.0], 'false,false,true': [9.075486075367165e-05, 0.1251555555555557]}, {'': [0.2359684174012108, 0.11105981511404094], 'true': [0.23566752628446355, 0.2425237395389142], 'true,false': [0.24, 0.24288560285608726], 'true,false,false': [0.21109955931970217, 0.24599253918140732], 'false': [0.10855245196664247, 0.11379545247083207], 'false,false': [0.11961298315131173, 0.0], 'false,true': [7.962145528516568e-05, 0.1251555555555548]}, {'': [0.23596316886337593, 0.11099649997531884], 'true': [0.23566752628447613, 0.2425051252813899], 'true,false': [0.20838979866368848, 0.2453541460677858], 'true,false,false': [0.24, 0.24621046331768434], 'false': [0.10846810992716563, 0.11375877754466017], 'false,false': [0.11960537642910088, 0.0], 'false,true': [0.11735745349744224, 0.0007045926099989451], 'false,true,true': [0.2012576388547022, 0.0003143720000651932]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
0;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true
0;false,false;haswordvenue(B, L), haswordtitle(M, L).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
1;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true
1;false,false;haswordvenue(B, L), haswordtitle(M, L).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
2;false,true;title(K, J), venue(K, A).;true;true
2;false,true,true;samebib(K, L), venue(L, B).;true;true
2;false,false;haswordvenue(B, M), haswordtitle(N, M).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
3;false,true;haswordtitle(J, K), haswordvenue(A, K).;true;true
3;false,false;haswordvenue(A, L), haswordtitle(M, L).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;false;haswordvenue(B, I), haswordauthor(J, I).;true;true
4;false,false;haswordvenue(B, K), haswordtitle(L, K).;true;true
4;false,false,true;haswordtitle(L, M), haswordvenue(A, M).;true;true
4;false,false,false;haswordvenue(A, N), haswordtitle(P, N).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
5;false,true;haswordtitle(J, K), haswordvenue(A, K).;true;true
5;false,false;haswordvenue(A, L), haswordtitle(M, L).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;false,true;haswordtitle(H, I), haswordvenue(A, I).;true;true
6;false,false;haswordvenue(A, J), haswordtitle(K, J).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;false;haswordvenue(B, I), haswordauthor(J, I).;true;true
7;false,false;haswordvenue(B, K), haswordtitle(L, K).;true;true
7;false,false,true;haswordtitle(L, M), haswordvenue(A, M).;true;true
7;false,false,false;haswordvenue(A, N), haswordtitle(P, N).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
8;false,true;haswordtitle(J, K), haswordvenue(A, K).;true;true
8;false,false;haswordvenue(A, L), haswordtitle(M, L).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
9;false,true;title(K, J), venue(K, B).;true;true
9;false,true,true;samebib(K, L), venue(L, A).;true;true
9;false,false;haswordvenue(A, M), haswordtitle(N, M).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.23843062524035266;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.4581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.424815601766179;  // std dev = 2.714, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, A) )
%   | | then if ( samebib(K, L), venue(L, B) )
%   | | | then return 0.14762261931003867;  // std dev = 2.796, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return -0.14185106490048768;  // std dev = 4.47e-08, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | then return 0.004815601766179008;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.20686012285620575;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.45935396641210174;  // std dev = 0.810, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.3982164798305049;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.36287359443791467;  // std dev = 2.715, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.13722572521892853;  // std dev = 0.058, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.004228390109386251;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.00519975023914475;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.1751801570305961;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.37391135762433364;  // std dev = 0.808, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.32650617096328266;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.297711034783978;  // std dev = 2.715, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.12180522429396211;  // std dev = 0.052, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0037111125833978686;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.004568660166365263;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.14514481334590568;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.29107789104287257;  // std dev = 0.807, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.2640212940879415;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.23420454470584326;  // std dev = 2.715, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.10938844667377244;  // std dev = 0.048, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0032558270569705674;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.004012232942941109;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.11804668707041945;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.22080200794107122;  // std dev = 0.807, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.20258728537582385;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.1804134539412206;  // std dev = 2.715, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.09919616272853182;  // std dev = 0.044, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0028554031467501392;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.003522081179705699;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.09457696812283496;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.19405863149973065;  // std dev = 0.790, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.15321517240753826;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.13405858183207728;  // std dev = 2.718, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then return -0.029191083510224498;  // std dev = 0.328, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, M), haswordvenue(A, M) )
%   | | | then return -0.09069202318078944;  // std dev = 0.040, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.002503460836945874;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | | | then return 0.006945192053739801;  // std dev = 2.848, 67.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=10 */
%   | | | else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.07489163449109286;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.12567068528356198;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.1034180471376363;  // std dev = 0.493, 33.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | then if ( haswordtitle(H, I), haswordvenue(A, I) )
%   | | then return -0.0834963963588302;  // std dev = 0.037, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0021943081594878503;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | then return 0.0027347016802677887;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C) )
%   | | then return -0.12150391422280449;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.1201504927262201;  // std dev = 0.791, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.05984201257766986;  // std dev = 0.486, 847.000 (wgt'ed) examples reached here.  /* #neg=524 #pos=323 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.08926082630695267;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.07424394907502618;  // std dev = 2.718, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( title(L, K), venue(L, B) )
%   | | then return -0.0016528371524567609;  // std dev = 0.343, 80.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=11 */
%   | | else return -0.09308048476821622;  // std dev = 0.061, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return 0.00239826749344605;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04581639818104969;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.07573369723064918;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return 0.09068892870243332;  // std dev = 0.791, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.054251535487023175;  // std dev = 2.718, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then return -0.02608518231175635;  // std dev = 0.328, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( title(M, L), venue(M, B) )
%   | | | then return -0.0014555989697951418;  // std dev = 3.065, 80.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=11 */
%   | | | else return -0.08555927287595665;  // std dev = 0.057, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | | | then return 0.0054684019484906215;  // std dev = 2.848, 67.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=10 */
%   | | | else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.03554203749134577;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.05688850872248019;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return 0.0687906312264589;  // std dev = 0.792, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.040728906719297166;  // std dev = 2.718, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.07082546565873873;  // std dev = 0.021, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0018546624245666795;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.002578703684336494;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.556827
   AUC PR    = 0.428222
   CLL	      = -0.657451
   Precision = 0.637427 at threshold = 0.5
   Recall    = 0.041148
   F1        = 0.077305


Total learning time: 58.82531690597534 seconds
Total inference time: 6.481 seconds
AUC ROC: 0.556827


Results scoring model
   AUC ROC   = 0.592458
   AUC PR    = 0.42035
   CLL	      = -0.62019
   Precision = 0.578947 at threshold = 0.5
   Recall    = 0.059783
   F1        = 0.108374


Total scoring time: 1.084 seconds
Refined model CLL: -0.62019


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.557478
   AUC PR    = 0.42844
   CLL	      = -0.655498
   Precision = 0.637427 at threshold = 0.5
   Recall    = 0.041148
   F1        = 0.077305


Total learning time: 119.26821600341796 seconds
Total inference time: 7.555 seconds
AUC ROC: 0.557478
Total revision time: 119.26821600341796
Best scored revision CLL: -0.618775


Dataset: 11_yeast_cora, Fold: 1, Type: Transfer (trRDN-B), Time: 00:25:31
{'AUC ROC': 0.557478, 'AUC PR': 0.42844, 'CLL': -0.655498, 'Precision': [0.637427, 0.5], 'Recall': 0.041148, 'F1': 0.077305, 'Learning time': 119.26821600341796, 'Inference time': 7.555, 'parameter': {'AUC ROC': 0.557478, 'AUC PR': 0.42844, 'CLL': -0.655498, 'Precision': [0.637427, 0.5], 'Recall': 0.041148, 'F1': 0.077305, 'Learning time': 58.25389909744263, 'Inference time': 7.555}}


Starting fold 2

Target train facts examples: 9016
Target train pos examples: 771
Target train neg examples: 544

Target test facts examples: 33542
Target test pos  examples: 2246
Target test neg examples: 4478

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.4356367001892301;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.5949910403626703;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.5640312880406888;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.37395569825543723;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.5062567560764839;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.48074388375574334;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.7194734122109543;  // std dev = 7.30e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.30665618885999163;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.4047531668618019;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.386198448632422;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.5553664367462845;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.5553664367462846;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.20848477447886868;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.20848477447886868;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.5145754588862081;  // std dev = 0.357, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.16457545888620817;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, B) )
%   | | | then return -0.06605466959315473;  // std dev = 0.846, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.13542454111379182;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.2399523433083081;  // std dev = 0.494, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.3261448737160187;  // std dev = 1.915, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.3103700402108463;  // std dev = 1.898, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then return 0.33324199902303153;  // std dev = 0.330, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | else return 0.17062637354018512;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.4558153748715591;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.1269550565727362;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.1408361003133851;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.1840064169853794;  // std dev = 0.493, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.23233438181079052;  // std dev = 1.918, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.2456662189620484;  // std dev = 1.895, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.33934134460665244;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.13664585375352212;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.10772948932183568;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.14101010960218138;  // std dev = 0.492, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.1745759122894964;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.15535918906781698;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.2913110652541392;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return 0.2678472860901805;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.10762034996184425;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.08386661726494872;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.10610668049479119;  // std dev = 0.492, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.14620441726198094;  // std dev = 0.439, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.1016141846081825;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.23499176841811042;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return 0.21867246678660276;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.08372807955323866;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.0647256679921481;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.2822800451279307;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(A, C) )
%   | | then return 0.03621251059376053;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, A) )
%   | | | then return -0.15330865715214526;  // std dev = 0.852, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.2164124179911564;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.07803771269453821;  // std dev = 0.493, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.11138289029803404;  // std dev = 1.914, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.10436432275742162;  // std dev = 1.893, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then return 0.14970282525207637;  // std dev = 0.316, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | else return 0.04965004327313348;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.2603527575572172;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.02719603163925545;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.17949218078619855;  // std dev = 1.221, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.058176653815500155;  // std dev = 0.493, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.08567966869742873;  // std dev = 1.915, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.0821848608389202;  // std dev = 1.895, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.16222100457242122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.03792398425604247;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.034265064992541054;  // std dev = 0.491, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.19926260868281728;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.02041253943402975;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.1361874959099603;  // std dev = 1.222, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.04368890147157599;  // std dev = 0.493, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.06449440772357039;  // std dev = 1.915, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.0670040242424975;  // std dev = 1.896, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.14136293781547277;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.02888097101035517;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.02606392013184843;  // std dev = 0.491, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */


Results
   AUC ROC   = 0.537236
   AUC PR    = 0.345594
   CLL	      = -0.756313
   Precision = 0.354232 at threshold = 0.5
   Recall    = 0.955922
   F1        = 0.516913


Total learning time: 63.810930252075195 seconds
Total inference time: 6.704 seconds
AUC ROC: 0.537236


Results scoring model
   AUC ROC   = 0.553719
   AUC PR    = 0.662697
   CLL	      = -0.664946
   Precision = 0.594317 at threshold = 0.5
   Recall    = 0.976654
   F1        = 0.73896


Total scoring time: 1.07 seconds
Parameter learned model CLL: -0.664946


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)'}, {'true,true': [0.494, 518, 708], 'true,false,true': [0.44, 5, 14], 'true,false,false,true': [1.879, 5, 12], 'true,false,false,false': [0.0, 0, 5], 'false,true,true': [0.0, 0, 20], 'false,true,false': [0.495, 8, 6], 'false,false': [0.495, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)'}, {'true,true': [0.494, 518, 708], 'true,false,true': [0.44, 5, 14], 'true,false,false,true': [1.879, 5, 12], 'true,false,false,false': [0.0, 0, 5], 'false,true,true': [7.3e-08, 0, 20], 'false,true,false': [0.495, 8, 6], 'false,false': [0.495, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)'}, {'true,true': [0.494, 518, 708], 'true,false,true': [0.44, 5, 14], 'true,false,false,true': [1.879, 5, 12], 'true,false,false,false': [0.0, 0, 5], 'false,true,true': [0.0, 0, 20], 'false,true,false': [0.495, 8, 6], 'false,false': [0.495, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(E, C)', 'true,false': 'haswordvenue(B, C)', 'true,false,false': 'author(F, D), venue(F, B)', 'false': 'haswordvenue(A, G), haswordvenue(B, G)', 'false,true': 'haswordtitle(H, G)', 'false,true,false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,false': 'haswordvenue(A, K), haswordtitle(L, K)'}, {'true,true': [0.357, 3, 17], 'true,false,true': [1.0, 2, 2], 'true,false,false,true': [0.846, 3, 1], 'true,false,false,false': [0.894, 4, 1], 'false,true,true': [0.494, 507, 687], 'false,true,false,true': [1.915, 5, 14], 'false,true,false,false': [1.898, 5, 17], 'false,false,true': [0.33, 7, 26], 'false,false,false': [0.495, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordtitle(F, D)', 'true,true,false': 'haswordvenue(A, D)', 'true,false': 'haswordtitle(G, C)', 'true,false,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(A, L)'}, {'true,true,true': [0.356, 3, 17], 'true,true,false,true': [1.0, 2, 2], 'true,true,false,false': [1.225, 6, 2], 'true,false,true': [0.493, 507, 687], 'true,false,false,true': [1.918, 5, 14], 'true,false,false,false': [1.895, 5, 17], 'false,true,true': [0.0, 0, 20], 'false,true,false': [0.495, 8, 6], 'false,false': [0.49, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(A, K)'}, {'true,true': [0.492, 518, 708], 'true,false,true': [0.44, 5, 14], 'true,false,false,true': [1.879, 5, 12], 'true,false,false,false': [0.0, 0, 5], 'false,true,true': [0.0, 0, 20], 'false,true,false': [0.495, 8, 6], 'false,false': [0.49, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(A, K)'}, {'true,true': [0.492, 518, 708], 'true,false,true': [0.439, 5, 14], 'true,false,false,true': [1.879, 5, 12], 'true,false,false,false': [0.0, 0, 5], 'false,true,true': [0.0, 0, 20], 'false,true,false': [0.495, 8, 6], 'false,false': [0.49, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(B, C), haswordauthor(D, C)', 'true': 'haswordtitle(E, C)', 'true,false': 'haswordvenue(A, C)', 'true,false,false': 'author(F, D), venue(F, A)', 'false': 'haswordvenue(A, G), haswordvenue(B, G)', 'false,true': 'haswordtitle(H, G)', 'false,true,false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,false': 'haswordvenue(B, K), haswordtitle(L, K)'}, {'true,true': [0.356, 3, 17], 'true,false,true': [1.0, 2, 2], 'true,false,false,true': [0.852, 3, 1], 'true,false,false,false': [0.894, 4, 1], 'false,true,true': [0.493, 507, 687], 'false,true,false,true': [1.914, 5, 14], 'false,true,false,false': [1.893, 5, 17], 'false,false,true': [0.316, 7, 26], 'false,false,false': [0.49, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordtitle(F, D)', 'true,true,false': 'haswordvenue(B, D)', 'true,false': 'haswordtitle(G, C)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)'}, {'true,true,true': [0.356, 3, 17], 'true,true,false,true': [1.0, 2, 2], 'true,true,false,false': [1.221, 6, 2], 'true,false,true': [0.493, 507, 687], 'true,false,false,true': [1.915, 5, 14], 'true,false,false,false': [1.895, 5, 17], 'false,true,true': [0.0, 0, 20], 'false,true,false': [0.49, 8, 6], 'false,false': [0.491, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordtitle(F, D)', 'true,true,false': 'haswordvenue(B, D)', 'true,false': 'haswordtitle(G, C)', 'true,false,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)'}, {'true,true,true': [0.356, 3, 17], 'true,true,false,true': [1.0, 2, 2], 'true,true,false,false': [1.222, 6, 2], 'true,false,true': [0.493, 507, 687], 'true,false,false,true': [1.915, 5, 14], 'true,false,false,false': [1.896, 5, 17], 'false,true,true': [0.0, 0, 20], 'false,true,false': [0.49, 8, 6], 'false,false': [0.491, 8, 6]}]]
[{'': [0.24306651325713594, 0.22222222222222385], 'true': [0.24399564626142126, 0.1844140392623454], 'false': [0.17993079584775207, 0.24489795918367352], 'true,false': [0.19390581717451486, 0.17561983471074338], 'false,true': [-8.881784197001253e-17, 0.24489795918367352], 'true,false,false': [0.20761245674740453, 0.0]}, {'': [0.24265720194658616, 0.1968581969586748], 'true': [0.2439956462613994, 0.18151807630785113], 'false': [0.15465453537750254, 0.24489795918367324], 'true,false': [0.193905817174515, 0.170436695832288], 'true,false,false': [0.20761245674740458, 0.0], 'false,true': [2.6645352591003756e-16, 0.24489795918367324]}, {'': [0.24225435465227552, 0.1721032613752619], 'true': [0.2439956462614137, 0.1787372059517855], 'true,false': [0.1939058171745152, 0.1654536622329366], 'false': [0.12998525701064176, 0.2448979591836735], 'true,false,false': [0.20761245674740486, -4.4408920985006264e-17], 'false,true': [-2.6645352591003756e-16, 0.2448979591836735]}, {'': [0.22859316790538875, 0.23914829737668838], 'false': [0.24228938523546947, 0.1548899116102977], 'false,true': [0.24431832529480985, 0.1773616247101184], 'true': [0.12749999999999995, 0.20977633704439644], 'true,false': [0.25, 0.16960625458986087], 'false,true,false': [0.192926167121755, 0.16380420131299045], 'true,false,false': [0.17894064000785942, 0.16], 'false,false': [0.1088277903039631, 0.24489795918367352]}, {'': [0.24112347296450612, 0.15311909249675226], 'true': [0.2236318573875938, 0.24141627886886027], 'true,false': [0.24351137886333188, 0.17742685901167018], 'true,true': [0.12670848230578705, 0.2242693563792015], 'true,true,false': [0.24999999999999994, 0.18750000000000003], 'true,false,false': [0.19368882681207994, 0.16330006593947158], 'false': [0.11079183212356579, 0.24036727701404886], 'false,true': [-2.2204460492503132e-17, 0.24489795918367335]}, {'': [0.24027905788618922, 0.1487641222132293], 'true': [0.24232320332767213, 0.17761873159618197], 'true,false': [0.193692304929508, 0.16367377354919171], 'true,false,false': [0.20761245674740486, -2.2204460492503132e-17], 'false': [0.10705863016308767, 0.24018524090212215], 'false,true': [-5.551115123125783e-17, 0.24489795918367338]}, {'': [0.24023283635423331, 0.1465681921298909], 'true': [0.2423071929292656, 0.1771864148552593], 'true,false': [0.19286424393908674, 0.16355201056174018], 'true,false,false': [0.2076124567474049, 0.0], 'false': [0.10525105978568264, 0.24005390308338687], 'false,true': [-2.2204460492503132e-17, 0.24489795918367346]}, {'': [0.19633586648049742, 0.23776944991872098], 'false': [0.24129376560927246, 0.1435525105699099], 'false,true': [0.24347950520969347, 0.17679488549166367], 'true': [0.12671747253040547, 0.20572076866014763], 'true,false': [0.24999999999999997, 0.17052245087328333], 'false,true,false': [0.19289774573318752, 0.16286504188911177], 'true,false,false': [0.18146324522487245, 0.15999999999999998], 'false,false': [0.09967064841801243, 0.23995963801008538]}, {'': [0.2397552731150777, 0.14411014215615206], 'true': [0.19270454686321112, 0.24087662663351728], 'true,false': [0.24304868314503722, 0.17698712526799695], 'true,true': [0.12642838603531142, 0.21716290095630575], 'true,true,false': [0.24999999999999997, 0.18650434571591545], 'true,false,false': [0.19292890662379414, 0.1632135631890296], 'false': [0.10252117413718057, 0.2409367414653443], 'false,true': [-3.3306690738754695e-17, 0.23989190653342912]}, {'': [0.2393444952181424, 0.14337166033107415], 'true': [0.1777777862734107, 0.24088004320705877], 'true,false': [0.24305186485880864, 0.17715793315967723], 'true,true': [0.12647457973971415, 0.21313899607267975], 'true,true,false': [0.25000000000000006, 0.1865339704191066], 'true,false,false': [0.1930718035103108, 0.16341121737217887], 'false': [0.10182343336081745, 0.24090379223738023], 'false,true': [-1.9428902930940238e-17, 0.2398430146330413]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,false;haswordvenue(A, E), haswordtitle(F, E).;true;true
0;true,false,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
0;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
0;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,false;haswordvenue(A, E), haswordtitle(F, E).;true;true
1;true,false,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
1;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,false;haswordvenue(A, E), haswordtitle(F, E).;true;true
2;true,false,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
2;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
2;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;false;haswordvenue(B, J), haswordtitle(K, J).;true;true
4;false,true;haswordtitle(K, L), haswordvenue(A, L).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,false;haswordvenue(A, E), haswordtitle(F, E).;true;true
5;true,false,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
5;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
5;false,true;haswordtitle(J, K), haswordvenue(A, K).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,false;haswordvenue(B, E), haswordtitle(F, E).;true;true
6;true,false,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
6;false,true;haswordtitle(J, K), haswordvenue(A, K).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;false;haswordvenue(A, J), haswordtitle(K, J).;true;true
8;false,true;haswordtitle(K, L), haswordvenue(B, L).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;false;haswordvenue(A, J), haswordtitle(K, J).;true;true
9;false,true;haswordtitle(K, L), haswordvenue(B, L).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.4356367001892301;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.5949910403626703;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.5640312880406888;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.37395569825543723;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.5062567560764839;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.48074388375574334;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.7194734122109543;  // std dev = 7.30e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.30665618885999163;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.4047531668618019;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.386198448632422;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.5553664367462845;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.5553664367462846;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.20848477447886868;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.20848477447886868;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.5145754588862081;  // std dev = 0.357, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.16457545888620817;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, B) )
%   | | | then return -0.06605466959315473;  // std dev = 0.846, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.13542454111379182;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.2399523433083081;  // std dev = 0.494, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.3261448737160187;  // std dev = 1.915, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.3103700402108463;  // std dev = 1.898, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then return 0.33324199902303153;  // std dev = 0.330, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | else return 0.17062637354018512;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.1861346662330817;  // std dev = 0.493, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.23233438181079052;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.2166010869669191;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.344487667745488;  // std dev = 1.05e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return 0.33934134460665244;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.13664585375352212;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.10772948932183568;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.14103842422531224;  // std dev = 0.493, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.1911614910571029;  // std dev = 0.439, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.14402452645856367;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.27133764558638873;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return 0.2678472860901805;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.10762034996184425;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.08386661726494872;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.37569645107374977;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(A, C) )
%   | | then return 0.047853794842377284;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, A) )
%   | | | then return -0.18936821850955593;  // std dev = 0.836, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.2708765083400113;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( haswordtitle(J, H) )
%   | | | then return 0.30268794309310576;  // std dev = 1.589, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return -0.13559623752975208;  // std dev = 1.222, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( haswordtitle(K, G) )
%   | | | then return 0.10238827315099981;  // std dev = 16.896, 1,167.000 (wgt'ed) examples reached here.  /* #neg=498 #pos=669 */
%   | | | else return 0.13902127271828768;  // std dev = 2.691, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | else return 0.14460947128480126;  // std dev = 0.380, 47.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.07966330523149708;  // std dev = 0.492, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.11124947654764955;  // std dev = 0.439, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.07599089768730168;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.1981010401604517;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return 0.19497077821903627;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.055709661147315286;  // std dev = 0.491, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.030720443189324452;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.21726590692767553;  // std dev = 0.357, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.016115856506408996;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, B) )
%   | | | then return -0.11683252985944918;  // std dev = 0.849, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.16634345264488543;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.058522552722742385;  // std dev = 0.493, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.08709319287963753;  // std dev = 1.914, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.0821607084090671;  // std dev = 1.891, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then return 0.12030262385912048;  // std dev = 0.318, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | else return 0.042614410383752625;  // std dev = 0.491, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.2470487984034809;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(A, C) )
%   | | then return 0.01209011956597461;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, A) )
%   | | | then return -0.17475316167764343;  // std dev = 0.835, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.23799170707161163;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.04333250881726222;  // std dev = 0.493, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.06754413371244088;  // std dev = 1.914, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.06533793577676873;  // std dev = 1.893, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then return 0.11462613426149282;  // std dev = 0.316, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | else return -0.002184677571675104;  // std dev = 0.487, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */


Results
   AUC ROC   = 0.537041
   AUC PR    = 0.345485
   CLL	      = -0.756496
   Precision = 0.35357 at threshold = 0.5
   Recall    = 0.956812
   F1        = 0.516338


Total learning time: 54.56978225708008 seconds
Total inference time: 5.693 seconds
AUC ROC: 0.537041


Results scoring model
   AUC ROC   = 0.553719
   AUC PR    = 0.662697
   CLL	      = -0.664928
   Precision = 0.594317 at threshold = 0.5
   Recall    = 0.976654
   F1        = 0.73896


Total scoring time: 1.084 seconds
Refined model CLL: -0.664928


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.537041
   AUC PR    = 0.345485
   CLL	      = -0.756496
   Precision = 0.35357 at threshold = 0.5
   Recall    = 0.956812
   F1        = 0.516338


Total learning time: 120.53471250915527 seconds
Total inference time: 5.693 seconds
AUC ROC: 0.537041
Total revision time: 120.53471250915527
Best scored revision CLL: -0.664928


Dataset: 11_yeast_cora, Fold: 2, Type: Transfer (trRDN-B), Time: 00:27:45
{'AUC ROC': 0.537041, 'AUC PR': 0.345485, 'CLL': -0.756496, 'Precision': [0.35357, 0.5], 'Recall': 0.956812, 'F1': 0.516338, 'Learning time': 120.53471250915527, 'Inference time': 5.693, 'parameter': {'AUC ROC': 0.537236, 'AUC PR': 0.345594, 'CLL': -0.756313, 'Precision': [0.354232, 0.5], 'Recall': 0.955922, 'F1': 0.516913, 'Learning time': 63.810930252075195, 'Inference time': 6.704}}


Starting fold 3

Target train facts examples: 9306
Target train pos examples: 581
Target train neg examples: 2222

Target test facts examples: 33252
Target test pos  examples: 2436
Target test neg examples: 2800

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.35814893509951223;  // std dev = 1.225, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.20950028645086372;  // std dev = 0.477, 37.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=13 */
%   | else return 0.21801288067773866;  // std dev = 0.480, 1,470.000 (wgt'ed) examples reached here.  /* #neg=941 #pos=529 */
%   else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | then if ( title(I, H), venue(I, B) )
%   | | then if ( samebib(I, J), venue(J, A) )
%   | | | then return 0.6200536970042743;  // std dev = 1.952, 21.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=16 */
%   | | | else return -0.14185106490048766;  // std dev = 6.14e-08, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | | else if ( title(K, H), venue(K, A) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return 0.001006077956655051;  // std dev = 1.309, 14.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | else return 0.014670674229947162;  // std dev = 0.363, 115.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=18 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.18819995934300168;  // std dev = 0.480, 1,519.000 (wgt'ed) examples reached here.  /* #neg=974 #pos=545 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.564938148762135;  // std dev = 1.789, 20.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=16 */
%   | | | else return -0.1254446385283916;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | | else if ( title(H, E), venue(H, A) )
%   | | | then return -0.12544463852839138;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return -0.00864024490747261;  // std dev = 1.317, 15.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.03612896393341538;  // std dev = 3.623, 89.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=16 */
%   | | | else return -0.038383159070724523;  // std dev = 1.338, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | | else return -0.14364631696546135;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.16043484451500648;  // std dev = 0.480, 1,517.000 (wgt'ed) examples reached here.  /* #neg=972 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.6137566777435962;  // std dev = 1.952, 21.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=16 */
%   | | | else return -0.1481480841611653;  // std dev = 2.58e-08, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   | | else if ( title(H, E), venue(H, B) )
%   | | | then return -0.13898900024398728;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0.04282918157419451;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then return 0.026119759945749232;  // std dev = 0.294, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return -0.01936912807332453;  // std dev = 3.072, 113.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=16 */
%   | | | else return -0.12686400433014766;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.12686619013044714;  // std dev = 0.478, 1,546.000 (wgt'ed) examples reached here.  /* #neg=1,001 #pos=545 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.49449488318481305;  // std dev = 1.587, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return -0.11101053836281644;  // std dev = 0.013, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
%   | | else return 0.08362656905608591;  // std dev = 0.416, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return -0.004368260848351208;  // std dev = 3.314, 107.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=16 */
%   | | | else return 0.14152018741624764;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | else return -0.1161839693538013;  // std dev = 0.015, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C) )
%   | | then return 0.11681581863221693;  // std dev = 0.480, 41.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=15 */
%   | | else return 0.0577247253801931;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return 0.11529737033832589;  // std dev = 0.481, 1,454.000 (wgt'ed) examples reached here.  /* #neg=925 #pos=529 */
%   else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | then if ( title(I, H), venue(I, A) )
%   | | then if ( samebib(I, J), venue(J, B) )
%   | | | then return 0.6988215807837346;  // std dev = 0.970, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | | else return -0.1299143003843272;  // std dev = 4.21e-08, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
%   | | else if ( title(K, H), venue(K, B) )
%   | | | then return -0.12270397338136486;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return 0.004114924523357173;  // std dev = 1.291, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return -0.021028315924833237;  // std dev = 0.275, 112.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=18 */
%   | | else return -0.10229105999702708;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08829599699943436;  // std dev = 0.480, 1,518.000 (wgt'ed) examples reached here.  /* #neg=973 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( title(G, E), venue(G, B) )
%   | | | then return 0.2428755492743204;  // std dev = 2.182, 30.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=16 */
%   | | | else return -0.12576392778534098;  // std dev = 0.383, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | | else return -0.047207298231236726;  // std dev = 0.296, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return -0.09808342049109088;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return -0.005533620197471739;  // std dev = 2.874, 100.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=18 */
%   | | | else return -0.0978620415712557;  // std dev = 0.011, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07006245053299197;  // std dev = 0.480, 1,520.000 (wgt'ed) examples reached here.  /* #neg=975 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return -0.041986340743316045;  // std dev = 0.242, 15.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | then if ( title(H, G), venue(H, A) )
%   | | | then return -0.015505609518592424;  // std dev = 2.337, 96.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=14 */
%   | | | else return 0.07667226515172455;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return -0.010269305792239666;  // std dev = 2.871, 105.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=18 */
%   | | | else return -0.08531911547286689;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05570124623515117;  // std dev = 0.480, 1,519.000 (wgt'ed) examples reached here.  /* #neg=974 #pos=545 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.3068179467505676;  // std dev = 1.951, 21.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=16 */
%   | | | else return -0.09623010077669822;  // std dev = 0.012, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   | | else if ( title(H, E), venue(H, A) )
%   | | | then return -0.09623789961350586;  // std dev = 5.27e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return 0.011319906687548086;  // std dev = 1.291, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then return -0.0980005478380351;  // std dev = 0.004, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.01716433135985252;  // std dev = 0.276, 112.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=18 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04857405480513696;  // std dev = 0.481, 1,499.000 (wgt'ed) examples reached here.  /* #neg=954 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.23016396146825704;  // std dev = 2.261, 24.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=16 */
%   | | | else return -0.10528142344916545;  // std dev = 0.105, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
%   | | else return 0.06904412512932202;  // std dev = 0.416, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return -0.08045914761381354;  // std dev = 0.003, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return -0.022117566487602675;  // std dev = 2.727, 111.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=18 */
%   | | | else return -0.07765379931169644;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.022452488475118226;  // std dev = 0.476, 1,566.000 (wgt'ed) examples reached here.  /* #neg=1,021 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.01727825558949778;  // std dev = 0.227, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | then if ( title(H, G), venue(H, A) )
%   | | | then return -0.01810268678287916;  // std dev = 2.444, 86.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=16 */
%   | | | else return 0.027882960844665725;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return -0.027078143266182547;  // std dev = 2.676, 105.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=16 */
%   | | | else return -0.07498303213547203;  // std dev = 0.007, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.564335
   AUC PR    = 0.511626
   CLL	      = -0.706177
   Precision = 0.585366 at threshold = 0.5
   Recall    = 0.039409
   F1        = 0.073846


Total learning time: 42.31608009338379 seconds
Total inference time: 4.934 seconds
AUC ROC: 0.564335


Results scoring model
   AUC ROC   = 0.592904
   AUC PR    = 0.278924
   CLL	      = -0.510477
   Precision = 0.6 at threshold = 0.5
   Recall    = 0.030981
   F1        = 0.05892


Total scoring time: 1.51 seconds
Parameter learned model CLL: -0.510477


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordauthor(F, C)', 'false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false,true': 'title(I, H), venue(I, B)', 'false,true,true': 'samebib(I, J), venue(J, A)', 'false,true,false': 'title(K, H), venue(K, A)'}, {'true,true,true': [1.225, 3, 3], 'true,true,false': [0.477, 24, 13], 'true,false': [0.48, 941, 529], 'false,true,true,true': [1.952, 5, 16], 'false,true,true,false': [6.14e-08, 61, 0], 'false,true,false,true': [0.0, 10, 0], 'false,true,false,false': [1.309, 12, 2], 'false,false': [0.363, 97, 18]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordtitle(E, D)', 'false,true': 'title(F, E), venue(F, B)', 'false,true,true': 'samebib(F, G), venue(G, A)', 'false,true,false': 'title(H, E), venue(H, A)', 'false,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,false,true': 'title(K, J), venue(K, A)'}, {'true': [0.48, 974, 545], 'false,true,true,true': [1.789, 4, 16], 'false,true,true,false': [0.0, 58, 0], 'false,true,false,true': [5.27e-09, 11, 0], 'false,true,false,false': [1.317, 13, 2], 'false,false,true,true': [3.623, 73, 16], 'false,false,true,false': [1.338, 17, 2], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordtitle(E, D)', 'false,true': 'title(F, E), venue(F, A)', 'false,true,true': 'samebib(F, G), venue(G, B)', 'false,true,false': 'title(H, E), venue(H, B)', 'false,false': 'haswordvenue(A, I), haswordauthor(J, I)', 'false,false,false': 'haswordvenue(B, K), haswordtitle(L, K)'}, {'true': [0.48, 972, 545], 'false,true,true,true': [1.952, 5, 16], 'false,true,true,false': [2.58e-08, 64, 0], 'false,true,false,true': [0.0, 9, 0], 'false,true,false,false': [1.279, 9, 2], 'false,false,true': [0.294, 9, 2], 'false,false,false,true': [3.072, 97, 16], 'false,false,false,false': [0.0, 3, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordtitle(E, D)', 'false,true': 'title(F, E), venue(F, A)', 'false,true,true': 'samebib(F, G), venue(G, B)', 'false,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'false,false,true': 'title(J, I), venue(J, B)'}, {'true': [0.478, 1, 545], 'false,true,true,true': [1.587, 3, 16], 'false,true,true,false': [0.013, 67, 0], 'false,true,false': [0.416, 7, 2], 'false,false,true,true': [3.314, 91, 16], 'false,false,true,false': [1.195, 5, 2], 'false,false,false': [0.015, 6, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordtitle(F, C)', 'false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false,true': 'title(I, H), venue(I, A)', 'false,true,true': 'samebib(I, J), venue(J, B)', 'false,true,false': 'title(K, H), venue(K, B)', 'false,false': 'haswordvenue(B, L), haswordtitle(M, L)'}, {'true,true,true': [0.48, 26, 15], 'true,true,false': [0.816, 2, 1], 'true,false': [0.481, 925, 529], 'false,true,true,true': [0.97, 1, 16], 'false,true,true,false': [4.21e-08, 76, 0], 'false,true,false,true': [0.0, 11, 0], 'false,true,false,false': [1.291, 10, 2], 'false,false,true': [0.275, 94, 18], 'false,false,false': [2.63e-09, 3, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordtitle(E, D)', 'false,true': 'title(F, E), venue(F, A)', 'false,true,true': 'title(G, E), venue(G, B)', 'false,false': 'haswordvenue(B, H), haswordauthor(I, H)', 'false,false,false': 'haswordvenue(B, J), haswordtitle(K, J)'}, {'true': [0.48, 973, 545], 'false,true,true,true': [2.182, 14, 16], 'false,true,true,false': [0.383, 56, 0], 'false,true,false': [0.296, 18, 2], 'false,false,true': [0.0, 4, 0], 'false,false,false,true': [2.874, 82, 18], 'false,false,false,false': [0.011, 3, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(B, F), haswordtitle(G, F)', 'false,false,true': 'title(H, G), venue(H, A)', 'false,false,false': 'haswordvenue(A, I), haswordtitle(J, I)'}, {'true': [0.48, 975, 545], 'false,true': [0.242, 13, 2], 'false,false,true,true': [2.337, 82, 14], 'false,false,true,false': [1.247, 7, 2], 'false,false,false,true': [2.871, 87, 18], 'false,false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordtitle(E, D)', 'false,true': 'title(F, E), venue(F, B)', 'false,true,true': 'samebib(F, G), venue(G, A)', 'false,true,false': 'title(H, E), venue(H, A)', 'false,false': 'haswordvenue(A, I), haswordauthor(J, I)'}, {'true': [0.48, 974, 545], 'false,true,true,true': [1.951, 5, 16], 'false,true,true,false': [0.012, 66, 0], 'false,true,false,true': [5.27e-09, 10, 0], 'false,true,false,false': [1.291, 10, 2], 'false,false,true': [0.004, 3, 0], 'false,false,false': [0.276, 94, 18]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordtitle(E, D)', 'false,true': 'title(F, E), venue(F, B)', 'false,true,true': 'samebib(F, G), venue(G, A)', 'false,false': 'haswordvenue(B, H), haswordauthor(I, H)', 'false,false,false': 'haswordvenue(B, J), haswordtitle(K, J)'}, {'true': [0.481, 954, 545], 'false,true,true,true': [2.261, 8, 16], 'false,true,true,false': [0.105, 73, 0], 'false,true,false': [0.416, 7, 2], 'false,false,true': [0.003, 6, 0], 'false,false,false,true': [2.727, 93, 18], 'false,false,false,false': [0.0, 3, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(B, F), haswordtitle(G, F)', 'false,false,true': 'title(H, G), venue(H, A)', 'false,false,false': 'haswordvenue(A, I), haswordtitle(J, I)'}, {'true': [0.476, 1, 545], 'false,true': [0.227, 9, 2], 'false,false,true,true': [2.444, 70, 16], 'false,false,true,false': [1.279, 9, 2], 'false,false,false,true': [2.676, 89, 16], 'false,false,false,false': [0.007, 3, 0]}]]
[{'': [0.230459175360128, 0.13636084437255694], 'true': [0.23363980530016176, 0.2303618862510853], 'true,true': [0.24999999999999992, 0.2279035792549301], 'false': [0.14097543609825505, 0.13202268431001835], 'false,true': [0.15704937537180197, 0.07638888888888894], 'false,true,true': [0.1814058956916096, 6.188128333976282e-17], 'false,true,false': [-1.1102230246251566e-17, 0.12244897959183677]}, {'': [0.2300537172291677, 0.12709481219643234], 'false': [0.1186790201355606, 0.13488520408163301], 'false,false': [0.13888888888888926, 0.0], 'false,false,true': [0.14745612927660684, 0.09418282548476449], 'false,true': [0.13190153449456915, 0.06999675387215452], 'false,true,true': [0.1600000000000001, -4.0197730201945323e-17], 'false,true,false': [2.523234146875356e-18, 0.1155555555555555]}, {'': [0.23014190502704282, 0.10965303396588129], 'false': [0.1418045247905482, 0.08223451500483799], 'false,true': [0.15280276816609023, 0.0899999999999999], 'false,true,true': [0.18140589569161056, 1.0408340855860843e-17], 'false,true,false': [0.0, 0.14876033057851232], 'false,false': [0.0862405395432244, 0.08165283192324299], 'false,false,false': [0.08352176617670735, 0.0]}, {'': [0.22822245451633202, 0.10333730460020538], 'false': [0.10034665426113931, 0.10530779186640397], 'false,false': [0.11011904462798762, 3.7000795710916135e-05], 'false,false,true': [0.10266508157605603, 0.20408163265306123], 'false,true': [0.09240926287065664, 0.17283950617283944], 'false,true,true': [0.1326293677681271, 2.404563823129773e-06]}, {'': [0.23142628376916313, 0.09054844123605293], 'true': [0.23043556799639128, 0.23145607904203055], 'true,true': [0.23079847015497154, 0.2222222222222222], 'false': [0.10650044259486988, 0.07402852203898469], 'false,true': [0.1127158163296158, 0.07647692565522632], 'false,true,true': [0.055363321799308286, 2.337311630789803e-17], 'false,true,false': [-2.523234146875356e-18, 0.13888888888888887], 'false,false': [0.07583916017738046, 2.3129646346357427e-18]}, {'': [0.2300911239753223, 0.0829545021682192], 'false': [0.0882285085035168, 0.07771748286176403], 'false,true': [0.0879466168124964, 0.0874092131076286], 'false,true,true': [0.1587415712788521, 0.002615493448323486], 'false,false': [0.0, 0.08043377093559889], 'false,false,false': [0.0825972328250782, 4.212472314152685e-05]}, {'': [0.229941786792764, 0.07094500478907129], 'false': [0.0587087752220644, 0.07173718687425755], 'false,false': [0.06750356660823552, 0.07580103777097419], 'false,false,false': [0.07848200006160266, 0.0], 'false,false,true': [0.05690002851016219, 0.17283950617283958]}, {'': [0.23001133985832467, 0.0746044520800438], 'false': [0.07476280970370505, 0.07437790867690354], 'false,true': [0.07348479806711211, 0.0786258439467398], 'false,true,false': [2.7755575615628915e-18, 0.1388888888888888], 'false,false': [6.519780986704675e-06, 0.07619953439278372], 'false,true,true': [0.18119389669725852, 2.2005299440744954e-06]}, {'': [0.2313550842757339, 0.07191577388248156], 'false': [0.08283079374324405, 0.06220783503714156], 'false,true': [0.07377127680591991, 0.17283950617283952], 'false,true,true': [0.21301879404036309, 0.00015037886869284493], 'false,false': [1.5918370410763587e-06, 0.06532008054086633], 'false,false,false': [0.06700432303999158, 0.0]}, {'': [0.22686454215697077, 0.07127508107605554], 'false': [0.05156695142306588, 0.07225771990605424], 'false,false': [0.07866917271669248, 0.06638529770437773], 'false,false,true': [0.06946421556999514, 0.14876033057851248], 'false,false,false': [0.06821785363916916, 1.4708230698339911e-05]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;false;haswordvenue(B, G), haswordtitle(H, G).;true;true
0;false,true;title(I, H), venue(I, B).;true;true
0;false,true,true;samebib(I, J), venue(J, A).;true;true
0;false,true,false;title(K, H), venue(K, A).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
1;false,true;title(F, E), venue(F, B).;true;true
1;false,true,true;samebib(F, G), venue(G, A).;true;true
1;false,true,false;title(H, E), venue(H, A).;true;true
1;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;false;haswordvenue(A, D), haswordtitle(E, D).;true;true
2;false,true;title(F, E), venue(F, A).;true;true
2;false,true,true;samebib(F, G), venue(G, B).;true;true
2;false,true,false;title(H, E), venue(H, B).;true;true
2;false,false;haswordvenue(A, I), haswordauthor(J, I).;true;true
2;false,false,false;haswordvenue(B, K), haswordtitle(L, K).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
3;false,true;title(F, E), venue(F, A).;true;true
3;false,true,true;samebib(F, G), venue(G, B).;true;true
3;false,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;false,true;title(I, H), venue(I, A).;true;true
4;false,true,true;samebib(I, J), venue(J, B).;true;true
4;false,true,false;title(K, H), venue(K, B).;true;true
4;false,false;haswordvenue(B, L), haswordtitle(M, L).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;false;haswordvenue(A, D), haswordtitle(E, D).;true;true
5;false,false;haswordvenue(B, H), haswordauthor(I, H).;true;true
5;false,false,false;haswordvenue(B, J), haswordtitle(K, J).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
6;false,false;haswordvenue(B, F), haswordtitle(G, F).;true;true
6;false,false,false;haswordvenue(A, I), haswordtitle(J, I).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
7;false,true;title(F, E), venue(F, B).;true;true
7;false,true,true;samebib(F, G), venue(G, A).;true;true
7;false,true,false;title(H, E), venue(H, A).;true;true
7;false,false;haswordvenue(A, I), haswordauthor(J, I).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;false;haswordvenue(A, D), haswordtitle(E, D).;true;true
8;false,true;title(F, E), venue(F, B).;true;true
8;false,true,true;samebib(F, G), venue(G, A).;true;true
8;false,false;haswordvenue(B, H), haswordauthor(I, H).;true;true
8;false,false,false;haswordvenue(B, J), haswordtitle(K, J).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;false,false;haswordvenue(B, F), haswordtitle(G, F).;true;true
9;false,false,false;haswordvenue(A, I), haswordtitle(J, I).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2185986705492428;  // std dev = 0.480, 1,512.000 (wgt'ed) examples reached here.  /* #neg=967 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return -0.00851773156715447;  // std dev = 0.340, 15.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | then if ( title(H, G), venue(H, B) )
%   | | | then return 0.047338124288701565;  // std dev = 3.369, 74.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=14 */
%   | | | else return -0.03658790700575096;  // std dev = 1.338, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.02178529873587602;  // std dev = 3.880, 110.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=18 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.4294028888540467;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.21175583003051698;  // std dev = 0.486, 34.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=13 */
%   | else return 0.18324904270017936;  // std dev = 0.478, 1,495.000 (wgt'ed) examples reached here.  /* #neg=966 #pos=529 */
%   else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | then return -0.026129429147787396;  // std dev = 0.322, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.06146764106634171;  // std dev = 3.334, 68.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=14 */
%   | | | else return -0.04452372233399688;  // std dev = 1.342, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.020631349286883514;  // std dev = 3.871, 109.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=18 */
%   | | | else return -0.1292878205769169;  // std dev = 0.013, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.2598757509551053;  // std dev = 1.225, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.1143960433606773;  // std dev = 0.465, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | else return 0.1677273118007072;  // std dev = 0.482, 1,446.000 (wgt'ed) examples reached here.  /* #neg=917 #pos=529 */
%   else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | then if ( title(I, H), venue(I, A) )
%   | | then if ( samebib(I, J), venue(J, B) )
%   | | | then return 0.6488061183434255;  // std dev = 1.791, 20.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=16 */
%   | | | else return -0.15092749434633035;  // std dev = 0.028, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   | | else return -0.014105608179096667;  // std dev = 0.331, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( title(M, L), venue(M, B) )
%   | | | then return 0.02103977690460282;  // std dev = 3.643, 94.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=16 */
%   | | | else return -0.059919761691875253;  // std dev = 1.356, 25.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=2 */
%   | | else return -0.1146018253158555;  // std dev = 0.009, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13765416929682345;  // std dev = 0.481, 1,498.000 (wgt'ed) examples reached here.  /* #neg=953 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return -0.02364564595408788;  // std dev = 0.321, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | then if ( title(H, G), venue(H, B) )
%   | | | then return 0.03371091932940002;  // std dev = 3.374, 75.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=14 */
%   | | | else return -0.021752135311788483;  // std dev = 1.333, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.016891672153171382;  // std dev = 3.485, 102.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=18 */
%   | | | else return -0.10299090277250049;  // std dev = 0.009, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.11628851405339044;  // std dev = 0.482, 1,483.000 (wgt'ed) examples reached here.  /* #neg=938 #pos=545 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( title(G, E), venue(G, A) )
%   | | | then return 0.3952642492222266;  // std dev = 2.683, 29.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=16 */
%   | | | else return -0.15500424716301675;  // std dev = 0.040, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | | else if ( title(H, E), venue(H, A) )
%   | | | then return -0.13037712200805174;  // std dev = 3.73e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0.0362895446586149;  // std dev = 1.291, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then return -0.03417200548327107;  // std dev = 0.281, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | | else return 9.802362169721683E-4;  // std dev = 0.329, 101.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=16 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08294012767984979;  // std dev = 0.479, 1,528.000 (wgt'ed) examples reached here.  /* #neg=983 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.5059594760123334;  // std dev = 1.949, 21.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=16 */
%   | | | else return -0.13256816035687047;  // std dev = 0.043, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | | else if ( title(H, E), venue(H, B) )
%   | | | then return -0.13955725571666042;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0.06044274428333955;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return -0.0037560213835091485;  // std dev = 3.450, 102.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=16 */
%   | | | else return 0.03211959926566792;  // std dev = 1.291, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | | else return -0.09331224807612502;  // std dev = 0.005, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0692626128034168;  // std dev = 0.480, 1,515.000 (wgt'ed) examples reached here.  /* #neg=970 #pos=545 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.5508702983688843;  // std dev = 1.927, 21.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=16 */
%   | | | else return -0.14922208552684785;  // std dev = 0.248, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   | | else if ( title(H, E), venue(H, A) )
%   | | | then return -0.11590828267519118;  // std dev = 6.45e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0.02833536492856618;  // std dev = 1.291, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.01644600430807413;  // std dev = 2.823, 80.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=16 */
%   | | | else return -0.030651727330592654;  // std dev = 1.322, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | | else return -0.08912751721617612;  // std dev = 0.016, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C) )
%   | | then return 0.002894908394546862;  // std dev = 0.460, 48.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=15 */
%   | | else return -0.13084167783798517;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.06469999923424491;  // std dev = 0.483, 1,432.000 (wgt'ed) examples reached here.  /* #neg=903 #pos=529 */
%   else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | then if ( title(I, H), venue(I, B) )
%   | | then if ( samebib(I, J), venue(J, A) )
%   | | | then return 0.4783090467839358;  // std dev = 1.795, 20.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=16 */
%   | | | else return -0.1274205689551947;  // std dev = 0.199, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   | | else return -0.04389021743924923;  // std dev = 0.267, 25.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=2 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then if ( title(M, L), venue(M, B) )
%   | | | then return -0.024944406956515827;  // std dev = 2.933, 105.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=16 */
%   | | | else return 0.07904907065480975;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return -0.0823266243744027;  // std dev = 0.015, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.13398509281800353;  // std dev = 1.213, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.019961840139989372;  // std dev = 0.471, 39.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=13 */
%   | | else return 0.03806224511683799;  // std dev = 0.479, 1,484.000 (wgt'ed) examples reached here.  /* #neg=955 #pos=529 */
%   else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | then if ( title(I, H), venue(I, A) )
%   | | then if ( samebib(I, J), venue(J, B) )
%   | | | then return 0.400639672865163;  // std dev = 1.948, 21.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=16 */
%   | | | else return -0.11772888486555783;  // std dev = 0.039, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   | | else return -0.07113177843459163;  // std dev = 0.246, 30.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=2 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( title(M, L), venue(M, B) )
%   | | | then return -0.017231613584720994;  // std dev = 2.674, 92.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=16 */
%   | | | else return -0.037017489250456934;  // std dev = 1.335, 23.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=2 */
%   | | else return -0.07382205809725916;  // std dev = 0.004, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0322282784547055;  // std dev = 0.480, 1,518.000 (wgt'ed) examples reached here.  /* #neg=973 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.3041569676832265;  // std dev = 1.948, 21.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=16 */
%   | | | else return -0.10681360726548025;  // std dev = 0.034, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
%   | | else return 0.00969900506656149;  // std dev = 0.361, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return -0.008687325614065928;  // std dev = 2.643, 91.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=16 */
%   | | | else return -0.03959408399534989;  // std dev = 1.340, 25.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=2 */
%   | | else return -0.0689311057647189;  // std dev = 0.004, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.566162
   AUC PR    = 0.509258
   CLL	      = -0.705438
   Precision = 0.540816 at threshold = 0.5
   Recall    = 0.021757
   F1        = 0.041831


Total learning time: 46.849873542785645 seconds
Total inference time: 5.218 seconds
AUC ROC: 0.566162


Results scoring model
   AUC ROC   = 0.595438
   AUC PR    = 0.279779
   CLL	      = -0.513546
   Precision = 0.592593 at threshold = 0.5
   Recall    = 0.027539
   F1        = 0.052632


Total scoring time: 1.622 seconds
Refined model CLL: -0.513546


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.564335
   AUC PR    = 0.511626
   CLL	      = -0.706177
   Precision = 0.585366 at threshold = 0.5
   Recall    = 0.039409
   F1        = 0.073846


Total learning time: 92.29795363616942 seconds
Total inference time: 4.934 seconds
AUC ROC: 0.564335
Total revision time: 92.29795363616942
Best scored revision CLL: -0.510477


Dataset: 11_yeast_cora, Fold: 3, Type: Transfer (trRDN-B), Time: 00:29:28
{'AUC ROC': 0.564335, 'AUC PR': 0.511626, 'CLL': -0.706177, 'Precision': [0.585366, 0.5], 'Recall': 0.039409, 'F1': 0.073846, 'Learning time': 92.29795363616942, 'Inference time': 4.934, 'parameter': {'AUC ROC': 0.564335, 'AUC PR': 0.511626, 'CLL': -0.706177, 'Precision': [0.585366, 0.5], 'Recall': 0.039409, 'F1': 0.073846, 'Learning time': 42.31608009338379, 'Inference time': 4.934}}


Starting fold 4

Target train facts examples: 8129
Target train pos examples: 747
Target train neg examples: 1068

Target test facts examples: 34429
Target test pos  examples: 2270
Target test neg examples: 3954

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.27854694504975613;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.2867203636709409;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.44905802600860323;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.44905802600860323;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.5724346493852266;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.1914822684328457;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.05814893509951237;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.05814893509951237;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.2411503606196619;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.24811816884741328;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.3851926776601658;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.3851926776601658;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.48767788391726297;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.16653882456488167;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.05092203251355405;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.05092203251355405;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.20289930723994204;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.20848477447886868;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.31518052304212246;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.31518052304212246;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.3912569620992536;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.1420942428155646;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.04434629760466855;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.04434629760466855;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.7460022840154411;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.25399771598455895;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.546002284015441;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.16413830416657968;  // std dev = 0.493, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.2046917632962252;  // std dev = 3.500, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.26072578583467215;  // std dev = 2.600, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(B, M) )
%   | | then return 0.11914890490746433;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.03842866223690456;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.03842866223690456;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.1334874868704699;  // std dev = 0.493, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.12955478951205684;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.18715399206068548;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.20056760106043933;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.23624775363596132;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.0984134027840187;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.033154945921885746;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.033154945921885746;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.6685928476187613;  // std dev = 0.128, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.3143678211835305;  // std dev = 1.05e-08, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.46814299923990194;  // std dev = 0.878, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.10331080762390063;  // std dev = 0.492, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.11917924909742508;  // std dev = 3.492, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.15804658762284374;  // std dev = 2.598, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(B, M) )
%   | | then return 0.08026654944252247;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.028495105925721097;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.028495105925721097;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.08218170092308404;  // std dev = 0.491, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.07497113478356776;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.11177440288115897;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.11271096325055793;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.138281949081077;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.06479591611329234;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.024408230135271918;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.024408230135271918;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.06357834140850971;  // std dev = 0.491, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.05765323172045874;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.08384339714977167;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.08454739874366925;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.10491410624486304;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.05187916934404051;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.02084688910874009;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.02084688910874009;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, A) )
%   | then if ( samebib(E, F), venue(F, B) )
%   | | then return 0.47013575947562014;  // std dev = 0.128, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.26700782530869765;  // std dev = 0.091, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0.3189560346251864;  // std dev = 0.878, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.047353768034028895;  // std dev = 0.492, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.05237895364984623;  // std dev = 3.490, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.06749508752800656;  // std dev = 2.598, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, M), haswordvenue(A, M) )
%   | | | then return 0.04126932998424623;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.021464375245302116;  // std dev = 2.960, 54.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=11 */
%   | | else return 0.017760671541598414;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.037325278352136115;  // std dev = 0.491, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.03163526160177962;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.04665255708113027;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.04987980465589372;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.06473139086357525;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.03266374873483021;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.015261863577451308;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.015098879183171418;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */


Results
   AUC ROC   = 0.572805
   AUC PR    = 0.435564
   CLL	      = -0.640237
   Precision = 0.592105 at threshold = 0.5
   Recall    = 0.079295
   F1        = 0.13986


Total learning time: 90.73057675361633 seconds
Total inference time: 7.479 seconds
AUC ROC: 0.572805


Results scoring model
   AUC ROC   = 0.556785
   AUC PR    = 0.478373
   CLL	      = -0.66472
   Precision = 0.704225 at threshold = 0.5
   Recall    = 0.066934
   F1        = 0.122249


Total scoring time: 1.32 seconds
Parameter learned model CLL: -0.66472


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(B, G)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)'}, {'true,true': [0.494, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(B, G)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)'}, {'true,true': [0.494, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(A, G)', 'true,false,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)'}, {'true,true': [0.494, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, A)', 'true,true,true': 'samebib(F, G), venue(G, B)', 'true,false': 'haswordtitle(H, C)', 'true,false,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false,true': 'haswordtitle(L, M), haswordvenue(B, M)'}, {'true,true,true,true': [0.0, 0, 8], 'true,true,true,false': [0.0, 7, 0], 'true,true,false': [0.894, 1, 4], 'true,false,true': [0.493, 924, 664], 'true,false,false,true': [3.5, 25, 25], 'true,false,false,false': [2.6, 11, 18], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(A, G)', 'true,false,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)'}, {'true,true': [0.493, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, B)', 'true,true,true': 'samebib(F, G), venue(G, A)', 'true,false': 'haswordtitle(H, C)', 'true,false,false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false,true': 'haswordtitle(L, M), haswordvenue(B, M)'}, {'true,true,true,true': [0.128, 0, 8], 'true,true,true,false': [1.05e-08, 7, 0], 'true,true,false': [0.878, 1, 4], 'true,false,true': [0.492, 924, 664], 'true,false,false,true': [3.492, 25, 25], 'true,false,false,false': [2.598, 11, 18], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(A, G)', 'true,false,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)'}, {'true,true': [0.491, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(A, G)', 'true,false,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)'}, {'true,true': [0.491, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(B, C), haswordauthor(D, C)', 'true': 'author(E, D), venue(E, A)', 'true,true': 'samebib(E, F), venue(F, B)', 'false': 'haswordvenue(A, G), haswordvenue(B, G)', 'false,true': 'haswordtitle(H, G)', 'false,true,false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false,false,true': 'haswordtitle(L, M), haswordvenue(A, M)'}, {'true,true,true': [0.128, 0, 8], 'true,true,false': [0.091, 8, 0], 'true,false': [0.878, 1, 4], 'false,true,true': [0.492, 924, 664], 'false,true,false,true': [3.49, 25, 25], 'false,true,false,false': [2.598, 11, 18], 'false,false,true,true': [2.0, 12, 6], 'false,false,true,false': [2.96, 43, 11], 'false,false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(B, G)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(A, L)'}, {'true,true': [0.491, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}]]
[{'': [0.24455361249545102, 0.17089843750000108], 'true': [0.24366352318011741, 0.24803717352988336], 'true,false': [0.25000000000000133, 0.2354340071343634], 'true,false,true': [0.24489795918367302, 0.2417355371900822], 'true,false,false': [0.2417355371900822, 0.20408163265306106], 'false': [0.17864514918371124, 0.15999999999999948], 'false,true': [0.22222222222222232, 0.15999999999999948]}, {'': [0.24423965838627756, 0.17036542604714272], 'true': [0.24366352318012574, 0.2455497403386633], 'true,false': [0.24813620683257936, 0.23456996391329935], 'true,false,true': [0.244897959183673, 0.2417355371900833], 'true,false,false': [0.2417355371900833, 0.20408163265306115], 'false': [0.177825777852918, 0.1600000000000007], 'false,true': [0.22222222222222207, 0.1600000000000007]}, {'': [0.2439315722131505, 0.16990467702453835], 'true': [0.2436635231801326, 0.24310195846820273], 'true,false': [0.24631150685892023, 0.23370646651736585], 'true,false,true': [0.24489795918367316, 0.24173553719008264], 'true,false,false': [0.24173553719008264, 0.20408163265306115], 'false': [0.1771174918718374, 0.15999999999999953], 'false,true': [0.22222222222222218, 0.15999999999999953]}, {'': [0.24371075047936072, 0.16953742675793848], 'true': [0.24000000000000005, 0.24337555147781978], 'true,false': [0.24329828880328458, 0.2413696703282902], 'true,false,false': [0.24498343086187796, 0.23315182613521263], 'true,true': [0.24888888888888885, 0.16], 'true,true,true': [-1.1102230246251565e-16, -2.3790493384824782e-17], 'false': [0.17655293676131073, 0.15999999999999967], 'false,true': [0.2222222222222222, 0.15999999999999967]}, {'': [0.2425515392051815, 0.16926465814576508], 'true': [0.24255720339999234, 0.24080750964214293], 'true,false': [0.24432396693476988, 0.2328797829276663], 'true,false,true': [0.24489795918367321, 0.24173553719008248], 'true,false,false': [0.24173553719008273, 0.20408163265306126], 'false': [0.17613362348097328, 0.15999999999999995], 'false,true': [0.22222222222222218, 0.15999999999999995]}, {'': [0.24243916528391476, 0.16907391107668152], 'true': [0.23223582958227157, 0.24222014815632437], 'true,false': [0.24227960505944024, 0.2401598382928272], 'true,false,false': [0.24389474847608505, 0.23276421772113787], 'true,true': [0.2415632821223321, 0.1542278137784186], 'true,true,true': [0.002032371653656384, 1.586032892321652e-17], 'false': [0.17584039773694396, 0.1599999999999999], 'false,true': [0.22222222222222215, 0.1599999999999999]}, {'': [0.24131293450624144, 0.168947125674667], 'true': [0.24136252684121257, 0.23995366601618218], 'true,false': [0.24384023751220585, 0.23276639828128556], 'true,false,true': [0.24489795918367332, 0.24173553719008264], 'true,false,false': [0.24173553719008253, 0.20408163265306123], 'false': [0.17564549700260335, 0.16000000000000006], 'false,true': [0.22222222222222227, 0.16000000000000006]}, {'': [0.24126008115906325, 0.16886637846587366], 'true': [0.24132627913834218, 0.23975044244271346], 'true,false': [0.24367550536864216, 0.23272262043175715], 'true,false,true': [0.2448979591836736, 0.24173553719008264], 'true,false,false': [0.24173553719008264, 0.20408163265306126], 'false': [0.1755213684354357, 0.16000000000000014], 'false,true': [0.2222222222222222, 0.16000000000000014]}, {'': [0.14992119733389092, 0.2370504172523366], 'false': [0.2421275897689852, 0.16981803278169225], 'false,true': [0.24224568473535876, 0.23964721774660294], 'false,true,false': [0.2435936546116938, 0.2326983975820141], 'false,false': [0.17728547844991824, 0.16000000000000014], 'false,false,true': [0.22222222222222213, 0.16220850480109753], 'true': [0.13737920018236185, 0.15404849410063848], 'true,true': [0.002041539776349438, 0.0010265282940369325]}, {'': [0.24061245991577448, 0.16867497066035092], 'true': [0.24065905024904116, 0.2396238025101679], 'true,false': [0.24356206142838327, 0.23268705336055687], 'true,false,true': [0.2448979591836736, 0.24173553719008262], 'true,false,false': [0.24173553719008264, 0.2040816326530612], 'false': [0.175202383803928, 0.16000000000000011], 'false,true': [0.22222222222222202, 0.15973940372108877]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
3;true,true;author(F, E), venue(F, A).;true;true
3;true,true,true;samebib(F, G), venue(G, B).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordvenue(A, D), haswordauthor(E, D).;true;true
5;true,true;author(F, E), venue(F, B).;true;true
5;true,true,true;samebib(F, G), venue(G, A).;true;true
8;;samevenue(A, B) :- haswordvenue(B, C), haswordauthor(D, C).;true;true
8;true;author(E, D), venue(E, A).;true;true
8;true,true;samebib(E, F), venue(F, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.27854694504975613;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.2867203636709409;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.44905802600860323;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.44905802600860323;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.5724346493852266;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.1914822684328457;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.05814893509951237;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.05814893509951237;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.2411503606196619;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.24811816884741328;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.3851926776601658;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.3851926776601658;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.48767788391726297;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.16653882456488167;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.05092203251355405;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.05092203251355405;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.20289930723994204;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.20848477447886868;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.31518052304212246;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.31518052304212246;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.3912569620992536;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.1420942428155646;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.04434629760466855;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.04434629760466855;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.16640029396569495;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.17062637354018492;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.24804771389482108;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.24804771389482108;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.3005711547884894;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.11914890490746433;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.03842866223690456;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.03842866223690456;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.13360339271793026;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.13664585375352234;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.19020231164899937;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.19020231164899937;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.22629823971521876;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.0984134027840187;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.033154945921885746;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.033154945921885746;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.10551742939082928;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.10762034996184403;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.14379027326522745;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.14379027326522745;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.16984358676510128;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.08026654944252247;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.028495105925721097;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.028495105925721097;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.08232251291348108;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.08372807955323855;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.10803450809035726;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.10803450809035726;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.12813320688246752;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.06479591611329234;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.024408230135271918;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.024408230135271918;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, A) )
%   | then if ( samebib(E, F), venue(F, B) )
%   | | then return 0.643264127386356;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.33453802739834604;  // std dev = 0.059, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0.44326412738635596;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.06140014753749459;  // std dev = 0.493, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.07181637161845017;  // std dev = 3.490, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.08499200024019614;  // std dev = 2.598, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, M), haswordvenue(A, M) )
%   | | | then return 0.05187916934404051;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.02455059281244379;  // std dev = 2.960, 54.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=11 */
%   | | else return 0.02084688910874009;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.61124418884727;  // std dev = 0.133, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.37094623184089076;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.4105447777609553;  // std dev = 0.877, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.046711351045588184;  // std dev = 0.492, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.053086186474172764;  // std dev = 3.490, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.06659430327010746;  // std dev = 2.598, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(A, M) )
%   | | then return 0.04126932998424623;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.01807526647996113;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.017760671541598414;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, A) )
%   | then if ( samebib(E, F), venue(F, B) )
%   | | then return 0.45800610807893205;  // std dev = 0.127, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.2741574406111757;  // std dev = 0.052, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0.3067643049930999;  // std dev = 0.878, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.03579881225279799;  // std dev = 0.492, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.04019142960107476;  // std dev = 3.490, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.05041066263699269;  // std dev = 2.598, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, M), haswordvenue(A, M) )
%   | | | then return 0.03266374873483021;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.01819620731040678;  // std dev = 2.960, 54.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=11 */
%   | | else return 0.015098879183171418;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */


Results
   AUC ROC   = 0.572884
   AUC PR    = 0.435283
   CLL	      = -0.640536
   Precision = 0.592105 at threshold = 0.5
   Recall    = 0.079295
   F1        = 0.13986


Total learning time: 86.89601969718933 seconds
Total inference time: 7.379 seconds
AUC ROC: 0.572884


Results scoring model
   AUC ROC   = 0.556785
   AUC PR    = 0.478373
   CLL	      = -0.664711
   Precision = 0.704225 at threshold = 0.5
   Recall    = 0.066934
   F1        = 0.122249


Total scoring time: 1.2 seconds
Refined model CLL: -0.664711


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.572884
   AUC PR    = 0.435283
   CLL	      = -0.640536
   Precision = 0.592105 at threshold = 0.5
   Recall    = 0.079295
   F1        = 0.13986


Total learning time: 180.14659645080565 seconds
Total inference time: 7.379 seconds
AUC ROC: 0.572884
Total revision time: 180.14659645080565
Best scored revision CLL: -0.664711


Dataset: 11_yeast_cora, Fold: 4, Type: Transfer (trRDN-B), Time: 00:32:43
{'AUC ROC': 0.572884, 'AUC PR': 0.435283, 'CLL': -0.640536, 'Precision': [0.592105, 0.5], 'Recall': 0.079295, 'F1': 0.13986, 'Learning time': 180.14659645080565, 'Inference time': 7.379, 'parameter': {'AUC ROC': 0.572805, 'AUC PR': 0.435564, 'CLL': -0.640237, 'Precision': [0.592105, 0.5], 'Recall': 0.079295, 'F1': 0.13986, 'Learning time': 90.73057675361633, 'Inference time': 7.479}}


Starting fold 5

Target train facts examples: 8644
Target train pos examples: 550
Target train neg examples: 500

Target test facts examples: 33914
Target test pos  examples: 2467
Target test neg examples: 4522

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.443242102801371;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.7291166770349955;  // std dev = 0.335, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, B) )
%   | | then if ( samebib(G, H), venue(H, A) )
%   | | | then return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.13087620782678508;  // std dev = 0.445, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.17522210583121967;  // std dev = 2.980, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.04458961306561406;  // std dev = 2.992, 59.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return 0.05814893509951237;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.3803254334818479;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.6157326050686436;  // std dev = 0.335, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, A) )
%   | | then if ( samebib(G, H), venue(H, B) )
%   | | | then return 0.6397480032138977;  // std dev = 0.899, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.15715819152444083;  // std dev = 0.016, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(I, F), venue(I, B) )
%   | | | then return -0.15223232334423262;  // std dev = 0.008, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.1276404832756815;  // std dev = 2.890, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then if ( haswordtitle(L, J) )
%   | | | then return 0.03800959748909183;  // std dev = 0.806, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.15404125523550585;  // std dev = 2.947, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.044790460982400505;  // std dev = 0.395, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.6805851247859591;  // std dev = 0.056, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.2449182844345499;  // std dev = 2.596, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.047462026339214695;  // std dev = 1.980, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.3226813064206765;  // std dev = 0.491, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.47549952672721435;  // std dev = 0.343, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, B) )
%   | | then if ( samebib(K, L), venue(L, A) )
%   | | | then return 0.5341575703796516;  // std dev = 0.901, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.1372323099766529;  // std dev = 0.014, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.09354097393658205;  // std dev = 0.441, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.06245934781142713;  // std dev = 0.413, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.5216077804329589;  // std dev = 0.063, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.1792580649666844;  // std dev = 2.582, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.12537094389750977;  // std dev = 1.924, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.25659510724314716;  // std dev = 0.489, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.38767664735472884;  // std dev = 0.342, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, A) )
%   | | then if ( samebib(K, L), venue(L, B) )
%   | | | then return 0.5207471085105743;  // std dev = 0.900, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.1458068281990453;  // std dev = 0.015, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.0811386778160656;  // std dev = 0.436, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.050872739617542975;  // std dev = 0.410, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return -0.3834526280204868;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.37578558822709834;  // std dev = 1.896, 24.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=19 */
%   | | else return -0.021880302675246086;  // std dev = 0.397, 29.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=11 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.1970138272768638;  // std dev = 0.489, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.29185061813702196;  // std dev = 0.342, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, A) )
%   | | then return 0.13837057279684256;  // std dev = 0.391, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.06835126295218992;  // std dev = 0.436, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | then return 0.09258878748785106;  // std dev = 0.443, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.023701363690578865;  // std dev = 0.395, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.14107948564445114;  // std dev = 0.484, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else return 0.28976337556265297;  // std dev = 0.291, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, A) )
%   | | then if ( samebib(H, I), venue(I, B) )
%   | | | then return 0.3718391692504635;  // std dev = 0.902, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14488344618728638;  // std dev = 0.015, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.05709739267460268;  // std dev = 0.436, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | | then return -0.1762134535036548;  // std dev = 0.035, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.04620146263817655;  // std dev = 3.008, 54.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=12 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.0917547600568275;  // std dev = 4.053, 83.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=24 */
%   | | | else return -0.19374932824409585;  // std dev = 0.073, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.31208448695295654;  // std dev = 0.133, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.057741842156910535;  // std dev = 2.572, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.1835280777924948;  // std dev = 1.889, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.11550021547164863;  // std dev = 0.486, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.18489343370771197;  // std dev = 0.343, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, B) )
%   | | then return 0.10932909116659402;  // std dev = 0.384, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.044990699396161904;  // std dev = 0.429, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.05167320676554776;  // std dev = 0.423, 95.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=24 */
%   | | else return -0.003979597847180511;  // std dev = 0.379, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(F, D) )
%   | | then if ( author(G, F), title(G, E) )
%   | | | then return 0.26365434691027495;  // std dev = 1.869, 20.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=15 */
%   | | | else return -0.23412320638028764;  // std dev = 1.206, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | else return 0.07924563435866701;  // std dev = 0.484, 783.000 (wgt'ed) examples reached here.  /* #neg=323 #pos=460 */
%   | else return 0.20599168244697338;  // std dev = 0.289, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, A) )
%   | | then return -0.00659021661846429;  // std dev = 0.326, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( author(K, I), venue(K, B) )
%   | | | then return 0.048059755790430814;  // std dev = 0.909, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.056883997763611416;  // std dev = 2.805, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return -0.0034332973625346977;  // std dev = 0.375, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | else return 0.04400969603844809;  // std dev = 0.425, 94.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=24 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.05400986718987882;  // std dev = 0.397, 39.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=21 */
%   | else if ( author(F, D), venue(F, B) )
%   | | then return -0.22467108879563302;  // std dev = 0.313, 24.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=4 */
%   | | else return 0.07682297218357884;  // std dev = 0.431, 52.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=21 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then if ( author(I, H), venue(I, B) )
%   | | then if ( samebib(I, J), venue(J, A) )
%   | | | then return 0.3957131319085082;  // std dev = 1.254, 20.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=18 */
%   | | | else return -0.38608717461521735;  // std dev = 0.560, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( author(K, H), venue(K, A) )
%   | | | then return -0.29886128446197957;  // std dev = 0.797, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   | | | else return 0.08088202392144524;  // std dev = 2.881, 41.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=15 */
%   | else if ( haswordvenue(A, L), haswordvenue(B, L) )
%   | | then return 0.07731818313125983;  // std dev = 0.484, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   | | else return 0.008548642999671407;  // std dev = 0.392, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordvenue(B, C) )
%   | then return 0.25111660344254394;  // std dev = 0.066, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( haswordtitle(E, C) )
%   | | then return 0.017600628766924305;  // std dev = 0.359, 34.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=16 */
%   | | else if ( author(F, D), venue(F, A) )
%   | | | then return -0.22170428215404342;  // std dev = 1.156, 22.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
%   | | | else return 0.05473184382488351;  // std dev = 3.054, 49.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=18 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.04973207829971538;  // std dev = 0.485, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.10432435068393643;  // std dev = 0.340, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | | then return -0.17030509686010706;  // std dev = 0.116, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.06001088381024846;  // std dev = 4.034, 83.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=24 */
%   | | else return -0.005735551919572212;  // std dev = 0.379, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */


Results
   AUC ROC   = 0.55656
   AUC PR    = 0.405194
   CLL	      = -0.707199
   Precision = 0.375714 at threshold = 0.5
   Recall    = 0.933117
   F1        = 0.535723


Total learning time: 51.274616718292236 seconds
Total inference time: 12.243 seconds
AUC ROC: 0.55656


Results scoring model
   AUC ROC   = 0.695844
   AUC PR    = 0.696401
   CLL	      = -0.612491
   Precision = 0.636132 at threshold = 0.5
   Recall    = 0.909091
   F1        = 0.748503


Total scoring time: 1.225 seconds
Parameter learned model CLL: -0.612491


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'false': 'haswordvenue(A, E), haswordauthor(F, E)', 'false,true': 'author(G, F), venue(G, B)', 'false,true,true': 'samebib(G, H), venue(H, A)', 'false,false': 'haswordvenue(B, I), haswordauthor(J, I)', 'false,false,true': 'author(K, J), venue(K, B)', 'false,false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true': [0.493, 334, 471], 'true,false': [0.335, 4, 27], 'false,true,true,true': [0.894, 1, 4], 'false,true,true,false': [0.0, 5, 0], 'false,true,false': [0.445, 32, 12], 'false,false,true,true': [0.894, 4, 1], 'false,false,true,false': [2.98, 28, 13], 'false,false,false,true': [2.992, 48, 11], 'false,false,false,false': [2.966, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'false': 'haswordvenue(B, E), haswordauthor(F, E)', 'false,true': 'author(G, F), venue(G, A)', 'false,true,true': 'samebib(G, H), venue(H, B)', 'false,true,false': 'author(I, F), venue(I, B)', 'false,false': 'haswordvenue(A, J), haswordauthor(K, J)', 'false,false,true': 'haswordtitle(L, J)'}, {'true,true': [0.493, 334, 471], 'true,false': [0.335, 4, 27], 'false,true,true,true': [0.899, 1, 4], 'false,true,true,false': [0.016, 5, 0], 'false,true,false,true': [0.008, 3, 0], 'false,true,false,false': [2.89, 29, 12], 'false,false,true,true': [0.806, 4, 1], 'false,false,true,false': [2.947, 28, 13], 'false,false,false': [0.395, 92, 22]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordauthor(F, C)', 'true,true,false': 'haswordtitle(G, D)', 'true,false': 'haswordtitle(H, C)', 'false': 'haswordvenue(A, I), haswordauthor(J, I)', 'false,true': 'author(K, J), venue(K, B)', 'false,true,true': 'samebib(K, L), venue(L, A)'}, {'true,true,true': [0.056, 0, 10], 'true,true,false,true': [2.596, 13, 14], 'true,true,false,false': [1.98, 18, 6], 'true,false,true': [0.491, 304, 449], 'true,false,false': [0.343, 3, 19], 'false,true,true,true': [0.901, 1, 4], 'false,true,true,false': [0.014, 5, 0], 'false,true,false': [0.441, 32, 12], 'false,false': [0.413, 124, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordauthor(F, C)', 'true,true,false': 'haswordtitle(G, D)', 'true,false': 'haswordtitle(H, C)', 'false': 'haswordvenue(B, I), haswordauthor(J, I)', 'false,true': 'author(K, J), venue(K, A)', 'false,true,true': 'samebib(K, L), venue(L, B)'}, {'true,true,true': [0.063, 0, 10], 'true,true,false,true': [2.582, 13, 14], 'true,true,false,false': [1.924, 18, 6], 'true,false,true': [0.489, 304, 449], 'true,false,false': [0.342, 3, 19], 'false,true,true,true': [0.9, 1, 4], 'false,true,true,false': [0.015, 5, 0], 'false,true,false': [0.436, 32, 12], 'false,false': [0.41, 124, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordtitle(F, D)', 'true,true,true': 'author(G, E), venue(G, A)', 'true,false': 'haswordtitle(H, C)', 'false': 'haswordvenue(B, I), haswordauthor(J, I)', 'false,true': 'author(K, J), venue(K, A)', 'false,false': 'haswordvenue(A, L), haswordauthor(M, L)'}, {'true,true,true,true': [0.0, 8, 0], 'true,true,true,false': [1.896, 5, 19], 'true,true,false': [0.397, 18, 11], 'true,false,true': [0.489, 304, 449], 'true,false,false': [0.342, 3, 19], 'false,true,true': [0.391, 6, 4], 'false,true,false': [0.436, 32, 12], 'false,false,true': [0.443, 32, 14], 'false,false,false': [0.395, 92, 22]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordtitle(E, D)', 'false': 'haswordvenue(B, F), haswordauthor(G, F)', 'false,true': 'author(H, G), venue(H, A)', 'false,true,true': 'samebib(H, I), venue(I, B)', 'false,false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,false,true': 'haswordtitle(K, L), haswordvenue(B, L)', 'false,false,false': 'haswordvenue(B, M), haswordtitle(N, M)'}, {'true,true': [0.484, 336, 479], 'true,false': [0.291, 2, 19], 'false,true,true,true': [0.902, 1, 4], 'false,true,true,false': [0.015, 5, 0], 'false,true,false': [0.436, 32, 12], 'false,false,true,true': [0.035, 12, 0], 'false,false,true,false': [3.008, 42, 12], 'false,false,false,true': [4.053, 59, 24], 'false,false,false,false': [0.073, 11, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordauthor(F, C)', 'true,true,false': 'haswordtitle(G, D)', 'true,false': 'haswordtitle(H, C)', 'false': 'haswordvenue(A, I), haswordauthor(J, I)', 'false,true': 'author(K, J), venue(K, B)', 'false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true,true': [0.133, 0, 10], 'true,true,false,true': [2.572, 13, 14], 'true,true,false,false': [1.889, 18, 6], 'true,false,true': [0.486, 304, 449], 'true,false,false': [0.343, 3, 19], 'false,true,true': [0.384, 6, 4], 'false,true,false': [0.429, 32, 12], 'false,false,true': [0.423, 71, 24], 'false,false,false': [0.379, 53, 12]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordtitle(E, D)', 'true,true': 'haswordauthor(F, D)', 'true,true,true': 'author(G, F), title(G, E)', 'false': 'haswordvenue(A, H), haswordauthor(I, H)', 'false,true': 'author(J, I), venue(J, A)', 'false,true,false': 'author(K, I), venue(K, B)', 'false,false': 'haswordvenue(B, L), haswordtitle(M, L)'}, {'true,true,true,true': [1.869, 5, 15], 'true,true,true,false': [1.206, 8, 4], 'true,true,false': [0.484, 323, 460], 'true,false': [0.289, 2, 19], 'false,true,true': [0.326, 6, 2], 'false,true,false,true': [0.909, 3, 2], 'false,true,false,false': [2.805, 29, 12], 'false,false,true': [0.375, 54, 12], 'false,false,false': [0.425, 70, 24]}], ['samevenue(A, B)', {'': 'haswordvenue(B, C), haswordauthor(D, C)', 'true': 'haswordtitle(E, C)', 'true,false': 'author(F, D), venue(F, B)', 'false': 'haswordvenue(A, G), haswordauthor(H, G)', 'false,true': 'author(I, H), venue(I, B)', 'false,true,true': 'samebib(I, J), venue(J, A)', 'false,true,false': 'author(K, H), venue(K, A)', 'false,false': 'haswordvenue(A, L), haswordvenue(B, L)'}, {'true,true': [0.397, 18, 21], 'true,false,true': [0.313, 20, 4], 'true,false,false': [0.431, 31, 21], 'false,true,true,true': [1.254, 2, 18], 'false,true,true,false': [0.56, 18, 0], 'false,true,false,true': [0.797, 15, 1], 'false,true,false,false': [2.881, 26, 15], 'false,false,true': [0.484, 278, 448], 'false,false,false': [0.392, 92, 22]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordauthor(D, C)', 'true': 'haswordvenue(B, C)', 'true,false': 'haswordtitle(E, C)', 'true,false,false': 'author(F, D), venue(F, A)', 'false': 'haswordvenue(A, G), haswordvenue(B, G)', 'false,true': 'haswordtitle(H, G)', 'false,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,false,true': 'haswordtitle(J, K), haswordvenue(B, K)'}, {'true,true': [0.066, 0, 10], 'true,false,true': [0.359, 18, 16], 'true,false,false,true': [1.156, 20, 2], 'true,false,false,false': [3.054, 31, 18], 'false,true,true': [0.485, 304, 449], 'false,true,false': [0.34, 3, 19], 'false,false,true,true': [0.116, 12, 0], 'false,false,true,false': [4.034, 59, 24], 'false,false,false': [0.379, 53, 12]}]]
[{'': [0.24084270048762138, 0.18394619617433927], 'true': [0.2427591528104568, 0.11238293444328941], 'false': [0.20850480109739317, 0.17437500000000122], 'false,true': [0.23999999999999985, 0.19834710743801603], 'false,true,true': [0.15999999999999986, -2.7755575615628915e-18], 'false,false': [0.21172022684309966, 0.15574022776238935], 'false,false,true': [0.16000000000000003, 0.2165377751338484], 'false,false,false': [0.15168055156564153, 0.15999999999999948]}, {'': [0.23990334821509715, 0.18089461947223096], 'true': [0.24275915281046145, 0.11238293444328855], 'false': [0.20577225212445388, 0.17157281722592593], 'false,true': [0.2396663510462111, 0.1948062662047146], 'false,true,true': [0.16175462426720671, 4.833621904624108e-05], 'false,true,false': [1.98999217551112e-05, 0.20371832797824999], 'false,false': [0.20418295894968494, 0.15572936782372818], 'false,false,true': [0.12982257968417046, 0.21178789075413634]}, {'': [0.23897284752961936, 0.1774308796184362], 'true': [0.23816220413684797, 0.2378834681421179], 'true,true': [0.0031484720128158727, 0.23037050068870057], 'true,false': [0.2407298649580488, 0.11776859504132223], 'true,true,false': [0.24965706447187935, 0.16341569201183295], 'false': [0.1958563979761145, 0.1705684514300416], 'false,true': [0.1938487049550049, 0.19427407074207184], 'false,true,true': [0.16227576686033968, 3.945732724362494e-05]}, {'': [0.23642904608101803, 0.17500010977273278], 'true': [0.22228318412191325, 0.23601279887198162], 'true,false': [0.2390037512510435, 0.1169460435260032], 'true,true': [0.004027855333989594, 0.22640475593211415], 'true,true,false': [0.246882266123149, 0.1542387630040101], 'false': [0.19242432694581849, 0.16848968120255886], 'false,true': [0.1921744572776864, 0.19038734145429484], 'false,true,true': [0.1621550052351603, 4.6834048666810625e-05]}, {'': [0.2339552560356685, 0.17256027185912678], 'true': [0.2012885121999523, 0.23560219271652627], 'true,false': [0.2388142012152987, 0.11692519895422211], 'true,true': [0.22040803077313084, 0.15752658425619118], 'true,true,true': [0.0, 0.14976670711147083], 'false': [0.18389913873966557, 0.1683726402053965], 'false,true': [0.15257491614359805, 0.19011037213671206], 'false,false': [0.19632765324149115, 0.15572822254315957]}, {'': [0.23138402038457112, 0.17180577579236317], 'true': [0.23460948785972316, 0.08465358133355572], 'false': [0.18262725576802985, 0.16791284674357693], 'false,true': [0.14810677416662776, 0.18988416101491667], 'false,false': [0.14445006669422977, 0.18324619217295587], 'false,false,false': [0.1979288311592178, 0.00048512934763835576], 'false,true,true': [0.16266607690385848, 4.634077698276451e-05], 'false,false,true': [0.00010159865437476175, 0.16753325041416942]}, {'': [0.2310536789693949, 0.16852225354895814], 'true': [0.19789220600290336, 0.23273278105927966], 'true,false': [0.23596773210307748, 0.11733050644437527], 'true,true': [0.0017669821209325808, 0.21416178028370164], 'true,true,false': [0.2449858113863229, 0.14866706479610367], 'false': [0.17822980532344873, 0.16505036401474837], 'false,true': [0.14764815697206055, 0.1844136190866152], 'false,false': [0.17861398557102, 0.14338762635237853]}, {'': [0.22970041176169478, 0.16798991411334732], 'true': [0.23306573533018557, 0.08341086563406391], 'true,true': [0.2127582792210422, 0.2338954695135198], 'true,true,true': [0.17474422300800269, 0.12125098172614657], 'false': [0.17724488310732986, 0.16474173278408408], 'false,true': [0.10603790643832418, 0.18904972255413466], 'false,true,false': [0.1652445545800994, 0.19194432798813035], 'false,false': [0.140702440736572, 0.18069191412780666]}, {'': [0.17194128284889676, 0.22149800571999764], 'false': [0.19295115282124106, 0.22418123477437474], 'false,false': [0.23456494906077816, 0.15396594719661857], 'false,true': [0.20200816084366716, 0.18586869372877357], 'false,true,true': [0.07860364836714531, 0.017433907248848177], 'false,true,false': [0.03972926821131516, 0.20242012249217017], 'true': [0.1578557919316474, 0.1773919420860509], 'true,false': [0.09785898602521738, 0.18539461748721503]}, {'': [0.14738868317359868, 0.2201403076969812], 'false': [0.23150882198229925, 0.16404389562016072], 'false,true': [0.2348015656889901, 0.11591147143280843], 'false,false': [0.17728574676493392, 0.14389271316670058], 'false,false,true': [0.0011137589579253658, 0.19605591758949326], 'true': [0.004396055247882902, 0.15483914312893912], 'true,false': [0.1288865363365013, 0.16650468407237395], 'true,false,false': [0.06069730321000782, 0.1903315528520725]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;false;haswordvenue(A, E), haswordauthor(F, E).;true;true
0;false,true;author(G, F), venue(G, B).;true;true
0;false,true,true;samebib(G, H), venue(H, A).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;false;haswordvenue(B, E), haswordauthor(F, E).;true;true
1;false,true;author(G, F), venue(G, A).;true;true
1;false,true,true;samebib(G, H), venue(H, B).;true;true
1;false,true,false;author(I, F), venue(I, B).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;false;haswordvenue(A, I), haswordauthor(J, I).;true;true
2;false,true;author(K, J), venue(K, B).;true;true
2;false,true,true;samebib(K, L), venue(L, A).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;false;haswordvenue(B, I), haswordauthor(J, I).;true;true
3;false,true;author(K, J), venue(K, A).;true;true
3;false,true,true;samebib(K, L), venue(L, B).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
4;true,true;haswordtitle(F, D).;true;true
4;true,true,true;author(G, E), venue(G, A).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;false;haswordvenue(B, F), haswordauthor(G, F).;true;true
5;false,true;author(H, G), venue(H, A).;true;true
5;false,true,true;samebib(H, I), venue(I, B).;true;true
5;false,false;haswordvenue(A, J), haswordtitle(K, J).;true;true
5;false,false,true;haswordtitle(K, L), haswordvenue(B, L).;true;true
5;false,false,false;haswordvenue(B, M), haswordtitle(N, M).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordvenue(A, D), haswordauthor(E, D).;true;true
6;true,true;haswordauthor(F, C).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordauthor(D, C).;true;true
9;false;haswordvenue(A, G), haswordvenue(B, G).;true;true
9;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;true
9;false,false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.443242102801371;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.7291166770349955;  // std dev = 0.335, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, B) )
%   | | then if ( samebib(G, H), venue(H, A) )
%   | | | then return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.13087620782678508;  // std dev = 0.445, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0803711573217346;  // std dev = 3.055, 54.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=12 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.14730556160553568;  // std dev = 4.130, 83.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=24 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.3803254334818479;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.6157326050686436;  // std dev = 0.335, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, A) )
%   | | then if ( samebib(G, H), venue(H, B) )
%   | | | then return 0.6414609249567061;  // std dev = 0.897, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.1567738462969562;  // std dev = 0.009, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(I, F), venue(I, B) )
%   | | | then return -0.15412632984686866;  // std dev = 0.005, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.13700562470792105;  // std dev = 2.867, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then if ( haswordtitle(L, J) )
%   | | | then return 0.03800959748909183;  // std dev = 0.806, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.15404125523550585;  // std dev = 2.947, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.04098548220292873;  // std dev = 0.393, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.6805851247859591;  // std dev = 0.056, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.2449182844345499;  // std dev = 2.596, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.047462026339214695;  // std dev = 1.980, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.3226813064206765;  // std dev = 0.491, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.47549952672721435;  // std dev = 0.343, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, A) )
%   | | then if ( samebib(K, L), venue(L, B) )
%   | | | then return 0.5364788213061458;  // std dev = 0.898, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.1371475475266285;  // std dev = 0.008, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.10092682328232515;  // std dev = 0.436, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.06024348398564561;  // std dev = 0.412, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(F, D) )
%   | | then if ( author(G, F), venue(G, A) )
%   | | | then return -0.3248625391860014;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.44561445894475676;  // std dev = 1.946, 24.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=19 */
%   | | else return 0.24497500284946755;  // std dev = 0.490, 783.000 (wgt'ed) examples reached here.  /* #neg=323 #pos=460 */
%   | else return 0.42289861754592134;  // std dev = 0.287, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, B) )
%   | | then if ( samebib(J, K), venue(K, A) )
%   | | | then return 0.52020832220703;  // std dev = 0.899, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14580101637507112;  // std dev = 0.017, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(L, I), venue(L, A) )
%   | | | then return -0.19047634097188518;  // std dev = 0.003, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.10197302975334702;  // std dev = 2.861, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else return 0.050580308470135005;  // std dev = 0.408, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.4240470786886966;  // std dev = 0.060, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.12244819494845133;  // std dev = 2.581, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.18697998991771933;  // std dev = 1.912, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( haswordtitle(J, H) )
%   | | | then return 0.16207063735025418;  // std dev = 2.269, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   | | | else return -0.08966785287145354;  // std dev = 1.910, 23.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
%   | | else return 0.2132577234721185;  // std dev = 0.484, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | then if ( author(M, L), venue(M, A) )
%   | | then return 0.1387919700361117;  // std dev = 0.390, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.07679767038870022;  // std dev = 0.432, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.041035404054536165;  // std dev = 0.409, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.1402453103695168;  // std dev = 0.485, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.21248229011640082;  // std dev = 0.395, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else return 0.2862217977564224;  // std dev = 0.290, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | then if ( author(I, H), venue(I, B) )
%   | | then return 0.02756820124663917;  // std dev = 0.316, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0.08168046659800898;  // std dev = 0.439, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then if ( haswordtitle(L, J) )
%   | | | then return -0.0036048255450882916;  // std dev = 0.699, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.09626530004868392;  // std dev = 2.906, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return 0.004783887989871187;  // std dev = 2.969, 59.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return 0.024839906902313313;  // std dev = 2.955, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.2879749327231137;  // std dev = 0.062, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.05830063193744904;  // std dev = 2.580, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.18015451008580718;  // std dev = 1.888, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( haswordtitle(J, H) )
%   | | | then return 0.09102429406649246;  // std dev = 2.250, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   | | | else return -0.1089539035859166;  // std dev = 1.871, 23.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
%   | | else return 0.12579593319780225;  // std dev = 0.484, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | then if ( author(M, L), venue(M, A) )
%   | | then return 0.10331612746165031;  // std dev = 0.382, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.051414376994832;  // std dev = 0.431, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.02909492504726016;  // std dev = 0.408, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.07775427786945702;  // std dev = 0.483, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.14321067278146268;  // std dev = 0.404, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else return 0.22102737716003315;  // std dev = 0.288, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then if ( author(I, H), venue(I, B) )
%   | | then if ( samebib(I, J), venue(J, A) )
%   | | | then return 0.36709355312891845;  // std dev = 0.904, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.144937072717349;  // std dev = 0.033, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.04014354483580159;  // std dev = 0.434, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | then return 0.06177964980368402;  // std dev = 0.436, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return -2.9885993569772146E-4;  // std dev = 2.968, 59.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return 0.016915524633490202;  // std dev = 2.955, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.21375866513176273;  // std dev = 0.059, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(F, E), venue(F, A) )
%   | | | then return -0.008064284030728622;  // std dev = 2.788, 38.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=16 */
%   | | | else return -0.22695970585044173;  // std dev = 1.517, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(I, C) )
%   | | | then return -0.0552311718163802;  // std dev = 2.742, 44.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=16 */
%   | | | else return 0.2584420997943564;  // std dev = 0.890, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.07469999698932571;  // std dev = 0.484, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | then if ( author(L, K), venue(L, B) )
%   | | then return 0.07402414954202174;  // std dev = 0.350, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.032968116673678605;  // std dev = 0.434, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.019396906882699124;  // std dev = 0.406, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordvenue(B, C) )
%   | then return 0.18062841410750943;  // std dev = 0.051, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( author(E, D), venue(E, B) )
%   | | then if ( samebib(E, F), venue(F, A) )
%   | | | then return 0.4171518440977989;  // std dev = 1.323, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | | | else return -0.36602621193578744;  // std dev = 0.615, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else if ( author(G, D), venue(G, A) )
%   | | | then return -0.2886755621707274;  // std dev = 0.856, 18.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=1 */
%   | | | else return 0.06728465389345206;  // std dev = 3.018, 46.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=16 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then return 0.05510049585816545;  // std dev = 2.466, 30.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
%   | | | else return -0.13395812190725132;  // std dev = 1.444, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | | else return 0.05631451156453583;  // std dev = 0.484, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   | else return 0.016264364970785018;  // std dev = 0.405, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */


Results
   AUC ROC   = 0.561845
   AUC PR    = 0.409545
   CLL	      = -0.708069
   Precision = 0.377565 at threshold = 0.5
   Recall    = 0.92501
   F1        = 0.536247


Total learning time: 45.4378547668457 seconds
Total inference time: 11.557 seconds
AUC ROC: 0.561845


Results scoring model
   AUC ROC   = 0.684115
   AUC PR    = 0.683659
   CLL	      = -0.613431
   Precision = 0.63555 at threshold = 0.5
   Recall    = 0.903636
   F1        = 0.746246


Total scoring time: 1.191 seconds
Refined model CLL: -0.613431


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.55656
   AUC PR    = 0.405194
   CLL	      = -0.707199
   Precision = 0.375714 at threshold = 0.5
   Recall    = 0.933117
   F1        = 0.535723


Total learning time: 99.12847148513794 seconds
Total inference time: 12.243 seconds
AUC ROC: 0.55656
Total revision time: 99.12847148513794
Best scored revision CLL: -0.612491


Dataset: 11_yeast_cora, Fold: 5, Type: Transfer (trRDN-B), Time: 00:34:47
{'AUC ROC': 0.55656, 'AUC PR': 0.405194, 'CLL': -0.707199, 'Precision': [0.375714, 0.5], 'Recall': 0.933117, 'F1': 0.535723, 'Learning time': 99.12847148513794, 'Inference time': 12.243, 'parameter': {'AUC ROC': 0.55656, 'AUC PR': 0.405194, 'CLL': -0.707199, 'Precision': [0.375714, 0.5], 'Recall': 0.933117, 'F1': 0.535723, 'Learning time': 51.274616718292236, 'Inference time': 12.243}}


Starting fold 1

Target train facts examples: 7463
Target train pos examples: 368
Target train neg examples: 688

Target test facts examples: 35095
Target test pos  examples: 2649
Target test neg examples: 4334

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.23843062524035266;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.4581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.424815601766179;  // std dev = 2.714, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.004815601766179008;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.004815601766179008;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.20686012285620575;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.45935396641210174;  // std dev = 0.810, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.3927941835770488;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.36377731048015727;  // std dev = 2.715, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.004228390109386251;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.004228390109386251;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.1751801570305961;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.37391135762433364;  // std dev = 0.808, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.3332954282738762;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.29656660729920525;  // std dev = 2.715, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, A) )
%   | | then if ( samebib(K, L), venue(L, B) )
%   | | | then return 0.14974330653669568;  // std dev = 2.784, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return -0.1414965457075706;  // std dev = 0.042, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.11669340332070104;  // std dev = 0.028, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | then return 0.0037111125833978686;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.14514481334590568;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.30226819674070854;  // std dev = 0.801, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.25757142060968335;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.23416364840942572;  // std dev = 2.716, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, B) )
%   | | then if ( samebib(K, L), venue(L, A) )
%   | | | then return 0.15050635248187114;  // std dev = 2.779, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return -0.1414006812825585;  // std dev = 0.058, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.12198246998550877;  // std dev = 0.041, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return 0.003911681670084833;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.11804668707041945;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.22996069785741113;  // std dev = 0.800, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.2091993596289899;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.17839608712431893;  // std dev = 2.716, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.10655670760965545;  // std dev = 0.043, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.003413226901304564;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.00343356121135667;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.09457696812283496;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.1729067315611729;  // std dev = 0.799, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.15841913401005417;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.13530633009688048;  // std dev = 2.716, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then return -0.029351308144248855;  // std dev = 0.328, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, M), haswordvenue(B, M) )
%   | | | then return -0.09684402264328201;  // std dev = 0.040, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0030127853339829017;  // std dev = 2.996, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, N), haswordtitle(P, N) )
%   | | | then return 0.006857136682016995;  // std dev = 2.848, 67.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=10 */
%   | | | else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C) )
%   | | then return -0.10539005564974935;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.1298187501639186;  // std dev = 0.800, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.07595587115072004;  // std dev = 0.486, 847.000 (wgt'ed) examples reached here.  /* #neg=524 #pos=323 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.12029295572790369;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.1016756841429825;  // std dev = 2.716, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | then return -0.025565868446506053;  // std dev = 0.328, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | then return -0.029692030260580798;  // std dev = 0.328, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else if ( haswordvenue(B, N), haswordtitle(P, N) )
%   | | | then return -0.008369375918019336;  // std dev = 2.864, 79.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=10 */
%   | | | else return 0.0016990700158868949;  // std dev = 2.853, 71.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=10 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.05876995206281023;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else return 0.07985332980147705;  // std dev = 0.493, 38.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=22 */
%   else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | then return -0.08803602607950851;  // std dev = 0.037, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0028665176170810055;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then return 0.003908189679533501;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.07890014618330318;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04581813968556683;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.07372435397339898;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return 0.09682278665800807;  // std dev = 0.790, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.05396520635655484;  // std dev = 2.718, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, A) )
%   | | then if ( samebib(K, L), venue(L, B) )
%   | | | then return 0.13385234790153555;  // std dev = 2.766, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return -0.12507034899665426;  // std dev = 0.084, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.08851653271205341;  // std dev = 0.052, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | then return 0.0034304532069605997;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.07335325668885544;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.03554341140187517;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.07336792974435243;  // std dev = 0.790, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.05538799037964774;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.040514713954164956;  // std dev = 2.718, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.08058410668200414;  // std dev = 0.054, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.001067430745522818;  // std dev = 0.340, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.0030100213482697415;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.06852065574519554;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.557284
   AUC PR    = 0.428343
   CLL	      = -0.653899
   Precision = 0.637427 at threshold = 0.5
   Recall    = 0.041148
   F1        = 0.077305


Total learning time: 63.112481117248535 seconds
Total inference time: 7.499 seconds
AUC ROC: 0.557284


Results scoring model
   AUC ROC   = 0.593391
   AUC PR    = 0.420604
   CLL	      = -0.617527
   Precision = 0.578947 at threshold = 0.5
   Recall    = 0.059783
   F1        = 0.108374


Total scoring time: 1.016 seconds
Parameter learned model CLL: -0.617527


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)', 'false,false': 'haswordvenue(B, L), haswordtitle(M, L)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.816, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.714, 13, 17], 'false,true,true': [0.0, 12, 0], 'false,true,false': [0.354, 64, 11], 'false,false,true': [0.354, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)', 'false,false': 'haswordvenue(B, L), haswordtitle(M, L)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.81, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.715, 13, 17], 'false,true,true': [5.27e-09, 12, 0], 'false,true,false': [0.354, 64, 11], 'false,false,true': [0.354, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'title(K, J), venue(K, A)', 'false,true,true': 'samebib(K, L), venue(L, B)', 'false,false': 'haswordvenue(B, M), haswordtitle(N, M)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.808, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.715, 13, 17], 'false,true,true,true': [2.784, 27, 11], 'false,true,true,false': [0.042, 42, 0], 'false,true,false': [0.028, 7, 0], 'false,false,true': [0.354, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'title(K, J), venue(K, B)', 'false,true,true': 'samebib(K, L), venue(L, A)', 'false,false': 'haswordvenue(A, M), haswordtitle(N, M)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.801, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.716, 13, 17], 'false,true,true,true': [2.779, 27, 11], 'false,true,true,false': [0.058, 42, 0], 'false,true,false': [0.041, 7, 0], 'false,false,true': [0.346, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(A, K)', 'false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.8, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.716, 13, 17], 'false,true,true': [0.043, 12, 0], 'false,true,false': [0.346, 64, 11], 'false,false,true': [0.346, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordauthor(J, I)', 'false,false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false,false,true': 'haswordtitle(L, M), haswordvenue(B, M)', 'false,false,false': 'haswordvenue(B, N), haswordtitle(P, N)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.799, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.716, 13, 17], 'false,true': [0.328, 7, 1], 'false,false,true,true': [0.04, 12, 0], 'false,false,true,false': [2.996, 64, 11], 'false,false,false,true': [2.848, 57, 10], 'false,false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordtitle(F, C)', 'true,false': 'haswordtitle(G, C)', 'true,false,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordauthor(K, J)', 'false,false': 'haswordvenue(B, L), haswordauthor(M, L)', 'false,false,false': 'haswordvenue(B, N), haswordtitle(P, N)'}, {'true,true,true': [0.894, 4, 1], 'true,true,false': [0.8, 1, 2], 'true,false,true': [0.486, 524, 323], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.716, 13, 17], 'false,true': [0.328, 7, 1], 'false,false,true': [0.328, 7, 1], 'false,false,false,true': [2.864, 69, 10], 'false,false,false,false': [2.853, 61, 10]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'false': 'haswordvenue(A, E), haswordtitle(F, E)', 'false,true': 'haswordtitle(F, G), haswordvenue(B, G)', 'false,false': 'haswordvenue(B, H), haswordtitle(I, H)'}, {'true,true': [0.485, 528, 324], 'true,false': [0.493, 16, 22], 'false,true,true': [0.037, 12, 0], 'false,true,false': [0.346, 64, 11], 'false,false,true': [0.346, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordauthor(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'title(K, J), venue(K, A)', 'false,true,true': 'samebib(K, L), venue(L, B)', 'false,false': 'haswordvenue(B, M), haswordtitle(N, M)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [1.095, 2, 3], 'true,false,false,true': [0.79, 1, 2], 'true,false,false,false': [2.718, 13, 17], 'false,true,true,true': [2.766, 27, 11], 'false,true,true,false': [0.084, 42, 0], 'false,true,false': [0.052, 7, 0], 'false,false,true': [0.346, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)', 'false,false': 'haswordvenue(B, L), haswordtitle(M, L)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.79, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.718, 13, 17], 'false,true,true': [0.054, 12, 0], 'false,true,false': [0.34, 64, 11], 'false,false,true': [0.346, 64, 11], 'false,false,false': [0.0, 4, 0]}]]
[{'': [0.23762656230272572, 0.11496588764697444], 'true': [0.2356675262844691, 0.24376731301939172], 'true,false': [0.22222222222222224, 0.2448979591836734], 'true,false,false': [0.23999999999999994, 0.2455555555555551], 'false': [0.1104505218655035, 0.11985258772632539], 'false,false': [0.12515555555555502, 0.0], 'false,true': [-1.1564823173178714e-17, 0.12515555555555502]}, {'': [0.23716066162823085, 0.11455688633284844], 'true': [0.2356675262844735, 0.24352902641532298], 'true,false': [0.21859724583033524, 0.2450060599606714], 'true,false,false': [0.24, 0.24572012058397555], 'false': [0.10989213699570438, 0.1196268538653256], 'false,false': [0.125155555555556, 0.0], 'false,true': [2.3129646346357427e-18, 0.125155555555556]}, {'': [0.23670562699489206, 0.11426488031687218], 'true': [0.23566752628446727, 0.2432185562034124], 'true,false': [0.2176873624141201, 0.244996568772251], 'true,false,false': [0.23999999999999994, 0.24563661504998013], 'false': [0.10949347876263746, 0.1194656914359021], 'false,false': [0.12515555555555488, 0.0], 'false,true': [0.11802694340978195, 0.00011495009377930235], 'false,true,true': [0.20389987794958447, 4.257410880718441e-05]}, {'': [0.23636686956683264, 0.11173833815389338], 'true': [0.23566752628446358, 0.24295109362243592], 'true,false': [0.21362185987538576, 0.2451339279829417], 'true,false,false': [0.24, 0.2459113078182825], 'false': [0.109435906756026, 0.11421156581709418], 'false,false': [0.11973920677450375, 0.0], 'false,true': [0.11784672398232088, 0.00023861478735571644], 'false,true,true': [0.20327394364527954, 8.081473000322237e-05]}, {'': [0.23616211851940858, 0.10918155372515907], 'true': [0.235667526284474, 0.2427629844571851], 'true,false': [0.21314726666399209, 0.2451258595742565], 'true,false,false': [0.24000000000000005, 0.2458446207037282], 'false': [0.1046581894721964, 0.11410714620620821], 'false,false': [0.11972501336090415, 0.0], 'false,true': [0.0001573040463914016, 0.1197102778304846]}, {'': [0.2360545312733685, 0.10899773049875983], 'true': [0.23566752628446164, 0.2426403310251299], 'true,false': [0.21303627602374423, 0.2450849483961249], 'true,false,false': [0.24000000000000005, 0.24585612526623205], 'false': [0.10736329240376195, 0.10905231597441319], 'false,false': [0.10440440101428887, 0.11466254216400266], 'false,false,false': [0.12103078768004488, 0.0], 'false,false,true': [0.0001324991641275218, 0.11971254226212044]}, {'': [0.23600326998511442, 0.10883747592571037], 'true': [0.19288048183790224, 0.23631452678837925], 'true,false': [0.23592121091316542, 0.24505933929292525], 'true,false,false': [0.24000000000000005, 0.24585304782251752], 'true,true': [0.15999999999999998, 0.21310429594339028], 'false': [0.1073999980294544, 0.10888972646175968], 'false,false': [0.10736382990724018, 0.10893664665671579], 'false,false,false': [0.10379631250332587, 0.11460278329291387]}, {'': [0.23591060543564993, 0.10883784420922128], 'true': [0.23559515405302808, 0.24255782769938997], 'false': [0.104164439321322, 0.1139383228844244], 'false,false': [0.1196678324008744, 0.0], 'false,true': [0.00011142906371079096, 0.1196731592452281]}, {'': [0.23589962634884, 0.10872195625487642], 'true': [0.23559370784290773, 0.24256749693603882], 'true,false': [0.24, 0.2429234017687891], 'true,false,false': [0.2078827383500381, 0.24626048882072818], 'false': [0.10400459198046086, 0.11387845308943463], 'false,false': [0.11965345220245605, 0.0], 'false,true': [0.11247038809332832, 0.00038282794943704117], 'false,true,true': [0.20139755768356765, 0.00016801533948895565]}, {'': [0.23589189275600583, 0.1067172835289883], 'true': [0.23559263159770755, 0.24251484591861971], 'true,false': [0.20812008883903346, 0.24538842281892223], 'true,false,false': [0.24, 0.24625489123850997], 'false': [0.1002158069618234, 0.11382900700590079], 'false,false': [0.11964081711294382, 0.0], 'false,true': [0.000245277211704457, 0.11529150916125215]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
0;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true
0;false,false;haswordvenue(B, L), haswordtitle(M, L).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
1;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true
1;false,false;haswordvenue(B, L), haswordtitle(M, L).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
2;false,true;title(K, J), venue(K, A).;true;true
2;false,true,true;samebib(K, L), venue(L, B).;true;true
2;false,false;haswordvenue(B, M), haswordtitle(N, M).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
3;false,true;title(K, J), venue(K, B).;true;true
3;false,true,true;samebib(K, L), venue(L, A).;true;true
3;false,false;haswordvenue(A, M), haswordtitle(N, M).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
4;false,true;haswordtitle(J, K), haswordvenue(A, K).;true;true
4;false,false;haswordvenue(A, L), haswordtitle(M, L).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;false;haswordvenue(A, I), haswordauthor(J, I).;true;true
5;false,false;haswordvenue(A, K), haswordtitle(L, K).;true;true
5;false,false,true;haswordtitle(L, M), haswordvenue(B, M).;true;true
5;false,false,false;haswordvenue(B, N), haswordtitle(P, N).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;false;haswordvenue(A, E), haswordtitle(F, E).;true;true
7;false,true;haswordtitle(F, G), haswordvenue(B, G).;true;true
7;false,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
8;false,true;title(K, J), venue(K, A).;true;true
8;false,true,true;samebib(K, L), venue(L, B).;true;true
8;false,false;haswordvenue(B, M), haswordtitle(N, M).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
9;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true
9;false,false;haswordvenue(B, L), haswordtitle(M, L).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.23843062524035266;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.4581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.424815601766179;  // std dev = 2.714, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.004815601766179008;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.004815601766179008;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.20686012285620575;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.45935396641210174;  // std dev = 0.810, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.3982164798305049;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.36287359443791467;  // std dev = 2.715, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.004228390109386251;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.004228390109386251;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.1751801570305961;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.3269052770205085;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return 0.37391135762433364;  // std dev = 0.808, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.2976445171077738;  // std dev = 2.715, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.11231637819360636;  // std dev = 9.13e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0037111125833978686;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.0037111125833978686;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.14514481334590568;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.3022417434729106;  // std dev = 0.801, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.26358767085800217;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.23316088123073275;  // std dev = 2.716, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, A) )
%   | | then if ( samebib(K, L), venue(L, B) )
%   | | | then return 0.15046437198207863;  // std dev = 2.779, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return -0.1414196724610361;  // std dev = 0.058, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.10756983093381625;  // std dev = 0.039, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | then return 0.0032558270569705674;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.11804668707041945;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.20246239867675433;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return 0.2293423044508296;  // std dev = 0.800, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.17958143810155577;  // std dev = 2.716, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.09971987173961457;  // std dev = 0.040, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0028554031467501392;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.003395227114469554;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.09457696812283496;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.1724286169970276;  // std dev = 0.800, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.15954850067351503;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.13516345665101082;  // std dev = 2.716, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then return -0.029344132298912445;  // std dev = 0.328, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( title(M, L), venue(M, B) )
%   | | | then return -0.0021642381114218906;  // std dev = 3.067, 80.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=11 */
%   | | | else return -0.10466588518686264;  // std dev = 0.051, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | | | then return 0.006838551977207784;  // std dev = 2.848, 67.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=10 */
%   | | | else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.07489163449109286;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.1445629839328414;  // std dev = 0.791, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.11993477063381389;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.10025906176759376;  // std dev = 2.718, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.086614150532994;  // std dev = 0.028, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0026367234907309833;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.0029325759047740475;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.05877777591804268;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.10880139013013539;  // std dev = 0.792, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.08996299921514686;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.07527403055320162;  // std dev = 2.718, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.08000774571077825;  // std dev = 0.026, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.00231218072184132;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.0025712788050517065;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04582386394015474;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.0822548368003266;  // std dev = 0.792, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.07566344141724848;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.055122327421511706;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.07431705200337484;  // std dev = 0.024, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0020270857076350947;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.0022538728361684423;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.03554750876544446;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.06481041633626612;  // std dev = 0.791, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.05382228639387079;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.04165098573390783;  // std dev = 2.718, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then return -0.01985470607811356;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then if ( title(M, L), venue(M, A) )
%   | | | then return -0.002038585574696568;  // std dev = 2.998, 80.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=11 */
%   | | | else return -0.07657957836543865;  // std dev = 0.061, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(B, N), haswordtitle(P, N) )
%   | | | then return 0.0045817230313951;  // std dev = 2.916, 67.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=10 */
%   | | | else return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.557021
   AUC PR    = 0.428353
   CLL	      = -0.657116
   Precision = 0.637427 at threshold = 0.5
   Recall    = 0.041148
   F1        = 0.077305


Total learning time: 56.60839009284973 seconds
Total inference time: 6.704 seconds
AUC ROC: 0.557021


Results scoring model
   AUC ROC   = 0.590969
   AUC PR    = 0.419506
   CLL	      = -0.620329
   Precision = 0.578947 at threshold = 0.5
   Recall    = 0.059783
   F1        = 0.108374


Total scoring time: 1.037 seconds
Refined model CLL: -0.620329


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.557284
   AUC PR    = 0.428343
   CLL	      = -0.653899
   Precision = 0.637427 at threshold = 0.5
   Recall    = 0.041148
   F1        = 0.077305


Total learning time: 121.77387121009828 seconds
Total inference time: 7.499 seconds
AUC ROC: 0.557284
Total revision time: 121.77387121009828
Best scored revision CLL: -0.617527


Dataset: 11_yeast_cora, Fold: 1, Type: Transfer (trRDN-B), Time: 00:37:03
{'AUC ROC': 0.557284, 'AUC PR': 0.428343, 'CLL': -0.653899, 'Precision': [0.637427, 0.5], 'Recall': 0.041148, 'F1': 0.077305, 'Learning time': 121.77387121009828, 'Inference time': 7.499, 'parameter': {'AUC ROC': 0.557284, 'AUC PR': 0.428343, 'CLL': -0.653899, 'Precision': [0.637427, 0.5], 'Recall': 0.041148, 'F1': 0.077305, 'Learning time': 63.112481117248535, 'Inference time': 7.499}}


Starting fold 2

Target train facts examples: 9016
Target train pos examples: 771
Target train neg examples: 544

Target test facts examples: 33542
Target test pos  examples: 2246
Target test neg examples: 4478

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.4356367001892301;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.5949910403626703;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.5640312880406888;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.37395569825543723;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.5062567560764839;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.48074388375574334;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.7194734122109543;  // std dev = 7.30e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.30665618885999163;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.4047531668618019;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.386198448632422;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.5553664367462845;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.5553664367462846;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.20848477447886868;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.20848477447886868;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.24206322397592006;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.3261448737160187;  // std dev = 0.439, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.2788572331674748;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.4175135841583099;  // std dev = 1.49e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return 0.41751358415830986;  // std dev = 5.16e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.17062637354018512;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.17062637354018512;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.4586612187245652;  // std dev = 0.357, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.10866121872456526;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.14133878127543473;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.18403810314669028;  // std dev = 0.494, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.24558668125641064;  // std dev = 1.914, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.23490503051382783;  // std dev = 1.891, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.3207118471601496;  // std dev = 2.11e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.13664585375352212;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.13664585375352212;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.4106434583517543;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.08249570247950498;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, B) )
%   | | | then return -0.15719386217852044;  // std dev = 0.838, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.23594145670149916;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.1388691867558318;  // std dev = 0.493, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.1843926491048414;  // std dev = 1.915, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.17858400017571843;  // std dev = 1.894, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then return 0.21003275240803626;  // std dev = 0.318, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | else return 0.10762034996184425;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.1061003311512605;  // std dev = 0.492, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.1369486899938656;  // std dev = 0.439, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.11029848809583002;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.2379427838492716;  // std dev = 7.45e-09, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return 0.21733803683340533;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.08372807955323866;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.06599748736808053;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.2822897042820041;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( author(F, D), venue(F, B) )
%   | | then return -0.14291814182548507;  // std dev = 0.837, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( haswordvenue(B, C) )
%   | | | then return 0.036045096584915934;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.20432138615275958;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.07800007819040852;  // std dev = 0.493, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.11251093658851966;  // std dev = 1.913, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.10297046158450582;  // std dev = 1.894, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then return 0.14130606754001326;  // std dev = 0.317, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | else return 0.06457405393631672;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.21480313477919993;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordauthor(G, C) )
%   | | | then return 0.027069964786236023;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.11849907060785292;  // std dev = 1.219, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( haswordtitle(J, H) )
%   | | | then return 0.2579286770954246;  // std dev = 1.589, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return -0.18534960447448826;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( haswordtitle(K, C) )
%   | | | then return 0.056940707523926166;  // std dev = 16.896, 1,167.000 (wgt'ed) examples reached here.  /* #neg=498 #pos=669 */
%   | | | else return 0.08361449665256963;  // std dev = 2.694, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | then return 0.11595784306648137;  // std dev = 0.322, 34.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=26 */
%   | else return 0.02122989171681764;  // std dev = 0.487, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04500495555862002;  // std dev = 0.491, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.06214466607178996;  // std dev = 0.439, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.039132454741845776;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.16959234543673984;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return 0.14731099648706097;  // std dev = 1.29e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.021847245469439603;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.01612486115775837;  // std dev = 0.487, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */


Results
   AUC ROC   = 0.537089
   AUC PR    = 0.343753
   CLL	      = -0.755985
   Precision = 0.353813 at threshold = 0.5
   Recall    = 0.956367
   F1        = 0.516532


Total learning time: 57.8244526386261 seconds
Total inference time: 6.172 seconds
AUC ROC: 0.537089


Results scoring model
   AUC ROC   = 0.5537
   AUC PR    = 0.662692
   CLL	      = -0.665051
   Precision = 0.594317 at threshold = 0.5
   Recall    = 0.976654
   F1        = 0.73896


Total scoring time: 1.13 seconds
Parameter learned model CLL: -0.665051


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)'}, {'true,true': [0.494, 518, 708], 'true,false,true': [0.44, 5, 14], 'true,false,false,true': [1.879, 5, 12], 'true,false,false,false': [0.0, 0, 5], 'false,true,true': [0.0, 0, 20], 'false,true,false': [0.495, 8, 6], 'false,false': [0.495, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)'}, {'true,true': [0.494, 518, 708], 'true,false,true': [0.44, 5, 14], 'true,false,false,true': [1.879, 5, 12], 'true,false,false,false': [0.0, 0, 5], 'false,true,true': [7.3e-08, 0, 20], 'false,true,false': [0.495, 8, 6], 'false,false': [0.495, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)'}, {'true,true': [0.494, 518, 708], 'true,false,true': [0.44, 5, 14], 'true,false,false,true': [1.879, 5, 12], 'true,false,false,false': [0.0, 0, 5], 'false,true,true': [0.0, 0, 20], 'false,true,false': [0.495, 8, 6], 'false,false': [0.495, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(A, K)'}, {'true,true': [0.494, 518, 708], 'true,false,true': [0.439, 5, 14], 'true,false,false,true': [1.879, 5, 12], 'true,false,false,false': [1.49e-08, 0, 5], 'false,true,true': [5.16e-08, 0, 20], 'false,true,false': [0.495, 8, 6], 'false,false': [0.495, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordtitle(F, D)', 'true,true,false': 'haswordvenue(A, D)', 'true,false': 'haswordtitle(G, C)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)'}, {'true,true,true': [0.357, 3, 17], 'true,true,false,true': [1.0, 2, 2], 'true,true,false,false': [1.225, 6, 2], 'true,false,true': [0.494, 507, 687], 'true,false,false,true': [1.914, 5, 14], 'true,false,false,false': [1.891, 5, 17], 'false,true,true': [2.11e-08, 0, 20], 'false,true,false': [0.495, 8, 6], 'false,false': [0.495, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(E, C)', 'true,false': 'haswordvenue(B, C)', 'true,false,false': 'author(F, D), venue(F, B)', 'false': 'haswordvenue(A, G), haswordvenue(B, G)', 'false,true': 'haswordtitle(H, G)', 'false,true,false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,false': 'haswordvenue(A, K), haswordtitle(L, K)'}, {'true,true': [0.356, 3, 17], 'true,false,true': [1.0, 2, 2], 'true,false,false,true': [0.838, 3, 1], 'true,false,false,false': [0.894, 4, 1], 'false,true,true': [0.493, 507, 687], 'false,true,false,true': [1.915, 5, 14], 'false,true,false,false': [1.894, 5, 17], 'false,false,true': [0.318, 7, 26], 'false,false,false': [0.495, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(A, K)'}, {'true,true': [0.492, 518, 708], 'true,false,true': [0.439, 5, 14], 'true,false,false,true': [1.879, 5, 12], 'true,false,false,false': [7.45e-09, 0, 5], 'false,true,true': [0.0, 0, 20], 'false,true,false': [0.495, 8, 6], 'false,false': [0.49, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(E, C)', 'true,false': 'author(F, D), venue(F, B)', 'true,false,false': 'haswordvenue(B, C)', 'false': 'haswordvenue(A, G), haswordvenue(B, G)', 'false,true': 'haswordtitle(H, G)', 'false,true,false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,false': 'haswordvenue(A, K), haswordtitle(L, K)'}, {'true,true': [0.356, 3, 17], 'true,false,true': [0.837, 3, 1], 'true,false,false,true': [1.0, 2, 2], 'true,false,false,false': [0.894, 4, 1], 'false,true,true': [0.493, 507, 687], 'false,true,false,true': [1.913, 5, 14], 'false,true,false,false': [1.894, 5, 17], 'false,false,true': [0.317, 7, 26], 'false,false,false': [0.495, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordtitle(F, D)', 'true,true,false': 'haswordauthor(G, C)', 'true,false': 'haswordvenue(B, H), haswordauthor(I, H)', 'true,false,true': 'haswordtitle(J, H)', 'true,false,false': 'haswordtitle(K, C)', 'false': 'haswordvenue(B, L), haswordtitle(M, L)'}, {'true,true,true': [0.356, 3, 17], 'true,true,false,true': [1.0, 2, 2], 'true,true,false,false': [1.219, 6, 2], 'true,false,true,true': [1.589, 3, 16], 'true,false,true,false': [1.225, 6, 2], 'true,false,false,true': [16.896, 498, 669], 'true,false,false,false': [2.694, 10, 31], 'false,true': [0.322, 8, 26], 'false,false': [0.487, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(A, K)'}, {'true,true': [0.491, 518, 708], 'true,false,true': [0.439, 5, 14], 'true,false,false,true': [1.879, 5, 12], 'true,false,false,false': [0.0, 0, 5], 'false,true,true': [1.29e-08, 0, 20], 'false,true,false': [0.495, 8, 6], 'false,false': [0.487, 8, 6]}]]
[{'': [0.24306651325713594, 0.22222222222222385], 'true': [0.24399564626142126, 0.1844140392623454], 'false': [0.17993079584775207, 0.24489795918367352], 'true,false': [0.19390581717451486, 0.17561983471074338], 'false,true': [-8.881784197001253e-17, 0.24489795918367352], 'true,false,false': [0.20761245674740453, 0.0]}, {'': [0.24265720194658652, 0.1968581969586748], 'true': [0.2439956462613994, 0.18151807630785113], 'false': [0.15465453537750254, 0.24489795918367324], 'true,false': [0.193905817174515, 0.17043669583228802], 'true,false,false': [0.20761245674740458, 0.0], 'false,true': [2.6645352591003756e-16, 0.24489795918367324]}, {'': [0.24225435465227543, 0.17210326137526175], 'true': [0.2439956462614137, 0.1787372059517856], 'true,false': [0.1939058171745152, 0.16545366223293648], 'false': [0.1299852570106417, 0.2448979591836735], 'true,false,false': [0.20761245674740486, -4.4408920985006264e-17], 'false,true': [-2.6645352591003756e-16, 0.2448979591836735]}, {'': [0.24201842021934103, 0.15767217977962833], 'true': [0.24399564626139422, 0.17736162471011827], 'true,false': [0.192926167121755, 0.16380420131299053], 'true,false,false': [0.20761245674740472, 4.4408920985006264e-17], 'false': [0.1156041099534013, 0.24489795918367352], 'false,true': [1.3322676295501878e-16, 0.24489795918367352]}, {'': [0.2419071891360443, 0.15109193554816291], 'true': [0.22558593749999994, 0.24217238192445262], 'true,false': [0.2443183252948197, 0.17666622133125587], 'true,true': [0.12749999999999995, 0.22222222222222218], 'true,true,false': [0.24999999999999994, 0.18749999999999994], 'true,false,false': [0.1928999136805661, 0.16259333977574142], 'false': [0.10904663473311735, 0.24489795918367335], 'false,true': [2.2204460492503132e-17, 0.24489795918367335]}, {'': [0.22542524524899846, 0.23792052015146817], 'false': [0.2413590856462169, 0.14608264811475952], 'false,true': [0.24351408753659778, 0.1768626051359244], 'true': [0.12669706781465254, 0.21066727973065133], 'true,false': [0.25000000000000006, 0.1684669232600261], 'false,true,false': [0.19291380837503871, 0.16298456654228186], 'true,false,false': [0.1756054753110834, 0.15999999999999998], 'false,false': [0.10103682647446094, 0.24489795918367338]}, {'': [0.24023123408864097, 0.14652265973258757], 'true': [0.2423091690705377, 0.17709793502857032], 'true,false': [0.19308401642112136, 0.16328919308634865], 'true,false,false': [0.2076124567474048, 1.1102230246251566e-17], 'false': [0.10516425809953518, 0.24039226047779513], 'false,true': [-2.2204460492503132e-17, 0.24489795918367346]}, {'': [0.19364208307456968, 0.23783311302104113], 'false': [0.24131786197483618, 0.14476471080018263], 'false,true': [0.24350483899459252, 0.17679363788016886], 'true': [0.12671746811092988, 0.20263572909819552], 'true,false': [0.1750397053385714, 0.2142656903762176], 'true,false,false': [0.25000000000000006, 0.16000000000000003], 'false,true,false': [0.1926509402297429, 0.16305651463451665], 'false,false': [0.1005301254233083, 0.24489795918367332]}, {'': [0.23976880847606594, 0.14471188374757463], 'true': [0.17767428431801013, 0.2413179280672804], 'true,false': [0.19009309029128776, 0.24235954756281783], 'true,false,false': [0.2446322717930723, 0.17698271270968538], 'true,false,true': [0.13296398891966754, 0.18749999999999997], 'true,true': [0.12675941429393967, 0.21184540783653527], 'true,true,false': [0.25, 0.18570466373294764], 'false': [0.10393219382232892, 0.2373921260228042]}, {'': [0.23913322238327242, 0.144663627327493], 'true': [0.24119190127932383, 0.17715902053264265], 'true,false': [0.1930474014832207, 0.16341681897797505], 'true,false,false': [0.2076124567474049, 0.0], 'false': [0.10465307211147389, 0.23735250485004133], 'false,true': [8.326672684688674e-18, 0.24489795918367335]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,false;haswordvenue(A, E), haswordtitle(F, E).;true;true
0;true,false,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
0;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
0;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,false;haswordvenue(A, E), haswordtitle(F, E).;true;true
1;true,false,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
1;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,false;haswordvenue(A, E), haswordtitle(F, E).;true;true
2;true,false,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
2;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
2;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,false;haswordvenue(B, E), haswordtitle(F, E).;true;true
3;true,false,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
3;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
3;false,true;haswordtitle(J, K), haswordvenue(A, K).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;false;haswordvenue(A, J), haswordtitle(K, J).;true;true
4;false,true;haswordtitle(K, L), haswordvenue(B, L).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,false;haswordvenue(A, E), haswordtitle(F, E).;true;true
6;true,false,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
6;false,true;haswordtitle(J, K), haswordvenue(A, K).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,false;haswordvenue(A, E), haswordtitle(F, E).;true;true
9;true,false,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
9;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
9;false,true;haswordtitle(J, K), haswordvenue(A, K).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.4356367001892301;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.5949910403626703;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.5640312880406888;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.37395569825543723;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.5062567560764839;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.48074388375574334;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.7194734122109543;  // std dev = 7.30e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.30665618885999163;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.4047531668618019;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.386198448632422;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.5553664367462845;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.5553664367462846;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.20848477447886868;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.20848477447886868;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.24206322397592006;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.3261448737160187;  // std dev = 0.439, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.2788572331674748;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.4175135841583099;  // std dev = 1.49e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return 0.41751358415830986;  // std dev = 5.16e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.17062637354018512;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.17062637354018512;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.4586612187245652;  // std dev = 0.357, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(A, C) )
%   | | then return 0.10866121872456526;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, A) )
%   | | | then return -0.11648547966105265;  // std dev = 0.841, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.19133878127543472;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( haswordtitle(J, H) )
%   | | | then return 0.45076648188246;  // std dev = 1.589, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return -0.14133878127543473;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( haswordtitle(K, G) )
%   | | | then return 0.18192600021558156;  // std dev = 16.896, 1,167.000 (wgt'ed) examples reached here.  /* #neg=498 #pos=669 */
%   | | | else return 0.23985506378478075;  // std dev = 2.691, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | else return 0.224090349428075;  // std dev = 0.386, 47.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.14100522311314537;  // std dev = 0.492, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.18581002370323105;  // std dev = 0.439, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.14993924880770393;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.2708414839194305;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return 0.27396602326110664;  // std dev = 2.98e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.09340455412987769;  // std dev = 0.491, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.08827195957422182;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.31058737148162974;  // std dev = 0.357, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(A, C) )
%   | | then return 0.047858472477877445;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, A) )
%   | | | then return -0.11969029691448146;  // std dev = 0.839, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.17941741154220772;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( haswordtitle(J, H) )
%   | | | then return 0.3046546558157584;  // std dev = 1.589, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return -0.14125933302328678;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( haswordtitle(K, G) )
%   | | | then return 0.10291917916129932;  // std dev = 16.896, 1,167.000 (wgt'ed) examples reached here.  /* #neg=498 #pos=669 */
%   | | | else return 0.1389680333844733;  // std dev = 2.691, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | else return 0.14283348630638895;  // std dev = 0.383, 47.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.07967130194110741;  // std dev = 0.491, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.10915946409058225;  // std dev = 0.439, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.0783250917581588;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.19778962044478254;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return 0.19918558871713904;  // std dev = 2.79e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.042839909084421146;  // std dev = 0.488, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.03464913100905039;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.05981686548424601;  // std dev = 0.491, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.08865991057600758;  // std dev = 0.439, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.05503179962075567;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.1682674062241053;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return 0.16930261781152695;  // std dev = 2.79e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.03269127036419363;  // std dev = 0.488, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.02634705316558141;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.20250328199142437;  // std dev = 0.357, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(A, C) )
%   | | then return 0.001168774615831522;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, A) )
%   | | | then return -0.12101408467327181;  // std dev = 0.836, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.1700619654237038;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.0436363845567446;  // std dev = 0.493, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.070900629366578;  // std dev = 1.913, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.06424562456314814;  // std dev = 1.890, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then return 0.10796170165581799;  // std dev = 0.317, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | else return 0.019996176505504087;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */


Results
   AUC ROC   = 0.53545
   AUC PR    = 0.342604
   CLL	      = -0.756366
   Precision = 0.353813 at threshold = 0.5
   Recall    = 0.956367
   F1        = 0.516532


Total learning time: 52.89316534996033 seconds
Total inference time: 6.087 seconds
AUC ROC: 0.53545


Results scoring model
   AUC ROC   = 0.553696
   AUC PR    = 0.662635
   CLL	      = -0.665071
   Precision = 0.594317 at threshold = 0.5
   Recall    = 0.976654
   F1        = 0.73896


Total scoring time: 1.191 seconds
Refined model CLL: -0.665071


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.537089
   AUC PR    = 0.343753
   CLL	      = -0.755985
   Precision = 0.353813 at threshold = 0.5
   Recall    = 0.956367
   F1        = 0.516532


Total learning time: 113.03861798858642 seconds
Total inference time: 6.172 seconds
AUC ROC: 0.537089
Total revision time: 113.03861798858642
Best scored revision CLL: -0.665051


Dataset: 11_yeast_cora, Fold: 2, Type: Transfer (trRDN-B), Time: 00:39:09
{'AUC ROC': 0.537089, 'AUC PR': 0.343753, 'CLL': -0.755985, 'Precision': [0.353813, 0.5], 'Recall': 0.956367, 'F1': 0.516532, 'Learning time': 113.03861798858642, 'Inference time': 6.172, 'parameter': {'AUC ROC': 0.537089, 'AUC PR': 0.343753, 'CLL': -0.755985, 'Precision': [0.353813, 0.5], 'Recall': 0.956367, 'F1': 0.516532, 'Learning time': 57.8244526386261, 'Inference time': 6.172}}


Starting fold 3

Target train facts examples: 9306
Target train pos examples: 581
Target train neg examples: 2222

Target test facts examples: 33252
Target test pos  examples: 2436
Target test neg examples: 2800

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.21044369915897732;  // std dev = 0.478, 1,547.000 (wgt'ed) examples reached here.  /* #neg=1,002 #pos=545 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.5854216623722396;  // std dev = 2.089, 22.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return -0.14185106490048766;  // std dev = 6.14e-08, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | | else if ( title(H, E), venue(H, A) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0.001006077956655051;  // std dev = 1.309, 14.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.037924215998388786;  // std dev = 3.623, 89.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=16 */
%   | | | else return -0.0418510649004878;  // std dev = 1.342, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.19461512479163454;  // std dev = 0.481, 1,497.000 (wgt'ed) examples reached here.  /* #neg=952 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.6153742088206071;  // std dev = 1.952, 21.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=16 */
%   | | | else return -0.14653055308415477;  // std dev = 0.000, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | | else if ( title(H, E), venue(H, B) )
%   | | | then return -0.136832517440075;  // std dev = 5.27e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.06316748255992498;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return 0.025896599104860918;  // std dev = 3.298, 90.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=16 */
%   | | | else return -0.023516271701955034;  // std dev = 1.323, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.15321979897080182;  // std dev = 0.478, 1,549.000 (wgt'ed) examples reached here.  /* #neg=1,004 #pos=545 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( title(G, E), venue(G, B) )
%   | | | then return 0.30266132209506763;  // std dev = 2.631, 32.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=16 */
%   | | | else return -0.1293971162354106;  // std dev = 0.106, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | | else return 0.1465813435635616;  // std dev = 0.452, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return 0.010419192588451422;  // std dev = 3.287, 97.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=16 */
%   | | | else return -0.030726516038142634;  // std dev = 1.326, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | | else return -0.11231637819360638;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1304503602433549;  // std dev = 0.478, 1,537.000 (wgt'ed) examples reached here.  /* #neg=992 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.5189011881780671;  // std dev = 1.952, 21.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=16 */
%   | | | else return -0.12939747822403908;  // std dev = 0.026, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   | | else return 0.08151278642766296;  // std dev = 0.416, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return 0.03290347978204185;  // std dev = 3.042, 80.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=16 */
%   | | | else return -0.04926128072778093;  // std dev = 1.327, 22.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
%   | | else return -0.10159632948783633;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.18093742089487705;  // std dev = 0.495, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | else return 0.08569932565678162;  // std dev = 0.471, 39.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=13 */
%   | else return 0.10503265899012683;  // std dev = 0.478, 1,500.000 (wgt'ed) examples reached here.  /* #neg=971 #pos=529 */
%   else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | then if ( title(I, H), venue(I, B) )
%   | | then if ( samebib(I, J), venue(J, A) )
%   | | | then return 0.4631253439428321;  // std dev = 1.952, 21.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=16 */
%   | | | else return -0.12573001085670155;  // std dev = 0.138, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   | | else if ( title(K, H), venue(K, A) )
%   | | | then return -0.1048908168490241;  // std dev = 3.73e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return 0.030614332565066456;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | then return -0.11042556857322278;  // std dev = 0.020, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.01914206323887661;  // std dev = 0.290, 125.000 (wgt'ed) examples reached here.  /* #neg=107 #pos=18 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.3171429599757486;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.027737890298717708;  // std dev = 0.456, 44.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=13 */
%   | else return 0.09722542605199527;  // std dev = 0.481, 1,450.000 (wgt'ed) examples reached here.  /* #neg=921 #pos=529 */
%   else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | then if ( title(H, G), venue(H, B) )
%   | | then if ( samebib(H, I), venue(I, A) )
%   | | | then return 0.3812398432297252;  // std dev = 2.089, 22.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return -0.11307587904886487;  // std dev = 0.029, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
%   | | else return 0.05157899141732545;  // std dev = 0.400, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | then if ( title(L, K), venue(L, A) )
%   | | | then return -0.015217229941377723;  // std dev = 2.769, 99.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=16 */
%   | | | else return 0.04482497447920135;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else return -0.09109393904018671;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06709133113045099;  // std dev = 0.478, 1,539.000 (wgt'ed) examples reached here.  /* #neg=994 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.32538126107445814;  // std dev = 1.952, 21.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=16 */
%   | | | else return -0.10266748696785973;  // std dev = 0.021, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
%   | | else return 0.06716312671068385;  // std dev = 0.416, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else return -0.01787181782006132;  // std dev = 0.292, 113.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=18 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04873339505870774;  // std dev = 0.477, 1,559.000 (wgt'ed) examples reached here.  /* #neg=1,014 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return -0.03607917927851247;  // std dev = 0.237, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | then if ( title(H, G), venue(H, B) )
%   | | | then return 3.442205903604818E-4;  // std dev = 2.584, 76.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=14 */
%   | | | else return -0.021648121919620608;  // std dev = 1.305, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return -0.008584360700416021;  // std dev = 2.652, 105.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=18 */
%   | | | else return -0.08246504042230872;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C) )
%   | | then return 0.0815748301394058;  // std dev = 0.483, 39.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=15 */
%   | | else return -0.12815988916240317;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.04486406655282663;  // std dev = 0.479, 1,485.000 (wgt'ed) examples reached here.  /* #neg=956 #pos=529 */
%   else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | then if ( title(I, H), venue(I, A) )
%   | | then if ( samebib(I, J), venue(J, B) )
%   | | | then return 0.24907646825395968;  // std dev = 2.376, 25.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=16 */
%   | | | else return -0.10632092233024303;  // std dev = 0.150, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
%   | | else return 0.044128234121359175;  // std dev = 0.400, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | then return -0.026773697464114222;  // std dev = 0.269, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | | else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | | | then return -0.08395129413982357;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.03020322128485866;  // std dev = 2.702, 101.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=16 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.030024969875938046;  // std dev = 0.477, 1,552.000 (wgt'ed) examples reached here.  /* #neg=1,007 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.006907734697942904;  // std dev = 0.217, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | then if ( title(H, G), venue(H, B) )
%   | | | then return 6.482741903473707E-4;  // std dev = 2.612, 77.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=16 */
%   | | | else return -0.04654734123056064;  // std dev = 1.315, 27.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=2 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return -0.019689417611817053;  // std dev = 2.699, 93.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=16 */
%   | | | else return -0.07302951541736218;  // std dev = 0.006, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */


Results
   AUC ROC   = 0.56431
   AUC PR    = 0.509763
   CLL	      = -0.708619
   Precision = 0.584906 at threshold = 0.5
   Recall    = 0.038177
   F1        = 0.071676


Total learning time: 46.0998101234436 seconds
Total inference time: 5.4 seconds
AUC ROC: 0.56431


Results scoring model
   AUC ROC   = 0.594657
   AUC PR    = 0.279748
   CLL	      = -0.509761
   Precision = 0.592593 at threshold = 0.5
   Recall    = 0.027539
   F1        = 0.052632


Total scoring time: 1.371 seconds
Parameter learned model CLL: -0.509761


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordtitle(E, D)', 'false,true': 'title(F, E), venue(F, B)', 'false,true,true': 'samebib(F, G), venue(G, A)', 'false,true,false': 'title(H, E), venue(H, A)', 'false,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,false,true': 'title(K, J), venue(K, A)'}, {'true': [0.478, 1, 545], 'false,true,true,true': [2.089, 6, 16], 'false,true,true,false': [6.14e-08, 59, 0], 'false,true,false,true': [0.0, 9, 0], 'false,true,false,false': [1.309, 12, 2], 'false,false,true,true': [3.623, 73, 16], 'false,false,true,false': [1.342, 18, 2], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordtitle(E, D)', 'false,true': 'title(F, E), venue(F, A)', 'false,true,true': 'samebib(F, G), venue(G, B)', 'false,true,false': 'title(H, E), venue(H, B)', 'false,false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,false,true': 'title(K, J), venue(K, B)'}, {'true': [0.481, 952, 545], 'false,true,true,true': [1.952, 5, 16], 'false,true,true,false': [0.0, 65, 0], 'false,true,false,true': [5.27e-09, 8, 0], 'false,true,false,false': [1.265, 8, 2], 'false,false,true,true': [3.298, 74, 16], 'false,false,true,false': [1.323, 16, 2], 'false,false,false': [0.0, 7, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordtitle(E, D)', 'false,true': 'title(F, E), venue(F, A)', 'false,true,true': 'title(G, E), venue(G, B)', 'false,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'false,false,true': 'title(J, I), venue(J, A)'}, {'true': [0.478, 1, 545], 'false,true,true,true': [2.631, 16, 16], 'false,true,true,false': [0.106, 57, 0], 'false,true,false': [0.452, 5, 2], 'false,false,true,true': [3.287, 81, 16], 'false,false,true,false': [1.326, 17, 2], 'false,false,false': [0.0, 5, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordtitle(E, D)', 'false,true': 'title(F, E), venue(F, B)', 'false,true,true': 'samebib(F, G), venue(G, A)', 'false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false,false,true': 'title(J, I), venue(J, B)'}, {'true': [0.478, 992, 545], 'false,true,true,true': [1.952, 5, 16], 'false,true,true,false': [0.026, 66, 0], 'false,true,false': [0.416, 7, 2], 'false,false,true,true': [3.042, 64, 16], 'false,false,true,false': [1.327, 20, 2], 'false,false,false': [0.0, 5, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordauthor(F, C)', 'false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false,true': 'title(I, H), venue(I, B)', 'false,true,true': 'samebib(I, J), venue(J, A)', 'false,true,false': 'title(K, H), venue(K, A)', 'false,false': 'haswordvenue(A, L), haswordauthor(M, L)'}, {'true,true,true': [0.495, 4, 3], 'true,true,false': [0.471, 26, 13], 'true,false': [0.478, 971, 529], 'false,true,true,true': [1.952, 5, 16], 'false,true,true,false': [0.138, 54, 0], 'false,true,false,true': [3.73e-09, 10, 0], 'false,true,false,false': [1.279, 9, 2], 'false,false,true': [0.02, 4, 0], 'false,false,false': [0.29, 107, 18]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordvenue(A, D)', 'false': 'haswordvenue(A, F), haswordtitle(G, F)', 'false,true': 'title(H, G), venue(H, B)', 'false,true,true': 'samebib(H, I), venue(I, A)', 'false,false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false,false,true': 'title(L, K), venue(L, A)'}, {'true,true,true': [1.095, 2, 3], 'true,true,false': [0.456, 31, 13], 'true,false': [0.481, 921, 529], 'false,true,true,true': [2.089, 6, 16], 'false,true,true,false': [0.029, 70, 0], 'false,true,false': [0.4, 8, 2], 'false,false,true,true': [2.769, 83, 16], 'false,false,true,false': [1.265, 8, 2], 'false,false,false': [0.0, 3, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordtitle(E, D)', 'false,true': 'title(F, E), venue(F, B)', 'false,true,true': 'samebib(F, G), venue(G, A)'}, {'true': [0.478, 994, 545], 'false,true,true,true': [1.952, 5, 16], 'false,true,true,false': [0.021, 72, 0], 'false,true,false': [0.416, 7, 2], 'false,false': [0.292, 95, 18]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(B, F), haswordtitle(G, F)', 'false,false,true': 'title(H, G), venue(H, B)', 'false,false,false': 'haswordvenue(A, I), haswordtitle(J, I)'}, {'true': [0.477, 1, 545], 'false,true': [0.237, 16, 2], 'false,false,true,true': [2.584, 62, 14], 'false,false,true,false': [1.305, 15, 2], 'false,false,false,true': [2.652, 87, 18], 'false,false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordtitle(F, C)', 'false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false,true': 'title(I, H), venue(I, A)', 'false,true,true': 'samebib(I, J), venue(J, B)', 'false,false': 'haswordvenue(B, K), haswordauthor(L, K)', 'false,false,false': 'haswordvenue(A, M), haswordauthor(N, M)'}, {'true,true,true': [0.483, 24, 15], 'true,true,false': [0.866, 3, 1], 'true,false': [0.479, 956, 529], 'false,true,true,true': [2.376, 9, 16], 'false,true,true,false': [0.15, 79, 0], 'false,true,false': [0.4, 8, 2], 'false,false,true': [0.269, 9, 2], 'false,false,false,true': [0.0, 3, 0], 'false,false,false,false': [2.702, 85, 16]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(B, F), haswordtitle(G, F)', 'false,false,true': 'title(H, G), venue(H, B)', 'false,false,false': 'haswordvenue(A, I), haswordtitle(J, I)'}, {'true': [0.477, 1, 545], 'false,true': [0.217, 10, 2], 'false,false,true,true': [2.612, 61, 16], 'false,false,true,false': [1.315, 25, 2], 'false,false,false,true': [2.699, 77, 16], 'false,false,false,false': [0.006, 5, 0]}]]
[{'': [0.22818316327573843, 0.13837626621928797], 'false': [0.1431213017751474, 0.13391808285691856], 'false,true': [0.15851242188690695, 0.07939508506616262], 'false,true,true': [0.19834710743801612, 6.39789539614497e-17], 'false,false': [0.13786718289706199, 0.0], 'false,false,true': [0.14745612927660595, 0.09000000000000004], 'false,true,false': [-9.25185853854297e-18, 0.12244897959183677]}, {'': [0.23152071232200297, 0.12639256486418426], 'false': [0.14292674260952168, 0.11126349330898697], 'false,true': [0.15143320713899458, 0.09876543209876548], 'false,true,true': [0.18140589569161022, -1.3664283380001927e-17], 'false,false': [0.11722845247437806, -1.982541115402065e-18], 'false,false,true': [0.12082712384368942, 0.09720040246001249], 'false,true,false': [3.469446951953614e-18, 0.16000000000000006]}, {'': [0.22804858379236567, 0.11523059646602794], 'false': [0.12794671124411594, 0.10457290812429126], 'false,true': [0.12089748917225834, 0.20408163265306123], 'false,true,true': [0.21633957569746853, 0.0001970476738137688], 'false,false': [0.10852436455208136, 0.0], 'false,false,true': [0.11138164029933788, 0.09252154731125918]}, {'': [0.22885501799253694, 0.11482242396467399], 'false': [0.12589153469664985, 0.10465257461502243], 'false,true': [0.1207571592639819, 0.17283950617283944], 'false,true,true': [0.18140589569160945, 1.024348489805674e-05], 'false,false': [0.10914535507874246, 0.0], 'false,false,true': [0.1157034006878426, 0.08000297699459928]}, {'': [0.2282504280126778, 0.09583033156895433], 'true': [0.22684310018903622, 0.22829288888886776], 'true,true': [0.24489795918367352, 0.2222222222222225], 'false': [0.11345353308705376, 0.08184601182163136], 'false,true': [0.12095225879582837, 0.08250208020541314], 'false,true,true': [0.18140589569160964, 0.0003523350288324343], 'false,true,false': [1.3877787807814458e-18, 0.14876033057851235], 'false,false': [0.00010483504211994919, 0.08420335185544005]}, {'': [0.23135062513917257, 0.09073324521689374], 'true': [0.21908438954748122, 0.23171295171211168], 'true,true': [0.24, 0.20816115702479324], 'false': [0.0987655693025327, 0.08319627763255935], 'false,true': [0.09189813294814966, 0.16000000000000003], 'false,true,true': [0.19834710743801634, 1.1689526275955003e-05], 'false,false': [0.08530866703879422, 0.0], 'false,false,true': [0.07743334792320927, 0.15999999999999995]}, {'': [0.22868306989755535, 0.08384769582180031], 'false': [0.0822388713346701, 0.08514073451965015], 'false,true': [0.07299861213675396, 0.17283950617283947], 'false,true,true': [0.1814058956916101, 6.269006238039511e-06]}, {'': [0.22725700543885222, 0.07483349413212599], 'false': [0.055942420643364445, 0.07645136828733784], 'false,false': [0.09016993016583875, 0.06471980979483133], 'false,false,true': [0.08785176948256267, 0.1001382204546615], 'false,false,false': [0.06698501975895152, 0.0]}, {'': [0.22943048751819387, 0.07785208341840937], 'true': [0.23304596887639306, 0.22931747093253022], 'true,true': [0.23362538262699795, 0.18750000000000003], 'false': [0.08513582572904334, 0.0705027719725133], 'false,true': [0.07756653847103395, 0.15999999999999995], 'false,true,true': [0.2258312861589446, 0.0002849815302066127], 'false,false': [0.07249648542213359, 0.07028952627098675], 'false,false,false': [-1.1564823173178713e-18, 0.0722940016165555]}, {'': [0.22778592169713707, 0.07696895044114038], 'false': [0.04695262093383818, 0.07872045604098077], 'false,false': [0.08266167702091266, 0.07447781215110945], 'false,false,true': [0.08860483092642411, 0.06406353052221814], 'false,false,false': [0.07833646963707526, 6.778410582138767e-06]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
0;false,true;title(F, E), venue(F, B).;true;true
0;false,true,true;samebib(F, G), venue(G, A).;true;true
0;false,true,false;title(H, E), venue(H, A).;true;true
0;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;false;haswordvenue(A, D), haswordtitle(E, D).;true;true
1;false,true;title(F, E), venue(F, A).;true;true
1;false,true,true;samebib(F, G), venue(G, B).;true;true
1;false,true,false;title(H, E), venue(H, B).;true;true
1;false,false;haswordvenue(B, I), haswordtitle(J, I).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
2;false,true;title(F, E), venue(F, A).;true;true
2;false,true,true;title(G, E), venue(G, B).;true;true
2;false,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;false;haswordvenue(A, D), haswordtitle(E, D).;true;true
3;false,true;title(F, E), venue(F, B).;true;true
3;false,true,true;samebib(F, G), venue(G, A).;true;true
3;false,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;false;haswordvenue(B, G), haswordtitle(H, G).;true;true
4;false,true;title(I, H), venue(I, B).;true;true
4;false,true,true;samebib(I, J), venue(J, A).;true;true
4;false,true,false;title(K, H), venue(K, A).;true;true
4;false,false;haswordvenue(A, L), haswordauthor(M, L).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;false;haswordvenue(A, F), haswordtitle(G, F).;true;true
5;false,true;title(H, G), venue(H, B).;true;true
5;false,true,true;samebib(H, I), venue(I, A).;true;true
5;false,false;haswordvenue(B, J), haswordtitle(K, J).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;false;haswordvenue(A, D), haswordtitle(E, D).;true;true
6;false,true;title(F, E), venue(F, B).;true;true
6;false,true,true;samebib(F, G), venue(G, A).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
7;false,false;haswordvenue(B, F), haswordtitle(G, F).;true;true
7;false,false,false;haswordvenue(A, I), haswordtitle(J, I).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;false;haswordvenue(B, G), haswordtitle(H, G).;true;true
8;false,true;title(I, H), venue(I, A).;true;true
8;false,true,true;samebib(I, J), venue(J, B).;true;true
8;false,false;haswordvenue(B, K), haswordauthor(L, K).;true;true
8;false,false,false;haswordvenue(A, M), haswordauthor(N, M).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;false,false;haswordvenue(B, F), haswordtitle(G, F).;true;true
9;false,false,false;haswordvenue(A, I), haswordtitle(J, I).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22318577367954756;  // std dev = 0.481, 1,493.000 (wgt'ed) examples reached here.  /* #neg=948 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.524815601766179;  // std dev = 2.309, 24.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=16 */
%   | | | else return -0.14185106490048766;  // std dev = 6.99e-08, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
%   | | else if ( title(H, E), venue(H, B) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0.024815601766178853;  // std dev = 1.291, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | else return -1.1878143592070941E-4;  // std dev = 0.349, 127.000 (wgt'ed) examples reached here.  /* #neg=109 #pos=18 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.4287528614360888;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.17085812459398317;  // std dev = 0.474, 38.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=13 */
%   | else return 0.18354830073858097;  // std dev = 0.478, 1,491.000 (wgt'ed) examples reached here.  /* #neg=962 #pos=529 */
%   else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | then if ( title(I, H), venue(I, A) )
%   | | then if ( samebib(I, J), venue(J, B) )
%   | | | then return 0.5435337014800572;  // std dev = 1.952, 21.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=16 */
%   | | | else return -0.12544463852839158;  // std dev = 0.000, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | | else return -0.04603117813276883;  // std dev = 0.285, 22.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( title(M, L), venue(M, B) )
%   | | | then return 0.05093447800758868;  // std dev = 3.594, 83.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=16 */
%   | | | else return -0.030725495218649146;  // std dev = 1.333, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | | else return -0.14183660632976028;  // std dev = 5.27e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.25915663920277887;  // std dev = 1.225, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.13646066445104077;  // std dev = 0.471, 39.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=13 */
%   | else return 0.16669708458182653;  // std dev = 0.482, 1,447.000 (wgt'ed) examples reached here.  /* #neg=918 #pos=529 */
%   else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | then return -0.04843302519776785;  // std dev = 0.246, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return 0.035757935229584925;  // std dev = 3.614, 87.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=16 */
%   | | | else return -0.038137726516362824;  // std dev = 1.342, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.017520755987183275;  // std dev = 3.038, 91.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=16 */
%   | | | else return -0.12543319389336785;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1324298125164072;  // std dev = 0.480, 1,517.000 (wgt'ed) examples reached here.  /* #neg=972 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return -0.032922782301637664;  // std dev = 0.312, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then if ( title(H, G), venue(H, A) )
%   | | | then return 0.03823137152562425;  // std dev = 2.894, 76.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=16 */
%   | | | else return -0.04096688739470275;  // std dev = 1.335, 22.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.019735983502091714;  // std dev = 3.641, 95.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=16 */
%   | | | else return -0.11230711843658363;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.11067809551786197;  // std dev = 0.480, 1,507.000 (wgt'ed) examples reached here.  /* #neg=962 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return -0.02022913004227311;  // std dev = 0.279, 15.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return -0.007516375060651005;  // std dev = 0.337, 15.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.01824764148038041;  // std dev = 2.993, 89.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=16 */
%   | | | else return 0.008164723403150397;  // std dev = 3.660, 101.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=16 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.15606266103597766;  // std dev = 1.225, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.052794401060404894;  // std dev = 0.468, 40.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=13 */
%   | else return 0.0926375057948086;  // std dev = 0.481, 1,451.000 (wgt'ed) examples reached here.  /* #neg=922 #pos=529 */
%   else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | then if ( title(I, H), venue(I, B) )
%   | | then if ( samebib(I, J), venue(J, A) )
%   | | | then return 0.6067974332579029;  // std dev = 1.951, 21.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=16 */
%   | | | else return -0.15446921928335874;  // std dev = 0.033, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | | else return -0.04168536451676219;  // std dev = 0.294, 21.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=2 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then if ( title(M, L), venue(M, A) )
%   | | | then return 0.01059497169134709;  // std dev = 2.905, 90.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=16 */
%   | | | else return -0.038389574746168505;  // std dev = 1.335, 22.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
%   | | else return -0.10353671166354186;  // std dev = 0.005, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.12004380443506424;  // std dev = 1.225, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.034908634978252355;  // std dev = 0.465, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return 0.006099379687797593;  // std dev = 0.453, 45.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=13 */
%   | | else return 0.06418739257600652;  // std dev = 0.479, 1,453.000 (wgt'ed) examples reached here.  /* #neg=937 #pos=516 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, B) )
%   | | then if ( title(L, J), venue(L, A) )
%   | | | then return 0.3834796773926579;  // std dev = 2.286, 27.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=16 */
%   | | | else return -0.13838635534712174;  // std dev = 0.118, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | | else return -0.05799733819018477;  // std dev = 0.262, 27.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=2 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return -0.0048977029365103114;  // std dev = 0.297, 117.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=18 */
%   | | else return -0.09431411938070508;  // std dev = 0.005, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C) )
%   | | then return 0.10087275672001032;  // std dev = 0.484, 38.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=15 */
%   | | else return -0.15861584551656988;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.05368404284359328;  // std dev = 0.479, 1,479.000 (wgt'ed) examples reached here.  /* #neg=950 #pos=529 */
%   else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | then if ( title(I, H), venue(I, A) )
%   | | then return 0.019688511737251606;  // std dev = 0.314, 84.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=16 */
%   | | else if ( title(J, H), venue(J, B) )
%   | | | then return -0.11543708174012625;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.020269870540699567;  // std dev = 1.301, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | then return -0.10997797904673973;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.009739153423249677;  // std dev = 3.204, 105.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=18 */
%   | | | else return -0.08553748255367248;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.03345293227870125;  // std dev = 0.476, 1,562.000 (wgt'ed) examples reached here.  /* #neg=1,017 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return -0.011763825342869112;  // std dev = 0.286, 14.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | then if ( title(H, G), venue(H, A) )
%   | | | then return -0.002410514375798075;  // std dev = 2.980, 92.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=16 */
%   | | | else return 0.09558503361227338;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | | then return -0.10538320447319516;  // std dev = 0.025, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.0030227680972058596;  // std dev = 2.996, 99.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=16 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.19617785327256326;  // std dev = 1.051, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.004956345798286347;  // std dev = 0.465, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | else return 0.037462067974203886;  // std dev = 0.480, 1,469.000 (wgt'ed) examples reached here.  /* #neg=940 #pos=529 */
%   else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | then if ( title(I, H), venue(I, B) )
%   | | then if ( samebib(I, J), venue(J, A) )
%   | | | then return 0.41674863419762787;  // std dev = 1.959, 21.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=16 */
%   | | | else return -0.11898119959543853;  // std dev = 0.059, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
%   | | else return 0.11370489220094337;  // std dev = 0.433, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else return -0.005870470722326918;  // std dev = 0.310, 111.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=18 */


Results
   AUC ROC   = 0.562903
   AUC PR    = 0.511262
   CLL	      = -0.710266
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 44.81204867362976 seconds
Total inference time: 4.59 seconds
AUC ROC: 0.562903


Results scoring model
   AUC ROC   = 0.593052
   AUC PR    = 0.274401
   CLL	      = -0.515192
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 1.535 seconds
Refined model CLL: -0.515192


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.56431
   AUC PR    = 0.509763
   CLL	      = -0.708619
   Precision = 0.584906 at threshold = 0.5
   Recall    = 0.038177
   F1        = 0.071676


Total learning time: 93.81785879707337 seconds
Total inference time: 5.4 seconds
AUC ROC: 0.56431
Total revision time: 93.81785879707337
Best scored revision CLL: -0.509761


Dataset: 11_yeast_cora, Fold: 3, Type: Transfer (trRDN-B), Time: 00:40:53
{'AUC ROC': 0.56431, 'AUC PR': 0.509763, 'CLL': -0.708619, 'Precision': [0.584906, 0.5], 'Recall': 0.038177, 'F1': 0.071676, 'Learning time': 93.81785879707337, 'Inference time': 5.4, 'parameter': {'AUC ROC': 0.56431, 'AUC PR': 0.509763, 'CLL': -0.708619, 'Precision': [0.584906, 0.5], 'Recall': 0.038177, 'F1': 0.071676, 'Learning time': 46.0998101234436, 'Inference time': 5.4}}


Starting fold 4

Target train facts examples: 8129
Target train pos examples: 747
Target train neg examples: 1068

Target test facts examples: 34429
Target test pos  examples: 2270
Target test neg examples: 3954

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.27854694504975613;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.2867203636709409;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.44905802600860323;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.44905802600860323;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.5724346493852266;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.1914822684328457;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.05814893509951237;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.05814893509951237;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.2411503606196619;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.24811816884741328;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.3851926776601658;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.3851926776601658;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.48767788391726297;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( title(L, K), venue(L, B) )
%   | | then if ( samebib(L, M), venue(M, A) )
%   | | | then return 0.34839109804469576;  // std dev = 2.639, 28.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=14 */
%   | | | else return -0.15160890195530377;  // std dev = 0.037, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | else return 0.13497714535974895;  // std dev = 0.457, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | else return 0.05092203251355405;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.20289930723994204;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.20848477447886868;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.31518052304212246;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.31518052304212246;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.3912569620992536;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.15025964966533645;  // std dev = 0.457, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.04434629760466855;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.03881672043938632;  // std dev = 0.382, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.16640029396569495;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.17062637354018492;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.24804771389482108;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.24804771389482108;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.3005711547884894;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.12682918322756975;  // std dev = 0.456, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.03842866223690456;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.033544581201227684;  // std dev = 0.382, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.13360339271793026;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.13664585375352234;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.19020231164899937;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.19020231164899937;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.22629823971521876;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.10539077252424614;  // std dev = 0.455, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.033154945921885746;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.02887907796267461;  // std dev = 0.381, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.10551742939082928;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.10762034996184403;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.14379027326522745;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.14379027326522745;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.16984358676510128;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.08642415956740128;  // std dev = 0.454, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.028495105925721097;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.024780586028828804;  // std dev = 0.381, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.08232251291348108;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.08372807955323855;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.10803450809035726;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.10803450809035726;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.12813320688246752;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.07010384327299454;  // std dev = 0.453, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.024408230135271918;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.021203000857024715;  // std dev = 0.381, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.06366213733661014;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.06457405393631681;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.08103386685025628;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.08103386685025628;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.09743184803714998;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.056370102054830826;  // std dev = 0.453, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.02084688910874009;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.01809717377919813;  // std dev = 0.380, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.048923799915716965;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.049497783225195;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.0608105509549485;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.0608105509549485;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.07468131696953094;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.04501392176637556;  // std dev = 0.452, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.017760671541598414;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.015413542658823146;  // std dev = 0.380, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.03743104240908369;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.03777940363354095;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.045695325992495844;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.045695325992495844;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.057651940521137104;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.03575077929861881;  // std dev = 0.452, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.015098879183171418;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.01310402265593894;  // std dev = 0.380, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */


Results
   AUC ROC   = 0.566212
   AUC PR    = 0.422741
   CLL	      = -0.638818
   Precision = 0.65625 at threshold = 0.5
   Recall    = 0.037004
   F1        = 0.070058


Total learning time: 89.90893125534058 seconds
Total inference time: 7.954 seconds
AUC ROC: 0.566212


Results scoring model
   AUC ROC   = 0.538945
   AUC PR    = 0.449099
   CLL	      = -0.668401
   Precision = 0.607843 at threshold = 0.5
   Recall    = 0.041499
   F1        = 0.077694


Total scoring time: 1.198 seconds
Parameter learned model CLL: -0.668401


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(B, G)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)'}, {'true,true': [0.494, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(B, G)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'title(L, K), venue(L, B)', 'false,true,true': 'samebib(L, M), venue(M, A)'}, {'true,true': [0.494, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true,true': [2.639, 14, 14], 'false,true,true,false': [0.037, 35, 0], 'false,true,false': [0.457, 7, 3], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(B, G)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(A, L)'}, {'true,true': [0.494, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.457, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.382, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(B, G)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(A, L)'}, {'true,true': [0.494, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.456, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.382, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(B, G)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(A, L)'}, {'true,true': [0.494, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.455, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.381, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(B, G)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(A, L)'}, {'true,true': [0.494, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.454, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.381, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(A, G)', 'true,false,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(A, L)'}, {'true,true': [0.494, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.453, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.381, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(B, G)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(A, L)'}, {'true,true': [0.494, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.453, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.38, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(B, G)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(A, L)'}, {'true,true': [0.494, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.452, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.38, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(A, G)', 'true,false,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(A, L)'}, {'true,true': [0.494, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.452, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.38, 44, 11]}]]
[{'': [0.24455361249545102, 0.17089843750000108], 'true': [0.24366352318011741, 0.24803717352988336], 'true,false': [0.25000000000000133, 0.2354340071343634], 'true,false,true': [0.24489795918367302, 0.2417355371900822], 'true,false,false': [0.2417355371900822, 0.20408163265306106], 'false': [0.17864514918371124, 0.15999999999999948], 'false,true': [0.22222222222222232, 0.15999999999999948]}, {'': [0.24423965838627737, 0.17036542604714275], 'true': [0.24366352318012574, 0.24554974033866342], 'true,false': [0.24813620683257942, 0.23456996391329935], 'true,false,true': [0.244897959183673, 0.2417355371900833], 'true,false,false': [0.2417355371900833, 0.20408163265306115], 'false': [0.177825777852918, 0.1600000000000007], 'false,true': [0.1723155100665856, 0.20896525634822952], 'false,true,true': [0.24877296654128564, 3.843377571392446e-05]}, {'': [0.24393157221315037, 0.16235631745326143], 'true': [0.2436635231801326, 0.24310195846820273], 'true,false': [0.2463115068589202, 0.2337064665173658], 'true,false,true': [0.24489795918367316, 0.24173553719008264], 'true,false,false': [0.24173553719008264, 0.20408163265306115], 'false': [0.17420956221462447, 0.14605270742334658], 'false,true': [0.2091760238040002, 0.15999999999999953]}, {'': [0.2437107504793608, 0.16161565277019183], 'true': [0.24366352318009946, 0.2413696703282902], 'true,false': [0.244983430861878, 0.23315182613521263], 'true,false,true': [0.24489795918367355, 0.24173553719008264], 'true,false,false': [0.24173553719008264, 0.2040816326530612], 'false': [0.1732870857777106, 0.1457184721094361], 'false,true': [0.20799876295214254, 0.15999999999999967]}, {'': [0.24358519092549577, 0.16102202462023898], 'true': [0.2436635231801065, 0.24040290855188662], 'true,false': [0.2442132411930144, 0.23288524759022633], 'true,false,true': [0.24489795918367332, 0.2417355371900829], 'true,false,false': [0.2417355371900829, 0.20408163265306128], 'false': [0.17256100124034457, 0.14542842580239843], 'false,true': [0.2070104574667577, 0.15999999999999995]}, {'': [0.2435232438971302, 0.16056372395013596], 'true': [0.2436635231801034, 0.23993332131915635], 'true,false': [0.24382884959637013, 0.23277095782172413], 'true,false,true': [0.2448979591836737, 0.24173553719008273], 'true,false,false': [0.24173553719008273, 0.2040816326530612], 'false': [0.17201649234647468, 0.1451780284837443], 'false,true': [0.20620522847115785, 0.1599999999999999]}, {'': [0.24349468828679, 0.16021859518560444], 'true': [0.24366352318011533, 0.23971846166636634], 'true,false': [0.2436520672346653, 0.23272063453101924], 'true,false,true': [0.24489795918367374, 0.24173553719008273], 'true,false,false': [0.24173553719008273, 0.20408163265306126], 'false': [0.17162269216738668, 0.14496279214905491], 'false,true': [0.20556325600500122, 0.16000000000000006]}, {'': [0.2434817327151265, 0.15996205360372062], 'true': [0.2436635231801038, 0.23962063189587657], 'true,false': [0.24357324953519555, 0.2326959022580774], 'true,false,true': [0.24489795918367335, 0.2417355371900827], 'true,false,false': [0.2417355371900827, 0.2040816326530612], 'false': [0.1713448471236354, 0.14477844206445709], 'false,true': [0.2050589122149308, 0.16000000000000014]}, {'': [0.24347574793721724, 0.1597718836625833], 'true': [0.24366352318010848, 0.23957464981292653], 'true,false': [0.24353802746155118, 0.23268189473355327], 'true,false,true': [0.2448979591836737, 0.24173553719008273], 'true,false,false': [0.24173553719008273, 0.20408163265306123], 'false': [0.17115159610949635, 0.1446210148970992], 'false,true': [0.20466631919038764, 0.16000000000000014]}, {'': [0.2434728729946759, 0.15963016270048597], 'true': [0.24366352318011011, 0.23955180114768293], 'true,false': [0.2435219333806154, 0.23267284196553628], 'true,false,true': [0.24489795918367346, 0.24173553719008262], 'true,false,false': [0.24173553719008262, 0.2040816326530612], 'false': [0.17101788121398243, 0.1444869093660206], 'false,true': [0.20436229301424438, 0.16000000000000011]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;false;haswordvenue(A, J), haswordtitle(K, J).;true;true
1;false,true;title(L, K), venue(L, B).;true;true
1;false,true,true;samebib(L, M), venue(M, A).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.27854694504975613;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.2867203636709409;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.44905802600860323;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.44905802600860323;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.5724346493852266;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.1914822684328457;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.05814893509951237;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.05814893509951237;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.2411503606196619;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.24811816884741328;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.3851926776601658;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.3851926776601658;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.48767788391726297;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( title(L, K), venue(L, B) )
%   | | then if ( samebib(L, M), venue(M, A) )
%   | | | then return 0.34839109804469576;  // std dev = 2.639, 28.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=14 */
%   | | | else return -0.15160890195530377;  // std dev = 0.037, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | else return 0.13497714535974895;  // std dev = 0.457, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | else return 0.05092203251355405;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.20289930723994204;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.20848477447886868;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.31518052304212246;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.31518052304212246;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.3912569620992536;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.15025964966533645;  // std dev = 0.457, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.04434629760466855;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.03881672043938632;  // std dev = 0.382, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.16640029396569495;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.17062637354018492;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.24804771389482108;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.24804771389482108;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.3005711547884894;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.12682918322756975;  // std dev = 0.456, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.03842866223690456;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.033544581201227684;  // std dev = 0.382, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.13360339271793026;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.13664585375352234;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.19020231164899937;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.19020231164899937;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.22629823971521876;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.10539077252424614;  // std dev = 0.455, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.033154945921885746;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.02887907796267461;  // std dev = 0.381, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.10551742939082928;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.10762034996184403;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.14379027326522745;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.14379027326522745;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.16984358676510128;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( title(L, K), venue(L, A) )
%   | | then if ( samebib(L, M), venue(M, B) )
%   | | | then return 0.3170788705867321;  // std dev = 2.620, 28.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=14 */
%   | | | else return -0.18292112941326819;  // std dev = 0.165, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | else return 0.0646896851163777;  // std dev = 0.421, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | else return 0.024780586028828804;  // std dev = 0.381, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, B) )
%   | then if ( samebib(E, F), venue(F, A) )
%   | | then return 0.6619245029632226;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.3140486978230416;  // std dev = 0.064, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0.46192450296322257;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.08006052311436539;  // std dev = 0.493, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.09442290810957087;  // std dev = 3.490, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.1128859181436252;  // std dev = 2.598, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, M), haswordvenue(B, M) )
%   | | | then return 0.07531335345581769;  // std dev = 1.844, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.02429678056413428;  // std dev = 2.819, 54.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=11 */
%   | | else return 0.019920111586041015;  // std dev = 0.381, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.06356146678621849;  // std dev = 0.492, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.06209458316513356;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.0798215479051692;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.08443584420203289;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.10104183313636735;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.06081664661319627;  // std dev = 0.433, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.018331538086188395;  // std dev = 0.380, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.016987272780315605;  // std dev = 0.380, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04885500446434123;  // std dev = 0.492, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.04756216640296148;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.05990417518779126;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.06335446712404859;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.0773681737517355;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( title(L, K), venue(L, B) )
%   | | then if ( samebib(L, M), venue(M, A) )
%   | | | then return 0.25721205967598;  // std dev = 2.612, 28.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=14 */
%   | | | else return -0.16220484231682877;  // std dev = 0.181, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | else return 0.021167596715976643;  // std dev = 0.416, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | else return 0.014457336280099571;  // std dev = 0.380, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.5997074645720937;  // std dev = 0.134, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.3823925703200533;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.39895914543618954;  // std dev = 0.877, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.03526468378450023;  // std dev = 0.492, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.04012651126933303;  // std dev = 3.489, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.0505116397867402;  // std dev = 2.598, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(A, M) )
%   | | then return 0.0411078314889847;  // std dev = 0.417, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.012283181877903577;  // std dev = 0.380, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.005141563477032775;  // std dev = 0.365, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */


Results
   AUC ROC   = 0.578346
   AUC PR    = 0.438886
   CLL	      = -0.630454
   Precision = 0.755869 at threshold = 0.5
   Recall    = 0.070925
   F1        = 0.129682


Total learning time: 99.30047297477722 seconds
Total inference time: 8.104 seconds
AUC ROC: 0.578346


Results scoring model
   AUC ROC   = 0.560384
   AUC PR    = 0.477357
   CLL	      = -0.660681
   Precision = 0.701493 at threshold = 0.5
   Recall    = 0.062918
   F1        = 0.115479


Total scoring time: 1.245 seconds
Refined model CLL: -0.660681


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.578346
   AUC PR    = 0.438886
   CLL	      = -0.630454
   Precision = 0.755869 at threshold = 0.5
   Recall    = 0.070925
   F1        = 0.129682


Total learning time: 191.65240423011778 seconds
Total inference time: 8.104 seconds
AUC ROC: 0.578346
Total revision time: 191.65240423011778
Best scored revision CLL: -0.660681


Dataset: 11_yeast_cora, Fold: 4, Type: Transfer (trRDN-B), Time: 00:44:22
{'AUC ROC': 0.578346, 'AUC PR': 0.438886, 'CLL': -0.630454, 'Precision': [0.755869, 0.5], 'Recall': 0.070925, 'F1': 0.129682, 'Learning time': 191.65240423011778, 'Inference time': 8.104, 'parameter': {'AUC ROC': 0.566212, 'AUC PR': 0.422741, 'CLL': -0.638818, 'Precision': [0.65625, 0.5], 'Recall': 0.037004, 'F1': 0.070058, 'Learning time': 89.90893125534058, 'Inference time': 7.954}}


Starting fold 5

Target train facts examples: 8644
Target train pos examples: 550
Target train neg examples: 500

Target test facts examples: 33914
Target test pos  examples: 2467
Target test neg examples: 4522

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.443242102801371;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else if ( haswordauthor(E, C) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.6359267128772901;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return 0.7470378239884012;  // std dev = 1.333, 18.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=16 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then return 0.15444523139580865;  // std dev = 0.457, 54.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( haswordtitle(L, J) )
%   | | | then return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.17522210583121967;  // std dev = 2.980, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return 0.04458961306561406;  // std dev = 2.992, 59.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return 0.05814893509951237;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.3803254334818479;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.5391563224386602;  // std dev = 0.399, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else return 0.6518646965464773;  // std dev = 0.289, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then if ( author(I, H), venue(I, A) )
%   | | then if ( author(J, H), venue(J, B) )
%   | | | then return 0.3382893592786268;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.1617106407213732;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.14263718536558287;  // std dev = 0.460, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | then return 0.1414822481952805;  // std dev = 0.460, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.03765285941803126;  // std dev = 2.990, 59.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return 0.05244716084236053;  // std dev = 2.967, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.31149293361789177;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.4827443838023345;  // std dev = 0.330, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, B) )
%   | | then if ( samebib(G, H), venue(H, A) )
%   | | | then return 0.605627612210045;  // std dev = 0.881, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.186168021971304;  // std dev = 0.059, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.09353343588180513;  // std dev = 0.444, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then return 0.19644488012693542;  // std dev = 1.368, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.10543827749644023;  // std dev = 2.792, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.032687185853584;  // std dev = 2.990, 59.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return 0.04587099528048046;  // std dev = 2.967, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then return 0.24615384430655277;  // std dev = 0.492, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | then return 0.30498809577762254;  // std dev = 0.399, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else return 0.4745740686710699;  // std dev = 0.035, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then return 0.09559551208356615;  // std dev = 0.442, 54.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, A) )
%   | | | then return 0.16581072719776435;  // std dev = 1.368, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.08907669023811221;  // std dev = 2.792, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.027057634647144058;  // std dev = 2.989, 59.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return 0.041220162849216216;  // std dev = 2.968, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.5094257524692856;  // std dev = 0.116, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(F, D) )
%   | | | then return 0.12171115717583852;  // std dev = 2.596, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.1829484701670714;  // std dev = 1.907, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(I, G) )
%   | | | then return 0.14165417711885844;  // std dev = 2.542, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   | | | else return -0.17610159667929684;  // std dev = 1.884, 23.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
%   | | else return 0.21570860416992022;  // std dev = 0.484, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | then if ( author(L, K), venue(L, A) )
%   | | then return 0.16729070529181636;  // std dev = 0.491, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.056271457004489184;  // std dev = 0.439, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.04646661510829865;  // std dev = 0.411, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.3904813043541602;  // std dev = 0.108, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.09022098776371587;  // std dev = 2.582, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.14654911159510728;  // std dev = 1.907, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.14995760442928557;  // std dev = 0.489, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.24791418094308107;  // std dev = 0.333, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, B) )
%   | | then return 0.14117430408478182;  // std dev = 0.424, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( author(L, J), venue(L, A) )
%   | | | then return -0.17244537945247243;  // std dev = 0.001, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.07179901810353242;  // std dev = 2.911, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else return 0.036931659584904346;  // std dev = 0.415, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then return 0.10601827474259931;  // std dev = 0.486, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else return 0.23214923671188537;  // std dev = 0.283, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, B) )
%   | | then if ( samebib(H, I), venue(I, A) )
%   | | | then return 0.43008933860661713;  // std dev = 0.875, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.20159779502224442;  // std dev = 0.064, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(J, G), venue(J, A) )
%   | | | then return -0.1492063403974849;  // std dev = 0.001, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.0591972754993331;  // std dev = 2.911, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, M), haswordvenue(B, M) )
%   | | | then return -0.17830690526032714;  // std dev = 0.052, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0870643441159495;  // std dev = 4.091, 83.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=24 */
%   | | else return -0.001305580817219021;  // std dev = 0.390, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then if ( author(F, D), venue(F, A) )
%   | | then return -0.48972678363808514;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0.22159305859531184;  // std dev = 0.412, 31.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=21 */
%   | else if ( author(G, D), venue(G, B) )
%   | | then return -0.25129503783881685;  // std dev = 0.317, 24.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=4 */
%   | | else if ( author(H, D), venue(H, A) )
%   | | | then return 0.11205187499508644;  // std dev = 1.099, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.07649522077960326;  // std dev = 2.953, 46.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=18 */
%   else if ( haswordvenue(A, I), haswordvenue(B, I) )
%   | then if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, A) )
%   | | | then return 0.031408958594771226;  // std dev = 2.729, 36.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
%   | | | else return -0.20273741499838124;  // std dev = 1.540, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | else return 0.09865268538211812;  // std dev = 0.484, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   | else return 0.025516287740712917;  // std dev = 0.407, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then if ( author(F, D), venue(F, A) )
%   | | then return -0.37032438945598545;  // std dev = 2.11e-08, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( haswordvenue(A, C) )
%   | | | then return 0.30816061444211196;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.14369930680684798;  // std dev = 2.260, 26.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=16 */
%   | else if ( author(G, D), venue(G, B) )
%   | | then return -0.1948714709587693;  // std dev = 0.315, 24.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=4 */
%   | | else if ( haswordauthor(D, H), haswordvenue(A, H) )
%   | | | then return 0.05747818721707792;  // std dev = 0.311, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.06574458101561652;  // std dev = 3.135, 48.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=18 */
%   else if ( haswordvenue(A, I), haswordvenue(B, I) )
%   | then if ( haswordtitle(J, I) )
%   | | then return 0.06522340851128884;  // std dev = 0.486, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.16516412711704498;  // std dev = 0.341, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   | else return 0.021481015513611486;  // std dev = 0.407, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(F, D) )
%   | | then if ( author(G, F), title(G, E) )
%   | | | then return 0.24383372285242885;  // std dev = 1.850, 20.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=15 */
%   | | | else return -0.2148803038341037;  // std dev = 1.130, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | else return 0.04358571790189204;  // std dev = 0.481, 783.000 (wgt'ed) examples reached here.  /* #neg=323 #pos=460 */
%   | else return 0.16262672920149043;  // std dev = 0.287, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | then return -0.18073891183633145;  // std dev = 0.160, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( haswordauthor(K, H) )
%   | | | then return 0.05971205371258102;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.0643713361810997;  // std dev = 4.061, 86.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=24 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.05117087160265069;  // std dev = 0.436, 91.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=26 */
%   | | else return -0.23406677508582785;  // std dev = 0.145, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */


Results
   AUC ROC   = 0.54958
   AUC PR    = 0.398706
   CLL	      = -0.706985
   Precision = 0.375163 at threshold = 0.5
   Recall    = 0.933117
   F1        = 0.535162


Total learning time: 49.22825050354004 seconds
Total inference time: 11.972 seconds
AUC ROC: 0.54958


Results scoring model
   AUC ROC   = 0.676642
   AUC PR    = 0.672871
   CLL	      = -0.619906
   Precision = 0.631847 at threshold = 0.5
   Recall    = 0.901818
   F1        = 0.743071


Total scoring time: 1.278 seconds
Parameter learned model CLL: -0.619906


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordauthor(E, C)', 'true,false,false': 'haswordvenue(A, F), haswordtitle(G, F)', 'false': 'haswordvenue(A, H), haswordauthor(I, H)', 'false,false': 'haswordvenue(B, J), haswordauthor(K, J)', 'false,false,true': 'haswordtitle(L, J)', 'false,false,false': 'haswordvenue(A, M), haswordtitle(N, M)'}, {'true,true': [0.493, 334, 471], 'true,false,true': [0.0, 0, 4], 'true,false,false,true': [1.247, 2, 7], 'true,false,false,false': [1.333, 2, 16], 'false,true': [0.457, 38, 16], 'false,false,true,true': [0.894, 4, 1], 'false,false,true,false': [2.98, 28, 13], 'false,false,false,true': [2.992, 48, 11], 'false,false,false,false': [2.966, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'false': 'haswordvenue(A, G), haswordauthor(H, G)', 'false,true': 'author(I, H), venue(I, A)', 'false,true,true': 'author(J, H), venue(J, B)', 'false,false': 'haswordvenue(B, K), haswordauthor(L, K)', 'false,false,false': 'haswordvenue(B, M), haswordtitle(N, M)'}, {'true,true': [0.493, 334, 471], 'true,false,true': [0.399, 2, 8], 'true,false,false': [0.289, 2, 19], 'false,true,true,true': [1.0, 2, 2], 'false,true,true,false': [0.0, 4, 0], 'false,true,false': [0.46, 32, 14], 'false,false,true': [0.46, 32, 14], 'false,false,false,true': [2.99, 48, 11], 'false,false,false,false': [2.967, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'false': 'haswordvenue(A, E), haswordauthor(F, E)', 'false,true': 'author(G, F), venue(G, B)', 'false,true,true': 'samebib(G, H), venue(H, A)', 'false,false': 'haswordvenue(B, I), haswordauthor(J, I)', 'false,false,true': 'author(K, J), venue(K, A)', 'false,false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true': [0.493, 334, 471], 'true,false': [0.33, 4, 27], 'false,true,true,true': [0.881, 1, 4], 'false,true,true,false': [0.059, 5, 0], 'false,true,false': [0.444, 32, 12], 'false,false,true,true': [1.368, 5, 3], 'false,false,true,false': [2.792, 27, 11], 'false,false,false,true': [2.99, 48, 11], 'false,false,false,false': [2.967, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordtitle(E, D)', 'true,false': 'haswordvenue(B, F), haswordtitle(G, F)', 'false': 'haswordvenue(A, H), haswordauthor(I, H)', 'false,false': 'haswordvenue(B, J), haswordauthor(K, J)', 'false,false,true': 'author(L, K), venue(L, A)', 'false,false,false': 'haswordvenue(B, M), haswordtitle(N, M)'}, {'true,true': [0.492, 336, 479], 'true,false,true': [0.399, 2, 8], 'true,false,false': [0.035, 0, 11], 'false,true': [0.442, 38, 16], 'false,false,true,true': [1.368, 5, 3], 'false,false,true,false': [2.792, 27, 11], 'false,false,false,true': [2.989, 48, 11], 'false,false,false,false': [2.968, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordvenue(A, D)', 'true,true,false': 'haswordtitle(F, D)', 'true,false': 'haswordvenue(A, G), haswordauthor(H, G)', 'true,false,true': 'haswordtitle(I, G)', 'false': 'haswordvenue(B, J), haswordauthor(K, J)', 'false,true': 'author(L, K), venue(L, A)'}, {'true,true,true': [0.116, 0, 10], 'true,true,false,true': [2.596, 13, 14], 'true,true,false,false': [1.907, 18, 6], 'true,false,true,true': [2.542, 12, 14], 'true,false,true,false': [1.884, 17, 6], 'true,false,false': [0.484, 278, 448], 'false,true,true': [0.491, 6, 4], 'false,true,false': [0.439, 32, 12], 'false,false': [0.411, 124, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordauthor(F, C)', 'true,true,false': 'haswordtitle(G, D)', 'true,false': 'haswordtitle(H, C)', 'false': 'haswordvenue(A, I), haswordauthor(J, I)', 'false,true': 'author(K, J), venue(K, B)', 'false,true,false': 'author(L, J), venue(L, A)'}, {'true,true,true': [0.108, 0, 10], 'true,true,false,true': [2.582, 13, 14], 'true,true,false,false': [1.907, 18, 6], 'true,false,true': [0.489, 304, 449], 'true,false,false': [0.333, 3, 19], 'false,true,true': [0.424, 6, 4], 'false,true,false,true': [0.001, 3, 0], 'false,true,false,false': [2.911, 29, 12], 'false,false': [0.415, 124, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordtitle(E, D)', 'false': 'haswordvenue(A, F), haswordauthor(G, F)', 'false,true': 'author(H, G), venue(H, B)', 'false,true,true': 'samebib(H, I), venue(I, A)', 'false,true,false': 'author(J, G), venue(J, A)', 'false,false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false,false,true': 'haswordtitle(L, M), haswordvenue(B, M)'}, {'true,true': [0.486, 336, 479], 'true,false': [0.283, 2, 19], 'false,true,true,true': [0.875, 1, 4], 'false,true,true,false': [0.064, 5, 0], 'false,true,false,true': [0.001, 3, 0], 'false,true,false,false': [2.911, 29, 12], 'false,false,true,true': [0.052, 12, 0], 'false,false,true,false': [4.091, 59, 24], 'false,false,false': [0.39, 53, 12]}], ['samevenue(A, B)', {'': 'haswordvenue(B, C), haswordauthor(D, C)', 'true': 'haswordtitle(E, C)', 'true,true': 'author(F, D), venue(F, A)', 'true,false': 'author(G, D), venue(G, B)', 'true,false,false': 'author(H, D), venue(H, A)', 'false': 'haswordvenue(A, I), haswordvenue(B, I)', 'false,true': 'haswordvenue(A, J), haswordauthor(K, J)', 'false,true,true': 'author(L, K), venue(L, A)'}, {'true,true,true': [0.0, 8, 0], 'true,true,false': [0.412, 10, 21], 'true,false,true': [0.317, 20, 4], 'true,false,false,true': [1.099, 3, 3], 'true,false,false,false': [2.953, 28, 18], 'false,true,true,true': [2.729, 20, 16], 'false,true,true,false': [1.54, 9, 4], 'false,true,false': [0.484, 278, 448], 'false,false': [0.407, 124, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(B, C), haswordauthor(D, C)', 'true': 'haswordtitle(E, C)', 'true,true': 'author(F, D), venue(F, A)', 'true,true,false': 'haswordvenue(A, C)', 'true,false': 'author(G, D), venue(G, B)', 'true,false,false': 'haswordauthor(D, H), haswordvenue(A, H)', 'false': 'haswordvenue(A, I), haswordvenue(B, I)', 'false,true': 'haswordtitle(J, I)'}, {'true,true,true': [2.11e-08, 8, 0], 'true,true,false,true': [0.0, 0, 5], 'true,true,false,false': [2.26, 10, 16], 'true,false,true': [0.315, 20, 4], 'true,false,false,true': [0.311, 1, 3], 'true,false,false,false': [3.135, 30, 18], 'false,true,true': [0.486, 304, 449], 'false,true,false': [0.341, 3, 19], 'false,false': [0.407, 124, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordtitle(E, D)', 'true,true': 'haswordauthor(F, D)', 'true,true,true': 'author(G, F), title(G, E)', 'false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false,true': 'haswordtitle(I, J), haswordvenue(A, J)', 'false,true,false': 'haswordauthor(K, H)', 'false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true,true,true': [1.85, 5, 15], 'true,true,true,false': [1.13, 8, 4], 'true,true,false': [0.481, 323, 460], 'true,false': [0.287, 2, 19], 'false,true,true': [0.16, 14, 0], 'false,true,false,true': [1.095, 3, 2], 'false,true,false,false': [4.061, 62, 24], 'false,false,true': [0.436, 65, 26], 'false,false,false': [0.145, 18, 0]}]]
[{'': [0.24084270048762138, 0.18394619617433927], 'true': [0.2427591528104568, 0.11238293444328941], 'false': [0.20850480109739317, 0.17437500000000122], 'false,false': [0.21172022684309966, 0.15574022776238935], 'false,false,true': [0.16000000000000003, 0.2165377751338484], 'false,false,false': [0.15168055156564153, 0.15999999999999948], 'true,false': [0.0, 0.12620027434842318], 'true,false,false': [0.17283950617283939, 0.09876543209876518]}, {'': [0.23983749952923475, 0.18316852484472723], 'true': [0.24275915281046145, 0.11070930357100793], 'false': [0.2085048010973941, 0.17364766588905411], 'false,true': [0.18750000000000006, 0.2117202268431006], 'false,true,true': [0.25000000000000006, 0.0], 'false,false': [0.21139250536203277, 0.15572936782372815], 'false,false,false': [0.15157277294947039, 0.16007498498138042], 'true,false': [0.1591682503182164, 0.08353581541988583]}, {'': [0.23885205644467739, 0.1819098132911127], 'true': [0.24275915281046562, 0.10915401375506295], 'false': [0.20596504587321451, 0.17309921868534434], 'false,true': [0.23472492277258175, 0.19692841504758868], 'false,true,true': [0.15527731310621523, 0.0007023692846259755], 'false,false': [0.21136259073047775, 0.15571618343387883], 'false,false,true': [0.23391148266462025, 0.2051750726782134], 'false,false,false': [0.15155982547552513, 0.16008486620760623]}, {'': [0.23830260712994736, 0.17870552627816724], 'true': [0.2417583999895217, 0.08292771193092846], 'false': [0.19559730937995606, 0.1725593786389453], 'false,false': [0.21098219271434468, 0.15570518086380639], 'false,false,true': [0.23386157471855493, 0.2051414611607409], 'false,false,false': [0.15145725329001458, 0.16015824112391205], 'true,false': [0.15895872898403013, 0.00011365208939045408]}, {'': [0.2379800769424555, 0.17814117228690346], 'true': [0.2303502212701036, 0.23722722978260039], 'true,false': [0.22944276626914828, 0.23460268521574196], 'true,true': [0.013549062743329987, 0.22662254148777666], 'true,false,true': [0.24852071005917148, 0.15430114959287158], 'true,true,false': [0.24965706447187916, 0.15157003273098585], 'false': [0.20357219692966838, 0.16932555478770644], 'false,true': [0.24070829327955673, 0.19284971697821005]}, {'': [0.2339049564737063, 0.1778090828963773], 'true': [0.20572175597402434, 0.23529642327842218], 'true,false': [0.2386501345503377, 0.11118493017201135], 'true,true': [0.011567476610798755, 0.2160073388720591], 'true,true,false': [0.24690413326507474, 0.1515695793238294], 'false': [0.19447748548064223, 0.17188929412209564], 'false,true': [0.180083858075859, 0.19637823283393174], 'false,true,false': [4.3600471119157696e-07, 0.20667993134598556]}, {'': [0.23241988428802243, 0.17722407644198837], 'true': [0.23594119402480998, 0.08025013913212269], 'false': [0.19260395174806397, 0.17185546585846262], 'false,true': [0.17667361152898714, 0.19533621555410863], 'false,true,false': [3.450511816318243e-07, 0.2066678068239343], 'false,true,true': [0.15301910518006784, 0.0008138004817828948], 'false,false': [0.183991153337906, 0.1523324242090927], 'false,false,true': [0.00022763316712714568, 0.2016639752274613]}, {'': [0.19894454391935879, 0.22295838406835536], 'false': [0.23404172008759788, 0.1657760756869185], 'false,true': [0.2110965324686643, 0.23453227238164953], 'false,true,true': [0.2068678242543548, 0.1825275590513461], 'true': [0.2171955902320414, 0.18619491372204017], 'true,true': [-2.7755575615628914e-17, 0.16945613324243897], 'true,false': [0.10023553913661416, 0.19108333545854353], 'true,false,false': [0.20124017151700616, 0.18961265279461229]}, {'': [0.17958354126622234, 0.22206270005646486], 'false': [0.23332541506392773, 0.16571055758248746], 'false,true': [0.23646857084832804, 0.11603915207367904], 'true': [0.18151440569270308, 0.1766166499086709], 'true,true': [5.551115123125783e-17, 0.16841960365576827], 'true,false': [0.0995373425210514, 0.1908476016985664], 'true,false,false': [0.024114690940211334, 0.2047367545233191], 'true,true,false': [0.0, 0.1964454854727174]}, {'': [0.22697627344703875, 0.1730301613120325], 'true': [0.23034906706598082, 0.08252103071009873], 'true,true': [0.19618580681618675, 0.2317139755586577], 'true,true,true': [0.17110443413383536, 0.10647649569574756], 'false': [0.1756499929835709, 0.17013808808960867], 'false,true': [0.001831971305395193, 0.19439741368081276], 'false,true,false': [0.23965077283238906, 0.19176521163038984], 'false,false': [0.190125392875197, 0.0011663246426070627]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,false;haswordauthor(E, C).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;false;haswordvenue(A, G), haswordauthor(H, G).;true;true
1;false,true;author(I, H), venue(I, A).;true;true
1;false,true,true;author(J, H), venue(J, B).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;false;haswordvenue(A, E), haswordauthor(F, E).;true;true
2;false,true;author(G, F), venue(G, B).;true;true
2;false,true,true;samebib(G, H), venue(H, A).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordvenue(A, D), haswordtitle(E, D).;true;true
3;true,false;haswordvenue(B, F), haswordtitle(G, F).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;false;haswordvenue(A, I), haswordauthor(J, I).;true;true
5;false,true;author(K, J), venue(K, B).;true;true
5;false,true,false;author(L, J), venue(L, A).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;false;haswordvenue(A, F), haswordauthor(G, F).;true;true
6;false,true;author(H, G), venue(H, B).;true;true
6;false,true,true;samebib(H, I), venue(I, A).;true;true
6;false,true,false;author(J, G), venue(J, A).;true;true
6;false,false;haswordvenue(A, K), haswordtitle(L, K).;true;true
6;false,false,true;haswordtitle(L, M), haswordvenue(B, M).;true;true
7;;samevenue(A, B) :- haswordvenue(B, C), haswordauthor(D, C).;true;true
7;true;haswordtitle(E, C).;true;true
7;true,true;author(F, D), venue(F, A).;true;true
8;;samevenue(A, B) :- haswordvenue(B, C), haswordauthor(D, C).;true;true
8;true;haswordtitle(E, C).;true;true
8;true,true;author(F, D), venue(F, A).;true;true
8;true,true,false;haswordvenue(A, C).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;false;haswordvenue(B, H), haswordtitle(I, H).;true;true
9;false,true;haswordtitle(I, J), haswordvenue(A, J).;true;true
9;false,false;haswordvenue(A, L), haswordtitle(M, L).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.443242102801371;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.7291166770349955;  // std dev = 0.335, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, B) )
%   | | then if ( samebib(G, H), venue(H, A) )
%   | | | then return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(I, F), venue(I, A) )
%   | | | then return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.15083186192878065;  // std dev = 2.913, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( haswordtitle(L, J) )
%   | | | then return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.17522210583121967;  // std dev = 2.980, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.051131391239862906;  // std dev = 0.395, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.3803254334818479;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.6157326050686436;  // std dev = 0.335, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, A) )
%   | | then if ( samebib(G, H), venue(H, B) )
%   | | | then return 0.6392119282680095;  // std dev = 0.899, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.15769426647032894;  // std dev = 0.016, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(I, F), venue(I, B) )
%   | | | then return -0.16343846579291768;  // std dev = 0.003, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.1290715491217583;  // std dev = 2.884, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then if ( haswordtitle(L, J) )
%   | | | then return 0.03693744759731563;  // std dev = 0.807, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.1534329638272584;  // std dev = 2.940, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.04479249977758044;  // std dev = 0.395, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.6805851247859591;  // std dev = 0.056, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.2449182844345499;  // std dev = 2.596, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.04746202633921467;  // std dev = 1.980, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.3226813064206765;  // std dev = 0.491, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.47549952672721435;  // std dev = 0.343, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, B) )
%   | | then if ( samebib(K, L), venue(L, A) )
%   | | | then return 0.5342138905737382;  // std dev = 0.901, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.1371885616510316;  // std dev = 0.014, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.09339221621720721;  // std dev = 0.439, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.062471098592311;  // std dev = 0.413, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then return 0.24528990666542208;  // std dev = 0.490, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else return 0.4228986175459215;  // std dev = 0.287, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, A) )
%   | | then if ( samebib(H, I), venue(I, B) )
%   | | | then return 0.5200481531158161;  // std dev = 0.900, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14625031652760598;  // std dev = 0.016, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.08184369183113352;  // std dev = 0.436, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then if ( haswordtitle(L, J) )
%   | | | then return 0.0099907349158465;  // std dev = 0.706, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.11114858274088883;  // std dev = 2.908, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return 0.024193891118573393;  // std dev = 2.992, 59.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return 0.0377532131524717;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return -0.3992811417125419;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.3775625863983865;  // std dev = 1.919, 24.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=19 */
%   | | else if ( haswordtitle(H, C) )
%   | | | then return -0.2527603659669445;  // std dev = 1.550, 20.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=3 */
%   | | | else return 0.2823800560905491;  // std dev = 0.907, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( haswordtitle(K, I) )
%   | | | then return 0.15767810343418012;  // std dev = 2.542, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   | | | else return -0.08972099213358319;  // std dev = 1.910, 23.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
%   | | else return 0.21318343022930816;  // std dev = 0.484, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | then return 0.08173479068499281;  // std dev = 0.428, 54.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
%   | else return 0.042919015681867526;  // std dev = 0.409, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.3838586301004911;  // std dev = 0.088, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.08411098589167038;  // std dev = 2.304, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.15250620396527362;  // std dev = 1.784, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( haswordtitle(J, C) )
%   | | | then return -0.0046433076528216094;  // std dev = 3.037, 44.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=16 */
%   | | | else return 0.3422577325480757;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.16117709670590868;  // std dev = 0.484, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | then if ( author(M, L), venue(M, A) )
%   | | then return 0.1232955845384541;  // std dev = 0.387, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.05549804537198217;  // std dev = 0.435, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.03651593217094047;  // std dev = 0.409, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.3004962592581656;  // std dev = 0.080, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(F, E), venue(F, A) )
%   | | | then return 0.0549755830967225;  // std dev = 2.513, 31.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | | else return -0.141313918491414;  // std dev = 1.456, 20.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.11206669181613095;  // std dev = 0.487, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.21300005921248533;  // std dev = 0.340, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then return 0.059135316694145436;  // std dev = 0.426, 54.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
%   | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | | then return -0.18218400531416648;  // std dev = 0.041, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.08462847494621561;  // std dev = 4.048, 83.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=24 */
%   | | else return -8.193686540392013E-4;  // std dev = 0.383, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.07874095502091107;  // std dev = 0.481, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then return 0.14331207854440442;  // std dev = 0.396, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return 0.24182239847783962;  // std dev = 0.186, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.2806858783715191;  // std dev = 0.133, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return -0.16318011349233205;  // std dev = 0.071, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( haswordauthor(M, J) )
%   | | | then return 0.1307874301751395;  // std dev = 0.777, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.07055056410369401;  // std dev = 4.069, 86.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=24 */
%   | else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | | then return 0.06632505121133442;  // std dev = 0.435, 91.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=26 */
%   | | else return -0.21654651248107293;  // std dev = 0.115, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.059345002871565085;  // std dev = 0.481, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else return 0.16950729402353099;  // std dev = 0.282, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, A) )
%   | | then return 0.009117121606776118;  // std dev = 0.320, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( author(I, G), venue(I, B) )
%   | | | then return 0.053165448548873326;  // std dev = 0.910, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.04863933352403116;  // std dev = 2.805, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, B) )
%   | | | then return -0.03211240906567043;  // std dev = 0.647, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.05975286699387898;  // std dev = 2.860, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return -0.0019381053911505773;  // std dev = 2.955, 59.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return 0.01510340618295113;  // std dev = 2.952, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.04919516846453807;  // std dev = 0.399, 39.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=21 */
%   | else if ( author(F, D), venue(F, B) )
%   | | then return -0.17023348650117778;  // std dev = 0.296, 24.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=4 */
%   | | else if ( author(G, D), venue(G, A) )
%   | | | then return 0.04310831428299002;  // std dev = 0.911, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.06362469711788268;  // std dev = 2.926, 46.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=18 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then if ( haswordtitle(I, H) )
%   | | then return 0.04994416333919197;  // std dev = 0.487, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.11185400988348283;  // std dev = 0.336, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | | then return -0.14060326029092138;  // std dev = 0.068, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.06279469152879896;  // std dev = 4.039, 83.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=24 */
%   | | else return -0.012886616834645214;  // std dev = 0.380, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */


Results
   AUC ROC   = 0.554632
   AUC PR    = 0.403984
   CLL	      = -0.707805
   Precision = 0.373829 at threshold = 0.5
   Recall    = 0.921767
   F1        = 0.53193


Total learning time: 47.78422212600708 seconds
Total inference time: 5.972 seconds
AUC ROC: 0.554632


Results scoring model
   AUC ROC   = 0.678847
   AUC PR    = 0.673553
   CLL	      = -0.619269
   Precision = 0.628906 at threshold = 0.5
   Recall    = 0.878182
   F1        = 0.732929


Total scoring time: 1.225 seconds
Refined model CLL: -0.619269


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.554632
   AUC PR    = 0.403984
   CLL	      = -0.707805
   Precision = 0.373829 at threshold = 0.5
   Recall    = 0.921767
   F1        = 0.53193


Total learning time: 99.5154726295471 seconds
Total inference time: 5.972 seconds
AUC ROC: 0.554632
Total revision time: 99.5154726295471
Best scored revision CLL: -0.619269


Dataset: 11_yeast_cora, Fold: 5, Type: Transfer (trRDN-B), Time: 00:46:20
{'AUC ROC': 0.554632, 'AUC PR': 0.403984, 'CLL': -0.707805, 'Precision': [0.373829, 0.5], 'Recall': 0.921767, 'F1': 0.53193, 'Learning time': 99.5154726295471, 'Inference time': 5.972, 'parameter': {'AUC ROC': 0.54958, 'AUC PR': 0.398706, 'CLL': -0.706985, 'Precision': [0.375163, 0.5], 'Recall': 0.933117, 'F1': 0.535162, 'Learning time': 49.22825050354004, 'Inference time': 11.972}}


Starting fold 1

Target train facts examples: 7463
Target train pos examples: 368
Target train neg examples: 688

Target test facts examples: 35095
Target test pos  examples: 2649
Target test neg examples: 4334

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.23843062524035266;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.4581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.424815601766179;  // std dev = 2.714, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.004815601766179008;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.004815601766179008;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.20686012285620575;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.3982164798305049;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return 0.45935396641210174;  // std dev = 0.810, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.36287359443791467;  // std dev = 2.715, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.004228390109386251;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.004228390109386251;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.1751801570305961;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.37391135762433364;  // std dev = 0.808, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.3269052770205085;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.2976445171077738;  // std dev = 2.715, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.11231637819360636;  // std dev = 9.13e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0037111125833978686;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.0037111125833978686;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.14514481334590568;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.26358767085800217;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return 0.3022417434729106;  // std dev = 0.801, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.23316088123073275;  // std dev = 2.716, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.1015963294878363;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0032558270569705674;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.0032558270569705674;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.11804668707041945;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.2299388596657689;  // std dev = 0.800, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.20322270711158522;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.17939506450758996;  // std dev = 2.716, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.09269127618926097;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0028554031467501392;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.0028554031467501392;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.09457696812283496;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.17288979964843879;  // std dev = 0.799, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.1588116678226005;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.13524011263964966;  // std dev = 2.716, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.08518475138839687;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.002503460836945874;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.002503460836945874;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.07489163449109286;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.12010128305935322;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return 0.1438835721987973;  // std dev = 0.792, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.10029916433193087;  // std dev = 2.718, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.07877675473109172;  // std dev = 3.73e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0021943081594878503;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.0021943081594878503;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.05877777591804268;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.10151986621385711;  // std dev = 0.796, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.0943077043870714;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.07527807272241388;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.07324622576333704;  // std dev = 3.73e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0019228798175884457;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.0019228798175884457;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04582386394015474;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.08782850991631008;  // std dev = 0.790, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.07129887023227802;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.05528913331740175;  // std dev = 2.718, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then return -0.019981988600391565;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, M), haswordvenue(A, M) )
%   | | | then return -0.06842697784420272;  // std dev = 2.63e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0016846780662751325;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | | | then return 0.004271742742892122;  // std dev = 2.917, 67.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=10 */
%   | | | else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.03554750876544446;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.05357665843513319;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return 0.06666723106390449;  // std dev = 0.790, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.041506415477865995;  // std dev = 2.718, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.06419184008202619;  // std dev = 5.89e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0014732540820548371;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.0014757167188846957;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.555791
   AUC PR    = 0.427997
   CLL	      = -0.659564
   Precision = 0.637427 at threshold = 0.5
   Recall    = 0.041148
   F1        = 0.077305


Total learning time: 54.44864058494568 seconds
Total inference time: 6.743 seconds
AUC ROC: 0.555791


Results scoring model
   AUC ROC   = 0.588262
   AUC PR    = 0.41878
   CLL	      = -0.621843
   Precision = 0.578947 at threshold = 0.5
   Recall    = 0.059783
   F1        = 0.108374


Total scoring time: 1.101 seconds
Parameter learned model CLL: -0.621843


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)', 'false,false': 'haswordvenue(B, L), haswordtitle(M, L)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.816, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.714, 13, 17], 'false,true,true': [0.0, 12, 0], 'false,true,false': [0.354, 64, 11], 'false,false,true': [0.354, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordauthor(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)', 'false,false': 'haswordvenue(B, L), haswordtitle(M, L)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [1.095, 2, 3], 'true,false,false,true': [0.81, 1, 2], 'true,false,false,false': [2.715, 13, 17], 'false,true,true': [5.27e-09, 12, 0], 'false,true,false': [0.354, 64, 11], 'false,false,true': [0.354, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)', 'false,false': 'haswordvenue(B, L), haswordtitle(M, L)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.808, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.715, 13, 17], 'false,true,true': [9.13e-09, 12, 0], 'false,true,false': [0.354, 64, 11], 'false,false,true': [0.354, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordauthor(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)', 'false,false': 'haswordvenue(B, L), haswordtitle(M, L)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [1.095, 2, 3], 'true,false,false,true': [0.801, 1, 2], 'true,false,false,false': [2.716, 13, 17], 'false,true,true': [0.0, 12, 0], 'false,true,false': [0.354, 64, 11], 'false,false,true': [0.354, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)', 'false,false': 'haswordvenue(B, L), haswordtitle(M, L)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.8, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.716, 13, 17], 'false,true,true': [5.27e-09, 12, 0], 'false,true,false': [0.354, 64, 11], 'false,false,true': [0.354, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)', 'false,false': 'haswordvenue(B, L), haswordtitle(M, L)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.799, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.716, 13, 17], 'false,true,true': [5.27e-09, 12, 0], 'false,true,false': [0.354, 64, 11], 'false,false,true': [0.354, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordauthor(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)', 'false,false': 'haswordvenue(B, L), haswordtitle(M, L)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [1.095, 2, 3], 'true,false,false,true': [0.792, 1, 2], 'true,false,false,false': [2.718, 13, 17], 'false,true,true': [3.73e-09, 12, 0], 'false,true,false': [0.354, 64, 11], 'false,false,true': [0.354, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)', 'false,false': 'haswordvenue(B, L), haswordtitle(M, L)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.796, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.717, 13, 17], 'false,true,true': [3.73e-09, 12, 0], 'false,true,false': [0.354, 64, 11], 'false,false,true': [0.354, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordauthor(J, I)', 'false,false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false,false,true': 'haswordtitle(L, M), haswordvenue(A, M)', 'false,false,false': 'haswordvenue(A, N), haswordtitle(P, N)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.79, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.718, 13, 17], 'false,true': [0.331, 7, 1], 'false,false,true,true': [2.63e-09, 12, 0], 'false,false,true,false': [3.064, 64, 11], 'false,false,false,true': [2.917, 57, 10], 'false,false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordauthor(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)', 'false,false': 'haswordvenue(B, L), haswordtitle(M, L)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [1.095, 2, 3], 'true,false,false,true': [0.79, 1, 2], 'true,false,false,false': [2.718, 13, 17], 'false,true,true': [5.89e-09, 12, 0], 'false,true,false': [0.354, 64, 11], 'false,false,true': [0.354, 64, 11], 'false,false,false': [0.0, 4, 0]}]]
[{'': [0.23762656230272572, 0.11496588764697444], 'true': [0.2356675262844691, 0.24376731301939172], 'true,false': [0.22222222222222224, 0.2448979591836734], 'true,false,false': [0.23999999999999994, 0.2455555555555551], 'false': [0.1104505218655035, 0.11985258772632539], 'false,false': [0.12515555555555502, 0.0], 'false,true': [-1.1564823173178714e-17, 0.12515555555555502]}, {'': [0.23716066162823085, 0.11455688633284844], 'true': [0.2356675262844735, 0.24352902641532292], 'true,false': [0.23999999999999994, 0.24397082368635845], 'true,false,false': [0.21859724583033524, 0.24566195763775367], 'false': [0.10989213699570438, 0.1196268538653256], 'false,false': [0.125155555555556, 0.0], 'false,true': [2.3129646346357427e-18, 0.125155555555556]}, {'': [0.2367049716972969, 0.11426488031687218], 'true': [0.23566752628446727, 0.2432006312450957], 'true,false': [0.2176873624141201, 0.24497723310199554], 'true,false,false': [0.23999999999999994, 0.24568445879937517], 'false': [0.10949347876263746, 0.1194656914359021], 'false,false': [0.12515555555555488, 0.0], 'false,true': [6.938893903907228e-18, 0.12515555555555488]}, {'': [0.23636692863361694, 0.11404989376870131], 'true': [0.23566752628446358, 0.24295287544358235], 'true,false': [0.24000000000000005, 0.24332356191069243], 'true,false,false': [0.21362996677670285, 0.2458590881942622], 'false': [0.1091999705719235, 0.11934703718735738], 'false,false': [0.12515555555555585, 0.0], 'false,true': [0.0, 0.12515555555555585]}, {'': [0.23616142231892132, 0.11388747773154602], 'true': [0.235667526284474, 0.24274660783094115], 'true,false': [0.2131559320007038, 0.24510751738660005], 'true,false,false': [0.2399999999999999, 0.24587766220550045], 'false': [0.10897823373482877, 0.11925739737963524], 'false,false': [0.1251555555555548, 0.0], 'false,true': [2.3129646346357427e-18, 0.1251555555555548]}, {'': [0.23605459920567265, 0.11376206515768521], 'true': [0.23566752628446164, 0.24264209786279994], 'true,false': [0.21304510181961034, 0.24508619816420513], 'true,false,false': [0.23999999999999994, 0.24585452382770467], 'false': [0.10880701549834226, 0.11918818032937877], 'false,false': [0.12515555555555608, 0.0], 'false,true': [2.3129646346357427e-18, 0.12515555555555608]}, {'': [0.23600329786844146, 0.11366339398297505], 'true': [0.23566752628447166, 0.2425845414416021], 'true,false': [0.24, 0.2429431251525342], 'true,false,false': [0.20892154775088786, 0.24617259192823462], 'false': [0.10867230568411562, 0.11913372225194024], 'false,false': [0.12515555555555608, 0.0], 'false,true': [1.1564823173178713e-18, 0.12515555555555608]}, {'': [0.23597855621857872, 0.11358449266854917], 'true': [0.23566752628446394, 0.24252694609274192], 'true,false': [0.21109949795723035, 0.2451770422732021], 'true,false,false': [0.24, 0.24598815024045603], 'false': [0.10856458646987088, 0.11909017545214201], 'false,false': [0.1251555555555557, 0.0], 'false,true': [1.1564823173178713e-18, 0.1251555555555557]}, {'': [0.2359676719139555, 0.1135204993337254], 'true': [0.23566752628446355, 0.2425058307445321], 'true,false': [0.20805342594476953, 0.24538664138779295], 'true,false,false': [0.24000000000000005, 0.2462477989986988], 'false': [0.10937500000000001, 0.11371857371680569], 'false,false': [0.1084772202226257, 0.12010439567775584], 'false,false,false': [0.12697705502339016, 0.0], 'false,false,true': [5.782411586589357e-19, 0.1251555555555548]}, {'': [0.23596213727067702, 0.11346207153018646], 'true': [0.23566752628447613, 0.24248061909530563], 'true,false': [0.24, 0.24284387770287882], 'true,false,false': [0.2082840458373361, 0.24624230937661903], 'false': [0.1083942527519756, 0.11902585083664916], 'false,false': [0.12515555555555566, 0.0], 'false,true': [2.8912057932946786e-18, 0.12514258773138445]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
0;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true
0;false,false;haswordvenue(B, L), haswordtitle(M, L).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
1;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true
1;false,false;haswordvenue(B, L), haswordtitle(M, L).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
2;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true
2;false,false;haswordvenue(B, L), haswordtitle(M, L).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
3;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true
3;false,false;haswordvenue(B, L), haswordtitle(M, L).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
4;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true
4;false,false;haswordvenue(B, L), haswordtitle(M, L).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
5;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true
5;false,false;haswordvenue(B, L), haswordtitle(M, L).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
6;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true
6;false,false;haswordvenue(B, L), haswordtitle(M, L).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
7;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true
7;false,false;haswordvenue(B, L), haswordtitle(M, L).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;false;haswordvenue(B, I), haswordauthor(J, I).;true;true
8;false,false;haswordvenue(B, K), haswordtitle(L, K).;true;true
8;false,false,true;haswordtitle(L, M), haswordvenue(A, M).;true;true
8;false,false,false;haswordvenue(A, N), haswordtitle(P, N).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
9;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true
9;false,false;haswordvenue(B, L), haswordtitle(M, L).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.23843062524035266;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.4581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.424815601766179;  // std dev = 2.714, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.004815601766179008;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.004815601766179008;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.20686012285620575;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.448295606241962;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.3982164798305049;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.3639794304549286;  // std dev = 2.714, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.004228390109386251;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.004228390109386251;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.1751801570305961;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.3874028246526538;  // std dev = 0.802, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.32650617096328266;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.29632358279621157;  // std dev = 2.716, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, A) )
%   | | then if ( samebib(K, L), venue(L, B) )
%   | | | then return 0.14974330653669568;  // std dev = 2.784, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return -0.14149654570757056;  // std dev = 0.042, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.11669340332070102;  // std dev = 0.028, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | then return 0.0037111125833978686;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.14514481334590568;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.30343404142094477;  // std dev = 0.800, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.2571145088587262;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.23412214784384355;  // std dev = 2.716, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.10980429489397554;  // std dev = 0.045, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0032558270569705674;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.003911681670084836;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.11804668707041945;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.2270353804847208;  // std dev = 0.801, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.21002704550449672;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.17855310883533057;  // std dev = 2.716, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.09953837016457324;  // std dev = 0.041, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0028554031467501392;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.0034335612113566877;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.09457696812283496;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.18268623706716078;  // std dev = 0.794, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.1590725395671552;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.134224497783757;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then return -0.029299214164223333;  // std dev = 0.328, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, M), haswordvenue(A, M) )
%   | | | then return -0.09097804211946435;  // std dev = 0.038, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.002503460836945874;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | | | then return 0.006870934527798597;  // std dev = 2.848, 67.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=10 */
%   | | | else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.07489163449109286;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.13320311562342746;  // std dev = 0.796, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.10404891913856941;  // std dev = 0.495, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | then return -0.025521441456466887;  // std dev = 0.328, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | | then return -0.08373867220642335;  // std dev = 0.035, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0021943081594878503;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.006032037034381834;  // std dev = 2.848, 67.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=10 */
%   | | | else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.05877777591804268;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.10032483354002449;  // std dev = 0.796, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.0941304478491575;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.07543343059470692;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then return -0.02229296205522123;  // std dev = 0.328, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, M), haswordvenue(A, M) )
%   | | | then return -0.0775414818010331;  // std dev = 0.033, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0019228798175884457;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | | | then return 0.005292182790390353;  // std dev = 2.847, 67.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=10 */
%   | | | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04582386394015474;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.08870585055755036;  // std dev = 0.790, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.07473253444471198;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.05463176614973729;  // std dev = 2.718, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.07217994386844805;  // std dev = 0.031, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0016846780662751325;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.002063363768081463;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.03554750876544446;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.06732337913552977;  // std dev = 0.790, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.043175186945547825;  // std dev = 0.495, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | then return -0.01977470451085364;  // std dev = 0.328, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return -0.0014465963276633186;  // std dev = 3.064, 80.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=11 */
%   | | | else return -0.08336718938046983;  // std dev = 0.070, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.004385706747832029;  // std dev = 2.847, 67.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=10 */
%   | | | else return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.556966
   AUC PR    = 0.428305
   CLL	      = -0.657115
   Precision = 0.637427 at threshold = 0.5
   Recall    = 0.041148
   F1        = 0.077305


Total learning time: 55.10272264480591 seconds
Total inference time: 6.992 seconds
AUC ROC: 0.556966


Results scoring model
   AUC ROC   = 0.590942
   AUC PR    = 0.419498
   CLL	      = -0.620306
   Precision = 0.578947 at threshold = 0.5
   Recall    = 0.059783
   F1        = 0.108374


Total scoring time: 1.09 seconds
Refined model CLL: -0.620306


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.556966
   AUC PR    = 0.428305
   CLL	      = -0.657115
   Precision = 0.637427 at threshold = 0.5
   Recall    = 0.041148
   F1        = 0.077305


Total learning time: 111.74236322975159 seconds
Total inference time: 6.992 seconds
AUC ROC: 0.556966
Total revision time: 111.74236322975159
Best scored revision CLL: -0.620306


Dataset: 11_yeast_cora, Fold: 1, Type: Transfer (trRDN-B), Time: 00:48:26
{'AUC ROC': 0.556966, 'AUC PR': 0.428305, 'CLL': -0.657115, 'Precision': [0.637427, 0.5], 'Recall': 0.041148, 'F1': 0.077305, 'Learning time': 111.74236322975159, 'Inference time': 6.992, 'parameter': {'AUC ROC': 0.555791, 'AUC PR': 0.427997, 'CLL': -0.659564, 'Precision': [0.637427, 0.5], 'Recall': 0.041148, 'F1': 0.077305, 'Learning time': 54.44864058494568, 'Inference time': 6.743}}


Starting fold 2

Target train facts examples: 9016
Target train pos examples: 771
Target train neg examples: 544

Target test facts examples: 33542
Target test pos  examples: 2246
Target test neg examples: 4478

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.4356367001892301;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.5949910403626703;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.5640312880406888;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.37395569825543723;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.5062567560764839;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.48074388375574334;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.7194734122109543;  // std dev = 7.30e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.30665618885999163;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.4047531668618019;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.386198448632422;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.5553664367462845;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.5553664367462846;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.20848477447886868;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.20848477447886868;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.24206322397592006;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.3261448737160187;  // std dev = 0.439, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.2788572331674748;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.4175135841583099;  // std dev = 1.49e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return 0.41751358415830986;  // std dev = 5.16e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.17062637354018512;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.17062637354018512;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.18614898381430323;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.24558668125641075;  // std dev = 0.439, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.20966773150020385;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.32071184716014967;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return 0.3207118471601496;  // std dev = 2.11e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.13664585375352212;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.13664585375352212;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.4135394151203006;  // std dev = 0.357, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.06353941512030048;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.18646058487969952;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.13891629954241463;  // std dev = 0.494, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.18620428986064227;  // std dev = 1.914, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.17805918236963383;  // std dev = 1.889, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.25517224256948945;  // std dev = 1.49e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.10762034996184425;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.10762034996184425;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.10607297606371259;  // std dev = 0.493, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.14069831902044802;  // std dev = 0.439, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.11182490944275833;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.22282594249614798;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.2097577156325356;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.08372807955323866;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.08372807955323866;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.07959857962393446;  // std dev = 0.493, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.11338907398478108;  // std dev = 0.439, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.07840060765351262;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.1866237342840552;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.17709649774527744;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.06457405393631672;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.06457405393631672;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.32935334983892856;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.0015820532446486624;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.26725530742533943;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.05758489361080154;  // std dev = 0.493, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.08842967135075265;  // std dev = 1.912, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.08183085254702285;  // std dev = 1.889, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.1527438580936708;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.04949778322519479;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.04949778322519479;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.24850251004931012;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(A, C) )
%   | | then return 0.0011865429857692567;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, A) )
%   | | | then return -0.18565544948181167;  // std dev = 0.850, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.25060992432978635;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.04323227639224771;  // std dev = 0.493, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.06863913894808645;  // std dev = 1.913, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.06506189950847077;  // std dev = 1.891, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then return 0.10908619018083879;  // std dev = 0.314, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | else return 0.03777940363354101;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */


Results
   AUC ROC   = 0.537248
   AUC PR    = 0.344299
   CLL	      = -0.755566
   Precision = 0.35429 at threshold = 0.5
   Recall    = 0.955922
   F1        = 0.516976


Total learning time: 61.950034618377686 seconds
Total inference time: 6.746 seconds
AUC ROC: 0.537248


Results scoring model
   AUC ROC   = 0.55338
   AUC PR    = 0.660702
   CLL	      = -0.666342
   Precision = 0.594317 at threshold = 0.5
   Recall    = 0.976654
   F1        = 0.73896


Total scoring time: 1.009 seconds
Parameter learned model CLL: -0.666342


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)'}, {'true,true': [0.494, 518, 708], 'true,false,true': [0.44, 5, 14], 'true,false,false,true': [1.879, 5, 12], 'true,false,false,false': [0.0, 0, 5], 'false,true,true': [0.0, 0, 20], 'false,true,false': [0.495, 8, 6], 'false,false': [0.495, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)'}, {'true,true': [0.494, 518, 708], 'true,false,true': [0.44, 5, 14], 'true,false,false,true': [1.879, 5, 12], 'true,false,false,false': [0.0, 0, 5], 'false,true,true': [7.3e-08, 0, 20], 'false,true,false': [0.495, 8, 6], 'false,false': [0.495, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)'}, {'true,true': [0.494, 518, 708], 'true,false,true': [0.44, 5, 14], 'true,false,false,true': [1.879, 5, 12], 'true,false,false,false': [0.0, 0, 5], 'false,true,true': [0.0, 0, 20], 'false,true,false': [0.495, 8, 6], 'false,false': [0.495, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(A, K)'}, {'true,true': [0.494, 518, 708], 'true,false,true': [0.439, 5, 14], 'true,false,false,true': [1.879, 5, 12], 'true,false,false,false': [1.49e-08, 0, 5], 'false,true,true': [5.16e-08, 0, 20], 'false,true,false': [0.495, 8, 6], 'false,false': [0.495, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(A, K)'}, {'true,true': [0.494, 518, 708], 'true,false,true': [0.439, 5, 14], 'true,false,false,true': [1.879, 5, 12], 'true,false,false,false': [0.0, 0, 5], 'false,true,true': [2.11e-08, 0, 20], 'false,true,false': [0.495, 8, 6], 'false,false': [0.495, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordtitle(F, D)', 'true,true,false': 'haswordvenue(B, D)', 'true,false': 'haswordtitle(G, C)', 'true,false,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)'}, {'true,true,true': [0.357, 3, 17], 'true,true,false,true': [1.0, 2, 2], 'true,true,false,false': [1.225, 6, 2], 'true,false,true': [0.494, 507, 687], 'true,false,false,true': [1.914, 5, 14], 'true,false,false,false': [1.889, 5, 17], 'false,true,true': [1.49e-08, 0, 20], 'false,true,false': [0.495, 8, 6], 'false,false': [0.495, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)'}, {'true,true': [0.493, 518, 708], 'true,false,true': [0.439, 5, 14], 'true,false,false,true': [1.879, 5, 12], 'true,false,false,false': [0.0, 0, 5], 'false,true,true': [0.0, 0, 20], 'false,true,false': [0.495, 8, 6], 'false,false': [0.495, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)'}, {'true,true': [0.493, 518, 708], 'true,false,true': [0.439, 5, 14], 'true,false,false,true': [1.879, 5, 12], 'true,false,false,false': [0.0, 0, 5], 'false,true,true': [0.0, 0, 20], 'false,true,false': [0.495, 8, 6], 'false,false': [0.495, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordtitle(F, D)', 'true,true,false': 'haswordvenue(A, D)', 'true,false': 'haswordtitle(G, C)', 'true,false,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(A, L)'}, {'true,true,true': [0.356, 3, 17], 'true,true,false,true': [1.0, 2, 2], 'true,true,false,false': [1.225, 6, 2], 'true,false,true': [0.493, 507, 687], 'true,false,false,true': [1.912, 5, 14], 'true,false,false,false': [1.889, 5, 17], 'false,true,true': [0.0, 0, 20], 'false,true,false': [0.495, 8, 6], 'false,false': [0.495, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(B, C), haswordauthor(D, C)', 'true': 'haswordtitle(E, C)', 'true,false': 'haswordvenue(A, C)', 'true,false,false': 'author(F, D), venue(F, A)', 'false': 'haswordvenue(A, G), haswordvenue(B, G)', 'false,true': 'haswordtitle(H, G)', 'false,true,false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,false': 'haswordvenue(B, K), haswordtitle(L, K)'}, {'true,true': [0.356, 3, 17], 'true,false,true': [1.0, 2, 2], 'true,false,false,true': [0.85, 3, 1], 'true,false,false,false': [0.894, 4, 1], 'false,true,true': [0.493, 507, 687], 'false,true,false,true': [1.913, 5, 14], 'false,true,false,false': [1.891, 5, 17], 'false,false,true': [0.314, 7, 26], 'false,false,false': [0.495, 8, 6]}]]
[{'': [0.24306651325713594, 0.22222222222222385], 'true': [0.24399564626142126, 0.1844140392623454], 'false': [0.17993079584775207, 0.24489795918367352], 'true,false': [0.19390581717451486, 0.17561983471074338], 'false,true': [-8.881784197001253e-17, 0.24489795918367352], 'true,false,false': [0.20761245674740453, 0.0]}, {'': [0.24265720194658616, 0.1968581969586747], 'true': [0.2439956462613994, 0.18151807630785097], 'false': [0.15465453537750254, 0.24489795918367324], 'true,false': [0.193905817174515, 0.17043669583228802], 'true,false,false': [0.20761245674740458, 0.0], 'false,true': [2.6645352591003756e-16, 0.24489795918367324]}, {'': [0.24225435465227532, 0.1721032613752619], 'true': [0.2439956462614137, 0.1787372059517856], 'true,false': [0.1939058171745152, 0.16545366223293648], 'false': [0.12998525701064187, 0.2448979591836735], 'true,false,false': [0.20761245674740486, -4.4408920985006264e-17], 'false,true': [-2.6645352591003756e-16, 0.2448979591836735]}, {'': [0.24201842021934108, 0.1576721797796284], 'true': [0.24399564626139422, 0.17736162471011832], 'true,false': [0.192926167121755, 0.16380420131299045], 'true,false,false': [0.20761245674740472, 4.4408920985006264e-17], 'false': [0.11560410995340116, 0.24489795918367352], 'false,true': [1.3322676295501878e-16, 0.24489795918367352]}, {'': [0.24190718913604425, 0.15109193554816291], 'true': [0.24399564626140396, 0.17666622133125578], 'true,false': [0.19289991368056605, 0.16259333977574142], 'true,false,false': [0.20761245674740483, -2.2204460492503132e-17], 'false': [0.10904663473311735, 0.24489795918367335], 'false,true': [2.2204460492503132e-17, 0.24489795918367335]}, {'': [0.2418600335872296, 0.14814884171425], 'true': [0.2255859375, 0.24212229054901607], 'true,false': [0.2443183252948157, 0.17638871506620238], 'true,true': [0.12749999999999997, 0.22222222222222213], 'true,true,false': [0.25, 0.18749999999999994], 'true,false,false': [0.1928090694102204, 0.16217675573762705], 'false': [0.10611372461489284, 0.24489795918367338], 'false,true': [1.1102230246251566e-17, 0.24489795918367338]}, {'': [0.24103547477037437, 0.14671770828047462], 'true': [0.2431553665328233, 0.1766128132594272], 'true,false': [0.19284070050078675, 0.16259165974656525], 'true,false,false': [0.2076124567474048, -5.551115123125783e-18], 'false': [0.10468754319991945, 0.24489795918367346], 'false,true': [-2.7755575615628914e-17, 0.24489795918367346]}, {'': [0.2410199317422912, 0.14593454225037836], 'true': [0.24315404198595097, 0.17643455244808626], 'true,false': [0.1925290503713756, 0.1624847100418039], 'true,false,false': [0.2076124567474048, 0.0], 'false': [0.1039070870868822, 0.24489795918367332], 'false,true': [-2.2204460492503132e-17, 0.24489795918367332]}, {'': [0.24101092004244154, 0.14544805479569253], 'true': [0.22358095109306772, 0.24129790728451164], 'true,false': [0.24350629638455495, 0.176264551633537], 'true,true': [0.126701120084753, 0.2243941169982234], 'true,true,false': [0.25, 0.1875], 'true,false,false': [0.19250106251881463, 0.1622219312977877], 'false': [0.10342228297979034, 0.2448979591836735], 'false,true': [-3.3306690738754695e-17, 0.2448979591836735]}, {'': [0.1962277862843234, 0.23777898164399588], 'false': [0.24129943903433707, 0.1434223809800395], 'false,true': [0.2435086868138232, 0.17642849060359236], 'true': [0.12673566199680703, 0.20536710471628888], 'true,false': [0.25, 0.1702389364337492], 'false,true,false': [0.19253540971493863, 0.16251203940170963], 'true,false,false': [0.1806936715299488, 0.16], 'false,false': [0.09885755676008498, 0.24489795918367355]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,false;haswordvenue(A, E), haswordtitle(F, E).;true;true
0;true,false,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
0;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
0;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,false;haswordvenue(A, E), haswordtitle(F, E).;true;true
1;true,false,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
1;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,false;haswordvenue(A, E), haswordtitle(F, E).;true;true
2;true,false,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
2;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
2;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,false;haswordvenue(B, E), haswordtitle(F, E).;true;true
3;true,false,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
3;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
3;false,true;haswordtitle(J, K), haswordvenue(A, K).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,false;haswordvenue(B, E), haswordtitle(F, E).;true;true
4;true,false,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
4;false,true;haswordtitle(J, K), haswordvenue(A, K).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;false;haswordvenue(A, J), haswordtitle(K, J).;true;true
5;false,true;haswordtitle(K, L), haswordvenue(B, L).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,false;haswordvenue(A, E), haswordtitle(F, E).;true;true
6;true,false,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
6;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,false;haswordvenue(B, E), haswordtitle(F, E).;true;true
7;true,false,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
7;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
7;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;false;haswordvenue(B, J), haswordtitle(K, J).;true;true
8;false,true;haswordtitle(K, L), haswordvenue(A, L).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.4356367001892301;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.5949910403626703;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.5640312880406888;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.37395569825543723;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.5062567560764839;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.48074388375574334;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.7194734122109543;  // std dev = 7.30e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.5791684237702857;  // std dev = 0.357, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(A, C) )
%   | | then return 0.22916842377028543;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, A) )
%   | | | then return -0.008145345695425868;  // std dev = 0.852, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.07083157622971455;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.3045453081923796;  // std dev = 0.494, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.4047531668618019;  // std dev = 1.919, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.42464571865829975;  // std dev = 1.908, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then return 0.4317030979309822;  // std dev = 0.348, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | else return 0.20848477447886868;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.5118627986468953;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.18162271221626702;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, B) )
%   | | | then return -0.06570188218847453;  // std dev = 0.846, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.13495415790755155;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.23990098036198007;  // std dev = 0.494, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.3098169854894562;  // std dev = 1.919, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.32456036871644006;  // std dev = 1.905, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then return 0.35163309306853874;  // std dev = 0.335, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | else return 0.1316730160126654;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.1861307963368471;  // std dev = 0.492, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.23288770051702257;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.20738703360610133;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.3712569085691976;  // std dev = 1.05e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.36332570147106397;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.10395681007912147;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.10354034558269198;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.34292675304522025;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.09712152083658455;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.10170242746926186;  // std dev = 1.222, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.13945158353453266;  // std dev = 0.493, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.17498421379444495;  // std dev = 1.919, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.1861038888964478;  // std dev = 1.897, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.2840857557415314;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.08081634704127265;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.08048520911847132;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.10612598602213655;  // std dev = 0.492, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.1324762415840328;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.1102083222614566;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.2527140623163928;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.22998958852745188;  // std dev = 1.49e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.06231133890180872;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.062053704514323335;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.07967891474575307;  // std dev = 0.492, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.11349108190071144;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.07031736528875034;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.20801977191979515;  // std dev = 5.27e-09, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.19179950491220893;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.04776677755083309;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.047569338903151896;  // std dev = 0.489, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.059806317521501055;  // std dev = 0.492, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.08724268622319738;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.05419068023475642;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.1758207450923115;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.16380856879608713;  // std dev = 2.11e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.03646955440800169;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.03631983068294583;  // std dev = 0.489, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04492322862046855;  // std dev = 0.492, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.07118547266625873;  // std dev = 0.439, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.03804625078777134;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.15177538084883857;  // std dev = 3.73e-09, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.14258696560690026;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.027765379891893805;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.02765267645364165;  // std dev = 0.489, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */


Results
   AUC ROC   = 0.537384
   AUC PR    = 0.346121
   CLL	      = -0.75527
   Precision = 0.354174 at threshold = 0.5
   Recall    = 0.955922
   F1        = 0.516851


Total learning time: 60.115888595581055 seconds
Total inference time: 6.174 seconds
AUC ROC: 0.537384


Results scoring model
   AUC ROC   = 0.553404
   AUC PR    = 0.660708
   CLL	      = -0.666201
   Precision = 0.594317 at threshold = 0.5
   Recall    = 0.976654
   F1        = 0.73896


Total scoring time: 1.053 seconds
Refined model CLL: -0.666201


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.537384
   AUC PR    = 0.346121
   CLL	      = -0.75527
   Precision = 0.354174 at threshold = 0.5
   Recall    = 0.955922
   F1        = 0.516851


Total learning time: 124.12792321395874 seconds
Total inference time: 6.174 seconds
AUC ROC: 0.537384
Total revision time: 124.12792321395874
Best scored revision CLL: -0.666201


Dataset: 11_yeast_cora, Fold: 2, Type: Transfer (trRDN-B), Time: 00:50:43
{'AUC ROC': 0.537384, 'AUC PR': 0.346121, 'CLL': -0.75527, 'Precision': [0.354174, 0.5], 'Recall': 0.955922, 'F1': 0.516851, 'Learning time': 124.12792321395874, 'Inference time': 6.174, 'parameter': {'AUC ROC': 0.537248, 'AUC PR': 0.344299, 'CLL': -0.755566, 'Precision': [0.35429, 0.5], 'Recall': 0.955922, 'F1': 0.516976, 'Learning time': 61.950034618377686, 'Inference time': 6.746}}


Starting fold 3

Target train facts examples: 9306
Target train pos examples: 581
Target train neg examples: 2222

Target test facts examples: 33252
Target test pos  examples: 2436
Target test neg examples: 2800

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.4581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.18314893509951236;  // std dev = 0.468, 40.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=13 */
%   | else return 0.21318249214648724;  // std dev = 0.479, 1,490.000 (wgt'ed) examples reached here.  /* #neg=961 #pos=529 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then return -0.024204006076958388;  // std dev = 0.322, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return 0.033148935099512375;  // std dev = 3.399, 80.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=14 */
%   | | | else return -0.024204006076958388;  // std dev = 1.328, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.020311097261674547;  // std dev = 3.883, 111.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=18 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1854436602933585;  // std dev = 0.479, 1,534.000 (wgt'ed) examples reached here.  /* #neg=989 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return -0.011220594477374815;  // std dev = 0.340, 15.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | then if ( title(H, G), venue(H, B) )
%   | | | then return 0.05228826778079863;  // std dev = 3.584, 81.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=16 */
%   | | | else return -0.05559685648103912;  // std dev = 1.354, 24.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=2 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.02243785084002173;  // std dev = 3.651, 96.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=16 */
%   | | | else return -0.1281417487855876;  // std dev = 0.012, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.16930750939053155;  // std dev = 0.482, 1,485.000 (wgt'ed) examples reached here.  /* #neg=940 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( title(G, E), venue(G, B) )
%   | | | then return 0.3532563245858759;  // std dev = 2.829, 32.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=16 */
%   | | | else return -0.14626303103429564;  // std dev = 0.014, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   | | else if ( title(H, E), venue(H, B) )
%   | | | then return -0.14713496052660016;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0.052865039473399864;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return 0.03661207314856844;  // std dev = 3.604, 85.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=16 */
%   | | | else return -0.05833767447923673;  // std dev = 1.361, 27.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=2 */
%   | | else return -0.11553648306947537;  // std dev = 0.015, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13088241914428989;  // std dev = 0.479, 1,528.000 (wgt'ed) examples reached here.  /* #neg=983 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return -0.024132755426339147;  // std dev = 0.319, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then if ( title(H, G), venue(H, A) )
%   | | | then return 0.02980276157367634;  // std dev = 3.434, 87.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=16 */
%   | | | else return -0.060443117226927794;  // std dev = 1.340, 24.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=2 */
%   | | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | | then return -0.1398921243125685;  // std dev = 0.032, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 3.725937263605101E-5;  // std dev = 3.673, 108.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=16 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10473411407432724;  // std dev = 0.478, 1,538.000 (wgt'ed) examples reached here.  /* #neg=993 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.5637504283875971;  // std dev = 1.927, 21.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=16 */
%   | | | else return -0.14415304415482144;  // std dev = 0.220, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
%   | | else if ( title(H, E), venue(H, B) )
%   | | | then return -0.12294537456289995;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.007659597376679406;  // std dev = 1.301, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then return -0.03369507204445166;  // std dev = 0.314, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | | else return -0.0015710592594537893;  // std dev = 0.352, 109.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=16 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09081891690842823;  // std dev = 0.480, 1,512.000 (wgt'ed) examples reached here.  /* #neg=967 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return -0.03903500923128215;  // std dev = 0.291, 21.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | then if ( title(H, G), venue(H, B) )
%   | | | then return 0.02803798071179389;  // std dev = 3.376, 76.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=14 */
%   | | | else return -0.02042070025669654;  // std dev = 1.338, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return -4.6237328604088567E-4;  // std dev = 3.338, 110.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=18 */
%   | | | else return -0.10050455004047643;  // std dev = 0.002, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0751677423868858;  // std dev = 0.481, 1,501.000 (wgt'ed) examples reached here.  /* #neg=956 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return -0.01930732239938888;  // std dev = 0.263, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return -0.008711878402047808;  // std dev = 0.329, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.015393103624088486;  // std dev = 3.637, 95.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=16 */
%   | | | else return 0.010288655687998905;  // std dev = 3.097, 96.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=16 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C) )
%   | | then return 0.09893276218610823;  // std dev = 0.488, 37.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=15 */
%   | | else return -0.1576687855913501;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.0696826387902345;  // std dev = 0.484, 1,418.000 (wgt'ed) examples reached here.  /* #neg=889 #pos=529 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then return -0.02013445031730329;  // std dev = 0.313, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then return -0.013958674602725301;  // std dev = 0.271, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.0034351738604369055;  // std dev = 3.661, 100.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=16 */
%   | | | else return -0.003719082207042535;  // std dev = 3.146, 102.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=16 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.046995757074009825;  // std dev = 0.481, 1,491.000 (wgt'ed) examples reached here.  /* #neg=946 #pos=545 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.5068055358022113;  // std dev = 2.310, 24.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=16 */
%   | | | else return -0.15799631287515328;  // std dev = 0.099, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
%   | | else if ( title(H, E), venue(H, A) )
%   | | | then return -0.12550897519133564;  // std dev = 3.73e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0.02833717865481821;  // std dev = 1.301, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.003445002549203918;  // std dev = 3.074, 92.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=16 */
%   | | | else return -0.04915418030736416;  // std dev = 1.334, 24.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=2 */
%   | | else return -0.09270896703951638;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordtitle(D, C) )
%   then if ( title(E, D), venue(E, A) )
%   | then if ( samebib(E, F), venue(F, B) )
%   | | then if ( title(F, D) )
%   | | | then return 0.5662669822657889;  // std dev = 6.111, 385.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=343 */
%   | | | else return 0.5428483136688664;  // std dev = 2.583, 61.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=53 */
%   | | else return -0.29194379253556796;  // std dev = 0.144, 862.000 (wgt'ed) examples reached here.  /* #neg=846 #pos=16 */
%   | else if ( haswordvenue(A, C) )
%   | | then return 0.15653102881210182;  // std dev = 0.500, 272.000 (wgt'ed) examples reached here.  /* #neg=140 #pos=132 */
%   | | else return 0.03974542017485159;  // std dev = 0.385, 19.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=4 */
%   else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | then if ( title(I, H), venue(I, B) )
%   | | then if ( samebib(I, J), venue(J, A) )
%   | | | then return 0.4061899839413432;  // std dev = 2.177, 24.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=17 */
%   | | | else return -0.12467855068798563;  // std dev = 0.332, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
%   | | else return 0.0904786095942558;  // std dev = 0.434, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
%   | else return 0.41987167972291883;  // std dev = 0.394, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */


Results
   AUC ROC   = 0.874667
   AUC PR    = 0.793854
   CLL	      = -0.567771
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.004926
   F1        = 0.009804


Total learning time: 80.66171550750732 seconds
Total inference time: 12.75 seconds
AUC ROC: 0.874667


Results scoring model
   AUC ROC   = 0.933699
   AUC PR    = 0.770853
   CLL	      = -0.429557
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.003442
   F1        = 0.006861


Total scoring time: 2.227 seconds
Parameter learned model CLL: -0.429557


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordauthor(F, C)', 'false': 'haswordvenue(A, G), haswordauthor(H, G)', 'false,false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,false,true': 'title(K, J), venue(K, B)', 'false,false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true,true': [1.095, 2, 3], 'true,true,false': [0.468, 27, 13], 'true,false': [0.479, 961, 529], 'false,true': [0.322, 15, 2], 'false,false,true,true': [3.399, 66, 14], 'false,false,true,false': [1.328, 15, 2], 'false,false,false,true': [3.883, 93, 18], 'false,false,false,false': [0.0, 3, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(B, F), haswordtitle(G, F)', 'false,false,true': 'title(H, G), venue(H, B)', 'false,false,false': 'haswordvenue(A, I), haswordtitle(J, I)'}, {'true': [0.479, 989, 545], 'false,true': [0.34, 13, 2], 'false,false,true,true': [3.584, 65, 16], 'false,false,true,false': [1.354, 22, 2], 'false,false,false,true': [3.651, 80, 16], 'false,false,false,false': [0.012, 5, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordtitle(E, D)', 'false,true': 'title(F, E), venue(F, A)', 'false,true,true': 'title(G, E), venue(G, B)', 'false,true,false': 'title(H, E), venue(H, B)', 'false,false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,false,true': 'title(K, J), venue(K, B)'}, {'true': [0.482, 940, 545], 'false,true,true,true': [2.829, 16, 16], 'false,true,true,false': [0.014, 62, 0], 'false,true,false,true': [0.0, 7, 0], 'false,true,false,false': [1.265, 8, 2], 'false,false,true,true': [3.604, 69, 16], 'false,false,true,false': [1.361, 25, 2], 'false,false,false': [0.015, 7, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(A, F), haswordtitle(G, F)', 'false,false,true': 'title(H, G), venue(H, A)', 'false,false,false': 'haswordvenue(B, I), haswordauthor(J, I)'}, {'true': [0.479, 983, 545], 'false,true': [0.319, 15, 2], 'false,false,true,true': [3.434, 71, 16], 'false,false,true,false': [1.34, 22, 2], 'false,false,false,true': [0.032, 4, 0], 'false,false,false,false': [3.673, 92, 16]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordtitle(E, D)', 'false,true': 'title(F, E), venue(F, A)', 'false,true,true': 'samebib(F, G), venue(G, B)', 'false,true,false': 'title(H, E), venue(H, B)', 'false,false': 'haswordvenue(A, I), haswordauthor(J, I)'}, {'true': [0.478, 993, 545], 'false,true,true,true': [1.927, 5, 16], 'false,true,true,false': [0.22, 70, 0], 'false,true,false,true': [5.27e-09, 12, 0], 'false,true,false,false': [1.301, 11, 2], 'false,false,true': [0.314, 16, 2], 'false,false,false': [0.352, 93, 16]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(B, F), haswordtitle(G, F)', 'false,false,true': 'title(H, G), venue(H, B)', 'false,false,false': 'haswordvenue(A, I), haswordtitle(J, I)'}, {'true': [0.48, 967, 545], 'false,true': [0.291, 19, 2], 'false,false,true,true': [3.376, 62, 14], 'false,false,true,false': [1.338, 17, 2], 'false,false,false,true': [3.338, 92, 18], 'false,false,false,false': [0.002, 5, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(A, F), haswordauthor(G, F)', 'false,false,false': 'haswordvenue(B, H), haswordtitle(I, H)'}, {'true': [0.481, 956, 545], 'false,true': [0.263, 15, 2], 'false,false,true': [0.329, 14, 2], 'false,false,false,true': [3.637, 79, 16], 'false,false,false,false': [3.097, 80, 16]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordtitle(F, C)', 'false': 'haswordvenue(A, G), haswordauthor(H, G)', 'false,false': 'haswordvenue(B, I), haswordauthor(J, I)', 'false,false,false': 'haswordvenue(B, K), haswordtitle(L, K)'}, {'true,true,true': [0.488, 22, 15], 'true,true,false': [0.894, 4, 1], 'true,false': [0.484, 889, 529], 'false,true': [0.313, 16, 2], 'false,false,true': [0.271, 14, 2], 'false,false,false,true': [3.661, 84, 16], 'false,false,false,false': [3.146, 86, 16]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordtitle(E, D)', 'false,true': 'title(F, E), venue(F, B)', 'false,true,true': 'samebib(F, G), venue(G, A)', 'false,true,false': 'title(H, E), venue(H, A)', 'false,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,false,true': 'title(K, J), venue(K, A)'}, {'true': [0.481, 946, 545], 'false,true,true,true': [2.31, 8, 16], 'false,true,true,false': [0.099, 75, 0], 'false,true,false,true': [3.73e-09, 7, 0], 'false,true,false,false': [1.301, 11, 2], 'false,false,true,true': [3.074, 76, 16], 'false,false,true,false': [1.334, 22, 2], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(B, C), haswordtitle(D, C)', 'true': 'title(E, D), venue(E, A)', 'true,true': 'samebib(E, F), venue(F, B)', 'true,true,true': 'title(F, D)', 'true,false': 'haswordvenue(A, C)', 'false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false,true': 'title(I, H), venue(I, B)', 'false,true,true': 'samebib(I, J), venue(J, A)'}, {'true,true,true,true': [6.111, 42, 343], 'true,true,true,false': [2.583, 8, 53], 'true,true,false': [0.144, 846, 16], 'true,false,true': [0.5, 140, 132], 'true,false,false': [0.385, 15, 4], 'false,true,true,true': [2.177, 7, 17], 'false,true,true,false': [0.332, 76, 0], 'false,true,false': [0.434, 10, 4], 'false,false': [0.394, 5, 12]}]]
[{'': [0.22898916699380045, 0.13296398891966868], 'true': [0.2291358024691353, 0.22898473041753478], 'true,true': [0.23999999999999994, 0.21937499999999951], 'false': [0.10380622837370246, 0.13517216594416226], 'false,false': [0.13774046126049472, 0.13296398891966704], 'false,false,true': [0.14437499999999945, 0.10380622837370246], 'false,false,false': [0.13586559532505424, 0.0]}, {'': [0.22898834115844985, 0.13615192674117826], 'false': [0.11561248212946115, 0.13757516521205626], 'false,false': [0.14185299749375074, 0.13304640832953726], 'false,false,true': [0.15858938183382573, 0.07638888888888891], 'false,false,false': [0.13885190733073638, 2.9097614957893093e-05]}, {'': [0.23230759141509477, 0.13137368916297623], 'false': [0.13582380148724071, 0.1271791144037619], 'false,true': [0.1411795465482992, 0.10380622837370247], 'false,true,true': [0.250131908376538, 3.231470828769834e-06], 'false,false': [0.13414309201620128, 3.04285299576601e-05], 'false,false,true': [0.1527933897683984, 0.06858710562414262], 'false,true,false': [0.0, 0.16000000000000003]}, {'': [0.2293543110230929, 0.12111740645527706], 'false': [0.10205916238351076, 0.12251954014658845], 'false,false': [0.12380382750206428, 0.12113095440185283], 'false,false,true': [0.1355484905730577, 0.07484603898932675], 'false,false,false': [0.00025588396397152255, 0.12490851484756789]}, {'': [0.22877949135557732, 0.11963181805554032], 'false': [0.11866227532435937, 0.12047580062395807], 'false,false': [0.09838059417841896, 0.12397828937084701], 'false,true': [0.13030750294584512, 0.07194989930266411], 'false,true,true': [0.1768689223141783, 0.0006943094958953542], 'false,true,false': [2.3129646346357427e-18, 0.13017751479289938]}, {'': [0.23042597068116855, 0.11366119501515227], 'false': [0.08479142045251409, 0.11636653329162001], 'false,false': [0.13916087497241886, 0.09729381040703974], 'false,false,true': [0.14993573859209125, 0.09418282548476455], 'false,false,false': [0.10128107577529312, 6.846161246104598e-07]}, {'': [0.23118239439328472, 0.11494570589356932], 'false': [0.06896229137060807, 0.11865166125482224], 'false,false': [0.10843541469823885, 0.1194716119580024], 'false,false,false': [0.13920950525917072, 0.09992636222551181]}, {'': [0.23392012160966902, 0.11123759218878264], 'true': [0.23537541740651063, 0.2338769684956134], 'true,true': [0.23772267101386996, 0.16], 'false': [0.09766093257859582, 0.11233122430332815], 'false,false': [0.07359465389993014, 0.11538552810387594], 'false,false,false': [0.13405702738018443, 0.09705479834964441]}, {'': [0.23179345408718927, 0.11091349487010557], 'false': [0.12768642969804073, 0.09424326804179754], 'false,true': [0.13516163877862925, 0.08999999999999991], 'false,true,true': [0.2223134908892869, 0.0001308647687113703], 'false,false': [0.09725066229688797, 0.0], 'false,false,true': [0.10270422845361556, 0.0741510666436241], 'false,true,false': [1.982541115402065e-18, 0.13017751479289932]}, {'': [0.22083015559570282, 0.13592328907528672], 'true': [0.21161796538034108, 0.24400113922161562], 'true,false': [0.2497837370242226, 0.14847031904356006], 'true,true': [0.09875509532354268, 0.020744963043699886], 'false': [0.11158352826789843, 0.15543931675908024], 'false,true': [0.09989440169181885, 0.188323047023325], 'false,true,true': [0.1974595246675054, 0.0014472266031138107], 'true,true,true': [0.09699257439275363, 0.10940577883540861]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;false;haswordvenue(A, G), haswordauthor(H, G).;true;true
0;false,false;haswordvenue(B, I), haswordtitle(J, I).;true;true
0;false,false,false;haswordvenue(A, L), haswordtitle(M, L).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
1;false,false;haswordvenue(B, F), haswordtitle(G, F).;true;true
1;false,false,false;haswordvenue(A, I), haswordtitle(J, I).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;false;haswordvenue(A, D), haswordtitle(E, D).;true;true
2;false,true;title(F, E), venue(F, A).;true;true
2;false,true,true;title(G, E), venue(G, B).;true;true
2;false,true,false;title(H, E), venue(H, B).;true;true
2;false,false;haswordvenue(B, I), haswordtitle(J, I).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
3;false,false;haswordvenue(A, F), haswordtitle(G, F).;true;true
3;false,false,false;haswordvenue(B, I), haswordauthor(J, I).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;false;haswordvenue(A, D), haswordtitle(E, D).;true;true
4;false,true;title(F, E), venue(F, A).;true;true
4;false,true,true;samebib(F, G), venue(G, B).;true;true
4;false,true,false;title(H, E), venue(H, B).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
5;false,false;haswordvenue(B, F), haswordtitle(G, F).;true;true
5;false,false,false;haswordvenue(A, I), haswordtitle(J, I).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
8;false,true;title(F, E), venue(F, B).;true;true
8;false,true,true;samebib(F, G), venue(G, A).;true;true
8;false,true,false;title(H, E), venue(H, A).;true;true
8;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;true
9;;samevenue(A, B) :- haswordvenue(B, C), haswordtitle(D, C).;true;true
9;false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;false,true;title(I, H), venue(I, B).;true;true
9;false,true,true;samebib(I, J), venue(J, A).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.21926004621062345;  // std dev = 0.480, 36.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=13 */
%   | else return 0.21175856076795657;  // std dev = 0.478, 1,496.000 (wgt'ed) examples reached here.  /* #neg=967 #pos=529 */
%   else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | then return -0.04661296966239256;  // std dev = 0.294, 21.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.0268236338946931;  // std dev = 3.412, 83.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=14 */
%   | | | else return -0.03658790700575096;  // std dev = 1.338, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.009409439301193045;  // std dev = 3.909, 119.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=18 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.19298759585266642;  // std dev = 0.481, 1,501.000 (wgt'ed) examples reached here.  /* #neg=956 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return -4.4996671913462494E-4;  // std dev = 0.350, 14.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return -0.011271063844250431;  // std dev = 0.331, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.021948119333026397;  // std dev = 3.655, 97.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=16 */
%   | | | else return 0.01530041162853085;  // std dev = 3.665, 101.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=16 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.15352439367324347;  // std dev = 0.478, 1,546.000 (wgt'ed) examples reached here.  /* #neg=1,001 #pos=545 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.6547036696512368;  // std dev = 1.788, 20.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=16 */
%   | | | else return -0.14521740606700023;  // std dev = 0.012, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | | else if ( title(H, E), venue(H, A) )
%   | | | then return -0.14571123585369447;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.03610694596448732;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.017998412985998108;  // std dev = 3.658, 98.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=16 */
%   | | | else return -0.05232293369577483;  // std dev = 1.351, 23.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=2 */
%   | | else return -0.12865272059108335;  // std dev = 0.007, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C) )
%   | | then return 0.11554334825346195;  // std dev = 0.472, 43.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=15 */
%   | | else return -0.10541076236815665;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.12943783285313443;  // std dev = 0.478, 1,496.000 (wgt'ed) examples reached here.  /* #neg=967 #pos=529 */
%   else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | then if ( title(I, H), venue(I, A) )
%   | | then if ( samebib(I, J), venue(J, B) )
%   | | | then return 0.46747116442288983;  // std dev = 2.482, 26.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=16 */
%   | | | else return -0.1478627926637194;  // std dev = 0.031, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   | | else return -0.04616799651663313;  // std dev = 0.282, 23.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=2 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( title(M, L), venue(M, B) )
%   | | | then return 0.029112752015853175;  // std dev = 3.221, 86.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=16 */
%   | | | else return -0.05194823424470996;  // std dev = 1.335, 23.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=2 */
%   | | else return -0.11490781254170536;  // std dev = 0.007, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.11355305424373491;  // std dev = 0.480, 1,508.000 (wgt'ed) examples reached here.  /* #neg=963 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.5828159580343599;  // std dev = 1.793, 20.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=16 */
%   | | | else return -0.1301031987037726;  // std dev = 0.030, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
%   | | else return 0.09433594544154635;  // std dev = 0.416, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return -0.11936018514933353;  // std dev = 0.012, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.011963412965796042;  // std dev = 3.510, 104.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=18 */
%   | | | else return -0.10217891187790726;  // std dev = 0.001, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0923180425773539;  // std dev = 0.480, 1,506.000 (wgt'ed) examples reached here.  /* #neg=961 #pos=545 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.5455639358130301;  // std dev = 1.790, 20.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=16 */
%   | | | else return -0.1319704846951174;  // std dev = 0.033, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   | | else if ( title(H, E), venue(H, A) )
%   | | | then return -0.12408105915253044;  // std dev = 3.73e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.021437483792315987;  // std dev = 1.291, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.030231849275694767;  // std dev = 2.886, 80.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=16 */
%   | | | else return -0.016685318651361518;  // std dev = 1.318, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | | else return -0.09344403216380427;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07030416454958074;  // std dev = 0.480, 1,520.000 (wgt'ed) examples reached here.  /* #neg=975 #pos=545 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.35659943011255435;  // std dev = 2.090, 22.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return -0.11726848122311523;  // std dev = 0.036, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   | | else if ( title(H, E), venue(H, A) )
%   | | | then return -0.11121208792858425;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0.005935480643839744;  // std dev = 1.301, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then return -0.11028666801076568;  // std dev = 0.030, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return -0.00499906153317988;  // std dev = 3.264, 110.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=18 */
%   | | | else return -0.08582323856474909;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04705972797255178;  // std dev = 0.477, 1,558.000 (wgt'ed) examples reached here.  /* #neg=1,013 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.35876844631913346;  // std dev = 2.206, 23.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=16 */
%   | | | else return -0.11812612000680592;  // std dev = 0.030, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | | else if ( title(H, E), venue(H, B) )
%   | | | then return -0.11189132748883948;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return 0.0637894104306581;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return -0.01374816124831121;  // std dev = 2.531, 98.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=16 */
%   | | | else return 0.018006362009915716;  // std dev = 1.291, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | | else return -0.08028535342063947;  // std dev = 0.003, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.038996541045087166;  // std dev = 0.477, 1,549.000 (wgt'ed) examples reached here.  /* #neg=1,004 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.3400200247993973;  // std dev = 1.958, 21.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=16 */
%   | | | else return -0.10582717468590805;  // std dev = 0.035, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
%   | | else return 0.022775150998186316;  // std dev = 0.373, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return -0.03404307086866502;  // std dev = 2.687, 109.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=16 */
%   | | | else return 0.0028925099758542053;  // std dev = 1.301, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | | else return -0.07365581765505856;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.03809172749501576;  // std dev = 0.480, 1,517.000 (wgt'ed) examples reached here.  /* #neg=972 #pos=545 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.28243266004456374;  // std dev = 2.088, 22.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return -0.10041626647213846;  // std dev = 0.037, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   | | else return 0.07089748065452363;  // std dev = 0.416, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else return -0.0369759972852862;  // std dev = 0.246, 134.000 (wgt'ed) examples reached here.  /* #neg=116 #pos=18 */


Results
   AUC ROC   = 0.564203
   AUC PR    = 0.508156
   CLL	      = -0.707117
   Precision = 0.576687 at threshold = 0.5
   Recall    = 0.038588
   F1        = 0.072336


Total learning time: 44.60637831687927 seconds
Total inference time: 5.057 seconds
AUC ROC: 0.564203


Results scoring model
   AUC ROC   = 0.591131
   AUC PR    = 0.27513
   CLL	      = -0.510444
   Precision = 0.592593 at threshold = 0.5
   Recall    = 0.027539
   F1        = 0.052632


Total scoring time: 1.539 seconds
Refined model CLL: -0.510444


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.874667
   AUC PR    = 0.793854
   CLL	      = -0.567771
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.004926
   F1        = 0.009804


Total learning time: 129.0340938243866 seconds
Total inference time: 12.75 seconds
AUC ROC: 0.874667
Total revision time: 129.0340938243866
Best scored revision CLL: -0.429557


Dataset: 11_yeast_cora, Fold: 3, Type: Transfer (trRDN-B), Time: 00:53:11
{'AUC ROC': 0.874667, 'AUC PR': 0.793854, 'CLL': -0.567771, 'Precision': [1.0, 0.5], 'Recall': 0.004926, 'F1': 0.009804, 'Learning time': 129.0340938243866, 'Inference time': 12.75, 'parameter': {'AUC ROC': 0.874667, 'AUC PR': 0.793854, 'CLL': -0.567771, 'Precision': [1.0, 0.5], 'Recall': 0.004926, 'F1': 0.009804, 'Learning time': 80.66171550750732, 'Inference time': 12.75}}


Starting fold 4

Target train facts examples: 8129
Target train pos examples: 747
Target train neg examples: 1068

Target test facts examples: 34429
Target test pos  examples: 2270
Target test neg examples: 3954

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.27854694504975613;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.2867203636709409;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.44905802600860323;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.44905802600860323;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.5724346493852266;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.1914822684328457;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.05814893509951237;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.05814893509951237;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.2411503606196619;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.24811816884741328;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.3851926776601658;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.3851926776601658;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.48767788391726297;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.16653882456488167;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.05092203251355405;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.05092203251355405;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.20289930723994204;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.20848477447886868;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.31518052304212246;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.31518052304212246;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.3912569620992536;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.1420942428155646;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.04434629760466855;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.04434629760466855;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.16640029396569495;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.17062637354018492;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.24804771389482108;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.24804771389482108;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.3005711547884894;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.11914890490746433;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.03842866223690456;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.03842866223690456;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.13360339271793026;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.13664585375352234;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.19020231164899937;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.19020231164899937;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.22629823971521876;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.0984134027840187;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.033154945921885746;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.033154945921885746;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.10551742939082928;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.10762034996184403;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.14379027326522745;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.14379027326522745;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.16984358676510128;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.08026654944252247;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.028495105925721097;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.028495105925721097;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, B) )
%   | then if ( samebib(E, F), venue(F, A) )
%   | | then return 0.6619245029632226;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.3177650311402712;  // std dev = 0.054, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0.46192450296322257;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.08006052311436539;  // std dev = 0.493, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.09442290810957074;  // std dev = 3.490, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.11288591814362521;  // std dev = 2.598, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, M), haswordvenue(B, M) )
%   | | | then return 0.06479591611329234;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.02811193383897562;  // std dev = 2.960, 54.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=11 */
%   | | else return 0.024408230135271918;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.06356466549265621;  // std dev = 0.492, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.06209458316513356;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.0798215479051692;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.08443584420203289;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.10104183313636735;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.05187916934404051;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.02112871571327175;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.02084688910874009;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04885754847774215;  // std dev = 0.492, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.04756216640296153;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.05990417518779126;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.06335446712404859;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.0773681737517355;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.04126932998424623;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.018005121538844093;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.017760671541598414;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.037387590629187804;  // std dev = 0.492, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.036283341901860444;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.04501781773702543;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.0475967314297342;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.059672780337330575;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.03266374873483021;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.015309983992398368;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.015098879183171418;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */


Results
   AUC ROC   = 0.568443
   AUC PR    = 0.429594
   CLL	      = -0.641216
   Precision = 0.721212 at threshold = 0.5
   Recall    = 0.052423
   F1        = 0.097741


Total learning time: 89.66400909423828 seconds
Total inference time: 7.199 seconds
AUC ROC: 0.568443


Results scoring model
   AUC ROC   = 0.548092
   AUC PR    = 0.461526
   CLL	      = -0.668096
   Precision = 0.661017 at threshold = 0.5
   Recall    = 0.052209
   F1        = 0.096774


Total scoring time: 1.185 seconds
Parameter learned model CLL: -0.668096


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(B, G)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)'}, {'true,true': [0.494, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(A, G)', 'true,false,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)'}, {'true,true': [0.494, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(B, G)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)'}, {'true,true': [0.494, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(B, G)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(A, L)'}, {'true,true': [0.494, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(B, G)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)'}, {'true,true': [0.494, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(B, G)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(A, L)'}, {'true,true': [0.494, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordauthor(D, C)', 'true': 'author(E, D), venue(E, B)', 'true,true': 'samebib(E, F), venue(F, A)', 'false': 'haswordvenue(A, G), haswordvenue(B, G)', 'false,true': 'haswordtitle(H, G)', 'false,true,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false,false,true': 'haswordtitle(L, M), haswordvenue(B, M)'}, {'true,true,true': [0.0, 0, 8], 'true,true,false': [0.054, 8, 0], 'true,false': [0.894, 1, 4], 'false,true,true': [0.493, 924, 664], 'false,true,false,true': [3.49, 25, 25], 'false,true,false,false': [2.598, 11, 18], 'false,false,true,true': [2.0, 12, 6], 'false,false,true,false': [2.96, 43, 11], 'false,false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(A, G)', 'true,false,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)'}, {'true,true': [0.492, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(A, G)', 'true,false,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)'}, {'true,true': [0.492, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(A, G)', 'true,false,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)'}, {'true,true': [0.492, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}]]
[{'': [0.24455361249545102, 0.17089843750000108], 'true': [0.24366352318011741, 0.24803717352988336], 'true,false': [0.25000000000000133, 0.2354340071343634], 'true,false,true': [0.24489795918367302, 0.2417355371900822], 'true,false,false': [0.2417355371900822, 0.20408163265306106], 'false': [0.17864514918371124, 0.15999999999999948], 'false,true': [0.22222222222222232, 0.15999999999999948]}, {'': [0.2442396583862775, 0.17036542604714272], 'true': [0.24366352318012574, 0.2455497403386632], 'true,false': [0.24813620683257942, 0.2345699639132993], 'true,false,true': [0.244897959183673, 0.2417355371900833], 'true,false,false': [0.2417355371900833, 0.20408163265306115], 'false': [0.17782577785291803, 0.1600000000000007], 'false,true': [0.22222222222222207, 0.1600000000000007]}, {'': [0.2439315722131504, 0.16990467702453832], 'true': [0.2436635231801326, 0.24310195846820265], 'true,false': [0.24631150685892023, 0.2337064665173658], 'true,false,true': [0.24489795918367316, 0.24173553719008264], 'true,false,false': [0.24173553719008264, 0.20408163265306115], 'false': [0.1771174918718374, 0.15999999999999953], 'false,true': [0.22222222222222218, 0.15999999999999953]}, {'': [0.24371075047936072, 0.16953742675793848], 'true': [0.24366352318009946, 0.2413696703282902], 'true,false': [0.24498343086187796, 0.23315182613521265], 'true,false,true': [0.24489795918367355, 0.24173553719008264], 'true,false,false': [0.24173553719008264, 0.2040816326530612], 'false': [0.17655293676131073, 0.15999999999999967], 'false,true': [0.2222222222222222, 0.15999999999999967]}, {'': [0.2435851909254957, 0.16926465814576508], 'true': [0.2436635231801065, 0.24040290855188662], 'true,false': [0.24421324119301446, 0.2328852475902263], 'true,false,true': [0.24489795918367332, 0.2417355371900829], 'true,false,false': [0.2417355371900829, 0.20408163265306128], 'false': [0.17613362348097325, 0.15999999999999995], 'false,true': [0.22222222222222218, 0.15999999999999995]}, {'': [0.24352324389713034, 0.16907391107668152], 'true': [0.2436635231801034, 0.2399333213191563], 'true,false': [0.24382884959637013, 0.232770957821724], 'true,false,true': [0.2448979591836737, 0.24173553719008273], 'true,false,false': [0.24173553719008273, 0.2040816326530612], 'false': [0.175840397736944, 0.1599999999999999], 'false,true': [0.22222222222222215, 0.1599999999999999]}, {'': [0.23725262988613433, 0.23812660531313184], 'false': [0.24314881395387275, 0.1699416922773567], 'false,true': [0.24329828880330062, 0.23971846166636615], 'false,true,false': [0.24365206723466534, 0.2327206345310192], 'true': [0.24139169839524616, 0.16], 'true,true': [0.0, 0.0028876051745319736], 'false,false': [0.17746425563553545, 0.16000000000000006], 'false,false,true': [0.22222222222222227, 0.16220850480109744]}, {'': [0.24235342855298816, 0.16873905225046373], 'true': [0.24247730398362552, 0.2396674610892291], 'true,false': [0.24358392354321295, 0.23269715935979943], 'true,false,true': [0.24489795918367344, 0.24173553719008273], 'true,false,false': [0.24173553719008273, 0.2040816326530612], 'false': [0.17529669587176105, 0.16000000000000014], 'false,true': [0.2222222222222222, 0.1597060916079954]}, {'': [0.24233419712423834, 0.1686882175006471], 'true': [0.24246453936636736, 0.23960081976482456], 'true,false': [0.2435440264310534, 0.2326826245989952], 'true,false,true': [0.24489795918367324, 0.24173553719008253], 'true,false,false': [0.24173553719008264, 0.20408163265306123], 'false': [0.1752187647322311, 0.16000000000000014], 'false,true': [0.22222222222222213, 0.1597023626643624]}, {'': [0.24232260035669106, 0.1686575890629571], 'true': [0.2424559846213276, 0.2395667314232623], 'true,false': [0.24352529162567688, 0.232673367566297], 'true,false,true': [0.24489795918367366, 0.24173553719008273], 'true,false,false': [0.24173553719008256, 0.20408163265306126], 'false': [0.17517176714994262, 0.16000000000000011], 'false,true': [0.22222222222222202, 0.15969917945773796]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
6;;samevenue(A, B) :- haswordvenue(A, C), haswordauthor(D, C).;true;true
6;true;author(E, D), venue(E, B).;true;true
6;true,true;samebib(E, F), venue(F, A).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.27854694504975613;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.2867203636709409;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.44905802600860323;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.44905802600860323;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.5724346493852266;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.1914822684328457;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.05814893509951237;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.05814893509951237;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.2411503606196619;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.24811816884741328;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.3851926776601658;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.3851926776601658;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.48767788391726297;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.16653882456488167;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.05092203251355405;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.05092203251355405;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.20289930723994204;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.20848477447886868;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.31518052304212246;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.31518052304212246;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.3912569620992536;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.1420942428155646;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.04434629760466855;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.04434629760466855;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.16640029396569495;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.17062637354018492;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.24804771389482108;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.24804771389482108;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.3005711547884894;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.11914890490746433;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.03842866223690456;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.03842866223690456;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.13360339271793026;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.13664585375352234;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.19020231164899937;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.19020231164899937;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.22629823971521876;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.0984134027840187;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.033154945921885746;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.033154945921885746;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.6851194194405705;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.3148805805594295;  // std dev = 1.05e-08, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.4851194194405705;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.103255439591714;  // std dev = 0.493, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.12353511621533306;  // std dev = 3.492, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.1500790041100246;  // std dev = 2.598, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(A, M) )
%   | | then return 0.08026654944252247;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.028495105925721097;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.028495105925721097;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.645008407302907;  // std dev = 0.130, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.33756949348002724;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.44445526353414;  // std dev = 0.878, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.08010652675260502;  // std dev = 0.492, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.09171342855472947;  // std dev = 3.491, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.11788066198866198;  // std dev = 2.598, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(B, M) )
%   | | then return 0.06479591611329234;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.024408230135271918;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.024408230135271918;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.06352249504455303;  // std dev = 0.491, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.059023320401544906;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.08354120304401959;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.08363534647238015;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.10455068691742762;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.05187916934404051;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.02084688910874009;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.02084688910874009;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04883667824194943;  // std dev = 0.491, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.04516928099958021;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.06268540279569591;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.06275580607301857;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.07997631066680168;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.04126932998424623;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.017760671541598414;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.017760671541598414;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.037380892332972204;  // std dev = 0.491, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.034436338013516;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.047096669886800745;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.04714929016754525;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.06163175322689805;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.03266374873483021;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.015098879183171418;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.015098879183171418;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */


Results
   AUC ROC   = 0.57288
   AUC PR    = 0.436625
   CLL	      = -0.640291
   Precision = 0.755869 at threshold = 0.5
   Recall    = 0.070925
   F1        = 0.129682


Total learning time: 97.32372784614563 seconds
Total inference time: 7.717 seconds
AUC ROC: 0.57288


Results scoring model
   AUC ROC   = 0.556615
   AUC PR    = 0.474293
   CLL	      = -0.665965
   Precision = 0.701493 at threshold = 0.5
   Recall    = 0.062918
   F1        = 0.115479


Total scoring time: 1.267 seconds
Refined model CLL: -0.665965


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.57288
   AUC PR    = 0.436625
   CLL	      = -0.640291
   Precision = 0.755869 at threshold = 0.5
   Recall    = 0.070925
   F1        = 0.129682


Total learning time: 189.4397369403839 seconds
Total inference time: 7.717 seconds
AUC ROC: 0.57288
Total revision time: 189.4397369403839
Best scored revision CLL: -0.665965


Dataset: 11_yeast_cora, Fold: 4, Type: Transfer (trRDN-B), Time: 00:56:36
{'AUC ROC': 0.57288, 'AUC PR': 0.436625, 'CLL': -0.640291, 'Precision': [0.755869, 0.5], 'Recall': 0.070925, 'F1': 0.129682, 'Learning time': 189.4397369403839, 'Inference time': 7.717, 'parameter': {'AUC ROC': 0.568443, 'AUC PR': 0.429594, 'CLL': -0.641216, 'Precision': [0.721212, 0.5], 'Recall': 0.052423, 'F1': 0.097741, 'Learning time': 89.66400909423828, 'Inference time': 7.199}}


Starting fold 5

Target train facts examples: 8644
Target train pos examples: 550
Target train neg examples: 500

Target test facts examples: 33914
Target test pos  examples: 2467
Target test neg examples: 4522

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( haswordauthor(E, C) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.44064893509950764;  // std dev = 0.493, 800.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=466 */
%   | else return 0.7291166770349955;  // std dev = 0.335, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, B) )
%   | | then if ( samebib(H, I), venue(I, A) )
%   | | | then return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(J, G), venue(J, A) )
%   | | | then return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.15083186192878065;  // std dev = 2.913, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then return 0.03996711691769419;  // std dev = 0.386, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | else return 0.1134680840356819;  // std dev = 0.436, 94.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=24 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.38027420357062824;  // std dev = 0.492, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.6157326050686436;  // std dev = 0.335, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, A) )
%   | | then if ( samebib(G, H), venue(H, B) )
%   | | | then return 0.6446589907994819;  // std dev = 0.895, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.15345175917974713;  // std dev = 0.013, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.11646402064998576;  // std dev = 0.441, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( haswordtitle(K, I) )
%   | | | then return 0.03693744759731563;  // std dev = 0.807, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.1534329638272584;  // std dev = 2.940, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.03180926572643864;  // std dev = 2.986, 59.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return 0.05218327851322567;  // std dev = 2.970, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.6358464244432968;  // std dev = 0.103, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(F, D) )
%   | | | then return 0.2454435255722109;  // std dev = 2.596, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.04704621043856603;  // std dev = 1.980, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(I, G) )
%   | | | then return 0.2653865455152309;  // std dev = 2.542, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   | | | else return -0.03721887206866423;  // std dev = 1.966, 23.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
%   | | else return 0.3413106112584207;  // std dev = 0.485, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | then if ( author(L, K), venue(L, B) )
%   | | then return 0.07310039647774773;  // std dev = 0.387, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0.1275605502157158;  // std dev = 0.451, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | else return 0.06049546965323399;  // std dev = 0.413, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.24316862886472856;  // std dev = 0.488, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.4200417033521577;  // std dev = 0.330, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, B) )
%   | | then if ( samebib(G, H), venue(H, A) )
%   | | | then return 0.5200330319517941;  // std dev = 0.898, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.1459031078716578;  // std dev = 0.017, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(I, F), venue(I, A) )
%   | | | then return -0.15215211081514932;  // std dev = 0.003, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.0999236101831259;  // std dev = 2.886, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( haswordtitle(L, J) )
%   | | | then return 0.021035318943581155;  // std dev = 0.804, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.12176332010477439;  // std dev = 2.939, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.028071351340887053;  // std dev = 0.395, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.18752337281924497;  // std dev = 0.487, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then return 0.2556494830287058;  // std dev = 0.396, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return 0.4088080337762259;  // std dev = 0.134, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.4361027940140846;  // std dev = 0.090, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return -0.16935117629819954;  // std dev = 0.041, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else return 0.09670085675641066;  // std dev = 0.440, 91.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=26 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return 0.0944477199763558;  // std dev = 0.438, 91.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=26 */
%   | | else return -0.198646291485698;  // std dev = 0.069, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then return 0.14176765643211106;  // std dev = 0.487, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else return 0.2720612945774144;  // std dev = 0.281, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, A) )
%   | | then if ( samebib(H, I), venue(I, B) )
%   | | | then return 0.4790240045205486;  // std dev = 0.908, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.1693227195255187;  // std dev = 0.033, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.05648705911752023;  // std dev = 0.430, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | | then return -0.14480581497827597;  // std dev = 0.031, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.08616352792517368;  // std dev = 4.053, 83.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=24 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return 0.03537062171798544;  // std dev = 2.996, 54.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=12 */
%   | | | else return -0.1617801398123991;  // std dev = 0.047, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.1064792891834965;  // std dev = 0.487, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then return 0.16116799456830527;  // std dev = 0.396, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else return 0.27256783491374886;  // std dev = 0.041, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, B) )
%   | | then if ( samebib(J, K), venue(K, A) )
%   | | | then return 0.36438291982253773;  // std dev = 0.904, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14719928884408512;  // std dev = 0.023, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.05271047200610976;  // std dev = 0.425, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | then return 0.06781767940879899;  // std dev = 0.437, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | | | then return 0.005848722777955812;  // std dev = 2.955, 59.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return 0.014738660713049336;  // std dev = 2.945, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordvenue(B, C) )
%   | then return 0.2842657568653958;  // std dev = 0.072, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( haswordtitle(E, C) )
%   | | then return 0.032520169050308495;  // std dev = 0.461, 34.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=16 */
%   | | else return -0.039793829323408296;  // std dev = 0.432, 71.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=20 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, A) )
%   | | then if ( samebib(H, I), venue(I, B) )
%   | | | then return 0.43210311538185;  // std dev = 1.303, 20.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=18 */
%   | | | else return -0.4043646101737734;  // std dev = 0.577, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( author(J, G), venue(J, B) )
%   | | | then return -0.3326468137651718;  // std dev = 0.908, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   | | | else return 0.07912277837525125;  // std dev = 2.868, 41.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=15 */
%   | else if ( haswordvenue(A, K), haswordvenue(B, K) )
%   | | then return 0.10147850267991276;  // std dev = 0.484, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   | | else return 0.008615423790181643;  // std dev = 0.391, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.23132748487433225;  // std dev = 0.063, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(F, D) )
%   | | | then return 0.0219454096336408;  // std dev = 2.582, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.20600416326059348;  // std dev = 1.865, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return -0.053223254435764776;  // std dev = 0.390, 49.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | else return 0.07631445893531195;  // std dev = 0.484, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, B) )
%   | | then return 0.07325372224821183;  // std dev = 0.349, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( author(L, J), venue(L, A) )
%   | | | then return -0.15186271084971317;  // std dev = 0.005, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.06487189791367699;  // std dev = 2.800, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else return 0.0170526424203754;  // std dev = 0.402, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.19351608666156833;  // std dev = 0.055, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(F, E), venue(F, A) )
%   | | | then return -0.010242439315062593;  // std dev = 2.773, 38.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=16 */
%   | | | else return -0.22613812707245143;  // std dev = 1.545, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.04920329722620279;  // std dev = 0.483, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.1229804897456957;  // std dev = 0.333, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, A) )
%   | | then return 0.01384947948692699;  // std dev = 0.258, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( author(K, I), venue(K, B) )
%   | | | then return 0.01762976178575456;  // std dev = 0.867, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.05341510698909696;  // std dev = 2.796, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else return 0.014309831466552103;  // std dev = 0.402, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */


Results
   AUC ROC   = 0.562317
   AUC PR    = 0.412318
   CLL	      = -0.705482
   Precision = 0.377828 at threshold = 0.5
   Recall    = 0.940819
   F1        = 0.539141


Total learning time: 48.26770544052124 seconds
Total inference time: 5.614 seconds
AUC ROC: 0.562317


Results scoring model
   AUC ROC   = 0.684596
   AUC PR    = 0.683113
   CLL	      = -0.616507
   Precision = 0.636248 at threshold = 0.5
   Recall    = 0.912727
   F1        = 0.749813


Total scoring time: 1.169 seconds
Parameter learned model CLL: -0.616507


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'haswordauthor(E, C)', 'false': 'haswordvenue(A, F), haswordauthor(G, F)', 'false,true': 'author(H, G), venue(H, B)', 'false,true,true': 'samebib(H, I), venue(I, A)', 'false,true,false': 'author(J, G), venue(J, A)', 'false,false': 'haswordvenue(B, K), haswordtitle(L, K)'}, {'true,true,true': [0.0, 0, 5], 'true,true,false': [0.493, 334, 466], 'true,false': [0.335, 4, 27], 'false,true,true,true': [0.894, 1, 4], 'false,true,true,false': [0.0, 5, 0], 'false,true,false,true': [0.0, 3, 0], 'false,true,false,false': [2.913, 29, 12], 'false,false,true': [0.386, 54, 12], 'false,false,false': [0.436, 70, 24]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'false': 'haswordvenue(B, E), haswordauthor(F, E)', 'false,true': 'author(G, F), venue(G, A)', 'false,true,true': 'samebib(G, H), venue(H, B)', 'false,false': 'haswordvenue(A, I), haswordauthor(J, I)', 'false,false,true': 'haswordtitle(K, I)', 'false,false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true': [0.492, 334, 471], 'true,false': [0.335, 4, 27], 'false,true,true,true': [0.895, 1, 4], 'false,true,true,false': [0.013, 5, 0], 'false,true,false': [0.441, 32, 12], 'false,false,true,true': [0.807, 4, 1], 'false,false,true,false': [2.94, 28, 13], 'false,false,false,true': [2.986, 48, 11], 'false,false,false,false': [2.97, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordvenue(A, D)', 'true,true,false': 'haswordtitle(F, D)', 'true,false': 'haswordvenue(A, G), haswordauthor(H, G)', 'true,false,true': 'haswordtitle(I, G)', 'false': 'haswordvenue(B, J), haswordauthor(K, J)', 'false,true': 'author(L, K), venue(L, B)'}, {'true,true,true': [0.103, 0, 10], 'true,true,false,true': [2.596, 13, 14], 'true,true,false,false': [1.98, 18, 6], 'true,false,true,true': [2.542, 12, 14], 'true,false,true,false': [1.966, 17, 6], 'true,false,false': [0.485, 278, 448], 'false,true,true': [0.387, 6, 2], 'false,true,false': [0.451, 32, 14], 'false,false': [0.413, 124, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'false': 'haswordvenue(A, E), haswordauthor(F, E)', 'false,true': 'author(G, F), venue(G, B)', 'false,true,true': 'samebib(G, H), venue(H, A)', 'false,true,false': 'author(I, F), venue(I, A)', 'false,false': 'haswordvenue(B, J), haswordauthor(K, J)', 'false,false,true': 'haswordtitle(L, J)'}, {'true,true': [0.488, 334, 471], 'true,false': [0.33, 4, 27], 'false,true,true,true': [0.898, 1, 4], 'false,true,true,false': [0.017, 5, 0], 'false,true,false,true': [0.003, 3, 0], 'false,true,false,false': [2.886, 29, 12], 'false,false,true,true': [0.804, 4, 1], 'false,false,true,false': [2.939, 28, 13], 'false,false,false': [0.395, 92, 22]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordtitle(E, D)', 'true,false': 'haswordvenue(A, F), haswordtitle(G, F)', 'true,false,false': 'haswordvenue(A, H), haswordauthor(I, H)', 'false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(A, L)', 'false,false': 'haswordvenue(A, M), haswordtitle(N, M)'}, {'true,true': [0.487, 336, 479], 'true,false,true': [0.396, 2, 8], 'true,false,false,true': [0.134, 0, 3], 'true,false,false,false': [0.09, 0, 8], 'false,true,true': [0.041, 14, 0], 'false,true,false': [0.44, 65, 26], 'false,false,true': [0.438, 65, 26], 'false,false,false': [0.069, 18, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordtitle(E, D)', 'false': 'haswordvenue(B, F), haswordauthor(G, F)', 'false,true': 'author(H, G), venue(H, A)', 'false,true,true': 'samebib(H, I), venue(I, B)', 'false,false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false,false,true': 'haswordtitle(K, L), haswordvenue(A, L)', 'false,false,false': 'haswordvenue(A, M), haswordtitle(N, M)'}, {'true,true': [0.487, 336, 479], 'true,false': [0.281, 2, 19], 'false,true,true,true': [0.908, 1, 4], 'false,true,true,false': [0.033, 5, 0], 'false,true,false': [0.43, 32, 12], 'false,false,true,true': [0.031, 12, 0], 'false,false,true,false': [4.053, 59, 24], 'false,false,false,true': [2.996, 42, 12], 'false,false,false,false': [0.047, 11, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordtitle(E, D)', 'true,false': 'haswordvenue(A, F), haswordtitle(G, F)', 'false': 'haswordvenue(A, H), haswordauthor(I, H)', 'false,true': 'author(J, I), venue(J, B)', 'false,true,true': 'samebib(J, K), venue(K, A)', 'false,false': 'haswordvenue(B, L), haswordauthor(M, L)', 'false,false,false': 'haswordvenue(A, N), haswordtitle(P, N)'}, {'true,true': [0.487, 336, 479], 'true,false,true': [0.396, 2, 8], 'true,false,false': [0.041, 0, 11], 'false,true,true,true': [0.904, 1, 4], 'false,true,true,false': [0.023, 5, 0], 'false,true,false': [0.425, 32, 12], 'false,false,true': [0.437, 32, 14], 'false,false,false,true': [2.955, 48, 11], 'false,false,false,false': [2.945, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordauthor(D, C)', 'true': 'haswordvenue(B, C)', 'true,false': 'haswordtitle(E, C)', 'false': 'haswordvenue(B, F), haswordauthor(G, F)', 'false,true': 'author(H, G), venue(H, A)', 'false,true,true': 'samebib(H, I), venue(I, B)', 'false,true,false': 'author(J, G), venue(J, B)', 'false,false': 'haswordvenue(A, K), haswordvenue(B, K)'}, {'true,true': [0.072, 0, 10], 'true,false,true': [0.461, 18, 16], 'true,false,false': [0.432, 51, 20], 'false,true,true,true': [1.303, 2, 18], 'false,true,true,false': [0.577, 18, 0], 'false,true,false,true': [0.908, 15, 1], 'false,true,false,false': [2.868, 26, 15], 'false,false,true': [0.484, 278, 448], 'false,false,false': [0.391, 92, 22]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordvenue(B, D)', 'true,true,false': 'haswordtitle(F, D)', 'true,false': 'haswordvenue(B, G), haswordauthor(H, G)', 'false': 'haswordvenue(A, I), haswordauthor(J, I)', 'false,true': 'author(K, J), venue(K, B)', 'false,true,false': 'author(L, J), venue(L, A)'}, {'true,true,true': [0.063, 0, 10], 'true,true,false,true': [2.582, 13, 14], 'true,true,false,false': [1.865, 18, 6], 'true,false,true': [0.39, 29, 20], 'true,false,false': [0.484, 278, 448], 'false,true,true': [0.349, 6, 4], 'false,true,false,true': [0.005, 3, 0], 'false,true,false,false': [2.8, 29, 12], 'false,false': [0.402, 124, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordvenue(B, D)', 'true,true,false': 'author(F, E), venue(F, A)', 'true,false': 'haswordtitle(G, C)', 'false': 'haswordvenue(A, H), haswordauthor(I, H)', 'false,true': 'author(J, I), venue(J, A)', 'false,true,false': 'author(K, I), venue(K, B)'}, {'true,true,true': [0.055, 0, 10], 'true,true,false,true': [2.773, 22, 16], 'true,true,false,false': [1.545, 9, 4], 'true,false,true': [0.483, 304, 449], 'true,false,false': [0.333, 3, 19], 'false,true,true': [0.258, 6, 2], 'false,true,false,true': [0.867, 3, 2], 'false,true,false,false': [2.796, 29, 12], 'false,false': [0.402, 124, 36]}]]
[{'': [0.24084270048762138, 0.18394619617433927], 'true': [0.2427591528104568, 0.11238293444328941], 'true,true': [0.0, 0.243193749999994], 'false': [0.20850480109739317, 0.17437500000000122], 'false,true': [0.23999999999999985, 0.19834710743801603], 'false,true,true': [0.15999999999999986, -2.7755575615628915e-18], 'false,true,false': [0.0, 0.20701963117192096], 'false,false': [0.14876033057851187, 0.19013128112268093]}, {'': [0.23956061863584888, 0.1809418335021213], 'true': [0.24240233045831427, 0.11238293444328855], 'false': [0.20549244069785258, 0.17141107613135428], 'false,true': [0.23945096864374707, 0.1946862536155594], 'false,true,true': [0.16037861447543716, 3.293819585334368e-05], 'false,false': [0.20334904129270392, 0.15569854468036204], 'false,false,true': [0.1302457674210878, 0.2107889436806293], 'false,false,false': [0.15109610700409498, 0.16042087243509723]}, {'': [0.23857432375349452, 0.17765301730889643], 'true': [0.23096907430499217, 0.23787904805188426], 'true,false': [0.23357799088091738, 0.23516560697137007], 'true,false,true': [0.2485207100591716, 0.16809803754793817], 'true,true': [0.0010600808672532659, 0.2303391614306184], 'true,true,false': [0.24965706447187927, 0.16331521397714793], 'false': [0.19598166802934044, 0.17058880652845126], 'false,true': [0.1496644482125769, 0.20359744286421233]}, {'': [0.2349040276231668, 0.17716200076952257], 'true': [0.23860228553226195, 0.10874459191444524], 'false': [0.19466009942682164, 0.17062057943431957], 'false,true': [0.19162510699173357, 0.19333424061406654], 'false,true,false': [3.3728275001439676e-06, 0.20314798105002016], 'false,true,true': [0.16145414406880532, 6.0598753181734244e-05], 'false,false': [0.20278482270453424, 0.15567367098030183], 'false,false,true': [0.1293424474645485, 0.21063836968784347]}, {'': [0.23413064645860807, 0.17415789634923826], 'true': [0.2373830997160807, 0.08333596872749532], 'false': [0.1762840026118372, 0.17199674407328053], 'false,true': [0.00012000489981255278, 0.1939483315336627], 'false,false': [0.19177956430852716, 0.00026549586514113606], 'true,false': [0.15655877872077567, 0.0025163431304926283], 'true,false,false': [0.005969535855150847, 0.001018212966988924]}, {'': [0.23366403488223766, 0.17100282209029646], 'true': [0.237216997528385, 0.07922525580832177], 'false': [0.18697397368793897, 0.16520780117128742], 'false,true': [0.18762280683216437, 0.18503477188093684], 'false,true,true': [0.1648539139102089, 0.0002149624634861902], 'false,false': [0.17877512342454477, 0.14358373220479417], 'false,false,true': [8.192144164465472e-05, 0.19787173727980137], 'false,false,false': [0.1662130429082127, 0.0002036990641321709]}, {'': [0.233464657443926, 0.16743894035132958], 'true': [0.23713450447700143, 0.07858235855142778], 'false': [0.17525295597765464, 0.1644685095103004], 'false,true': [0.14729032448128515, 0.18102981717557973], 'false,false': [0.19128398028665836, 0.15269172599760214], 'false,false,false': [0.14803492857077985, 0.1576462975939646], 'false,true,true': [0.16361738036634085, 0.00010509048411931899], 'true,false': [0.15666956779443297, 0.0016844986890035148]}, {'': [0.18647480003045544, 0.2236142377386113], 'false': [0.20821063264734016, 0.22441210698716318], 'false,false': [0.23450699228176566, 0.15267041465363546], 'false,true': [0.22788698922686268, 0.19299964444022175], 'false,true,true': [0.08490052372558257, 0.01850912615426317], 'false,true,false': [0.05155799136562686, 0.2006022265388497], 'true': [0.005237301204128753, 0.19587581080097513], 'true,false': [0.21243416239172921, 0.18625315754196123]}, {'': [0.22817021932635678, 0.1642612633545276], 'true': [0.1915072534769482, 0.23030365151302773], 'true,false': [0.15202075889510575, 0.23452627738108736], 'true,true': [0.003968123918394695, 0.21184212657621546], 'true,true,false': [0.24689573417810426, 0.14489804919797467], 'false': [0.17018100901340372, 0.16191169912448883], 'false,true': [0.12168600504069042, 0.18110327715786417], 'false,true,false': [9.782002414142807e-06, 0.19115125543519987]}, {'': [0.2268053896510257, 0.16378105027823028], 'true': [0.18223019138109, 0.22991272926352196], 'true,false': [0.23322827860048329, 0.11114195680281451], 'true,true': [0.0030420987999601745, 0.2063859873116337], 'true,true,false': [0.20230458669104925, 0.1835865093244974], 'false': [0.16883987162471387, 0.16184765017334435], 'false,true': [0.06658435897246817, 0.18643488037772205], 'false,true,false': [0.15016816767313698, 0.1907184555532964]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;haswordauthor(E, C).;true;true
0;false;haswordvenue(A, F), haswordauthor(G, F).;true;true
0;false,true;author(H, G), venue(H, B).;true;true
0;false,true,true;samebib(H, I), venue(I, A).;true;true
0;false,true,false;author(J, G), venue(J, A).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;false;haswordvenue(B, E), haswordauthor(F, E).;true;true
1;false,true;author(G, F), venue(G, A).;true;true
1;false,true,true;samebib(G, H), venue(H, B).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
2;true,true;haswordvenue(A, D).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;false;haswordvenue(A, E), haswordauthor(F, E).;true;true
3;false,true;author(G, F), venue(G, B).;true;true
3;false,true,true;samebib(G, H), venue(H, A).;true;true
3;false,true,false;author(I, F), venue(I, A).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordvenue(B, D), haswordtitle(E, D).;true;true
4;true,false;haswordvenue(A, F), haswordtitle(G, F).;true;true
4;true,false,false;haswordvenue(A, H), haswordauthor(I, H).;true;true
4;false;haswordvenue(B, J), haswordtitle(K, J).;true;true
4;false,true;haswordtitle(K, L), haswordvenue(A, L).;true;true
4;false,false;haswordvenue(A, M), haswordtitle(N, M).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;false;haswordvenue(B, F), haswordauthor(G, F).;true;true
5;false,true;author(H, G), venue(H, A).;true;true
5;false,true,true;samebib(H, I), venue(I, B).;true;true
5;false,false;haswordvenue(B, J), haswordtitle(K, J).;true;true
5;false,false,true;haswordtitle(K, L), haswordvenue(A, L).;true;true
5;false,false,false;haswordvenue(A, M), haswordtitle(N, M).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordvenue(B, D), haswordtitle(E, D).;true;true
6;true,false;haswordvenue(A, F), haswordtitle(G, F).;true;true
6;false;haswordvenue(A, H), haswordauthor(I, H).;true;true
6;false,true;author(J, I), venue(J, B).;true;true
6;false,true,true;samebib(J, K), venue(K, A).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;false;haswordvenue(A, I), haswordauthor(J, I).;true;true
8;false,true;author(K, J), venue(K, B).;true;true
8;false,true,false;author(L, J), venue(L, A).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.443242102801371;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.7291166770349955;  // std dev = 0.335, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, B) )
%   | | then if ( samebib(G, H), venue(H, A) )
%   | | | then return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(I, F), venue(I, A) )
%   | | | then return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.15083186192878065;  // std dev = 2.913, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( haswordtitle(L, J) )
%   | | | then return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.17522210583121967;  // std dev = 2.980, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.051131391239862906;  // std dev = 0.395, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.3803254334818479;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.6157326050686436;  // std dev = 0.335, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, B) )
%   | | then if ( author(H, F), venue(H, A) )
%   | | | then return 0.3448503113621537;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.1598483412162997;  // std dev = 0.013, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( author(I, F), venue(I, A) )
%   | | | then return 0.23545300620524684;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.12907154912175828;  // std dev = 2.884, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then return 0.1407704077153081;  // std dev = 0.451, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.03825072160333175;  // std dev = 2.992, 59.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return 0.05181004363723003;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.31149293361789177;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.48283090502633463;  // std dev = 0.335, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, A) )
%   | | then if ( samebib(G, H), venue(H, B) )
%   | | | then return 0.5979443243691656;  // std dev = 0.892, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.18813581553094644;  // std dev = 0.066, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.09339010731675726;  // std dev = 0.439, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then return 0.16977571377355652;  // std dev = 1.235, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.1103739872059294;  // std dev = 2.788, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.031890215671894435;  // std dev = 2.990, 59.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return 0.046723729809284006;  // std dev = 2.967, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.5934536245591475;  // std dev = 0.082, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.17888762943411973;  // std dev = 2.596, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.12448270489505192;  // std dev = 1.921, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.2566506514202554;  // std dev = 0.491, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.356716758660831;  // std dev = 0.343, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, A) )
%   | | then return 0.16177324926507447;  // std dev = 0.429, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( author(L, J), venue(L, B) )
%   | | | then return -0.15455402185251646;  // std dev = 0.003, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.09637635632001065;  // std dev = 2.881, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else return 0.053448078213761664;  // std dev = 0.412, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.4505277728309437;  // std dev = 0.082, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.1376944395198063;  // std dev = 2.596, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.09636055497089648;  // std dev = 1.925, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.19695905367719305;  // std dev = 0.491, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.2687032100909134;  // std dev = 0.343, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, B) )
%   | | then if ( samebib(K, L), venue(L, A) )
%   | | | then return 0.48714953906919006;  // std dev = 0.897, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.16983732358774264;  // std dev = 0.006, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.06678019311336598;  // std dev = 0.438, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.04390332132473233;  // std dev = 0.411, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.3458496947504638;  // std dev = 0.074, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(F, D) )
%   | | | then return 0.07691012723901192;  // std dev = 2.570, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.23978599113097818;  // std dev = 1.872, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(I, C) )
%   | | | then return -3.1718891524834536E-4;  // std dev = 3.038, 44.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=16 */
%   | | | else return 0.3481411743381399;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.1647911499766376;  // std dev = 0.484, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | then if ( author(L, K), venue(L, A) )
%   | | then return 0.12305353669059045;  // std dev = 0.423, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.0567582502255497;  // std dev = 0.434, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.03646947871142804;  // std dev = 0.409, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.273810856271381;  // std dev = 0.064, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.0579364459586079;  // std dev = 2.569, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.18209131009102542;  // std dev = 1.870, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then return 0.09163486348658188;  // std dev = 2.750, 36.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
%   | | | else return -0.15407435627012991;  // std dev = 1.484, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | else return 0.12390232294808584;  // std dev = 0.484, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | then if ( author(M, L), venue(M, B) )
%   | | then return 0.10603743479234162;  // std dev = 0.383, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.04836111905699348;  // std dev = 0.437, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.030091023078771068;  // std dev = 0.410, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then return 0.07839085951039011;  // std dev = 0.483, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else return 0.22736119427576257;  // std dev = 0.294, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then if ( haswordtitle(H, F) )
%   | | then return 0.017849488308422333;  // std dev = 0.364, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | else if ( author(I, G), venue(I, A) )
%   | | | then return 0.07262042331720625;  // std dev = 0.984, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.053110820289307296;  // std dev = 2.851, 42.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=12 */
%   | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | then if ( title(L, K), venue(L, A) )
%   | | | then return 0.008651565234916564;  // std dev = 3.049, 61.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=12 */
%   | | | else return -0.18022619257977476;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.0794893492628858;  // std dev = 4.049, 83.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=24 */
%   | | | else return -0.20640007678927824;  // std dev = 0.080, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then if ( author(F, D), title(F, E) )
%   | | then return 0.2178397184406612;  // std dev = 0.416, 25.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=17 */
%   | | else return -0.2446139639177036;  // std dev = 0.329, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
%   | else if ( author(G, D), venue(G, B) )
%   | | then return -0.20824112158558838;  // std dev = 0.300, 24.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=4 */
%   | | else return 0.07842698818981118;  // std dev = 0.435, 52.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=21 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( haswordtitle(K, I) )
%   | | | then return 0.10146130794111687;  // std dev = 2.442, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   | | | else return -0.11707580226939261;  // std dev = 1.846, 23.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
%   | | else return 0.07316424405722763;  // std dev = 0.484, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return -0.004968357270631399;  // std dev = 0.378, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | else return 0.03806296086386196;  // std dev = 0.425, 94.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=24 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(F, D) )
%   | | then if ( author(G, F), venue(G, B) )
%   | | | then return -0.41996992870140926;  // std dev = 1.49e-08, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.2702350950100873;  // std dev = 1.856, 24.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=19 */
%   | | else return 0.04129793273862869;  // std dev = 0.482, 783.000 (wgt'ed) examples reached here.  /* #neg=323 #pos=460 */
%   | else return 0.18145477865437554;  // std dev = 0.295, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | then if ( title(J, I), venue(J, A) )
%   | | then if ( title(K, I), venue(K, B) )
%   | | | then return 0.6384406373706212;  // std dev = 1.728, 29.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=26 */
%   | | | else return -0.20665434157579463;  // std dev = 0.294, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | | else return -0.1616471259801195;  // std dev = 0.030, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.05353209138982916;  // std dev = 0.435, 91.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=26 */
%   | | else return -0.2118083274340011;  // std dev = 0.183, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */


Results
   AUC ROC   = 0.556007
   AUC PR    = 0.4014
   CLL	      = -0.703832
   Precision = 0.376995 at threshold = 0.5
   Recall    = 0.928658
   F1        = 0.536283


Total learning time: 50.777615547180176 seconds
Total inference time: 13.073 seconds
AUC ROC: 0.556007


Results scoring model
   AUC ROC   = 0.680715
   AUC PR    = 0.669612
   CLL	      = -0.606172
   Precision = 0.632911 at threshold = 0.5
   Recall    = 0.909091
   F1        = 0.746269


Total scoring time: 1.2 seconds
Refined model CLL: -0.606172


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.556007
   AUC PR    = 0.4014
   CLL	      = -0.703832
   Precision = 0.376995 at threshold = 0.5
   Recall    = 0.928658
   F1        = 0.536283


Total learning time: 101.41432098770142 seconds
Total inference time: 13.073 seconds
AUC ROC: 0.556007
Total revision time: 101.41432098770142
Best scored revision CLL: -0.606172


Dataset: 11_yeast_cora, Fold: 5, Type: Transfer (trRDN-B), Time: 00:58:36
{'AUC ROC': 0.556007, 'AUC PR': 0.4014, 'CLL': -0.703832, 'Precision': [0.376995, 0.5], 'Recall': 0.928658, 'F1': 0.536283, 'Learning time': 101.41432098770142, 'Inference time': 13.073, 'parameter': {'AUC ROC': 0.562317, 'AUC PR': 0.412318, 'CLL': -0.705482, 'Precision': [0.377828, 0.5], 'Recall': 0.940819, 'F1': 0.539141, 'Learning time': 48.26770544052124, 'Inference time': 5.614}}


