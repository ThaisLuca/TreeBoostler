Starting experiment #1 for 13_twitter_cora

Loading pre-trained trees.
Starting fold 1

Target train facts examples: 7463
Target train pos examples: 368
Target train neg examples: 688

Target test facts examples: 35095
Target test pos  examples: 2649
Target test neg examples: 4334

******************************************
Performing Parameter Learning
******************************************
Refine
0;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
0;true;follows(A, D).;false;false
0;false;follows(A, E), recursion_accounttype(E, B).;true;true
0;false,true;follows(A, F), follows(F, A).;false;true
0;false,true,false;follows(A, G), follows(G, E).;false;false
0;false,false;follows(H, A).;true;true
0;false,false,true;follows(I, H), follows(I, A).;false;false
0;false,false,false;follows(A, J), follows(J, K).;false;false
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;true;follows(A, C), tweets(A, D).;false;false
1;false;follows(A, E), recursion_accounttype(E, B).;true;true
1;false,true;tweets(A, F), tweets(E, F).;false;true
1;false,true,false;follows(G, A), follows(E, H).;false;false
1;false,false;follows(I, A).;true;true
1;false,false,true;follows(I, J), recursion_accounttype(J, B).;false;false
1;false,false,false;tweets(A, K).;false;false
2;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;true;follows(C, D), follows(D, A).;false;false
2;false;follows(E, A).;true;true
2;false,true;follows(F, E), follows(F, A).;false;true
2;false,true,false;follows(E, G), recursion_accounttype(G, B).;false;false
2;false,false;follows(A, H), follows(H, I).;true;true
2;false,false,true;recursion_accounttype(I, B).;false;false
2;false,false,false;follows(A, J).;false;false
3;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
3;true;tweets(A, D), tweets(C, D).;false;false
3;false;follows(E, A).;true;true
3;false,true;follows(F, E), recursion_accounttype(F, B).;true;false
3;false,true,true;follows(A, G), recursion_accounttype(G, B).;false;false
3;false,false;follows(A, H), recursion_accounttype(H, B).;true;true
3;false,false,true;follows(A, I), follows(I, H).;false;false
3;false,false,false;tweets(A, J), follows(A, K).;false;false
4;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
4;true;follows(A, D), follows(D, C).;true;false
4;true,true;follows(D, A).;false;true
4;true,true,false;tweets(A, E).;false;false
4;false;follows(F, A).;false;true
4;false,false;follows(A, G), recursion_accounttype(G, B).;true;true
4;false,false,true;follows(G, H), follows(H, G).;false;false
4;false,false,false;follows(A, I), follows(I, J).;false;false
5;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
5;true;follows(D, A), tweets(D, E).;true;true
5;true,true;recursion_accounttype(D, B).;false;false
5;true,false;follows(C, F), follows(F, C).;true;false
5;true,false,true;tweets(C, G), recursion_accounttype(F, B).;false;false
5;false;follows(A, H), follows(H, A).;false;true
5;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
5;false,false,false;tweets(A, J), follows(K, A).;false;false
6;;accounttype(A, B) :- follows(A, C).;true;true
6;true;follows(D, C), recursion_accounttype(D, B).;true;false
6;true,true;recursion_accounttype(C, B).;true;true
6;true,true,true;follows(E, A), follows(E, D).;false;false
6;true,true,false;follows(F, A), recursion_accounttype(F, B).;false;false
6;false;follows(G, A), recursion_accounttype(G, B).;false;true
6;false,false;follows(H, A).;false;true
6;false,false,false;tweets(A, I).;false;false
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;tweets(C, D), follows(A, C).;false;false
7;false;follows(E, A).;true;true
7;false,true;follows(E, F), recursion_accounttype(F, B).;true;false
7;false,true,true;follows(F, E), follows(A, F).;false;false
7;false,false;follows(A, G), recursion_accounttype(G, B).;true;true
7;false,false,true;tweets(A, H).;false;false
7;false,false,false;follows(A, I).;false;false
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;true;follows(C, D), recursion_accounttype(D, B).;false;true
8;true,false;follows(A, E), follows(E, A).;false;false
8;false;follows(F, A), follows(A, G).;true;true
8;false,true;follows(G, A), follows(G, F).;false;true
8;false,true,false;follows(H, F), recursion_accounttype(H, B).;false;false
8;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
8;false,false,false;follows(J, A).;false;false
9;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
9;true;follows(C, D).;true;false
9;true,true;follows(A, D).;true;true
9;true,true,true;follows(E, A), recursion_accounttype(E, B).;false;false
9;true,true,false;tweets(C, F), follows(D, C).;false;false
9;false;follows(A, G), follows(H, A).;false;true
9;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
9;false,false,false;follows(J, A).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.23843062524035266;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.4581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.424815601766179;  // std dev = 2.714, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, A) )
%   | | then if ( samebib(K, L), venue(L, B) )
%   | | | then return 0.14762261931003867;  // std dev = 2.796, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return -0.14185106490048768;  // std dev = 4.47e-08, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | then return 0.004815601766179008;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.20686012285620575;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.3982164798305049;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return 0.45935396641210174;  // std dev = 0.810, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.3628735944379146;  // std dev = 2.715, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.13722572521892853;  // std dev = 0.058, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.004228390109386251;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.005199750239144792;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.1751801570305961;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.37343204136433367;  // std dev = 0.808, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.3269052770205085;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.2976924487337738;  // std dev = 2.715, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, B) )
%   | | then if ( samebib(K, L), venue(L, A) )
%   | | | then return 0.1498663841289746;  // std dev = 2.783, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return -0.14144086774915868;  // std dev = 0.044, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.133962199887011;  // std dev = 0.038, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return 0.004568660166365291;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.14514481334590568;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.30280675254289574;  // std dev = 0.800, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.2635769705623022;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.2331056289341738;  // std dev = 2.716, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.11751896369854019;  // std dev = 0.047, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.003926561793497305;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.004012232942941105;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.11804668707041945;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.23040446245548618;  // std dev = 0.799, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.20323593140109866;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.17934630824284575;  // std dev = 2.716, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.10588737988376083;  // std dev = 0.043, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.003446665481504314;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.0035220811797056777;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.09457696812283496;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.15881450919170095;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return 0.18014724393731743;  // std dev = 0.795, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.13451389566172012;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.09628707628594481;  // std dev = 0.040, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.003024317263914703;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.00309065599358367;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C) )
%   | | then return -0.10539005564974935;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.13527255441208885;  // std dev = 0.795, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.07595587115072004;  // std dev = 0.486, 847.000 (wgt'ed) examples reached here.  /* #neg=524 #pos=323 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.12029303091677682;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.10112784853144664;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return -0.08823920232388983;  // std dev = 0.037, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.00265287171311677;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return 0.0027111879918907122;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.05876995206281018;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.09410273176661024;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return 0.10820021491349296;  // std dev = 0.792, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.074644016586447;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, B) )
%   | | then if ( samebib(K, L), venue(L, A) )
%   | | | then return 0.13337516795564325;  // std dev = 2.768, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return -0.12504852132875272;  // std dev = 0.084, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.08836623697578834;  // std dev = 0.050, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return 0.002377625936246762;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04581813968556684;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.0818052450194257;  // std dev = 0.793, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.07160052179285414;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.055843574213156805;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then return -0.04107202515217218;  // std dev = 0.326, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then if ( title(M, L), venue(M, A) )
%   | | | then return -0.0020865097177038268;  // std dev = 2.999, 80.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=11 */
%   | | | else return -0.09224233105117068;  // std dev = 0.060, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(B, N), haswordtitle(P, N) )
%   | | | then return 0.0058959266434802406;  // std dev = 2.790, 67.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=10 */
%   | | | else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.03554341140187517;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.06560317307621603;  // std dev = 0.791, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.056724430633477894;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.0410872403627024;  // std dev = 2.718, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.07719008635462965;  // std dev = 0.048, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 8.386153263396975E-4;  // std dev = 0.339, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.0024715333206801215;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.55726
   AUC PR    = 0.428158
   CLL	      = -0.654147
   Precision = 0.637427 at threshold = 0.5
   Recall    = 0.041148
   F1        = 0.077305


Total learning time: 63.34059548377991 seconds
Total inference time: 7.467 seconds
AUC ROC: 0.55726


Results scoring model
   AUC ROC   = 0.593327
   AUC PR    = 0.420586
   CLL	      = -0.617479
   Precision = 0.578947 at threshold = 0.5
   Recall    = 0.059783
   F1        = 0.108374


Total scoring time: 1.043 seconds
Parameter learned model CLL: -0.617479


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'title(K, J), venue(K, A)', 'false,true,true': 'samebib(K, L), venue(L, B)', 'false,false': 'haswordvenue(B, M), haswordtitle(N, M)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.816, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.714, 13, 17], 'false,true,true,true': [2.796, 27, 11], 'false,true,true,false': [4.47e-08, 42, 0], 'false,true,false': [0.0, 7, 0], 'false,false,true': [0.354, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordauthor(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(A, K)', 'false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [1.095, 2, 3], 'true,false,false,true': [0.81, 1, 2], 'true,false,false,false': [2.715, 13, 17], 'false,true,true': [0.058, 12, 0], 'false,true,false': [0.354, 64, 11], 'false,false,true': [0.346, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'title(K, J), venue(K, B)', 'false,true,true': 'samebib(K, L), venue(L, A)', 'false,false': 'haswordvenue(A, M), haswordtitle(N, M)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.808, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.715, 13, 17], 'false,true,true,true': [2.783, 27, 11], 'false,true,true,false': [0.044, 42, 0], 'false,true,false': [0.038, 7, 0], 'false,false,true': [0.346, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(A, K)', 'false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.8, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.716, 13, 17], 'false,true,true': [0.047, 12, 0], 'false,true,false': [0.346, 64, 11], 'false,false,true': [0.346, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(A, K)', 'false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.799, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.716, 13, 17], 'false,true,true': [0.043, 12, 0], 'false,true,false': [0.346, 64, 11], 'false,false,true': [0.346, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordauthor(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(A, K)', 'false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [1.095, 2, 3], 'true,false,false,true': [0.795, 1, 2], 'true,false,false,false': [2.717, 13, 17], 'false,true,true': [0.04, 12, 0], 'false,true,false': [0.346, 64, 11], 'false,false,true': [0.346, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordtitle(F, C)', 'true,false': 'haswordtitle(G, C)', 'true,false,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(A, L)', 'false,false': 'haswordvenue(A, M), haswordtitle(N, M)'}, {'true,true,true': [0.894, 4, 1], 'true,true,false': [0.795, 1, 2], 'true,false,true': [0.486, 524, 323], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.717, 13, 17], 'false,true,true': [0.037, 12, 0], 'false,true,false': [0.346, 64, 11], 'false,false,true': [0.346, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordauthor(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'title(K, J), venue(K, B)', 'false,true,true': 'samebib(K, L), venue(L, A)', 'false,false': 'haswordvenue(A, M), haswordtitle(N, M)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [1.095, 2, 3], 'true,false,false,true': [0.792, 1, 2], 'true,false,false,false': [2.717, 13, 17], 'false,true,true,true': [2.768, 27, 11], 'false,true,true,false': [0.084, 42, 0], 'false,true,false': [0.05, 7, 0], 'false,false,true': [0.346, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordauthor(J, I)', 'false,false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false,false,true': 'title(M, L), venue(M, A)', 'false,false,false': 'haswordvenue(B, N), haswordtitle(P, N)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.793, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.717, 13, 17], 'false,true': [0.326, 7, 1], 'false,false,true,true': [2.999, 69, 11], 'false,false,true,false': [0.06, 7, 0], 'false,false,false,true': [2.79, 57, 10], 'false,false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(A, K)', 'false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.791, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.718, 13, 17], 'false,true,true': [0.048, 12, 0], 'false,true,false': [0.339, 64, 11], 'false,false,true': [0.346, 64, 11], 'false,false,false': [0.0, 4, 0]}]]
[{'': [0.23762656230272572, 0.11496588764697444], 'true': [0.2356675262844691, 0.24376731301939172], 'true,false': [0.22222222222222224, 0.2448979591836734], 'true,false,false': [0.23999999999999994, 0.2455555555555551], 'false': [0.1104505218655035, 0.11985258772632539], 'false,false': [0.12515555555555502, 0.0], 'false,true': [0.11859374999999946, -7.93016446160826e-18], 'false,true,true': [0.20567867036011028, 4.7580986769649563e-17]}, {'': [0.23716066162823074, 0.11237704672357923], 'true': [0.2356675262844735, 0.24352902641532287], 'true,false': [0.23999999999999994, 0.2439708236863585], 'true,false,false': [0.21859724583033524, 0.24566195763775364], 'false': [0.11031023146367078, 0.11455237397192931], 'false,false': [0.119797633597279, 0.0], 'false,true': [0.0002775880072199051, 0.125155555555556]}, {'': [0.23670497169729698, 0.1120113358045344], 'true': [0.23566752628446727, 0.24320063124509564], 'true,false': [0.2178405896805459, 0.24497000121479523], 'true,false,false': [0.23999999999999994, 0.24567642198823575], 'false': [0.10979734463652976, 0.11437085679211725], 'false,false': [0.11977888330495867, 0.0], 'false,true': [0.11800789338177949, 0.0002082139066478052], 'false,true,true': [0.20383549935832115, 4.5885493814837707e-05]}, {'': [0.23636704066910505, 0.10942540678952524], 'true': [0.23566752628446358, 0.2429555782226219], 'true,false': [0.213491894059225, 0.24514390232198713], 'true,false,false': [0.24, 0.2458685761384204], 'false': [0.10499562205429232, 0.11423459197528409], 'false,false': [0.11976238615698553, 0.0], 'false,true': [0.00018566422626401421, 0.11973086831890963]}, {'': [0.2361614212554553, 0.10918603636593897], 'true': [0.235667526284474, 0.2427465820889788], 'true,false': [0.21300757646431787, 0.24511642291425534], 'true,false,false': [0.24, 0.24588762948168214], 'false': [0.10464664983792976, 0.11412967439456284], 'false,false': [0.11974788098828767, 0.0], 'false,true': [0.00015434761787588153, 0.11971659978266477]}, {'': [0.2360545262967353, 0.10900420865121102], 'true': [0.23566752628446164, 0.24264039018722353], 'true,false': [0.24000000000000007, 0.2429870140123359], 'true,false,false': [0.21082022682005178, 0.2460143834156696], 'false': [0.10438384566617977, 0.11404717786998077], 'false,false': [0.11973513465350441, 0.0], 'false,true': [0.00013011741888197098, 0.11970406247694532]}, {'': [0.23600236588743284, 0.10886298370908078], 'true': [0.19265828694224543, 0.23631908915736613], 'true,false': [0.23592121091316542, 0.24519969347321746], 'true,false,false': [0.24, 0.2460138370212495], 'true,true': [0.15999999999999998, 0.2108897077532109], 'false': [0.10418130802385944, 0.1139811612475981], 'false,false': [0.11972393956177088, 0.0], 'false,true': [0.00011103944312585458, 0.11969305180743217]}, {'': [0.23590929100588237, 0.10875121341703956], 'true': [0.23559515405302808, 0.24252703358694347], 'true,false': [0.24000000000000005, 0.24287449280032203], 'true,false,false': [0.20918649448991475, 0.2461409273180751], 'false': [0.10402212908901233, 0.11392754357966155], 'false,false': [0.11971411129061667, 0.0], 'false,true': [0.1124970480973498, 0.0003540798854276282], 'false,true,true': [0.20159081194504888, 0.00016657310400340432]}, {'': [0.2358965268149865, 0.10675958857751486], 'true': [0.23559370784290773, 0.24249441869000873], 'true,false': [0.20940083908478457, 0.24528662731192538], 'true,false,false': [0.24000000000000005, 0.24613226309290875], 'false': [0.10596976641660179, 0.10673468080698646], 'false,false': [0.10404397772721635, 0.10996451623342335], 'false,false,false': [0.11621835667552011, 0.0], 'false,false,true': [0.1124488821796921, 0.0005138375357446641]}, {'': [0.2358903809181857, 0.10666093590450285], 'true': [0.23559263159770755, 0.24247916642306822], 'true,false': [0.2086012270867593, 0.2453437932410349], 'true,false,false': [0.24, 0.24619949377365058], 'false': [0.10010845663139162, 0.11383431539696036], 'false,false': [0.11968046595551073, 0.0], 'false,true': [0.0001937850783514869, 0.11525501397146178]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
0;false,true;title(K, J), venue(K, A).;true;true
0;false,true,true;samebib(K, L), venue(L, B).;true;true
0;false,false;haswordvenue(B, M), haswordtitle(N, M).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
1;false,true;haswordtitle(J, K), haswordvenue(A, K).;true;true
1;false,false;haswordvenue(A, L), haswordtitle(M, L).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
2;false,true;title(K, J), venue(K, B).;true;true
2;false,true,true;samebib(K, L), venue(L, A).;true;true
2;false,false;haswordvenue(A, M), haswordtitle(N, M).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
3;false,true;haswordtitle(J, K), haswordvenue(A, K).;true;true
3;false,false;haswordvenue(A, L), haswordtitle(M, L).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
4;false,true;haswordtitle(J, K), haswordvenue(A, K).;true;true
4;false,false;haswordvenue(A, L), haswordtitle(M, L).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
5;false,true;haswordtitle(J, K), haswordvenue(A, K).;true;true
5;false,false;haswordvenue(A, L), haswordtitle(M, L).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;false;haswordvenue(B, J), haswordtitle(K, J).;true;true
6;false,true;haswordtitle(K, L), haswordvenue(A, L).;true;true
6;false,false;haswordvenue(A, M), haswordtitle(N, M).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
7;false,true;title(K, J), venue(K, B).;true;true
7;false,true,true;samebib(K, L), venue(L, A).;true;true
7;false,false;haswordvenue(A, M), haswordtitle(N, M).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;false;haswordvenue(A, I), haswordauthor(J, I).;true;true
8;false,false;haswordvenue(A, K), haswordtitle(L, K).;true;true
8;false,false,true;title(M, L), venue(M, A).;true;true
8;false,false,false;haswordvenue(B, N), haswordtitle(P, N).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
9;false,true;haswordtitle(J, K), haswordvenue(A, K).;true;true
9;false,false;haswordvenue(A, L), haswordtitle(M, L).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.23843062524035266;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.4581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.424815601766179;  // std dev = 2.714, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.004815601766179008;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.004815601766179008;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.20686012285620575;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.3982164798305049;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return 0.45935396641210174;  // std dev = 0.810, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.3628735944379146;  // std dev = 2.715, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.004228390109386251;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.004228390109386251;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.1751801570305961;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.37391135762433364;  // std dev = 0.808, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.3269052770205085;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.2976445171077738;  // std dev = 2.715, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.11231637819360636;  // std dev = 9.13e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0037111125833978686;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.0037111125833978686;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.14514481334590568;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.29107789104287257;  // std dev = 0.807, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.26358767085800217;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.23427726647373656;  // std dev = 2.715, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.1015963294878363;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0032558270569705674;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.0032558270569705674;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.11804668707041945;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.22080200794107122;  // std dev = 0.807, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.20295547503731384;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.18035198942428982;  // std dev = 2.715, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.09269127618926097;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0028554031467501392;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.0028554031467501392;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.09457696812283496;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.1585757331570609;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.15350422607609474;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.13605742149097869;  // std dev = 2.612, 28.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=16 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, A) )
%   | | then if ( samebib(K, L), venue(L, B) )
%   | | | then return 0.15151873674305016;  // std dev = 2.773, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return -0.14135470799918157;  // std dev = 0.081, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.09361024488001457;  // std dev = 0.055, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | then return 0.002503460836945874;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.07489163449109286;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.119192567393581;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return 0.1319057701750974;  // std dev = 0.807, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.10164665108565704;  // std dev = 2.714, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then return -0.029808423540542653;  // std dev = 0.328, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, M), haswordvenue(A, M) )
%   | | | then return -0.08413588432950221;  // std dev = 0.034, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0021943081594878503;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | | | then return 0.00641901622958812;  // std dev = 2.847, 67.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=10 */
%   | | | else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.05877777591804268;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.08992350818953354;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return 0.13249418393674542;  // std dev = 0.788, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.07289739172625193;  // std dev = 2.718, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.07788250165837629;  // std dev = 0.031, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0019228798175884457;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.002263908830109586;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04582386394015474;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.09988045057787202;  // std dev = 0.788, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.07121138833960008;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.054083987442772215;  // std dev = 2.718, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.07247568616996454;  // std dev = 0.029, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0016846780662751325;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.0019846968379277977;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.03554750876544446;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.07565388091308707;  // std dev = 0.789, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.05405028543411574;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.04051676265097228;  // std dev = 2.718, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then return -0.02019094994778181;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, M), haswordvenue(B, M) )
%   | | | then return -0.06775682799061797;  // std dev = 0.028, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0017395526683921102;  // std dev = 2.995, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, N), haswordtitle(P, N) )
%   | | | then return 0.004062781395501627;  // std dev = 2.917, 67.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=10 */
%   | | | else return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.556995
   AUC PR    = 0.428313
   CLL	      = -0.657506
   Precision = 0.637427 at threshold = 0.5
   Recall    = 0.041148
   F1        = 0.077305


Total learning time: 58.35822677612305 seconds
Total inference time: 7.285 seconds
AUC ROC: 0.556995


Results scoring model
   AUC ROC   = 0.590946
   AUC PR    = 0.419499
   CLL	      = -0.620307
   Precision = 0.578947 at threshold = 0.5
   Recall    = 0.059783
   F1        = 0.108374


Total scoring time: 1.145 seconds
Refined model CLL: -0.620307


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.55726
   AUC PR    = 0.428158
   CLL	      = -0.654147
   Precision = 0.637427 at threshold = 0.5
   Recall    = 0.041148
   F1        = 0.077305


Total learning time: 123.88682225990296 seconds
Total inference time: 7.467 seconds
AUC ROC: 0.55726
Total revision time: 123.88682225990296
Best scored revision CLL: -0.617479


Dataset: 13_twitter_cora, Fold: 1, Type: Transfer (trRDN-B), Time: 00:02:19
{'AUC ROC': 0.55726, 'AUC PR': 0.428158, 'CLL': -0.654147, 'Precision': [0.637427, 0.5], 'Recall': 0.041148, 'F1': 0.077305, 'Learning time': 123.88682225990296, 'Inference time': 7.467, 'parameter': {'AUC ROC': 0.55726, 'AUC PR': 0.428158, 'CLL': -0.654147, 'Precision': [0.637427, 0.5], 'Recall': 0.041148, 'F1': 0.077305, 'Learning time': 63.34059548377991, 'Inference time': 7.467}}


Starting fold 2

Target train facts examples: 9016
Target train pos examples: 771
Target train neg examples: 544

Target test facts examples: 33542
Target test pos  examples: 2246
Target test neg examples: 4478

******************************************
Performing Parameter Learning
******************************************
Refine
0;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
0;true;follows(A, D).;false;false
0;false;follows(A, E), recursion_accounttype(E, B).;true;true
0;false,true;follows(A, F), follows(F, A).;false;true
0;false,true,false;follows(A, G), follows(G, E).;false;false
0;false,false;follows(H, A).;true;true
0;false,false,true;follows(I, H), follows(I, A).;false;false
0;false,false,false;follows(A, J), follows(J, K).;false;false
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;true;follows(A, C), tweets(A, D).;false;false
1;false;follows(A, E), recursion_accounttype(E, B).;true;true
1;false,true;tweets(A, F), tweets(E, F).;false;true
1;false,true,false;follows(G, A), follows(E, H).;false;false
1;false,false;follows(I, A).;true;true
1;false,false,true;follows(I, J), recursion_accounttype(J, B).;false;false
1;false,false,false;tweets(A, K).;false;false
2;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;true;follows(C, D), follows(D, A).;false;false
2;false;follows(E, A).;true;true
2;false,true;follows(F, E), follows(F, A).;false;true
2;false,true,false;follows(E, G), recursion_accounttype(G, B).;false;false
2;false,false;follows(A, H), follows(H, I).;true;true
2;false,false,true;recursion_accounttype(I, B).;false;false
2;false,false,false;follows(A, J).;false;false
3;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
3;true;tweets(A, D), tweets(C, D).;false;false
3;false;follows(E, A).;true;true
3;false,true;follows(F, E), recursion_accounttype(F, B).;true;false
3;false,true,true;follows(A, G), recursion_accounttype(G, B).;false;false
3;false,false;follows(A, H), recursion_accounttype(H, B).;true;true
3;false,false,true;follows(A, I), follows(I, H).;false;false
3;false,false,false;tweets(A, J), follows(A, K).;false;false
4;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
4;true;follows(A, D), follows(D, C).;true;false
4;true,true;follows(D, A).;false;true
4;true,true,false;tweets(A, E).;false;false
4;false;follows(F, A).;false;true
4;false,false;follows(A, G), recursion_accounttype(G, B).;true;true
4;false,false,true;follows(G, H), follows(H, G).;false;false
4;false,false,false;follows(A, I), follows(I, J).;false;false
5;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
5;true;follows(D, A), tweets(D, E).;true;true
5;true,true;recursion_accounttype(D, B).;false;false
5;true,false;follows(C, F), follows(F, C).;true;false
5;true,false,true;tweets(C, G), recursion_accounttype(F, B).;false;false
5;false;follows(A, H), follows(H, A).;false;true
5;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
5;false,false,false;tweets(A, J), follows(K, A).;false;false
6;;accounttype(A, B) :- follows(A, C).;true;true
6;true;follows(D, C), recursion_accounttype(D, B).;true;false
6;true,true;recursion_accounttype(C, B).;true;true
6;true,true,true;follows(E, A), follows(E, D).;false;false
6;true,true,false;follows(F, A), recursion_accounttype(F, B).;false;false
6;false;follows(G, A), recursion_accounttype(G, B).;false;true
6;false,false;follows(H, A).;false;true
6;false,false,false;tweets(A, I).;false;false
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;tweets(C, D), follows(A, C).;false;false
7;false;follows(E, A).;true;true
7;false,true;follows(E, F), recursion_accounttype(F, B).;true;false
7;false,true,true;follows(F, E), follows(A, F).;false;false
7;false,false;follows(A, G), recursion_accounttype(G, B).;true;true
7;false,false,true;tweets(A, H).;false;false
7;false,false,false;follows(A, I).;false;false
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;true;follows(C, D), recursion_accounttype(D, B).;false;true
8;true,false;follows(A, E), follows(E, A).;false;false
8;false;follows(F, A), follows(A, G).;true;true
8;false,true;follows(G, A), follows(G, F).;false;true
8;false,true,false;follows(H, F), recursion_accounttype(H, B).;false;false
8;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
8;false,false,false;follows(J, A).;false;false
9;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
9;true;follows(C, D).;true;false
9;true,true;follows(A, D).;true;true
9;true,true,true;follows(E, A), recursion_accounttype(E, B).;false;false
9;true,true,false;tweets(C, F), follows(D, C).;false;false
9;false;follows(A, G), follows(H, A).;false;true
9;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
9;false,false,false;follows(J, A).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.4356367001892301;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.5949910403626703;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.5640312880406888;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.37395569825543723;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.5062567560764839;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.48074388375574334;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.7194734122109543;  // std dev = 7.30e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.30665618885999163;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.4047531668618019;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.386198448632422;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.5553664367462845;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.5553664367462846;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.20848477447886868;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.20848477447886868;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.24206322397592006;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.3261448737160187;  // std dev = 0.439, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.2788572331674748;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.4175135841583099;  // std dev = 1.49e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return 0.41751358415830986;  // std dev = 5.16e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.17062637354018512;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.17062637354018512;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.18614898381430323;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.24558668125641064;  // std dev = 0.439, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.20966773150020385;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.32071184716014967;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return 0.3207118471601496;  // std dev = 2.11e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.13664585375352212;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.13664585375352212;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.14102718021002747;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.18620428986064227;  // std dev = 0.439, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.15537887054614685;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.25517224256948945;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.25517224256948945;  // std dev = 1.49e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.10762034996184425;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.10762034996184425;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.10608452896807775;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.14069831902044805;  // std dev = 0.439, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.11730579632522013;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.20975771563253556;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.2097577156325356;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.08372807955323866;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.08372807955323866;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.3521068614621881;  // std dev = 0.357, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.002106861462188081;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, B) )
%   | | | then return -0.2144191975621369;  // std dev = 0.835, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.2978931385378119;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.07748374588430085;  // std dev = 0.494, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.11701950785330507;  // std dev = 1.912, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.10083149176527732;  // std dev = 1.889, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then return 0.14575648741360903;  // std dev = 0.315, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | else return 0.06457405393631672;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.2649159929181119;  // std dev = 0.357, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.0015801533055608274;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.1817023311150835;  // std dev = 1.221, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.05811967930175173;  // std dev = 0.494, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.08986607039642386;  // std dev = 1.912, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.07963338755660698;  // std dev = 1.891, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.15684395404186718;  // std dev = 1.67e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.04949778322519479;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.03609749297769519;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.044893103916364745;  // std dev = 0.493, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.06962868331625201;  // std dev = 0.439, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.03727491979944312;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.15230845484865818;  // std dev = 3.73e-09, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return 0.13719983240199474;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.03777940363354101;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.027474366606642136;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */


Results
   AUC ROC   = 0.535664
   AUC PR    = 0.343409
   CLL	      = -0.755533
   Precision = 0.353705 at threshold = 0.5
   Recall    = 0.958593
   F1        = 0.516741


Total learning time: 66.27654814720154 seconds
Total inference time: 6.614 seconds
AUC ROC: 0.535664


Results scoring model
   AUC ROC   = 0.542523
   AUC PR    = 0.650341
   CLL	      = -0.66784
   Precision = 0.591869 at threshold = 0.5
   Recall    = 0.981842
   F1        = 0.738537


Total scoring time: 1.111 seconds
Parameter learned model CLL: -0.66784


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)'}, {'true,true': [0.494, 518, 708], 'true,false,true': [0.44, 5, 14], 'true,false,false,true': [1.879, 5, 12], 'true,false,false,false': [0.0, 0, 5], 'false,true,true': [0.0, 0, 20], 'false,true,false': [0.495, 8, 6], 'false,false': [0.495, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)'}, {'true,true': [0.494, 518, 708], 'true,false,true': [0.44, 5, 14], 'true,false,false,true': [1.879, 5, 12], 'true,false,false,false': [0.0, 0, 5], 'false,true,true': [7.3e-08, 0, 20], 'false,true,false': [0.495, 8, 6], 'false,false': [0.495, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)'}, {'true,true': [0.494, 518, 708], 'true,false,true': [0.44, 5, 14], 'true,false,false,true': [1.879, 5, 12], 'true,false,false,false': [0.0, 0, 5], 'false,true,true': [0.0, 0, 20], 'false,true,false': [0.495, 8, 6], 'false,false': [0.495, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(A, K)'}, {'true,true': [0.494, 518, 708], 'true,false,true': [0.439, 5, 14], 'true,false,false,true': [1.879, 5, 12], 'true,false,false,false': [1.49e-08, 0, 5], 'false,true,true': [5.16e-08, 0, 20], 'false,true,false': [0.495, 8, 6], 'false,false': [0.495, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(A, K)'}, {'true,true': [0.494, 518, 708], 'true,false,true': [0.439, 5, 14], 'true,false,false,true': [1.879, 5, 12], 'true,false,false,false': [0.0, 0, 5], 'false,true,true': [2.11e-08, 0, 20], 'false,true,false': [0.495, 8, 6], 'false,false': [0.495, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)'}, {'true,true': [0.494, 518, 708], 'true,false,true': [0.439, 5, 14], 'true,false,false,true': [1.879, 5, 12], 'true,false,false,false': [0.0, 0, 5], 'false,true,true': [1.49e-08, 0, 20], 'false,true,false': [0.495, 8, 6], 'false,false': [0.495, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)'}, {'true,true': [0.494, 518, 708], 'true,false,true': [0.439, 5, 14], 'true,false,false,true': [1.879, 5, 12], 'true,false,false,false': [0.0, 0, 5], 'false,true,true': [0.0, 0, 20], 'false,true,false': [0.495, 8, 6], 'false,false': [0.495, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(E, C)', 'true,false': 'haswordvenue(B, C)', 'true,false,false': 'author(F, D), venue(F, B)', 'false': 'haswordvenue(A, G), haswordvenue(B, G)', 'false,true': 'haswordtitle(H, G)', 'false,true,false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,false': 'haswordvenue(A, K), haswordtitle(L, K)'}, {'true,true': [0.357, 3, 17], 'true,false,true': [1.0, 2, 2], 'true,false,false,true': [0.835, 3, 1], 'true,false,false,false': [0.894, 4, 1], 'false,true,true': [0.494, 507, 687], 'false,true,false,true': [1.912, 5, 14], 'false,true,false,false': [1.889, 5, 17], 'false,false,true': [0.315, 7, 26], 'false,false,false': [0.495, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordtitle(F, D)', 'true,true,false': 'haswordvenue(B, D)', 'true,false': 'haswordtitle(G, C)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(A, L)'}, {'true,true,true': [0.357, 3, 17], 'true,true,false,true': [1.0, 2, 2], 'true,true,false,false': [1.221, 6, 2], 'true,false,true': [0.494, 507, 687], 'true,false,false,true': [1.912, 5, 14], 'true,false,false,false': [1.891, 5, 17], 'false,true,true': [1.67e-08, 0, 20], 'false,true,false': [0.495, 8, 6], 'false,false': [0.49, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(A, K)'}, {'true,true': [0.493, 518, 708], 'true,false,true': [0.439, 5, 14], 'true,false,false,true': [1.879, 5, 12], 'true,false,false,false': [3.73e-09, 0, 5], 'false,true,true': [0.0, 0, 20], 'false,true,false': [0.495, 8, 6], 'false,false': [0.49, 8, 6]}]]
[{'': [0.24306651325713594, 0.22222222222222385], 'true': [0.24399564626142126, 0.1844140392623454], 'false': [0.17993079584775207, 0.24489795918367352], 'true,false': [0.19390581717451486, 0.17561983471074338], 'false,true': [-8.881784197001253e-17, 0.24489795918367352], 'true,false,false': [0.20761245674740453, 0.0]}, {'': [0.24265720194658633, 0.1968581969586747], 'true': [0.2439956462613994, 0.18151807630785113], 'false': [0.15465453537750243, 0.24489795918367324], 'true,false': [0.193905817174515, 0.170436695832288], 'true,false,false': [0.20761245674740458, 0.0], 'false,true': [2.6645352591003756e-16, 0.24489795918367324]}, {'': [0.24225435465227546, 0.17210326137526186], 'true': [0.2439956462614137, 0.1787372059517856], 'true,false': [0.1939058171745152, 0.16545366223293653], 'false': [0.1299852570106418, 0.2448979591836735], 'true,false,false': [0.20761245674740486, -4.4408920985006264e-17], 'false,true': [-2.6645352591003756e-16, 0.2448979591836735]}, {'': [0.24201842021934103, 0.1576721797796284], 'true': [0.24399564626139422, 0.1773616247101183], 'true,false': [0.192926167121755, 0.1638042013129905], 'true,false,false': [0.20761245674740472, 4.4408920985006264e-17], 'false': [0.11560410995340127, 0.24489795918367352], 'false,true': [1.3322676295501878e-16, 0.24489795918367352]}, {'': [0.24190718913604425, 0.15109193554816294], 'true': [0.24399564626140396, 0.17666622133125584], 'true,false': [0.1928999136805661, 0.16259333977574142], 'true,false,false': [0.20761245674740483, -2.2204460492503132e-17], 'false': [0.10904663473311735, 0.24489795918367335], 'false,true': [2.2204460492503132e-17, 0.24489795918367335]}, {'': [0.24186003358722954, 0.14814884171424997], 'true': [0.24399564626140052, 0.17638871506620235], 'true,false': [0.19280906941022036, 0.16217675573762708], 'true,false,false': [0.2076124567474049, 0.0], 'false': [0.10611372461489284, 0.24489795918367338], 'false,true': [1.1102230246251566e-17, 0.24489795918367338]}, {'': [0.24183837281886145, 0.14671770828047462], 'true': [0.24399564626140433, 0.17625528632571694], 'true,false': [0.19284070050078672, 0.16192889297755367], 'true,false,false': [0.2076124567474049, -5.551115123125783e-18], 'false': [0.10468754319991948, 0.24489795918367346], 'false,true': [-2.7755575615628914e-17, 0.24489795918367346]}, {'': [0.22676774686409673, 0.23856137088804297], 'false': [0.24208721531512722, 0.14412744851530992], 'false,true': [0.24431832529481298, 0.17619284172994878], 'true': [0.12749999999999997, 0.20795248991639917], 'true,false': [0.24999999999999997, 0.16799804381627037], 'false,true,false': [0.1923256780137849, 0.16213849899755142], 'true,false,false': [0.1741245436854914, 0.16], 'false,false': [0.09941316905223485, 0.24489795918367332]}, {'': [0.24099140194708785, 0.14470431928032707], 'true': [0.19515101605569588, 0.24208409837768408], 'true,false': [0.24431832529481998, 0.1763525758472531], 'true,true': [0.12750000000000006, 0.21500965953353238], 'true,true,false': [0.25, 0.1863169996018308], 'true,false,false': [0.19237570508533713, 0.16246589565204983], 'false': [0.10363142273386608, 0.24030254978605622], 'false,true': [1.3877787807814457e-17, 0.2448979591836735]}, {'': [0.24055611070823332, 0.14417808124362227], 'true': [0.24268313589843113, 0.17650958409825174], 'true,false': [0.19241903420928044, 0.16275173456473663], 'true,false,false': [0.20761245674740486, 2.7755575615628915e-18], 'false': [0.10323448670869331, 0.24026087614771088], 'false,true': [-8.326672684688674e-18, 0.24489795918367355]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,false;haswordvenue(A, E), haswordtitle(F, E).;true;true
0;true,false,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
0;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
0;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,false;haswordvenue(A, E), haswordtitle(F, E).;true;true
1;true,false,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
1;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,false;haswordvenue(A, E), haswordtitle(F, E).;true;true
2;true,false,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
2;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
2;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,false;haswordvenue(B, E), haswordtitle(F, E).;true;true
3;true,false,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
3;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
3;false,true;haswordtitle(J, K), haswordvenue(A, K).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,false;haswordvenue(B, E), haswordtitle(F, E).;true;true
4;true,false,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
4;false,true;haswordtitle(J, K), haswordvenue(A, K).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,false;haswordvenue(A, E), haswordtitle(F, E).;true;true
5;true,false,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
5;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
5;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,false;haswordvenue(A, E), haswordtitle(F, E).;true;true
6;true,false,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
6;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;false;haswordvenue(B, J), haswordtitle(K, J).;true;true
8;false,true;haswordtitle(K, L), haswordvenue(A, L).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,false;haswordvenue(B, E), haswordtitle(F, E).;true;true
9;true,false,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
9;false,true;haswordtitle(J, K), haswordvenue(A, K).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.4356367001892301;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.5949910403626703;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.5640312880406888;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.37395569825543723;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.5062567560764839;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.48074388375574334;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.7194734122109543;  // std dev = 7.30e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.30665618885999163;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.4047531668618019;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.386198448632422;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.5553664367462845;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.5553664367462846;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.20848477447886868;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.20848477447886868;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.5145754588862081;  // std dev = 0.357, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.16457545888620817;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, B) )
%   | | | then return -0.06605466959315473;  // std dev = 0.846, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.13542454111379182;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.2399523433083081;  // std dev = 0.494, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.3261448737160187;  // std dev = 1.915, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.31037004021084624;  // std dev = 1.898, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then return 0.33324199902303153;  // std dev = 0.330, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | else return 0.17062637354018512;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.3921934033854965;  // std dev = 0.357, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( author(F, D), venue(F, B) )
%   | | then return -0.05202391583842797;  // std dev = 0.847, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( haswordvenue(B, C) )
%   | | | then return 0.1269550565727362;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.10593861001878171;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.18454078410873082;  // std dev = 0.494, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.23233438181079052;  // std dev = 1.918, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.2456662189620484;  // std dev = 1.895, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then return 0.25880438600057076;  // std dev = 0.328, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | else return 0.13664585375352212;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.4084550345489405;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.09681722057449814;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.18554604683764667;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.13887295829659546;  // std dev = 0.493, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.17457591228949637;  // std dev = 1.918, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.1862573427465266;  // std dev = 1.898, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.283933055725725;  // std dev = 1.49e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.10762034996184425;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.05338999753321394;  // std dev = 0.487, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.25733576379600154;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.07331852476001632;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, B) )
%   | | | then return -0.066496281494871;  // std dev = 0.842, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.11297623873785141;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.10489775151630533;  // std dev = 0.493, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.13217752278427838;  // std dev = 1.918, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.14268699376357186;  // std dev = 1.900, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then return 0.1697019519324797;  // std dev = 0.326, 34.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=26 */
%   | | else return 0.06292370624252176;  // std dev = 0.499, 13.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.27954295400773627;  // std dev = 0.355, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(A, C) )
%   | | then return 0.055294207024438546;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, A) )
%   | | | then return -0.1579050129259356;  // std dev = 0.857, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.21583216993231097;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.0780951434690727;  // std dev = 0.493, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.10105709955318735;  // std dev = 1.918, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.11060922648140811;  // std dev = 1.902, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then return 0.1524499138635467;  // std dev = 0.319, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | else return 0.02764852094660711;  // std dev = 0.486, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.05992714719337238;  // std dev = 0.491, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.07799231628041987;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.050600513265764986;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.20939457760713323;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.1778298622688172;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.02105022930282694;  // std dev = 0.486, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.013038335210382427;  // std dev = 0.491, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.19935066317245992;  // std dev = 0.355, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(A, C) )
%   | | then return 0.026690554029928704;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, A) )
%   | | | then return -0.13180281083825085;  // std dev = 0.855, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.17852546123026172;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.043718544570589185;  // std dev = 0.493, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.06068551383418518;  // std dev = 1.918, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.07052747666454127;  // std dev = 1.898, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then return 0.10771808400320973;  // std dev = 0.318, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | else return 0.01600458121871638;  // std dev = 0.486, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */


Results
   AUC ROC   = 0.535598
   AUC PR    = 0.344427
   CLL	      = -0.756292
   Precision = 0.353628 at threshold = 0.5
   Recall    = 0.956812
   F1        = 0.5164


Total learning time: 60.897979736328125 seconds
Total inference time: 5.621 seconds
AUC ROC: 0.535598


Results scoring model
   AUC ROC   = 0.553829
   AUC PR    = 0.663298
   CLL	      = -0.66451
   Precision = 0.594317 at threshold = 0.5
   Recall    = 0.976654
   F1        = 0.73896


Total scoring time: 1.19 seconds
Refined model CLL: -0.66451


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.535598
   AUC PR    = 0.344427
   CLL	      = -0.756292
   Precision = 0.353628 at threshold = 0.5
   Recall    = 0.956812
   F1        = 0.5164


Total learning time: 129.47552788352965 seconds
Total inference time: 5.621 seconds
AUC ROC: 0.535598
Total revision time: 129.47552788352965
Best scored revision CLL: -0.66451


Dataset: 13_twitter_cora, Fold: 2, Type: Transfer (trRDN-B), Time: 00:04:41
{'AUC ROC': 0.535598, 'AUC PR': 0.344427, 'CLL': -0.756292, 'Precision': [0.353628, 0.5], 'Recall': 0.956812, 'F1': 0.5164, 'Learning time': 129.47552788352965, 'Inference time': 5.621, 'parameter': {'AUC ROC': 0.535664, 'AUC PR': 0.343409, 'CLL': -0.755533, 'Precision': [0.353705, 0.5], 'Recall': 0.958593, 'F1': 0.516741, 'Learning time': 66.27654814720154, 'Inference time': 6.614}}


Starting fold 3

Target train facts examples: 9306
Target train pos examples: 581
Target train neg examples: 2222

Target test facts examples: 33252
Target test pos  examples: 2436
Target test neg examples: 2800

******************************************
Performing Parameter Learning
******************************************
Refine
0;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
0;true;follows(A, D).;false;false
0;false;follows(A, E), recursion_accounttype(E, B).;true;true
0;false,true;follows(A, F), follows(F, A).;false;true
0;false,true,false;follows(A, G), follows(G, E).;false;false
0;false,false;follows(H, A).;true;true
0;false,false,true;follows(I, H), follows(I, A).;false;false
0;false,false,false;follows(A, J), follows(J, K).;false;false
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;true;follows(A, C), tweets(A, D).;false;false
1;false;follows(A, E), recursion_accounttype(E, B).;true;true
1;false,true;tweets(A, F), tweets(E, F).;false;true
1;false,true,false;follows(G, A), follows(E, H).;false;false
1;false,false;follows(I, A).;true;true
1;false,false,true;follows(I, J), recursion_accounttype(J, B).;false;false
1;false,false,false;tweets(A, K).;false;false
2;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;true;follows(C, D), follows(D, A).;false;false
2;false;follows(E, A).;true;true
2;false,true;follows(F, E), follows(F, A).;false;true
2;false,true,false;follows(E, G), recursion_accounttype(G, B).;false;false
2;false,false;follows(A, H), follows(H, I).;true;true
2;false,false,true;recursion_accounttype(I, B).;false;false
2;false,false,false;follows(A, J).;false;false
3;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
3;true;tweets(A, D), tweets(C, D).;false;false
3;false;follows(E, A).;true;true
3;false,true;follows(F, E), recursion_accounttype(F, B).;true;false
3;false,true,true;follows(A, G), recursion_accounttype(G, B).;false;false
3;false,false;follows(A, H), recursion_accounttype(H, B).;true;true
3;false,false,true;follows(A, I), follows(I, H).;false;false
3;false,false,false;tweets(A, J), follows(A, K).;false;false
4;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
4;true;follows(A, D), follows(D, C).;true;false
4;true,true;follows(D, A).;false;true
4;true,true,false;tweets(A, E).;false;false
4;false;follows(F, A).;false;true
4;false,false;follows(A, G), recursion_accounttype(G, B).;true;true
4;false,false,true;follows(G, H), follows(H, G).;false;false
4;false,false,false;follows(A, I), follows(I, J).;false;false
5;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
5;true;follows(D, A), tweets(D, E).;true;true
5;true,true;recursion_accounttype(D, B).;false;false
5;true,false;follows(C, F), follows(F, C).;true;false
5;true,false,true;tweets(C, G), recursion_accounttype(F, B).;false;false
5;false;follows(A, H), follows(H, A).;false;true
5;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
5;false,false,false;tweets(A, J), follows(K, A).;false;false
6;;accounttype(A, B) :- follows(A, C).;true;true
6;true;follows(D, C), recursion_accounttype(D, B).;true;false
6;true,true;recursion_accounttype(C, B).;true;true
6;true,true,true;follows(E, A), follows(E, D).;false;false
6;true,true,false;follows(F, A), recursion_accounttype(F, B).;false;false
6;false;follows(G, A), recursion_accounttype(G, B).;false;true
6;false,false;follows(H, A).;false;true
6;false,false,false;tweets(A, I).;false;false
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;tweets(C, D), follows(A, C).;false;false
7;false;follows(E, A).;true;true
7;false,true;follows(E, F), recursion_accounttype(F, B).;true;false
7;false,true,true;follows(F, E), follows(A, F).;false;false
7;false,false;follows(A, G), recursion_accounttype(G, B).;true;true
7;false,false,true;tweets(A, H).;false;false
7;false,false,false;follows(A, I).;false;false
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;true;follows(C, D), recursion_accounttype(D, B).;false;true
8;true,false;follows(A, E), follows(E, A).;false;false
8;false;follows(F, A), follows(A, G).;true;true
8;false,true;follows(G, A), follows(G, F).;false;true
8;false,true,false;follows(H, F), recursion_accounttype(H, B).;false;false
8;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
8;false,false,false;follows(J, A).;false;false
9;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
9;true;follows(C, D).;true;false
9;true,true;follows(A, D).;true;true
9;true,true,true;follows(E, A), recursion_accounttype(E, B).;false;false
9;true,true,false;tweets(C, F), follows(D, C).;false;false
9;false;follows(A, G), follows(H, A).;false;true
9;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
9;false,false,false;follows(J, A).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.35814893509951223;  // std dev = 1.225, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.1604745164948612;  // std dev = 0.459, 43.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=13 */
%   | else return 0.21294437440198893;  // std dev = 0.478, 1,491.000 (wgt'ed) examples reached here.  /* #neg=962 #pos=529 */
%   else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | then if ( title(I, H), venue(I, B) )
%   | | then if ( samebib(I, J), venue(J, A) )
%   | | | then return 0.6200536970042743;  // std dev = 1.952, 21.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=16 */
%   | | | else return -0.14185106490048766;  // std dev = 6.14e-08, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | | else return -0.04661296966239256;  // std dev = 0.294, 21.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=2 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then if ( title(M, L), venue(M, A) )
%   | | | then return 0.02836170105695919;  // std dev = 3.644, 94.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=16 */
%   | | | else return -0.06185106490048781;  // std dev = 1.356, 25.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=2 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.30874113578563506;  // std dev = 1.225, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.1545435302708131;  // std dev = 0.465, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | else return 0.19528081194934352;  // std dev = 0.481, 1,449.000 (wgt'ed) examples reached here.  /* #neg=920 #pos=529 */
%   else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | then if ( title(I, H), venue(I, A) )
%   | | then if ( samebib(I, J), venue(J, B) )
%   | | | then return 0.6165660531408873;  // std dev = 1.952, 21.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=16 */
%   | | | else return -0.14533870876387436;  // std dev = 0.000, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
%   | | else return -0.043578350216681244;  // std dev = 0.287, 22.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( title(M, L), venue(M, B) )
%   | | | then return 0.021445316214273775;  // std dev = 3.272, 94.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=16 */
%   | | | else return -0.041032968606155205;  // std dev = 1.345, 21.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=2 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.18926300016576597;  // std dev = 0.483, 42.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=16 */
%   | else return 0.15758480377899978;  // std dev = 0.479, 1,483.000 (wgt'ed) examples reached here.  /* #neg=954 #pos=529 */
%   else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | then if ( title(H, G), venue(H, B) )
%   | | then if ( samebib(H, I), venue(I, A) )
%   | | | then return 0.5229649915401198;  // std dev = 1.952, 21.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=16 */
%   | | | else return -0.1278163269029759;  // std dev = 0.000, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   | | else if ( title(J, G), venue(J, A) )
%   | | | then return -0.1315131111240484;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0.01134403173309446;  // std dev = 1.309, 14.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | else return 0.0066924214696910105;  // std dev = 0.329, 116.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=18 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.3198760637778797;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.09162425324568578;  // std dev = 0.465, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return 0.0805681536837651;  // std dev = 0.456, 44.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=13 */
%   | | else return 0.13589562032911007;  // std dev = 0.480, 1,428.000 (wgt'ed) examples reached here.  /* #neg=912 #pos=516 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, A) )
%   | | then return 0.01033626271848063;  // std dev = 0.301, 91.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=16 */
%   | | else return 0.06718577806611511;  // std dev = 0.400, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | then return -0.1289488837402918;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | | | then return 0.018079269308412665;  // std dev = 3.515, 107.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=18 */
%   | | | else return -0.11298535523861868;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C) )
%   | | then return 0.12263343862289433;  // std dev = 0.472, 42.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=15 */
%   | | else return -0.09887887970529104;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.10211070224675145;  // std dev = 0.478, 1,503.000 (wgt'ed) examples reached here.  /* #neg=974 #pos=529 */
%   else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | then if ( title(I, H), venue(I, B) )
%   | | then if ( samebib(I, J), venue(J, A) )
%   | | | then return 0.4515465351077741;  // std dev = 2.207, 23.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=16 */
%   | | | else return -0.1307358774883864;  // std dev = 0.023, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
%   | | else return 0.08990887798774828;  // std dev = 0.416, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( title(M, L), venue(M, B) )
%   | | | then return -0.004639870334944656;  // std dev = 2.948, 94.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=16 */
%   | | | else return -0.04597444796409471;  // std dev = 1.341, 23.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=2 */
%   | | else return -0.10190497098906713;  // std dev = 0.001, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C) )
%   | | then return 0.0709815156384327;  // std dev = 0.469, 45.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=15 */
%   | | else return -0.0767657586291524;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.08818008457113267;  // std dev = 0.479, 1,479.000 (wgt'ed) examples reached here.  /* #neg=950 #pos=529 */
%   else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | then if ( title(I, H), venue(I, A) )
%   | | then if ( samebib(I, J), venue(J, B) )
%   | | | then return 0.34810526565126904;  // std dev = 2.207, 23.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=16 */
%   | | | else return -0.1146628098815277;  // std dev = 0.003, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
%   | | else return 0.08694591006006304;  // std dev = 0.416, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then if ( title(M, L), venue(M, A) )
%   | | | then return -0.005788153166465944;  // std dev = 2.989, 97.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=16 */
%   | | | else return -0.04625390212468701;  // std dev = 1.338, 23.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=2 */
%   | | else return -0.09294966620591866;  // std dev = 0.001, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C), haswordvenue(B, D) )
%   | | then return 0.10595865346740839;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( haswordauthor(G, C) )
%   | | | then return 0.0232255609253695;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.052344826227415577;  // std dev = 2.980, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | else return 0.08148292085735238;  // std dev = 0.482, 1,435.000 (wgt'ed) examples reached here.  /* #neg=906 #pos=529 */
%   else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | then if ( title(J, I), venue(J, B) )
%   | | then if ( samebib(J, K), venue(K, A) )
%   | | | then return 0.46475170822715606;  // std dev = 1.789, 20.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=16 */
%   | | | else return -0.11535598854152215;  // std dev = 0.025, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
%   | | else return 0.08481606422265281;  // std dev = 0.416, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return -0.009809971212024336;  // std dev = 0.283, 110.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=18 */
%   | | else return -0.0856109239653199;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.2221979304005035;  // std dev = 1.082, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.049958221333473316;  // std dev = 0.468, 40.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=13 */
%   | else return 0.047613122187303826;  // std dev = 0.477, 1,504.000 (wgt'ed) examples reached here.  /* #neg=975 #pos=529 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then return -0.05015303453917258;  // std dev = 0.214, 21.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.004564097110231129;  // std dev = 2.463, 73.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=14 */
%   | | | else return 0.03726230311843671;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return -0.013760822314468563;  // std dev = 2.932, 110.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=18 */
%   | | | else return -0.07914257854555055;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C), haswordvenue(A, D) )
%   | | then return 0.19219428326408608;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordtitle(G, C) )
%   | | | then return -0.02849353426664414;  // std dev = 3.067, 47.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=13 */
%   | | | else return -0.1148923781175026;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.04868081971503556;  // std dev = 0.481, 1,460.000 (wgt'ed) examples reached here.  /* #neg=931 #pos=529 */
%   else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | then if ( title(J, I), venue(J, B) )
%   | | then return 0.0013997499540179437;  // std dev = 0.262, 92.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=16 */
%   | | else return 0.07617520191010226;  // std dev = 0.416, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( title(M, L), venue(M, B) )
%   | | | then return -0.004243626135302945;  // std dev = 2.659, 90.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=16 */
%   | | | else return -0.03687046958887425;  // std dev = 1.321, 22.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
%   | | else return -0.07356348297261142;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.035326299349277834;  // std dev = 0.480, 1,516.000 (wgt'ed) examples reached here.  /* #neg=971 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( title(G, E), venue(G, B) )
%   | | | then return 0.2380078761267447;  // std dev = 2.019, 28.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=16 */
%   | | | else return -0.10901988699946301;  // std dev = 0.337, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | | else if ( title(H, E), venue(H, B) )
%   | | | then return -0.10107247638554548;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return 0.010860880043419561;  // std dev = 1.291, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return -0.013860075986031391;  // std dev = 2.702, 97.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=16 */
%   | | | else return 0.02206232728899134;  // std dev = 1.291, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | | else return -0.06870460675244093;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */


Results
   AUC ROC   = 0.564362
   AUC PR    = 0.510531
   CLL	      = -0.706156
   Precision = 0.606299 at threshold = 0.5
   Recall    = 0.031609
   F1        = 0.060086


Total learning time: 58.345707654953 seconds
Total inference time: 6.348 seconds
AUC ROC: 0.564362


Results scoring model
   AUC ROC   = 0.594655
   AUC PR    = 0.278865
   CLL	      = -0.512178
   Precision = 0.62069 at threshold = 0.5
   Recall    = 0.030981
   F1        = 0.059016


Total scoring time: 1.696 seconds
Parameter learned model CLL: -0.512178


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordauthor(F, C)', 'false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false,true': 'title(I, H), venue(I, B)', 'false,true,true': 'samebib(I, J), venue(J, A)', 'false,false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false,false,true': 'title(M, L), venue(M, A)'}, {'true,true,true': [1.225, 3, 3], 'true,true,false': [0.459, 30, 13], 'true,false': [0.478, 962, 529], 'false,true,true,true': [1.952, 5, 16], 'false,true,true,false': [6.14e-08, 61, 0], 'false,true,false': [0.294, 19, 2], 'false,false,true,true': [3.644, 78, 16], 'false,false,true,false': [1.356, 23, 2], 'false,false,false': [0.0, 5, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordauthor(F, C)', 'false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false,true': 'title(I, H), venue(I, A)', 'false,true,true': 'samebib(I, J), venue(J, B)', 'false,false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false,false,true': 'title(M, L), venue(M, B)'}, {'true,true,true': [1.225, 3, 3], 'true,true,false': [0.465, 28, 13], 'true,false': [0.481, 920, 529], 'false,true,true,true': [1.952, 5, 16], 'false,true,true,false': [0.0, 71, 0], 'false,true,false': [0.287, 20, 2], 'false,false,true,true': [3.272, 78, 16], 'false,false,true,false': [1.345, 19, 2], 'false,false,false': [0.0, 7, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'false': 'haswordvenue(B, F), haswordtitle(G, F)', 'false,true': 'title(H, G), venue(H, B)', 'false,true,true': 'samebib(H, I), venue(I, A)', 'false,true,false': 'title(J, G), venue(J, A)'}, {'true,true': [0.483, 26, 16], 'true,false': [0.479, 954, 529], 'false,true,true,true': [1.952, 5, 16], 'false,true,true,false': [0.0, 66, 0], 'false,true,false,true': [0.0, 9, 0], 'false,true,false,false': [1.309, 12, 2], 'false,false': [0.329, 98, 18]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordauthor(F, C)', 'true,false': 'haswordvenue(A, G), haswordauthor(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'title(K, J), venue(K, A)', 'false,false': 'haswordvenue(A, L), haswordauthor(M, L)', 'false,false,false': 'haswordvenue(A, N), haswordtitle(P, N)'}, {'true,true,true': [1.095, 2, 3], 'true,true,false': [0.465, 28, 13], 'true,false,true': [0.456, 31, 13], 'true,false,false': [0.48, 912, 516], 'false,true,true': [0.301, 75, 16], 'false,true,false': [0.4, 8, 2], 'false,false,true': [0.0, 4, 0], 'false,false,false,true': [3.515, 89, 18], 'false,false,false,false': [0.0, 3, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordtitle(F, C)', 'false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false,true': 'title(I, H), venue(I, B)', 'false,true,true': 'samebib(I, J), venue(J, A)', 'false,false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false,false,true': 'title(M, L), venue(M, B)'}, {'true,true,true': [0.472, 27, 15], 'true,true,false': [0.866, 3, 1], 'true,false': [0.478, 974, 529], 'false,true,true,true': [2.207, 7, 16], 'false,true,true,false': [0.023, 77, 0], 'false,true,false': [0.416, 7, 2], 'false,false,true,true': [2.948, 78, 16], 'false,false,true,false': [1.341, 21, 2], 'false,false,false': [0.001, 6, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordtitle(F, C)', 'false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false,true': 'title(I, H), venue(I, A)', 'false,true,true': 'samebib(I, J), venue(J, B)', 'false,false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false,false,true': 'title(M, L), venue(M, A)'}, {'true,true,true': [0.469, 30, 15], 'true,true,false': [0.866, 3, 1], 'true,false': [0.479, 950, 529], 'false,true,true,true': [2.207, 7, 16], 'false,true,true,false': [0.003, 76, 0], 'false,true,false': [0.416, 7, 2], 'false,false,true,true': [2.989, 81, 16], 'false,false,true,false': [1.338, 21, 2], 'false,false,false': [0.001, 6, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordtitle(F, C), haswordvenue(B, D)', 'true,true,false': 'haswordauthor(G, C)', 'false': 'haswordvenue(A, H), haswordtitle(I, H)', 'false,true': 'title(J, I), venue(J, B)', 'false,true,true': 'samebib(J, K), venue(K, A)', 'false,false': 'haswordvenue(B, L), haswordtitle(M, L)'}, {'true,true,true': [1.0, 2, 2], 'true,true,false,true': [0.816, 2, 1], 'true,true,false,false': [2.98, 28, 13], 'true,false': [0.482, 906, 529], 'false,true,true,true': [1.789, 4, 16], 'false,true,true,false': [0.025, 70, 0], 'false,true,false': [0.416, 7, 2], 'false,false,true': [0.283, 92, 18], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordauthor(F, C)', 'false': 'haswordvenue(A, G), haswordauthor(H, G)', 'false,false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,false,true': 'title(K, J), venue(K, A)', 'false,false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true,true': [1.082, 2, 3], 'true,true,false': [0.468, 27, 13], 'true,false': [0.477, 975, 529], 'false,true': [0.214, 19, 2], 'false,false,true,true': [2.463, 59, 14], 'false,false,true,false': [1.279, 9, 2], 'false,false,false,true': [2.932, 92, 18], 'false,false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordtitle(F, C), haswordvenue(A, D)', 'true,true,false': 'haswordtitle(G, C)', 'false': 'haswordvenue(A, H), haswordtitle(I, H)', 'false,true': 'title(J, I), venue(J, B)', 'false,false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false,false,true': 'title(M, L), venue(M, B)'}, {'true,true,true': [0.816, 1, 2], 'true,true,false,true': [3.067, 34, 13], 'true,true,false,false': [0.866, 3, 1], 'true,false': [0.481, 931, 529], 'false,true,true': [0.262, 76, 16], 'false,true,false': [0.416, 7, 2], 'false,false,true,true': [2.659, 74, 16], 'false,false,true,false': [1.321, 20, 2], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordtitle(E, D)', 'false,true': 'title(F, E), venue(F, A)', 'false,true,true': 'title(G, E), venue(G, B)', 'false,true,false': 'title(H, E), venue(H, B)', 'false,false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,false,true': 'title(K, J), venue(K, A)'}, {'true': [0.48, 971, 545], 'false,true,true,true': [2.019, 12, 16], 'false,true,true,false': [0.337, 55, 0], 'false,true,false,true': [0.0, 10, 0], 'false,true,false,false': [1.291, 10, 2], 'false,false,true,true': [2.702, 81, 16], 'false,false,true,false': [1.291, 10, 2], 'false,false,false': [0.0, 5, 0]}]]
[{'': [0.22865365154324807, 0.1334394224611395], 'true': [0.21990837151186954, 0.2289156355526267], 'true,true': [0.24999999999999992, 0.2109248242293126], 'false': [0.14421717409746387, 0.12408949011446355], 'false,true': [0.15704937537180197, 0.08616780045351478], 'false,true,true': [0.1814058956916096, 6.188128333976282e-17], 'false,false': [0.12838076407033347, -2.7755575615628915e-18], 'false,false,true': [0.1412403802625617, 0.07360000000000004]}, {'': [0.23154792129249374, 0.11796207529041446], 'true': [0.22345740627585647, 0.2317964222726011], 'true,true': [0.24999999999999992, 0.21653777513384892], 'false': [0.13270177747711068, 0.10411478807436433], 'false,true': [0.14366729678638965, 0.08264462809917354], 'false,true,true': [0.18140589569161047, -9.382166405283013e-18], 'false,false': [0.10939905032145075, -1.982541115402065e-18], 'false,false,true': [0.11387619076740703, 0.08616780045351471]}, {'': [0.2295952347109416, 0.11091089207382479], 'true': [0.23311915791403162, 0.22946779618322757], 'false': [0.11347098056401983, 0.10845840765281675], 'false,true': [0.12133996526553452, 0.07939508506616258], 'false,true,true': [0.18140589569160984, -3.700743415417188e-17], 'false,true,false': [0.0, 0.12244897959183675]}, {'': [0.23001340358071215, 0.10397222929875069], 'true': [0.22413540460762782, 0.2301874816602087], 'true,false': [0.20816115702479357, 0.2307746628062926], 'true,true': [0.24000000000000005, 0.21653777513384914], 'false': [0.09771333528800058, 0.10949758111239227], 'false,false': [0.0, 0.11275724279042099], 'false,false,false': [0.11545017165419176, -2.3129646346357427e-18], 'false,true': [0.09054865998729304, 0.15999999999999998]}, {'': [0.22795278177530093, 0.09956867068525478], 'true': [0.22371156918323504, 0.2280825388137858], 'true,true': [0.22289353291251346, 0.18749999999999994], 'false': [0.11460874632381962, 0.08588611760199823], 'false,true': [0.10874703376940625, 0.17283950617283955], 'false,true,true': [0.21172022684310016, 6.661422549339111e-06], 'false,false': [0.08990291635413006, 2.9394960778782636e-07], 'false,false,true': [0.09244261205526089, 0.07815061141155731]}, {'': [0.2294293030348043, 0.09011790865972576], 'true': [0.21877580320298604, 0.22975480455275396], 'true,true': [0.2197738944311743, 0.18750000000000003], 'false': [0.09517971989707279, 0.08562941414789638], 'false,true': [0.08738188640787777, 0.17283950617283955], 'false,true,true': [0.2117202268431002, 1.6084712375031315e-07], 'false,false': [0.08961062258531431, 2.4940971025723863e-07], 'false,false,true': [0.09208671064124281, 0.07784436323811907]}, {'': [0.23233421761314482, 0.08870539327492265], 'true': [0.2199670932257697, 0.23272517861525263], 'true,true': [0.25, 0.21697922275983456], 'true,true,false': [0.2222222222222222, 0.21653777513384892], 'false': [0.10133883612399527, 0.07724317349779887], 'false,true': [0.09372714384276808, 0.17283950617283955], 'false,true,true': [0.15999999999999998, 8.722116834298482e-06], 'false,false': [0.07985040969892655, 0.0]}, {'': [0.22788763940855317, 0.07923798208958469], 'true': [0.22395899089103466, 0.22799177800489023], 'true,true': [0.23426068034864903, 0.21937500000000001], 'false': [0.045725729380537566, 0.08260103863896842], 'false,false': [0.09184189757388012, 0.07552893061815441], 'false,false,true': [0.08312513668750825, 0.14876033057851235], 'false,false,false': [0.07812544511423254, 0.0]}, {'': [0.23013947006321545, 0.07746126761560318], 'true': [0.20361177217834936, 0.23093924060813015], 'true,true': [0.22222222222222224, 0.1996425975385329], 'true,true,false': [0.20009053870529672, 0.18749999999999997], 'false': [0.07858923716117354, 0.0762761453979486], 'false,true': [0.06887086141711192, 0.17283950617283947], 'false,false': [0.07886381774081376, 0.0], 'false,false,true': [0.07854874444984619, 0.07929734337544832]}, {'': [0.2301275912310857, 0.07854818523341073], 'false': [0.07808271912539964, 0.07892441994357166], 'false,false': [0.08239316773241545, 0.0], 'false,false,true': [0.075261941868888, 0.13888888888888892], 'false,true': [0.0773915393705464, 0.07886395830669651], 'false,true,false': [-2.7755575615628915e-18, 0.13888888888888884], 'false,true,true': [0.145544786579385, 0.0020689370005299813]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;false;haswordvenue(B, G), haswordtitle(H, G).;true;true
0;false,true;title(I, H), venue(I, B).;true;true
0;false,true,true;samebib(I, J), venue(J, A).;true;true
0;false,false;haswordvenue(A, K), haswordtitle(L, K).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;false;haswordvenue(A, G), haswordtitle(H, G).;true;true
1;false,true;title(I, H), venue(I, A).;true;true
1;false,true,true;samebib(I, J), venue(J, B).;true;true
1;false,false;haswordvenue(B, K), haswordtitle(L, K).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;false;haswordvenue(B, F), haswordtitle(G, F).;true;true
2;false,true;title(H, G), venue(H, B).;true;true
2;false,true,true;samebib(H, I), venue(I, A).;true;true
2;false,true,false;title(J, G), venue(J, A).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
3;false,false;haswordvenue(A, L), haswordauthor(M, L).;true;true
3;false,false,false;haswordvenue(A, N), haswordtitle(P, N).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;false,true;title(I, H), venue(I, B).;true;true
4;false,true,true;samebib(I, J), venue(J, A).;true;true
4;false,false;haswordvenue(B, K), haswordtitle(L, K).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;false;haswordvenue(B, G), haswordtitle(H, G).;true;true
5;false,true;title(I, H), venue(I, A).;true;true
5;false,true,true;samebib(I, J), venue(J, B).;true;true
5;false,false;haswordvenue(A, K), haswordtitle(L, K).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;false;haswordvenue(A, H), haswordtitle(I, H).;true;true
6;false,true;title(J, I), venue(J, B).;true;true
6;false,true,true;samebib(J, K), venue(K, A).;true;true
6;false,false;haswordvenue(B, L), haswordtitle(M, L).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;false;haswordvenue(A, G), haswordauthor(H, G).;true;true
7;false,false;haswordvenue(B, I), haswordtitle(J, I).;true;true
7;false,false,false;haswordvenue(A, L), haswordtitle(M, L).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;false,false;haswordvenue(B, K), haswordtitle(L, K).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;false;haswordvenue(A, D), haswordtitle(E, D).;true;true
9;false,true;title(F, E), venue(F, A).;true;true
9;false,true,true;title(G, E), venue(G, B).;true;true
9;false,true,false;title(H, E), venue(H, B).;true;true
9;false,false;haswordvenue(B, I), haswordtitle(J, I).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22172465224427054;  // std dev = 0.481, 1,499.000 (wgt'ed) examples reached here.  /* #neg=954 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.6581489350995123;  // std dev = 1.789, 20.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=16 */
%   | | | else return -0.14185106490048766;  // std dev = 6.83e-08, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   | | else if ( title(H, E), venue(H, B) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0.058148935099512175;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return 0.02836170105695919;  // std dev = 3.644, 94.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=16 */
%   | | | else return -0.03658790700575096;  // std dev = 1.338, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.5789601264676443;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.18837657209096842;  // std dev = 0.480, 1,508.000 (wgt'ed) examples reached here.  /* #neg=966 #pos=542 */
%   else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | then if ( title(G, F), venue(G, B) )
%   | | then if ( samebib(G, H), venue(H, A) )
%   | | | then return 0.6165660531408873;  // std dev = 1.952, 21.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=16 */
%   | | | else return -0.14533870876387422;  // std dev = 4.21e-08, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | | else if ( title(I, F), venue(I, A) )
%   | | | then return -0.13745533477401697;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.08476688744820521;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | then if ( title(L, K), venue(L, A) )
%   | | | then return 0.014274365968053622;  // std dev = 3.265, 97.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=16 */
%   | | | else return -0.04371130269489865;  // std dev = 1.331, 21.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=2 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.23092392166291134;  // std dev = 1.225, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.10290166416649646;  // std dev = 0.459, 43.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=13 */
%   | else return 0.1563259146474178;  // std dev = 0.479, 1,487.000 (wgt'ed) examples reached here.  /* #neg=958 #pos=529 */
%   else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | then if ( title(I, H), venue(I, B) )
%   | | then if ( samebib(I, J), venue(J, A) )
%   | | | then return 0.5604361634712232;  // std dev = 1.789, 20.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=16 */
%   | | | else return -0.12819904861787615;  // std dev = 0.000, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
%   | | else return -0.047367715709801236;  // std dev = 0.278, 23.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=2 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then if ( title(M, L), venue(M, A) )
%   | | | then return 0.013170858036001317;  // std dev = 3.274, 94.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=16 */
%   | | | else return -0.058522217689519235;  // std dev = 1.346, 27.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=2 */
%   | | else return -0.11231637819360639;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.12855319919580585;  // std dev = 0.478, 1,539.000 (wgt'ed) examples reached here.  /* #neg=994 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.514854345535944;  // std dev = 1.952, 21.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=16 */
%   | | | else return -0.1270676904853105;  // std dev = 0.037, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
%   | | else return 0.14914535406608584;  // std dev = 0.452, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return -0.014581959479238854;  // std dev = 2.943, 102.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=16 */
%   | | | else return 0.08027237390457073;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return -0.10159632948783627;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.11083940536964573;  // std dev = 0.480, 1,515.000 (wgt'ed) examples reached here.  /* #neg=970 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return -0.040995856862888154;  // std dev = 0.250, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then if ( title(H, G), venue(H, A) )
%   | | | then return 0.030006502783784403;  // std dev = 2.787, 79.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=16 */
%   | | | else return -0.04761408917590801;  // std dev = 1.324, 24.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=2 */
%   | | else return -0.005247866092992046;  // std dev = 0.302, 100.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=16 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.08352962348042935;  // std dev = 0.474, 45.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=16 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.11226575129355096;  // std dev = 0.486, 34.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=13 */
%   | | else return 0.09769613157109938;  // std dev = 0.482, 1,403.000 (wgt'ed) examples reached here.  /* #neg=887 #pos=516 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then return -0.022738991461368156;  // std dev = 0.250, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | then if ( title(L, K), venue(L, B) )
%   | | | then return 0.015739159325968907;  // std dev = 2.859, 86.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=16 */
%   | | | else return -0.04223266146366403;  // std dev = 1.327, 21.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=2 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return 0.0018825299731840427;  // std dev = 2.963, 95.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=16 */
%   | | | else return -0.09151331447782429;  // std dev = 0.003, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C) )
%   | | then return 0.03404163846371254;  // std dev = 0.467, 45.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=15 */
%   | | else return -0.05710524000541987;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return 0.06540810337721716;  // std dev = 0.478, 1,491.000 (wgt'ed) examples reached here.  /* #neg=962 #pos=529 */
%   else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | then if ( title(I, H), venue(I, A) )
%   | | then if ( samebib(I, J), venue(J, B) )
%   | | | then return 0.40066794964718017;  // std dev = 1.953, 21.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=16 */
%   | | | else return -0.11764881058031798;  // std dev = 0.012, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   | | else return -0.03514446815071456;  // std dev = 0.281, 22.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( title(M, L), venue(M, B) )
%   | | | then return -0.004135734722199622;  // std dev = 2.901, 98.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=16 */
%   | | | else return -0.03364387211019114;  // std dev = 1.325, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | | else return -0.08532823310466071;  // std dev = 0.006, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05091351624548138;  // std dev = 0.478, 1,539.000 (wgt'ed) examples reached here.  /* #neg=994 #pos=545 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.28728632770518436;  // std dev = 2.400, 25.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=16 */
%   | | | else return -0.11312708165368462;  // std dev = 0.011, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | | else if ( title(H, E), venue(H, A) )
%   | | | then return -0.10744420700407732;  // std dev = 5.27e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0.01200005068647675;  // std dev = 1.301, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then return -0.095112250642533;  // std dev = 0.021, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return -0.022635599032387578;  // std dev = 2.920, 117.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=18 */
%   | | | else return -0.08017810532829275;  // std dev = 0.004, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.03432661237963065;  // std dev = 0.476, 1,564.000 (wgt'ed) examples reached here.  /* #neg=1,019 #pos=545 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.3791150400031696;  // std dev = 1.791, 20.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=16 */
%   | | | else return -0.10175753072330967;  // std dev = 0.017, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
%   | | else return 0.05668689385983585;  // std dev = 0.400, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return -0.005437647522847396;  // std dev = 0.297, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else return -0.02300788406987162;  // std dev = 0.277, 104.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=16 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C) )
%   | | then if ( haswordvenue(A, D) )
%   | | | then return 0.08083140114467204;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.03327640795801623;  // std dev = 2.904, 37.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=13 */
%   | | else return -0.14715483238738025;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.03536318183154645;  // std dev = 0.479, 1,483.000 (wgt'ed) examples reached here.  /* #neg=954 #pos=529 */
%   else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | then if ( title(I, H), venue(I, A) )
%   | | then return -0.03880379670280436;  // std dev = 0.257, 101.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=16 */
%   | | else return 0.031403688136037805;  // std dev = 0.386, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | then if ( title(L, K), venue(L, A) )
%   | | | then return 0.004211008515745678;  // std dev = 2.525, 86.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=16 */
%   | | | else return -0.026557581550472373;  // std dev = 1.320, 22.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
%   | | else return -0.07198944668979287;  // std dev = 0.007, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.564191
   AUC PR    = 0.508203
   CLL	      = -0.707782
   Precision = 0.547826 at threshold = 0.5
   Recall    = 0.025862
   F1        = 0.049392


Total learning time: 49.55822944641113 seconds
Total inference time: 5.767 seconds
AUC ROC: 0.564191


Results scoring model
   AUC ROC   = 0.594634
   AUC PR    = 0.278384
   CLL	      = -0.510759
   Precision = 0.583333 at threshold = 0.5
   Recall    = 0.024096
   F1        = 0.046281


Total scoring time: 1.523 seconds
Refined model CLL: -0.510759


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.564191
   AUC PR    = 0.508203
   CLL	      = -0.707782
   Precision = 0.547826 at threshold = 0.5
   Recall    = 0.025862
   F1        = 0.049392


Total learning time: 111.12293710136413 seconds
Total inference time: 5.767 seconds
AUC ROC: 0.564191
Total revision time: 111.12293710136413
Best scored revision CLL: -0.510759


Dataset: 13_twitter_cora, Fold: 3, Type: Transfer (trRDN-B), Time: 00:06:45
{'AUC ROC': 0.564191, 'AUC PR': 0.508203, 'CLL': -0.707782, 'Precision': [0.547826, 0.5], 'Recall': 0.025862, 'F1': 0.049392, 'Learning time': 111.12293710136413, 'Inference time': 5.767, 'parameter': {'AUC ROC': 0.564362, 'AUC PR': 0.510531, 'CLL': -0.706156, 'Precision': [0.606299, 0.5], 'Recall': 0.031609, 'F1': 0.060086, 'Learning time': 58.345707654953, 'Inference time': 6.348}}


Starting fold 4

Target train facts examples: 8129
Target train pos examples: 747
Target train neg examples: 1068

Target test facts examples: 34429
Target test pos  examples: 2270
Target test neg examples: 3954

******************************************
Performing Parameter Learning
******************************************
Refine
0;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
0;true;follows(A, D).;false;false
0;false;follows(A, E), recursion_accounttype(E, B).;true;true
0;false,true;follows(A, F), follows(F, A).;false;true
0;false,true,false;follows(A, G), follows(G, E).;false;false
0;false,false;follows(H, A).;true;true
0;false,false,true;follows(I, H), follows(I, A).;false;false
0;false,false,false;follows(A, J), follows(J, K).;false;false
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;true;follows(A, C), tweets(A, D).;false;false
1;false;follows(A, E), recursion_accounttype(E, B).;true;true
1;false,true;tweets(A, F), tweets(E, F).;false;true
1;false,true,false;follows(G, A), follows(E, H).;false;false
1;false,false;follows(I, A).;true;true
1;false,false,true;follows(I, J), recursion_accounttype(J, B).;false;false
1;false,false,false;tweets(A, K).;false;false
2;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;true;follows(C, D), follows(D, A).;false;false
2;false;follows(E, A).;true;true
2;false,true;follows(F, E), follows(F, A).;false;true
2;false,true,false;follows(E, G), recursion_accounttype(G, B).;false;false
2;false,false;follows(A, H), follows(H, I).;true;true
2;false,false,true;recursion_accounttype(I, B).;false;false
2;false,false,false;follows(A, J).;false;false
3;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
3;true;tweets(A, D), tweets(C, D).;false;false
3;false;follows(E, A).;true;true
3;false,true;follows(F, E), recursion_accounttype(F, B).;true;false
3;false,true,true;follows(A, G), recursion_accounttype(G, B).;false;false
3;false,false;follows(A, H), recursion_accounttype(H, B).;true;true
3;false,false,true;follows(A, I), follows(I, H).;false;false
3;false,false,false;tweets(A, J), follows(A, K).;false;false
4;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
4;true;follows(A, D), follows(D, C).;true;false
4;true,true;follows(D, A).;false;true
4;true,true,false;tweets(A, E).;false;false
4;false;follows(F, A).;false;true
4;false,false;follows(A, G), recursion_accounttype(G, B).;true;true
4;false,false,true;follows(G, H), follows(H, G).;false;false
4;false,false,false;follows(A, I), follows(I, J).;false;false
5;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
5;true;follows(D, A), tweets(D, E).;true;true
5;true,true;recursion_accounttype(D, B).;false;false
5;true,false;follows(C, F), follows(F, C).;true;false
5;true,false,true;tweets(C, G), recursion_accounttype(F, B).;false;false
5;false;follows(A, H), follows(H, A).;false;true
5;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
5;false,false,false;tweets(A, J), follows(K, A).;false;false
6;;accounttype(A, B) :- follows(A, C).;true;true
6;true;follows(D, C), recursion_accounttype(D, B).;true;false
6;true,true;recursion_accounttype(C, B).;true;true
6;true,true,true;follows(E, A), follows(E, D).;false;false
6;true,true,false;follows(F, A), recursion_accounttype(F, B).;false;false
6;false;follows(G, A), recursion_accounttype(G, B).;false;true
6;false,false;follows(H, A).;false;true
6;false,false,false;tweets(A, I).;false;false
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;tweets(C, D), follows(A, C).;false;false
7;false;follows(E, A).;true;true
7;false,true;follows(E, F), recursion_accounttype(F, B).;true;false
7;false,true,true;follows(F, E), follows(A, F).;false;false
7;false,false;follows(A, G), recursion_accounttype(G, B).;true;true
7;false,false,true;tweets(A, H).;false;false
7;false,false,false;follows(A, I).;false;false
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;true;follows(C, D), recursion_accounttype(D, B).;false;true
8;true,false;follows(A, E), follows(E, A).;false;false
8;false;follows(F, A), follows(A, G).;true;true
8;false,true;follows(G, A), follows(G, F).;false;true
8;false,true,false;follows(H, F), recursion_accounttype(H, B).;false;false
8;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
8;false,false,false;follows(J, A).;false;false
9;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
9;true;follows(C, D).;true;false
9;true,true;follows(A, D).;true;true
9;true,true,true;follows(E, A), recursion_accounttype(E, B).;false;false
9;true,true,false;tweets(C, F), follows(D, C).;false;false
9;false;follows(A, G), follows(H, A).;false;true
9;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
9;false,false,false;follows(J, A).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.27854694504975613;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.2867203636709409;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.44905802600860323;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.44905802600860323;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.5724346493852266;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.1914822684328457;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.05814893509951237;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.05814893509951237;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.2411503606196619;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.24811816884741328;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.3851926776601658;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.3851926776601658;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.48767788391726297;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.16653882456488167;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.05092203251355405;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.05092203251355405;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.7825012972897073;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.21749870271029265;  // std dev = 1.05e-08, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.5825012972897073;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.2006373174408249;  // std dev = 0.493, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.25543090384670014;  // std dev = 3.509, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.33354380143522294;  // std dev = 2.603, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( title(M, L), venue(M, A) )
%   | | then return 0.061484892952256655;  // std dev = 0.415, 63.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=14 */
%   | | else return 0.11231944829447518;  // std dev = 0.456, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | else return 0.04434629760466855;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.16627278814108717;  // std dev = 0.493, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.16153884536939936;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.24389847404002757;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.2613806000007637;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.3144965494660669;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.12826064785174343;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.03842866223690456;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.03596464147355525;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.13351355589432404;  // std dev = 0.493, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.12875910516214492;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.18678417359691227;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.20129574584424512;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.23723136491506377;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.10656321273952304;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.033154945921885746;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.03097315035420984;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.10546120260430512;  // std dev = 0.492, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.10105349094222651;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.14111998948018567;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.152505134275848;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.17800353626734847;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.0873385165943387;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.028495105925721097;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.026578087619629834;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.08229285039787726;  // std dev = 0.492, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.07842124408592599;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.10600521577534826;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.1146753959044374;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.1341360554815721;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.07078414750403073;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.024408230135271918;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.022735101308625792;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.5025652274935277;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.2669287757468611;  // std dev = 7.45e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.3523724445670725;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.06198858622198138;  // std dev = 0.493, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.06879407641410865;  // std dev = 3.490, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.08984674384057621;  // std dev = 2.598, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(B, M) )
%   | | then return 0.05685255381971997;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.02084688910874009;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.019395027139055835;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.048819005791388585;  // std dev = 0.492, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.04423060419235144;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.06234113017020738;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.06359001831649581;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.08076038260553885;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.045338102924496235;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.017760671541598414;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.016507039660733386;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.03737422238923658;  // std dev = 0.492, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.03371253559270494;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.04683935422469379;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.04777278065422533;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.062220170276593975;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.03595400777804932;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.015098879183171418;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.014020986247191395;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */


Results
   AUC ROC   = 0.569167
   AUC PR    = 0.42761
   CLL	      = -0.64126
   Precision = 0.546125 at threshold = 0.5
   Recall    = 0.065198
   F1        = 0.11649


Total learning time: 96.7184636592865 seconds
Total inference time: 7.238 seconds
AUC ROC: 0.569167


Results scoring model
   AUC ROC   = 0.548302
   AUC PR    = 0.467809
   CLL	      = -0.666805
   Precision = 0.671875 at threshold = 0.5
   Recall    = 0.057564
   F1        = 0.106042


Total scoring time: 1.472 seconds
Parameter learned model CLL: -0.666805


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(B, G)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)'}, {'true,true': [0.494, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(B, G)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)'}, {'true,true': [0.494, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, B)', 'true,true,true': 'samebib(F, G), venue(G, A)', 'true,false': 'haswordtitle(H, C)', 'true,false,false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false,true': 'title(M, L), venue(M, A)'}, {'true,true,true,true': [0.0, 0, 8], 'true,true,true,false': [1.05e-08, 7, 0], 'true,true,false': [0.894, 1, 4], 'true,false,true': [0.493, 924, 664], 'true,false,false,true': [3.509, 25, 25], 'true,false,false,false': [2.603, 11, 18], 'false,true,true': [0.415, 49, 14], 'false,true,false': [0.456, 7, 3], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(B, G)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)'}, {'true,true': [0.493, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(B, G)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)'}, {'true,true': [0.493, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(B, G)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)'}, {'true,true': [0.492, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(B, G)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)'}, {'true,true': [0.492, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, B)', 'true,true,true': 'samebib(F, G), venue(G, A)', 'true,false': 'haswordtitle(H, C)', 'true,false,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false,true': 'haswordtitle(L, M), haswordvenue(B, M)'}, {'true,true,true,true': [0.0, 0, 8], 'true,true,true,false': [7.45e-09, 7, 0], 'true,true,false': [0.894, 1, 4], 'true,false,true': [0.493, 924, 664], 'true,false,false,true': [3.49, 25, 25], 'true,false,false,false': [2.598, 11, 18], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(B, G)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)'}, {'true,true': [0.492, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(B, G)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)'}, {'true,true': [0.492, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}]]
[{'': [0.24455361249545102, 0.17089843750000108], 'true': [0.24366352318011741, 0.24803717352988336], 'true,false': [0.25000000000000133, 0.2354340071343634], 'true,false,true': [0.24489795918367302, 0.2417355371900822], 'true,false,false': [0.2417355371900822, 0.20408163265306106], 'false': [0.17864514918371124, 0.15999999999999948], 'false,true': [0.22222222222222232, 0.15999999999999948]}, {'': [0.24423965838627756, 0.17036542604714275], 'true': [0.24366352318012574, 0.2455497403386635], 'true,false': [0.24813620683257942, 0.2345699639132993], 'true,false,true': [0.244897959183673, 0.2417355371900833], 'true,false,false': [0.2417355371900833, 0.20408163265306115], 'false': [0.17782577785291803, 0.1600000000000007], 'false,true': [0.22222222222222207, 0.1600000000000007]}, {'': [0.24393157221315045, 0.1699046770245384], 'true': [0.24000000000000013, 0.24360350281441515], 'true,false': [0.24329828880331825, 0.2431019584682026], 'true,false,false': [0.24631150685892023, 0.2337064665173658], 'true,true': [0.24888888888888888, 0.16], 'true,true,true': [0.0, 1.586032892321652e-17], 'false': [0.17711749187183737, 0.15999999999999953], 'false,true': [0.17186487088501237, 0.2079788454989579]}, {'': [0.24275361851629565, 0.16977841063316618], 'true': [0.24261841584396165, 0.2421244433002241], 'true,false': [0.24517785142481952, 0.23316328773523765], 'true,false,true': [0.2448979591836733, 0.24173553719008273], 'true,false,false': [0.24173553719008262, 0.20408163265306126], 'false': [0.1768458701502335, 0.160052430626656], 'false,true': [0.22223938679413024, 0.15999999999999967]}, {'': [0.24255322439123897, 0.16944762533991703], 'true': [0.24255724716963642, 0.24085213719201962], 'true,false': [0.24433609977736775, 0.23288313310156572], 'true,false,true': [0.24489795918367332, 0.24173553719008262], 'true,false,false': [0.24173553719008273, 0.20408163265306126], 'false': [0.17634846700775744, 0.16005371218379436], 'false,true': [0.22224208126601352, 0.15999999999999995]}, {'': [0.2424401111983336, 0.1692096628076452], 'true': [0.24251444341198528, 0.24018533814034473], 'true,false': [0.24390204541526841, 0.23276571950710898], 'true,false,true': [0.24489795918367344, 0.24173553719008278], 'true,false,false': [0.24173553719008264, 0.2040816326530612], 'false': [0.1759912029865698, 0.16005482487780148], 'false,true': [0.22224444384026423, 0.1599999999999999]}, {'': [0.2423780975086328, 0.1690473529541413], 'true': [0.24248533111562592, 0.23985699203291247], 'true,false': [0.2436939732282548, 0.2327160126225985], 'true,false,true': [0.24489795918367355, 0.2417355371900827], 'true,false,false': [0.24173553719008262, 0.20408163265306123], 'false': [0.1757479894341667, 0.16005578571260323], 'false,true': [0.22224643625570625, 0.16000000000000006]}, {'': [0.24234353761162933, 0.16894146445810107], 'true': [0.15871195527723175, 0.24313715344351486], 'true,false': [0.24329828880329815, 0.23969691096061163], 'true,false,false': [0.2435967259054513, 0.23269257639034466], 'false': [0.1755896804311989, 0.16005661163325322], 'false,true': [0.2222480694105719, 0.16000000000000014], 'true,true': [0.1473723430101489, 0.16], 'true,true,true': [-5.551115123125783e-17, 7.93016446160826e-18]}, {'': [0.2416735634250485, 0.16887491955813616], 'true': [0.24176926297221538, 0.2396470147705917], 'true,false': [0.24358731052614765, 0.23270065000351503], 'true,false,true': [0.24489795918367338, 0.24173553719008273], 'true,false,false': [0.24173553719008256, 0.2040816326530612], 'false': [0.17549044796695915, 0.1600573188778694], 'false,true': [0.22224938176671494, 0.16000000000000014]}, {'': [0.24166180797143727, 0.168834417516049], 'true': [0.24176150426216442, 0.23959307192769216], 'true,false': [0.2435489515202201, 0.23268488480873578], 'true,false,true': [0.24489795918367338, 0.24173553719008264], 'true,false,false': [0.24173553719008262, 0.20408163265306126], 'false': [0.1754302199367117, 0.16005792257258986], 'false,true': [0.22225042238806272, 0.16000000000000011]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordvenue(A, D), haswordauthor(E, D).;true;true
2;true,true;author(F, E), venue(F, B).;true;true
2;true,true,true;samebib(F, G), venue(G, A).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordvenue(A, D), haswordauthor(E, D).;true;true
7;true,true;author(F, E), venue(F, B).;true;true
7;true,true,true;samebib(F, G), venue(G, A).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.27854694504975613;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.2867203636709409;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.44905802600860323;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.44905802600860323;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.5724346493852266;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.1914822684328457;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.05814893509951237;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.05814893509951237;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.2411503606196619;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.24811816884741328;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.3851926776601658;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.3851926776601658;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.48767788391726297;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.16653882456488167;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.05092203251355405;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.05092203251355405;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.20289930723994204;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.20848477447886868;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.31518052304212246;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.31518052304212246;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.3912569620992536;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.1420942428155646;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.04434629760466855;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.04434629760466855;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.16640029396569495;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.17062637354018492;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.24804771389482108;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.24804771389482108;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.3005711547884894;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.11914890490746433;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.03842866223690456;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.03842866223690456;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.13360339271793026;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.13664585375352234;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.19020231164899937;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.19020231164899937;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.22629823971521876;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.0984134027840187;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.033154945921885746;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.033154945921885746;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.10551742939082928;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.10762034996184403;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.14379027326522745;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.14379027326522745;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.16984358676510128;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.08026654944252247;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.028495105925721097;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.028495105925721097;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.08232251291348108;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.08372807955323855;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.10803450809035726;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.10803450809035726;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.12813320688246752;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.06479591611329234;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.024408230135271918;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.024408230135271918;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.06366213733661014;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.06457405393631681;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.08103386685025628;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.08103386685025628;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.09743184803714998;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.05187916934404051;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.02084688910874009;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.02084688910874009;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, A) )
%   | then if ( samebib(E, F), venue(F, B) )
%   | | then return 0.6285257899654785;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.34781984983750647;  // std dev = 0.063, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0.4285257899654785;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.046661810116601865;  // std dev = 0.493, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.05447540102628663;  // std dev = 3.490, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.06415866688950289;  // std dev = 2.598, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, M), haswordvenue(A, M) )
%   | | | then return 0.04126932998424623;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.021464375245302116;  // std dev = 2.960, 54.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=11 */
%   | | else return 0.017760671541598414;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.03734590428292635;  // std dev = 0.492, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.036593722070572786;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.04486526794085501;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.04726660744199421;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.06002833373015447;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.03266374873483021;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.015439626897659707;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.015098879183171418;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */


Results
   AUC ROC   = 0.568434
   AUC PR    = 0.429606
   CLL	      = -0.641207
   Precision = 0.721212 at threshold = 0.5
   Recall    = 0.052423
   F1        = 0.097741


Total learning time: 92.18476963043213 seconds
Total inference time: 7.461 seconds
AUC ROC: 0.568434


Results scoring model
   AUC ROC   = 0.548092
   AUC PR    = 0.461526
   CLL	      = -0.668095
   Precision = 0.661017 at threshold = 0.5
   Recall    = 0.052209
   F1        = 0.096774


Total scoring time: 1.243 seconds
Refined model CLL: -0.668095


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.569167
   AUC PR    = 0.42761
   CLL	      = -0.64126
   Precision = 0.546125 at threshold = 0.5
   Recall    = 0.065198
   F1        = 0.11649


Total learning time: 191.6182332897186 seconds
Total inference time: 7.238 seconds
AUC ROC: 0.569167
Total revision time: 191.6182332897186
Best scored revision CLL: -0.666805


Dataset: 13_twitter_cora, Fold: 4, Type: Transfer (trRDN-B), Time: 00:10:12
{'AUC ROC': 0.569167, 'AUC PR': 0.42761, 'CLL': -0.64126, 'Precision': [0.546125, 0.5], 'Recall': 0.065198, 'F1': 0.11649, 'Learning time': 191.6182332897186, 'Inference time': 7.238, 'parameter': {'AUC ROC': 0.569167, 'AUC PR': 0.42761, 'CLL': -0.64126, 'Precision': [0.546125, 0.5], 'Recall': 0.065198, 'F1': 0.11649, 'Learning time': 96.7184636592865, 'Inference time': 7.238}}


Starting fold 5

Target train facts examples: 8644
Target train pos examples: 550
Target train neg examples: 500

Target test facts examples: 33914
Target test pos  examples: 2467
Target test neg examples: 4522

******************************************
Performing Parameter Learning
******************************************
Refine
0;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
0;true;follows(A, D).;false;false
0;false;follows(A, E), recursion_accounttype(E, B).;true;true
0;false,true;follows(A, F), follows(F, A).;false;true
0;false,true,false;follows(A, G), follows(G, E).;false;false
0;false,false;follows(H, A).;true;true
0;false,false,true;follows(I, H), follows(I, A).;false;false
0;false,false,false;follows(A, J), follows(J, K).;false;false
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;true;follows(A, C), tweets(A, D).;false;false
1;false;follows(A, E), recursion_accounttype(E, B).;true;true
1;false,true;tweets(A, F), tweets(E, F).;false;true
1;false,true,false;follows(G, A), follows(E, H).;false;false
1;false,false;follows(I, A).;true;true
1;false,false,true;follows(I, J), recursion_accounttype(J, B).;false;false
1;false,false,false;tweets(A, K).;false;false
2;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;true;follows(C, D), follows(D, A).;false;false
2;false;follows(E, A).;true;true
2;false,true;follows(F, E), follows(F, A).;false;true
2;false,true,false;follows(E, G), recursion_accounttype(G, B).;false;false
2;false,false;follows(A, H), follows(H, I).;true;true
2;false,false,true;recursion_accounttype(I, B).;false;false
2;false,false,false;follows(A, J).;false;false
3;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
3;true;tweets(A, D), tweets(C, D).;false;false
3;false;follows(E, A).;true;true
3;false,true;follows(F, E), recursion_accounttype(F, B).;true;false
3;false,true,true;follows(A, G), recursion_accounttype(G, B).;false;false
3;false,false;follows(A, H), recursion_accounttype(H, B).;true;true
3;false,false,true;follows(A, I), follows(I, H).;false;false
3;false,false,false;tweets(A, J), follows(A, K).;false;false
4;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
4;true;follows(A, D), follows(D, C).;true;false
4;true,true;follows(D, A).;false;true
4;true,true,false;tweets(A, E).;false;false
4;false;follows(F, A).;false;true
4;false,false;follows(A, G), recursion_accounttype(G, B).;true;true
4;false,false,true;follows(G, H), follows(H, G).;false;false
4;false,false,false;follows(A, I), follows(I, J).;false;false
5;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
5;true;follows(D, A), tweets(D, E).;true;true
5;true,true;recursion_accounttype(D, B).;false;false
5;true,false;follows(C, F), follows(F, C).;true;false
5;true,false,true;tweets(C, G), recursion_accounttype(F, B).;false;false
5;false;follows(A, H), follows(H, A).;false;true
5;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
5;false,false,false;tweets(A, J), follows(K, A).;false;false
6;;accounttype(A, B) :- follows(A, C).;true;true
6;true;follows(D, C), recursion_accounttype(D, B).;true;false
6;true,true;recursion_accounttype(C, B).;true;true
6;true,true,true;follows(E, A), follows(E, D).;false;false
6;true,true,false;follows(F, A), recursion_accounttype(F, B).;false;false
6;false;follows(G, A), recursion_accounttype(G, B).;false;true
6;false,false;follows(H, A).;false;true
6;false,false,false;tweets(A, I).;false;false
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;tweets(C, D), follows(A, C).;false;false
7;false;follows(E, A).;true;true
7;false,true;follows(E, F), recursion_accounttype(F, B).;true;false
7;false,true,true;follows(F, E), follows(A, F).;false;false
7;false,false;follows(A, G), recursion_accounttype(G, B).;true;true
7;false,false,true;tweets(A, H).;false;false
7;false,false,false;follows(A, I).;false;false
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;true;follows(C, D), recursion_accounttype(D, B).;false;true
8;true,false;follows(A, E), follows(E, A).;false;false
8;false;follows(F, A), follows(A, G).;true;true
8;false,true;follows(G, A), follows(G, F).;false;true
8;false,true,false;follows(H, F), recursion_accounttype(H, B).;false;false
8;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
8;false,false,false;follows(J, A).;false;false
9;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
9;true;follows(C, D).;true;false
9;true,true;follows(A, D).;true;true
9;true,true,true;follows(E, A), recursion_accounttype(E, B).;false;false
9;true,true,false;tweets(C, F), follows(D, C).;false;false
9;false;follows(A, G), follows(H, A).;false;true
9;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
9;false,false,false;follows(J, A).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.443242102801371;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.7291166770349955;  // std dev = 0.335, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, B) )
%   | | then if ( samebib(G, H), venue(H, A) )
%   | | | then return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(I, F), venue(I, A) )
%   | | | then return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.15083186192878065;  // std dev = 2.913, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( haswordtitle(L, J) )
%   | | | then return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.17522210583121967;  // std dev = 2.980, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.051131391239862906;  // std dev = 0.395, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.3803254334818479;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.6157326050686436;  // std dev = 0.335, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, A) )
%   | | then if ( samebib(G, H), venue(H, B) )
%   | | | then return 0.6392119282680095;  // std dev = 0.899, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.15769426647032894;  // std dev = 0.016, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(I, F), venue(I, B) )
%   | | | then return -0.16343846579291768;  // std dev = 0.003, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.12907154912175825;  // std dev = 2.884, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then if ( haswordtitle(L, J) )
%   | | | then return 0.03693744759731563;  // std dev = 0.807, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.1534329638272584;  // std dev = 2.940, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.04479249977758044;  // std dev = 0.395, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.6805851247859591;  // std dev = 0.056, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.2449182844345499;  // std dev = 2.596, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.04746202633921467;  // std dev = 1.980, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( haswordtitle(J, H) )
%   | | | then return 0.2648613043775699;  // std dev = 2.542, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   | | | else return -0.03762993035031232;  // std dev = 1.967, 23.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
%   | | else return 0.3407976691556591;  // std dev = 0.485, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | then if ( author(M, L), venue(M, B) )
%   | | then return 0.19851266446135335;  // std dev = 0.440, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.09339221621720727;  // std dev = 0.439, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.062471098592311;  // std dev = 0.413, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.24325016813796135;  // std dev = 0.489, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.4187148080064091;  // std dev = 0.330, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, A) )
%   | | then if ( samebib(G, H), venue(H, B) )
%   | | | then return 0.5200481531158161;  // std dev = 0.900, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14625031652760598;  // std dev = 0.016, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.08262025243810965;  // std dev = 0.438, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( haswordtitle(K, I) )
%   | | | then return 0.009147130310466123;  // std dev = 0.787, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.11466562937634454;  // std dev = 2.931, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.024193891118573393;  // std dev = 2.992, 59.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return 0.0377532131524717;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.44561144003391107;  // std dev = 0.083, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.13612823183231645;  // std dev = 2.583, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.10338434907471929;  // std dev = 1.932, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( haswordtitle(J, H) )
%   | | | then return 0.1581589310100962;  // std dev = 2.542, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   | | | else return -0.08914990041825932;  // std dev = 1.911, 23.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
%   | | else return 0.20990041100056928;  // std dev = 0.485, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | then if ( author(M, L), venue(M, A) )
%   | | then return 0.13786668678361852;  // std dev = 0.390, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.06961492749046057;  // std dev = 0.438, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.043644061648992774;  // std dev = 0.412, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.13928588098813302;  // std dev = 0.486, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.2840313206078428;  // std dev = 0.332, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, B) )
%   | | then if ( samebib(G, H), venue(H, A) )
%   | | | then return 0.4639188129366333;  // std dev = 0.908, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.1790200954258821;  // std dev = 0.034, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.052143639187952256;  // std dev = 0.434, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | | then return -0.1760870319433385;  // std dev = 0.034, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.04575822117338375;  // std dev = 2.999, 54.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=12 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.0925276679856322;  // std dev = 4.052, 83.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=24 */
%   | | | else return -0.1935092030079974;  // std dev = 0.072, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.10558840655777942;  // std dev = 0.485, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else return 0.24618542400251356;  // std dev = 0.291, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, A) )
%   | | then if ( samebib(H, I), venue(I, B) )
%   | | | then return 0.3527902236116418;  // std dev = 0.906, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.15365945185221766;  // std dev = 0.022, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.049271558376318365;  // std dev = 0.430, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | | then return -0.1559911820202916;  // std dev = 0.061, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.08077119379734567;  // std dev = 4.048, 83.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=24 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return 0.03470570422442692;  // std dev = 3.000, 54.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=12 */
%   | | | else return -0.18637088339832966;  // std dev = 0.141, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return -0.4781842414989223;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.2799960499392691;  // std dev = 1.898, 24.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=19 */
%   | | else return -0.08902391220085779;  // std dev = 0.371, 29.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=11 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then return 0.03076018996426912;  // std dev = 2.735, 36.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
%   | | | else return -0.2025942930895548;  // std dev = 1.540, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | else return 0.09643202905932577;  // std dev = 0.484, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | then if ( author(M, L), venue(M, B) )
%   | | then return 0.08807317526802141;  // std dev = 0.382, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.03553381104492504;  // std dev = 0.427, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.023616571119834895;  // std dev = 0.404, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(F, D) )
%   | | then if ( author(G, F), venue(G, B) )
%   | | | then return -0.4285364052820669;  // std dev = 1.49e-08, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.26163583438462407;  // std dev = 1.886, 24.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=19 */
%   | | else return 0.056661227563807905;  // std dev = 0.483, 783.000 (wgt'ed) examples reached here.  /* #neg=323 #pos=460 */
%   | else return 0.21316331011189826;  // std dev = 0.291, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, B) )
%   | | then return -0.0029756477075073735;  // std dev = 0.276, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0.047824484141330184;  // std dev = 0.435, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( title(M, L), venue(M, B) )
%   | | | then return 0.05073855382588612;  // std dev = 4.066, 88.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=24 */
%   | | | else return -0.1450540681051268;  // std dev = 0.054, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return -0.006953958833617576;  // std dev = 0.379, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( haswordvenue(A, C) )
%   | then return 0.2163564212034188;  // std dev = 0.058, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( haswordauthor(D, E), haswordvenue(A, E) )
%   | | then return -0.318224852475443;  // std dev = 0.307, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -7.430894444506082E-4;  // std dev = 0.424, 101.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=36 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, B) )
%   | | then if ( samebib(H, I), venue(I, A) )
%   | | | then return 0.3875961322860804;  // std dev = 1.266, 20.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=18 */
%   | | | else return -0.34847648199148284;  // std dev = 0.539, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( author(J, G), venue(J, A) )
%   | | | then return -0.29590828422120524;  // std dev = 0.802, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   | | | else return 0.0775733778205883;  // std dev = 2.880, 41.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=15 */
%   | else if ( haswordvenue(A, K), haswordvenue(B, K) )
%   | | then return 0.0581185835790207;  // std dev = 0.484, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   | | else return 0.004271835837103995;  // std dev = 0.391, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */


Results
   AUC ROC   = 0.553768
   AUC PR    = 0.402489
   CLL	      = -0.709031
   Precision = 0.371847 at threshold = 0.5
   Recall    = 0.926226
   F1        = 0.530655


Total learning time: 43.87080502510071 seconds
Total inference time: 11.902 seconds
AUC ROC: 0.553768


Results scoring model
   AUC ROC   = 0.686084
   AUC PR    = 0.685703
   CLL	      = -0.612071
   Precision = 0.636132 at threshold = 0.5
   Recall    = 0.909091
   F1        = 0.748503


Total scoring time: 1.209 seconds
Parameter learned model CLL: -0.612071


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'false': 'haswordvenue(A, E), haswordauthor(F, E)', 'false,true': 'author(G, F), venue(G, B)', 'false,true,true': 'samebib(G, H), venue(H, A)', 'false,true,false': 'author(I, F), venue(I, A)', 'false,false': 'haswordvenue(B, J), haswordauthor(K, J)', 'false,false,true': 'haswordtitle(L, J)'}, {'true,true': [0.493, 334, 471], 'true,false': [0.335, 4, 27], 'false,true,true,true': [0.894, 1, 4], 'false,true,true,false': [0.0, 5, 0], 'false,true,false,true': [0.0, 3, 0], 'false,true,false,false': [2.913, 29, 12], 'false,false,true,true': [0.894, 4, 1], 'false,false,true,false': [2.98, 28, 13], 'false,false,false': [0.395, 92, 22]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'false': 'haswordvenue(B, E), haswordauthor(F, E)', 'false,true': 'author(G, F), venue(G, A)', 'false,true,true': 'samebib(G, H), venue(H, B)', 'false,true,false': 'author(I, F), venue(I, B)', 'false,false': 'haswordvenue(A, J), haswordauthor(K, J)', 'false,false,true': 'haswordtitle(L, J)'}, {'true,true': [0.493, 334, 471], 'true,false': [0.335, 4, 27], 'false,true,true,true': [0.899, 1, 4], 'false,true,true,false': [0.016, 5, 0], 'false,true,false,true': [0.003, 3, 0], 'false,true,false,false': [2.884, 29, 12], 'false,false,true,true': [0.807, 4, 1], 'false,false,true,false': [2.94, 28, 13], 'false,false,false': [0.395, 92, 22]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordauthor(F, C)', 'true,true,false': 'haswordtitle(G, D)', 'true,false': 'haswordvenue(B, H), haswordauthor(I, H)', 'true,false,true': 'haswordtitle(J, H)', 'false': 'haswordvenue(A, K), haswordauthor(L, K)', 'false,true': 'author(M, L), venue(M, B)'}, {'true,true,true': [0.056, 0, 10], 'true,true,false,true': [2.596, 13, 14], 'true,true,false,false': [1.98, 18, 6], 'true,false,true,true': [2.542, 12, 14], 'true,false,true,false': [1.967, 17, 6], 'true,false,false': [0.485, 278, 448], 'false,true,true': [0.44, 6, 4], 'false,true,false': [0.439, 32, 12], 'false,false': [0.413, 124, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'false': 'haswordvenue(B, E), haswordauthor(F, E)', 'false,true': 'author(G, F), venue(G, A)', 'false,true,true': 'samebib(G, H), venue(H, B)', 'false,false': 'haswordvenue(A, I), haswordauthor(J, I)', 'false,false,true': 'haswordtitle(K, I)', 'false,false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true': [0.489, 334, 471], 'true,false': [0.33, 4, 27], 'false,true,true,true': [0.9, 1, 4], 'false,true,true,false': [0.016, 5, 0], 'false,true,false': [0.438, 32, 12], 'false,false,true,true': [0.787, 4, 1], 'false,false,true,false': [2.931, 28, 13], 'false,false,false,true': [2.992, 48, 11], 'false,false,false,false': [2.966, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordauthor(F, C)', 'true,true,false': 'haswordtitle(G, D)', 'true,false': 'haswordvenue(A, H), haswordauthor(I, H)', 'true,false,true': 'haswordtitle(J, H)', 'false': 'haswordvenue(B, K), haswordauthor(L, K)', 'false,true': 'author(M, L), venue(M, A)'}, {'true,true,true': [0.083, 0, 10], 'true,true,false,true': [2.583, 13, 14], 'true,true,false,false': [1.932, 18, 6], 'true,false,true,true': [2.542, 12, 14], 'true,false,true,false': [1.911, 17, 6], 'true,false,false': [0.485, 278, 448], 'false,true,true': [0.39, 6, 4], 'false,true,false': [0.438, 32, 12], 'false,false': [0.412, 124, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'false': 'haswordvenue(A, E), haswordauthor(F, E)', 'false,true': 'author(G, F), venue(G, B)', 'false,true,true': 'samebib(G, H), venue(H, A)', 'false,false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,false,true': 'haswordtitle(J, K), haswordvenue(A, K)', 'false,false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true': [0.486, 334, 471], 'true,false': [0.332, 4, 27], 'false,true,true,true': [0.908, 1, 4], 'false,true,true,false': [0.034, 5, 0], 'false,true,false': [0.434, 32, 12], 'false,false,true,true': [0.034, 12, 0], 'false,false,true,false': [2.999, 42, 12], 'false,false,false,true': [4.052, 59, 24], 'false,false,false,false': [0.072, 11, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordtitle(E, D)', 'false': 'haswordvenue(B, F), haswordauthor(G, F)', 'false,true': 'author(H, G), venue(H, A)', 'false,true,true': 'samebib(H, I), venue(I, B)', 'false,false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false,false,true': 'haswordtitle(K, L), haswordvenue(A, L)', 'false,false,false': 'haswordvenue(A, M), haswordtitle(N, M)'}, {'true,true': [0.485, 336, 479], 'true,false': [0.291, 2, 19], 'false,true,true,true': [0.906, 1, 4], 'false,true,true,false': [0.022, 5, 0], 'false,true,false': [0.43, 32, 12], 'false,false,true,true': [0.061, 12, 0], 'false,false,true,false': [4.048, 59, 24], 'false,false,false,true': [3.0, 42, 12], 'false,false,false,false': [0.141, 11, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordtitle(F, D)', 'true,true,true': 'author(G, E), venue(G, A)', 'true,false': 'haswordvenue(A, H), haswordauthor(I, H)', 'true,false,true': 'author(J, I), venue(J, A)', 'false': 'haswordvenue(A, K), haswordauthor(L, K)', 'false,true': 'author(M, L), venue(M, B)'}, {'true,true,true,true': [0.0, 8, 0], 'true,true,true,false': [1.898, 5, 19], 'true,true,false': [0.371, 18, 11], 'true,false,true,true': [2.735, 20, 16], 'true,false,true,false': [1.54, 9, 4], 'true,false,false': [0.484, 278, 448], 'false,true,true': [0.382, 6, 4], 'false,true,false': [0.427, 32, 12], 'false,false': [0.404, 124, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordtitle(E, D)', 'true,true': 'haswordauthor(F, D)', 'true,true,true': 'author(G, F), venue(G, B)', 'false': 'haswordvenue(B, H), haswordauthor(I, H)', 'false,true': 'author(J, I), venue(J, B)', 'false,false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false,false,true': 'title(M, L), venue(M, B)'}, {'true,true,true,true': [1.49e-08, 8, 0], 'true,true,true,false': [1.886, 5, 19], 'true,true,false': [0.483, 323, 460], 'true,false': [0.291, 2, 19], 'false,true,true': [0.276, 6, 2], 'false,true,false': [0.435, 32, 14], 'false,false,true,true': [4.066, 64, 24], 'false,false,true,false': [0.054, 7, 0], 'false,false,false': [0.379, 53, 12]}], ['samevenue(A, B)', {'': 'haswordvenue(B, C), haswordauthor(D, C)', 'true': 'haswordvenue(A, C)', 'true,false': 'haswordauthor(D, E), haswordvenue(A, E)', 'false': 'haswordvenue(A, F), haswordauthor(G, F)', 'false,true': 'author(H, G), venue(H, B)', 'false,true,true': 'samebib(H, I), venue(I, A)', 'false,true,false': 'author(J, G), venue(J, A)', 'false,false': 'haswordvenue(A, K), haswordvenue(B, K)'}, {'true,true': [0.058, 0, 10], 'true,false,true': [0.307, 4, 0], 'true,false,false': [0.424, 65, 36], 'false,true,true,true': [1.266, 2, 18], 'false,true,true,false': [0.539, 18, 0], 'false,true,false,true': [0.802, 15, 1], 'false,true,false,false': [2.88, 26, 15], 'false,false,true': [0.484, 278, 448], 'false,false,false': [0.391, 92, 22]}]]
[{'': [0.24084270048762138, 0.18394619617433927], 'true': [0.2427591528104568, 0.11238293444328941], 'false': [0.20850480109739317, 0.17437500000000122], 'false,true': [0.23999999999999985, 0.19834710743801603], 'false,true,true': [0.15999999999999986, -2.7755575615628915e-18], 'false,true,false': [0.0, 0.20701963117192096], 'false,false': [0.21172022684309966, 0.15574022776238935], 'false,false,true': [0.16000000000000003, 0.2165377751338484]}, {'': [0.23990334821509735, 0.180640861858608], 'true': [0.24275915281046145, 0.11238293444328855], 'false': [0.20548103654362937, 0.17131473287152157], 'false,true': [0.2395601096664825, 0.19452713363159607], 'false,true,true': [0.16153950938681225, 5.096833998346761e-05], 'false,true,false': [2.4576686617067134e-06, 0.2029268663597475], 'false,false': [0.20334904129270392, 0.15574022776238897], 'false,false,true': [0.1302457674210878, 0.21078894368062936]}, {'': [0.23897284752961942, 0.17711242437218921], 'true': [0.238162204136848, 0.23788346814211792], 'true,true': [0.0031484720128159616, 0.2303705006887006], 'true,false': [0.23360894277494623, 0.23516937446005626], 'true,false,true': [0.24852071005917167, 0.1682006394224642], 'true,true,false': [0.24965706447187935, 0.16341569201183295], 'false': [0.19470410716262027, 0.17053456504147235], 'false,true': [0.19384073754219708, 0.19285397407922236]}, {'': [0.23518678873550794, 0.1764322492925663], 'true': [0.23891768122103685, 0.1086577499863826], 'false': [0.1938446100423532, 0.16991554242037515], 'false,true': [0.19193423050046435, 0.19226507607157428], 'false,true,true': [0.16183929484283896, 5.23408335066311e-05], 'false,false': [0.2013046656680931, 0.15574022776238944], 'false,false,true': [0.12372824022576119, 0.209554971264322], 'false,false,false': [0.15168055156564195, 0.1599999999999999]}, {'': [0.23441865972213496, 0.1736827531597665], 'true': [0.20804409386255182, 0.23566448790256606], 'true,false': [0.2216387272975557, 0.2348303561179093], 'true,false,true': [0.24852071005917167, 0.15879727425091092], 'true,true': [0.006841428290891294, 0.21827451047359495], 'true,true,false': [0.2471154099775338, 0.15545811690138497], 'false': [0.18535642063247362, 0.1693667227747308], 'false,true': [0.15230921838512265, 0.192004499777701]}, {'': [0.23200265516260618, 0.17319890880798], 'true': [0.23591487042805365, 0.11023691659549874], 'false': [0.18915952305043465, 0.16755485636969855], 'false,true': [0.18584886101468823, 0.18840173827989737], 'false,true,true': [0.16478389716055192, 0.00022860492563300805], 'false,false': [0.1436098353678393, 0.18318078223314885], 'false,false,false': [0.19782048129849533, 0.0004748473112358961], 'false,false,true': [9.710829500278e-05, 0.16655331316233216]}, {'': [0.23157656675733015, 0.1691859094998331], 'true': [0.23486084614793049, 0.08484427880523879], 'false': [0.17801233268457628, 0.16598762903590283], 'false,true': [0.14623913643453154, 0.18476509344958048], 'false,false': [0.17871507748292814, 0.14568195925897978], 'false,false,true': [0.0003140740499547878, 0.19742718236576776], 'false,true,true': [0.16413747143055102, 9.516454978780175e-05], 'false,false,false': [0.1667189416116352, 0.0018057725887641975]}, {'': [0.23133833883097654, 0.16630588169170615], 'true': [0.18904503173363296, 0.23416166982897113], 'true,false': [0.2117059574494442, 0.23464813534543985], 'true,false,true': [0.20779401127949038, 0.18253178748947935], 'true,true': [0.22040461110737236, 0.1375436604299065], 'true,true,true': [-5.551115123125783e-17, 0.1501634762285046], 'false': [0.17610133891981886, 0.16288167459370884], 'false,true': [0.14619918379739744, 0.18238610089675553]}, {'': [0.22849040391884773, 0.16601949672524083], 'true': [0.23159137165980967, 0.08465265527457848], 'true,true': [0.2005033612804001, 0.2328205927282764], 'true,true,true': [2.7755575615628914e-17, 0.1482533849388995], 'false': [0.1726327868175373, 0.16367017882435006], 'false,true': [0.07604854076391232, 0.18904772797916766], 'false,false': [0.17668796616838328, 0.1435327295864122], 'false,false,true': [0.18788482428455106, 0.00041737918255427275]}, {'': [0.16622444970213252, 0.2202011309495569], 'false': [0.18598922702312892, 0.2237998394315006], 'false,false': [0.23459838049620885, 0.1525242107392459], 'false,true': [0.1848887361618798, 0.1849702432675695], 'false,true,false': [0.04022389543469025, 0.20230194167977367], 'false,true,true': [0.08011076273918905, 0.01614928900553298], 'true': [0.0034150401576204747, 0.17716228911141596], 'true,false': [0.023523352408680087, 0.17940720252893722]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;false;haswordvenue(A, E), haswordauthor(F, E).;true;true
0;false,true;author(G, F), venue(G, B).;true;true
0;false,true,true;samebib(G, H), venue(H, A).;true;true
0;false,true,false;author(I, F), venue(I, A).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;false;haswordvenue(B, E), haswordauthor(F, E).;true;true
1;false,true;author(G, F), venue(G, A).;true;true
1;false,true,true;samebib(G, H), venue(H, B).;true;true
1;false,true,false;author(I, F), venue(I, B).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;false;haswordvenue(B, E), haswordauthor(F, E).;true;true
3;false,true;author(G, F), venue(G, A).;true;true
3;false,true,true;samebib(G, H), venue(H, B).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;false;haswordvenue(A, E), haswordauthor(F, E).;true;true
5;false,true;author(G, F), venue(G, B).;true;true
5;false,true,true;samebib(G, H), venue(H, A).;true;true
5;false,false;haswordvenue(B, I), haswordtitle(J, I).;true;true
5;false,false,true;haswordtitle(J, K), haswordvenue(A, K).;true;true
5;false,false,false;haswordvenue(A, L), haswordtitle(M, L).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;false;haswordvenue(B, F), haswordauthor(G, F).;true;true
6;false,true;author(H, G), venue(H, A).;true;true
6;false,true,true;samebib(H, I), venue(I, B).;true;true
6;false,false;haswordvenue(B, J), haswordtitle(K, J).;true;true
6;false,false,true;haswordtitle(K, L), haswordvenue(A, L).;true;true
6;false,false,false;haswordvenue(A, M), haswordtitle(N, M).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
7;true,true;haswordtitle(F, D).;true;true
7;true,true,true;author(G, E), venue(G, A).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordvenue(A, D), haswordtitle(E, D).;true;true
8;true,true;haswordauthor(F, D).;true;true
8;true,true,true;author(G, F), venue(G, B).;true;true
8;false;haswordvenue(B, H), haswordauthor(I, H).;true;true
8;false,false;haswordvenue(B, K), haswordtitle(L, K).;true;true
8;false,false,true;title(M, L), venue(M, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.443242102801371;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.7291166770349955;  // std dev = 0.335, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, B) )
%   | | then if ( samebib(G, H), venue(H, A) )
%   | | | then return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(I, F), venue(I, A) )
%   | | | then return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.15083186192878065;  // std dev = 2.913, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( haswordtitle(L, J) )
%   | | | then return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.17522210583121967;  // std dev = 2.980, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.051131391239862906;  // std dev = 0.395, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.3803254334818479;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.6157326050686436;  // std dev = 0.335, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, A) )
%   | | then if ( samebib(G, H), venue(H, B) )
%   | | | then return 0.6392119282680095;  // std dev = 0.899, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.15769426647032894;  // std dev = 0.016, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.10912768446848489;  // std dev = 0.441, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( haswordtitle(K, I) )
%   | | | then return 0.03693744759731563;  // std dev = 0.807, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.1534329638272584;  // std dev = 2.940, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.03825072160333175;  // std dev = 2.992, 59.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return 0.05181004363723003;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.6805851247859591;  // std dev = 0.056, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.2449182844345499;  // std dev = 2.596, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.04746202633921467;  // std dev = 1.980, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return 0.12287562277060494;  // std dev = 3.383, 49.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | | else return 0.3407976691556591;  // std dev = 13.066, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | then if ( author(L, K), venue(L, A) )
%   | | then return 0.19790656117758298;  // std dev = 0.440, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( author(M, K), venue(M, B) )
%   | | | then return -0.17891175899361775;  // std dev = 0.003, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.11361319919327112;  // std dev = 2.883, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else return 0.062499859350964124;  // std dev = 0.413, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.24351059909676964;  // std dev = 0.489, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.4125134493695601;  // std dev = 0.330, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, A) )
%   | | then if ( samebib(G, H), venue(H, B) )
%   | | | then return 0.4932905584441351;  // std dev = 0.901, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.16310720900099623;  // std dev = 0.016, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.07925608803475302;  // std dev = 0.439, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( haswordtitle(K, I) )
%   | | | then return 0.023106606903812173;  // std dev = 0.802, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.12185523791984597;  // std dev = 2.935, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.023546290149272397;  // std dev = 2.990, 59.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return 0.038435440966566196;  // std dev = 2.967, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( haswordvenue(B, D) )
%   | | | then return 0.5130811991646692;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.1678702946562094;  // std dev = 2.589, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | else return -0.04901932204888125;  // std dev = 0.408, 29.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=11 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.19599094169465694;  // std dev = 0.489, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.3115759655204919;  // std dev = 0.341, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, B) )
%   | | then if ( samebib(J, K), venue(K, A) )
%   | | | then return 0.5011601761868709;  // std dev = 0.907, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.15526960340239965;  // std dev = 0.029, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.06335383546963233;  // std dev = 0.434, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.04319276968976367;  // std dev = 0.409, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then return 0.14100947980578213;  // std dev = 0.487, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else return 0.29532903378822084;  // std dev = 0.289, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, B) )
%   | | then if ( author(I, G), venue(I, A) )
%   | | | then return 0.21549087989618537;  // std dev = 0.724, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.16359811271850855;  // std dev = 0.028, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.07435184720754673;  // std dev = 0.442, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then if ( haswordtitle(L, J) )
%   | | | then return 0.0013965591656627697;  // std dev = 0.702, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.08525404606726569;  // std dev = 2.904, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return 0.014082135973203999;  // std dev = 2.990, 59.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return 0.027239543821177954;  // std dev = 2.967, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.34618977391748007;  // std dev = 0.055, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(F, D) )
%   | | | then return 0.09476512815309525;  // std dev = 2.588, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.16776628606095154;  // std dev = 1.882, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(I, G) )
%   | | | then return 0.07614075867346584;  // std dev = 2.542, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   | | | else return -0.17486086867196474;  // std dev = 1.865, 23.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
%   | | else return 0.12579564411335262;  // std dev = 0.484, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | then if ( author(L, K), venue(L, B) )
%   | | then return 0.1143056680792233;  // std dev = 0.387, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.03825588170316238;  // std dev = 0.432, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.031185446387044014;  // std dev = 0.408, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(F, D) )
%   | | then if ( haswordvenue(A, D) )
%   | | | then return 0.27929854585743086;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.04161870767490142;  // std dev = 2.575, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | else return 0.07836902003423271;  // std dev = 0.485, 783.000 (wgt'ed) examples reached here.  /* #neg=323 #pos=460 */
%   | else return 0.2240471048573204;  // std dev = 0.288, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | then if ( author(I, H), venue(I, A) )
%   | | then return 0.08186651948375609;  // std dev = 0.373, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( author(J, H), venue(J, B) )
%   | | | then return -0.15399852602360095;  // std dev = 0.000302, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.054870427244341664;  // std dev = 2.852, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then return 0.0430570378516343;  // std dev = 0.423, 95.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=24 */
%   | | else return -0.00262685878391115;  // std dev = 0.384, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then return 0.05887158829008412;  // std dev = 0.484, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | then return 0.12167116995849096;  // std dev = 0.401, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return 0.26135548190871977;  // std dev = 0.176, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.23939048447168776;  // std dev = 0.131, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return -0.19190376415659743;  // std dev = 0.055, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( haswordauthor(M, J) )
%   | | | then return 0.13595338009798227;  // std dev = 0.780, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.06625174057689504;  // std dev = 4.067, 86.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=24 */
%   | else if ( haswordvenue(B, N), haswordtitle(P, N) )
%   | | then return 0.06285914390322093;  // std dev = 0.432, 91.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=26 */
%   | | else return -0.22470909935836147;  // std dev = 0.126, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then if ( author(F, D), venue(F, A) )
%   | | then return -0.5064066233421903;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0.18085527378089;  // std dev = 0.379, 31.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=21 */
%   | else return -0.020624301490343954;  // std dev = 0.417, 76.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=25 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then if ( author(I, H), venue(I, B) )
%   | | then if ( samebib(I, J), venue(J, A) )
%   | | | then return 0.43455244504253876;  // std dev = 1.308, 20.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=18 */
%   | | | else return -0.40034004417218283;  // std dev = 0.545, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( author(K, H), venue(K, A) )
%   | | | then return -0.2908628517233293;  // std dev = 0.861, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   | | | else return 0.07131722607193228;  // std dev = 2.870, 41.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=15 */
%   | else if ( haswordvenue(A, L), haswordvenue(B, L) )
%   | | then return 0.059761133505475475;  // std dev = 0.484, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   | | else return 0.005323728939299758;  // std dev = 0.392, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */


Results
   AUC ROC   = 0.561937
   AUC PR    = 0.411665
   CLL	      = -0.7068
   Precision = 0.374392 at threshold = 0.5
   Recall    = 0.93636
   F1        = 0.534908


Total learning time: 48.02741575241089 seconds
Total inference time: 10.689 seconds
AUC ROC: 0.561937


Results scoring model
   AUC ROC   = 0.68632
   AUC PR    = 0.685285
   CLL	      = -0.615853
   Precision = 0.63648 at threshold = 0.5
   Recall    = 0.907273
   F1        = 0.748126


Total scoring time: 1.164 seconds
Refined model CLL: -0.615853


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.553768
   AUC PR    = 0.402489
   CLL	      = -0.709031
   Precision = 0.371847 at threshold = 0.5
   Recall    = 0.926226
   F1        = 0.530655


Total learning time: 94.2712207775116 seconds
Total inference time: 11.902 seconds
AUC ROC: 0.553768
Total revision time: 94.2712207775116
Best scored revision CLL: -0.612071


Dataset: 13_twitter_cora, Fold: 5, Type: Transfer (trRDN-B), Time: 00:12:09
{'AUC ROC': 0.553768, 'AUC PR': 0.402489, 'CLL': -0.709031, 'Precision': [0.371847, 0.5], 'Recall': 0.926226, 'F1': 0.530655, 'Learning time': 94.2712207775116, 'Inference time': 11.902, 'parameter': {'AUC ROC': 0.553768, 'AUC PR': 0.402489, 'CLL': -0.709031, 'Precision': [0.371847, 0.5], 'Recall': 0.926226, 'F1': 0.530655, 'Learning time': 43.87080502510071, 'Inference time': 11.902}}


Starting fold 1

Target train facts examples: 7463
Target train pos examples: 368
Target train neg examples: 688

Target test facts examples: 35095
Target test pos  examples: 2649
Target test neg examples: 4334

******************************************
Performing Parameter Learning
******************************************
Refine
0;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
0;true;follows(A, D).;false;false
0;false;follows(A, E), recursion_accounttype(E, B).;true;true
0;false,true;follows(A, F), follows(F, A).;false;true
0;false,true,false;follows(A, G), follows(G, E).;false;false
0;false,false;follows(H, A).;true;true
0;false,false,true;follows(I, H), follows(I, A).;false;false
0;false,false,false;follows(A, J), follows(J, K).;false;false
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;true;follows(A, C), tweets(A, D).;false;false
1;false;follows(A, E), recursion_accounttype(E, B).;true;true
1;false,true;tweets(A, F), tweets(E, F).;false;true
1;false,true,false;follows(G, A), follows(E, H).;false;false
1;false,false;follows(I, A).;true;true
1;false,false,true;follows(I, J), recursion_accounttype(J, B).;false;false
1;false,false,false;tweets(A, K).;false;false
2;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;true;follows(C, D), follows(D, A).;false;false
2;false;follows(E, A).;true;true
2;false,true;follows(F, E), follows(F, A).;false;true
2;false,true,false;follows(E, G), recursion_accounttype(G, B).;false;false
2;false,false;follows(A, H), follows(H, I).;true;true
2;false,false,true;recursion_accounttype(I, B).;false;false
2;false,false,false;follows(A, J).;false;false
3;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
3;true;tweets(A, D), tweets(C, D).;false;false
3;false;follows(E, A).;true;true
3;false,true;follows(F, E), recursion_accounttype(F, B).;true;false
3;false,true,true;follows(A, G), recursion_accounttype(G, B).;false;false
3;false,false;follows(A, H), recursion_accounttype(H, B).;true;true
3;false,false,true;follows(A, I), follows(I, H).;false;false
3;false,false,false;tweets(A, J), follows(A, K).;false;false
4;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
4;true;follows(A, D), follows(D, C).;true;false
4;true,true;follows(D, A).;false;true
4;true,true,false;tweets(A, E).;false;false
4;false;follows(F, A).;false;true
4;false,false;follows(A, G), recursion_accounttype(G, B).;true;true
4;false,false,true;follows(G, H), follows(H, G).;false;false
4;false,false,false;follows(A, I), follows(I, J).;false;false
5;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
5;true;follows(D, A), tweets(D, E).;true;true
5;true,true;recursion_accounttype(D, B).;false;false
5;true,false;follows(C, F), follows(F, C).;true;false
5;true,false,true;tweets(C, G), recursion_accounttype(F, B).;false;false
5;false;follows(A, H), follows(H, A).;false;true
5;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
5;false,false,false;tweets(A, J), follows(K, A).;false;false
6;;accounttype(A, B) :- follows(A, C).;true;true
6;true;follows(D, C), recursion_accounttype(D, B).;true;false
6;true,true;recursion_accounttype(C, B).;true;true
6;true,true,true;follows(E, A), follows(E, D).;false;false
6;true,true,false;follows(F, A), recursion_accounttype(F, B).;false;false
6;false;follows(G, A), recursion_accounttype(G, B).;false;true
6;false,false;follows(H, A).;false;true
6;false,false,false;tweets(A, I).;false;false
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;tweets(C, D), follows(A, C).;false;false
7;false;follows(E, A).;true;true
7;false,true;follows(E, F), recursion_accounttype(F, B).;true;false
7;false,true,true;follows(F, E), follows(A, F).;false;false
7;false,false;follows(A, G), recursion_accounttype(G, B).;true;true
7;false,false,true;tweets(A, H).;false;false
7;false,false,false;follows(A, I).;false;false
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;true;follows(C, D), recursion_accounttype(D, B).;false;true
8;true,false;follows(A, E), follows(E, A).;false;false
8;false;follows(F, A), follows(A, G).;true;true
8;false,true;follows(G, A), follows(G, F).;false;true
8;false,true,false;follows(H, F), recursion_accounttype(H, B).;false;false
8;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
8;false,false,false;follows(J, A).;false;false
9;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
9;true;follows(C, D).;true;false
9;true,true;follows(A, D).;true;true
9;true,true,true;follows(E, A), recursion_accounttype(E, B).;false;false
9;true,true,false;tweets(C, F), follows(D, C).;false;false
9;false;follows(A, G), follows(H, A).;false;true
9;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
9;false,false,false;follows(J, A).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.23843062524035266;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.4581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.424815601766179;  // std dev = 2.714, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.004815601766179008;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.004815601766179008;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.20686012285620575;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.448295606241962;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.3982164798305049;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.3639794304549286;  // std dev = 2.714, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, A) )
%   | | then if ( samebib(K, L), venue(L, B) )
%   | | | then return 0.1488242116562869;  // std dev = 2.789, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return -0.14162905569876189;  // std dev = 0.023, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.12787230110394693;  // std dev = 0.016, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | then return 0.004228390109386251;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.1751801570305961;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.3874028246526538;  // std dev = 0.802, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.326685698020276;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.29629366162004606;  // std dev = 2.716, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.12205676751791568;  // std dev = 0.051, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0037111125833978686;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.004507924439813008;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.14514481334590568;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.2638891679144505;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return 0.30343404142094477;  // std dev = 0.800, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.23299326369188966;  // std dev = 2.716, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.10959153340338802;  // std dev = 0.046, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0032558270569705674;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.003958717519531346;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.11804668707041945;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.230929510166299;  // std dev = 0.799, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.20305069154076985;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.17932988946179176;  // std dev = 2.716, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then return -0.02879733809916237;  // std dev = 0.328, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, M), haswordvenue(A, M) )
%   | | | then return -0.09936314977686865;  // std dev = 0.042, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0028554031467501392;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | | | then return 0.007328377203989888;  // std dev = 2.848, 67.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=10 */
%   | | | else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.09457696812283496;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.17845517723946516;  // std dev = 0.796, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.15908642819148458;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.1346437179109842;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.09083148463204621;  // std dev = 0.039, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.002503460836945874;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.0030727312167755823;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.07489163449109286;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.13649679189239997;  // std dev = 0.794, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.12011370564183124;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.10104151481433825;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.08361444281056883;  // std dev = 0.036, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0021943081594878503;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.002695407118522032;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.05877777591804268;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.10278372275605292;  // std dev = 0.795, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.09433205690029337;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.07515324479080618;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.07743495291601564;  // std dev = 0.034, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0019228798175884457;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.0023637405251722026;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04582386394015474;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.08564646274037142;  // std dev = 0.791, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.07078212529785222;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.055598870663687565;  // std dev = 2.718, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.07208766412694816;  // std dev = 0.032, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0016846780662751325;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.0020723638784142092;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.03554750876544446;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.0621066118548765;  // std dev = 0.793, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.057510831911217995;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.041310348106765656;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then return -0.026397494180919526;  // std dev = 0.328, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, M), haswordvenue(A, M) )
%   | | | then return -0.06741741298188746;  // std dev = 0.030, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0014757167188846957;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | | | then return 0.0051853395909175;  // std dev = 2.847, 67.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=10 */
%   | | | else return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.556906
   AUC PR    = 0.42829
   CLL	      = -0.65754
   Precision = 0.637427 at threshold = 0.5
   Recall    = 0.041148
   F1        = 0.077305


Total learning time: 58.15505504608154 seconds
Total inference time: 7.483 seconds
AUC ROC: 0.556906


Results scoring model
   AUC ROC   = 0.59092
   AUC PR    = 0.419493
   CLL	      = -0.620309
   Precision = 0.578947 at threshold = 0.5
   Recall    = 0.059783
   F1        = 0.108374


Total scoring time: 1.047 seconds
Parameter learned model CLL: -0.620309


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordauthor(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)', 'false,false': 'haswordvenue(B, L), haswordtitle(M, L)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [1.095, 2, 3], 'true,false,false,true': [0.816, 1, 2], 'true,false,false,false': [2.714, 13, 17], 'false,true,true': [0.0, 12, 0], 'false,true,false': [0.354, 64, 11], 'false,false,true': [0.354, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'title(K, J), venue(K, A)', 'false,true,true': 'samebib(K, L), venue(L, B)', 'false,false': 'haswordvenue(B, M), haswordtitle(N, M)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.816, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.714, 13, 17], 'false,true,true,true': [2.789, 27, 11], 'false,true,true,false': [0.023, 42, 0], 'false,true,false': [0.016, 7, 0], 'false,false,true': [0.354, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(A, K)', 'false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.802, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.716, 13, 17], 'false,true,true': [0.051, 12, 0], 'false,true,false': [0.354, 64, 11], 'false,false,true': [0.346, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordauthor(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(A, K)', 'false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [1.095, 2, 3], 'true,false,false,true': [0.8, 1, 2], 'true,false,false,false': [2.716, 13, 17], 'false,true,true': [0.046, 12, 0], 'false,true,false': [0.354, 64, 11], 'false,false,true': [0.346, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordauthor(J, I)', 'false,false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false,false,true': 'haswordtitle(L, M), haswordvenue(A, M)', 'false,false,false': 'haswordvenue(A, N), haswordtitle(P, N)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.799, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.716, 13, 17], 'false,true': [0.328, 7, 1], 'false,false,true,true': [0.042, 12, 0], 'false,false,true,false': [3.064, 64, 11], 'false,false,false,true': [2.848, 57, 10], 'false,false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(A, K)', 'false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.796, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.717, 13, 17], 'false,true,true': [0.039, 12, 0], 'false,true,false': [0.354, 64, 11], 'false,false,true': [0.346, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(A, K)', 'false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.794, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.717, 13, 17], 'false,true,true': [0.036, 12, 0], 'false,true,false': [0.354, 64, 11], 'false,false,true': [0.346, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(A, K)', 'false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.795, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.717, 13, 17], 'false,true,true': [0.034, 12, 0], 'false,true,false': [0.354, 64, 11], 'false,false,true': [0.346, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(A, K)', 'false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.791, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.718, 13, 17], 'false,true,true': [0.032, 12, 0], 'false,true,false': [0.354, 64, 11], 'false,false,true': [0.346, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordauthor(J, I)', 'false,false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false,false,true': 'haswordtitle(L, M), haswordvenue(A, M)', 'false,false,false': 'haswordvenue(A, N), haswordtitle(P, N)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.793, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.717, 13, 17], 'false,true': [0.328, 7, 1], 'false,false,true,true': [0.03, 12, 0], 'false,false,true,false': [3.064, 64, 11], 'false,false,false,true': [2.847, 57, 10], 'false,false,false,false': [0.0, 4, 0]}]]
[{'': [0.23762656230272572, 0.11496588764697444], 'true': [0.2356675262844691, 0.24376731301939172], 'true,false': [0.23999999999999994, 0.2442607897153348], 'true,false,false': [0.22222222222222224, 0.2455555555555551], 'false': [0.1104505218655035, 0.11985258772632539], 'false,false': [0.12515555555555502, 0.0], 'false,true': [-1.1564823173178714e-17, 0.12515555555555502]}, {'': [0.2371606616282308, 0.11455688633284844], 'true': [0.2356675262844735, 0.24352902641532298], 'true,false': [0.2222222222222222, 0.24485729569956294], 'true,false,false': [0.23999999999999994, 0.24549939133283114], 'false': [0.10989213699570438, 0.1196268538653256], 'false,false': [0.125155555555556, 0.0], 'false,true': [0.11826329058716308, 3.536127348451442e-05], 'false,true,true': [0.20467024545790047, 1.309676795721185e-05]}, {'': [0.23670778123816977, 0.112007925399031], 'true': [0.23566752628446727, 0.24327409495495106], 'true,false': [0.21418921718306527, 0.24517272216828248], 'true,false,false': [0.23999999999999994, 0.24590288883301248], 'false': [0.1098029509778292, 0.1143578111986426], 'false,false': [0.11976586065569501, 0.0], 'false,true': [0.00021334506947594256, 0.12515555555555488]}, {'': [0.23636694445533546, 0.11174095126946694], 'true': [0.23566752628446358, 0.24295297170139185], 'true,false': [0.24000000000000005, 0.24332146169278718], 'true,false,false': [0.2130884730597966, 0.24589367844998872], 'false': [0.10943138431740565, 0.11422186192353925], 'false,false': [0.11974954934686755, 0.0], 'false,true': [0.00017727376614762083, 0.12515555555555585]}, {'': [0.236161160313488, 0.11154110952395889], 'true': [0.235667526284474, 0.24273993102241204], 'true,false': [0.21258059131790366, 0.2451415203703778], 'true,false,false': [0.24, 0.24591805808192593], 'false': [0.10737691360309225, 0.11172564044448689], 'false,false': [0.1091557251522986, 0.11478253187662434], 'false,false,false': [0.12107161859673503, 0.0], 'false,false,true': [0.00014934326832803888, 0.1251555555555548]}, {'': [0.23605421403919763, 0.11137035957250964], 'true': [0.23566752628446164, 0.24263265746189178], 'true,false': [0.21102195366604523, 0.24521380370147244], 'true,false,false': [0.24, 0.2459974215442144], 'false': [0.10894612552278464, 0.11399787575829531], 'false,false': [0.1196833633142245, 0.0], 'false,true': [0.0001273498475321382, 0.12515555555555608]}, {'': [0.2360022505110429, 0.11125037097083718], 'true': [0.23566752628447166, 0.24255973817167684], 'true,false': [0.210354070198701, 0.24523564789468724], 'true,false,false': [0.24000000000000005, 0.2460562918109979], 'false': [0.10878338247785196, 0.11393184093009812], 'false,false': [0.1196721190376046, 0.0], 'false,true': [0.00010976475682055245, 0.12515555555555608]}, {'': [0.23597834950204355, 0.11115484712761171], 'true': [0.23566752628446394, 0.2425219256315146], 'true,false': [0.2105247846171765, 0.24521562632310565], 'true,false,false': [0.24, 0.24603235068639492], 'false': [0.10865472461070816, 0.11387820516432318], 'false,false': [0.11966224781939178, 0.0], 'false,true': [9.550912250217332e-05, 0.1251555555555557]}, {'': [0.23596738472195006, 0.11107765425315148], 'true': [0.23566752628446355, 0.24249898878658102], 'true,false': [0.20840828263755504, 0.2453596903240663], 'true,false,false': [0.24, 0.24622003901313178], 'false': [0.1085514094793725, 0.11383408753849415], 'false,false': [0.119653585345611, 0.0], 'false,true': [8.380816472134886e-05, 0.1251555555555548]}, {'': [0.23596206705963807, 0.11101445725675095], 'true': [0.23566752628447613, 0.24247892328053564], 'true,false': [0.20948438399585145, 0.24528005973011383], 'true,false,false': [0.24, 0.24612257601720444], 'false': [0.10740008808061954, 0.11117295406117333], 'false,false': [0.10846729994208922, 0.11444067244624624], 'false,false,false': [0.12100178559209916, 0.0], 'false,false,true': [7.409604760677824e-05, 0.12515555555555566]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
0;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true
0;false,false;haswordvenue(B, L), haswordtitle(M, L).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
1;false,true;title(K, J), venue(K, A).;true;true
1;false,true,true;samebib(K, L), venue(L, B).;true;true
1;false,false;haswordvenue(B, M), haswordtitle(N, M).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
2;false,true;haswordtitle(J, K), haswordvenue(A, K).;true;true
2;false,false;haswordvenue(A, L), haswordtitle(M, L).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
3;false,true;haswordtitle(J, K), haswordvenue(A, K).;true;true
3;false,false;haswordvenue(A, L), haswordtitle(M, L).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;false;haswordvenue(B, I), haswordauthor(J, I).;true;true
4;false,false;haswordvenue(B, K), haswordtitle(L, K).;true;true
4;false,false,true;haswordtitle(L, M), haswordvenue(A, M).;true;true
4;false,false,false;haswordvenue(A, N), haswordtitle(P, N).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
5;false,true;haswordtitle(J, K), haswordvenue(A, K).;true;true
5;false,false;haswordvenue(A, L), haswordtitle(M, L).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
6;false,true;haswordtitle(J, K), haswordvenue(A, K).;true;true
6;false,false;haswordvenue(A, L), haswordtitle(M, L).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
7;false,true;haswordtitle(J, K), haswordvenue(A, K).;true;true
7;false,false;haswordvenue(A, L), haswordtitle(M, L).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
8;false,true;haswordtitle(J, K), haswordvenue(A, K).;true;true
8;false,false;haswordvenue(A, L), haswordtitle(M, L).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;false;haswordvenue(B, I), haswordauthor(J, I).;true;true
9;false,false;haswordvenue(B, K), haswordtitle(L, K).;true;true
9;false,false,true;haswordtitle(L, M), haswordvenue(A, M).;true;true
9;false,false,false;haswordvenue(A, N), haswordtitle(P, N).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.23843062524035266;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.4581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.424815601766179;  // std dev = 2.714, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.004815601766179008;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.004815601766179008;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.20686012285620575;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.45935396641210174;  // std dev = 0.810, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.3982164798305049;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.36287359443791467;  // std dev = 2.715, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.004228390109386251;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.004228390109386251;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.1751801570305961;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.3734320413643335;  // std dev = 0.808, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.3269052770205085;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.2976924487337738;  // std dev = 2.715, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.11231637819360636;  // std dev = 9.13e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0037111125833978686;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.0037111125833978686;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.14514481334590568;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.30280675254289585;  // std dev = 0.800, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.2635769705623022;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.23310562893417394;  // std dev = 2.716, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.1015963294878363;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0032558270569705674;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.0032558270569705674;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.11804668707041945;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.23040446245548618;  // std dev = 0.799, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.20323593140109866;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.17934630824284573;  // std dev = 2.716, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.09269127618926097;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0028554031467501392;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.0028554031467501392;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.09457696812283496;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.18014724393731743;  // std dev = 0.795, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.15881450919170095;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.13451389566172006;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, A) )
%   | | then if ( samebib(K, L), venue(L, B) )
%   | | | then return 0.15151873674305016;  // std dev = 2.773, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return -0.14135470799918157;  // std dev = 0.081, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.09361024488001457;  // std dev = 0.055, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | then return 0.002503460836945874;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.07489163449109286;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.1202930309167766;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return 0.13527255441208885;  // std dev = 0.795, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.10112784853144664;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.08413588432950221;  // std dev = 0.034, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0021943081594878503;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.0025547559874408298;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.05877777591804268;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.10820021491349296;  // std dev = 0.792, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.09023216952163562;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.07528911029394274;  // std dev = 2.718, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then return -0.03014235691619091;  // std dev = 0.328, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( title(M, L), venue(M, B) )
%   | | | then return -0.0018117025145237512;  // std dev = 3.065, 80.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=11 */
%   | | | else return -0.09220540463135439;  // std dev = 0.062, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | | | then return 0.006106760308201249;  // std dev = 2.847, 67.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=10 */
%   | | | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04582386394015474;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.0677178533378433;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.07530030174185046;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.05584440312284454;  // std dev = 2.610, 28.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=16 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then return -0.02623967974558215;  // std dev = 0.328, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, M), haswordvenue(A, M) )
%   | | | then return -0.07443251943508779;  // std dev = 0.024, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0022912868508032356;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | | | then return 0.005358061294125436;  // std dev = 2.847, 67.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=10 */
%   | | | else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.03554750876544446;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.06835988720713411;  // std dev = 0.793, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.0565648629587463;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.040814297612245004;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then return -0.022908185996585777;  // std dev = 0.328, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, M), haswordvenue(A, M) )
%   | | | then return -0.06946764190760858;  // std dev = 0.023, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0020080144360597823;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | | | then return 0.004698480515255971;  // std dev = 2.847, 67.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=10 */
%   | | | else return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.556964
   AUC PR    = 0.428304
   CLL	      = -0.657219
   Precision = 0.637427 at threshold = 0.5
   Recall    = 0.041148
   F1        = 0.077305


Total learning time: 55.17906308174133 seconds
Total inference time: 6.93 seconds
AUC ROC: 0.556964


Results scoring model
   AUC ROC   = 0.590942
   AUC PR    = 0.419498
   CLL	      = -0.620306
   Precision = 0.578947 at threshold = 0.5
   Recall    = 0.059783
   F1        = 0.108374


Total scoring time: 1.105 seconds
Refined model CLL: -0.620306


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.556964
   AUC PR    = 0.428304
   CLL	      = -0.657219
   Precision = 0.637427 at threshold = 0.5
   Recall    = 0.041148
   F1        = 0.077305


Total learning time: 115.48611812782288 seconds
Total inference time: 6.93 seconds
AUC ROC: 0.556964
Total revision time: 115.48611812782288
Best scored revision CLL: -0.620306


Dataset: 13_twitter_cora, Fold: 1, Type: Transfer (trRDN-B), Time: 00:14:20
{'AUC ROC': 0.556964, 'AUC PR': 0.428304, 'CLL': -0.657219, 'Precision': [0.637427, 0.5], 'Recall': 0.041148, 'F1': 0.077305, 'Learning time': 115.48611812782288, 'Inference time': 6.93, 'parameter': {'AUC ROC': 0.556906, 'AUC PR': 0.42829, 'CLL': -0.65754, 'Precision': [0.637427, 0.5], 'Recall': 0.041148, 'F1': 0.077305, 'Learning time': 58.15505504608154, 'Inference time': 7.483}}


Starting fold 2

Target train facts examples: 9016
Target train pos examples: 771
Target train neg examples: 544

Target test facts examples: 33542
Target test pos  examples: 2246
Target test neg examples: 4478

******************************************
Performing Parameter Learning
******************************************
Refine
0;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
0;true;follows(A, D).;false;false
0;false;follows(A, E), recursion_accounttype(E, B).;true;true
0;false,true;follows(A, F), follows(F, A).;false;true
0;false,true,false;follows(A, G), follows(G, E).;false;false
0;false,false;follows(H, A).;true;true
0;false,false,true;follows(I, H), follows(I, A).;false;false
0;false,false,false;follows(A, J), follows(J, K).;false;false
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;true;follows(A, C), tweets(A, D).;false;false
1;false;follows(A, E), recursion_accounttype(E, B).;true;true
1;false,true;tweets(A, F), tweets(E, F).;false;true
1;false,true,false;follows(G, A), follows(E, H).;false;false
1;false,false;follows(I, A).;true;true
1;false,false,true;follows(I, J), recursion_accounttype(J, B).;false;false
1;false,false,false;tweets(A, K).;false;false
2;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;true;follows(C, D), follows(D, A).;false;false
2;false;follows(E, A).;true;true
2;false,true;follows(F, E), follows(F, A).;false;true
2;false,true,false;follows(E, G), recursion_accounttype(G, B).;false;false
2;false,false;follows(A, H), follows(H, I).;true;true
2;false,false,true;recursion_accounttype(I, B).;false;false
2;false,false,false;follows(A, J).;false;false
3;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
3;true;tweets(A, D), tweets(C, D).;false;false
3;false;follows(E, A).;true;true
3;false,true;follows(F, E), recursion_accounttype(F, B).;true;false
3;false,true,true;follows(A, G), recursion_accounttype(G, B).;false;false
3;false,false;follows(A, H), recursion_accounttype(H, B).;true;true
3;false,false,true;follows(A, I), follows(I, H).;false;false
3;false,false,false;tweets(A, J), follows(A, K).;false;false
4;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
4;true;follows(A, D), follows(D, C).;true;false
4;true,true;follows(D, A).;false;true
4;true,true,false;tweets(A, E).;false;false
4;false;follows(F, A).;false;true
4;false,false;follows(A, G), recursion_accounttype(G, B).;true;true
4;false,false,true;follows(G, H), follows(H, G).;false;false
4;false,false,false;follows(A, I), follows(I, J).;false;false
5;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
5;true;follows(D, A), tweets(D, E).;true;true
5;true,true;recursion_accounttype(D, B).;false;false
5;true,false;follows(C, F), follows(F, C).;true;false
5;true,false,true;tweets(C, G), recursion_accounttype(F, B).;false;false
5;false;follows(A, H), follows(H, A).;false;true
5;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
5;false,false,false;tweets(A, J), follows(K, A).;false;false
6;;accounttype(A, B) :- follows(A, C).;true;true
6;true;follows(D, C), recursion_accounttype(D, B).;true;false
6;true,true;recursion_accounttype(C, B).;true;true
6;true,true,true;follows(E, A), follows(E, D).;false;false
6;true,true,false;follows(F, A), recursion_accounttype(F, B).;false;false
6;false;follows(G, A), recursion_accounttype(G, B).;false;true
6;false,false;follows(H, A).;false;true
6;false,false,false;tweets(A, I).;false;false
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;tweets(C, D), follows(A, C).;false;false
7;false;follows(E, A).;true;true
7;false,true;follows(E, F), recursion_accounttype(F, B).;true;false
7;false,true,true;follows(F, E), follows(A, F).;false;false
7;false,false;follows(A, G), recursion_accounttype(G, B).;true;true
7;false,false,true;tweets(A, H).;false;false
7;false,false,false;follows(A, I).;false;false
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;true;follows(C, D), recursion_accounttype(D, B).;false;true
8;true,false;follows(A, E), follows(E, A).;false;false
8;false;follows(F, A), follows(A, G).;true;true
8;false,true;follows(G, A), follows(G, F).;false;true
8;false,true,false;follows(H, F), recursion_accounttype(H, B).;false;false
8;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
8;false,false,false;follows(J, A).;false;false
9;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
9;true;follows(C, D).;true;false
9;true,true;follows(A, D).;true;true
9;true,true,true;follows(E, A), recursion_accounttype(E, B).;false;false
9;true,true,false;tweets(C, F), follows(D, C).;false;false
9;false;follows(A, G), follows(H, A).;false;true
9;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
9;false,false,false;follows(J, A).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.4356367001892301;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.5949910403626703;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.5640312880406888;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.37395569825543723;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.5062567560764839;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.48074388375574334;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.7194734122109543;  // std dev = 7.30e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.30665618885999163;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.4047531668618019;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.386198448632422;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.5553664367462845;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.5553664367462846;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.20848477447886868;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.20848477447886868;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.24206322397592006;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.3261448737160187;  // std dev = 0.439, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.2788572331674748;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.4175135841583099;  // std dev = 1.49e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.41751358415830986;  // std dev = 5.16e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.17062637354018512;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.17062637354018512;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.18614898381430323;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.24558668125641064;  // std dev = 0.439, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.20966773150020385;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.32071184716014967;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.3207118471601496;  // std dev = 2.11e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.13664585375352212;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.13664585375352212;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.4135394151203006;  // std dev = 0.357, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.06353941512030048;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.18646058487969952;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.13891629954241463;  // std dev = 0.494, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.18620428986064227;  // std dev = 1.914, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.17805918236963383;  // std dev = 1.889, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.25517224256948945;  // std dev = 1.49e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.10762034996184425;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.10762034996184425;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.31058191631929993;  // std dev = 0.357, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( author(F, D), venue(F, B) )
%   | | then return -0.1296592592627378;  // std dev = 0.853, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( haswordvenue(B, C) )
%   | | | then return 0.04785303348920687;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.19126456267758712;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( haswordtitle(J, H) )
%   | | | then return 0.371227989033261;  // std dev = 1.589, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return -0.22087727412463362;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( haswordtitle(K, G) )
%   | | | then return 0.10238750736637042;  // std dev = 16.896, 1,167.000 (wgt'ed) examples reached here.  /* #neg=498 #pos=669 */
%   | | | else return 0.13874198132673535;  // std dev = 2.691, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | else return 0.1464762529608424;  // std dev = 0.381, 47.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.07964552109907701;  // std dev = 0.492, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.10779201828913959;  // std dev = 0.439, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.07885002830138077;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.199724779293594;  // std dev = 5.27e-09, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.18650788591187295;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.05439010192340451;  // std dev = 0.491, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.04992745818146301;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.05977961295915634;  // std dev = 0.492, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.08890666268458593;  // std dev = 0.439, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.05401347964566429;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.16970207840666474;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.15984650492616762;  // std dev = 2.11e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.04158341482820936;  // std dev = 0.491, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.03811175261640619;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.20251390261802477;  // std dev = 0.357, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.0011804033663802699;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.1344658597900779;  // std dev = 1.222, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(I, G) )
%   | | | then return 0.24485274863084788;  // std dev = 1.589, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return -0.2006425064085332;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( haswordtitle(J, C) )
%   | | | then return 0.042008159189367955;  // std dev = 16.896, 1,167.000 (wgt'ed) examples reached here.  /* #neg=498 #pos=669 */
%   | | | else return 0.06722890198359542;  // std dev = 2.689, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then return 0.0951218834525957;  // std dev = 0.320, 34.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=26 */
%   | else return 0.02900420093300912;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */


Results
   AUC ROC   = 0.537005
   AUC PR    = 0.343574
   CLL	      = -0.755512
   Precision = 0.35429 at threshold = 0.5
   Recall    = 0.955922
   F1        = 0.516976


Total learning time: 56.11164093017578 seconds
Total inference time: 6.818 seconds
AUC ROC: 0.537005


Results scoring model
   AUC ROC   = 0.553694
   AUC PR    = 0.662635
   CLL	      = -0.665155
   Precision = 0.594317 at threshold = 0.5
   Recall    = 0.976654
   F1        = 0.73896


Total scoring time: 1.076 seconds
Parameter learned model CLL: -0.665155


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)'}, {'true,true': [0.494, 518, 708], 'true,false,true': [0.44, 5, 14], 'true,false,false,true': [1.879, 5, 12], 'true,false,false,false': [0.0, 0, 5], 'false,true,true': [0.0, 0, 20], 'false,true,false': [0.495, 8, 6], 'false,false': [0.495, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)'}, {'true,true': [0.494, 518, 708], 'true,false,true': [0.44, 5, 14], 'true,false,false,true': [1.879, 5, 12], 'true,false,false,false': [0.0, 0, 5], 'false,true,true': [7.3e-08, 0, 20], 'false,true,false': [0.495, 8, 6], 'false,false': [0.495, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)'}, {'true,true': [0.494, 518, 708], 'true,false,true': [0.44, 5, 14], 'true,false,false,true': [1.879, 5, 12], 'true,false,false,false': [0.0, 0, 5], 'false,true,true': [0.0, 0, 20], 'false,true,false': [0.495, 8, 6], 'false,false': [0.495, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)'}, {'true,true': [0.494, 518, 708], 'true,false,true': [0.439, 5, 14], 'true,false,false,true': [1.879, 5, 12], 'true,false,false,false': [1.49e-08, 0, 5], 'false,true,true': [5.16e-08, 0, 20], 'false,true,false': [0.495, 8, 6], 'false,false': [0.495, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)'}, {'true,true': [0.494, 518, 708], 'true,false,true': [0.439, 5, 14], 'true,false,false,true': [1.879, 5, 12], 'true,false,false,false': [0.0, 0, 5], 'false,true,true': [2.11e-08, 0, 20], 'false,true,false': [0.495, 8, 6], 'false,false': [0.495, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordtitle(F, D)', 'true,true,false': 'haswordvenue(B, D)', 'true,false': 'haswordtitle(G, C)', 'true,false,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)'}, {'true,true,true': [0.357, 3, 17], 'true,true,false,true': [1.0, 2, 2], 'true,true,false,false': [1.225, 6, 2], 'true,false,true': [0.494, 507, 687], 'true,false,false,true': [1.914, 5, 14], 'true,false,false,false': [1.889, 5, 17], 'false,true,true': [1.49e-08, 0, 20], 'false,true,false': [0.495, 8, 6], 'false,false': [0.495, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(E, C)', 'true,false': 'author(F, D), venue(F, B)', 'true,false,false': 'haswordvenue(B, C)', 'false': 'haswordvenue(A, G), haswordvenue(B, G)', 'false,true': 'haswordvenue(B, H), haswordauthor(I, H)', 'false,true,true': 'haswordtitle(J, H)', 'false,true,false': 'haswordtitle(K, G)'}, {'true,true': [0.357, 3, 17], 'true,false,true': [0.853, 3, 1], 'true,false,false,true': [1.0, 2, 2], 'true,false,false,false': [0.894, 4, 1], 'false,true,true,true': [1.589, 3, 16], 'false,true,true,false': [1.225, 6, 2], 'false,true,false,true': [16.896, 498, 669], 'false,true,false,false': [2.691, 10, 31], 'false,false': [0.381, 15, 32]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)'}, {'true,true': [0.492, 518, 708], 'true,false,true': [0.439, 5, 14], 'true,false,false,true': [1.879, 5, 12], 'true,false,false,false': [5.27e-09, 0, 5], 'false,true,true': [0.0, 0, 20], 'false,true,false': [0.491, 8, 6], 'false,false': [0.495, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)'}, {'true,true': [0.492, 518, 708], 'true,false,true': [0.439, 5, 14], 'true,false,false,true': [1.879, 5, 12], 'true,false,false,false': [0.0, 0, 5], 'false,true,true': [2.11e-08, 0, 20], 'false,true,false': [0.491, 8, 6], 'false,false': [0.495, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordtitle(F, D)', 'true,true,false': 'haswordvenue(B, D)', 'true,false': 'haswordvenue(B, G), haswordauthor(H, G)', 'true,false,true': 'haswordtitle(I, G)', 'true,false,false': 'haswordtitle(J, C)', 'false': 'haswordvenue(A, K), haswordtitle(L, K)'}, {'true,true,true': [0.357, 3, 17], 'true,true,false,true': [1.0, 2, 2], 'true,true,false,false': [1.222, 6, 2], 'true,false,true,true': [1.589, 3, 16], 'true,false,true,false': [1.225, 6, 2], 'true,false,false,true': [16.896, 498, 669], 'true,false,false,false': [2.689, 10, 31], 'false,true': [0.32, 8, 26], 'false,false': [0.495, 8, 6]}]]
[{'': [0.24306651325713594, 0.22222222222222385], 'true': [0.24399564626142126, 0.1844140392623454], 'false': [0.17993079584775207, 0.24489795918367352], 'true,false': [0.19390581717451486, 0.17561983471074338], 'false,true': [-8.881784197001253e-17, 0.24489795918367352], 'true,false,false': [0.20761245674740453, 0.0]}, {'': [0.24265720194658646, 0.1968581969586748], 'true': [0.2439956462613994, 0.18151807630785105], 'false': [0.15465453537750243, 0.24489795918367324], 'true,false': [0.193905817174515, 0.17043669583228802], 'true,false,false': [0.20761245674740458, 0.0], 'false,true': [2.6645352591003756e-16, 0.24489795918367324]}, {'': [0.24225435465227543, 0.17210326137526186], 'true': [0.2439956462614137, 0.17873720595178572], 'true,false': [0.1939058171745152, 0.16545366223293648], 'false': [0.1299852570106417, 0.2448979591836735], 'true,false,false': [0.20761245674740486, -4.4408920985006264e-17], 'false,true': [-2.6645352591003756e-16, 0.2448979591836735]}, {'': [0.24201842021934108, 0.1576721797796284], 'true': [0.24399564626139422, 0.17736162471011832], 'true,false': [0.19292616712175495, 0.16380420131299045], 'true,false,false': [0.20761245674740472, 4.4408920985006264e-17], 'false': [0.11560410995340124, 0.24489795918367352], 'false,true': [1.3322676295501878e-16, 0.24489795918367352]}, {'': [0.24190718913604425, 0.1510919355481629], 'true': [0.24399564626140396, 0.17666622133125584], 'true,false': [0.1928999136805661, 0.16259333977574142], 'true,false,false': [0.20761245674740483, -2.2204460492503132e-17], 'false': [0.10904663473311735, 0.24489795918367335], 'false,true': [2.2204460492503132e-17, 0.24489795918367335]}, {'': [0.24186003358722968, 0.14814884171425], 'true': [0.2255859375, 0.24212229054901616], 'true,false': [0.2443183252948157, 0.17638871506620232], 'true,true': [0.12749999999999997, 0.22222222222222213], 'true,true,false': [0.25, 0.18749999999999994], 'true,false,false': [0.19280906941022036, 0.16217675573762705], 'false': [0.10611372461489284, 0.24489795918367338], 'false,true': [1.1102230246251566e-17, 0.24489795918367338]}, {'': [0.19790917593286098, 0.23860006635931819], 'false': [0.2421082460736928, 0.14481030016296026], 'false,true': [0.2222222222222223, 0.24236699912063894], 'false,true,false': [0.2446322717930756, 0.1766128132594272], 'false,true,true': [0.13296398891966774, 0.1875], 'true': [0.1275, 0.20469166425489876], 'true,false': [0.18210139749462748, 0.21411783328310763], 'true,false,false': [0.25, 0.15999999999999998]}, {'': [0.2398082581713773, 0.14620697352472026], 'true': [0.24188978005153988, 0.17684146495243802], 'true,false': [0.1928745158556317, 0.16299373715880355], 'true,false,false': [0.20761245674740486, 5.551115123125783e-18], 'false': [0.10359977127350475, 0.24489795918367338], 'false,true': [0.0, 0.24133173343547232]}, {'': [0.23979948476101415, 0.14530322023756448], 'true': [0.2418935047277024, 0.176601773735891], 'true,false': [0.19256823865077646, 0.16277827734216635], 'true,false,false': [0.20761245674740483, 0.0], 'false': [0.10273770367742778, 0.2448979591836735], 'false,true': [2.2204460492503132e-17, 0.2412786997412637]}, {'': [0.23979516231767273, 0.14468897508126743], 'true': [0.17908164972530702, 0.2413083857459336], 'true,false': [0.1905039255139989, 0.24233682101958337], 'true,false,false': [0.2446322717930755, 0.1763859570213816], 'true,false,true': [0.13296398891966757, 0.18749999999999997], 'true,true': [0.12749999999999995, 0.21184704662985765], 'true,true,false': [0.24999999999999994, 0.1866372670420161], 'false': [0.102151417399224, 0.24489795918367344]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,false;haswordvenue(A, E), haswordtitle(F, E).;true;true
0;true,false,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
0;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
0;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,false;haswordvenue(A, E), haswordtitle(F, E).;true;true
1;true,false,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
1;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,false;haswordvenue(A, E), haswordtitle(F, E).;true;true
2;true,false,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
2;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
2;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,false;haswordvenue(B, E), haswordtitle(F, E).;true;true
3;true,false,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
3;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
3;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,false;haswordvenue(B, E), haswordtitle(F, E).;true;true
4;true,false,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
4;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;false;haswordvenue(A, J), haswordtitle(K, J).;true;true
5;false,true;haswordtitle(K, L), haswordvenue(B, L).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,false;haswordvenue(A, E), haswordtitle(F, E).;true;true
7;true,false,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
7;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
7;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,false;haswordvenue(B, E), haswordtitle(F, E).;true;true
8;true,false,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
8;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
8;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.4356367001892301;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.5949910403626703;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.5640312880406888;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.37395569825543723;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.5062567560764839;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.48074388375574334;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.7194734122109543;  // std dev = 7.30e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.30665618885999163;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.4047531668618019;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.386198448632422;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.5553664367462845;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.5553664367462846;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.20848477447886868;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.20848477447886868;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.5145754588862081;  // std dev = 0.357, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(A, C) )
%   | | then return 0.16457545888620817;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return -0.10459348710461978;  // std dev = 0.412, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( haswordtitle(H, F) )
%   | | then return 0.506680722044103;  // std dev = 0.365, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | else if ( author(I, G), venue(I, B) )
%   | | | then return -0.06605466959315473;  // std dev = 0.846, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.13542454111379182;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, J), haswordvenue(B, J) )
%   | | then if ( haswordtitle(K, J) )
%   | | | then return 0.2378402403772003;  // std dev = 16.896, 1,167.000 (wgt'ed) examples reached here.  /* #neg=498 #pos=669 */
%   | | | else return 0.3176803289083651;  // std dev = 2.697, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | | else return 0.29660217939899747;  // std dev = 0.390, 46.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.18611670071329237;  // std dev = 0.492, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.23092205887351938;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.2187160461502649;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.34283877009388486;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return 0.34760329138589346;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.11566944880111067;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.11516456080452613;  // std dev = 0.491, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.14104493789017414;  // std dev = 0.492, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.19282710286472673;  // std dev = 0.439, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.14257313666544613;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.2702197621296448;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return 0.27344885943402975;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.09033288533942947;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.08991117302831021;  // std dev = 0.491, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.3124494441598763;  // std dev = 0.357, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.04785663157997068;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return -0.15224266869676611;  // std dev = 0.410, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then if ( haswordtitle(H, F) )
%   | | then return 0.30269078826508783;  // std dev = 0.365, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | else if ( author(I, G), venue(I, A) )
%   | | | then return -0.10948553188602811;  // std dev = 0.839, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.18670515897967704;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, J), haswordvenue(B, J) )
%   | | then if ( haswordtitle(K, J) )
%   | | | then return 0.10291732777717473;  // std dev = 16.896, 1,167.000 (wgt'ed) examples reached here.  /* #neg=498 #pos=669 */
%   | | | else return 0.1390476838613453;  // std dev = 2.691, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | | else return 0.15144878424250444;  // std dev = 0.380, 46.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.23628984123760968;  // std dev = 0.357, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.03597713775472887;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, B) )
%   | | | then return -0.08393804313984334;  // std dev = 0.840, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.14428487734452705;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( haswordtitle(J, H) )
%   | | | then return 0.22893062107953305;  // std dev = 1.589, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return -0.1000719036547083;  // std dev = 1.221, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( haswordtitle(K, G) )
%   | | | then return 0.07722275030076299;  // std dev = 16.896, 1,167.000 (wgt'ed) examples reached here.  /* #neg=498 #pos=669 */
%   | | | else return 0.10724644376806645;  // std dev = 2.693, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | else return 0.11230724026660546;  // std dev = 0.381, 47.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.0599382034985802;  // std dev = 0.491, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.0876331718727926;  // std dev = 0.439, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.05034477691378896;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.18093556644409103;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.18028775586284462;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.014293966287342835;  // std dev = 0.486, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.01132591104610565;  // std dev = 0.487, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04506417906587325;  // std dev = 0.491, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.06801038201300402;  // std dev = 0.439, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.03899856225590824;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.15564998218276127;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.15516046182699114;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.010854991271137438;  // std dev = 0.485, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.008586310772525798;  // std dev = 0.487, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */


Results
   AUC ROC   = 0.535858
   AUC PR    = 0.344383
   CLL	      = -0.757944
   Precision = 0.35357 at threshold = 0.5
   Recall    = 0.956812
   F1        = 0.516338


Total learning time: 49.95832920074463 seconds
Total inference time: 5.926 seconds
AUC ROC: 0.535858


Results scoring model
   AUC ROC   = 0.553933
   AUC PR    = 0.664094
   CLL	      = -0.664404
   Precision = 0.594317 at threshold = 0.5
   Recall    = 0.976654
   F1        = 0.73896


Total scoring time: 1.182 seconds
Refined model CLL: -0.664404


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.535858
   AUC PR    = 0.344383
   CLL	      = -0.757944
   Precision = 0.35357 at threshold = 0.5
   Recall    = 0.956812
   F1        = 0.516338


Total learning time: 108.3279701309204 seconds
Total inference time: 5.926 seconds
AUC ROC: 0.535858
Total revision time: 108.3279701309204
Best scored revision CLL: -0.664404


Dataset: 13_twitter_cora, Fold: 2, Type: Transfer (trRDN-B), Time: 00:16:21
{'AUC ROC': 0.535858, 'AUC PR': 0.344383, 'CLL': -0.757944, 'Precision': [0.35357, 0.5], 'Recall': 0.956812, 'F1': 0.516338, 'Learning time': 108.3279701309204, 'Inference time': 5.926, 'parameter': {'AUC ROC': 0.537005, 'AUC PR': 0.343574, 'CLL': -0.755512, 'Precision': [0.35429, 0.5], 'Recall': 0.955922, 'F1': 0.516976, 'Learning time': 56.11164093017578, 'Inference time': 6.818}}


Starting fold 3

Target train facts examples: 9306
Target train pos examples: 581
Target train neg examples: 2222

Target test facts examples: 33252
Target test pos  examples: 2436
Target test neg examples: 2800

******************************************
Performing Parameter Learning
******************************************
Refine
0;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
0;true;follows(A, D).;false;false
0;false;follows(A, E), recursion_accounttype(E, B).;true;true
0;false,true;follows(A, F), follows(F, A).;false;true
0;false,true,false;follows(A, G), follows(G, E).;false;false
0;false,false;follows(H, A).;true;true
0;false,false,true;follows(I, H), follows(I, A).;false;false
0;false,false,false;follows(A, J), follows(J, K).;false;false
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;true;follows(A, C), tweets(A, D).;false;false
1;false;follows(A, E), recursion_accounttype(E, B).;true;true
1;false,true;tweets(A, F), tweets(E, F).;false;true
1;false,true,false;follows(G, A), follows(E, H).;false;false
1;false,false;follows(I, A).;true;true
1;false,false,true;follows(I, J), recursion_accounttype(J, B).;false;false
1;false,false,false;tweets(A, K).;false;false
2;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;true;follows(C, D), follows(D, A).;false;false
2;false;follows(E, A).;true;true
2;false,true;follows(F, E), follows(F, A).;false;true
2;false,true,false;follows(E, G), recursion_accounttype(G, B).;false;false
2;false,false;follows(A, H), follows(H, I).;true;true
2;false,false,true;recursion_accounttype(I, B).;false;false
2;false,false,false;follows(A, J).;false;false
3;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
3;true;tweets(A, D), tweets(C, D).;false;false
3;false;follows(E, A).;true;true
3;false,true;follows(F, E), recursion_accounttype(F, B).;true;false
3;false,true,true;follows(A, G), recursion_accounttype(G, B).;false;false
3;false,false;follows(A, H), recursion_accounttype(H, B).;true;true
3;false,false,true;follows(A, I), follows(I, H).;false;false
3;false,false,false;tweets(A, J), follows(A, K).;false;false
4;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
4;true;follows(A, D), follows(D, C).;true;false
4;true,true;follows(D, A).;false;true
4;true,true,false;tweets(A, E).;false;false
4;false;follows(F, A).;false;true
4;false,false;follows(A, G), recursion_accounttype(G, B).;true;true
4;false,false,true;follows(G, H), follows(H, G).;false;false
4;false,false,false;follows(A, I), follows(I, J).;false;false
5;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
5;true;follows(D, A), tweets(D, E).;true;true
5;true,true;recursion_accounttype(D, B).;false;false
5;true,false;follows(C, F), follows(F, C).;true;false
5;true,false,true;tweets(C, G), recursion_accounttype(F, B).;false;false
5;false;follows(A, H), follows(H, A).;false;true
5;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
5;false,false,false;tweets(A, J), follows(K, A).;false;false
6;;accounttype(A, B) :- follows(A, C).;true;true
6;true;follows(D, C), recursion_accounttype(D, B).;true;false
6;true,true;recursion_accounttype(C, B).;true;true
6;true,true,true;follows(E, A), follows(E, D).;false;false
6;true,true,false;follows(F, A), recursion_accounttype(F, B).;false;false
6;false;follows(G, A), recursion_accounttype(G, B).;false;true
6;false,false;follows(H, A).;false;true
6;false,false,false;tweets(A, I).;false;false
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;tweets(C, D), follows(A, C).;false;false
7;false;follows(E, A).;true;true
7;false,true;follows(E, F), recursion_accounttype(F, B).;true;false
7;false,true,true;follows(F, E), follows(A, F).;false;false
7;false,false;follows(A, G), recursion_accounttype(G, B).;true;true
7;false,false,true;tweets(A, H).;false;false
7;false,false,false;follows(A, I).;false;false
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;true;follows(C, D), recursion_accounttype(D, B).;false;true
8;true,false;follows(A, E), follows(E, A).;false;false
8;false;follows(F, A), follows(A, G).;true;true
8;false,true;follows(G, A), follows(G, F).;false;true
8;false,true,false;follows(H, F), recursion_accounttype(H, B).;false;false
8;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
8;false,false,false;follows(J, A).;false;false
9;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
9;true;follows(C, D).;true;false
9;true,true;follows(A, D).;true;true
9;true,true,true;follows(E, A), recursion_accounttype(E, B).;false;false
9;true,true,false;tweets(C, F), follows(D, C).;false;false
9;false;follows(A, G), follows(H, A).;false;true
9;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
9;false,false,false;follows(J, A).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.21836043542997663;  // std dev = 0.480, 1,513.000 (wgt'ed) examples reached here.  /* #neg=968 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.5538011090125557;  // std dev = 2.207, 23.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=16 */
%   | | | else return -0.14185106490048766;  // std dev = 7.45e-08, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
%   | | else return 0.10814893509951218;  // std dev = 0.433, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return 0.011995088945666036;  // std dev = 0.361, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | | else return 0.011995088945666216;  // std dev = 0.361, 104.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=16 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1939850899693494;  // std dev = 0.481, 1,495.000 (wgt'ed) examples reached here.  /* #neg=950 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return -0.03462430538866561;  // std dev = 0.288, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return -0.023567752857426464;  // std dev = 0.321, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.026895264522815963;  // std dev = 3.644, 94.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=16 */
%   | | | else return 0.008683716844865056;  // std dev = 3.388, 103.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=16 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.15572959720485252;  // std dev = 0.479, 1,533.000 (wgt'ed) examples reached here.  /* #neg=988 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return -0.020734473095891374;  // std dev = 0.321, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then if ( title(H, G), venue(H, A) )
%   | | | then return 0.04387727001397741;  // std dev = 3.279, 81.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=16 */
%   | | | else return -0.045579511300618956;  // std dev = 1.323, 21.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=2 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.01845234879661357;  // std dev = 3.655, 97.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=16 */
%   | | | else return -0.1426308776693914;  // std dev = 0.004, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.12920415518980904;  // std dev = 0.479, 1,535.000 (wgt'ed) examples reached here.  /* #neg=990 #pos=545 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.5797986498490973;  // std dev = 2.088, 22.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return -0.1473887148962806;  // std dev = 0.029, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   | | else if ( title(H, E), venue(H, A) )
%   | | | then return -0.14897572277960072;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.0510242772203993;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.04344251368304446;  // std dev = 3.249, 80.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=16 */
%   | | | else return -0.05902975894353018;  // std dev = 1.341, 25.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=2 */
%   | | else return -0.12764404304153176;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C) )
%   | | then return 0.12576953980513444;  // std dev = 0.484, 40.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=15 */
%   | | else return 0.08410287313846797;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return 0.11260264514030593;  // std dev = 0.481, 1,462.000 (wgt'ed) examples reached here.  /* #neg=933 #pos=529 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then return -0.037594331047930765;  // std dev = 0.273, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.01206589896170613;  // std dev = 3.299, 93.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=16 */
%   | | | else return -0.03608506278785116;  // std dev = 1.329, 21.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=2 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.0025086313865532953;  // std dev = 3.372, 100.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=16 */
%   | | | else return -0.1140931979815996;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.3297830216742689;  // std dev = 1.094, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.03143682554510505;  // std dev = 0.459, 43.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=13 */
%   | else return 0.07798701199781588;  // std dev = 0.477, 1,516.000 (wgt'ed) examples reached here.  /* #neg=987 #pos=529 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then return -0.01541299131927574;  // std dev = 0.307, 15.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return 0.032861196463518726;  // std dev = 0.336, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.007422445317175238;  // std dev = 3.348, 98.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=16 */
%   | | | else return 0.002304821574859986;  // std dev = 3.360, 103.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=16 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07002133483882776;  // std dev = 0.479, 1,528.000 (wgt'ed) examples reached here.  /* #neg=983 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.4531860549288379;  // std dev = 2.206, 23.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=16 */
%   | | | else return -0.13328970512359828;  // std dev = 0.081, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
%   | | else return 0.08236053698459557;  // std dev = 0.416, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return 0.015643626332933012;  // std dev = 3.297, 93.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=16 */
%   | | | else return -0.06537626269716425;  // std dev = 1.342, 25.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=2 */
%   | | else return -0.10327216739115098;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06035677328323042;  // std dev = 0.480, 1,508.000 (wgt'ed) examples reached here.  /* #neg=963 #pos=545 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.5607785593354081;  // std dev = 1.785, 20.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=16 */
%   | | | else return -0.13164881442145102;  // std dev = 0.033, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   | | else if ( title(H, E), venue(H, A) )
%   | | | then return -0.1243141225800911;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0.05222954634924419;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 6.189786457925536E-4;  // std dev = 2.966, 92.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=16 */
%   | | | else return -0.0408696018487412;  // std dev = 1.326, 22.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
%   | | else return -0.09596173142162039;  // std dev = 0.018, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04813335536147885;  // std dev = 0.481, 1,505.000 (wgt'ed) examples reached here.  /* #neg=960 #pos=545 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.3099808407874318;  // std dev = 2.316, 24.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=16 */
%   | | | else return -0.11607944607506714;  // std dev = 0.036, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
%   | | else return 0.09553033134887068;  // std dev = 0.433, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return -0.0036116032791076525;  // std dev = 2.963, 97.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=16 */
%   | | | else return -0.04152106278991302;  // std dev = 1.327, 25.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=2 */
%   | | else return -0.09042853467624258;  // std dev = 0.015, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.02899226034637273;  // std dev = 0.478, 1,542.000 (wgt'ed) examples reached here.  /* #neg=997 #pos=545 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.2663002173796055;  // std dev = 2.206, 23.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=16 */
%   | | | else return -0.10516128466550509;  // std dev = 0.030, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | | else return 0.08263745788691591;  // std dev = 0.433, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return -0.0019331611401265795;  // std dev = 2.997, 91.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=16 */
%   | | | else return -0.024648926724446945;  // std dev = 1.325, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | | else return -0.0784928499465333;  // std dev = 0.004, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */


Results
   AUC ROC   = 0.562489
   AUC PR    = 0.506569
   CLL	      = -0.709698
   Precision = 0.591837 at threshold = 0.5
   Recall    = 0.011905
   F1        = 0.02334


Total learning time: 39.34383249282837 seconds
Total inference time: 4.486 seconds
AUC ROC: 0.562489


Results scoring model
   AUC ROC   = 0.588691
   AUC PR    = 0.271202
   CLL	      = -0.513939
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 1.422 seconds
Parameter learned model CLL: -0.513939


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordtitle(E, D)', 'false,true': 'title(F, E), venue(F, B)', 'false,true,true': 'samebib(F, G), venue(G, A)', 'false,false': 'haswordvenue(A, H), haswordauthor(I, H)'}, {'true': [0.48, 968, 545], 'false,true,true,true': [2.207, 7, 16], 'false,true,true,false': [7.45e-08, 77, 0], 'false,true,false': [0.433, 6, 2], 'false,false,true': [0.361, 11, 2], 'false,false,false': [0.361, 88, 16]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(A, F), haswordauthor(G, F)', 'false,false,false': 'haswordvenue(B, H), haswordtitle(I, H)'}, {'true': [0.481, 950, 545], 'false,true': [0.288, 16, 2], 'false,false,true': [0.321, 15, 2], 'false,false,false,true': [3.644, 78, 16], 'false,false,false,false': [3.388, 87, 16]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(A, F), haswordtitle(G, F)', 'false,false,true': 'title(H, G), venue(H, A)', 'false,false,false': 'haswordvenue(B, I), haswordtitle(J, I)'}, {'true': [0.479, 988, 545], 'false,true': [0.321, 15, 2], 'false,false,true,true': [3.279, 65, 16], 'false,false,true,false': [1.323, 19, 2], 'false,false,false,true': [3.655, 81, 16], 'false,false,false,false': [0.004, 3, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordtitle(E, D)', 'false,true': 'title(F, E), venue(F, B)', 'false,true,true': 'samebib(F, G), venue(G, A)', 'false,true,false': 'title(H, E), venue(H, A)', 'false,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,false,true': 'title(K, J), venue(K, A)'}, {'true': [0.479, 990, 545], 'false,true,true,true': [2.088, 6, 16], 'false,true,true,false': [0.029, 63, 0], 'false,true,false,true': [0.0, 6, 0], 'false,true,false,false': [1.265, 8, 2], 'false,false,true,true': [3.249, 64, 16], 'false,false,true,false': [1.341, 23, 2], 'false,false,false': [0.0, 3, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordtitle(F, C)', 'false': 'haswordvenue(A, G), haswordauthor(H, G)', 'false,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,false,true': 'title(K, J), venue(K, A)', 'false,false,false': 'haswordvenue(B, L), haswordtitle(M, L)'}, {'true,true,true': [0.484, 25, 15], 'true,true,false': [0.816, 2, 1], 'true,false': [0.481, 933, 529], 'false,true': [0.273, 18, 2], 'false,false,true,true': [3.299, 77, 16], 'false,false,true,false': [1.329, 19, 2], 'false,false,false,true': [3.372, 84, 16], 'false,false,false,false': [0.0, 3, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordvenue(B, D)', 'false': 'haswordvenue(B, F), haswordauthor(G, F)', 'false,false': 'haswordvenue(A, H), haswordauthor(I, H)', 'false,false,false': 'haswordvenue(A, J), haswordtitle(K, J)'}, {'true,true,true': [1.094, 2, 3], 'true,true,false': [0.459, 30, 13], 'true,false': [0.477, 987, 529], 'false,true': [0.307, 13, 2], 'false,false,true': [0.336, 10, 2], 'false,false,false,true': [3.348, 82, 16], 'false,false,false,false': [3.36, 87, 16]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordtitle(E, D)', 'false,true': 'title(F, E), venue(F, B)', 'false,true,true': 'samebib(F, G), venue(G, A)', 'false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false,false,true': 'title(J, I), venue(J, B)'}, {'true': [0.479, 983, 545], 'false,true,true,true': [2.206, 7, 16], 'false,true,true,false': [0.081, 74, 0], 'false,true,false': [0.416, 7, 2], 'false,false,true,true': [3.297, 77, 16], 'false,false,true,false': [1.342, 23, 2], 'false,false,false': [0.0, 3, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordtitle(E, D)', 'false,true': 'title(F, E), venue(F, B)', 'false,true,true': 'samebib(F, G), venue(G, A)', 'false,true,false': 'title(H, E), venue(H, A)', 'false,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,false,true': 'title(K, J), venue(K, A)'}, {'true': [0.48, 963, 545], 'false,true,true,true': [1.785, 4, 16], 'false,true,true,false': [0.033, 64, 0], 'false,true,false,true': [0.0, 9, 0], 'false,true,false,false': [1.265, 8, 2], 'false,false,true,true': [2.966, 76, 16], 'false,false,true,false': [1.326, 20, 2], 'false,false,false': [0.018, 7, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordtitle(E, D)', 'false,true': 'title(F, E), venue(F, A)', 'false,true,true': 'samebib(F, G), venue(G, B)', 'false,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'false,false,true': 'title(J, I), venue(J, A)'}, {'true': [0.481, 960, 545], 'false,true,true,true': [2.316, 8, 16], 'false,true,true,false': [0.036, 74, 0], 'false,true,false': [0.433, 6, 2], 'false,false,true,true': [2.963, 81, 16], 'false,false,true,false': [1.327, 23, 2], 'false,false,false': [0.015, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordtitle(E, D)', 'false,true': 'title(F, E), venue(F, A)', 'false,true,true': 'samebib(F, G), venue(G, B)', 'false,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'false,false,true': 'title(J, I), venue(J, A)'}, {'true': [0.478, 997, 545], 'false,true,true,true': [2.206, 7, 16], 'false,true,true,false': [0.03, 69, 0], 'false,true,false': [0.433, 6, 2], 'false,false,true,true': [2.997, 75, 16], 'false,false,true,false': [1.325, 17, 2], 'false,false,false': [0.004, 5, 0]}]]
[{'': [0.230459175360128, 0.13440000000000107], 'false': [0.13888888888888834, 0.13017751479289885], 'false,true': [0.13439999999999946, 0.18750000000000003], 'false,true,true': [0.21172022684309977, 7.209240419643874e-17], 'false,false': [0.13017751479289943, 0.13017751479289885]}, {'': [0.23165288978869442, 0.12104160093823654], 'false': [0.0827729217194056, 0.12407610772111068], 'false,false': [0.10334463762492752, 0.12573196291300615], 'false,false,false': [0.14124038026256172, 0.11142039575819483]}, {'': [0.22912323746036262, 0.1271967122655785], 'false': [0.10335199457427685, 0.12907716933747873], 'false,false': [0.12387271821081973, 0.13431492454727242], 'false,false,false': [0.13769036944825486, 6.167742269365395e-06], 'false,false,true': [0.13272436920563557, 0.08337569684561102]}, {'': [0.2289891669938139, 0.13120191951537602], 'false': [0.14643492527697802, 0.11683879292288087], 'false,true': [0.15274571248213392, 0.10937500000000006], 'false,true,true': [0.1981793710980198, 1.3729298767135613e-05], 'false,false': [0.11957933621341943, -2.3129646346357427e-18], 'false,false,true': [0.13196928616284656, 0.0719310646363919], 'false,true,false': [0.0, 0.16000000000000006]}, {'': [0.23099082791580336, 0.10808216035356936], 'true': [0.23363980530016262, 0.23090990921867113], 'true,true': [0.23437500000000036, 0.22222222222222224], 'false': [0.07433358409329206, 0.11106524575750262], 'false,false': [0.11132204144363875, 0.1107722650654714], 'false,false,true': [0.11704851118294742, 0.08407054094219914], 'false,false,false': [0.1136994334073773, -2.3129646346357427e-18]}, {'': [0.22703962396406943, 0.11089182214202235], 'true': [0.22219292948667238, 0.22718573408812165], 'true,true': [0.23936010411613454, 0.21092482422931302], 'false': [0.09452911179778038, 0.11201287743225977], 'false,false': [0.11289135834394809, 0.11191606845628273], 'false,false,false': [0.11436165611494283, 0.10957642935591805]}, {'': [0.22943957922363756, 0.11172407492468102], 'false': [0.11805187828357809, 0.10605635784509551], 'false,true': [0.11247044441276324, 0.17283950617283947], 'false,true,true': [0.21164584808500514, 8.959705326642712e-05], 'false,false': [0.1084960155853175, -2.3129646346357427e-18], 'false,false,true': [0.11691120132365078, 0.07201802730892301]}, {'': [0.2306748990964771, 0.10271761725242012], 'false': [0.11947566890010501, 0.08792693244563314], 'false,true': [0.12492465877249158, 0.09198085881859493], 'false,true,true': [0.15933117273842917, 1.6511746749763023e-05], 'false,true,false': [-6.1679056923619804e-18, 0.16000000000000006], 'false,false': [0.0928691861894957, 4.728631042088697e-05], 'false,false,true': [0.09563717579168438, 0.07990483578035235]}, {'': [0.23093978111220964, 0.08982706110564637], 'false': [0.09660745965484649, 0.0840749417169651], 'false,true': [0.08831924328247509, 0.18750000000000003], 'false,true,true': [0.22350976071089565, 1.7988093135483122e-05], 'false,false': [0.08663138873053731, 5.299754351139295e-05], 'false,false,true': [0.0905077617273046, 0.07044842764505485]}, {'': [0.22846701883313913, 0.09110950137279338], 'false': [0.08814320573194381, 0.09368023422799157], 'false,false': [0.09770889817464133, 3.02184925878371e-06], 'false,false,true': [0.09871571560191325, 0.09245989490597743], 'false,true': [0.07878249695702189, 0.1875], 'false,true,true': [0.21160373570529084, 1.2838832196485354e-05]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;false;haswordvenue(A, D), haswordtitle(E, D).;true;true
0;false,true;title(F, E), venue(F, B).;true;true
0;false,true,true;samebib(F, G), venue(G, A).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
2;false,false;haswordvenue(A, F), haswordtitle(G, F).;true;true
2;false,false,false;haswordvenue(B, I), haswordtitle(J, I).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
3;false,true;title(F, E), venue(F, B).;true;true
3;false,true,true;samebib(F, G), venue(G, A).;true;true
3;false,true,false;title(H, E), venue(H, A).;true;true
3;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;false;haswordvenue(A, G), haswordauthor(H, G).;true;true
4;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;true
4;false,false,false;haswordvenue(B, L), haswordtitle(M, L).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;false;haswordvenue(A, D), haswordtitle(E, D).;true;true
6;false,true;title(F, E), venue(F, B).;true;true
6;false,true,true;samebib(F, G), venue(G, A).;true;true
6;false,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
7;false,true;title(F, E), venue(F, B).;true;true
7;false,true,true;samebib(F, G), venue(G, A).;true;true
7;false,true,false;title(H, E), venue(H, A).;true;true
7;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
8;false,true;title(F, E), venue(F, A).;true;true
8;false,true,true;samebib(F, G), venue(G, B).;true;true
8;false,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
9;false,true;title(F, E), venue(F, A).;true;true
9;false,true,true;samebib(F, G), venue(G, B).;true;true
9;false,false;haswordvenue(A, H), haswordtitle(I, H).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.4581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.14075763075168626;  // std dev = 0.450, 46.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=13 */
%   | else return 0.22348042681221456;  // std dev = 0.482, 1,448.000 (wgt'ed) examples reached here.  /* #neg=919 #pos=529 */
%   else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | then if ( title(I, H), venue(I, A) )
%   | | then if ( samebib(I, J), venue(J, B) )
%   | | | then return 0.7470378239884012;  // std dev = 1.333, 18.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=16 */
%   | | | else return -0.14185106490048766;  // std dev = 6.99e-08, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
%   | | else return 0.1438632208137979;  // std dev = 0.452, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then if ( title(M, L), venue(M, A) )
%   | | | then return 0.04205698107652387;  // std dev = 3.614, 87.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=16 */
%   | | | else return -0.05489454316135737;  // std dev = 1.351, 23.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=2 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.18098590078056953;  // std dev = 0.478, 1,548.000 (wgt'ed) examples reached here.  /* #neg=1,003 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return -0.04164727165966202;  // std dev = 0.298, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then if ( title(H, G), venue(H, A) )
%   | | | then return 0.037162376945703623;  // std dev = 3.380, 76.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=14 */
%   | | | else return -0.030036087218843783;  // std dev = 1.338, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | | else return 0.012373979216715519;  // std dev = 0.330, 109.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=18 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.18026034170175984;  // std dev = 0.481, 43.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=16 */
%   | else return 0.16355495975833712;  // std dev = 0.481, 1,461.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=529 */
%   else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | then if ( title(H, G), venue(H, B) )
%   | | then if ( samebib(H, I), venue(I, A) )
%   | | | then return 0.46623621037959223;  // std dev = 2.089, 22.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return -0.1266280989486042;  // std dev = 0.008, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | | else if ( title(J, G), venue(J, A) )
%   | | | then return -0.12680847012305138;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return -0.019096564969972814;  // std dev = 1.309, 14.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then if ( title(M, L), venue(M, A) )
%   | | | then return 0.01949209398444628;  // std dev = 3.645, 94.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=16 */
%   | | | else return -0.036585461755252895;  // std dev = 1.345, 21.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=2 */
%   | | else return -0.12583145959479636;  // std dev = 0.005, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.3272282098431609;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.0878231226880461;  // std dev = 0.459, 43.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=13 */
%   | else return 0.1254263277969903;  // std dev = 0.477, 1,506.000 (wgt'ed) examples reached here.  /* #neg=977 #pos=529 */
%   else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | then if ( title(I, H), venue(I, A) )
%   | | then if ( samebib(I, J), venue(J, B) )
%   | | | then return 0.6893881158234834;  // std dev = 1.586, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return -0.15268893481841567;  // std dev = 0.028, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | | else return -0.036783506812443356;  // std dev = 0.287, 22.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( title(M, L), venue(M, B) )
%   | | | then return 0.0017536862000155802;  // std dev = 2.852, 94.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=16 */
%   | | | else return -0.040994640696493216;  // std dev = 1.318, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | | else return -0.11351708031088233;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.25777097068423227;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.06578410414794077;  // std dev = 0.456, 44.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=13 */
%   | else return 0.11233164987581891;  // std dev = 0.480, 1,466.000 (wgt'ed) examples reached here.  /* #neg=937 #pos=529 */
%   else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | then if ( title(I, H), venue(I, A) )
%   | | then if ( samebib(I, J), venue(J, B) )
%   | | | then return 0.5356604284447367;  // std dev = 1.786, 20.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=16 */
%   | | | else return -0.1342024296282618;  // std dev = 0.025, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
%   | | else return -0.03669466607259079;  // std dev = 0.282, 23.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=2 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( title(M, L), venue(M, A) )
%   | | | then return -0.004999247661420295;  // std dev = 2.863, 100.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=16 */
%   | | | else return 0.046037420156824146;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else return -0.10177383311875247;  // std dev = 0.004, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09419617393608949;  // std dev = 0.481, 1,497.000 (wgt'ed) examples reached here.  /* #neg=952 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.3805212084037007;  // std dev = 1.956, 21.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=16 */
%   | | | else return -0.11915955857277483;  // std dev = 0.025, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
%   | | else return 0.06208868709583875;  // std dev = 0.386, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return -0.002089738938825294;  // std dev = 2.907, 91.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=16 */
%   | | | else return -0.04820901252237796;  // std dev = 1.322, 22.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
%   | | else return -0.09269074039690621;  // std dev = 0.004, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0746512856875569;  // std dev = 0.481, 1,499.000 (wgt'ed) examples reached here.  /* #neg=954 #pos=545 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.336647621774454;  // std dev = 2.207, 23.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=16 */
%   | | | else return -0.11172628071502383;  // std dev = 0.025, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
%   | | else return 0.06854229737012164;  // std dev = 0.416, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return -0.03163863764419938;  // std dev = 2.606, 100.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=16 */
%   | | | else return 0.07357067476572007;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else return -0.08518456255798398;  // std dev = 0.004, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05402439581482469;  // std dev = 0.479, 1,522.000 (wgt'ed) examples reached here.  /* #neg=977 #pos=545 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then return -0.012332424900046936;  // std dev = 0.261, 100.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=16 */
%   | | else return 0.03719219875171857;  // std dev = 0.400, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return -0.030409235905082318;  // std dev = 0.254, 14.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | | else return -0.016678816141585;  // std dev = 0.273, 100.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=16 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04660461823313402;  // std dev = 0.481, 1,503.000 (wgt'ed) examples reached here.  /* #neg=958 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.3393853604710102;  // std dev = 1.784, 20.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=16 */
%   | | | else return -0.10278858318968369;  // std dev = 0.022, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
%   | | else return 0.08937480492511853;  // std dev = 0.416, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return -0.0023817327718167647;  // std dev = 2.597, 91.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=16 */
%   | | | else return -0.04201679761488817;  // std dev = 1.305, 23.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=2 */
%   | | else return -0.0776582812280983;  // std dev = 0.004, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.03227270184169614;  // std dev = 0.479, 1,521.000 (wgt'ed) examples reached here.  /* #neg=976 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.21541295517602338;  // std dev = 1.958, 21.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=16 */
%   | | | else return -0.09338485194936581;  // std dev = 0.022, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   | | else return 0.03833288486780345;  // std dev = 0.386, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | else return -0.016734127312203133;  // std dev = 0.277, 115.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=18 */


Results
   AUC ROC   = 0.56427
   AUC PR    = 0.507934
   CLL	      = -0.70572
   Precision = 0.539683 at threshold = 0.5
   Recall    = 0.027915
   F1        = 0.053084


Total learning time: 49.86934685707092 seconds
Total inference time: 5.525 seconds
AUC ROC: 0.56427


Results scoring model
   AUC ROC   = 0.592835
   AUC PR    = 0.27622
   CLL	      = -0.512068
   Precision = 0.592593 at threshold = 0.5
   Recall    = 0.027539
   F1        = 0.052632


Total scoring time: 1.597 seconds
Refined model CLL: -0.512068


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.56427
   AUC PR    = 0.507934
   CLL	      = -0.70572
   Precision = 0.539683 at threshold = 0.5
   Recall    = 0.027915
   F1        = 0.053084


Total learning time: 92.23217934989928 seconds
Total inference time: 5.525 seconds
AUC ROC: 0.56427
Total revision time: 92.23217934989928
Best scored revision CLL: -0.512068


Dataset: 13_twitter_cora, Fold: 3, Type: Transfer (trRDN-B), Time: 00:18:04
{'AUC ROC': 0.56427, 'AUC PR': 0.507934, 'CLL': -0.70572, 'Precision': [0.539683, 0.5], 'Recall': 0.027915, 'F1': 0.053084, 'Learning time': 92.23217934989928, 'Inference time': 5.525, 'parameter': {'AUC ROC': 0.562489, 'AUC PR': 0.506569, 'CLL': -0.709698, 'Precision': [0.591837, 0.5], 'Recall': 0.011905, 'F1': 0.02334, 'Learning time': 39.34383249282837, 'Inference time': 4.486}}


Starting fold 4

Target train facts examples: 8129
Target train pos examples: 747
Target train neg examples: 1068

Target test facts examples: 34429
Target test pos  examples: 2270
Target test neg examples: 3954

******************************************
Performing Parameter Learning
******************************************
Refine
0;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
0;true;follows(A, D).;false;false
0;false;follows(A, E), recursion_accounttype(E, B).;true;true
0;false,true;follows(A, F), follows(F, A).;false;true
0;false,true,false;follows(A, G), follows(G, E).;false;false
0;false,false;follows(H, A).;true;true
0;false,false,true;follows(I, H), follows(I, A).;false;false
0;false,false,false;follows(A, J), follows(J, K).;false;false
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;true;follows(A, C), tweets(A, D).;false;false
1;false;follows(A, E), recursion_accounttype(E, B).;true;true
1;false,true;tweets(A, F), tweets(E, F).;false;true
1;false,true,false;follows(G, A), follows(E, H).;false;false
1;false,false;follows(I, A).;true;true
1;false,false,true;follows(I, J), recursion_accounttype(J, B).;false;false
1;false,false,false;tweets(A, K).;false;false
2;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;true;follows(C, D), follows(D, A).;false;false
2;false;follows(E, A).;true;true
2;false,true;follows(F, E), follows(F, A).;false;true
2;false,true,false;follows(E, G), recursion_accounttype(G, B).;false;false
2;false,false;follows(A, H), follows(H, I).;true;true
2;false,false,true;recursion_accounttype(I, B).;false;false
2;false,false,false;follows(A, J).;false;false
3;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
3;true;tweets(A, D), tweets(C, D).;false;false
3;false;follows(E, A).;true;true
3;false,true;follows(F, E), recursion_accounttype(F, B).;true;false
3;false,true,true;follows(A, G), recursion_accounttype(G, B).;false;false
3;false,false;follows(A, H), recursion_accounttype(H, B).;true;true
3;false,false,true;follows(A, I), follows(I, H).;false;false
3;false,false,false;tweets(A, J), follows(A, K).;false;false
4;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
4;true;follows(A, D), follows(D, C).;true;false
4;true,true;follows(D, A).;false;true
4;true,true,false;tweets(A, E).;false;false
4;false;follows(F, A).;false;true
4;false,false;follows(A, G), recursion_accounttype(G, B).;true;true
4;false,false,true;follows(G, H), follows(H, G).;false;false
4;false,false,false;follows(A, I), follows(I, J).;false;false
5;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
5;true;follows(D, A), tweets(D, E).;true;true
5;true,true;recursion_accounttype(D, B).;false;false
5;true,false;follows(C, F), follows(F, C).;true;false
5;true,false,true;tweets(C, G), recursion_accounttype(F, B).;false;false
5;false;follows(A, H), follows(H, A).;false;true
5;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
5;false,false,false;tweets(A, J), follows(K, A).;false;false
6;;accounttype(A, B) :- follows(A, C).;true;true
6;true;follows(D, C), recursion_accounttype(D, B).;true;false
6;true,true;recursion_accounttype(C, B).;true;true
6;true,true,true;follows(E, A), follows(E, D).;false;false
6;true,true,false;follows(F, A), recursion_accounttype(F, B).;false;false
6;false;follows(G, A), recursion_accounttype(G, B).;false;true
6;false,false;follows(H, A).;false;true
6;false,false,false;tweets(A, I).;false;false
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;tweets(C, D), follows(A, C).;false;false
7;false;follows(E, A).;true;true
7;false,true;follows(E, F), recursion_accounttype(F, B).;true;false
7;false,true,true;follows(F, E), follows(A, F).;false;false
7;false,false;follows(A, G), recursion_accounttype(G, B).;true;true
7;false,false,true;tweets(A, H).;false;false
7;false,false,false;follows(A, I).;false;false
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;true;follows(C, D), recursion_accounttype(D, B).;false;true
8;true,false;follows(A, E), follows(E, A).;false;false
8;false;follows(F, A), follows(A, G).;true;true
8;false,true;follows(G, A), follows(G, F).;false;true
8;false,true,false;follows(H, F), recursion_accounttype(H, B).;false;false
8;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
8;false,false,false;follows(J, A).;false;false
9;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
9;true;follows(C, D).;true;false
9;true,true;follows(A, D).;true;true
9;true,true,true;follows(E, A), recursion_accounttype(E, B).;false;false
9;true,true,false;tweets(C, F), follows(D, C).;false;false
9;false;follows(A, G), follows(H, A).;false;true
9;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
9;false,false,false;follows(J, A).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.27854694504975613;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.2867203636709409;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.44905802600860323;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.44905802600860323;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.5724346493852266;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.1914822684328457;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.05814893509951237;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.05814893509951237;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.2411503606196619;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.24811816884741328;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.3851926776601658;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.3851926776601658;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.48767788391726297;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.16653882456488167;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.05092203251355405;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.05092203251355405;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.20289930723994204;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.20848477447886868;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.31518052304212246;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.31518052304212246;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.3912569620992536;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.1420942428155646;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.04434629760466855;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.04434629760466855;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.16640029396569495;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.17062637354018492;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.24804771389482108;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.24804771389482108;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.3005711547884894;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.11914890490746433;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.03842866223690456;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.03842866223690456;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.13360339271793026;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.13664585375352234;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.19020231164899937;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.19020231164899937;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.22629823971521876;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( title(L, K), venue(L, B) )
%   | | then if ( samebib(L, M), venue(M, A) )
%   | | | then return 0.32342996356885667;  // std dev = 2.623, 28.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=14 */
%   | | | else return -0.1765700364311428;  // std dev = 0.141, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | else return 0.07188755709780537;  // std dev = 0.454, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | else return 0.033154945921885746;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.10551742939082928;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.10762034996184403;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.14379027326522745;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.14379027326522745;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.16984358676510128;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.0862347787799619;  // std dev = 0.454, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.028495105925721097;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.02380666001612691;  // std dev = 0.381, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.08232251291348108;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.08372807955323855;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.10803450809035726;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.10803450809035726;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.12813320688246752;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.06994291324218899;  // std dev = 0.453, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.024408230135271918;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.020355951021442855;  // std dev = 0.381, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.06366213733661014;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.06457405393631681;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.08103386685025628;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.08103386685025628;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.09743184803714998;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.05623587149796373;  // std dev = 0.453, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.02084688910874009;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.017364121342584603;  // std dev = 0.380, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.048923799915716965;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.049497783225195;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.0608105509549485;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.0608105509549485;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.07468131696953094;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.04490356233790243;  // std dev = 0.452, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.017760671541598414;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.014781837877170698;  // std dev = 0.380, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.03743104240908369;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.03777940363354095;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.045695325992495844;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.045695325992495844;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.057651940521137104;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.03566104264835146;  // std dev = 0.452, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.015098879183171418;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.012561626678953476;  // std dev = 0.380, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */


Results
   AUC ROC   = 0.566212
   AUC PR    = 0.422741
   CLL	      = -0.638792
   Precision = 0.65625 at threshold = 0.5
   Recall    = 0.037004
   F1        = 0.070058


Total learning time: 93.95889592170715 seconds
Total inference time: 7.83 seconds
AUC ROC: 0.566212


Results scoring model
   AUC ROC   = 0.538945
   AUC PR    = 0.449099
   CLL	      = -0.668395
   Precision = 0.607843 at threshold = 0.5
   Recall    = 0.041499
   F1        = 0.077694


Total scoring time: 1.187 seconds
Parameter learned model CLL: -0.668395


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(B, G)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)'}, {'true,true': [0.494, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(B, G)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)'}, {'true,true': [0.494, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(B, G)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)'}, {'true,true': [0.494, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(B, G)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)'}, {'true,true': [0.494, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(B, G)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'title(L, K), venue(L, B)', 'false,true,true': 'samebib(L, M), venue(M, A)'}, {'true,true': [0.494, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true,true': [2.623, 14, 14], 'false,true,true,false': [0.141, 35, 0], 'false,true,false': [0.454, 7, 3], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(B, G)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(A, L)'}, {'true,true': [0.494, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.454, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.381, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(B, G)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(A, L)'}, {'true,true': [0.494, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.453, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.381, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(B, G)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(A, L)'}, {'true,true': [0.494, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.453, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.38, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(B, G)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(A, L)'}, {'true,true': [0.494, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.452, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.38, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(A, G)', 'true,false,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(A, L)'}, {'true,true': [0.494, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.452, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.38, 44, 11]}]]
[{'': [0.24455361249545102, 0.17089843750000108], 'true': [0.24366352318011741, 0.24803717352988336], 'true,false': [0.25000000000000133, 0.2354340071343634], 'true,false,true': [0.24489795918367302, 0.2417355371900822], 'true,false,false': [0.2417355371900822, 0.20408163265306106], 'false': [0.17864514918371124, 0.15999999999999948], 'false,true': [0.22222222222222232, 0.15999999999999948]}, {'': [0.2442396583862776, 0.17036542604714272], 'true': [0.24366352318012574, 0.2455497403386633], 'true,false': [0.24813620683257942, 0.23456996391329935], 'true,false,true': [0.244897959183673, 0.2417355371900833], 'true,false,false': [0.2417355371900833, 0.20408163265306115], 'false': [0.177825777852918, 0.1600000000000007], 'false,true': [0.22222222222222207, 0.1600000000000007]}, {'': [0.2439315722131506, 0.16990467702453835], 'true': [0.2436635231801326, 0.2431019584682027], 'true,false': [0.24631150685892028, 0.2337064665173658], 'true,false,true': [0.24489795918367316, 0.24173553719008264], 'true,false,false': [0.24173553719008264, 0.20408163265306115], 'false': [0.1771174918718374, 0.15999999999999953], 'false,true': [0.22222222222222218, 0.15999999999999953]}, {'': [0.24371075047936064, 0.16953742675793848], 'true': [0.24366352318009946, 0.24136967032829026], 'true,false': [0.24498343086187796, 0.23315182613521265], 'true,false,true': [0.24489795918367355, 0.24173553719008264], 'true,false,false': [0.24173553719008264, 0.2040816326530612], 'false': [0.17655293676131073, 0.15999999999999967], 'false,true': [0.2222222222222222, 0.15999999999999967]}, {'': [0.2435851909254958, 0.16926465814576508], 'true': [0.2436635231801065, 0.24040290855188667], 'true,false': [0.24421324119301446, 0.23288524759022633], 'true,false,true': [0.24489795918367332, 0.2417355371900829], 'true,false,false': [0.2417355371900829, 0.20408163265306128], 'false': [0.17613362348097328, 0.15999999999999995], 'false,true': [0.17124585067387782, 0.20633258440431912], 'false,true,true': [0.24570496051408622, 0.0005674516906003671]}, {'': [0.2435232438971303, 0.16049963298504497], 'true': [0.2436635231801034, 0.2399333213191563], 'true,false': [0.24382884959637013, 0.232770957821724], 'true,false,true': [0.2448979591836737, 0.24173553719008273], 'true,false,false': [0.24173553719008273, 0.2040816326530612], 'false': [0.17196981191492608, 0.14507130318174416], 'false,true': [0.20603241748214604, 0.1599999999999999]}, {'': [0.24349468828678986, 0.16015661138769038], 'true': [0.24366352318011533, 0.2397184616663663], 'true,false': [0.24365206723466531, 0.23272063453101924], 'true,false,true': [0.24489795918367374, 0.24173553719008273], 'true,false,false': [0.24173553719008273, 0.20408163265306126], 'false': [0.17157827128653744, 0.14486379789350953], 'false,true': [0.20539416620545428, 0.16000000000000006]}, {'': [0.24348173271512658, 0.15990225103485314], 'true': [0.2436635231801038, 0.23962063189587657], 'true,false': [0.24357324953519555, 0.2326959022580774], 'true,false,true': [0.24489795918367335, 0.2417355371900827], 'true,false,false': [0.2417355371900827, 0.2040816326530612], 'false': [0.17130233987530677, 0.14468621596056525], 'false,true': [0.20489369324331067, 0.16000000000000014]}, {'': [0.24347574793721724, 0.1597142039620711], 'true': [0.24366352318010848, 0.23957464981292653], 'true,false': [0.24353802746155115, 0.23268189473355322], 'true,false,true': [0.2448979591836737, 0.24173553719008273], 'true,false,false': [0.24173553719008273, 0.20408163265306123], 'false': [0.1711106446827993, 0.1445346720478503], 'false,true': [0.20450476130826847, 0.16000000000000014]}, {'': [0.24347287299467585, 0.1595744693431275], 'true': [0.24366352318011011, 0.239551801147683], 'true,false': [0.2435219333806154, 0.23267284196553628], 'true,false,true': [0.24489795918367346, 0.24173553719008262], 'true,false,false': [0.24173553719008262, 0.2040816326530612], 'false': [0.17097816402835178, 0.14440565118421358], 'false,true': [0.20420400423621118, 0.16000000000000011]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;false;haswordvenue(A, J), haswordtitle(K, J).;true;true
4;false,true;title(L, K), venue(L, B).;true;true
4;false,true,true;samebib(L, M), venue(M, A).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.27854694504975613;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.2867203636709409;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.44905802600860323;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.44905802600860323;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.5724346493852266;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.1914822684328457;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.05814893509951237;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.05814893509951237;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.2411503606196619;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.24811816884741328;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.3851926776601658;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.3851926776601658;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.48767788391726297;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.16653882456488167;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.05092203251355405;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.05092203251355405;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.7825012972897073;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.21749870271029265;  // std dev = 1.05e-08, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.5825012972897073;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.2006373174408249;  // std dev = 0.493, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.25543090384670014;  // std dev = 3.509, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.333543801435223;  // std dev = 2.603, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(B, M) )
%   | | then return 0.1420942428155646;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.04434629760466855;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.04434629760466855;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.16627278814108717;  // std dev = 0.493, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.16153884536939936;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.24389847404002757;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.2613806000007637;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.3144965494660669;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.11914890490746433;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.03842866223690456;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.03842866223690456;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.13351355589432407;  // std dev = 0.493, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.12875910516214492;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.18678417359691227;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.20129574584424512;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.23723136491506377;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.0984134027840187;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.033154945921885746;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.033154945921885746;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.10546120260430515;  // std dev = 0.492, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.10105349094222651;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.14111998948018567;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.152505134275848;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.17800353626734847;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.08026654944252247;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.028495105925721097;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.028495105925721097;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.08229285039787725;  // std dev = 0.492, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.07842124408592599;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.10600521577534826;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.1146753959044374;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.1341360554815721;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.06479591611329234;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.024408230135271918;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.024408230135271918;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.06365159050563549;  // std dev = 0.492, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.06037404761988859;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.0795104766976609;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.0860246254109223;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.10185911604805963;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.05187916934404051;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.02084688910874009;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.02084688910874009;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04892590698407867;  // std dev = 0.492, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.04622102614851068;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.059671618864593844;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.06454279368145692;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.07797595788497556;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.04126932998424623;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.017760671541598414;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.017760671541598414;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.5997412828275805;  // std dev = 0.134, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.3823589863733487;  // std dev = 1.49e-08, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.3989931059689475;  // std dev = 0.877, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.03532015873420728;  // std dev = 0.492, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.03947012812309453;  // std dev = 3.489, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.051295643370206444;  // std dev = 2.598, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(B, M) )
%   | | then return 0.03266374873483021;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.015098879183171418;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.015098879183171418;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */


Results
   AUC ROC   = 0.57288
   AUC PR    = 0.436625
   CLL	      = -0.64029
   Precision = 0.755869 at threshold = 0.5
   Recall    = 0.070925
   F1        = 0.129682


Total learning time: 89.6398458480835 seconds
Total inference time: 7.315 seconds
AUC ROC: 0.57288


Results scoring model
   AUC ROC   = 0.556615
   AUC PR    = 0.474293
   CLL	      = -0.665965
   Precision = 0.701493 at threshold = 0.5
   Recall    = 0.062918
   F1        = 0.115479


Total scoring time: 1.326 seconds
Refined model CLL: -0.665965


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.57288
   AUC PR    = 0.436625
   CLL	      = -0.64029
   Precision = 0.755869 at threshold = 0.5
   Recall    = 0.070925
   F1        = 0.129682


Total learning time: 186.11174176979065 seconds
Total inference time: 7.315 seconds
AUC ROC: 0.57288
Total revision time: 186.11174176979065
Best scored revision CLL: -0.665965


Dataset: 13_twitter_cora, Fold: 4, Type: Transfer (trRDN-B), Time: 00:21:26
{'AUC ROC': 0.57288, 'AUC PR': 0.436625, 'CLL': -0.64029, 'Precision': [0.755869, 0.5], 'Recall': 0.070925, 'F1': 0.129682, 'Learning time': 186.11174176979065, 'Inference time': 7.315, 'parameter': {'AUC ROC': 0.566212, 'AUC PR': 0.422741, 'CLL': -0.638792, 'Precision': [0.65625, 0.5], 'Recall': 0.037004, 'F1': 0.070058, 'Learning time': 93.95889592170715, 'Inference time': 7.83}}


Starting fold 5

Target train facts examples: 8644
Target train pos examples: 550
Target train neg examples: 500

Target test facts examples: 33914
Target test pos  examples: 2467
Target test neg examples: 4522

******************************************
Performing Parameter Learning
******************************************
Refine
0;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
0;true;follows(A, D).;false;false
0;false;follows(A, E), recursion_accounttype(E, B).;true;true
0;false,true;follows(A, F), follows(F, A).;false;true
0;false,true,false;follows(A, G), follows(G, E).;false;false
0;false,false;follows(H, A).;true;true
0;false,false,true;follows(I, H), follows(I, A).;false;false
0;false,false,false;follows(A, J), follows(J, K).;false;false
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;true;follows(A, C), tweets(A, D).;false;false
1;false;follows(A, E), recursion_accounttype(E, B).;true;true
1;false,true;tweets(A, F), tweets(E, F).;false;true
1;false,true,false;follows(G, A), follows(E, H).;false;false
1;false,false;follows(I, A).;true;true
1;false,false,true;follows(I, J), recursion_accounttype(J, B).;false;false
1;false,false,false;tweets(A, K).;false;false
2;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;true;follows(C, D), follows(D, A).;false;false
2;false;follows(E, A).;true;true
2;false,true;follows(F, E), follows(F, A).;false;true
2;false,true,false;follows(E, G), recursion_accounttype(G, B).;false;false
2;false,false;follows(A, H), follows(H, I).;true;true
2;false,false,true;recursion_accounttype(I, B).;false;false
2;false,false,false;follows(A, J).;false;false
3;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
3;true;tweets(A, D), tweets(C, D).;false;false
3;false;follows(E, A).;true;true
3;false,true;follows(F, E), recursion_accounttype(F, B).;true;false
3;false,true,true;follows(A, G), recursion_accounttype(G, B).;false;false
3;false,false;follows(A, H), recursion_accounttype(H, B).;true;true
3;false,false,true;follows(A, I), follows(I, H).;false;false
3;false,false,false;tweets(A, J), follows(A, K).;false;false
4;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
4;true;follows(A, D), follows(D, C).;true;false
4;true,true;follows(D, A).;false;true
4;true,true,false;tweets(A, E).;false;false
4;false;follows(F, A).;false;true
4;false,false;follows(A, G), recursion_accounttype(G, B).;true;true
4;false,false,true;follows(G, H), follows(H, G).;false;false
4;false,false,false;follows(A, I), follows(I, J).;false;false
5;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
5;true;follows(D, A), tweets(D, E).;true;true
5;true,true;recursion_accounttype(D, B).;false;false
5;true,false;follows(C, F), follows(F, C).;true;false
5;true,false,true;tweets(C, G), recursion_accounttype(F, B).;false;false
5;false;follows(A, H), follows(H, A).;false;true
5;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
5;false,false,false;tweets(A, J), follows(K, A).;false;false
6;;accounttype(A, B) :- follows(A, C).;true;true
6;true;follows(D, C), recursion_accounttype(D, B).;true;false
6;true,true;recursion_accounttype(C, B).;true;true
6;true,true,true;follows(E, A), follows(E, D).;false;false
6;true,true,false;follows(F, A), recursion_accounttype(F, B).;false;false
6;false;follows(G, A), recursion_accounttype(G, B).;false;true
6;false,false;follows(H, A).;false;true
6;false,false,false;tweets(A, I).;false;false
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;tweets(C, D), follows(A, C).;false;false
7;false;follows(E, A).;true;true
7;false,true;follows(E, F), recursion_accounttype(F, B).;true;false
7;false,true,true;follows(F, E), follows(A, F).;false;false
7;false,false;follows(A, G), recursion_accounttype(G, B).;true;true
7;false,false,true;tweets(A, H).;false;false
7;false,false,false;follows(A, I).;false;false
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;true;follows(C, D), recursion_accounttype(D, B).;false;true
8;true,false;follows(A, E), follows(E, A).;false;false
8;false;follows(F, A), follows(A, G).;true;true
8;false,true;follows(G, A), follows(G, F).;false;true
8;false,true,false;follows(H, F), recursion_accounttype(H, B).;false;false
8;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
8;false,false,false;follows(J, A).;false;false
9;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
9;true;follows(C, D).;true;false
9;true,true;follows(A, D).;true;true
9;true,true,true;follows(E, A), recursion_accounttype(E, B).;false;false
9;true,true,false;tweets(C, F), follows(D, C).;false;false
9;false;follows(A, G), follows(H, A).;false;true
9;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
9;false,false,false;follows(J, A).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.443242102801371;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.7291166770349955;  // std dev = 0.335, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, A) )
%   | | then if ( samebib(G, H), venue(H, B) )
%   | | | then return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(I, F), venue(I, B) )
%   | | | then return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.15083186192878065;  // std dev = 2.913, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then if ( haswordtitle(L, J) )
%   | | | then return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.17522210583121967;  // std dev = 2.980, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.051131391239862906;  // std dev = 0.395, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.3803254334818479;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.6157326050686436;  // std dev = 0.335, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, B) )
%   | | then if ( samebib(G, H), venue(H, A) )
%   | | | then return 0.6392119282680095;  // std dev = 0.899, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.15769426647032891;  // std dev = 0.016, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(I, F), venue(I, A) )
%   | | | then return -0.16343846579291768;  // std dev = 0.003, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.12907154912175828;  // std dev = 2.884, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( haswordtitle(L, J) )
%   | | | then return 0.03693744759731563;  // std dev = 0.807, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.1534329638272584;  // std dev = 2.940, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.04479249977758044;  // std dev = 0.395, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.31149293361789177;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.48283090502633463;  // std dev = 0.335, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, A) )
%   | | then if ( samebib(G, H), venue(H, B) )
%   | | | then return 0.5342138905737382;  // std dev = 0.901, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.1371885616510316;  // std dev = 0.014, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.09339221621720722;  // std dev = 0.439, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then return 0.04077026083336129;  // std dev = 0.794, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.13024294437728948;  // std dev = 2.941, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.03250702666026084;  // std dev = 2.992, 59.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return 0.04606634869415913;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(F, D) )
%   | | then if ( author(G, F), venue(G, B) )
%   | | | then return -0.3396308890843991;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.4520357775822679;  // std dev = 1.990, 24.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=19 */
%   | | else return 0.24571663689400922;  // std dev = 0.492, 783.000 (wgt'ed) examples reached here.  /* #neg=323 #pos=460 */
%   | else return 0.39784229978637214;  // std dev = 0.294, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, A) )
%   | | then return 0.14825109550550922;  // std dev = 0.393, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( author(K, I), venue(K, B) )
%   | | | then return -0.15406072022861989;  // std dev = 0.003, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.09634264587157128;  // std dev = 2.881, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | then return 0.10165066048714251;  // std dev = 0.449, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.033892067410488357;  // std dev = 0.395, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(F, D) )
%   | | then if ( author(G, F), venue(G, A) )
%   | | | then return -0.3967027199118874;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.3844907203098564;  // std dev = 1.966, 24.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=19 */
%   | | else return 0.1882182261771277;  // std dev = 0.490, 783.000 (wgt'ed) examples reached here.  /* #neg=323 #pos=460 */
%   | else return 0.3175185708165119;  // std dev = 0.288, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, B) )
%   | | then if ( samebib(J, K), venue(K, A) )
%   | | | then return 0.49147678018665086;  // std dev = 0.908, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.16198170984772625;  // std dev = 0.028, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.05700300409068049;  // std dev = 0.434, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.014952888103878249;  // std dev = 0.379, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | else return 0.06624448400691833;  // std dev = 0.428, 94.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=24 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.4195846921609877;  // std dev = 0.073, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.08192323907340623;  // std dev = 2.324, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.23795279890714569;  // std dev = 1.881, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.15399489423014276;  // std dev = 0.489, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.20553170741793264;  // std dev = 0.339, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, A) )
%   | | then return 0.11275330465760436;  // std dev = 0.385, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.05422732610032186;  // std dev = 0.433, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.05763139689427822;  // std dev = 0.424, 95.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=24 */
%   | | else return 0.0060986467606602155;  // std dev = 0.384, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.3240527453724758;  // std dev = 0.066, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(F, D) )
%   | | | then return 0.046759993935703334;  // std dev = 2.292, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.27760742983166764;  // std dev = 1.868, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(I, G) )
%   | | | then return 0.08435166192769257;  // std dev = 2.245, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   | | | else return -0.16958835196119273;  // std dev = 1.861, 23.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
%   | | else return 0.13110325710662032;  // std dev = 0.484, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | then if ( author(L, K), venue(L, A) )
%   | | then return 0.09162698393765686;  // std dev = 0.380, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.044914933175441256;  // std dev = 0.433, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.030966681873351432;  // std dev = 0.409, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.25861519148669565;  // std dev = 0.058, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(F, D) )
%   | | | then return 0.0354526608863785;  // std dev = 2.290, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.21057937952700648;  // std dev = 1.861, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(I, G) )
%   | | | then return 0.06401399160669383;  // std dev = 2.242, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   | | | else return -0.1298397869708092;  // std dev = 1.863, 23.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
%   | | else return 0.09848539213111789;  // std dev = 0.484, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | then if ( author(L, K), venue(L, A) )
%   | | then return 0.07393446256733405;  // std dev = 0.377, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.03699387667810368;  // std dev = 0.433, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.026149731862993814;  // std dev = 0.409, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.055440159535250645;  // std dev = 0.400, 39.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=21 */
%   | else if ( author(F, D), venue(F, A) )
%   | | then return -0.20745859450789486;  // std dev = 0.307, 24.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=4 */
%   | | else if ( author(G, D), venue(G, B) )
%   | | | then return 0.07326148924948002;  // std dev = 0.918, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.07675316928556075;  // std dev = 2.968, 46.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=18 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then if ( haswordtitle(I, H) )
%   | | then return 0.06516138550298695;  // std dev = 0.484, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.1663368433926374;  // std dev = 0.343, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | | then return -0.18753516812850116;  // std dev = 0.049, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.07209594400955444;  // std dev = 4.040, 83.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=24 */
%   | | else return -0.006728943558182331;  // std dev = 0.383, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, B) )
%   | then if ( samebib(E, F), venue(F, A) )
%   | | then return 0.37962991169206656;  // std dev = 0.260, 24.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=22 */
%   | | else return -0.3575461561023726;  // std dev = 0.139, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else return -0.014129757223615012;  // std dev = 0.393, 71.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=24 */
%   else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | then if ( author(I, H), venue(I, A) )
%   | | then if ( samebib(I, J), venue(J, B) )
%   | | | then return 0.38075617978718357;  // std dev = 1.256, 20.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=18 */
%   | | | else return -0.3691973701449941;  // std dev = 0.541, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( author(K, H), venue(K, B) )
%   | | | then return -0.26104885481584217;  // std dev = 0.756, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   | | | else return 0.07199769960663935;  // std dev = 2.908, 41.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=15 */
%   | else if ( haswordvenue(A, L), haswordvenue(B, L) )
%   | | then return 0.05759337270130677;  // std dev = 0.484, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   | | else return 0.008864014932898501;  // std dev = 0.393, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */


Results
   AUC ROC   = 0.548539
   AUC PR    = 0.397751
   CLL	      = -0.708728
   Precision = 0.372051 at threshold = 0.5
   Recall    = 0.927037
   F1        = 0.530996


Total learning time: 53.59536814689636 seconds
Total inference time: 18.221 seconds
AUC ROC: 0.548539


Results scoring model
   AUC ROC   = 0.700178
   AUC PR    = 0.703877
   CLL	      = -0.608421
   Precision = 0.639847 at threshold = 0.5
   Recall    = 0.910909
   F1        = 0.751688


Total scoring time: 1.216 seconds
Parameter learned model CLL: -0.608421


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'false': 'haswordvenue(B, E), haswordauthor(F, E)', 'false,true': 'author(G, F), venue(G, A)', 'false,true,true': 'samebib(G, H), venue(H, B)', 'false,true,false': 'author(I, F), venue(I, B)', 'false,false': 'haswordvenue(A, J), haswordauthor(K, J)', 'false,false,true': 'haswordtitle(L, J)'}, {'true,true': [0.493, 334, 471], 'true,false': [0.335, 4, 27], 'false,true,true,true': [0.894, 1, 4], 'false,true,true,false': [0.0, 5, 0], 'false,true,false,true': [0.0, 3, 0], 'false,true,false,false': [2.913, 29, 12], 'false,false,true,true': [0.894, 4, 1], 'false,false,true,false': [2.98, 28, 13], 'false,false,false': [0.395, 92, 22]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'false': 'haswordvenue(A, E), haswordauthor(F, E)', 'false,true': 'author(G, F), venue(G, B)', 'false,true,true': 'samebib(G, H), venue(H, A)', 'false,true,false': 'author(I, F), venue(I, A)', 'false,false': 'haswordvenue(B, J), haswordauthor(K, J)', 'false,false,true': 'haswordtitle(L, J)'}, {'true,true': [0.493, 334, 471], 'true,false': [0.335, 4, 27], 'false,true,true,true': [0.899, 1, 4], 'false,true,true,false': [0.016, 5, 0], 'false,true,false,true': [0.003, 3, 0], 'false,true,false,false': [2.884, 29, 12], 'false,false,true,true': [0.807, 4, 1], 'false,false,true,false': [2.94, 28, 13], 'false,false,false': [0.395, 92, 22]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'false': 'haswordvenue(B, E), haswordauthor(F, E)', 'false,true': 'author(G, F), venue(G, A)', 'false,true,true': 'samebib(G, H), venue(H, B)', 'false,false': 'haswordvenue(A, I), haswordauthor(J, I)', 'false,false,true': 'author(K, J), venue(K, A)', 'false,false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true': [0.493, 334, 471], 'true,false': [0.335, 4, 27], 'false,true,true,true': [0.901, 1, 4], 'false,true,true,false': [0.014, 5, 0], 'false,true,false': [0.439, 32, 12], 'false,false,true,true': [0.794, 4, 1], 'false,false,true,false': [2.941, 28, 13], 'false,false,false,true': [2.992, 48, 11], 'false,false,false,false': [2.966, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordtitle(E, D)', 'true,true': 'haswordauthor(F, D)', 'true,true,true': 'author(G, F), venue(G, B)', 'false': 'haswordvenue(B, H), haswordauthor(I, H)', 'false,true': 'author(J, I), venue(J, A)', 'false,true,false': 'author(K, I), venue(K, B)', 'false,false': 'haswordvenue(A, L), haswordauthor(M, L)'}, {'true,true,true,true': [0.0, 8, 0], 'true,true,true,false': [1.99, 5, 19], 'true,true,false': [0.492, 323, 460], 'true,false': [0.294, 2, 19], 'false,true,true': [0.393, 6, 4], 'false,true,false,true': [0.003, 3, 0], 'false,true,false,false': [2.881, 29, 12], 'false,false,true': [0.449, 32, 14], 'false,false,false': [0.395, 92, 22]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordtitle(E, D)', 'true,true': 'haswordauthor(F, D)', 'true,true,true': 'author(G, F), venue(G, A)', 'false': 'haswordvenue(A, H), haswordauthor(I, H)', 'false,true': 'author(J, I), venue(J, B)', 'false,true,true': 'samebib(J, K), venue(K, A)', 'false,false': 'haswordvenue(B, L), haswordtitle(M, L)'}, {'true,true,true,true': [0.0, 8, 0], 'true,true,true,false': [1.966, 5, 19], 'true,true,false': [0.49, 323, 460], 'true,false': [0.288, 2, 19], 'false,true,true,true': [0.908, 1, 4], 'false,true,true,false': [0.028, 5, 0], 'false,true,false': [0.434, 32, 12], 'false,false,true': [0.379, 54, 12], 'false,false,false': [0.428, 70, 24]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordauthor(F, C)', 'true,true,false': 'haswordtitle(G, D)', 'true,false': 'haswordtitle(H, C)', 'false': 'haswordvenue(B, I), haswordauthor(J, I)', 'false,true': 'author(K, J), venue(K, A)', 'false,false': 'haswordvenue(B, L), haswordtitle(M, L)'}, {'true,true,true': [0.073, 0, 10], 'true,true,false,true': [2.324, 13, 14], 'true,true,false,false': [1.881, 18, 6], 'true,false,true': [0.489, 304, 449], 'true,false,false': [0.339, 3, 19], 'false,true,true': [0.385, 6, 4], 'false,true,false': [0.433, 32, 12], 'false,false,true': [0.424, 71, 24], 'false,false,false': [0.384, 53, 12]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordvenue(B, D)', 'true,true,false': 'haswordtitle(F, D)', 'true,false': 'haswordvenue(B, G), haswordauthor(H, G)', 'true,false,true': 'haswordtitle(I, G)', 'false': 'haswordvenue(B, J), haswordauthor(K, J)', 'false,true': 'author(L, K), venue(L, A)'}, {'true,true,true': [0.066, 0, 10], 'true,true,false,true': [2.292, 13, 14], 'true,true,false,false': [1.868, 18, 6], 'true,false,true,true': [2.245, 12, 14], 'true,false,true,false': [1.861, 17, 6], 'true,false,false': [0.484, 278, 448], 'false,true,true': [0.38, 6, 4], 'false,true,false': [0.433, 32, 12], 'false,false': [0.409, 124, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordvenue(B, D)', 'true,true,false': 'haswordtitle(F, D)', 'true,false': 'haswordvenue(B, G), haswordauthor(H, G)', 'true,false,true': 'haswordtitle(I, G)', 'false': 'haswordvenue(B, J), haswordauthor(K, J)', 'false,true': 'author(L, K), venue(L, A)'}, {'true,true,true': [0.058, 0, 10], 'true,true,false,true': [2.29, 13, 14], 'true,true,false,false': [1.861, 18, 6], 'true,false,true,true': [2.242, 12, 14], 'true,false,true,false': [1.863, 17, 6], 'true,false,false': [0.484, 278, 448], 'false,true,true': [0.377, 6, 4], 'false,true,false': [0.433, 32, 12], 'false,false': [0.409, 124, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(E, C)', 'true,false': 'author(F, D), venue(F, A)', 'true,false,false': 'author(G, D), venue(G, B)', 'false': 'haswordvenue(A, H), haswordvenue(B, H)', 'false,true': 'haswordtitle(I, H)', 'false,false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,false,true': 'haswordtitle(K, L), haswordvenue(B, L)'}, {'true,true': [0.4, 18, 21], 'true,false,true': [0.307, 20, 4], 'true,false,false,true': [0.918, 3, 3], 'true,false,false,false': [2.968, 28, 18], 'false,true,true': [0.484, 304, 449], 'false,true,false': [0.343, 3, 19], 'false,false,true,true': [0.049, 12, 0], 'false,false,true,false': [4.04, 59, 24], 'false,false,false': [0.383, 53, 12]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordauthor(D, C)', 'true': 'author(E, D), venue(E, B)', 'true,true': 'samebib(E, F), venue(F, A)', 'false': 'haswordvenue(B, G), haswordauthor(H, G)', 'false,true': 'author(I, H), venue(I, A)', 'false,true,true': 'samebib(I, J), venue(J, B)', 'false,true,false': 'author(K, H), venue(K, B)', 'false,false': 'haswordvenue(A, L), haswordvenue(B, L)'}, {'true,true,true': [0.26, 2, 22], 'true,true,false': [0.139, 20, 0], 'true,false': [0.393, 47, 24], 'false,true,true,true': [1.256, 2, 18], 'false,true,true,false': [0.541, 18, 0], 'false,true,false,true': [0.756, 15, 1], 'false,true,false,false': [2.908, 26, 15], 'false,false,true': [0.484, 278, 448], 'false,false,false': [0.393, 92, 22]}]]
[{'': [0.24084270048762138, 0.18394619617433927], 'true': [0.2427591528104568, 0.11238293444328941], 'false': [0.20850480109739317, 0.17437500000000122], 'false,true': [0.23999999999999985, 0.19834710743801603], 'false,true,true': [0.15999999999999986, -2.7755575615628915e-18], 'false,true,false': [0.0, 0.20701963117192096], 'false,false': [0.21172022684309966, 0.15574022776238935], 'false,false,true': [0.16000000000000003, 0.2165377751338484]}, {'': [0.23990334821509726, 0.18064086185860803], 'true': [0.24275915281046145, 0.11238293444328855], 'false': [0.2054810365436294, 0.1713147328715216], 'false,true': [0.23956010966648247, 0.19452713363159602], 'false,true,true': [0.16153950938681216, 5.096833998347039e-05], 'false,true,false': [2.4576686617067134e-06, 0.20292686635974747], 'false,false': [0.20334904129270392, 0.15574022776238897], 'false,false,true': [0.1302457674210878, 0.21078894368062936]}, {'': [0.2389728475296195, 0.17711242437218921], 'true': [0.24275915281046562, 0.1123829344432882], 'false': [0.19470410716262027, 0.1705345650414724], 'false,true': [0.19384073754219708, 0.19285397407922236], 'false,true,true': [0.16225081288610724, 4.0035771569829626e-05], 'false,false': [0.20246980632736902, 0.15574022776238927], 'false,false,true': [0.12605381239145322, 0.2109186820323783], 'false,false,false': [0.15168055156564172, 0.15999999999999967]}, {'': [0.2384267517844177, 0.17430651486998006], 'true': [0.2417711836116551, 0.08616780045351476], 'true,true': [0.2412109374999996, 0.24179130791829748], 'true,true,true': [0.0, 0.16493055555555525], 'false': [0.18619139428552586, 0.16991800543431934], 'false,true': [0.15429381292563527, 0.1925596530333358], 'false,true,false': [2.2273585034982e-06, 0.2023740949187561], 'false,false': [0.2018113961884008, 0.15572876475443997]}, {'': [0.23635548556214966, 0.17331906583785647], 'true': [0.23989170184425646, 0.08282764187898024], 'true,true': [0.2351619938693314, 0.24008496044130795], 'true,true,true': [0.0, 0.16098352739773772], 'false': [0.1902149051075929, 0.16736043891051833], 'false,true': [0.18927176299719567, 0.18827946225808329], 'false,true,true': [0.16488110603359618, 0.00015842086179119197], 'false,false': [0.1434537479964028, 0.18306077137847626]}, {'': [0.23430305838885926, 0.1708945485221094], 'true': [0.20140341428682074, 0.23537884821787824], 'true,false': [0.2388211579339429, 0.11497732899374256], 'true,true': [0.00536751045430317, 0.20077120427016698], 'true,true,false': [0.20001982728982856, 0.14744673178085824], 'false': [0.180979728632544, 0.16728771619635507], 'false,true': [0.14803489761881863, 0.18783287723285233], 'false,false': [0.1798438413333164, 0.14735967943109743]}, {'': [0.2319583019812044, 0.1703675702437874], 'true': [0.19127550048289935, 0.2333844184200598], 'true,false': [0.18960575580141273, 0.23459801918373102], 'true,true': [0.004365594219261126, 0.19762201404833385], 'true,true,false': [0.19451189634796823, 0.14541924761340244], 'true,false,true': [0.19388483764182224, 0.15055172066768965], 'false': [0.17998395908215775, 0.166993171259324], 'false,true': [0.14469093507130915, 0.18760102392384004]}, {'': [0.2287451598631606, 0.17008901801403678], 'true': [0.17164482354061808, 0.23226922243858], 'true,false': [0.1827544115135922, 0.23461588028451505], 'true,false,true': [0.1933096546658688, 0.15088236742989403], 'true,true': [0.00336189507128114, 0.18580837906043704], 'true,true,false': [0.19426820953382917, 0.14424484129611984], 'false': [0.17924430923783416, 0.16692018672697295], 'false,true': [0.14218834920260806, 0.1874134133578903]}, {'': [0.17049662949749872, 0.22081021345618618], 'false': [0.23165518764641646, 0.16641503028612298], 'false,true': [0.23468980067495532, 0.1178427703753043], 'true': [0.1602159711045023, 0.17417100004238484], 'true,false': [0.09432972972138187, 0.1855847711058198], 'true,false,false': [0.14046178368947948, 0.19146897141057037], 'false,false': [0.1793108751495408, 0.14630927670210045], 'false,false,true': [0.0001982151723983657, 0.19669194696202777]}, {'': [0.1654495865368222, 0.22030434570049678], 'false': [0.18475621749247614, 0.2240320287596613], 'false,false': [0.23460382497226875, 0.15465408928565869], 'false,true': [0.18940507664181186, 0.180773224755176], 'false,true,true': [0.07883726860322875, 0.016242235076326494], 'false,true,false': [0.03571983201342542, 0.20624398612349143], 'true': [0.18045985425608058, 0.1548300123012905], 'true,true': [0.06782482642635664, 0.019206312236001312]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;false;haswordvenue(B, E), haswordauthor(F, E).;true;true
0;false,true;author(G, F), venue(G, A).;true;true
0;false,true,true;samebib(G, H), venue(H, B).;true;true
0;false,true,false;author(I, F), venue(I, B).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;false;haswordvenue(A, E), haswordauthor(F, E).;true;true
1;false,true;author(G, F), venue(G, B).;true;true
1;false,true,true;samebib(G, H), venue(H, A).;true;true
1;false,true,false;author(I, F), venue(I, A).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;false;haswordvenue(B, E), haswordauthor(F, E).;true;true
2;false,true;author(G, F), venue(G, A).;true;true
2;false,true,true;samebib(G, H), venue(H, B).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordvenue(A, D), haswordtitle(E, D).;true;true
3;true,true;haswordauthor(F, D).;true;true
3;true,true,true;author(G, F), venue(G, B).;true;true
3;false;haswordvenue(B, H), haswordauthor(I, H).;true;true
3;false,true;author(J, I), venue(J, A).;true;true
3;false,true,false;author(K, I), venue(K, B).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordvenue(B, D), haswordtitle(E, D).;true;true
4;true,true;haswordauthor(F, D).;true;true
4;true,true,true;author(G, F), venue(G, A).;true;true
4;false;haswordvenue(A, H), haswordauthor(I, H).;true;true
4;false,true;author(J, I), venue(J, B).;true;true
4;false,true,true;samebib(J, K), venue(K, A).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordauthor(D, C).;true;true
8;false;haswordvenue(A, H), haswordvenue(B, H).;true;true
8;false,false;haswordvenue(A, J), haswordtitle(K, J).;true;true
8;false,false,true;haswordtitle(K, L), haswordvenue(B, L).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.443242102801371;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.7291166770349955;  // std dev = 0.335, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, B) )
%   | | then if ( samebib(G, H), venue(H, A) )
%   | | | then return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.13087620782678508;  // std dev = 0.445, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( haswordtitle(K, I) )
%   | | | then return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.17522210583121967;  // std dev = 2.980, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.04458961306561406;  // std dev = 2.992, 59.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return 0.05814893509951237;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( haswordauthor(E, C) )
%   | | then return 0.7952322657799766;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.3777322657799845;  // std dev = 0.493, 800.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=466 */
%   | else if ( haswordauthor(F, C) )
%   | | then return 0.7447648631331598;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.5966167149850116;  // std dev = 0.355, 27.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=23 */
%   else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | then return 0.13313910930958378;  // std dev = 0.454, 54.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( haswordtitle(K, I) )
%   | | | then return 0.038009597489091836;  // std dev = 0.806, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.15404125523550588;  // std dev = 2.947, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.03765285941803126;  // std dev = 2.990, 59.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return 0.05244716084236053;  // std dev = 2.967, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.6234200738402056;  // std dev = 0.137, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.24543335605835354;  // std dev = 2.596, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.04611052302098332;  // std dev = 1.985, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( haswordtitle(J, H) )
%   | | | then return 0.2653763760013735;  // std dev = 2.542, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   | | | else return -0.03624206043667105;  // std dev = 1.971, 23.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
%   | | else return 0.3414067529368475;  // std dev = 0.485, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | then if ( author(M, L), venue(M, A) )
%   | | then return 0.22270785497591777;  // std dev = 0.490, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.0894915538184185;  // std dev = 0.441, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.06267676197734853;  // std dev = 0.413, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.24315258280970245;  // std dev = 0.488, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.420306534797584;  // std dev = 0.329, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, B) )
%   | | then if ( samebib(G, H), venue(H, A) )
%   | | | then return 0.5204436873937839;  // std dev = 0.900, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14564423308520952;  // std dev = 0.016, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(I, F), venue(I, A) )
%   | | | then return -0.18993501523500936;  // std dev = 0.000743, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.10273521298727807;  // std dev = 2.907, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, B) )
%   | | | then return 9.81892813547175E-4;  // std dev = 0.893, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.1177920818142631;  // std dev = 2.973, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.030706691682467514;  // std dev = 0.395, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.3961384073414569;  // std dev = 0.063, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.1366348667347132;  // std dev = 2.583, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.1023127123013338;  // std dev = 1.936, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.1965495281818006;  // std dev = 0.489, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.31416719394024695;  // std dev = 0.341, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, B) )
%   | | then return 0.13829210765342373;  // std dev = 0.390, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( author(L, J), venue(L, A) )
%   | | | then return -0.1624150922258345;  // std dev = 0.000657, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.08642667777761584;  // std dev = 2.907, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else return 0.04409843994373483;  // std dev = 0.415, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.14106529522471425;  // std dev = 0.486, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else return 0.29408553752562266;  // std dev = 0.290, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, A) )
%   | | then if ( samebib(H, I), venue(I, B) )
%   | | | then return 0.5604247663884803;  // std dev = 0.905, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.231362258955938;  // std dev = 0.044, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.04907608166710136;  // std dev = 0.436, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then if ( haswordtitle(L, J) )
%   | | | then return -0.01597724473296271;  // std dev = 0.686, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.08832671028932275;  // std dev = 2.898, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return 0.0139359513575032;  // std dev = 2.990, 59.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return 0.02708329781947588;  // std dev = 2.967, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.27122822839954547;  // std dev = 0.062, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.0593508545219038;  // std dev = 2.583, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.18270826907980517;  // std dev = 1.877, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.05624099613731729;  // std dev = 2.740, 36.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
%   | | | else return -0.1724962515712039;  // std dev = 1.557, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | else return 0.1262610521564236;  // std dev = 0.484, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | then if ( author(M, L), venue(M, A) )
%   | | then return 0.1258840135249614;  // std dev = 0.429, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.04050660987929539;  // std dev = 0.435, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.030585152531582442;  // std dev = 0.409, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.22190523321863154;  // std dev = 0.055, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(G, C) )
%   | | | then return -0.07386616388992424;  // std dev = 3.062, 46.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=16 */
%   | | | else return 0.24946296341224833;  // std dev = 0.887, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( haswordtitle(J, C) )
%   | | | then return -0.03927631266993008;  // std dev = 2.972, 44.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=16 */
%   | | | else return 0.3177239606782597;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.09484188928946552;  // std dev = 0.484, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | then return 0.04737603184776916;  // std dev = 0.427, 54.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return 0.046150973728738005;  // std dev = 0.426, 95.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=24 */
%   | | else return -0.005182933049336248;  // std dev = 0.387, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.05887615898150756;  // std dev = 0.482, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else return 0.18582920453177054;  // std dev = 0.291, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, A) )
%   | | then if ( samebib(H, I), venue(I, B) )
%   | | | then return 0.4066594626974299;  // std dev = 0.912, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.21783872885961988;  // std dev = 0.051, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(J, G), venue(J, B) )
%   | | | then return -0.22784807988363032;  // std dev = 0.022, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.04487040890117313;  // std dev = 2.843, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, M), haswordvenue(A, M) )
%   | | | then return -0.1885292412883456;  // std dev = 0.035, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.07391773512510678;  // std dev = 4.040, 83.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=24 */
%   | | else return -0.007753015128064739;  // std dev = 0.383, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then return 0.04413298959684223;  // std dev = 0.482, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | then return 0.09918321345585188;  // std dev = 0.395, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else return 0.22080092361463316;  // std dev = 0.076, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | then if ( title(J, I), venue(J, A) )
%   | | then if ( title(K, I), venue(K, B) )
%   | | | then return 0.6333776490839217;  // std dev = 1.774, 29.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=26 */
%   | | | else return -0.20032217839381947;  // std dev = 0.295, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | | else return -0.1797138870484349;  // std dev = 0.094, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then if ( haswordauthor(N, L) )
%   | | | then return 0.10881645508161764;  // std dev = 0.770, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.05267015174062637;  // std dev = 4.061, 86.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=24 */
%   | | else return -0.22664324915728282;  // std dev = 0.136, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */


Results
   AUC ROC   = 0.556038
   AUC PR    = 0.404038
   CLL	      = -0.70276
   Precision = 0.375187 at threshold = 0.5
   Recall    = 0.915687
   F1        = 0.532281


Total learning time: 51.068788051605225 seconds
Total inference time: 6.167 seconds
AUC ROC: 0.556038


Results scoring model
   AUC ROC   = 0.679645
   AUC PR    = 0.670291
   CLL	      = -0.610717
   Precision = 0.62649 at threshold = 0.5
   Recall    = 0.86
   F1        = 0.724904


Total scoring time: 1.184 seconds
Refined model CLL: -0.610717


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.548539
   AUC PR    = 0.397751
   CLL	      = -0.708728
   Precision = 0.372051 at threshold = 0.5
   Recall    = 0.927037
   F1        = 0.530996


Total learning time: 107.06415619850159 seconds
Total inference time: 18.221 seconds
AUC ROC: 0.548539
Total revision time: 107.06415619850159
Best scored revision CLL: -0.608421


Dataset: 13_twitter_cora, Fold: 5, Type: Transfer (trRDN-B), Time: 00:23:38
{'AUC ROC': 0.548539, 'AUC PR': 0.397751, 'CLL': -0.708728, 'Precision': [0.372051, 0.5], 'Recall': 0.927037, 'F1': 0.530996, 'Learning time': 107.06415619850159, 'Inference time': 18.221, 'parameter': {'AUC ROC': 0.548539, 'AUC PR': 0.397751, 'CLL': -0.708728, 'Precision': [0.372051, 0.5], 'Recall': 0.927037, 'F1': 0.530996, 'Learning time': 53.59536814689636, 'Inference time': 18.221}}


Starting fold 1

Target train facts examples: 7463
Target train pos examples: 368
Target train neg examples: 688

Target test facts examples: 35095
Target test pos  examples: 2649
Target test neg examples: 4334

******************************************
Performing Parameter Learning
******************************************
Refine
0;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
0;true;follows(A, D).;false;false
0;false;follows(A, E), recursion_accounttype(E, B).;true;true
0;false,true;follows(A, F), follows(F, A).;false;true
0;false,true,false;follows(A, G), follows(G, E).;false;false
0;false,false;follows(H, A).;true;true
0;false,false,true;follows(I, H), follows(I, A).;false;false
0;false,false,false;follows(A, J), follows(J, K).;false;false
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;true;follows(A, C), tweets(A, D).;false;false
1;false;follows(A, E), recursion_accounttype(E, B).;true;true
1;false,true;tweets(A, F), tweets(E, F).;false;true
1;false,true,false;follows(G, A), follows(E, H).;false;false
1;false,false;follows(I, A).;true;true
1;false,false,true;follows(I, J), recursion_accounttype(J, B).;false;false
1;false,false,false;tweets(A, K).;false;false
2;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;true;follows(C, D), follows(D, A).;false;false
2;false;follows(E, A).;true;true
2;false,true;follows(F, E), follows(F, A).;false;true
2;false,true,false;follows(E, G), recursion_accounttype(G, B).;false;false
2;false,false;follows(A, H), follows(H, I).;true;true
2;false,false,true;recursion_accounttype(I, B).;false;false
2;false,false,false;follows(A, J).;false;false
3;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
3;true;tweets(A, D), tweets(C, D).;false;false
3;false;follows(E, A).;true;true
3;false,true;follows(F, E), recursion_accounttype(F, B).;true;false
3;false,true,true;follows(A, G), recursion_accounttype(G, B).;false;false
3;false,false;follows(A, H), recursion_accounttype(H, B).;true;true
3;false,false,true;follows(A, I), follows(I, H).;false;false
3;false,false,false;tweets(A, J), follows(A, K).;false;false
4;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
4;true;follows(A, D), follows(D, C).;true;false
4;true,true;follows(D, A).;false;true
4;true,true,false;tweets(A, E).;false;false
4;false;follows(F, A).;false;true
4;false,false;follows(A, G), recursion_accounttype(G, B).;true;true
4;false,false,true;follows(G, H), follows(H, G).;false;false
4;false,false,false;follows(A, I), follows(I, J).;false;false
5;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
5;true;follows(D, A), tweets(D, E).;true;true
5;true,true;recursion_accounttype(D, B).;false;false
5;true,false;follows(C, F), follows(F, C).;true;false
5;true,false,true;tweets(C, G), recursion_accounttype(F, B).;false;false
5;false;follows(A, H), follows(H, A).;false;true
5;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
5;false,false,false;tweets(A, J), follows(K, A).;false;false
6;;accounttype(A, B) :- follows(A, C).;true;true
6;true;follows(D, C), recursion_accounttype(D, B).;true;false
6;true,true;recursion_accounttype(C, B).;true;true
6;true,true,true;follows(E, A), follows(E, D).;false;false
6;true,true,false;follows(F, A), recursion_accounttype(F, B).;false;false
6;false;follows(G, A), recursion_accounttype(G, B).;false;true
6;false,false;follows(H, A).;false;true
6;false,false,false;tweets(A, I).;false;false
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;tweets(C, D), follows(A, C).;false;false
7;false;follows(E, A).;true;true
7;false,true;follows(E, F), recursion_accounttype(F, B).;true;false
7;false,true,true;follows(F, E), follows(A, F).;false;false
7;false,false;follows(A, G), recursion_accounttype(G, B).;true;true
7;false,false,true;tweets(A, H).;false;false
7;false,false,false;follows(A, I).;false;false
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;true;follows(C, D), recursion_accounttype(D, B).;false;true
8;true,false;follows(A, E), follows(E, A).;false;false
8;false;follows(F, A), follows(A, G).;true;true
8;false,true;follows(G, A), follows(G, F).;false;true
8;false,true,false;follows(H, F), recursion_accounttype(H, B).;false;false
8;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
8;false,false,false;follows(J, A).;false;false
9;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
9;true;follows(C, D).;true;false
9;true,true;follows(A, D).;true;true
9;true,true,true;follows(E, A), recursion_accounttype(E, B).;false;false
9;true,true,false;tweets(C, F), follows(D, C).;false;false
9;false;follows(A, G), follows(H, A).;false;true
9;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
9;false,false,false;follows(J, A).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.23843062524035266;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.4581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.424815601766179;  // std dev = 2.714, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, A) )
%   | | then if ( samebib(K, L), venue(L, B) )
%   | | | then return 0.14762261931003867;  // std dev = 2.796, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return -0.14185106490048768;  // std dev = 4.47e-08, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | then return 0.004815601766179008;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.20686012285620575;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.45935396641210174;  // std dev = 0.810, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.3982164798305049;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.3628735944379146;  // std dev = 2.715, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.13722572521892853;  // std dev = 0.058, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.004228390109386251;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.005199750239144775;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.1751801570305961;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.37391135762433364;  // std dev = 0.808, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.3269052770205085;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.29764451710777373;  // std dev = 2.715, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.12180522429396211;  // std dev = 0.052, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0037111125833978686;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.004568660166365278;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.14514481334590568;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.3022417434729106;  // std dev = 0.801, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.2574772746827477;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.23417928059327514;  // std dev = 2.716, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.10938844667377244;  // std dev = 0.048, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0032558270569705674;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.004012232942941111;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.11804668707041945;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.22993885966576902;  // std dev = 0.800, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.18279642983892433;  // std dev = 0.495, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | then if ( haswordtitle(H, I), haswordvenue(A, I) )
%   | | then return -0.09919616272853182;  // std dev = 0.044, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0028554031467501392;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | then return 0.0035220811797056916;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.09457696812283496;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.16521331839155376;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return 0.17288979964843887;  // std dev = 0.799, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.1341781404476313;  // std dev = 2.716, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, B) )
%   | | then if ( samebib(K, L), venue(L, A) )
%   | | | then return 0.15180621986321427;  // std dev = 2.772, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return -0.14122465611148827;  // std dev = 0.085, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.10539221621688086;  // std dev = 0.051, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return 0.0030906559935836462;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.07489163449109286;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.12426451796555618;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return 0.1433239482340581;  // std dev = 0.792, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.09966375874611053;  // std dev = 2.718, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, B) )
%   | | then if ( samebib(K, L), venue(L, A) )
%   | | | then return 0.13283872429165364;  // std dev = 2.770, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return -0.12496934903392155;  // std dev = 0.076, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.09589471268726639;  // std dev = 0.047, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return 0.002711187991890706;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.05877777591804268;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.10787527430262682;  // std dev = 0.792, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.0932178796168222;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.07482344019499644;  // std dev = 2.718, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.08750688874508028;  // std dev = 0.057, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.001143177527415723;  // std dev = 0.340, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.002377625936246765;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04582386394015474;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.08156275300060527;  // std dev = 0.793, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.07580220545994547;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.05516551387076186;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then return -0.030258858194054297;  // std dev = 0.328, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, M), haswordvenue(A, M) )
%   | | | then return -0.08078854266709418;  // std dev = 0.053, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0010023000760388666;  // std dev = 2.941, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | | | then return 0.005946477839326492;  // std dev = 2.848, 67.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=10 */
%   | | | else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.03554750876544446;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.06553433916803438;  // std dev = 0.791, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.04332425483610347;  // std dev = 0.495, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | then if ( haswordtitle(H, I), haswordvenue(A, I) )
%   | | then return -0.07500585552167638;  // std dev = 0.050, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 8.786912294782109E-4;  // std dev = 0.340, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | then return 0.0018508483759177015;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.557429
   AUC PR    = 0.428461
   CLL	      = -0.654029
   Precision = 0.637427 at threshold = 0.5
   Recall    = 0.041148
   F1        = 0.077305


Total learning time: 63.787997245788574 seconds
Total inference time: 7.666 seconds
AUC ROC: 0.557429


Results scoring model
   AUC ROC   = 0.591811
   AUC PR    = 0.419734
   CLL	      = -0.617608
   Precision = 0.578947 at threshold = 0.5
   Recall    = 0.059783
   F1        = 0.108374


Total scoring time: 1.054 seconds
Parameter learned model CLL: -0.617608


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'title(K, J), venue(K, A)', 'false,true,true': 'samebib(K, L), venue(L, B)', 'false,false': 'haswordvenue(B, M), haswordtitle(N, M)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.816, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.714, 13, 17], 'false,true,true,true': [2.796, 27, 11], 'false,true,true,false': [4.47e-08, 42, 0], 'false,true,false': [0.0, 7, 0], 'false,false,true': [0.354, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(A, K)', 'false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.81, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.715, 13, 17], 'false,true,true': [0.058, 12, 0], 'false,true,false': [0.354, 64, 11], 'false,false,true': [0.346, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(A, K)', 'false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.808, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.715, 13, 17], 'false,true,true': [0.052, 12, 0], 'false,true,false': [0.354, 64, 11], 'false,false,true': [0.346, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(A, K)', 'false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.801, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.716, 13, 17], 'false,true,true': [0.048, 12, 0], 'false,true,false': [0.354, 64, 11], 'false,false,true': [0.346, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordauthor(F, E)', 'false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false,true': 'haswordtitle(H, I), haswordvenue(A, I)', 'false,false': 'haswordvenue(A, J), haswordtitle(K, J)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.8, 1, 2], 'true,false,false': [0.495, 15, 20], 'false,true,true': [0.044, 12, 0], 'false,true,false': [0.354, 64, 11], 'false,false,true': [0.346, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordauthor(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'title(K, J), venue(K, B)', 'false,true,true': 'samebib(K, L), venue(L, A)', 'false,false': 'haswordvenue(A, M), haswordtitle(N, M)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [1.095, 2, 3], 'true,false,false,true': [0.799, 1, 2], 'true,false,false,false': [2.716, 13, 17], 'false,true,true,true': [2.772, 27, 11], 'false,true,true,false': [0.085, 42, 0], 'false,true,false': [0.051, 7, 0], 'false,false,true': [0.346, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordauthor(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'title(K, J), venue(K, B)', 'false,true,true': 'samebib(K, L), venue(L, A)', 'false,false': 'haswordvenue(A, M), haswordtitle(N, M)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [1.095, 2, 3], 'true,false,false,true': [0.792, 1, 2], 'true,false,false,false': [2.718, 13, 17], 'false,true,true,true': [2.77, 27, 11], 'false,true,true,false': [0.076, 42, 0], 'false,true,false': [0.047, 7, 0], 'false,false,true': [0.346, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(A, K)', 'false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.792, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.718, 13, 17], 'false,true,true': [0.057, 12, 0], 'false,true,false': [0.34, 64, 11], 'false,false,true': [0.346, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordauthor(J, I)', 'false,false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false,false,true': 'haswordtitle(L, M), haswordvenue(A, M)', 'false,false,false': 'haswordvenue(A, N), haswordtitle(P, N)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.793, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.717, 13, 17], 'false,true': [0.328, 7, 1], 'false,false,true,true': [0.053, 12, 0], 'false,false,true,false': [2.941, 64, 11], 'false,false,false,true': [2.848, 57, 10], 'false,false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordauthor(F, E)', 'false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false,true': 'haswordtitle(H, I), haswordvenue(A, I)', 'false,false': 'haswordvenue(A, J), haswordtitle(K, J)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.791, 1, 2], 'true,false,false': [0.495, 15, 20], 'false,true,true': [0.05, 12, 0], 'false,true,false': [0.34, 64, 11], 'false,false,true': [0.346, 64, 11], 'false,false,false': [0.0, 4, 0]}]]
[{'': [0.23762656230272572, 0.11496588764697444], 'true': [0.2356675262844691, 0.24376731301939172], 'true,false': [0.22222222222222224, 0.2448979591836734], 'true,false,false': [0.23999999999999994, 0.2455555555555551], 'false': [0.1104505218655035, 0.11985258772632539], 'false,false': [0.12515555555555502, 0.0], 'false,true': [0.11859374999999946, -7.93016446160826e-18], 'false,true,true': [0.20567867036011028, 4.7580986769649563e-17]}, {'': [0.23716066162823074, 0.11237704672357923], 'true': [0.2356675262844735, 0.24352902641532279], 'true,false': [0.21859724583033524, 0.2450060599606713], 'true,false,false': [0.23999999999999994, 0.2456619576377537], 'false': [0.11031023146367078, 0.11455237397192931], 'false,false': [0.119797633597279, 0.0], 'false,true': [0.00027758800721990284, 0.125155555555556]}, {'': [0.23670497169729698, 0.1120113358045344], 'true': [0.23566752628446727, 0.24320063124509553], 'true,false': [0.2176873624141201, 0.24497723310199554], 'true,false,false': [0.23999999999999994, 0.24568445879937523], 'false': [0.10979734463652976, 0.11437085679211725], 'false,false': [0.11977888330495866, 0.0], 'false,true': [0.00022718947614756615, 0.12515555555555488]}, {'': [0.236366928633617, 0.11174511656261758], 'true': [0.23566752628446358, 0.24295287544358235], 'true,false': [0.21362996677670285, 0.24513543757798242], 'true,false,false': [0.24, 0.24591380147975203], 'false': [0.10942753518020491, 0.11423459197528409], 'false,false': [0.11976238615698553, 0.0], 'false,true': [0.00018884541673870603, 0.12515555555555585]}, {'': [0.23616220430980786, 0.1115457316860401], 'true': [0.235667526284474, 0.2427652348477711], 'true,false': [0.2131559320007037, 0.24512772177417547], 'false': [0.10915302063534861, 0.11412967439456287], 'false,false': [0.11974788098828767, 0.0], 'false,true': [0.00015914109302825213, 0.1251555555555548]}, {'': [0.23605660990240468, 0.11139279816278876], 'true': [0.23566752628446164, 0.2426888394094676], 'true,false': [0.24000000000000005, 0.24299661737987807], 'true,false,false': [0.2130451018196103, 0.24585553324880668], 'false': [0.10894418975137116, 0.1140471778699808], 'false,false': [0.11973513465350441, 0.0], 'false,true': [0.1175851753590609, 0.0003668812044117766], 'false,true,true': [0.20227663251088057, 0.00017270148893045958]}, {'': [0.23600445219815216, 0.1088571764283193], 'true': [0.23566752628447166, 0.24261145798162903], 'true,false': [0.24, 0.242951124877278], 'true,false,false': [0.20908439017650907, 0.246164506334071], 'false': [0.10416908779669035, 0.11398116124759812], 'false,false': [0.11972393956177091, 0.0], 'false,true': [0.11255502403690207, 0.00031086611096314435], 'false,true,true': [0.20191098129725998, 0.00013828167507111213]}, {'': [0.23597931548587775, 0.10686233365458887], 'true': [0.23566752628446394, 0.2425447521612316], 'true,false': [0.20926430802875598, 0.24532428613878338], 'true,false,false': [0.24, 0.24616333067596485], 'false': [0.10040263698774578, 0.11392754357966155], 'false,false': [0.1197141112906167, 0.0], 'false,true': [0.0002733798355217011, 0.11533934099415429]}, {'': [0.23596804768169463, 0.1067588057764165], 'true': [0.23566752628446355, 0.24251462391009818], 'true,false': [0.20947739900971418, 0.24530297587213137], 'true,false,false': [0.24, 0.24612596617847504], 'false': [0.10736853403586116, 0.10669687060157894], 'false,false': [0.10025250715533676, 0.11451372240933401], 'false,false,false': [0.12103873376949545, 0.0], 'false,false,true': [0.00023622190827141468, 0.11533238976636633]}, {'': [0.23596257448372915, 0.10665762347817653], 'true': [0.23566752628447613, 0.24249091936344933], 'true,false': [0.20864271492865125, 0.24535325025197083], 'false': [0.10013235038625229, 0.11380933970485445], 'false,false': [0.1196583287912862, 0.0], 'false,true': [0.00020600844165374077, 0.11532629414074963]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
0;false,true;title(K, J), venue(K, A).;true;true
0;false,true,true;samebib(K, L), venue(L, B).;true;true
0;false,false;haswordvenue(B, M), haswordtitle(N, M).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
1;false,true;haswordtitle(J, K), haswordvenue(A, K).;true;true
1;false,false;haswordvenue(A, L), haswordtitle(M, L).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
2;false,true;haswordtitle(J, K), haswordvenue(A, K).;true;true
2;false,false;haswordvenue(A, L), haswordtitle(M, L).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
3;false,true;haswordtitle(J, K), haswordvenue(A, K).;true;true
3;false,false;haswordvenue(A, L), haswordtitle(M, L).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;false;haswordvenue(B, G), haswordtitle(H, G).;true;true
4;false,true;haswordtitle(H, I), haswordvenue(A, I).;true;true
4;false,false;haswordvenue(A, J), haswordtitle(K, J).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
5;false,true;title(K, J), venue(K, B).;true;true
5;false,true,true;samebib(K, L), venue(L, A).;true;true
5;false,false;haswordvenue(A, M), haswordtitle(N, M).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
6;false,true;title(K, J), venue(K, B).;true;true
6;false,true,true;samebib(K, L), venue(L, A).;true;true
6;false,false;haswordvenue(A, M), haswordtitle(N, M).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
7;false,true;haswordtitle(J, K), haswordvenue(A, K).;true;true
7;false,false;haswordvenue(A, L), haswordtitle(M, L).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;false;haswordvenue(B, I), haswordauthor(J, I).;true;true
8;false,false;haswordvenue(B, K), haswordtitle(L, K).;true;true
8;false,false,true;haswordtitle(L, M), haswordvenue(A, M).;true;true
8;false,false,false;haswordvenue(A, N), haswordtitle(P, N).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;false;haswordvenue(B, G), haswordtitle(H, G).;true;true
9;false,true;haswordtitle(H, I), haswordvenue(A, I).;true;true
9;false,false;haswordvenue(A, J), haswordtitle(K, J).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.23843062524035266;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.4581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.424815601766179;  // std dev = 2.714, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.004815601766179008;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.004815601766179008;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.20686012285620575;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.45935396641210174;  // std dev = 0.810, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.3982164798305049;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.3628735944379146;  // std dev = 2.715, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.004228390109386251;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.004228390109386251;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.1751801570305961;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.37391135762433364;  // std dev = 0.808, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.32650617096328266;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.29771103478397803;  // std dev = 2.715, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, A) )
%   | | then if ( samebib(K, L), venue(L, B) )
%   | | | then return 0.14974330653669568;  // std dev = 2.784, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return -0.1414965457075706;  // std dev = 0.042, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.11669340332070104;  // std dev = 0.028, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | then return 0.0037111125833978686;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.14514481334590568;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.30223164165896205;  // std dev = 0.801, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.2640212940879415;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.2330891696442343;  // std dev = 2.716, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.10980429489397554;  // std dev = 0.045, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0032558270569705674;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.003911681670084827;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.11804668707041945;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.202854360178253;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return 0.22993052047106874;  // std dev = 0.800, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.17945741331242893;  // std dev = 2.716, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.09953837016457323;  // std dev = 0.041, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0028554031467501392;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.00343356121135667;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.09457696812283496;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.1806835667946128;  // std dev = 0.795, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.1534248357320759;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.13535859022538124;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then return -0.029299214164223333;  // std dev = 0.328, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, M), haswordvenue(A, M) )
%   | | | then return -0.09097804211946432;  // std dev = 0.038, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.002503460836945874;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | | | then return 0.006870934527798606;  // std dev = 2.848, 67.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=10 */
%   | | | else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.07489163449109286;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.13567656881068915;  // std dev = 0.795, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.12558491925525686;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.10020564207075147;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then return -0.02552144145646687;  // std dev = 0.328, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, M), haswordvenue(A, M) )
%   | | | then return -0.08373867220642335;  // std dev = 0.035, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0021943081594878503;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | | | then return 0.006032037034381828;  // std dev = 2.848, 67.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=10 */
%   | | | else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.05877777591804268;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.1021681749662311;  // std dev = 0.795, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.09421131335017444;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.07522908501123093;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.07754148180103308;  // std dev = 0.033, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0019228798175884457;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.0023497673401917654;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04582386394015474;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.0872657722035121;  // std dev = 0.790, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.0714457666263614;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.05532083244636247;  // std dev = 2.718, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, B) )
%   | | then if ( samebib(K, L), venue(L, A) )
%   | | | then return 0.1527780796483891;  // std dev = 2.767, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return -0.14123338629737156;  // std dev = 0.109, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.08765332479998904;  // std dev = 0.066, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return 0.002060085588273558;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.03554750876544446;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.06624574645257926;  // std dev = 0.791, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.0569349856772392;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.04098840335850027;  // std dev = 2.718, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then return -0.0308084673501564;  // std dev = 0.328, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then if ( title(M, L), venue(M, A) )
%   | | | then return -0.0020583211049442483;  // std dev = 2.997, 80.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=11 */
%   | | | else return -0.0790829938014874;  // std dev = 0.061, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(B, N), haswordtitle(P, N) )
%   | | | then return 0.0055181472950830476;  // std dev = 2.847, 67.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=10 */
%   | | | else return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.557436
   AUC PR    = 0.428429
   CLL	      = -0.655245
   Precision = 0.637427 at threshold = 0.5
   Recall    = 0.041148
   F1        = 0.077305


Total learning time: 59.612523317337036 seconds
Total inference time: 8.08 seconds
AUC ROC: 0.557436


Results scoring model
   AUC ROC   = 0.592
   AUC PR    = 0.419788
   CLL	      = -0.618781
   Precision = 0.578947 at threshold = 0.5
   Recall    = 0.059783
   F1        = 0.108374


Total scoring time: 1.207 seconds
Refined model CLL: -0.618781


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.557429
   AUC PR    = 0.428461
   CLL	      = -0.654029
   Precision = 0.637427 at threshold = 0.5
   Recall    = 0.041148
   F1        = 0.077305


Total learning time: 125.6615205631256 seconds
Total inference time: 7.666 seconds
AUC ROC: 0.557429
Total revision time: 125.6615205631256
Best scored revision CLL: -0.617608


Dataset: 13_twitter_cora, Fold: 1, Type: Transfer (trRDN-B), Time: 00:26:00
{'AUC ROC': 0.557429, 'AUC PR': 0.428461, 'CLL': -0.654029, 'Precision': [0.637427, 0.5], 'Recall': 0.041148, 'F1': 0.077305, 'Learning time': 125.6615205631256, 'Inference time': 7.666, 'parameter': {'AUC ROC': 0.557429, 'AUC PR': 0.428461, 'CLL': -0.654029, 'Precision': [0.637427, 0.5], 'Recall': 0.041148, 'F1': 0.077305, 'Learning time': 63.787997245788574, 'Inference time': 7.666}}


Starting fold 2

Target train facts examples: 9016
Target train pos examples: 771
Target train neg examples: 544

Target test facts examples: 33542
Target test pos  examples: 2246
Target test neg examples: 4478

******************************************
Performing Parameter Learning
******************************************
Refine
0;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
0;true;follows(A, D).;false;false
0;false;follows(A, E), recursion_accounttype(E, B).;true;true
0;false,true;follows(A, F), follows(F, A).;false;true
0;false,true,false;follows(A, G), follows(G, E).;false;false
0;false,false;follows(H, A).;true;true
0;false,false,true;follows(I, H), follows(I, A).;false;false
0;false,false,false;follows(A, J), follows(J, K).;false;false
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;true;follows(A, C), tweets(A, D).;false;false
1;false;follows(A, E), recursion_accounttype(E, B).;true;true
1;false,true;tweets(A, F), tweets(E, F).;false;true
1;false,true,false;follows(G, A), follows(E, H).;false;false
1;false,false;follows(I, A).;true;true
1;false,false,true;follows(I, J), recursion_accounttype(J, B).;false;false
1;false,false,false;tweets(A, K).;false;false
2;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;true;follows(C, D), follows(D, A).;false;false
2;false;follows(E, A).;true;true
2;false,true;follows(F, E), follows(F, A).;false;true
2;false,true,false;follows(E, G), recursion_accounttype(G, B).;false;false
2;false,false;follows(A, H), follows(H, I).;true;true
2;false,false,true;recursion_accounttype(I, B).;false;false
2;false,false,false;follows(A, J).;false;false
3;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
3;true;tweets(A, D), tweets(C, D).;false;false
3;false;follows(E, A).;true;true
3;false,true;follows(F, E), recursion_accounttype(F, B).;true;false
3;false,true,true;follows(A, G), recursion_accounttype(G, B).;false;false
3;false,false;follows(A, H), recursion_accounttype(H, B).;true;true
3;false,false,true;follows(A, I), follows(I, H).;false;false
3;false,false,false;tweets(A, J), follows(A, K).;false;false
4;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
4;true;follows(A, D), follows(D, C).;true;false
4;true,true;follows(D, A).;false;true
4;true,true,false;tweets(A, E).;false;false
4;false;follows(F, A).;false;true
4;false,false;follows(A, G), recursion_accounttype(G, B).;true;true
4;false,false,true;follows(G, H), follows(H, G).;false;false
4;false,false,false;follows(A, I), follows(I, J).;false;false
5;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
5;true;follows(D, A), tweets(D, E).;true;true
5;true,true;recursion_accounttype(D, B).;false;false
5;true,false;follows(C, F), follows(F, C).;true;false
5;true,false,true;tweets(C, G), recursion_accounttype(F, B).;false;false
5;false;follows(A, H), follows(H, A).;false;true
5;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
5;false,false,false;tweets(A, J), follows(K, A).;false;false
6;;accounttype(A, B) :- follows(A, C).;true;true
6;true;follows(D, C), recursion_accounttype(D, B).;true;false
6;true,true;recursion_accounttype(C, B).;true;true
6;true,true,true;follows(E, A), follows(E, D).;false;false
6;true,true,false;follows(F, A), recursion_accounttype(F, B).;false;false
6;false;follows(G, A), recursion_accounttype(G, B).;false;true
6;false,false;follows(H, A).;false;true
6;false,false,false;tweets(A, I).;false;false
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;tweets(C, D), follows(A, C).;false;false
7;false;follows(E, A).;true;true
7;false,true;follows(E, F), recursion_accounttype(F, B).;true;false
7;false,true,true;follows(F, E), follows(A, F).;false;false
7;false,false;follows(A, G), recursion_accounttype(G, B).;true;true
7;false,false,true;tweets(A, H).;false;false
7;false,false,false;follows(A, I).;false;false
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;true;follows(C, D), recursion_accounttype(D, B).;false;true
8;true,false;follows(A, E), follows(E, A).;false;false
8;false;follows(F, A), follows(A, G).;true;true
8;false,true;follows(G, A), follows(G, F).;false;true
8;false,true,false;follows(H, F), recursion_accounttype(H, B).;false;false
8;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
8;false,false,false;follows(J, A).;false;false
9;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
9;true;follows(C, D).;true;false
9;true,true;follows(A, D).;true;true
9;true,true,true;follows(E, A), recursion_accounttype(E, B).;false;false
9;true,true,false;tweets(C, F), follows(D, C).;false;false
9;false;follows(A, G), follows(H, A).;false;true
9;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
9;false,false,false;follows(J, A).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.4356367001892301;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.5949910403626703;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.5640312880406888;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.37395569825543723;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.5062567560764839;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.48074388375574334;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.7194734122109543;  // std dev = 7.30e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.5791684237702857;  // std dev = 0.357, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( author(F, D), venue(F, B) )
%   | | then return -0.008145345695425868;  // std dev = 0.852, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( haswordvenue(B, C) )
%   | | | then return 0.22916842377028543;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.07083157622971455;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.3045453081923796;  // std dev = 0.494, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.4047531668618019;  // std dev = 1.919, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.42464571865829975;  // std dev = 1.908, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then return 0.4317030979309822;  // std dev = 0.348, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | else return 0.20848477447886868;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.4513849731813856;  // std dev = 0.357, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( author(F, D), venue(F, B) )
%   | | then return -0.006592444675509679;  // std dev = 0.852, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( haswordvenue(B, C) )
%   | | | then return 0.18162271221626702;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.05707271743850968;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.24042272651457108;  // std dev = 0.494, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.3098169854894562;  // std dev = 1.919, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.32456036871644;  // std dev = 1.905, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then return 0.33370432400678046;  // std dev = 0.346, 34.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=26 */
%   | | else return 0.15862414845603107;  // std dev = 0.499, 13.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.45357492933583404;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordauthor(G, C) )
%   | | | then return 0.140979150293288;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.140445595378058;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.18393962111816167;  // std dev = 0.493, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.23288770051702257;  // std dev = 1.919, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.24463018700680506;  // std dev = 1.906, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(A, M) )
%   | | then return 0.3674830626152011;  // std dev = 3.65e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.10183264543670413;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.0997167650237253;  // std dev = 0.488, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.3420187346918796;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.10793428239695535;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.10757954512648252;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.13942555862821335;  // std dev = 0.493, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.17498421379444495;  // std dev = 1.919, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.1850683606967233;  // std dev = 1.908, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.2868949074503533;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.0790491450754914;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.0774458362118892;  // std dev = 0.488, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.2547260711897147;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( author(F, D), venue(F, B) )
%   | | then return -0.06420493983816118;  // std dev = 0.844, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( haswordvenue(B, C) )
%   | | | then return 0.08193042573205755;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.11110750182700431;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.10490661092955003;  // std dev = 0.493, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.1324762415840328;  // std dev = 1.919, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.1415314382477041;  // std dev = 1.910, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then return 0.17344211184651906;  // std dev = 0.321, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | else return 0.060870033991458225;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.07975221987509558;  // std dev = 0.491, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.09940490343805486;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.07031736528875034;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.25010386463510836;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return 0.20248257489154176;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.04660747569805666;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.02194303139395883;  // std dev = 0.486, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.05990199334206989;  // std dev = 0.491, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.07675940061748199;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.05419068023475642;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.20617097806976625;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return 0.1717418468450019;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.03554611554298846;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.01668671461930438;  // std dev = 0.486, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04502521492477709;  // std dev = 0.491, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.05975396139129016;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.041993208807651755;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.1744612912226028;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return 0.14866955384699027;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.02703489354855761;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.012676305055825446;  // std dev = 0.486, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */


Results
   AUC ROC   = 0.53512
   AUC PR    = 0.34257
   CLL	      = -0.755668
   Precision = 0.353707 at threshold = 0.5
   Recall    = 0.955922
   F1        = 0.516354


Total learning time: 65.39391779899597 seconds
Total inference time: 6.716 seconds
AUC ROC: 0.53512


Results scoring model
   AUC ROC   = 0.553662
   AUC PR    = 0.662265
   CLL	      = -0.665008
   Precision = 0.594317 at threshold = 0.5
   Recall    = 0.976654
   F1        = 0.73896


Total scoring time: 1.158 seconds
Parameter learned model CLL: -0.665008


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)'}, {'true,true': [0.494, 518, 708], 'true,false,true': [0.44, 5, 14], 'true,false,false,true': [1.879, 5, 12], 'true,false,false,false': [0.0, 0, 5], 'false,true,true': [0.0, 0, 20], 'false,true,false': [0.495, 8, 6], 'false,false': [0.495, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)'}, {'true,true': [0.494, 518, 708], 'true,false,true': [0.44, 5, 14], 'true,false,false,true': [1.879, 5, 12], 'true,false,false,false': [0.0, 0, 5], 'false,true,true': [7.3e-08, 0, 20], 'false,true,false': [0.495, 8, 6], 'false,false': [0.495, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(E, C)', 'true,false': 'author(F, D), venue(F, B)', 'true,false,false': 'haswordvenue(B, C)', 'false': 'haswordvenue(A, G), haswordvenue(B, G)', 'false,true': 'haswordtitle(H, G)', 'false,true,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,false': 'haswordvenue(A, K), haswordtitle(L, K)'}, {'true,true': [0.357, 3, 17], 'true,false,true': [0.852, 3, 1], 'true,false,false,true': [1.0, 2, 2], 'true,false,false,false': [0.894, 4, 1], 'false,true,true': [0.494, 507, 687], 'false,true,false,true': [1.919, 5, 14], 'false,true,false,false': [1.908, 5, 17], 'false,false,true': [0.348, 7, 26], 'false,false,false': [0.495, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(E, C)', 'true,false': 'author(F, D), venue(F, B)', 'true,false,false': 'haswordvenue(B, C)', 'false': 'haswordvenue(A, G), haswordvenue(B, G)', 'false,true': 'haswordtitle(H, G)', 'false,true,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,false': 'haswordvenue(B, K), haswordtitle(L, K)'}, {'true,true': [0.357, 3, 17], 'true,false,true': [0.852, 3, 1], 'true,false,false,true': [1.0, 2, 2], 'true,false,false,false': [0.894, 4, 1], 'false,true,true': [0.494, 507, 687], 'false,true,false,true': [1.919, 5, 14], 'false,true,false,false': [1.905, 5, 17], 'false,false,true': [0.346, 8, 26], 'false,false,false': [0.499, 7, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordtitle(F, D)', 'true,true,false': 'haswordauthor(G, C)', 'true,false': 'haswordtitle(H, C)', 'true,false,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false,true': 'haswordtitle(L, M), haswordvenue(A, M)'}, {'true,true,true': [0.356, 3, 17], 'true,true,false,true': [1.0, 2, 2], 'true,true,false,false': [1.225, 6, 2], 'true,false,true': [0.493, 507, 687], 'true,false,false,true': [1.919, 5, 14], 'true,false,false,false': [1.906, 5, 17], 'false,true,true': [3.65e-08, 0, 20], 'false,true,false': [0.495, 8, 6], 'false,false': [0.488, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordtitle(F, D)', 'true,true,false': 'haswordvenue(A, D)', 'true,false': 'haswordtitle(G, C)', 'true,false,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(A, L)'}, {'true,true,true': [0.356, 3, 17], 'true,true,false,true': [1.0, 2, 2], 'true,true,false,false': [1.225, 6, 2], 'true,false,true': [0.493, 507, 687], 'true,false,false,true': [1.919, 5, 14], 'true,false,false,false': [1.908, 5, 17], 'false,true,true': [0.0, 0, 20], 'false,true,false': [0.495, 8, 6], 'false,false': [0.488, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(E, C)', 'true,false': 'author(F, D), venue(F, B)', 'true,false,false': 'haswordvenue(B, C)', 'false': 'haswordvenue(A, G), haswordvenue(B, G)', 'false,true': 'haswordtitle(H, G)', 'false,true,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,false': 'haswordvenue(A, K), haswordtitle(L, K)'}, {'true,true': [0.356, 3, 17], 'true,false,true': [0.844, 3, 1], 'true,false,false,true': [1.0, 2, 2], 'true,false,false,false': [0.894, 4, 1], 'false,true,true': [0.493, 507, 687], 'false,true,false,true': [1.919, 5, 14], 'false,true,false,false': [1.91, 5, 17], 'false,false,true': [0.321, 7, 26], 'false,false,false': [0.495, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(A, K)'}, {'true,true': [0.491, 518, 708], 'true,false,true': [0.44, 5, 14], 'true,false,false,true': [1.879, 5, 12], 'true,false,false,false': [0.0, 0, 5], 'false,true,true': [0.0, 0, 20], 'false,true,false': [0.495, 8, 6], 'false,false': [0.486, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(A, K)'}, {'true,true': [0.491, 518, 708], 'true,false,true': [0.44, 5, 14], 'true,false,false,true': [1.879, 5, 12], 'true,false,false,false': [0.0, 0, 5], 'false,true,true': [0.0, 0, 20], 'false,true,false': [0.495, 8, 6], 'false,false': [0.486, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(A, K)'}, {'true,true': [0.491, 518, 708], 'true,false,true': [0.44, 5, 14], 'true,false,false,true': [1.879, 5, 12], 'true,false,false,false': [0.0, 0, 5], 'false,true,true': [0.0, 0, 20], 'false,true,false': [0.495, 8, 6], 'false,false': [0.486, 8, 6]}]]
[{'': [0.24306651325713594, 0.22222222222222385], 'true': [0.24399564626142126, 0.1844140392623454], 'false': [0.17993079584775207, 0.24489795918367352], 'true,false': [0.19390581717451486, 0.17561983471074338], 'false,true': [-8.881784197001253e-17, 0.24489795918367352], 'true,false,false': [0.20761245674740453, 0.0]}, {'': [0.24265720194658624, 0.1968581969586748], 'true': [0.2439956462613994, 0.18151807630785122], 'false': [0.15465453537750243, 0.24489795918367324], 'true,false': [0.193905817174515, 0.17043669583228802], 'true,false,false': [0.20761245674740458, 0.0], 'false,true': [2.6645352591003756e-16, 0.24489795918367324]}, {'': [0.22952352137572604, 0.2399408807915939], 'false': [0.24253575522871804, 0.16862805083149535], 'false,true': [0.24431832529482975, 0.1787372059517856], 'true': [0.12749999999999978, 0.21079846857026777], 'true,false': [0.18163970606836305, 0.22222222222222218], 'true,false,false': [0.25, 0.16000000000000003], 'false,true,false': [0.1939058171745152, 0.16545366223293648], 'false,false': [0.12142920769740277, 0.2448979591836735]}, {'': [0.19994562389889503, 0.23941615243062966], 'false': [0.24232387034928365, 0.16128844856615307], 'false,true': [0.24431832529481307, 0.17846373208604321], 'true': [0.1275000000000001, 0.20475562200934608], 'true,false': [0.18166203218293545, 0.21406802670076014], 'true,false,false': [0.24999999999999997, 0.16000000000000003], 'false,true,false': [0.1939058171745152, 0.16502665466276994], 'false,false': [0.11945642868432348, 0.24852071005917167]}, {'': [0.24069494216805862, 0.1582848764013507], 'true': [0.22235943202310438, 0.24100749418558248], 'true,false': [0.24305232858162754, 0.17850681904003896], 'true,true': [0.12638548578341396, 0.2259333083280404], 'true,true,false': [0.25, 0.1875], 'true,false,false': [0.19390581717451524, 0.1651437859024073], 'false': [0.11793345063375363, 0.2385130172301659], 'false,true': [6.661338147750939e-17, 0.24489795918367332]}, {'': [0.23985630851153805, 0.15150827503449468], 'true': [0.19443390141188885, 0.24094361170427744], 'true,false': [0.2430259327288656, 0.1786795712120208], 'true,true': [0.12638783711164753, 0.21865471330084488], 'true,true,false': [0.24999999999999997, 0.18750000000000003], 'true,false,false': [0.19390581717451524, 0.16548250687430516], 'false': [0.11130397027148875, 0.23827957804200292], 'false,true': [0.0, 0.24489795918367357]}, {'': [0.17575220547417367, 0.23760783991847698], 'false': [0.24097450574444484, 0.14803449240782235], 'false,true': [0.24307170576536274, 0.17888325204994843], 'false,true,false': [0.1939058171745152, 0.16587122011508856], 'true': [0.1264355756739409, 0.19994676399267344], 'true,false': [0.17807777995553942, 0.20920089912995005], 'true,false,false': [0.24999999999999997, 0.16], 'false,false': [0.10316612133642698, 0.24489795918367335]}, {'': [0.23915920235188648, 0.14721102864400615], 'true': [0.24114667327553824, 0.17907636225373239], 'true,false': [0.19402215612348753, 0.16610439995463416], 'true,false,false': [0.20761245674740483, 0.0], 'false': [0.1067254339143864, 0.23594331439416183], 'false,true': [-2.2204460492503132e-17, 0.24489795918367346]}, {'': [0.2391320463567873, 0.14543702683431345], 'true': [0.24115197926825202, 0.17820663535769762], 'true,false': [0.19401877120949176, 0.16448427634830778], 'true,false,false': [0.20761245674740486, 0.0], 'false': [0.10533324065259328, 0.23589313186155556], 'false,true': [-2.7755575615628914e-17, 0.24489795918367346]}, {'': [0.23911986623237017, 0.1442829476861187], 'true': [0.24115963724657535, 0.1776845322307025], 'true,false': [0.19401588847293721, 0.16350954796801329], 'true,false,false': [0.20761245674740483, 0.0], 'false': [0.10442389786806645, 0.23585581928004312], 'false,true': [-1.3877787807814457e-17, 0.2448979591836735]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,false;haswordvenue(A, E), haswordtitle(F, E).;true;true
0;true,false,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
0;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
0;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,false;haswordvenue(A, E), haswordtitle(F, E).;true;true
1;true,false,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
1;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;true
4;false,true;haswordtitle(L, M), haswordvenue(A, M).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;false;haswordvenue(B, J), haswordtitle(K, J).;true;true
5;false,true;haswordtitle(K, L), haswordvenue(A, L).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,false;haswordvenue(B, E), haswordtitle(F, E).;true;true
7;true,false,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
7;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
7;false,true;haswordtitle(J, K), haswordvenue(A, K).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,false;haswordvenue(B, E), haswordtitle(F, E).;true;true
8;true,false,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
8;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
8;false,true;haswordtitle(J, K), haswordvenue(A, K).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,false;haswordvenue(B, E), haswordtitle(F, E).;true;true
9;true,false,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
9;false,true;haswordtitle(J, K), haswordvenue(A, K).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.4356367001892301;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.5949910403626703;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.5640312880406888;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.37395569825543723;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.5062567560764839;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.48074388375574334;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.7194734122109543;  // std dev = 7.30e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.30665618885999163;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.4047531668618019;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.386198448632422;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.5553664367462845;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.5553664367462846;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.20848477447886868;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.20848477447886868;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.24206322397592006;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.3261448737160187;  // std dev = 0.439, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.2788572331674748;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.4175135841583099;  // std dev = 1.49e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return 0.41751358415830986;  // std dev = 5.16e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.17062637354018512;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.17062637354018512;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.18614898381430323;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.24558668125641064;  // std dev = 0.439, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.20966773150020385;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.32071184716014967;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.3207118471601496;  // std dev = 2.11e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.13664585375352212;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.13664585375352212;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.14102718021002747;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.18620428986064222;  // std dev = 0.439, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.15537887054614685;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.25517224256948945;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.25517224256948945;  // std dev = 1.49e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.10762034996184425;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.10762034996184425;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.10608452896807775;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.14559490408881767;  // std dev = 0.439, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.11183314242527755;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.20975771563253556;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return 0.2097577156325356;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.08372807955323866;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.08372807955323866;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.3521068614621881;  // std dev = 0.357, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.002106861462188081;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.24789313853781192;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.07748374588430085;  // std dev = 0.494, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.11327685340371839;  // std dev = 1.912, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.10404467526895743;  // std dev = 1.888, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.17709649774527744;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.06457405393631672;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.06457405393631672;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.2649159929181119;  // std dev = 0.357, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.0015801533055608274;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, B) )
%   | | | then return -0.17196970527925867;  // std dev = 0.851, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.2362683919236003;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.05811967930175173;  // std dev = 0.494, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.08708932998253593;  // std dev = 1.913, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.08209244516485491;  // std dev = 1.890, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then return 0.12505817492037516;  // std dev = 0.315, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | else return 0.04949778322519479;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04491140204847389;  // std dev = 0.493, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.0681622287910751;  // std dev = 0.439, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.03926405178848064;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.15157755189469646;  // std dev = 5.27e-09, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return 0.13725260927983868;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.03777940363354101;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.024607053394731505;  // std dev = 0.491, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */


Results
   AUC ROC   = 0.535664
   AUC PR    = 0.343409
   CLL	      = -0.75533
   Precision = 0.353705 at threshold = 0.5
   Recall    = 0.958593
   F1        = 0.516741


Total learning time: 58.63006258010864 seconds
Total inference time: 6.777 seconds
AUC ROC: 0.535664


Results scoring model
   AUC ROC   = 0.542523
   AUC PR    = 0.650341
   CLL	      = -0.667848
   Precision = 0.591869 at threshold = 0.5
   Recall    = 0.981842
   F1        = 0.738537


Total scoring time: 1.059 seconds
Refined model CLL: -0.667848


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.53512
   AUC PR    = 0.34257
   CLL	      = -0.755668
   Precision = 0.353707 at threshold = 0.5
   Recall    = 0.955922
   F1        = 0.516354


Total learning time: 126.24098037910461 seconds
Total inference time: 6.716 seconds
AUC ROC: 0.53512
Total revision time: 126.24098037910461
Best scored revision CLL: -0.665008


Dataset: 13_twitter_cora, Fold: 2, Type: Transfer (trRDN-B), Time: 00:28:20
{'AUC ROC': 0.53512, 'AUC PR': 0.34257, 'CLL': -0.755668, 'Precision': [0.353707, 0.5], 'Recall': 0.955922, 'F1': 0.516354, 'Learning time': 126.24098037910461, 'Inference time': 6.716, 'parameter': {'AUC ROC': 0.53512, 'AUC PR': 0.34257, 'CLL': -0.755668, 'Precision': [0.353707, 0.5], 'Recall': 0.955922, 'F1': 0.516354, 'Learning time': 65.39391779899597, 'Inference time': 6.716}}


Starting fold 3

Target train facts examples: 9306
Target train pos examples: 581
Target train neg examples: 2222

Target test facts examples: 33252
Target test pos  examples: 2436
Target test neg examples: 2800

******************************************
Performing Parameter Learning
******************************************
Refine
0;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
0;true;follows(A, D).;false;false
0;false;follows(A, E), recursion_accounttype(E, B).;true;true
0;false,true;follows(A, F), follows(F, A).;false;true
0;false,true,false;follows(A, G), follows(G, E).;false;false
0;false,false;follows(H, A).;true;true
0;false,false,true;follows(I, H), follows(I, A).;false;false
0;false,false,false;follows(A, J), follows(J, K).;false;false
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;true;follows(A, C), tweets(A, D).;false;false
1;false;follows(A, E), recursion_accounttype(E, B).;true;true
1;false,true;tweets(A, F), tweets(E, F).;false;true
1;false,true,false;follows(G, A), follows(E, H).;false;false
1;false,false;follows(I, A).;true;true
1;false,false,true;follows(I, J), recursion_accounttype(J, B).;false;false
1;false,false,false;tweets(A, K).;false;false
2;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;true;follows(C, D), follows(D, A).;false;false
2;false;follows(E, A).;true;true
2;false,true;follows(F, E), follows(F, A).;false;true
2;false,true,false;follows(E, G), recursion_accounttype(G, B).;false;false
2;false,false;follows(A, H), follows(H, I).;true;true
2;false,false,true;recursion_accounttype(I, B).;false;false
2;false,false,false;follows(A, J).;false;false
3;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
3;true;tweets(A, D), tweets(C, D).;false;false
3;false;follows(E, A).;true;true
3;false,true;follows(F, E), recursion_accounttype(F, B).;true;false
3;false,true,true;follows(A, G), recursion_accounttype(G, B).;false;false
3;false,false;follows(A, H), recursion_accounttype(H, B).;true;true
3;false,false,true;follows(A, I), follows(I, H).;false;false
3;false,false,false;tweets(A, J), follows(A, K).;false;false
4;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
4;true;follows(A, D), follows(D, C).;true;false
4;true,true;follows(D, A).;false;true
4;true,true,false;tweets(A, E).;false;false
4;false;follows(F, A).;false;true
4;false,false;follows(A, G), recursion_accounttype(G, B).;true;true
4;false,false,true;follows(G, H), follows(H, G).;false;false
4;false,false,false;follows(A, I), follows(I, J).;false;false
5;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
5;true;follows(D, A), tweets(D, E).;true;true
5;true,true;recursion_accounttype(D, B).;false;false
5;true,false;follows(C, F), follows(F, C).;true;false
5;true,false,true;tweets(C, G), recursion_accounttype(F, B).;false;false
5;false;follows(A, H), follows(H, A).;false;true
5;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
5;false,false,false;tweets(A, J), follows(K, A).;false;false
6;;accounttype(A, B) :- follows(A, C).;true;true
6;true;follows(D, C), recursion_accounttype(D, B).;true;false
6;true,true;recursion_accounttype(C, B).;true;true
6;true,true,true;follows(E, A), follows(E, D).;false;false
6;true,true,false;follows(F, A), recursion_accounttype(F, B).;false;false
6;false;follows(G, A), recursion_accounttype(G, B).;false;true
6;false,false;follows(H, A).;false;true
6;false,false,false;tweets(A, I).;false;false
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;tweets(C, D), follows(A, C).;false;false
7;false;follows(E, A).;true;true
7;false,true;follows(E, F), recursion_accounttype(F, B).;true;false
7;false,true,true;follows(F, E), follows(A, F).;false;false
7;false,false;follows(A, G), recursion_accounttype(G, B).;true;true
7;false,false,true;tweets(A, H).;false;false
7;false,false,false;follows(A, I).;false;false
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;true;follows(C, D), recursion_accounttype(D, B).;false;true
8;true,false;follows(A, E), follows(E, A).;false;false
8;false;follows(F, A), follows(A, G).;true;true
8;false,true;follows(G, A), follows(G, F).;false;true
8;false,true,false;follows(H, F), recursion_accounttype(H, B).;false;false
8;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
8;false,false,false;follows(J, A).;false;false
9;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
9;true;follows(C, D).;true;false
9;true,true;follows(A, D).;true;true
9;true,true,true;follows(E, A), recursion_accounttype(E, B).;false;false
9;true,true,false;tweets(C, F), follows(D, C).;false;false
9;false;follows(A, G), follows(H, A).;false;true
9;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
9;false,false,false;follows(J, A).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.21089974416099605;  // std dev = 0.478, 1,545.000 (wgt'ed) examples reached here.  /* #neg=1,000 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.6581489350995123;  // std dev = 1.789, 20.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=16 */
%   | | | else return -0.14185106490048766;  // std dev = 6.50e-08, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   | | else if ( title(H, E), venue(H, B) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.024815601766178853;  // std dev = 1.291, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then return 0.001006077956655051;  // std dev = 0.350, 14.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | | else return 0.007681645379886196;  // std dev = 0.357, 107.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=16 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.19675291856911944;  // std dev = 0.482, 1,488.000 (wgt'ed) examples reached here.  /* #neg=943 #pos=545 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.5845951616112725;  // std dev = 2.089, 22.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return -0.14268181752680809;  // std dev = 0.002, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | | else if ( title(H, E), venue(H, A) )
%   | | | then return -0.14278872156997813;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.03902946024820369;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.03033402165730017;  // std dev = 3.232, 87.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=16 */
%   | | | else return -0.04426261959223524;  // std dev = 1.335, 22.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
%   | | else return -0.14265286434844943;  // std dev = 0.000744, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.16381625173125375;  // std dev = 0.481, 1,502.000 (wgt'ed) examples reached here.  /* #neg=957 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return -0.02077618783769531;  // std dev = 0.289, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | then if ( title(H, G), venue(H, B) )
%   | | | then return 0.046582705138423816;  // std dev = 3.041, 69.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=14 */
%   | | | else return -0.03798194012397854;  // std dev = 1.328, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.021037889448642134;  // std dev = 3.484, 103.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=18 */
%   | | | else return -0.1262013616026331;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D), haswordtitle(F, C) )
%   | | then return 0.27356137648034146;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( haswordtitle(G, C) )
%   | | | then return 0.062450265369230054;  // std dev = 3.040, 45.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=13 */
%   | | | else return 0.10689470981367473;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return 0.08308518600415067;  // std dev = 0.462, 42.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=13 */
%   | | else return 0.13566663963824302;  // std dev = 0.481, 1,425.000 (wgt'ed) examples reached here.  /* #neg=909 #pos=516 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( title(L, K), venue(L, B) )
%   | | then if ( samebib(L, M), venue(M, A) )
%   | | | then return 0.563517356958299;  // std dev = 1.786, 20.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=16 */
%   | | | else return -0.13028643433682627;  // std dev = 0.023, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | | else return -0.0387391037817393;  // std dev = 0.291, 21.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=2 */
%   | else return 0.001618078493266195;  // std dev = 0.329, 115.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=18 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C) )
%   | | then if ( haswordvenue(A, D) )
%   | | | then return 0.3887801942075056;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.09576920844494606;  // std dev = 2.944, 39.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=13 */
%   | | else return -0.0457078788255841;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.09928476366944952;  // std dev = 0.477, 1,511.000 (wgt'ed) examples reached here.  /* #neg=982 #pos=529 */
%   else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | then if ( title(I, H), venue(I, A) )
%   | | then if ( samebib(I, J), venue(J, B) )
%   | | | then return 0.44381936790901205;  // std dev = 2.207, 23.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=16 */
%   | | | else return -0.1311608146467176;  // std dev = 0.008, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   | | else return -0.04349944356913794;  // std dev = 0.285, 22.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then return -0.005434144595550842;  // std dev = 0.304, 111.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=18 */
%   | | else return -0.11480541619467079;  // std dev = 0.009, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.1209529105558446;  // std dev = 0.480, 42.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=16 */
%   | else return 0.08490583990059121;  // std dev = 0.478, 1,491.000 (wgt'ed) examples reached here.  /* #neg=962 #pos=529 */
%   else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | then if ( title(H, G), venue(H, A) )
%   | | then return -0.0030883984417085526;  // std dev = 0.292, 98.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=16 */
%   | | else return 0.08463121785123619;  // std dev = 0.416, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.014440788305541713;  // std dev = 2.916, 82.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=16 */
%   | | | else return -0.04105079217137453;  // std dev = 1.341, 22.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
%   | | else return -0.10207672226050472;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0795858273323207;  // std dev = 0.482, 1,487.000 (wgt'ed) examples reached here.  /* #neg=942 #pos=545 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.37661350802627375;  // std dev = 2.088, 22.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return -0.1156907955621621;  // std dev = 0.017, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | | else if ( title(H, E), venue(H, A) )
%   | | | then return -0.11708273642788401;  // std dev = 6.45e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0.018721965341437146;  // std dev = 1.291, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.006157639202030754;  // std dev = 2.909, 88.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=16 */
%   | | | else return -0.0443232179565225;  // std dev = 1.345, 25.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=2 */
%   | | else return -0.09482912315351362;  // std dev = 0.008, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.2440375064901387;  // std dev = 1.081, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.06580954668130473;  // std dev = 0.480, 36.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=13 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return -0.032831943480403004;  // std dev = 0.439, 50.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=13 */
%   | | else return 0.05055766526220405;  // std dev = 0.478, 1,456.000 (wgt'ed) examples reached here.  /* #neg=940 #pos=516 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, A) )
%   | | then if ( samebib(K, L), venue(L, B) )
%   | | | then return 0.4512284274952728;  // std dev = 1.789, 20.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=16 */
%   | | | else return -0.11906698214092415;  // std dev = 0.007, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   | | else if ( title(M, J), venue(M, B) )
%   | | | then return -0.10984442832977047;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return 0.039435435637830286;  // std dev = 1.291, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | else return -0.02667631778027269;  // std dev = 0.274, 121.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=18 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04897263978478195;  // std dev = 0.481, 1,501.000 (wgt'ed) examples reached here.  /* #neg=956 #pos=545 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.3281965679457861;  // std dev = 1.949, 21.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=16 */
%   | | | else return -0.10161180196243765;  // std dev = 0.021, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
%   | | else return 0.05305519565498471;  // std dev = 0.400, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return -0.005986213552481881;  // std dev = 2.519, 89.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=16 */
%   | | | else return -0.04418658687159601;  // std dev = 1.342, 28.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=2 */
%   | | else return -0.08332975774089223;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.03581144127611908;  // std dev = 0.480, 1,512.000 (wgt'ed) examples reached here.  /* #neg=967 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.3065855228153536;  // std dev = 1.952, 21.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=16 */
%   | | | else return -0.10653763180872541;  // std dev = 0.007, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | | else if ( title(H, E), venue(H, B) )
%   | | | then return -0.0956637175515704;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return 0.027141573286235104;  // std dev = 1.301, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then return -0.08808449796080338;  // std dev = 0.013, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | | then return 0.010547864511918007;  // std dev = 0.759, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | | | else return -0.03596582429150741;  // std dev = 2.744, 105.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=16 */


Results
   AUC ROC   = 0.564276
   AUC PR    = 0.511007
   CLL	      = -0.704612
   Precision = 0.55794 at threshold = 0.5
   Recall    = 0.053366
   F1        = 0.097415


Total learning time: 53.9869818687439 seconds
Total inference time: 5.879 seconds
AUC ROC: 0.564276


Results scoring model
   AUC ROC   = 0.594636
   AUC PR    = 0.278622
   CLL	      = -0.511457
   Precision = 0.592593 at threshold = 0.5
   Recall    = 0.055077
   F1        = 0.100787


Total scoring time: 1.628 seconds
Parameter learned model CLL: -0.511457


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordtitle(E, D)', 'false,true': 'title(F, E), venue(F, A)', 'false,true,true': 'samebib(F, G), venue(G, B)', 'false,true,false': 'title(H, E), venue(H, B)', 'false,false': 'haswordvenue(A, I), haswordauthor(J, I)'}, {'true': [0.478, 1, 545], 'false,true,true,true': [1.789, 4, 16], 'false,true,true,false': [6.5e-08, 64, 0], 'false,true,false,true': [0.0, 6, 0], 'false,true,false,false': [1.291, 10, 2], 'false,false,true': [0.35, 12, 2], 'false,false,false': [0.357, 91, 16]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordtitle(E, D)', 'false,true': 'title(F, E), venue(F, B)', 'false,true,true': 'samebib(F, G), venue(G, A)', 'false,true,false': 'title(H, E), venue(H, A)', 'false,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,false,true': 'title(K, J), venue(K, A)'}, {'true': [0.482, 943, 545], 'false,true,true,true': [2.089, 6, 16], 'false,true,true,false': [0.002, 61, 0], 'false,true,false,true': [0.0, 5, 0], 'false,true,false,false': [1.279, 9, 2], 'false,false,true,true': [3.232, 71, 16], 'false,false,true,false': [1.335, 20, 2], 'false,false,false': [0.000744, 6, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(B, F), haswordtitle(G, F)', 'false,false,true': 'title(H, G), venue(H, B)', 'false,false,false': 'haswordvenue(A, I), haswordtitle(J, I)'}, {'true': [0.481, 957, 545], 'false,true': [0.289, 15, 2], 'false,false,true,true': [3.041, 55, 14], 'false,false,true,false': [1.328, 18, 2], 'false,false,false,true': [3.484, 85, 18], 'false,false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordvenue(A, D), haswordtitle(F, C)', 'true,true,false': 'haswordtitle(G, C)', 'true,false': 'haswordvenue(A, H), haswordauthor(I, H)', 'false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false,true': 'title(L, K), venue(L, B)', 'false,true,true': 'samebib(L, M), venue(M, A)'}, {'true,true,true': [1.0, 2, 2], 'true,true,false,true': [3.04, 32, 13], 'true,true,false,false': [0.816, 2, 1], 'true,false,true': [0.462, 29, 13], 'true,false,false': [0.481, 909, 516], 'false,true,true,true': [1.786, 4, 16], 'false,true,true,false': [0.023, 65, 0], 'false,true,false': [0.291, 19, 2], 'false,false': [0.329, 97, 18]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordtitle(F, C)', 'true,true,true': 'haswordvenue(A, D)', 'false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false,true': 'title(I, H), venue(I, A)', 'false,true,true': 'samebib(I, J), venue(J, B)', 'false,false': 'haswordvenue(B, K), haswordtitle(L, K)'}, {'true,true,true,true': [0.816, 1, 2], 'true,true,true,false': [2.944, 26, 13], 'true,true,false': [0.894, 4, 1], 'true,false': [0.477, 982, 529], 'false,true,true,true': [2.207, 7, 16], 'false,true,true,false': [0.008, 66, 0], 'false,true,false': [0.285, 20, 2], 'false,false,true': [0.304, 93, 18], 'false,false,false': [0.009, 6, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'false': 'haswordvenue(B, F), haswordtitle(G, F)', 'false,true': 'title(H, G), venue(H, A)', 'false,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,false,true': 'title(K, J), venue(K, A)'}, {'true,true': [0.48, 26, 16], 'true,false': [0.478, 962, 529], 'false,true,true': [0.292, 82, 16], 'false,true,false': [0.416, 7, 2], 'false,false,true,true': [2.916, 66, 16], 'false,false,true,false': [1.341, 20, 2], 'false,false,false': [2.63e-09, 3, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordtitle(E, D)', 'false,true': 'title(F, E), venue(F, B)', 'false,true,true': 'samebib(F, G), venue(G, A)', 'false,true,false': 'title(H, E), venue(H, A)', 'false,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,false,true': 'title(K, J), venue(K, A)'}, {'true': [0.482, 942, 545], 'false,true,true,true': [2.088, 6, 16], 'false,true,true,false': [0.017, 65, 0], 'false,true,false,true': [6.45e-09, 9, 0], 'false,true,false,false': [1.291, 10, 2], 'false,false,true,true': [2.909, 72, 16], 'false,false,true,false': [1.345, 23, 2], 'false,false,false': [0.008, 5, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordauthor(F, C)', 'true,false': 'haswordvenue(A, G), haswordauthor(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'title(K, J), venue(K, A)', 'false,true,true': 'samebib(K, L), venue(L, B)', 'false,true,false': 'title(M, J), venue(M, B)'}, {'true,true,true': [1.081, 2, 3], 'true,true,false': [0.48, 23, 13], 'true,false,true': [0.439, 37, 13], 'true,false,false': [0.478, 940, 516], 'false,true,true,true': [1.789, 4, 16], 'false,true,true,false': [0.007, 66, 0], 'false,true,false,true': [5.27e-09, 11, 0], 'false,true,false,false': [1.291, 10, 2], 'false,false': [0.274, 103, 18]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordtitle(E, D)', 'false,true': 'title(F, E), venue(F, A)', 'false,true,true': 'samebib(F, G), venue(G, B)', 'false,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'false,false,true': 'title(J, I), venue(J, A)'}, {'true': [0.481, 956, 545], 'false,true,true,true': [1.949, 5, 16], 'false,true,true,false': [0.021, 75, 0], 'false,true,false': [0.4, 8, 2], 'false,false,true,true': [2.519, 73, 16], 'false,false,true,false': [1.342, 26, 2], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordtitle(E, D)', 'false,true': 'title(F, E), venue(F, A)', 'false,true,true': 'samebib(F, G), venue(G, B)', 'false,true,false': 'title(H, E), venue(H, B)', 'false,false': 'haswordvenue(B, I), haswordauthor(J, I)', 'false,false,false': 'haswordvenue(A, K), haswordauthor(L, K)'}, {'true': [0.48, 967, 545], 'false,true,true,true': [1.952, 5, 16], 'false,true,true,false': [0.007, 58, 0], 'false,true,false,true': [0.0, 11, 0], 'false,true,false,false': [1.301, 11, 2], 'false,false,true': [0.013, 3, 0], 'false,false,false,true': [0.759, 10, 2], 'false,false,false,false': [2.744, 89, 16]}]]
[{'': [0.22831767576793993, 0.1353737255927136], 'false': [0.14532871972318284, 0.12663069462468354], 'false,true': [0.15419501133786792, 0.09876543209876548], 'false,true,true': [0.1599999999999997, 6.591949208711867e-17], 'false,false': [0.12244897959183677, 0.12717267883657907], 'false,true,false': [-6.938893903907228e-18, 0.13888888888888892]}, {'': [0.2321145327494397, 0.12732599495274097], 'false': [0.14876039620405776, 0.10839761850183484], 'false,true': [0.1556081032638503, 0.10937500000000007], 'false,true,true': [0.1983337122469205, 7.571364318017853e-08], 'false,true,false': [0.0, 0.14876033057851246], 'false,false': [0.11306312781471355, 9.228592320424205e-08], 'false,false,true': [0.12005531589788046, 0.08097068548780656]}, {'': [0.2311897496635672, 0.11644142018438722], 'false': [0.08360598761910122, 0.1191500765062818], 'false,false': [0.12495781082795675, 0.11425345643308067], 'false,false,true': [0.1340099797266459, 0.08818365546729272], 'false,false,false': [0.1178800391178371, 0.0]}, {'': [0.23005936218908488, 0.11242157088708615], 'true': [0.2130177514792897, 0.23056760199042492], 'true,false': [0.2137188208616777, 0.23098504155123345], 'true,true': [0.25, 0.2065972222222219], 'true,true,false': [0.20543209876543175, 0.22222222222222224], 'false': [0.1171229113561968, 0.10794727659645927], 'false,true': [0.12414651815047592, 0.08457154358692028], 'false,true,true': [0.15949483321367444, 8.066264941907465e-06]}, {'': [0.2273846025447704, 0.09967559746653469], 'true': [0.22319897038667166, 0.2275147970264963], 'true,true': [0.22791671554420237, 0.16], 'true,true,true': [0.22222222222222224, 0.2222222222222222], 'false': [0.11137586532343816, 0.0884444585482071], 'false,true': [0.11807235020944395, 0.08130897547599028], 'false,true,true': [0.21172022684310046, 9.578443095516493e-07], 'false,false': [0.09261100550296865, 1.4704580125970054e-05]}, {'': [0.22895487861546318, 0.09524983824629775], 'true': [0.23059245994264616, 0.2288731498022716], 'false': [0.093413994577095, 0.0970754421632128], 'false,false': [0.09956788354497904, 2.3129646346357427e-18], 'false,false,true': [0.10368526447346164, 0.08179336006289514], 'false,true': [0.08547259456931951, 0.17283950617283952]}, {'': [0.2320427485264957, 0.09073761712527832], 'false': [0.09391855401270437, 0.08779389322805499], 'false,true': [0.09588799812473871, 0.08388171210532118], 'false,true,true': [0.19810369441631998, 4.587552429329118e-06], 'false,false': [0.09133620862914625, 1.2051482052150008e-05], 'false,false,true': [0.09614810632421879, 0.07241379873653923], 'false,true,false': [4.625929269271485e-18, 0.1388888888888888]}, {'': [0.2280310621728195, 0.08325034088900082], 'true': [0.23446229044226333, 0.22781408760750785], 'true,true': [0.23358827042583438, 0.23070987654320976], 'true,false': [0.19239999999999996, 0.22879935998067102], 'false': [0.09196533241192488, 0.07495498690405675], 'false,true': [0.09525652371266757, 0.07802435614576518], 'false,true,true': [0.16000000000000023, 8.107410314946625e-07], 'false,true,false': [2.523234146875356e-18, 0.13888888888888884]}, {'': [0.23112688880851656, 0.07344835464858976], 'false': [0.07985435490333101, 0.06772411233071729], 'false,true': [0.07115887021910582, 0.16], 'false,true,true': [0.18095316480304424, 5.635113660639549e-06], 'false,false': [0.06988569949876508, 0.0], 'false,false,true': [0.07129686004156552, 0.0642901830493432]}, {'': [0.230275352294627, 0.07366281896595912], 'false': [0.08002369090031211, 0.06783204851287745], 'false,true': [0.08153065213315254, 0.07425692284347918], 'false,true,true': [0.1814058956916099, 7.543890890343e-07], 'false,true,false': [-5.046468293750712e-18, 0.13017751479289946], 'false,false': [5.943694953351961e-05, 0.06948889794842443], 'false,false,false': [0.04801289121547401, 0.07172139889779144]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;false;haswordvenue(A, D), haswordtitle(E, D).;true;true
0;false,true;title(F, E), venue(F, A).;true;true
0;false,true,true;samebib(F, G), venue(G, B).;true;true
0;false,true,false;title(H, E), venue(H, B).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
1;false,true;title(F, E), venue(F, B).;true;true
1;false,true,true;samebib(F, G), venue(G, A).;true;true
1;false,true,false;title(H, E), venue(H, A).;true;true
1;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
2;false,false;haswordvenue(B, F), haswordtitle(G, F).;true;true
2;false,false,false;haswordvenue(A, I), haswordtitle(J, I).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;false;haswordvenue(B, J), haswordtitle(K, J).;true;true
3;false,true;title(L, K), venue(L, B).;true;true
3;false,true,true;samebib(L, M), venue(M, A).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;false,true;title(I, H), venue(I, A).;true;true
4;false,true,true;samebib(I, J), venue(J, B).;true;true
4;false,false;haswordvenue(B, K), haswordtitle(L, K).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;false;haswordvenue(B, F), haswordtitle(G, F).;true;true
5;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
6;false,true;title(F, E), venue(F, B).;true;true
6;false,true,true;samebib(F, G), venue(G, A).;true;true
6;false,true,false;title(H, E), venue(H, A).;true;true
6;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
7;false,true;title(K, J), venue(K, A).;true;true
7;false,true,true;samebib(K, L), venue(L, B).;true;true
7;false,true,false;title(M, J), venue(M, B).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
8;false,true;title(F, E), venue(F, A).;true;true
8;false,true,true;samebib(F, G), venue(G, B).;true;true
8;false,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;false;haswordvenue(A, D), haswordtitle(E, D).;true;true
9;false,true;title(F, E), venue(F, A).;true;true
9;false,true,true;samebib(F, G), venue(G, B).;true;true
9;false,true,false;title(H, E), venue(H, B).;true;true
9;false,false;haswordvenue(B, I), haswordauthor(J, I).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.20930872891394037;  // std dev = 0.477, 1,552.000 (wgt'ed) examples reached here.  /* #neg=1,007 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.5854216623722396;  // std dev = 2.089, 22.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return -0.14185106490048766;  // std dev = 7.30e-08, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
%   | | else return 0.19148226843284552;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return 0.058148935099512175;  // std dev = 0.400, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else return 0.01656477668367079;  // std dev = 0.365, 101.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=16 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.19211917338097648;  // std dev = 0.480, 1,508.000 (wgt'ed) examples reached here.  /* #neg=963 #pos=545 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.6172826479504642;  // std dev = 1.953, 21.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=16 */
%   | | | else return -0.14424427842086987;  // std dev = 0.010, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | | else if ( title(H, E), venue(H, A) )
%   | | | then return -0.1438794716989397;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return -0.0010223288417968435;  // std dev = 1.309, 14.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.029344843471538144;  // std dev = 3.278, 90.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=16 */
%   | | | else return -0.028872674318432774;  // std dev = 1.305, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | else return -0.1449191708564409;  // std dev = 0.005, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1567749125893191;  // std dev = 0.478, 1,536.000 (wgt'ed) examples reached here.  /* #neg=991 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return -0.03963136949335189;  // std dev = 0.277, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | then if ( title(H, G), venue(H, B) )
%   | | | then return 0.03590547159175113;  // std dev = 3.241, 83.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=16 */
%   | | | else return -0.045251094324422335;  // std dev = 1.338, 22.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.011075969037159733;  // std dev = 3.340, 100.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=16 */
%   | | | else return -0.12786890133108764;  // std dev = 0.004, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.14042518040301466;  // std dev = 0.481, 1,495.000 (wgt'ed) examples reached here.  /* #neg=950 #pos=545 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.4508623560386308;  // std dev = 2.205, 23.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=16 */
%   | | | else return -0.12998265438701714;  // std dev = 0.034, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
%   | | else return 0.08394923689748286;  // std dev = 0.416, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return 0.0015210237428506031;  // std dev = 3.335, 103.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=16 */
%   | | | else return -0.07079486378303808;  // std dev = 1.342, 24.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=2 */
%   | | else return -0.11611100731365435;  // std dev = 0.008, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.25051708967502084;  // std dev = 1.225, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.06004089919883036;  // std dev = 0.462, 42.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=13 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return 0.08385042300835419;  // std dev = 0.471, 39.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=13 */
%   | | else return 0.10466945755423233;  // std dev = 0.478, 1,457.000 (wgt'ed) examples reached here.  /* #neg=941 #pos=516 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then return -0.027798085045956343;  // std dev = 0.284, 14.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then if ( title(M, L), venue(M, B) )
%   | | | then return 0.022556510187487906;  // std dev = 3.285, 90.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=16 */
%   | | | else return 0.1308711014639691;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | else if ( haswordvenue(B, N), haswordtitle(P, N) )
%   | | | then return 0.013819339132580976;  // std dev = 3.025, 88.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=16 */
%   | | | else return -0.10226253393602756;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08702863638725965;  // std dev = 0.479, 1,529.000 (wgt'ed) examples reached here.  /* #neg=984 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.48804452119540537;  // std dev = 2.088, 22.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return -0.13173979614631118;  // std dev = 0.017, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   | | else if ( title(H, E), venue(H, B) )
%   | | | then return -0.11837741290458523;  // std dev = 7.45e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return 0.027246672376898408;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then return -0.1087671861641579;  // std dev = 0.009, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return -0.005513831139410224;  // std dev = 3.253, 110.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=18 */
%   | | | else return -0.09324880634218248;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06842503873695545;  // std dev = 0.479, 1,534.000 (wgt'ed) examples reached here.  /* #neg=989 #pos=545 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.46174552151116066;  // std dev = 1.789, 20.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=16 */
%   | | | else return -0.1161623136756969;  // std dev = 0.033, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
%   | | else return 0.1836967081495028;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return 0.015261450669656436;  // std dev = 2.877, 89.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=16 */
%   | | | else return -0.05214283135179372;  // std dev = 1.313, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | | else return -0.08663599728592415;  // std dev = 0.005, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05544757040431963;  // std dev = 0.479, 1,529.000 (wgt'ed) examples reached here.  /* #neg=984 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.38458730869989105;  // std dev = 2.092, 22.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return -0.11878696025360251;  // std dev = 0.017, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   | | else if ( title(H, E), venue(H, B) )
%   | | | then return -0.10170643328747318;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.030775639458312132;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return -0.023088427326363473;  // std dev = 2.687, 94.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=16 */
%   | | | else return -0.050458828513932893;  // std dev = 1.312, 21.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=2 */
%   | | else return -0.08269661390672696;  // std dev = 0.008, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.045520636928613196;  // std dev = 0.479, 1,521.000 (wgt'ed) examples reached here.  /* #neg=976 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return -0.05199215331393928;  // std dev = 0.222, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | then if ( title(H, G), venue(H, B) )
%   | | | then return -0.016535429237640255;  // std dev = 2.516, 79.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=14 */
%   | | | else return -0.03820250038391591;  // std dev = 1.307, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return -0.025809824156701355;  // std dev = 3.003, 119.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=18 */
%   | | | else return -0.07329259801534665;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.034694452191600375;  // std dev = 0.479, 1,525.000 (wgt'ed) examples reached here.  /* #neg=980 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.33458844403020627;  // std dev = 1.955, 21.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=16 */
%   | | | else return -0.1042279301233357;  // std dev = 0.017, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | | else if ( title(H, E), venue(H, B) )
%   | | | then return -0.09063363812450441;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0.011894542657650015;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return -0.010026987089947263;  // std dev = 2.608, 99.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=16 */
%   | | | else return 0.06008597978995524;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return -0.06846756677524096;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.564223
   AUC PR    = 0.508373
   CLL	      = -0.707755
   Precision = 0.544218 at threshold = 0.5
   Recall    = 0.032841
   F1        = 0.061943


Total learning time: 44.80550265312195 seconds
Total inference time: 4.875 seconds
AUC ROC: 0.564223


Results scoring model
   AUC ROC   = 0.594632
   AUC PR    = 0.278332
   CLL	      = -0.511695
   Precision = 0.583333 at threshold = 0.5
   Recall    = 0.024096
   F1        = 0.046281


Total scoring time: 1.51 seconds
Refined model CLL: -0.511695


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.564276
   AUC PR    = 0.511007
   CLL	      = -0.704612
   Precision = 0.55794 at threshold = 0.5
   Recall    = 0.053366
   F1        = 0.097415


Total learning time: 101.93048452186585 seconds
Total inference time: 5.879 seconds
AUC ROC: 0.564276
Total revision time: 101.93048452186585
Best scored revision CLL: -0.511457


Dataset: 13_twitter_cora, Fold: 3, Type: Transfer (trRDN-B), Time: 00:30:13
{'AUC ROC': 0.564276, 'AUC PR': 0.511007, 'CLL': -0.704612, 'Precision': [0.55794, 0.5], 'Recall': 0.053366, 'F1': 0.097415, 'Learning time': 101.93048452186585, 'Inference time': 5.879, 'parameter': {'AUC ROC': 0.564276, 'AUC PR': 0.511007, 'CLL': -0.704612, 'Precision': [0.55794, 0.5], 'Recall': 0.053366, 'F1': 0.097415, 'Learning time': 53.9869818687439, 'Inference time': 5.879}}


Starting fold 4

Target train facts examples: 8129
Target train pos examples: 747
Target train neg examples: 1068

Target test facts examples: 34429
Target test pos  examples: 2270
Target test neg examples: 3954

******************************************
Performing Parameter Learning
******************************************
Refine
0;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
0;true;follows(A, D).;false;false
0;false;follows(A, E), recursion_accounttype(E, B).;true;true
0;false,true;follows(A, F), follows(F, A).;false;true
0;false,true,false;follows(A, G), follows(G, E).;false;false
0;false,false;follows(H, A).;true;true
0;false,false,true;follows(I, H), follows(I, A).;false;false
0;false,false,false;follows(A, J), follows(J, K).;false;false
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;true;follows(A, C), tweets(A, D).;false;false
1;false;follows(A, E), recursion_accounttype(E, B).;true;true
1;false,true;tweets(A, F), tweets(E, F).;false;true
1;false,true,false;follows(G, A), follows(E, H).;false;false
1;false,false;follows(I, A).;true;true
1;false,false,true;follows(I, J), recursion_accounttype(J, B).;false;false
1;false,false,false;tweets(A, K).;false;false
2;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;true;follows(C, D), follows(D, A).;false;false
2;false;follows(E, A).;true;true
2;false,true;follows(F, E), follows(F, A).;false;true
2;false,true,false;follows(E, G), recursion_accounttype(G, B).;false;false
2;false,false;follows(A, H), follows(H, I).;true;true
2;false,false,true;recursion_accounttype(I, B).;false;false
2;false,false,false;follows(A, J).;false;false
3;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
3;true;tweets(A, D), tweets(C, D).;false;false
3;false;follows(E, A).;true;true
3;false,true;follows(F, E), recursion_accounttype(F, B).;true;false
3;false,true,true;follows(A, G), recursion_accounttype(G, B).;false;false
3;false,false;follows(A, H), recursion_accounttype(H, B).;true;true
3;false,false,true;follows(A, I), follows(I, H).;false;false
3;false,false,false;tweets(A, J), follows(A, K).;false;false
4;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
4;true;follows(A, D), follows(D, C).;true;false
4;true,true;follows(D, A).;false;true
4;true,true,false;tweets(A, E).;false;false
4;false;follows(F, A).;false;true
4;false,false;follows(A, G), recursion_accounttype(G, B).;true;true
4;false,false,true;follows(G, H), follows(H, G).;false;false
4;false,false,false;follows(A, I), follows(I, J).;false;false
5;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
5;true;follows(D, A), tweets(D, E).;true;true
5;true,true;recursion_accounttype(D, B).;false;false
5;true,false;follows(C, F), follows(F, C).;true;false
5;true,false,true;tweets(C, G), recursion_accounttype(F, B).;false;false
5;false;follows(A, H), follows(H, A).;false;true
5;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
5;false,false,false;tweets(A, J), follows(K, A).;false;false
6;;accounttype(A, B) :- follows(A, C).;true;true
6;true;follows(D, C), recursion_accounttype(D, B).;true;false
6;true,true;recursion_accounttype(C, B).;true;true
6;true,true,true;follows(E, A), follows(E, D).;false;false
6;true,true,false;follows(F, A), recursion_accounttype(F, B).;false;false
6;false;follows(G, A), recursion_accounttype(G, B).;false;true
6;false,false;follows(H, A).;false;true
6;false,false,false;tweets(A, I).;false;false
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;tweets(C, D), follows(A, C).;false;false
7;false;follows(E, A).;true;true
7;false,true;follows(E, F), recursion_accounttype(F, B).;true;false
7;false,true,true;follows(F, E), follows(A, F).;false;false
7;false,false;follows(A, G), recursion_accounttype(G, B).;true;true
7;false,false,true;tweets(A, H).;false;false
7;false,false,false;follows(A, I).;false;false
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;true;follows(C, D), recursion_accounttype(D, B).;false;true
8;true,false;follows(A, E), follows(E, A).;false;false
8;false;follows(F, A), follows(A, G).;true;true
8;false,true;follows(G, A), follows(G, F).;false;true
8;false,true,false;follows(H, F), recursion_accounttype(H, B).;false;false
8;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
8;false,false,false;follows(J, A).;false;false
9;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
9;true;follows(C, D).;true;false
9;true,true;follows(A, D).;true;true
9;true,true,true;follows(E, A), recursion_accounttype(E, B).;false;false
9;true,true,false;tweets(C, F), follows(D, C).;false;false
9;false;follows(A, G), follows(H, A).;false;true
9;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
9;false,false,false;follows(J, A).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.27854694504975613;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.2867203636709409;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.44905802600860323;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.44905802600860323;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.5724346493852266;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.1914822684328457;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.05814893509951237;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.05814893509951237;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.2411503606196619;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.24811816884741328;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.3851926776601658;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.3851926776601658;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.48767788391726297;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.16653882456488167;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.05092203251355405;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.05092203251355405;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.20289930723994204;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.20848477447886868;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.31518052304212246;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.31518052304212246;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.3912569620992536;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.1420942428155646;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.04434629760466855;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.04434629760466855;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.16640029396569495;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.17062637354018492;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.24804771389482108;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.24804771389482108;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.3005711547884894;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.11914890490746433;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.03842866223690456;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.03842866223690456;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.13360339271793026;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.13664585375352234;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.19020231164899937;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.19020231164899937;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.22629823971521876;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.0984134027840187;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.033154945921885746;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.033154945921885746;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.10551742939082928;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.10762034996184403;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.14379027326522745;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.14379027326522745;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.16984358676510128;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( title(L, K), venue(L, B) )
%   | | then if ( samebib(L, M), venue(M, A) )
%   | | | then return 0.31684340738050265;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=14 */
%   | | | else return -0.18315659261949777;  // std dev = 0.169, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | else return 0.05508940509084235;  // std dev = 0.454, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | else return 0.028495105925721097;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.08232251291348108;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.08372807955323855;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.10803450809035726;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.10803450809035726;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.12813320688246752;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.06985663255523145;  // std dev = 0.453, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.024408230135271918;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.01997971027360188;  // std dev = 0.381, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.06366213733661014;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.06457405393631681;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.08103386685025628;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.08103386685025628;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.09743184803714998;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.05616428500288389;  // std dev = 0.453, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.02084688910874009;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.01703879701562067;  // std dev = 0.380, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, B) )
%   | then if ( samebib(E, F), venue(F, A) )
%   | | then return 0.6285257899654785;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.34400552647535515;  // std dev = 0.073, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0.4285257899654785;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.046661810116601865;  // std dev = 0.493, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.054475401026286646;  // std dev = 3.490, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.06415866688950289;  // std dev = 2.598, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, M), haswordvenue(A, M) )
%   | | | then return 0.04484505311418679;  // std dev = 1.918, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.017760671541598414;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.017579965844601083;  // std dev = 0.383, 54.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=11 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.03734245176561485;  // std dev = 0.492, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.036593722070572786;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.04486526794085501;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.04726660744199421;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.06002833373015447;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.035613771601444605;  // std dev = 0.452, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.015098879183171418;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.012609897530799911;  // std dev = 0.380, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */


Results
   AUC ROC   = 0.571218
   AUC PR    = 0.431141
   CLL	      = -0.637597
   Precision = 0.721212 at threshold = 0.5
   Recall    = 0.052423
   F1        = 0.097741


Total learning time: 94.73827385902405 seconds
Total inference time: 7.804 seconds
AUC ROC: 0.571218


Results scoring model
   AUC ROC   = 0.548727
   AUC PR    = 0.461688
   CLL	      = -0.666145
   Precision = 0.661017 at threshold = 0.5
   Recall    = 0.052209
   F1        = 0.096774


Total scoring time: 1.258 seconds
Parameter learned model CLL: -0.666145


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(B, G)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)'}, {'true,true': [0.494, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(B, G)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)'}, {'true,true': [0.494, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(A, G)', 'true,false,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)'}, {'true,true': [0.494, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(B, G)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)'}, {'true,true': [0.494, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(A, G)', 'true,false,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)'}, {'true,true': [0.494, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(B, G)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'title(L, K), venue(L, B)', 'false,true,true': 'samebib(L, M), venue(M, A)'}, {'true,true': [0.494, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true,true': [2.619, 14, 14], 'false,true,true,false': [0.169, 35, 0], 'false,true,false': [0.454, 7, 3], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(B, G)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(A, L)'}, {'true,true': [0.494, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.453, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.381, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(A, G)', 'true,false,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(A, L)'}, {'true,true': [0.494, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.453, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.38, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordauthor(D, C)', 'true': 'author(E, D), venue(E, B)', 'true,true': 'samebib(E, F), venue(F, A)', 'false': 'haswordvenue(A, G), haswordvenue(B, G)', 'false,true': 'haswordtitle(H, G)', 'false,true,false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false,false,true': 'haswordtitle(L, M), haswordvenue(A, M)'}, {'true,true,true': [0.0, 0, 8], 'true,true,false': [0.073, 8, 0], 'true,false': [0.894, 1, 4], 'false,true,true': [0.493, 924, 664], 'false,true,false,true': [3.49, 25, 25], 'false,true,false,false': [2.598, 11, 18], 'false,false,true,true': [1.918, 12, 6], 'false,false,true,false': [2.966, 44, 11], 'false,false,false': [0.383, 43, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(B, G)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(A, L)'}, {'true,true': [0.492, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.452, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.38, 44, 11]}]]
[{'': [0.24455361249545102, 0.17089843750000108], 'true': [0.24366352318011741, 0.24803717352988336], 'true,false': [0.25000000000000133, 0.2354340071343634], 'true,false,true': [0.24489795918367302, 0.2417355371900822], 'true,false,false': [0.2417355371900822, 0.20408163265306106], 'false': [0.17864514918371124, 0.15999999999999948], 'false,true': [0.22222222222222232, 0.15999999999999948]}, {'': [0.24423965838627756, 0.17036542604714275], 'true': [0.24366352318012574, 0.24554974033866345], 'true,false': [0.24813620683257942, 0.23456996391329935], 'true,false,true': [0.244897959183673, 0.2417355371900833], 'true,false,false': [0.2417355371900833, 0.20408163265306115], 'false': [0.17782577785291803, 0.1600000000000007], 'false,true': [0.22222222222222207, 0.1600000000000007]}, {'': [0.24393157221315048, 0.16990467702453838], 'true': [0.2436635231801326, 0.24310195846820273], 'true,false': [0.24631150685892017, 0.2337064665173658], 'true,false,true': [0.24489795918367316, 0.24173553719008264], 'true,false,false': [0.24173553719008264, 0.20408163265306115], 'false': [0.1771174918718374, 0.15999999999999953], 'false,true': [0.22222222222222218, 0.15999999999999953]}, {'': [0.24371075047936078, 0.16953742675793848], 'true': [0.24366352318009946, 0.2413696703282902], 'true,false': [0.24498343086187796, 0.2331518261352126], 'true,false,true': [0.24489795918367355, 0.24173553719008264], 'true,false,false': [0.24173553719008264, 0.2040816326530612], 'false': [0.17655293676131073, 0.15999999999999967], 'false,true': [0.2222222222222222, 0.15999999999999967]}, {'': [0.24358519092549577, 0.16926465814576505], 'true': [0.2436635231801065, 0.24040290855188662], 'true,false': [0.2442132411930144, 0.23288524759022633], 'true,false,true': [0.24489795918367332, 0.2417355371900829], 'true,false,false': [0.2417355371900829, 0.20408163265306128], 'false': [0.17613362348097328, 0.15999999999999995], 'false,true': [0.22222222222222218, 0.15999999999999995]}, {'': [0.24352324389713026, 0.16907391107668154], 'true': [0.2436635231801034, 0.2399333213191563], 'true,false': [0.24382884959637013, 0.23277095782172405], 'true,false,true': [0.2448979591836737, 0.24173553719008273], 'true,false,false': [0.24173553719008273, 0.2040816326530612], 'false': [0.17584039773694393, 0.1599999999999999], 'false,true': [0.1710648123033893, 0.20570499737934805], 'false,true,true': [0.24498872320132214, 0.0008145724739318944]}, {'': [0.24349468828678988, 0.16013750724301953], 'true': [0.24366352318011533, 0.2397184616663663], 'true,false': [0.24365206723466534, 0.2327206345310192], 'true,false,true': [0.24489795918367374, 0.24173553719008273], 'true,false,false': [0.24173553719008273, 0.20408163265306126], 'false': [0.17156648043935313, 0.14482872853024473], 'false,true': [0.2053522622158378, 0.16000000000000006]}, {'': [0.24348173271512646, 0.15988420427285616], 'true': [0.2436635231801038, 0.23962063189587657], 'true,false': [0.24357324953519552, 0.2326959022580774], 'true,false,true': [0.24489795918367335, 0.2417355371900827], 'true,false,false': [0.2417355371900827, 0.2040816326530612], 'false': [0.17129149354646322, 0.14465427371792391], 'false,true': [0.2048535189047838, 0.16000000000000014]}, {'': [0.2351288193526673, 0.23733727513451353], 'false': [0.24312765792990348, 0.16072011971193265], 'false,true': [0.2432982888032934, 0.23957464981292653], 'false,true,false': [0.24353802746155115, 0.23268189473355322], 'true': [0.23909514038219287, 0.15999999999999998], 'true,true': [-5.551115123125783e-17, 0.005281700035315362], 'false,false': [0.1711005267856774, 0.14666030470019345], 'false,false,true': [0.20446611807683163, 0.16000000000000014]}, {'': [0.24232663749811895, 0.15945140464067725], 'true': [0.24246025548246913, 0.23956535636387866], 'true,false': [0.24352335181776882, 0.23267648614881536], 'true,false,true': [0.24489795918367335, 0.24173553719008256], 'true,false,false': [0.2417355371900827, 0.20408163265306123], 'false': [0.17096859694592184, 0.14413246213190573], 'false,true': [0.2041666673683357, 0.16000000000000011]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;false;haswordvenue(A, J), haswordtitle(K, J).;true;true
5;false,true;title(L, K), venue(L, B).;true;true
5;false,true,true;samebib(L, M), venue(M, A).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordauthor(D, C).;true;true
8;true;author(E, D), venue(E, B).;true;true
8;true,true;samebib(E, F), venue(F, A).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.27854694504975613;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.2867203636709409;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.44905802600860323;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.44905802600860323;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.5724346493852266;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.1914822684328457;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.05814893509951237;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.05814893509951237;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.2411503606196619;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.24811816884741328;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.3851926776601658;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.3851926776601658;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.48767788391726297;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.16653882456488167;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.05092203251355405;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.05092203251355405;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.20289930723994204;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.20848477447886868;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.31518052304212246;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.31518052304212246;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.3912569620992536;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.1420942428155646;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.04434629760466855;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.04434629760466855;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.16640029396569495;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.17062637354018492;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.24804771389482108;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.24804771389482108;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.3005711547884894;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.11914890490746433;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.03842866223690456;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.03842866223690456;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.13360339271793026;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.13664585375352234;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.19020231164899937;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.19020231164899937;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.22629823971521876;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.0984134027840187;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.033154945921885746;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.033154945921885746;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.6851194194405705;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.3148805805594295;  // std dev = 1.05e-08, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.4851194194405705;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.103255439591714;  // std dev = 0.493, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.12353511621533306;  // std dev = 3.492, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.1500790041100246;  // std dev = 2.598, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(B, M) )
%   | | then return 0.08026654944252247;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.028495105925721097;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.028495105925721097;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.08223166766472043;  // std dev = 0.492, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.08012368931034408;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.10646400577485697;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.113090430276702;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.13293567594053649;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.06479591611329234;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.024408230135271918;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.024408230135271918;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.06360288476548132;  // std dev = 0.492, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.06171941813443866;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.0798548269627687;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.08483269039127353;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.10097419867196318;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.05187916934404051;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.02084688910874009;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.02084688910874009;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then return 0.12904772108841087;  // std dev = 0.382, 15.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
%   | | else return 0.33654614035427816;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then if ( author(I, H), venue(I, A) )
%   | | | then return 0.12908879207513904;  // std dev = 1.871, 14.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   | | | else return 0.3790887920751389;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordtitle(J, C) )
%   | | | then return 0.0456493016292885;  // std dev = 19.534, 1,570.000 (wgt'ed) examples reached here.  /* #neg=916 #pos=654 */
%   | | | else return 0.05801950304616665;  // std dev = 4.351, 79.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=43 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(B, M) )
%   | | then return 0.04126932998424623;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.017760671541598414;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.017760671541598414;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.45447592590536745;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.3063162696683965;  // std dev = 1.49e-08, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.25261750421872453;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.03613230772511243;  // std dev = 0.493, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.03877936267970321;  // std dev = 3.490, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.052787477910071774;  // std dev = 2.598, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(B, M) )
%   | | then return 0.03266374873483021;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.015098879183171418;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.015098879183171418;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */


Results
   AUC ROC   = 0.567525
   AUC PR    = 0.425392
   CLL	      = -0.643373
   Precision = 0.546125 at threshold = 0.5
   Recall    = 0.065198
   F1        = 0.11649


Total learning time: 89.96853637695312 seconds
Total inference time: 7.841 seconds
AUC ROC: 0.567525


Results scoring model
   AUC ROC   = 0.55086
   AUC PR    = 0.471773
   CLL	      = -0.666406
   Precision = 0.671875 at threshold = 0.5
   Recall    = 0.057564
   F1        = 0.106042


Total scoring time: 1.297 seconds
Refined model CLL: -0.666406


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.571218
   AUC PR    = 0.431141
   CLL	      = -0.637597
   Precision = 0.721212 at threshold = 0.5
   Recall    = 0.052423
   F1        = 0.097741


Total learning time: 187.26181023597715 seconds
Total inference time: 7.804 seconds
AUC ROC: 0.571218
Total revision time: 187.26181023597715
Best scored revision CLL: -0.666145


Dataset: 13_twitter_cora, Fold: 4, Type: Transfer (trRDN-B), Time: 00:33:37
{'AUC ROC': 0.571218, 'AUC PR': 0.431141, 'CLL': -0.637597, 'Precision': [0.721212, 0.5], 'Recall': 0.052423, 'F1': 0.097741, 'Learning time': 187.26181023597715, 'Inference time': 7.804, 'parameter': {'AUC ROC': 0.571218, 'AUC PR': 0.431141, 'CLL': -0.637597, 'Precision': [0.721212, 0.5], 'Recall': 0.052423, 'F1': 0.097741, 'Learning time': 94.73827385902405, 'Inference time': 7.804}}


Starting fold 5

Target train facts examples: 8644
Target train pos examples: 550
Target train neg examples: 500

Target test facts examples: 33914
Target test pos  examples: 2467
Target test neg examples: 4522

******************************************
Performing Parameter Learning
******************************************
Refine
0;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
0;true;follows(A, D).;false;false
0;false;follows(A, E), recursion_accounttype(E, B).;true;true
0;false,true;follows(A, F), follows(F, A).;false;true
0;false,true,false;follows(A, G), follows(G, E).;false;false
0;false,false;follows(H, A).;true;true
0;false,false,true;follows(I, H), follows(I, A).;false;false
0;false,false,false;follows(A, J), follows(J, K).;false;false
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;true;follows(A, C), tweets(A, D).;false;false
1;false;follows(A, E), recursion_accounttype(E, B).;true;true
1;false,true;tweets(A, F), tweets(E, F).;false;true
1;false,true,false;follows(G, A), follows(E, H).;false;false
1;false,false;follows(I, A).;true;true
1;false,false,true;follows(I, J), recursion_accounttype(J, B).;false;false
1;false,false,false;tweets(A, K).;false;false
2;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;true;follows(C, D), follows(D, A).;false;false
2;false;follows(E, A).;true;true
2;false,true;follows(F, E), follows(F, A).;false;true
2;false,true,false;follows(E, G), recursion_accounttype(G, B).;false;false
2;false,false;follows(A, H), follows(H, I).;true;true
2;false,false,true;recursion_accounttype(I, B).;false;false
2;false,false,false;follows(A, J).;false;false
3;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
3;true;tweets(A, D), tweets(C, D).;false;false
3;false;follows(E, A).;true;true
3;false,true;follows(F, E), recursion_accounttype(F, B).;true;false
3;false,true,true;follows(A, G), recursion_accounttype(G, B).;false;false
3;false,false;follows(A, H), recursion_accounttype(H, B).;true;true
3;false,false,true;follows(A, I), follows(I, H).;false;false
3;false,false,false;tweets(A, J), follows(A, K).;false;false
4;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
4;true;follows(A, D), follows(D, C).;true;false
4;true,true;follows(D, A).;false;true
4;true,true,false;tweets(A, E).;false;false
4;false;follows(F, A).;false;true
4;false,false;follows(A, G), recursion_accounttype(G, B).;true;true
4;false,false,true;follows(G, H), follows(H, G).;false;false
4;false,false,false;follows(A, I), follows(I, J).;false;false
5;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
5;true;follows(D, A), tweets(D, E).;true;true
5;true,true;recursion_accounttype(D, B).;false;false
5;true,false;follows(C, F), follows(F, C).;true;false
5;true,false,true;tweets(C, G), recursion_accounttype(F, B).;false;false
5;false;follows(A, H), follows(H, A).;false;true
5;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
5;false,false,false;tweets(A, J), follows(K, A).;false;false
6;;accounttype(A, B) :- follows(A, C).;true;true
6;true;follows(D, C), recursion_accounttype(D, B).;true;false
6;true,true;recursion_accounttype(C, B).;true;true
6;true,true,true;follows(E, A), follows(E, D).;false;false
6;true,true,false;follows(F, A), recursion_accounttype(F, B).;false;false
6;false;follows(G, A), recursion_accounttype(G, B).;false;true
6;false,false;follows(H, A).;false;true
6;false,false,false;tweets(A, I).;false;false
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;tweets(C, D), follows(A, C).;false;false
7;false;follows(E, A).;true;true
7;false,true;follows(E, F), recursion_accounttype(F, B).;true;false
7;false,true,true;follows(F, E), follows(A, F).;false;false
7;false,false;follows(A, G), recursion_accounttype(G, B).;true;true
7;false,false,true;tweets(A, H).;false;false
7;false,false,false;follows(A, I).;false;false
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;true;follows(C, D), recursion_accounttype(D, B).;false;true
8;true,false;follows(A, E), follows(E, A).;false;false
8;false;follows(F, A), follows(A, G).;true;true
8;false,true;follows(G, A), follows(G, F).;false;true
8;false,true,false;follows(H, F), recursion_accounttype(H, B).;false;false
8;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
8;false,false,false;follows(J, A).;false;false
9;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
9;true;follows(C, D).;true;false
9;true,true;follows(A, D).;true;true
9;true,true,true;follows(E, A), recursion_accounttype(E, B).;false;false
9;true,true,false;tweets(C, F), follows(D, C).;false;false
9;false;follows(A, G), follows(H, A).;false;true
9;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
9;false,false,false;follows(J, A).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.443242102801371;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.7291166770349955;  // std dev = 0.335, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, B) )
%   | | then if ( samebib(G, H), venue(H, A) )
%   | | | then return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(I, F), venue(I, A) )
%   | | | then return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.15083186192878065;  // std dev = 2.913, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( haswordtitle(L, J) )
%   | | | then return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.17522210583121967;  // std dev = 2.980, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.051131391239862906;  // std dev = 0.395, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.3803254334818479;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.6157326050686436;  // std dev = 0.335, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, A) )
%   | | then if ( samebib(G, H), venue(H, B) )
%   | | | then return 0.6392119282680097;  // std dev = 0.899, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.15769426647032894;  // std dev = 0.016, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.10912768446848493;  // std dev = 0.441, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( haswordtitle(K, I) )
%   | | | then return 0.03693744759731563;  // std dev = 0.807, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.1534329638272584;  // std dev = 2.940, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.03825072160333175;  // std dev = 2.992, 59.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return 0.05181004363723003;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.31149293361789177;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.48283090502633463;  // std dev = 0.335, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, A) )
%   | | then if ( samebib(G, H), venue(H, B) )
%   | | | then return 0.5336799076940315;  // std dev = 0.901, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.13786678533886548;  // std dev = 0.014, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(I, F), venue(I, B) )
%   | | | then return -0.17891175899361775;  // std dev = 0.003, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.11361319919327112;  // std dev = 2.883, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, B) )
%   | | | then return 0.1739831779544379;  // std dev = 1.238, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.10938905811490465;  // std dev = 2.785, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.03904673565045959;  // std dev = 0.395, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.5934536245591475;  // std dev = 0.082, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.17888762943411973;  // std dev = 2.596, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.12448270489505192;  // std dev = 1.921, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( haswordtitle(J, H) )
%   | | | then return 0.19883064937713968;  // std dev = 2.542, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   | | | else return -0.1151284360172542;  // std dev = 1.909, 23.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
%   | | else return 0.27353177183826655;  // std dev = 0.485, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | then if ( author(M, L), venue(M, B) )
%   | | then return 0.1726415428713005;  // std dev = 0.437, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.07550600557239043;  // std dev = 0.435, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.05290563259476416;  // std dev = 0.410, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.4505277728309437;  // std dev = 0.082, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.1376944395198063;  // std dev = 2.596, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.09636055497089646;  // std dev = 1.925, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | | else if ( haswordtitle(H, C) )
%   | | | then return 0.195648341152727;  // std dev = 13.409, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | | else return 0.3108491693277383;  // std dev = 1.602, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, A) )
%   | | then return 0.1377437099708408;  // std dev = 0.390, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( author(L, J), venue(L, B) )
%   | | | then return -0.16215876772736362;  // std dev = 0.000199, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.08658376719099665;  // std dev = 2.877, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else return 0.04385375959400096;  // std dev = 0.412, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.1409838282956322;  // std dev = 0.486, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else return 0.2937818327061129;  // std dev = 0.290, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, B) )
%   | | then if ( samebib(H, I), venue(I, A) )
%   | | | then return 0.4532338589630621;  // std dev = 0.904, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.18906726773179935;  // std dev = 0.018, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.05542477644671857;  // std dev = 0.434, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( haswordtitle(L, J) )
%   | | | then return -0.01623625667975549;  // std dev = 0.685, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.08811169972350617;  // std dev = 2.898, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.013301722390585989;  // std dev = 2.990, 59.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return 0.02825733727193116;  // std dev = 2.967, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.10612844224522411;  // std dev = 0.486, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else return 0.229149040975623;  // std dev = 0.289, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, B) )
%   | | then return 0.09158733495697544;  // std dev = 0.382, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( author(I, G), venue(I, A) )
%   | | | then return -0.18192477025043804;  // std dev = 0.000322, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.06260676911084619;  // std dev = 2.851, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | | then return -0.1776041211121839;  // std dev = 0.032, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.08260013380028933;  // std dev = 4.044, 83.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=24 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.04500144783247308;  // std dev = 2.996, 54.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=12 */
%   | | | else return -0.204145989107237;  // std dev = 0.097, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then if ( author(F, D), venue(F, B) )
%   | | then return -0.49416319789755153;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0.21373296829350408;  // std dev = 0.386, 31.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=21 */
%   | else if ( author(G, D), venue(G, A) )
%   | | then return -0.24679689651018055;  // std dev = 0.319, 24.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=4 */
%   | | else if ( author(H, D), venue(H, B) )
%   | | | then return 0.06410541157241595;  // std dev = 0.922, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.08142623973086907;  // std dev = 2.968, 46.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=18 */
%   else if ( haswordvenue(A, I), haswordvenue(B, I) )
%   | then if ( haswordtitle(J, I) )
%   | | then return 0.08876147450343409;  // std dev = 0.487, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.15899719294525957;  // std dev = 0.341, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | then return 0.05596123667541512;  // std dev = 0.435, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.0130269219473385;  // std dev = 0.392, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.054211296258710635;  // std dev = 0.405, 39.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=21 */
%   | else if ( author(F, D), venue(F, A) )
%   | | then return -0.19269594357367273;  // std dev = 0.317, 24.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=4 */
%   | | else if ( author(G, D), venue(G, B) )
%   | | | then return 0.05108646711036937;  // std dev = 0.920, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.06607909445249305;  // std dev = 2.966, 46.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=18 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then return 0.013062132931567152;  // std dev = 2.733, 36.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
%   | | | else return -0.23647001221104796;  // std dev = 1.487, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | else return 0.07660378260888036;  // std dev = 0.484, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.03570398354213671;  // std dev = 0.421, 95.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=24 */
%   | | else return -3.8094627584442587E-4;  // std dev = 0.380, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordvenue(B, C) )
%   | then return 0.26349273508367244;  // std dev = 0.085, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( author(E, D), venue(E, B) )
%   | | then if ( samebib(E, F), venue(F, A) )
%   | | | then return 0.38832019458906586;  // std dev = 1.246, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | | | else return -0.37015032002411463;  // std dev = 0.538, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else if ( author(G, D), venue(G, A) )
%   | | | then return -0.24134033429518065;  // std dev = 0.777, 18.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=1 */
%   | | | else return 0.03510855861232769;  // std dev = 2.995, 46.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=16 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( haswordtitle(K, I) )
%   | | | then return 0.057413415869176504;  // std dev = 2.439, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   | | | else return -0.1501865748281513;  // std dev = 1.881, 23.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
%   | | else return 0.057741388273877606;  // std dev = 0.484, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   | else return 0.01751454009916497;  // std dev = 0.405, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */


Results
   AUC ROC   = 0.549411
   AUC PR    = 0.396359
   CLL	      = -0.707822
   Precision = 0.375817 at threshold = 0.5
   Recall    = 0.932306
   F1        = 0.535693


Total learning time: 37.65626335144043 seconds
Total inference time: 4.83 seconds
AUC ROC: 0.549411


Results scoring model
   AUC ROC   = 0.685485
   AUC PR    = 0.683037
   CLL	      = -0.614688
   Precision = 0.636595 at threshold = 0.5
   Recall    = 0.910909
   F1        = 0.749439


Total scoring time: 1.306 seconds
Parameter learned model CLL: -0.614688


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'false': 'haswordvenue(A, E), haswordauthor(F, E)', 'false,true': 'author(G, F), venue(G, B)', 'false,true,true': 'samebib(G, H), venue(H, A)', 'false,true,false': 'author(I, F), venue(I, A)', 'false,false': 'haswordvenue(B, J), haswordauthor(K, J)', 'false,false,true': 'haswordtitle(L, J)'}, {'true,true': [0.493, 334, 471], 'true,false': [0.335, 4, 27], 'false,true,true,true': [0.894, 1, 4], 'false,true,true,false': [0.0, 5, 0], 'false,true,false,true': [0.0, 3, 0], 'false,true,false,false': [2.913, 29, 12], 'false,false,true,true': [0.894, 4, 1], 'false,false,true,false': [2.98, 28, 13], 'false,false,false': [0.395, 92, 22]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'false': 'haswordvenue(B, E), haswordauthor(F, E)', 'false,true': 'author(G, F), venue(G, A)', 'false,true,true': 'samebib(G, H), venue(H, B)', 'false,false': 'haswordvenue(A, I), haswordauthor(J, I)', 'false,false,true': 'haswordtitle(K, I)', 'false,false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true': [0.493, 334, 471], 'true,false': [0.335, 4, 27], 'false,true,true,true': [0.899, 1, 4], 'false,true,true,false': [0.016, 5, 0], 'false,true,false': [0.441, 32, 12], 'false,false,true,true': [0.807, 4, 1], 'false,false,true,false': [2.94, 28, 13], 'false,false,false,true': [2.992, 48, 11], 'false,false,false,false': [2.966, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'false': 'haswordvenue(B, E), haswordauthor(F, E)', 'false,true': 'author(G, F), venue(G, A)', 'false,true,true': 'samebib(G, H), venue(H, B)', 'false,true,false': 'author(I, F), venue(I, B)', 'false,false': 'haswordvenue(A, J), haswordauthor(K, J)', 'false,false,true': 'author(L, K), venue(L, B)'}, {'true,true': [0.493, 334, 471], 'true,false': [0.335, 4, 27], 'false,true,true,true': [0.901, 1, 4], 'false,true,true,false': [0.014, 5, 0], 'false,true,false,true': [0.003, 3, 0], 'false,true,false,false': [2.883, 29, 12], 'false,false,true,true': [1.238, 5, 3], 'false,false,true,false': [2.785, 27, 11], 'false,false,false': [0.395, 92, 22]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordauthor(F, C)', 'true,true,false': 'haswordtitle(G, D)', 'true,false': 'haswordvenue(A, H), haswordauthor(I, H)', 'true,false,true': 'haswordtitle(J, H)', 'false': 'haswordvenue(A, K), haswordauthor(L, K)', 'false,true': 'author(M, L), venue(M, B)'}, {'true,true,true': [0.082, 0, 10], 'true,true,false,true': [2.596, 13, 14], 'true,true,false,false': [1.921, 18, 6], 'true,false,true,true': [2.542, 12, 14], 'true,false,true,false': [1.909, 17, 6], 'true,false,false': [0.485, 278, 448], 'false,true,true': [0.437, 6, 4], 'false,true,false': [0.435, 32, 12], 'false,false': [0.41, 124, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordauthor(D, C)', 'true,false': 'haswordvenue(B, E), haswordauthor(F, E)', 'true,false,true': 'haswordtitle(G, E)', 'true,false,false': 'haswordtitle(H, C)', 'false': 'haswordvenue(B, I), haswordauthor(J, I)', 'false,true': 'author(K, J), venue(K, A)', 'false,true,false': 'author(L, J), venue(L, B)'}, {'true,true': [0.082, 0, 10], 'true,false,true,true': [2.596, 13, 14], 'true,false,true,false': [1.925, 18, 6], 'true,false,false,true': [13.409, 304, 449], 'true,false,false,false': [1.602, 3, 19], 'false,true,true': [0.39, 6, 4], 'false,true,false,true': [0.000199, 3, 0], 'false,true,false,false': [2.877, 29, 12], 'false,false': [0.412, 124, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordtitle(E, D)', 'false': 'haswordvenue(A, F), haswordauthor(G, F)', 'false,true': 'author(H, G), venue(H, B)', 'false,true,true': 'samebib(H, I), venue(I, A)', 'false,false': 'haswordvenue(B, J), haswordauthor(K, J)', 'false,false,true': 'haswordtitle(L, J)', 'false,false,false': 'haswordvenue(B, M), haswordtitle(N, M)'}, {'true,true': [0.486, 336, 479], 'true,false': [0.29, 2, 19], 'false,true,true,true': [0.904, 1, 4], 'false,true,true,false': [0.018, 5, 0], 'false,true,false': [0.434, 32, 12], 'false,false,true,true': [0.685, 4, 1], 'false,false,true,false': [2.898, 28, 13], 'false,false,false,true': [2.99, 48, 11], 'false,false,false,false': [2.967, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordtitle(E, D)', 'false': 'haswordvenue(A, F), haswordauthor(G, F)', 'false,true': 'author(H, G), venue(H, B)', 'false,true,false': 'author(I, G), venue(I, A)', 'false,false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,false,true': 'haswordtitle(K, L), haswordvenue(B, L)', 'false,false,false': 'haswordvenue(B, M), haswordtitle(N, M)'}, {'true,true': [0.486, 336, 479], 'true,false': [0.289, 2, 19], 'false,true,true': [0.382, 6, 4], 'false,true,false,true': [0.000322, 3, 0], 'false,true,false,false': [2.851, 29, 12], 'false,false,true,true': [0.032, 12, 0], 'false,false,true,false': [4.044, 59, 24], 'false,false,false,true': [2.996, 42, 12], 'false,false,false,false': [0.097, 11, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(E, C)', 'true,true': 'author(F, D), venue(F, B)', 'true,false': 'author(G, D), venue(G, A)', 'true,false,false': 'author(H, D), venue(H, B)', 'false': 'haswordvenue(A, I), haswordvenue(B, I)', 'false,true': 'haswordtitle(J, I)', 'false,false': 'haswordvenue(B, K), haswordauthor(L, K)'}, {'true,true,true': [0.0, 8, 0], 'true,true,false': [0.386, 10, 21], 'true,false,true': [0.319, 20, 4], 'true,false,false,true': [0.922, 3, 3], 'true,false,false,false': [2.968, 28, 18], 'false,true,true': [0.487, 304, 449], 'false,true,false': [0.341, 3, 19], 'false,false,true': [0.435, 32, 14], 'false,false,false': [0.392, 92, 22]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(E, C)', 'true,false': 'author(F, D), venue(F, A)', 'true,false,false': 'author(G, D), venue(G, B)', 'false': 'haswordvenue(A, H), haswordvenue(B, H)', 'false,true': 'haswordvenue(B, I), haswordauthor(J, I)', 'false,true,true': 'author(K, J), venue(K, B)', 'false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true': [0.405, 18, 21], 'true,false,true': [0.317, 20, 4], 'true,false,false,true': [0.92, 3, 3], 'true,false,false,false': [2.966, 28, 18], 'false,true,true,true': [2.733, 20, 16], 'false,true,true,false': [1.487, 9, 4], 'false,true,false': [0.484, 278, 448], 'false,false,true': [0.421, 71, 24], 'false,false,false': [0.38, 53, 12]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordauthor(D, C)', 'true': 'haswordvenue(B, C)', 'true,false': 'author(E, D), venue(E, B)', 'true,false,true': 'samebib(E, F), venue(F, A)', 'true,false,false': 'author(G, D), venue(G, A)', 'false': 'haswordvenue(A, H), haswordvenue(B, H)', 'false,true': 'haswordvenue(B, I), haswordauthor(J, I)', 'false,true,true': 'haswordtitle(K, I)'}, {'true,true': [0.085, 0, 10], 'true,false,true,true': [1.246, 2, 19], 'true,false,true,false': [0.538, 20, 0], 'true,false,false,true': [0.777, 17, 1], 'true,false,false,false': [2.995, 30, 16], 'false,true,true,true': [2.439, 12, 14], 'false,true,true,false': [1.881, 17, 6], 'false,true,false': [0.484, 278, 448], 'false,false': [0.405, 124, 36]}]]
[{'': [0.24084270048762138, 0.18394619617433927], 'true': [0.2427591528104568, 0.11238293444328941], 'false': [0.20850480109739317, 0.17437500000000122], 'false,true': [0.23999999999999985, 0.19834710743801603], 'false,true,true': [0.15999999999999986, -2.7755575615628915e-18], 'false,true,false': [0.0, 0.20701963117192096], 'false,false': [0.21172022684309966, 0.15574022776238935], 'false,false,true': [0.16000000000000003, 0.2165377751338484]}, {'': [0.23990334821509715, 0.18064086185860803], 'true': [0.24275915281046145, 0.11238293444328855], 'false': [0.20548103654362937, 0.1713147328715216], 'false,true': [0.23956010966648247, 0.19452713363159607], 'false,true,true': [0.16153950938681208, 5.096833998346761e-05], 'false,false': [0.2033490412927039, 0.15574022776238897], 'false,false,true': [0.1302457674210878, 0.2107889436806293], 'false,false,false': [0.1516805515656426, 0.16000000000000056]}, {'': [0.23897284752961942, 0.17739970765592988], 'true': [0.24275915281046562, 0.1123829344432882], 'false': [0.1958464426357905, 0.17053113118149166], 'false,true': [0.19389603672247752, 0.19427756636916396], 'false,true,false': [2.8378312605242817e-06, 0.20265841419291541], 'false,true,true': [0.16226381167687126, 4.078130637391319e-05], 'false,false': [0.20247311398896992, 0.15572904697345566], 'false,false,true': [0.1915648007351822, 0.20404396615188175]}, {'': [0.2384267517844176, 0.17423693561420614], 'true': [0.23385093809213994, 0.23751552896940925], 'true,false': [0.2307527612374396, 0.23485399239233468], 'true,true': [0.006716523471481039, 0.22746659570222194], 'true,false,true': [0.24852071005917165, 0.15836464183611515], 'true,true,false': [0.24965706447187935, 0.1537786690564208], 'false': [0.19120302411612422, 0.16809517635723503], 'false,true': [0.19057814522159888, 0.1895977619344113]}, {'': [0.23439051990587007, 0.173650116451926], 'true': [0.006801224902692082, 0.236323546266966], 'true,false': [0.21849507764823395, 0.23568356584853864], 'true,false,false': [0.23878565189283585, 0.11661312168809546], 'true,false,true': [0.24965706447187935, 0.15443574458843395], 'false': [0.18533117633762433, 0.1693359633405076], 'false,true': [0.15214753331578673, 0.19201360075392085], 'false,true,false': [1.3135906108222942e-08, 0.20184477213875]}, {'': [0.23280896448082988, 0.172957207893701], 'true': [0.23605384815381794, 0.08411581764771112], 'false': [0.18886064938757827, 0.1673161484622758], 'false,true': [0.18483540979494006, 0.1886872305378769], 'false,true,true': [0.16333156428459486, 6.388662854103221e-05], 'false,false': [0.19377987589767698, 0.15572805735800715], 'false,false,true': [0.093774263772718, 0.20479215007986448], 'false,false,false': [0.15155875578825737, 0.16008482160946713]}, {'': [0.23249418497476623, 0.17056265177722077], 'true': [0.23594855592819408, 0.08367778748677698], 'false': [0.18094152497057206, 0.16691796356288455], 'false,true': [0.1460527797618934, 0.18848482005928469], 'false,true,false': [3.455591332061451e-08, 0.1981994119750995], 'false,false': [0.17964798099911528, 0.14700685844830189], 'false,false,true': [8.711337478532755e-05, 0.19705621940549184], 'false,false,false': [0.16627496346430773, 0.0008484400785749908]}, {'': [0.19027236137234924, 0.22276071835488587], 'false': [0.23407992499389946, 0.16438972748040265], 'false,true': [0.23738822614502114, 0.11605277822765402], 'true': [0.20030226152811442, 0.18224791443018007], 'true,true': [-1.1102230246251565e-16, 0.14919994062984224], 'true,false': [0.10178607652098355, 0.18577704961485858], 'true,false,false': [0.1417895003456552, 0.19147993937726543], 'false,false': [0.18887192244368783, 0.15398098238453456]}, {'': [0.1710432828278954, 0.22237372184024629], 'false': [0.23401583661228686, 0.16412338637202], 'false,true': [0.20972682689333064, 0.2345908646146457], 'false,true,true': [0.20753887772777793, 0.17003909993100874], 'true': [0.16406160272471884, 0.17291478016814835], 'true,false': [0.10044111947959951, 0.18549925882905607], 'true,false,false': [0.14104203968648185, 0.19127209051931032], 'false,false': [0.17698276644714175, 0.14455577276820664]}, {'': [0.16684597479986668, 0.22155736899180595], 'false': [0.23325320355787418, 0.1639449459442278], 'false,true': [0.20430566317553844, 0.23460255396666105], 'false,true,true': [0.22877578844623964, 0.15377558530054564], 'true': [0.007148618552828912, 0.17512415553229288], 'true,false': [0.18866335853332833, 0.16499872430656154], 'true,false,true': [0.07393809793233215, 0.014470541864636633], 'true,false,false': [0.033558204246398646, 0.19493772398949752]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;false;haswordvenue(A, E), haswordauthor(F, E).;true;true
0;false,true;author(G, F), venue(G, B).;true;true
0;false,true,true;samebib(G, H), venue(H, A).;true;true
0;false,true,false;author(I, F), venue(I, A).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;false;haswordvenue(B, E), haswordauthor(F, E).;true;true
1;false,true;author(G, F), venue(G, A).;true;true
1;false,true,true;samebib(G, H), venue(H, B).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;false;haswordvenue(B, E), haswordauthor(F, E).;true;true
2;false,true;author(G, F), venue(G, A).;true;true
2;false,true,true;samebib(G, H), venue(H, B).;true;true
2;false,true,false;author(I, F), venue(I, B).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;false;haswordvenue(B, I), haswordauthor(J, I).;true;true
4;false,true;author(K, J), venue(K, A).;true;true
4;false,true,false;author(L, J), venue(L, B).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;false;haswordvenue(A, F), haswordauthor(G, F).;true;true
5;false,true;author(H, G), venue(H, B).;true;true
5;false,true,true;samebib(H, I), venue(I, A).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;false;haswordvenue(A, F), haswordauthor(G, F).;true;true
6;false,true;author(H, G), venue(H, B).;true;true
6;false,true,false;author(I, G), venue(I, A).;true;true
6;false,false;haswordvenue(A, J), haswordtitle(K, J).;true;true
6;false,false,true;haswordtitle(K, L), haswordvenue(B, L).;true;true
6;false,false,false;haswordvenue(B, M), haswordtitle(N, M).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordauthor(D, C).;true;true
7;true;haswordtitle(E, C).;true;true
7;true,true;author(F, D), venue(F, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.443242102801371;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.7291166770349955;  // std dev = 0.335, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, B) )
%   | | then if ( samebib(G, H), venue(H, A) )
%   | | | then return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(I, F), venue(I, A) )
%   | | | then return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.15083186192878065;  // std dev = 2.913, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( haswordtitle(L, J) )
%   | | | then return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.17522210583121967;  // std dev = 2.980, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.051131391239862906;  // std dev = 0.395, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.3803254334818479;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.6157326050686436;  // std dev = 0.335, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, A) )
%   | | then if ( samebib(G, H), venue(H, B) )
%   | | | then return 0.6392119282680097;  // std dev = 0.899, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.15769426647032894;  // std dev = 0.016, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.10912768446848493;  // std dev = 0.441, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( haswordtitle(K, I) )
%   | | | then return 0.03693744759731563;  // std dev = 0.807, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.1534329638272584;  // std dev = 2.940, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.03825072160333175;  // std dev = 2.992, 59.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return 0.05181004363723003;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.6805851247859591;  // std dev = 0.056, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.2449182844345499;  // std dev = 2.596, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.047462026339214675;  // std dev = 1.980, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.3226813064206765;  // std dev = 0.491, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.47549952672721435;  // std dev = 0.343, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, A) )
%   | | then return 0.19790656117758298;  // std dev = 0.440, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( author(L, J), venue(L, B) )
%   | | | then return -0.17891175899361775;  // std dev = 0.003, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.11361319919327112;  // std dev = 2.883, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else return 0.062499859350964006;  // std dev = 0.413, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then return 0.24528990666542216;  // std dev = 0.490, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else return 0.42289861754592145;  // std dev = 0.287, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, B) )
%   | | then if ( samebib(H, I), venue(I, A) )
%   | | | then return 0.5205831188031489;  // std dev = 0.900, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.1455477618987596;  // std dev = 0.016, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(J, G), venue(J, A) )
%   | | | then return -0.1514022220360078;  // std dev = 0.000715, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.09970758932980665;  // std dev = 2.878, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then return 0.01701682783569476;  // std dev = 0.382, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return 0.10948888105072131;  // std dev = 4.076, 83.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=24 */
%   | | | else return -0.17879147848690516;  // std dev = 0.057, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.4490360675879265;  // std dev = 0.079, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.12237294841814172;  // std dev = 2.581, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.18504017324300412;  // std dev = 1.906, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( haswordtitle(J, H) )
%   | | | then return 0.15767810343418012;  // std dev = 2.542, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   | | | else return -0.08972099213358319;  // std dev = 1.910, 23.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
%   | | else return 0.21318343022930816;  // std dev = 0.484, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | then if ( author(M, L), venue(M, B) )
%   | | then return 0.13839650551854055;  // std dev = 0.390, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.06897006829595374;  // std dev = 0.437, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.043647153235442555;  // std dev = 0.410, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.14033714332168;  // std dev = 0.487, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.2617225097905588;  // std dev = 0.330, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, A) )
%   | | then if ( samebib(G, H), venue(H, B) )
%   | | | then return 0.46307599278265554;  // std dev = 0.906, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.18038385697751053;  // std dev = 0.033, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.059127606882402574;  // std dev = 0.431, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.013364008636732299;  // std dev = 3.043, 61.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=12 */
%   | | | else return -0.16974239628454796;  // std dev = 5.27e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.09158652679424177;  // std dev = 4.051, 83.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=24 */
%   | | | else return -0.1794933778711636;  // std dev = 0.123, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then return 0.10616160077694697;  // std dev = 0.486, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else return 0.22832223154134218;  // std dev = 0.289, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, A) )
%   | | then if ( samebib(H, I), venue(I, B) )
%   | | | then return 0.35346725254263256;  // std dev = 0.907, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.15526588613623285;  // std dev = 0.029, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(J, G), venue(J, B) )
%   | | | then return -0.17560814589183926;  // std dev = 0.010, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.06557773480970372;  // std dev = 2.824, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then return -6.407971167354237E-4;  // std dev = 0.377, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.07692224535044709;  // std dev = 4.048, 83.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=24 */
%   | | | else return -0.1547672799965648;  // std dev = 0.109, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then if ( author(F, D), venue(F, A) )
%   | | then return -0.49010390297780365;  // std dev = 2.58e-08, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0.21478107770261343;  // std dev = 0.382, 31.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=21 */
%   | else if ( author(G, D), venue(G, B) )
%   | | then return -0.24126387234843885;  // std dev = 0.317, 24.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=4 */
%   | | else return 0.07958097013293662;  // std dev = 0.426, 52.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=21 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then if ( haswordtitle(I, H) )
%   | | then return 0.08853585062291991;  // std dev = 0.487, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.15894810010187077;  // std dev = 0.341, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then if ( haswordtitle(L, J) )
%   | | | then return -0.01779986398568976;  // std dev = 0.685, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.06922747437975407;  // std dev = 2.851, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.00907270334472643;  // std dev = 0.392, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.05986723962960078;  // std dev = 0.483, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else return 0.16776118105645996;  // std dev = 0.284, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, B) )
%   | | then if ( samebib(H, I), venue(I, A) )
%   | | | then return 0.32635636120919626;  // std dev = 0.919, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.1632147381542533;  // std dev = 0.051, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.026734018429462755;  // std dev = 0.422, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | | then return -0.17480043673955833;  // std dev = 0.117, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.022191644144613578;  // std dev = 2.969, 54.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=12 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return 0.06395977370085136;  // std dev = 4.031, 83.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=24 */
%   | | | else return -0.15463370775542723;  // std dev = 0.164, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then if ( author(F, D), venue(F, B) )
%   | | then return -0.51658283211844;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0.19104166355896562;  // std dev = 0.374, 31.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=21 */
%   | else return -0.028850746947035072;  // std dev = 0.413, 76.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=25 */
%   else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | then if ( author(I, H), venue(I, A) )
%   | | then if ( samebib(I, J), venue(J, B) )
%   | | | then return 0.3666339286250443;  // std dev = 1.290, 20.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=18 */
%   | | | else return -0.3711761786723847;  // std dev = 0.570, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( author(K, H), venue(K, B) )
%   | | | then return -0.289060330741555;  // std dev = 0.822, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   | | | else return 0.057043174763302805;  // std dev = 2.852, 41.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=15 */
%   | else if ( haswordvenue(A, L), haswordvenue(B, L) )
%   | | then return 0.061621200011651105;  // std dev = 0.484, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   | | else return 0.004621299795466214;  // std dev = 0.390, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */


Results
   AUC ROC   = 0.54854
   AUC PR    = 0.39766
   CLL	      = -0.707788
   Precision = 0.371949 at threshold = 0.5
   Recall    = 0.926632
   F1        = 0.530825


Total learning time: 45.24040389060974 seconds
Total inference time: 4.729 seconds
AUC ROC: 0.54854


Results scoring model
   AUC ROC   = 0.689636
   AUC PR    = 0.687941
   CLL	      = -0.612632
   Precision = 0.636595 at threshold = 0.5
   Recall    = 0.910909
   F1        = 0.749439


Total scoring time: 1.104 seconds
Refined model CLL: -0.612632


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.54854
   AUC PR    = 0.39766
   CLL	      = -0.707788
   Precision = 0.371949 at threshold = 0.5
   Recall    = 0.926632
   F1        = 0.530825


Total learning time: 85.30666724205017 seconds
Total inference time: 4.729 seconds
AUC ROC: 0.54854
Total revision time: 85.30666724205017
Best scored revision CLL: -0.612632


Dataset: 13_twitter_cora, Fold: 5, Type: Transfer (trRDN-B), Time: 00:35:12
{'AUC ROC': 0.54854, 'AUC PR': 0.39766, 'CLL': -0.707788, 'Precision': [0.371949, 0.5], 'Recall': 0.926632, 'F1': 0.530825, 'Learning time': 85.30666724205017, 'Inference time': 4.729, 'parameter': {'AUC ROC': 0.549411, 'AUC PR': 0.396359, 'CLL': -0.707822, 'Precision': [0.375817, 0.5], 'Recall': 0.932306, 'F1': 0.535693, 'Learning time': 37.65626335144043, 'Inference time': 4.83}}


Starting fold 1

Target train facts examples: 7463
Target train pos examples: 368
Target train neg examples: 688

Target test facts examples: 35095
Target test pos  examples: 2649
Target test neg examples: 4334

******************************************
Performing Parameter Learning
******************************************
Refine
0;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
0;true;follows(A, D).;false;false
0;false;follows(A, E), recursion_accounttype(E, B).;true;true
0;false,true;follows(A, F), follows(F, A).;false;true
0;false,true,false;follows(A, G), follows(G, E).;false;false
0;false,false;follows(H, A).;true;true
0;false,false,true;follows(I, H), follows(I, A).;false;false
0;false,false,false;follows(A, J), follows(J, K).;false;false
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;true;follows(A, C), tweets(A, D).;false;false
1;false;follows(A, E), recursion_accounttype(E, B).;true;true
1;false,true;tweets(A, F), tweets(E, F).;false;true
1;false,true,false;follows(G, A), follows(E, H).;false;false
1;false,false;follows(I, A).;true;true
1;false,false,true;follows(I, J), recursion_accounttype(J, B).;false;false
1;false,false,false;tweets(A, K).;false;false
2;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;true;follows(C, D), follows(D, A).;false;false
2;false;follows(E, A).;true;true
2;false,true;follows(F, E), follows(F, A).;false;true
2;false,true,false;follows(E, G), recursion_accounttype(G, B).;false;false
2;false,false;follows(A, H), follows(H, I).;true;true
2;false,false,true;recursion_accounttype(I, B).;false;false
2;false,false,false;follows(A, J).;false;false
3;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
3;true;tweets(A, D), tweets(C, D).;false;false
3;false;follows(E, A).;true;true
3;false,true;follows(F, E), recursion_accounttype(F, B).;true;false
3;false,true,true;follows(A, G), recursion_accounttype(G, B).;false;false
3;false,false;follows(A, H), recursion_accounttype(H, B).;true;true
3;false,false,true;follows(A, I), follows(I, H).;false;false
3;false,false,false;tweets(A, J), follows(A, K).;false;false
4;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
4;true;follows(A, D), follows(D, C).;true;false
4;true,true;follows(D, A).;false;true
4;true,true,false;tweets(A, E).;false;false
4;false;follows(F, A).;false;true
4;false,false;follows(A, G), recursion_accounttype(G, B).;true;true
4;false,false,true;follows(G, H), follows(H, G).;false;false
4;false,false,false;follows(A, I), follows(I, J).;false;false
5;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
5;true;follows(D, A), tweets(D, E).;true;true
5;true,true;recursion_accounttype(D, B).;false;false
5;true,false;follows(C, F), follows(F, C).;true;false
5;true,false,true;tweets(C, G), recursion_accounttype(F, B).;false;false
5;false;follows(A, H), follows(H, A).;false;true
5;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
5;false,false,false;tweets(A, J), follows(K, A).;false;false
6;;accounttype(A, B) :- follows(A, C).;true;true
6;true;follows(D, C), recursion_accounttype(D, B).;true;false
6;true,true;recursion_accounttype(C, B).;true;true
6;true,true,true;follows(E, A), follows(E, D).;false;false
6;true,true,false;follows(F, A), recursion_accounttype(F, B).;false;false
6;false;follows(G, A), recursion_accounttype(G, B).;false;true
6;false,false;follows(H, A).;false;true
6;false,false,false;tweets(A, I).;false;false
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;tweets(C, D), follows(A, C).;false;false
7;false;follows(E, A).;true;true
7;false,true;follows(E, F), recursion_accounttype(F, B).;true;false
7;false,true,true;follows(F, E), follows(A, F).;false;false
7;false,false;follows(A, G), recursion_accounttype(G, B).;true;true
7;false,false,true;tweets(A, H).;false;false
7;false,false,false;follows(A, I).;false;false
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;true;follows(C, D), recursion_accounttype(D, B).;false;true
8;true,false;follows(A, E), follows(E, A).;false;false
8;false;follows(F, A), follows(A, G).;true;true
8;false,true;follows(G, A), follows(G, F).;false;true
8;false,true,false;follows(H, F), recursion_accounttype(H, B).;false;false
8;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
8;false,false,false;follows(J, A).;false;false
9;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
9;true;follows(C, D).;true;false
9;true,true;follows(A, D).;true;true
9;true,true,true;follows(E, A), recursion_accounttype(E, B).;false;false
9;true,true,false;tweets(C, F), follows(D, C).;false;false
9;false;follows(A, G), follows(H, A).;false;true
9;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
9;false,false,false;follows(J, A).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.23843062524035266;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.4581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.424815601766179;  // std dev = 2.714, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.004815601766179008;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.004815601766179008;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.20686012285620575;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.45935396641210174;  // std dev = 0.810, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.3982164798305049;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.3628735944379147;  // std dev = 2.715, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.004228390109386251;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.004228390109386251;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.1751801570305961;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.37391135762433364;  // std dev = 0.808, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.3269052770205085;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.2976445171077738;  // std dev = 2.715, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, A) )
%   | | then if ( samebib(K, L), venue(L, B) )
%   | | | then return 0.14974330653669568;  // std dev = 2.784, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return -0.1414965457075706;  // std dev = 0.042, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.11669340332070102;  // std dev = 0.028, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | then return 0.0037111125833978686;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.14514481334590568;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.29107789104287257;  // std dev = 0.807, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.26358767085800217;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.23427726647373656;  // std dev = 2.715, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.10980429489397557;  // std dev = 0.045, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0032558270569705674;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.003911681670084865;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.11804668707041945;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.24185760298278067;  // std dev = 0.794, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.20295547503731384;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.17824642992011885;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.09953837016457324;  // std dev = 0.041, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0028554031467501392;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.0034335612113567007;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.09457696812283496;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.18213891260273649;  // std dev = 0.794, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.15909483439814323;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.13426751126146078;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then return -0.029299214164223333;  // std dev = 0.328, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( title(M, L), venue(M, B) )
%   | | | then return -0.002127160213159074;  // std dev = 3.067, 80.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=11 */
%   | | | else return -0.10482916080141493;  // std dev = 0.051, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | | | then return 0.0068709345277986;  // std dev = 2.848, 67.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=10 */
%   | | | else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.07489163449109286;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.12013209515454029;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return 0.13376867377079152;  // std dev = 0.796, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.10130545805396175;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.08644966654106251;  // std dev = 0.028, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0026663326620246066;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.0029283180884813608;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C) )
%   | | then return -0.12150391422280449;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.10910665686119088;  // std dev = 0.792, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.05984201257766986;  // std dev = 0.486, 847.000 (wgt'ed) examples reached here.  /* #neg=524 #pos=323 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.09011125100759512;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.07521952321277406;  // std dev = 2.718, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( title(L, K), venue(L, A) )
%   | | then return -0.0023633018057824026;  // std dev = 0.335, 80.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=11 */
%   | | else return -0.0848534873664772;  // std dev = 0.050, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | then return 0.002567537237384835;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.045816398181049725;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.08248321133097265;  // std dev = 0.792, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.07548703888693811;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.05512968449322684;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, B) )
%   | | then if ( samebib(K, L), venue(L, A) )
%   | | | then return 0.15260707625167233;  // std dev = 2.769, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return -0.14109024389313443;  // std dev = 0.101, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.08954986638568847;  // std dev = 0.052, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return 0.002750424054575852;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.03554203749134575;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.06440470748196647;  // std dev = 0.791, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.04342529969294201;  // std dev = 0.495, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | then if ( title(I, H), venue(I, B) )
%   | | then if ( samebib(I, J), venue(J, A) )
%   | | | then return 0.13365209187786697;  // std dev = 2.766, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return -0.12487129424447106;  // std dev = 0.090, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.08254346075397383;  // std dev = 0.049, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then return 0.002412104655053002;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.557237
   AUC PR    = 0.428331
   CLL	      = -0.653761
   Precision = 0.637427 at threshold = 0.5
   Recall    = 0.041148
   F1        = 0.077305


Total learning time: 61.71534276008606 seconds
Total inference time: 7.647 seconds
AUC ROC: 0.557237


Results scoring model
   AUC ROC   = 0.593327
   AUC PR    = 0.420585
   CLL	      = -0.617506
   Precision = 0.578947 at threshold = 0.5
   Recall    = 0.059783
   F1        = 0.108374


Total scoring time: 1.045 seconds
Parameter learned model CLL: -0.617506


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)', 'false,false': 'haswordvenue(B, L), haswordtitle(M, L)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.816, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.714, 13, 17], 'false,true,true': [0.0, 12, 0], 'false,true,false': [0.354, 64, 11], 'false,false,true': [0.354, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)', 'false,false': 'haswordvenue(B, L), haswordtitle(M, L)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.81, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.715, 13, 17], 'false,true,true': [5.27e-09, 12, 0], 'false,true,false': [0.354, 64, 11], 'false,false,true': [0.354, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'title(K, J), venue(K, A)', 'false,true,true': 'samebib(K, L), venue(L, B)', 'false,false': 'haswordvenue(B, M), haswordtitle(N, M)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.808, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.715, 13, 17], 'false,true,true,true': [2.784, 27, 11], 'false,true,true,false': [0.042, 42, 0], 'false,true,false': [0.028, 7, 0], 'false,false,true': [0.354, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(A, K)', 'false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.807, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.715, 13, 17], 'false,true,true': [0.045, 12, 0], 'false,true,false': [0.354, 64, 11], 'false,false,true': [0.346, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(A, K)', 'false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.794, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.717, 13, 17], 'false,true,true': [0.041, 12, 0], 'false,true,false': [0.354, 64, 11], 'false,false,true': [0.346, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordauthor(J, I)', 'false,false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false,false,true': 'title(M, L), venue(M, B)', 'false,false,false': 'haswordvenue(A, N), haswordtitle(P, N)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.794, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.717, 13, 17], 'false,true': [0.328, 7, 1], 'false,false,true,true': [3.067, 69, 11], 'false,false,true,false': [0.051, 7, 0], 'false,false,false,true': [2.848, 57, 10], 'false,false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordauthor(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)', 'false,false': 'haswordvenue(B, L), haswordtitle(M, L)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [1.095, 2, 3], 'true,false,false,true': [0.796, 1, 2], 'true,false,false,false': [2.717, 13, 17], 'false,true,true': [0.028, 12, 0], 'false,true,false': [0.346, 64, 11], 'false,false,true': [0.354, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordtitle(F, C)', 'true,false': 'haswordtitle(G, C)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'title(L, K), venue(L, A)', 'false,false': 'haswordvenue(B, M), haswordtitle(N, M)'}, {'true,true,true': [0.894, 4, 1], 'true,true,false': [0.792, 1, 2], 'true,false,true': [0.486, 524, 323], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.718, 13, 17], 'false,true,true': [0.335, 69, 11], 'false,true,false': [0.05, 7, 0], 'false,false,true': [0.354, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'title(K, J), venue(K, B)', 'false,true,true': 'samebib(K, L), venue(L, A)', 'false,false': 'haswordvenue(A, M), haswordtitle(N, M)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.792, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.717, 13, 17], 'false,true,true,true': [2.769, 27, 11], 'false,true,true,false': [0.101, 42, 0], 'false,true,false': [0.052, 7, 0], 'false,false,true': [0.346, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordauthor(F, E)', 'false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false,true': 'title(I, H), venue(I, B)', 'false,true,true': 'samebib(I, J), venue(J, A)', 'false,false': 'haswordvenue(A, K), haswordtitle(L, K)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.791, 1, 2], 'true,false,false': [0.495, 15, 20], 'false,true,true,true': [2.766, 27, 11], 'false,true,true,false': [0.09, 42, 0], 'false,true,false': [0.049, 7, 0], 'false,false,true': [0.346, 64, 11], 'false,false,false': [0.0, 4, 0]}]]
[{'': [0.23762656230272572, 0.11496588764697444], 'true': [0.2356675262844691, 0.24376731301939172], 'true,false': [0.22222222222222224, 0.2448979591836734], 'true,false,false': [0.23999999999999994, 0.2455555555555551], 'false': [0.1104505218655035, 0.11985258772632539], 'false,false': [0.12515555555555502, 0.0], 'false,true': [-1.1564823173178714e-17, 0.12515555555555502]}, {'': [0.23716066162823085, 0.11455688633284844], 'true': [0.2356675262844735, 0.24352902641532292], 'true,false': [0.21859724583033524, 0.2450060599606714], 'true,false,false': [0.23999999999999994, 0.24566195763775364], 'false': [0.10989213699570438, 0.1196268538653256], 'false,false': [0.125155555555556, 0.0], 'false,true': [2.3129646346357427e-18, 0.125155555555556]}, {'': [0.23670497169729696, 0.11426488031687218], 'true': [0.23566752628446727, 0.2432006312450957], 'true,false': [0.2176873624141201, 0.24497723310199565], 'true,false,false': [0.23999999999999994, 0.24568445879937517], 'false': [0.10949347876263746, 0.1194656914359021], 'false,false': [0.12515555555555488, 0.0], 'false,true': [0.11802694340978195, 0.00011495009377930632], 'false,true,true': [0.20389987794958447, 4.257410880718705e-05]}, {'': [0.23636692863361689, 0.11173833815389322], 'true': [0.23566752628446358, 0.24295287544358243], 'true,false': [0.2171137183240305, 0.24494912041488723], 'true,false,false': [0.24000000000000005, 0.2456512452737729], 'false': [0.109435906756026, 0.11421156581709427], 'false,false': [0.11973920677450385, 0.0], 'false,true': [0.00016862660761780604, 0.12515555555555585]}, {'': [0.23616359234674206, 0.1115379511702413], 'true': [0.235667526284474, 0.24279756660608162], 'true,false': [0.21040997107607098, 0.2452886648743999], 'true,false,false': [0.24000000000000005, 0.24608288946147547], 'false': [0.10915897713879817, 0.11410714620620815], 'false,false': [0.11972501336090408, 0.0], 'false,true': [0.00014201305740469775, 0.1251555555555548]}, {'': [0.23605472895497862, 0.11138438885653197], 'true': [0.23566752628446164, 0.2426451717431571], 'true,false': [0.21021536400516302, 0.24526976372372009], 'true,false,false': [0.24000000000000005, 0.24606000110993995], 'false': [0.10736760162972141, 0.11155923136367643], 'false,false': [0.10894851429369481, 0.11467799049666123], 'false,false,false': [0.12104701519418183, 0.0], 'false,false,true': [0.11760010454341752, 0.00037416182083038963]}, {'': [0.2360022662978132, 0.11125980102698457], 'true': [0.23566752628447166, 0.24256038386092066], 'true,false': [0.24, 0.24291515903878608], 'true,false,false': [0.2111771918908385, 0.24599315026497381], 'false': [0.10411042384186964, 0.1190960367447421], 'false,false': [0.12510981428634596, 0.0], 'false,true': [6.570688132418016e-05, 0.11966217699501004]}, {'': [0.23597861644950502, 0.11115692192063015], 'true': [0.19079223679331025, 0.23630638466298792], 'true,false': [0.23592121091315768, 0.24533332745839673], 'true,false,false': [0.24, 0.24619053486002723], 'true,true': [0.15999999999999998, 0.20887435926402323], 'false': [0.10395999520510682, 0.11905134066229116], 'false,false': [0.12510972136291318, 0.0], 'false,true': [0.11247772880208387, 0.0003573366916268072]}, {'': [0.2358968408050995, 0.11110197371264163], 'true': [0.23559370765518342, 0.24250169419929632], 'true,false': [0.2090938281462095, 0.24531804865505913], 'true,false,false': [0.24000000000000005, 0.24614518697215312], 'false': [0.10860842804103533, 0.11381607695971308], 'false,false': [0.11962975013388205, 0.0], 'false,true': [0.11745498601490645, 0.0003895146025960936], 'false,true,true': [0.20171903993019355, 0.00024347505793686258]}, {'': [0.23589031011749567, 0.10858752700114427], 'true': [0.2355926314579775, 0.24247746186029284], 'true,false': [0.20879763357333195, 0.24532955674137544], 'false': [0.10384861934300728, 0.11377615492142906], 'false,false': [0.11961960459548979, 0.0], 'false,true': [0.11238485631737975, 0.00033710064595652824], 'false,true,true': [0.20129676477956257, 0.0001944366043430084]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
0;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true
0;false,false;haswordvenue(B, L), haswordtitle(M, L).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
1;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true
1;false,false;haswordvenue(B, L), haswordtitle(M, L).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
2;false,true;title(K, J), venue(K, A).;true;true
2;false,true,true;samebib(K, L), venue(L, B).;true;true
2;false,false;haswordvenue(B, M), haswordtitle(N, M).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
3;false,true;haswordtitle(J, K), haswordvenue(A, K).;true;true
3;false,false;haswordvenue(A, L), haswordtitle(M, L).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
4;false,true;haswordtitle(J, K), haswordvenue(A, K).;true;true
4;false,false;haswordvenue(A, L), haswordtitle(M, L).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;false;haswordvenue(B, I), haswordauthor(J, I).;true;true
5;false,false;haswordvenue(B, K), haswordtitle(L, K).;true;true
5;false,false,true;title(M, L), venue(M, B).;true;true
5;false,false,false;haswordvenue(A, N), haswordtitle(P, N).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
6;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true
6;false,false;haswordvenue(B, L), haswordtitle(M, L).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;false;haswordvenue(A, J), haswordtitle(K, J).;true;true
7;false,true;title(L, K), venue(L, A).;true;true
7;false,false;haswordvenue(B, M), haswordtitle(N, M).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
8;false,true;title(K, J), venue(K, B).;true;true
8;false,true,true;samebib(K, L), venue(L, A).;true;true
8;false,false;haswordvenue(A, M), haswordtitle(N, M).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;false;haswordvenue(B, G), haswordtitle(H, G).;true;true
9;false,true;title(I, H), venue(I, B).;true;true
9;false,true,true;samebib(I, J), venue(J, A).;true;true
9;false,false;haswordvenue(A, K), haswordtitle(L, K).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.23843062524035266;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.4581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.424815601766179;  // std dev = 2.714, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.004815601766179008;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.004815601766179008;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.20686012285620575;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.45935396641210174;  // std dev = 0.810, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.3982164798305049;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.3628735944379147;  // std dev = 2.715, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.004228390109386251;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.004228390109386251;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.1751801570305961;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.37391135762433364;  // std dev = 0.808, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.3269052770205085;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.2976445171077738;  // std dev = 2.715, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.11231637819360636;  // std dev = 9.13e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0037111125833978686;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.0037111125833978686;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.14514481334590568;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.3022417434729106;  // std dev = 0.801, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.26358767085800217;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.23316088123073275;  // std dev = 2.716, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.1015963294878363;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0032558270569705674;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.0032558270569705674;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.11804668707041945;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.2293423044508296;  // std dev = 0.800, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.20322270711158522;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.179454720029084;  // std dev = 2.716, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.09269127618926097;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0028554031467501392;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.0028554031467501392;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.09457696812283496;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.1813286292271059;  // std dev = 0.795, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.1587969602278804;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.13439878812308914;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.08518475138839687;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.002503460836945874;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.002503460836945874;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C) )
%   | | then return -0.10539005564974935;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.13616283040883448;  // std dev = 0.795, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.07595587115072004;  // std dev = 0.486, 847.000 (wgt'ed) examples reached here.  /* #neg=524 #pos=323 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.12031127067794503;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.10103563025380792;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return -0.07877675473109172;  // std dev = 3.73e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0021943081594878503;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | then return 0.0021943081594878503;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.05876995206281021;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.10724758062774849;  // std dev = 0.793, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.09411237712322165;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.07473771286834935;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.07324622576333704;  // std dev = 3.73e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0019228798175884457;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.0019228798175884457;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04581813968556683;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.08175108705220986;  // std dev = 0.793, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.07159083901462515;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.05585044817949433;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then return -0.019981988600391565;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then if ( title(M, L), venue(M, A) )
%   | | | then return -0.0017403627936773722;  // std dev = 3.065, 80.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=11 */
%   | | | else return -0.0793634079522297;  // std dev = 0.071, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(B, N), haswordtitle(P, N) )
%   | | | then return 0.004271742742892122;  // std dev = 2.917, 67.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=10 */
%   | | | else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.035543411401875176;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.06566865552843022;  // std dev = 0.791, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.05672990617695972;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.041079620739977646;  // std dev = 2.718, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then return -0.019766382648275904;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( title(M, L), venue(M, B) )
%   | | | then return -0.0015652700583584547;  // std dev = 3.064, 80.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=11 */
%   | | | else return -0.0793441514089104;  // std dev = 0.071, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | | | then return 0.004626870787179388;  // std dev = 2.916, 67.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=10 */
%   | | | else return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.555855
   AUC PR    = 0.427965
   CLL	      = -0.659371
   Precision = 0.637427 at threshold = 0.5
   Recall    = 0.041148
   F1        = 0.077305


Total learning time: 54.26780033111572 seconds
Total inference time: 6.154 seconds
AUC ROC: 0.555855


Results scoring model
   AUC ROC   = 0.589899
   AUC PR    = 0.419662
   CLL	      = -0.621718
   Precision = 0.578947 at threshold = 0.5
   Recall    = 0.059783
   F1        = 0.108374


Total scoring time: 1.085 seconds
Refined model CLL: -0.621718


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.557237
   AUC PR    = 0.428331
   CLL	      = -0.653761
   Precision = 0.637427 at threshold = 0.5
   Recall    = 0.041148
   F1        = 0.077305


Total learning time: 118.11314309120178 seconds
Total inference time: 7.647 seconds
AUC ROC: 0.557237
Total revision time: 118.11314309120178
Best scored revision CLL: -0.617506


Dataset: 13_twitter_cora, Fold: 1, Type: Transfer (trRDN-B), Time: 00:37:25
{'AUC ROC': 0.557237, 'AUC PR': 0.428331, 'CLL': -0.653761, 'Precision': [0.637427, 0.5], 'Recall': 0.041148, 'F1': 0.077305, 'Learning time': 118.11314309120178, 'Inference time': 7.647, 'parameter': {'AUC ROC': 0.557237, 'AUC PR': 0.428331, 'CLL': -0.653761, 'Precision': [0.637427, 0.5], 'Recall': 0.041148, 'F1': 0.077305, 'Learning time': 61.71534276008606, 'Inference time': 7.647}}


Starting fold 2

Target train facts examples: 9016
Target train pos examples: 771
Target train neg examples: 544

Target test facts examples: 33542
Target test pos  examples: 2246
Target test neg examples: 4478

******************************************
Performing Parameter Learning
******************************************
Refine
0;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
0;true;follows(A, D).;false;false
0;false;follows(A, E), recursion_accounttype(E, B).;true;true
0;false,true;follows(A, F), follows(F, A).;false;true
0;false,true,false;follows(A, G), follows(G, E).;false;false
0;false,false;follows(H, A).;true;true
0;false,false,true;follows(I, H), follows(I, A).;false;false
0;false,false,false;follows(A, J), follows(J, K).;false;false
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;true;follows(A, C), tweets(A, D).;false;false
1;false;follows(A, E), recursion_accounttype(E, B).;true;true
1;false,true;tweets(A, F), tweets(E, F).;false;true
1;false,true,false;follows(G, A), follows(E, H).;false;false
1;false,false;follows(I, A).;true;true
1;false,false,true;follows(I, J), recursion_accounttype(J, B).;false;false
1;false,false,false;tweets(A, K).;false;false
2;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;true;follows(C, D), follows(D, A).;false;false
2;false;follows(E, A).;true;true
2;false,true;follows(F, E), follows(F, A).;false;true
2;false,true,false;follows(E, G), recursion_accounttype(G, B).;false;false
2;false,false;follows(A, H), follows(H, I).;true;true
2;false,false,true;recursion_accounttype(I, B).;false;false
2;false,false,false;follows(A, J).;false;false
3;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
3;true;tweets(A, D), tweets(C, D).;false;false
3;false;follows(E, A).;true;true
3;false,true;follows(F, E), recursion_accounttype(F, B).;true;false
3;false,true,true;follows(A, G), recursion_accounttype(G, B).;false;false
3;false,false;follows(A, H), recursion_accounttype(H, B).;true;true
3;false,false,true;follows(A, I), follows(I, H).;false;false
3;false,false,false;tweets(A, J), follows(A, K).;false;false
4;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
4;true;follows(A, D), follows(D, C).;true;false
4;true,true;follows(D, A).;false;true
4;true,true,false;tweets(A, E).;false;false
4;false;follows(F, A).;false;true
4;false,false;follows(A, G), recursion_accounttype(G, B).;true;true
4;false,false,true;follows(G, H), follows(H, G).;false;false
4;false,false,false;follows(A, I), follows(I, J).;false;false
5;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
5;true;follows(D, A), tweets(D, E).;true;true
5;true,true;recursion_accounttype(D, B).;false;false
5;true,false;follows(C, F), follows(F, C).;true;false
5;true,false,true;tweets(C, G), recursion_accounttype(F, B).;false;false
5;false;follows(A, H), follows(H, A).;false;true
5;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
5;false,false,false;tweets(A, J), follows(K, A).;false;false
6;;accounttype(A, B) :- follows(A, C).;true;true
6;true;follows(D, C), recursion_accounttype(D, B).;true;false
6;true,true;recursion_accounttype(C, B).;true;true
6;true,true,true;follows(E, A), follows(E, D).;false;false
6;true,true,false;follows(F, A), recursion_accounttype(F, B).;false;false
6;false;follows(G, A), recursion_accounttype(G, B).;false;true
6;false,false;follows(H, A).;false;true
6;false,false,false;tweets(A, I).;false;false
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;tweets(C, D), follows(A, C).;false;false
7;false;follows(E, A).;true;true
7;false,true;follows(E, F), recursion_accounttype(F, B).;true;false
7;false,true,true;follows(F, E), follows(A, F).;false;false
7;false,false;follows(A, G), recursion_accounttype(G, B).;true;true
7;false,false,true;tweets(A, H).;false;false
7;false,false,false;follows(A, I).;false;false
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;true;follows(C, D), recursion_accounttype(D, B).;false;true
8;true,false;follows(A, E), follows(E, A).;false;false
8;false;follows(F, A), follows(A, G).;true;true
8;false,true;follows(G, A), follows(G, F).;false;true
8;false,true,false;follows(H, F), recursion_accounttype(H, B).;false;false
8;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
8;false,false,false;follows(J, A).;false;false
9;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
9;true;follows(C, D).;true;false
9;true,true;follows(A, D).;true;true
9;true,true,true;follows(E, A), recursion_accounttype(E, B).;false;false
9;true,true,false;tweets(C, F), follows(D, C).;false;false
9;false;follows(A, G), follows(H, A).;false;true
9;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
9;false,false,false;follows(J, A).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.4356367001892301;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.5949910403626703;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.5640312880406888;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.37395569825543723;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.5062567560764839;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.48074388375574334;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.7194734122109543;  // std dev = 7.30e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.5791684237702857;  // std dev = 0.357, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(A, C) )
%   | | then return 0.22916842377028543;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, A) )
%   | | | then return -0.008145345695425854;  // std dev = 0.852, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.07083157622971455;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.3045453081923796;  // std dev = 0.494, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.4047531668618019;  // std dev = 1.919, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.42464571865829975;  // std dev = 1.908, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then return 0.43170309793098227;  // std dev = 0.348, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | else return 0.20848477447886868;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.4513849731813856;  // std dev = 0.357, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( author(F, D), venue(F, A) )
%   | | then return -0.006592444675509707;  // std dev = 0.852, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( haswordvenue(A, C) )
%   | | | then return 0.18162271221626702;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.05707271743850968;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then if ( haswordtitle(I, G) )
%   | | then return 0.5071511052503431;  // std dev = 0.365, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | else return -0.10417536869907289;  // std dev = 0.412, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, J), haswordvenue(B, J) )
%   | | then if ( haswordtitle(K, J) )
%   | | | then return 0.23831062358346294;  // std dev = 16.896, 1,167.000 (wgt'ed) examples reached here.  /* #neg=498 #pos=669 */
%   | | | else return 0.3177280691722277;  // std dev = 2.705, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | | else return 0.2970870869823954;  // std dev = 0.398, 46.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.18606330945756955;  // std dev = 0.492, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.23091012548407927;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.20909506881975992;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.3728531374205464;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.37603488753229924;  // std dev = 4.71e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.1155662603431902;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.0703582214721142;  // std dev = 0.487, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.2936876471262321;  // std dev = 0.357, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( author(F, D), venue(F, A) )
%   | | then return -0.036914474617208246;  // std dev = 0.846, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( haswordvenue(A, C) )
%   | | | then return 0.0971377558739366;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.08246874795852946;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( haswordtitle(J, H) )
%   | | | then return 0.3402672411009702;  // std dev = 1.589, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return -0.10343495178966589;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( haswordtitle(K, G) )
%   | | | then return 0.13826690996621954;  // std dev = 16.896, 1,167.000 (wgt'ed) examples reached here.  /* #neg=498 #pos=669 */
%   | | | else return 0.18093165288717536;  // std dev = 2.699, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | else return 0.17243856599046542;  // std dev = 0.389, 47.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.1061625435055529;  // std dev = 0.491, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.12963896620365722;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.11269062152456111;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.25468472189857216;  // std dev = 7.45e-09, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.2582879617803414;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.05072871376585593;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.016000622987209025;  // std dev = 0.485, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.07975843985669982;  // std dev = 0.491, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.09918498214641044;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.08580741673370607;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.2094132783918221;  // std dev = 7.45e-09, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.21195621252557548;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.0387593505867509;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.012161815861677238;  // std dev = 0.485, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.05990491294936324;  // std dev = 0.491, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.09464703548811973;  // std dev = 0.439, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.045635434868699816;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.17684382813722332;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.17870731913714583;  // std dev = 2.36e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.02952334367425914;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.009237426322880188;  // std dev = 0.485, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04502617144771937;  // std dev = 0.491, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.07320705545883269;  // std dev = 0.439, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.03547452138241864;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.15255215578638626;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.15396473255904283;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.022439508019558563;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.007012564982151632;  // std dev = 0.485, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */


Results
   AUC ROC   = 0.535675
   AUC PR    = 0.345722
   CLL	      = -0.756358
   Precision = 0.353755 at threshold = 0.5
   Recall    = 0.956367
   F1        = 0.51647


Total learning time: 52.36308455467224 seconds
Total inference time: 5.966 seconds
AUC ROC: 0.535675


Results scoring model
   AUC ROC   = 0.553713
   AUC PR    = 0.66264
   CLL	      = -0.664913
   Precision = 0.594317 at threshold = 0.5
   Recall    = 0.976654
   F1        = 0.73896


Total scoring time: 1.039 seconds
Parameter learned model CLL: -0.664913


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)'}, {'true,true': [0.494, 518, 708], 'true,false,true': [0.44, 5, 14], 'true,false,false,true': [1.879, 5, 12], 'true,false,false,false': [0.0, 0, 5], 'false,true,true': [0.0, 0, 20], 'false,true,false': [0.495, 8, 6], 'false,false': [0.495, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)'}, {'true,true': [0.494, 518, 708], 'true,false,true': [0.44, 5, 14], 'true,false,false,true': [1.879, 5, 12], 'true,false,false,false': [0.0, 0, 5], 'false,true,true': [7.3e-08, 0, 20], 'false,true,false': [0.495, 8, 6], 'false,false': [0.495, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(B, C), haswordauthor(D, C)', 'true': 'haswordtitle(E, C)', 'true,false': 'haswordvenue(A, C)', 'true,false,false': 'author(F, D), venue(F, A)', 'false': 'haswordvenue(A, G), haswordvenue(B, G)', 'false,true': 'haswordtitle(H, G)', 'false,true,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,false': 'haswordvenue(B, K), haswordtitle(L, K)'}, {'true,true': [0.357, 3, 17], 'true,false,true': [1.0, 2, 2], 'true,false,false,true': [0.852, 3, 1], 'true,false,false,false': [0.894, 4, 1], 'false,true,true': [0.494, 507, 687], 'false,true,false,true': [1.919, 5, 14], 'false,true,false,false': [1.908, 5, 17], 'false,false,true': [0.348, 7, 26], 'false,false,false': [0.495, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(B, C), haswordauthor(D, C)', 'true': 'haswordtitle(E, C)', 'true,false': 'author(F, D), venue(F, A)', 'true,false,false': 'haswordvenue(A, C)', 'false': 'haswordvenue(A, G), haswordauthor(H, G)', 'false,true': 'haswordtitle(I, G)', 'false,false': 'haswordvenue(A, J), haswordvenue(B, J)', 'false,false,true': 'haswordtitle(K, J)'}, {'true,true': [0.357, 3, 17], 'true,false,true': [0.852, 3, 1], 'true,false,false,true': [1.0, 2, 2], 'true,false,false,false': [0.894, 4, 1], 'false,true,true': [0.365, 3, 16], 'false,true,false': [0.412, 7, 2], 'false,false,true,true': [16.896, 498, 669], 'false,false,true,false': [2.705, 10, 31], 'false,false,false': [0.398, 14, 32]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)'}, {'true,true': [0.492, 518, 708], 'true,false,true': [0.44, 5, 14], 'true,false,false,true': [1.879, 5, 12], 'true,false,false,false': [0.0, 0, 5], 'false,true,true': [4.71e-08, 0, 20], 'false,true,false': [0.49, 8, 6], 'false,false': [0.487, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(B, C), haswordauthor(D, C)', 'true': 'haswordtitle(E, C)', 'true,false': 'author(F, D), venue(F, A)', 'true,false,false': 'haswordvenue(A, C)', 'false': 'haswordvenue(A, G), haswordvenue(B, G)', 'false,true': 'haswordvenue(A, H), haswordauthor(I, H)', 'false,true,true': 'haswordtitle(J, H)', 'false,true,false': 'haswordtitle(K, G)'}, {'true,true': [0.357, 3, 17], 'true,false,true': [0.846, 3, 1], 'true,false,false,true': [1.0, 2, 2], 'true,false,false,false': [0.894, 4, 1], 'false,true,true,true': [1.589, 3, 16], 'false,true,true,false': [1.225, 6, 2], 'false,true,false,true': [16.896, 498, 669], 'false,true,false,false': [2.699, 10, 31], 'false,false': [0.389, 15, 32]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)'}, {'true,true': [0.491, 518, 708], 'true,false,true': [0.44, 5, 14], 'true,false,false,true': [1.879, 5, 12], 'true,false,false,false': [7.45e-09, 0, 5], 'false,true,true': [0.0, 0, 20], 'false,true,false': [0.49, 8, 6], 'false,false': [0.485, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)'}, {'true,true': [0.491, 518, 708], 'true,false,true': [0.44, 5, 14], 'true,false,false,true': [1.879, 5, 12], 'true,false,false,false': [7.45e-09, 0, 5], 'false,true,true': [0.0, 0, 20], 'false,true,false': [0.49, 8, 6], 'false,false': [0.485, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)'}, {'true,true': [0.491, 518, 708], 'true,false,true': [0.439, 5, 14], 'true,false,false,true': [1.879, 5, 12], 'true,false,false,false': [0.0, 0, 5], 'false,true,true': [2.36e-08, 0, 20], 'false,true,false': [0.49, 8, 6], 'false,false': [0.485, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)'}, {'true,true': [0.491, 518, 708], 'true,false,true': [0.439, 5, 14], 'true,false,false,true': [1.879, 5, 12], 'true,false,false,false': [0.0, 0, 5], 'false,true,true': [0.0, 0, 20], 'false,true,false': [0.49, 8, 6], 'false,false': [0.485, 8, 6]}]]
[{'': [0.24306651325713594, 0.22222222222222385], 'true': [0.24399564626142126, 0.1844140392623454], 'false': [0.17993079584775207, 0.24489795918367352], 'true,false': [0.19390581717451486, 0.17561983471074338], 'false,true': [-8.881784197001253e-17, 0.24489795918367352], 'true,false,false': [0.20761245674740453, 0.0]}, {'': [0.24265720194658646, 0.1968581969586748], 'true': [0.2439956462613994, 0.18151807630785113], 'false': [0.15465453537750243, 0.24489795918367324], 'true,false': [0.193905817174515, 0.17043669583228802], 'true,false,false': [0.20761245674740458, 0.0], 'false,true': [2.6645352591003756e-16, 0.24489795918367324]}, {'': [0.22952352137572604, 0.23994088079159373], 'false': [0.24253575522871812, 0.16862805083149526], 'false,true': [0.24431832529482975, 0.17873720595178558], 'true': [0.12749999999999978, 0.21079846857026777], 'true,false': [0.25, 0.17058790973374105], 'false,true,false': [0.1939058171745152, 0.16545366223293648], 'true,false,false': [0.18163970606836305, 0.16000000000000003], 'false,false': [0.12142920769740272, 0.2448979591836735]}, {'': [0.19994562389889503, 0.23941615243062975], 'false': [0.22625994024036983, 0.23961013344513094], 'false,false': [0.2425932862813787, 0.15824023666230003], 'false,false,true': [0.24463227179307315, 0.17846373208604321], 'false,true': [0.13296398891966763, 0.16962230622100344], 'true': [0.1275000000000001, 0.20475562200934608], 'true,false': [0.18166203218293547, 0.21406802670076014], 'true,false,false': [0.24999999999999997, 0.16000000000000003]}, {'': [0.23995439408544667, 0.1590622952821782], 'true': [0.24191733608603128, 0.1785280733274156], 'true,false': [0.19390581717451524, 0.1651373527918129], 'true,false,false': [0.2076124567474047, 0.0], 'false': [0.11542645576645058, 0.23714624213276053], 'false,true': [1.1102230246251565e-16, 0.24041321272285393]}, {'': [0.1782779048045048, 0.23810110333963377], 'false': [0.2413790329249792, 0.1510297245285281], 'false,true': [0.1901714883184296, 0.24241922930410048], 'false,true,false': [0.244632271793079, 0.1776699840851163], 'false,true,true': [0.13296398891966746, 0.18749999999999997], 'true': [0.1274999999999999, 0.1993232279903043], 'true,false': [0.1790659954152973, 0.20796506079479543], 'true,false,false': [0.24999999999999994, 0.15999999999999998]}, {'': [0.23915765519420404, 0.15104899293457089], 'true': [0.24117371092932965, 0.1779003890527293], 'true,false': [0.19390581717451524, 0.16396871158991017], 'true,false,false': [0.20761245674740483, 1.1102230246251566e-17], 'false': [0.10923600122023613, 0.2351747413139935], 'false,true': [-1.1102230246251566e-17, 0.23994576010171897]}, {'': [0.23913211332875853, 0.14710195910360024], 'true': [0.24117121646559517, 0.1774356090913909], 'true,false': [0.19390581717451527, 0.16311099915621954], 'true,false,false': [0.20761245674740483, 1.1102230246251566e-17], 'false': [0.10603817163160337, 0.23513611999896164], 'false,true': [-3.8857805861880476e-17, 0.23987588985337344]}, {'': [0.23912289149462979, 0.1447520361392868], 'true': [0.24117586844214026, 0.17715568842569926], 'true,false': [0.19282639322614203, 0.16345121577061686], 'true,false,false': [0.20761245674740486, 0.0], 'false': [0.10414235715796438, 0.23510723788818264], 'false,true': [2.7755575615628914e-17, 0.23982547160678927]}, {'': [0.23911436284734153, 0.14325197177896917], 'true': [0.24118303107661385, 0.1767787333122601], 'true,false': [0.19285764192710192, 0.1628350588515039], 'true,false,false': [0.20761245674740483, 0.0], 'false': [0.10292663370592503, 0.2350855761752126], 'false,true': [-2.7755575615628914e-17, 0.23978886733362198]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,false;haswordvenue(A, E), haswordtitle(F, E).;true;true
0;true,false,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
0;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
0;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,false;haswordvenue(A, E), haswordtitle(F, E).;true;true
1;true,false,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
1;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,false;haswordvenue(A, E), haswordtitle(F, E).;true;true
4;true,false,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
4;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
4;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,false;haswordvenue(A, E), haswordtitle(F, E).;true;true
6;true,false,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
6;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,false;haswordvenue(A, E), haswordtitle(F, E).;true;true
7;true,false,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
7;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
7;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,false;haswordvenue(B, E), haswordtitle(F, E).;true;true
8;true,false,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
8;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
8;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,false;haswordvenue(B, E), haswordtitle(F, E).;true;true
9;true,false,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
9;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.4356367001892301;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.5949910403626703;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.5640312880406888;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.37395569825543723;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.5062567560764839;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.48074388375574334;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.7194734122109543;  // std dev = 7.30e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.30665618885999163;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.4047531668618019;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.386198448632422;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.5553664367462845;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.5553664367462846;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.20848477447886868;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.20848477447886868;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.24206322397592006;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.3261448737160187;  // std dev = 0.439, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.2788572331674748;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.4175135841583099;  // std dev = 1.49e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.41751358415830986;  // std dev = 5.16e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.17062637354018512;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.17062637354018512;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.18614898381430323;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.24558668125641064;  // std dev = 0.439, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.20966773150020385;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.32071184716014967;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.3207118471601496;  // std dev = 2.11e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.13664585375352212;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.13664585375352212;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.4135394151203006;  // std dev = 0.357, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(A, C) )
%   | | then return 0.06353941512030048;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, A) )
%   | | | then return -0.1575832083121707;  // std dev = 0.838, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.23646058487969954;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.13891629954241463;  // std dev = 0.494, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.18620428986064227;  // std dev = 1.914, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.1780591823696338;  // std dev = 1.889, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then return 0.2100327524080362;  // std dev = 0.318, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | else return 0.10762034996184425;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.31058191631929993;  // std dev = 0.357, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(A, C) )
%   | | then return 0.04785303348920687;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, A) )
%   | | | then return -0.12052690831780194;  // std dev = 0.839, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.17942258157040308;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.10449961029747841;  // std dev = 0.494, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.14069831902044802;  // std dev = 1.914, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.1370524169548924;  // std dev = 1.891, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then return 0.16843702995295115;  // std dev = 0.319, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | else return 0.08372807955323866;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.34712684181837067;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( author(F, D), venue(F, B) )
%   | | then return -0.21372625367446108;  // std dev = 0.835, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( haswordvenue(B, C) )
%   | | | then return 0.03597442006497721;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.29696921335424414;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.07751350367436136;  // std dev = 0.493, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.10809142114220012;  // std dev = 1.914, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.10603568943105794;  // std dev = 1.894, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then return 0.15360721837689134;  // std dev = 0.316, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | else return 0.03059545088670803;  // std dev = 0.487, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.05982514348412126;  // std dev = 0.492, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.08291846669139255;  // std dev = 0.439, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.054321272887547796;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.18356754311218493;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.16752212454222276;  // std dev = 1.05e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.03433822606731878;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.02328574476475766;  // std dev = 0.487, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.2000459746671353;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( author(F, D), venue(F, A) )
%   | | then return -0.12018851735354101;  // std dev = 0.836, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( haswordvenue(A, C) )
%   | | | then return 0.01208444437856171;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.16956492889164648;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.0436338732504818;  // std dev = 0.493, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.0703940655567559;  // std dev = 1.913, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.06317814781880905;  // std dev = 1.894, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then return 0.10396067236492174;  // std dev = 0.317, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | else return 0.026125057433868972;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */


Results
   AUC ROC   = 0.535616
   AUC PR    = 0.344624
   CLL	      = -0.756649
   Precision = 0.353871 at threshold = 0.5
   Recall    = 0.956367
   F1        = 0.516595


Total learning time: 56.55392265319824 seconds
Total inference time: 6.568 seconds
AUC ROC: 0.535616


Results scoring model
   AUC ROC   = 0.553614
   AUC PR    = 0.662671
   CLL	      = -0.665734
   Precision = 0.594317 at threshold = 0.5
   Recall    = 0.976654
   F1        = 0.73896


Total scoring time: 0.981 seconds
Refined model CLL: -0.665734


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.535675
   AUC PR    = 0.345722
   CLL	      = -0.756358
   Precision = 0.353755 at threshold = 0.5
   Recall    = 0.956367
   F1        = 0.51647


Total learning time: 110.93700720787048 seconds
Total inference time: 5.966 seconds
AUC ROC: 0.535675
Total revision time: 110.93700720787048
Best scored revision CLL: -0.664913


Dataset: 13_twitter_cora, Fold: 2, Type: Transfer (trRDN-B), Time: 00:39:29
{'AUC ROC': 0.535675, 'AUC PR': 0.345722, 'CLL': -0.756358, 'Precision': [0.353755, 0.5], 'Recall': 0.956367, 'F1': 0.51647, 'Learning time': 110.93700720787048, 'Inference time': 5.966, 'parameter': {'AUC ROC': 0.535675, 'AUC PR': 0.345722, 'CLL': -0.756358, 'Precision': [0.353755, 0.5], 'Recall': 0.956367, 'F1': 0.51647, 'Learning time': 52.36308455467224, 'Inference time': 5.966}}


Starting fold 3

Target train facts examples: 9306
Target train pos examples: 581
Target train neg examples: 2222

Target test facts examples: 33252
Target test pos  examples: 2436
Target test neg examples: 2800

******************************************
Performing Parameter Learning
******************************************
Refine
0;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
0;true;follows(A, D).;false;false
0;false;follows(A, E), recursion_accounttype(E, B).;true;true
0;false,true;follows(A, F), follows(F, A).;false;true
0;false,true,false;follows(A, G), follows(G, E).;false;false
0;false,false;follows(H, A).;true;true
0;false,false,true;follows(I, H), follows(I, A).;false;false
0;false,false,false;follows(A, J), follows(J, K).;false;false
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;true;follows(A, C), tweets(A, D).;false;false
1;false;follows(A, E), recursion_accounttype(E, B).;true;true
1;false,true;tweets(A, F), tweets(E, F).;false;true
1;false,true,false;follows(G, A), follows(E, H).;false;false
1;false,false;follows(I, A).;true;true
1;false,false,true;follows(I, J), recursion_accounttype(J, B).;false;false
1;false,false,false;tweets(A, K).;false;false
2;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;true;follows(C, D), follows(D, A).;false;false
2;false;follows(E, A).;true;true
2;false,true;follows(F, E), follows(F, A).;false;true
2;false,true,false;follows(E, G), recursion_accounttype(G, B).;false;false
2;false,false;follows(A, H), follows(H, I).;true;true
2;false,false,true;recursion_accounttype(I, B).;false;false
2;false,false,false;follows(A, J).;false;false
3;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
3;true;tweets(A, D), tweets(C, D).;false;false
3;false;follows(E, A).;true;true
3;false,true;follows(F, E), recursion_accounttype(F, B).;true;false
3;false,true,true;follows(A, G), recursion_accounttype(G, B).;false;false
3;false,false;follows(A, H), recursion_accounttype(H, B).;true;true
3;false,false,true;follows(A, I), follows(I, H).;false;false
3;false,false,false;tweets(A, J), follows(A, K).;false;false
4;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
4;true;follows(A, D), follows(D, C).;true;false
4;true,true;follows(D, A).;false;true
4;true,true,false;tweets(A, E).;false;false
4;false;follows(F, A).;false;true
4;false,false;follows(A, G), recursion_accounttype(G, B).;true;true
4;false,false,true;follows(G, H), follows(H, G).;false;false
4;false,false,false;follows(A, I), follows(I, J).;false;false
5;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
5;true;follows(D, A), tweets(D, E).;true;true
5;true,true;recursion_accounttype(D, B).;false;false
5;true,false;follows(C, F), follows(F, C).;true;false
5;true,false,true;tweets(C, G), recursion_accounttype(F, B).;false;false
5;false;follows(A, H), follows(H, A).;false;true
5;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
5;false,false,false;tweets(A, J), follows(K, A).;false;false
6;;accounttype(A, B) :- follows(A, C).;true;true
6;true;follows(D, C), recursion_accounttype(D, B).;true;false
6;true,true;recursion_accounttype(C, B).;true;true
6;true,true,true;follows(E, A), follows(E, D).;false;false
6;true,true,false;follows(F, A), recursion_accounttype(F, B).;false;false
6;false;follows(G, A), recursion_accounttype(G, B).;false;true
6;false,false;follows(H, A).;false;true
6;false,false,false;tweets(A, I).;false;false
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;tweets(C, D), follows(A, C).;false;false
7;false;follows(E, A).;true;true
7;false,true;follows(E, F), recursion_accounttype(F, B).;true;false
7;false,true,true;follows(F, E), follows(A, F).;false;false
7;false,false;follows(A, G), recursion_accounttype(G, B).;true;true
7;false,false,true;tweets(A, H).;false;false
7;false,false,false;follows(A, I).;false;false
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;true;follows(C, D), recursion_accounttype(D, B).;false;true
8;true,false;follows(A, E), follows(E, A).;false;false
8;false;follows(F, A), follows(A, G).;true;true
8;false,true;follows(G, A), follows(G, F).;false;true
8;false,true,false;follows(H, F), recursion_accounttype(H, B).;false;false
8;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
8;false,false,false;follows(J, A).;false;false
9;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
9;true;follows(C, D).;true;false
9;true,true;follows(A, D).;true;true
9;true,true,true;follows(E, A), recursion_accounttype(E, B).;false;false
9;true,true,false;tweets(C, F), follows(D, C).;false;false
9;false;follows(A, G), follows(H, A).;false;true
9;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
9;false,false,false;follows(J, A).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2197945887159639;  // std dev = 0.480, 1,507.000 (wgt'ed) examples reached here.  /* #neg=962 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return -0.00851773156715447;  // std dev = 0.340, 15.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.011995088945666036;  // std dev = 0.361, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.039967116917694195;  // std dev = 3.618, 88.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=16 */
%   | | | else return 0.024815601766179047;  // std dev = 3.651, 96.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=16 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17971592236980977;  // std dev = 0.477, 1,555.000 (wgt'ed) examples reached here.  /* #neg=1,010 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return -0.03220639032352004;  // std dev = 0.314, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | then if ( title(H, G), venue(H, B) )
%   | | | then return 0.031986365427824855;  // std dev = 3.626, 90.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=16 */
%   | | | else return -0.02178622147544474;  // std dev = 1.323, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | | then return -0.14081736672249348;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.023522270157318035;  // std dev = 3.648, 95.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=16 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.14961655475439;  // std dev = 0.476, 1,569.000 (wgt'ed) examples reached here.  /* #neg=1,024 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.5485474663936174;  // std dev = 2.209, 23.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=16 */
%   | | | else return -0.14587462841268034;  // std dev = 0.038, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | | else if ( title(H, E), venue(H, B) )
%   | | | then return -0.14783767772089487;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return -0.014504344387561525;  // std dev = 1.317, 15.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return 0.03417532089446335;  // std dev = 3.612, 87.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=16 */
%   | | | else return -0.05316956593422195;  // std dev = 1.348, 22.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
%   | | else return -0.14783767772089484;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.20602236224903023;  // std dev = 0.495, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | else return 0.148879505106173;  // std dev = 0.483, 35.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=13 */
%   | else return 0.12871255386351801;  // std dev = 0.477, 1,506.000 (wgt'ed) examples reached here.  /* #neg=977 #pos=529 */
%   else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | then if ( title(I, H), venue(I, A) )
%   | | then if ( samebib(I, J), venue(J, B) )
%   | | | then return 0.49743740420129795;  // std dev = 2.092, 22.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return -0.12832473483973975;  // std dev = 0.038, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | | else return -0.05541968096534942;  // std dev = 0.274, 24.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=2 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( title(M, L), venue(M, B) )
%   | | | then return 0.011251576642740308;  // std dev = 3.652, 97.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=16 */
%   | | | else return -0.050688530656894215;  // std dev = 1.351, 23.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=2 */
%   | | else return -0.1286517975809999;  // std dev = 0.007, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.12399553411216188;  // std dev = 0.483, 1,474.000 (wgt'ed) examples reached here.  /* #neg=929 #pos=545 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( title(G, E), venue(G, A) )
%   | | | then return 0.4151298532602089;  // std dev = 2.621, 28.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=16 */
%   | | | else return -0.15507390863757933;  // std dev = 0.025, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | | else if ( title(H, E), venue(H, A) )
%   | | | then return -0.13173813835838052;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0.0682618616416195;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.026158079060381735;  // std dev = 2.929, 80.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=16 */
%   | | | else return -0.04210585826471857;  // std dev = 1.340, 22.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
%   | | else return -0.10771730408562728;  // std dev = 0.013, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08884072761695495;  // std dev = 0.480, 1,521.000 (wgt'ed) examples reached here.  /* #neg=976 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( title(G, E), venue(G, A) )
%   | | | then return 0.23968946857998571;  // std dev = 2.441, 32.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=16 */
%   | | | else return -0.12002615675930428;  // std dev = 0.222, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   | | else return 0.11572670197401624;  // std dev = 0.433, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return 0.014251424262344124;  // std dev = 3.396, 90.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=16 */
%   | | | else return -0.04070510595024206;  // std dev = 1.337, 22.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
%   | | else return -0.10134006035559733;  // std dev = 0.015, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06819705865617424;  // std dev = 0.479, 1,533.000 (wgt'ed) examples reached here.  /* #neg=988 #pos=545 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.5869982933150839;  // std dev = 1.718, 20.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=16 */
%   | | | else return -0.14563834725285746;  // std dev = 0.197, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   | | else if ( title(H, E), venue(H, A) )
%   | | | then return -0.11323442348067678;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0.03174438687729523;  // std dev = 1.291, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then return -0.08786375854556397;  // std dev = 0.008, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then return 0.006074092842863715;  // std dev = 1.001, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | | | else return 0.002858690276390223;  // std dev = 2.871, 92.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=16 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06330315689672647;  // std dev = 0.481, 1,494.000 (wgt'ed) examples reached here.  /* #neg=949 #pos=545 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( title(G, E), venue(G, A) )
%   | | | then return 0.25212024908468245;  // std dev = 2.461, 29.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=16 */
%   | | | else return -0.12312104076629696;  // std dev = 0.105, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | | else if ( title(H, E), venue(H, A) )
%   | | | then return -0.10235248580753999;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return 0.043147627862130715;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.010824240790315203;  // std dev = 2.735, 83.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=16 */
%   | | | else return -0.034336295094427115;  // std dev = 1.323, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | | else return -0.08737867007952045;  // std dev = 0.017, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04596353748573743;  // std dev = 0.480, 1,510.000 (wgt'ed) examples reached here.  /* #neg=965 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.059338329607462006;  // std dev = 0.296, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then if ( title(H, G), venue(H, A) )
%   | | | then return 0.0071503547542852005;  // std dev = 2.727, 85.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=16 */
%   | | | else return -0.026415503721837423;  // std dev = 1.318, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | | else return -0.019736425136963158;  // std dev = 0.302, 97.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=16 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordtitle(D, C) )
%   then if ( title(E, D), venue(E, B) )
%   | then if ( samebib(E, F), venue(F, A) )
%   | | then if ( haswordvenue(B, C) )
%   | | | then return 0.5502894757448641;  // std dev = 6.873, 433.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=379 */
%   | | | else return 0.4210999439895172;  // std dev = 1.781, 21.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=17 */
%   | | else return -0.28537219066795333;  // std dev = 0.147, 866.000 (wgt'ed) examples reached here.  /* #neg=850 #pos=16 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.13837127889262046;  // std dev = 0.499, 285.000 (wgt'ed) examples reached here.  /* #neg=153 #pos=132 */
%   | | else return 0.11004605909333244;  // std dev = 0.445, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then return 0.09887675622777684;  // std dev = 0.499, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | else return 0.47406817097257686;  // std dev = 0.399, 15.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=12 */
%   | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | then return 0.0063466371990110034;  // std dev = 0.304, 98.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=18 */
%   | | else return -0.08774654512304916;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.866105
   AUC PR    = 0.76248
   CLL	      = -0.569926
   Precision = 0.584158 at threshold = 0.5
   Recall    = 0.02422
   F1        = 0.046512


Total learning time: 81.9914345741272 seconds
Total inference time: 14.312 seconds
AUC ROC: 0.866105


Results scoring model
   AUC ROC   = 0.933571
   AUC PR    = 0.741524
   CLL	      = -0.428161
   Precision = 0.636364 at threshold = 0.5
   Recall    = 0.024096
   F1        = 0.046434


Total scoring time: 2.128 seconds
Parameter learned model CLL: -0.428161


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(B, F), haswordauthor(G, F)', 'false,false,false': 'haswordvenue(B, H), haswordtitle(I, H)'}, {'true': [0.48, 962, 545], 'false,true': [0.34, 13, 2], 'false,false,true': [0.361, 11, 2], 'false,false,false,true': [3.618, 72, 16], 'false,false,false,false': [3.651, 80, 16]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(B, F), haswordtitle(G, F)', 'false,false,true': 'title(H, G), venue(H, B)', 'false,false,false': 'haswordvenue(A, I), haswordauthor(J, I)'}, {'true': [0.477, 1, 545], 'false,true': [0.314, 16, 2], 'false,false,true,true': [3.626, 74, 16], 'false,false,true,false': [1.323, 14, 2], 'false,false,false,true': [0.0, 5, 0], 'false,false,false,false': [3.648, 79, 16]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordtitle(E, D)', 'false,true': 'title(F, E), venue(F, A)', 'false,true,true': 'samebib(F, G), venue(G, B)', 'false,true,false': 'title(H, E), venue(H, B)', 'false,false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,false,true': 'title(K, J), venue(K, B)'}, {'true': [0.476, 1, 545], 'false,true,true,true': [2.209, 7, 16], 'false,true,true,false': [0.038, 58, 0], 'false,true,false,true': [0.0, 10, 0], 'false,true,false,false': [1.317, 13, 2], 'false,false,true,true': [3.612, 71, 16], 'false,false,true,false': [1.348, 20, 2], 'false,false,false': [0.0, 3, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordauthor(F, C)', 'false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false,true': 'title(I, H), venue(I, A)', 'false,true,true': 'samebib(I, J), venue(J, B)', 'false,false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false,false,true': 'title(M, L), venue(M, B)'}, {'true,true,true': [0.495, 4, 3], 'true,true,false': [0.483, 22, 13], 'true,false': [0.477, 977, 529], 'false,true,true,true': [2.092, 6, 16], 'false,true,true,false': [0.038, 56, 0], 'false,true,false': [0.274, 22, 2], 'false,false,true,true': [3.652, 81, 16], 'false,false,true,false': [1.351, 21, 2], 'false,false,false': [0.007, 5, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordtitle(E, D)', 'false,true': 'title(F, E), venue(F, B)', 'false,true,true': 'title(G, E), venue(G, A)', 'false,true,false': 'title(H, E), venue(H, A)', 'false,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,false,true': 'title(K, J), venue(K, A)'}, {'true': [0.483, 929, 545], 'false,true,true,true': [2.621, 12, 16], 'false,true,true,false': [0.025, 55, 0], 'false,true,false,true': [0.0, 9, 0], 'false,true,false,false': [1.265, 8, 2], 'false,false,true,true': [2.929, 64, 16], 'false,false,true,false': [1.34, 20, 2], 'false,false,false': [0.013, 3, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordtitle(E, D)', 'false,true': 'title(F, E), venue(F, B)', 'false,true,true': 'title(G, E), venue(G, A)', 'false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false,false,true': 'title(J, I), venue(J, B)'}, {'true': [0.48, 976, 545], 'false,true,true,true': [2.441, 16, 16], 'false,true,true,false': [0.222, 68, 0], 'false,true,false': [0.433, 6, 2], 'false,false,true,true': [3.396, 74, 16], 'false,false,true,false': [1.337, 20, 2], 'false,false,false': [0.015, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordtitle(E, D)', 'false,true': 'title(F, E), venue(F, B)', 'false,true,true': 'samebib(F, G), venue(G, A)', 'false,true,false': 'title(H, E), venue(H, A)', 'false,false': 'haswordvenue(A, I), haswordauthor(J, I)', 'false,false,false': 'haswordvenue(B, K), haswordauthor(L, K)'}, {'true': [0.479, 988, 545], 'false,true,true,true': [1.718, 4, 16], 'false,true,true,false': [0.197, 66, 0], 'false,true,false,true': [0.0, 7, 0], 'false,true,false,false': [1.291, 10, 2], 'false,false,true': [0.008, 5, 0], 'false,false,false,true': [1.001, 9, 2], 'false,false,false,false': [2.871, 76, 16]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordtitle(E, D)', 'false,true': 'title(F, E), venue(F, B)', 'false,true,true': 'title(G, E), venue(G, A)', 'false,true,false': 'title(H, E), venue(H, A)', 'false,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,false,true': 'title(K, J), venue(K, A)'}, {'true': [0.481, 949, 545], 'false,true,true,true': [2.461, 13, 16], 'false,true,true,false': [0.105, 52, 0], 'false,true,false,true': [5.27e-09, 11, 0], 'false,true,false,false': [1.279, 9, 2], 'false,false,true,true': [2.735, 67, 16], 'false,false,true,false': [1.323, 18, 2], 'false,false,false': [0.017, 3, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(A, F), haswordtitle(G, F)', 'false,false,true': 'title(H, G), venue(H, A)'}, {'true': [0.48, 965, 545], 'false,true': [0.296, 7, 2], 'false,false,true,true': [2.727, 69, 16], 'false,false,true,false': [1.318, 18, 2], 'false,false,false': [0.302, 81, 16]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordtitle(D, C)', 'true': 'title(E, D), venue(E, B)', 'true,true': 'samebib(E, F), venue(F, A)', 'true,true,true': 'haswordvenue(B, C)', 'true,false': 'haswordvenue(B, C)', 'false': 'haswordvenue(A, G), haswordvenue(B, G)', 'false,true': 'haswordvenue(B, H), haswordtitle(I, H)', 'false,false': 'haswordvenue(B, J), haswordtitle(K, J)'}, {'true,true,true,true': [6.873, 54, 379], 'true,true,true,false': [1.781, 4, 17], 'true,true,false': [0.147, 850, 16], 'true,false,true': [0.499, 153, 132], 'true,false,false': [0.445, 9, 4], 'false,true,true': [0.499, 4, 3], 'false,true,false': [0.399, 3, 12], 'false,false,true': [0.304, 80, 18], 'false,false,false': [0.0, 4, 0]}]]
[{'': [0.23085807483676896, 0.14097543609825672], 'false': [0.11555555555555559, 0.14280192738797812], 'false,false': [0.13017751479289943, 0.1436672967863905], 'false,false,false': [0.14876033057851187, 0.13888888888888834]}, {'': [0.22764446190588616, 0.13480823617442844], 'false': [0.09876543209876551, 0.13774100114619794], 'false,false': [0.14091814204464154, 0.13433548860081193], 'false,false,true': [0.14608936025433175, 0.10937500000000006], 'false,false,false': [0.0, 0.14005540166204944]}, {'': [0.2266995049478722, 0.13770271966019626], 'false': [0.14089005577502334, 0.13462661368321088], 'false,true': [0.15831060960169607, 0.07360000000000005], 'false,true,true': [0.21217202369372815, 2.4525418884757677e-05], 'false,false': [0.13760812924443575, -4.625929269271485e-18], 'false,false,true': [0.14996712137267026, 0.08264462809917354], 'false,true,false': [-5.551115123125783e-18, 0.1155555555555556]}, {'': [0.22811588179130352, 0.1230299835957611], 'true': [0.2358276643990925, 0.2278768943702949], 'true,true': [0.2448979591836735, 0.23346938775510157], 'false': [0.12319646363713554, 0.1225020575047372], 'false,true': [0.1354272334063597, 0.07524017815234597], 'false,true,true': [0.19895142152138695, 2.6153611699003938e-05], 'false,false': [0.1269502454137402, 9.160299890886846e-06], 'false,false,true': [0.13749086736499577, 0.07939508506616255]}, {'': [0.23300883282472445, 0.1220505216614375], 'false': [0.14464257497370284, 0.09995516075119062], 'false,true': [0.15543635772427397, 0.09418282548476457], 'false,true,true': [0.24528646353442735, 1.1289985023617404e-05], 'false,false': [0.10248760619622768, 6.0499662953563314e-05], 'false,false,true': [0.1072353590455403, 0.08156817576162342], 'false,true,false': [0.0, 0.16000000000000003]}, {'': [0.22992257933450952, 0.10646733530162533], 'false': [0.09660875977852024, 0.1156375981489043], 'false,false': [0.11938681382001952, 5.596290080850039e-05], 'false,false,true': [0.12810804190108496, 0.08128209990813084], 'false,true': [0.08825931681088603, 0.18750000000000003], 'false,true,true': [0.18627623270481738, 0.0007272033751533412]}, {'': [0.22911705632127669, 0.10480457640324442], 'false': [0.1240341395187537, 0.08596063971446755], 'false,true': [0.13058688707919602, 0.0926101122567949], 'false,true,true': [0.14764579647681791, 0.0005904398735149655], 'false,true,false': [-5.9476233462061954e-18, 0.13888888888888892], 'false,false': [1.3368536553323706e-05, 0.0897489027399741], 'false,false,false': [0.09106948498555713, 0.0895899028915494]}, {'': [0.23171999422068887, 0.09454277487237644], 'false': [0.1016731541055083, 0.08760982173933794], 'false,true': [0.10729255076044095, 0.07967273605872795], 'false,true,true': [0.20890646639398183, 0.00021121779709771548], 'false,false': [0.0899325447210007, 9.095173106790759e-05], 'false,false,true': [0.0901189544217803, 0.08751548483057107], 'false,true,false': [2.523234146875356e-18, 0.14876033057851237]}, {'': [0.23064380301191412, 0.08957377125902023], 'false': [0.0878573498056471, 0.08945055587469222], 'false,false': [0.08752206295286465, 0.0913197961045961], 'false,false,true': [0.08747669836464471, 0.08680279880808164]}, {'': [0.21780997363970805, 0.13028817701666198], 'true': [0.20787162727536565, 0.24648733399995953], 'true,false': [0.24864265927977505, 0.19846865447266063], 'true,true': [0.11177959187816426, 0.021487248641134535], 'false': [0.21860953978026154, 0.0892514595300084], 'false,true': [0.24916508730111636, 0.15956027591200966], 'true,true,true': [0.10910728787918275, 0.15096202157455924], 'false,false': [0.09254717910985258, 0.0]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
1;false,false;haswordvenue(B, F), haswordtitle(G, F).;true;true
1;false,false,false;haswordvenue(A, I), haswordauthor(J, I).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;false;haswordvenue(A, D), haswordtitle(E, D).;true;true
2;false,true;title(F, E), venue(F, A).;true;true
2;false,true,true;samebib(F, G), venue(G, B).;true;true
2;false,true,false;title(H, E), venue(H, B).;true;true
2;false,false;haswordvenue(B, I), haswordtitle(J, I).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;false;haswordvenue(A, G), haswordtitle(H, G).;true;true
3;false,true;title(I, H), venue(I, A).;true;true
3;false,true,true;samebib(I, J), venue(J, B).;true;true
3;false,false;haswordvenue(B, K), haswordtitle(L, K).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
4;false,true;title(F, E), venue(F, B).;true;true
4;false,true,true;title(G, E), venue(G, A).;true;true
4;false,true,false;title(H, E), venue(H, A).;true;true
4;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;false;haswordvenue(A, D), haswordtitle(E, D).;true;true
5;false,true;title(F, E), venue(F, B).;true;true
5;false,true,true;title(G, E), venue(G, A).;true;true
5;false,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
6;false,true;title(F, E), venue(F, B).;true;true
6;false,true,true;samebib(F, G), venue(G, A).;true;true
6;false,true,false;title(H, E), venue(H, A).;true;true
6;false,false;haswordvenue(A, I), haswordauthor(J, I).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
7;false,true;title(F, E), venue(F, B).;true;true
7;false,true,true;title(G, E), venue(G, A).;true;true
7;false,true,false;title(H, E), venue(H, A).;true;true
7;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordtitle(D, C).;true;true
9;false;haswordvenue(A, G), haswordvenue(B, G).;true;true
9;false,false;haswordvenue(B, J), haswordtitle(K, J).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2276404605232362;  // std dev = 0.483, 1,475.000 (wgt'ed) examples reached here.  /* #neg=930 #pos=545 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.6200536970042743;  // std dev = 1.952, 21.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=16 */
%   | | | else return -0.14185106490048766;  // std dev = 7.60e-08, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
%   | | else return 0.2581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.016043671941617644;  // std dev = 3.893, 114.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=18 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.18526257630597406;  // std dev = 0.479, 1,526.000 (wgt'ed) examples reached here.  /* #neg=981 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.0017529025131123766;  // std dev = 0.312, 14.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return -0.009257251125021565;  // std dev = 0.339, 15.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.0466608955942671;  // std dev = 3.599, 84.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=16 */
%   | | | else return 0.020924637994135308;  // std dev = 3.313, 93.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=16 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D), haswordtitle(F, C) )
%   | | then return 0.46679505207520106;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordauthor(G, C) )
%   | | | then return 0.1334617187418677;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.09558293086307983;  // std dev = 3.026, 44.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=13 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.12512838540853438;  // std dev = 0.468, 40.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=13 */
%   | | else return 0.1574691056301343;  // std dev = 0.479, 1,444.000 (wgt'ed) examples reached here.  /* #neg=928 #pos=516 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( title(L, K), venue(L, A) )
%   | | then if ( samebib(L, M), venue(M, B) )
%   | | | then return 0.5466021318000736;  // std dev = 2.209, 23.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=16 */
%   | | | else return -0.1482051435855619;  // std dev = 0.029, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | | else return -0.04439363289296596;  // std dev = 0.307, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | else return 0.005187546994297541;  // std dev = 0.333, 113.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=18 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.4965160615812166;  // std dev = 0.831, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.1094033446044207;  // std dev = 0.468, 40.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=13 */
%   | else return 0.12798667007140127;  // std dev = 0.478, 1,494.000 (wgt'ed) examples reached here.  /* #neg=965 #pos=529 */
%   else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | then if ( title(I, H), venue(I, B) )
%   | | then if ( samebib(I, J), venue(J, A) )
%   | | | then return 0.4563162812984142;  // std dev = 2.207, 23.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=16 */
%   | | | else return -0.12795516829561804;  // std dev = 0.007, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
%   | | else if ( title(K, H), venue(K, A) )
%   | | | then return -0.12833749051005852;  // std dev = 5.27e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return -0.01342318158466904;  // std dev = 1.291, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | then return -0.011717781770663568;  // std dev = 0.310, 15.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   | | else return 0.02974554299788911;  // std dev = 0.359, 86.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=16 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10621218195339681;  // std dev = 0.479, 1,533.000 (wgt'ed) examples reached here.  /* #neg=988 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.6054241978642726;  // std dev = 1.593, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return -0.1327378363927738;  // std dev = 0.043, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
%   | | else if ( title(H, E), venue(H, B) )
%   | | | then return -0.14780223070404627;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return -0.004945087846903437;  // std dev = 1.309, 14.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return -0.005409931228098866;  // std dev = 2.952, 107.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=16 */
%   | | | else return 0.07188368072912195;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return -0.1311577379986267;  // std dev = 0.002, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08419989107748976;  // std dev = 0.478, 1,540.000 (wgt'ed) examples reached here.  /* #neg=995 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.4798633743216482;  // std dev = 1.594, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return -0.1183653237047098;  // std dev = 0.040, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   | | else if ( title(H, E), venue(H, B) )
%   | | | then return -0.1301372528034956;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return -0.013847114464115635;  // std dev = 1.317, 15.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   | else return -0.008120162774197059;  // std dev = 0.307, 113.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=18 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.09804154576295121;  // std dev = 1.196, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.02214576445405621;  // std dev = 0.459, 43.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=13 */
%   | else return 0.07184800138357542;  // std dev = 0.479, 1,477.000 (wgt'ed) examples reached here.  /* #neg=948 #pos=529 */
%   else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | then if ( title(I, H), venue(I, B) )
%   | | then if ( samebib(I, J), venue(J, A) )
%   | | | then return 0.3668353861489286;  // std dev = 2.207, 23.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=16 */
%   | | | else return -0.11296044215820106;  // std dev = 0.007, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | | else if ( title(K, H), venue(K, A) )
%   | | | then return -0.1132860438044929;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return -0.005824838573950815;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return -0.022790337555793808;  // std dev = 0.265, 115.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=18 */
%   | | else return -0.11618304487671768;  // std dev = 0.002, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C) )
%   | | then return 0.029279264982655734;  // std dev = 0.462, 46.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=15 */
%   | | else return -0.05159880195916603;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return 0.05218514762175073;  // std dev = 0.478, 1,497.000 (wgt'ed) examples reached here.  /* #neg=968 #pos=529 */
%   else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | then if ( title(I, H), venue(I, B) )
%   | | then if ( samebib(I, J), venue(J, A) )
%   | | | then return 0.3477819107222534;  // std dev = 1.951, 21.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=16 */
%   | | | else return -0.10207401953404883;  // std dev = 0.006, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | | else if ( title(K, H), venue(K, A) )
%   | | | then return -0.10239497368110564;  // std dev = 3.73e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return -0.020090070459260142;  // std dev = 1.291, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return -0.03316546115113779;  // std dev = 0.276, 117.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=18 */
%   | | else return -0.10374211679384944;  // std dev = 0.006, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C) )
%   | | then return 0.07550277897289029;  // std dev = 0.481, 39.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=15 */
%   | | else return -0.1227904181492974;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.053324641798643165;  // std dev = 0.482, 1,447.000 (wgt'ed) examples reached here.  /* #neg=918 #pos=529 */
%   else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | then if ( title(I, H), venue(I, A) )
%   | | then if ( samebib(I, J), venue(J, B) )
%   | | | then return 0.22703395765240444;  // std dev = 2.089, 22.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return -0.09322769643451645;  // std dev = 0.005, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
%   | | else return 0.06627533278301723;  // std dev = 0.433, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then if ( title(M, L), venue(M, A) )
%   | | | then return -0.021890614303854465;  // std dev = 2.640, 92.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=16 */
%   | | | else return -0.03803249290315906;  // std dev = 1.338, 21.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=2 */
%   | | else return -0.09425789424908498;  // std dev = 0.005, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordtitle(D, C) )
%   then if ( title(E, D), venue(E, A) )
%   | then if ( samebib(E, F), venue(F, B) )
%   | | then if ( haswordvenue(A, C) )
%   | | | then return 0.5656112501133325;  // std dev = 6.474, 426.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=379 */
%   | | | else return 0.2369474582844323;  // std dev = 1.927, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | | else return -0.28335282338024936;  // std dev = 0.147, 885.000 (wgt'ed) examples reached here.  /* #neg=869 #pos=16 */
%   | else if ( haswordvenue(A, C) )
%   | | then return 0.15047437621626422;  // std dev = 0.499, 278.000 (wgt'ed) examples reached here.  /* #neg=146 #pos=132 */
%   | | else return 0.031663372186127546;  // std dev = 0.412, 16.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=4 */
%   else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | then if ( title(I, H), venue(I, B) )
%   | | then if ( samebib(I, J), venue(J, A) )
%   | | | then return 0.40444610410291765;  // std dev = 1.551, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | | else return -0.10319641363383189;  // std dev = 0.225, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
%   | | else return 0.11501819373261221;  // std dev = 0.445, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | else return 0.3812079496641729;  // std dev = 0.387, 19.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=12 */


Results
   AUC ROC   = 0.849983
   AUC PR    = 0.725357
   CLL	      = -0.566314
   Precision = 0.576471 at threshold = 0.5
   Recall    = 0.060345
   F1        = 0.109253


Total learning time: 95.58180022239685 seconds
Total inference time: 14.43 seconds
AUC ROC: 0.849983


Results scoring model
   AUC ROC   = 0.930173
   AUC PR    = 0.706882
   CLL	      = -0.423826
   Precision = 0.607143 at threshold = 0.5
   Recall    = 0.05852
   F1        = 0.10675


Total scoring time: 2.385 seconds
Refined model CLL: -0.423826


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.849983
   AUC PR    = 0.725357
   CLL	      = -0.566314
   Precision = 0.576471 at threshold = 0.5
   Recall    = 0.060345
   F1        = 0.109253


Total learning time: 182.08623479652402 seconds
Total inference time: 14.43 seconds
AUC ROC: 0.849983
Total revision time: 182.08623479652402
Best scored revision CLL: -0.423826


Dataset: 13_twitter_cora, Fold: 3, Type: Transfer (trRDN-B), Time: 00:43:00
{'AUC ROC': 0.849983, 'AUC PR': 0.725357, 'CLL': -0.566314, 'Precision': [0.576471, 0.5], 'Recall': 0.060345, 'F1': 0.109253, 'Learning time': 182.08623479652402, 'Inference time': 14.43, 'parameter': {'AUC ROC': 0.866105, 'AUC PR': 0.76248, 'CLL': -0.569926, 'Precision': [0.584158, 0.5], 'Recall': 0.02422, 'F1': 0.046512, 'Learning time': 81.9914345741272, 'Inference time': 14.312}}


Starting fold 4

Target train facts examples: 8129
Target train pos examples: 747
Target train neg examples: 1068

Target test facts examples: 34429
Target test pos  examples: 2270
Target test neg examples: 3954

******************************************
Performing Parameter Learning
******************************************
Refine
0;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
0;true;follows(A, D).;false;false
0;false;follows(A, E), recursion_accounttype(E, B).;true;true
0;false,true;follows(A, F), follows(F, A).;false;true
0;false,true,false;follows(A, G), follows(G, E).;false;false
0;false,false;follows(H, A).;true;true
0;false,false,true;follows(I, H), follows(I, A).;false;false
0;false,false,false;follows(A, J), follows(J, K).;false;false
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;true;follows(A, C), tweets(A, D).;false;false
1;false;follows(A, E), recursion_accounttype(E, B).;true;true
1;false,true;tweets(A, F), tweets(E, F).;false;true
1;false,true,false;follows(G, A), follows(E, H).;false;false
1;false,false;follows(I, A).;true;true
1;false,false,true;follows(I, J), recursion_accounttype(J, B).;false;false
1;false,false,false;tweets(A, K).;false;false
2;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;true;follows(C, D), follows(D, A).;false;false
2;false;follows(E, A).;true;true
2;false,true;follows(F, E), follows(F, A).;false;true
2;false,true,false;follows(E, G), recursion_accounttype(G, B).;false;false
2;false,false;follows(A, H), follows(H, I).;true;true
2;false,false,true;recursion_accounttype(I, B).;false;false
2;false,false,false;follows(A, J).;false;false
3;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
3;true;tweets(A, D), tweets(C, D).;false;false
3;false;follows(E, A).;true;true
3;false,true;follows(F, E), recursion_accounttype(F, B).;true;false
3;false,true,true;follows(A, G), recursion_accounttype(G, B).;false;false
3;false,false;follows(A, H), recursion_accounttype(H, B).;true;true
3;false,false,true;follows(A, I), follows(I, H).;false;false
3;false,false,false;tweets(A, J), follows(A, K).;false;false
4;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
4;true;follows(A, D), follows(D, C).;true;false
4;true,true;follows(D, A).;false;true
4;true,true,false;tweets(A, E).;false;false
4;false;follows(F, A).;false;true
4;false,false;follows(A, G), recursion_accounttype(G, B).;true;true
4;false,false,true;follows(G, H), follows(H, G).;false;false
4;false,false,false;follows(A, I), follows(I, J).;false;false
5;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
5;true;follows(D, A), tweets(D, E).;true;true
5;true,true;recursion_accounttype(D, B).;false;false
5;true,false;follows(C, F), follows(F, C).;true;false
5;true,false,true;tweets(C, G), recursion_accounttype(F, B).;false;false
5;false;follows(A, H), follows(H, A).;false;true
5;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
5;false,false,false;tweets(A, J), follows(K, A).;false;false
6;;accounttype(A, B) :- follows(A, C).;true;true
6;true;follows(D, C), recursion_accounttype(D, B).;true;false
6;true,true;recursion_accounttype(C, B).;true;true
6;true,true,true;follows(E, A), follows(E, D).;false;false
6;true,true,false;follows(F, A), recursion_accounttype(F, B).;false;false
6;false;follows(G, A), recursion_accounttype(G, B).;false;true
6;false,false;follows(H, A).;false;true
6;false,false,false;tweets(A, I).;false;false
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;tweets(C, D), follows(A, C).;false;false
7;false;follows(E, A).;true;true
7;false,true;follows(E, F), recursion_accounttype(F, B).;true;false
7;false,true,true;follows(F, E), follows(A, F).;false;false
7;false,false;follows(A, G), recursion_accounttype(G, B).;true;true
7;false,false,true;tweets(A, H).;false;false
7;false,false,false;follows(A, I).;false;false
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;true;follows(C, D), recursion_accounttype(D, B).;false;true
8;true,false;follows(A, E), follows(E, A).;false;false
8;false;follows(F, A), follows(A, G).;true;true
8;false,true;follows(G, A), follows(G, F).;false;true
8;false,true,false;follows(H, F), recursion_accounttype(H, B).;false;false
8;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
8;false,false,false;follows(J, A).;false;false
9;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
9;true;follows(C, D).;true;false
9;true,true;follows(A, D).;true;true
9;true,true,true;follows(E, A), recursion_accounttype(E, B).;false;false
9;true,true,false;tweets(C, F), follows(D, C).;false;false
9;false;follows(A, G), follows(H, A).;false;true
9;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
9;false,false,false;follows(J, A).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.27854694504975613;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.2867203636709409;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.44905802600860323;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.44905802600860323;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.5724346493852266;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( title(L, K), venue(L, B) )
%   | | then if ( samebib(L, M), venue(M, A) )
%   | | | then return 0.35814893509951234;  // std dev = 2.646, 28.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=14 */
%   | | | else return -0.1418510649004877;  // std dev = 3.49e-08, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | else return 0.15814893509951225;  // std dev = 0.458, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | else return 0.05814893509951237;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.2411503606196619;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.24811816884741328;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.3851926776601658;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.3851926776601658;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.48767788391726297;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( title(L, K), venue(L, A) )
%   | | then if ( samebib(L, M), venue(M, B) )
%   | | | then return 0.3490455499806145;  // std dev = 2.641, 28.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=14 */
%   | | | else return -0.1509544500193851;  // std dev = 0.027, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | else return 0.14586633830141374;  // std dev = 0.434, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | else return 0.04516790468702694;  // std dev = 0.383, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.20289930723994204;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.20848477447886868;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.31518052304212246;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.31518052304212246;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.3912569620992536;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.1585429014253648;  // std dev = 0.443, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.039214416516084004;  // std dev = 0.382, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.03870296233968486;  // std dev = 0.382, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.7460022840154411;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.25399771598455895;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.546002284015441;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.16413830416657968;  // std dev = 0.493, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.20469176329622513;  // std dev = 3.500, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.2607257858346721;  // std dev = 2.600, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(B, M) )
%   | | then return 0.13472409791100953;  // std dev = 0.441, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.03389801444511924;  // std dev = 0.382, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.03344352612730281;  // std dev = 0.382, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.13348748687046985;  // std dev = 0.493, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.12955478951205684;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.18715399206068548;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.2005676010604394;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.23624775363596132;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.11264817669004705;  // std dev = 0.438, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.029190705410313406;  // std dev = 0.381, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.028790009131801634;  // std dev = 0.381, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.6685928476187613;  // std dev = 0.128, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.3143678211835305;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.4681429992399019;  // std dev = 0.878, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.15873547436759788;  // std dev = 1.461, 14.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   | | | else return 0.3481862809336316;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordtitle(K, C) )
%   | | | then return 0.10219268837061965;  // std dev = 19.534, 1,570.000 (wgt'ed) examples reached here.  /* #neg=916 #pos=654 */
%   | | | else return 0.1334470062776422;  // std dev = 4.356, 79.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=43 */
%   else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | then return 0.04178143576420727;  // std dev = 0.396, 73.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=17 */
%   | else return 0.024702614859949727;  // std dev = 0.381, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.08216841375950075;  // std dev = 0.491, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.07170322396974498;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.10821267530523228;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.1188455664276252;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.14430069265367015;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.08527135620546479;  // std dev = 0.436, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.021135145132366195;  // std dev = 0.381, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.018996192804202117;  // std dev = 0.381, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then return 0.13665514170192228;  // std dev = 0.379, 15.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
%   | | else return 0.33808774036884015;  // std dev = 0.877, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.06201696963553115;  // std dev = 0.492, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.06656020619685848;  // std dev = 3.491, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.09403497414943879;  // std dev = 2.598, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( title(L, K), venue(L, A) )
%   | | then if ( samebib(L, M), venue(M, B) )
%   | | | then return 0.2629987204751149;  // std dev = 2.615, 28.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=14 */
%   | | | else return -0.158898955836907;  // std dev = 0.150, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | else return 0.04356352230964059;  // std dev = 0.419, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | else return 0.016189158485670156;  // std dev = 0.380, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04886965504115822;  // std dev = 0.491, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.03938176490391828;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.06455082543333983;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.06567601070572429;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.0871085537185707;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.059019385365247014;  // std dev = 0.419, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.013770637818403647;  // std dev = 0.380, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.006937497314502556;  // std dev = 0.365, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, A) )
%   | then if ( samebib(E, F), venue(F, B) )
%   | | then return 0.44375350611956826;  // std dev = 0.129, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.28263826374888995;  // std dev = 0.058, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0.24223422070339956;  // std dev = 0.877, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.0362273746875475;  // std dev = 0.492, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.038124824673624616;  // std dev = 3.490, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.053590750686721846;  // std dev = 2.598, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, M), haswordvenue(B, M) )
%   | | | then return 0.047445274706557454;  // std dev = 1.771, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.011694349882872485;  // std dev = 2.818, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.008411570483111412;  // std dev = 0.368, 54.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=11 */


Results
   AUC ROC   = 0.577309
   AUC PR    = 0.433039
   CLL	      = -0.632462
   Precision = 0.503797 at threshold = 0.5
   Recall    = 0.087665
   F1        = 0.149343


Total learning time: 100.28438782691956 seconds
Total inference time: 7.877 seconds
AUC ROC: 0.577309


Results scoring model
   AUC ROC   = 0.560622
   AUC PR    = 0.482438
   CLL	      = -0.659194
   Precision = 0.706667 at threshold = 0.5
   Recall    = 0.07095
   F1        = 0.128954


Total scoring time: 1.344 seconds
Parameter learned model CLL: -0.659194


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(B, G)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'title(L, K), venue(L, B)', 'false,true,true': 'samebib(L, M), venue(M, A)'}, {'true,true': [0.494, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true,true': [2.646, 14, 14], 'false,true,true,false': [3.49e-08, 35, 0], 'false,true,false': [0.458, 7, 3], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(B, G)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false,true': 'title(L, K), venue(L, A)', 'false,true,true': 'samebib(L, M), venue(M, B)'}, {'true,true': [0.494, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true,true': [2.641, 14, 14], 'false,true,true,false': [0.027, 35, 0], 'false,true,false': [0.434, 7, 3], 'false,false': [0.383, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(A, G)', 'true,false,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)'}, {'true,true': [0.494, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.443, 12, 6], 'false,true,false': [0.382, 44, 11], 'false,false': [0.382, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, B)', 'true,true,true': 'samebib(F, G), venue(G, A)', 'true,false': 'haswordtitle(H, C)', 'true,false,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false,true': 'haswordtitle(L, M), haswordvenue(B, M)'}, {'true,true,true,true': [0.0, 0, 8], 'true,true,true,false': [0.0, 7, 0], 'true,true,false': [0.894, 1, 4], 'true,false,true': [0.493, 924, 664], 'true,false,false,true': [3.5, 25, 25], 'true,false,false,false': [2.6, 11, 18], 'false,true,true': [0.441, 12, 6], 'false,true,false': [0.382, 44, 11], 'false,false': [0.382, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(A, G)', 'true,false,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)'}, {'true,true': [0.493, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.438, 12, 6], 'false,true,false': [0.381, 44, 11], 'false,false': [0.381, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, A)', 'true,true,true': 'samebib(F, G), venue(G, B)', 'true,false': 'haswordvenue(A, H), haswordauthor(I, H)', 'true,false,true': 'author(J, I), venue(J, B)', 'true,false,false': 'haswordtitle(K, C)', 'false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true,true,true': [0.128, 0, 8], 'true,true,true,false': [0.0, 7, 0], 'true,true,false': [0.878, 1, 4], 'true,false,true,true': [1.461, 7, 7], 'true,false,true,false': [0.866, 1, 3], 'true,false,false,true': [19.534, 916, 654], 'true,false,false,false': [4.356, 36, 43], 'false,true': [0.396, 56, 17], 'false,false': [0.381, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(A, G)', 'true,false,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(A, L)'}, {'true,true': [0.491, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.436, 12, 6], 'false,true,false': [0.381, 44, 11], 'false,false': [0.381, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, A)', 'true,false': 'haswordtitle(G, C)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false,true': 'title(L, K), venue(L, A)', 'false,true,true': 'samebib(L, M), venue(M, B)'}, {'true,true,true': [0.379, 7, 8], 'true,true,false': [0.877, 1, 4], 'true,false,true': [0.492, 924, 664], 'true,false,false,true': [3.491, 25, 25], 'true,false,false,false': [2.598, 11, 18], 'false,true,true,true': [2.615, 14, 14], 'false,true,true,false': [0.15, 35, 0], 'false,true,false': [0.419, 7, 3], 'false,false': [0.38, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(A, G)', 'true,false,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)'}, {'true,true': [0.491, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.419, 12, 6], 'false,true,false': [0.38, 44, 11], 'false,false': [0.365, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(B, C), haswordauthor(D, C)', 'true': 'author(E, D), venue(E, A)', 'true,true': 'samebib(E, F), venue(F, B)', 'false': 'haswordvenue(A, G), haswordvenue(B, G)', 'false,true': 'haswordtitle(H, G)', 'false,true,false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false,false,true': 'haswordtitle(L, M), haswordvenue(B, M)'}, {'true,true,true': [0.129, 0, 8], 'true,true,false': [0.058, 8, 0], 'true,false': [0.877, 1, 4], 'false,true,true': [0.492, 924, 664], 'false,true,false,true': [3.49, 25, 25], 'false,true,false,false': [2.598, 11, 18], 'false,false,true,true': [1.771, 12, 6], 'false,false,true,false': [2.818, 44, 11], 'false,false,false': [0.368, 43, 11]}]]
[{'': [0.24455361249545102, 0.17089843750000108], 'true': [0.24366352318011741, 0.24803717352988336], 'true,false': [0.25000000000000133, 0.2354340071343634], 'true,false,true': [0.24489795918367302, 0.2417355371900822], 'true,false,false': [0.2417355371900822, 0.20408163265306106], 'false': [0.17864514918371124, 0.15999999999999948], 'false,true': [0.17283950617283897, 0.20999999999999988], 'false,true,true': [0.24999999999999956, 3.489272363107635e-17]}, {'': [0.24423965838627756, 0.16325526089765077], 'true': [0.24366352318012574, 0.24554974033866322], 'true,false': [0.24813620683257942, 0.23456996391329926], 'true,false,true': [0.244897959183673, 0.2417355371900833], 'true,false,false': [0.2417355371900833, 0.20408163265306115], 'false': [0.17532709803700483, 0.1464803649696324], 'false,true': [0.1724436371745877, 0.18869027678489453], 'false,true,true': [0.24908288585370955, 2.1127120178568834e-05]}, {'': [0.2439315722131505, 0.15491536997694752], 'true': [0.2436635231801326, 0.24310195846820265], 'true,false': [0.24631150685892014, 0.2337064665173658], 'true,false,true': [0.24489795918367316, 0.24173553719008264], 'true,false,false': [0.24173553719008264, 0.20408163265306115], 'false': [0.16120382209973516, 0.14605782239780424], 'false,true': [0.19664313232718295, 0.14609444524381898]}, {'': [0.24371075047936072, 0.15378348539546294], 'true': [0.24000000000000005, 0.24337555147781978], 'true,false': [0.24329828880328458, 0.24136967032829026], 'true,false,false': [0.244983430861878, 0.23315182613521265], 'true,true': [0.24888888888888885, 0.16], 'true,true,true': [-1.1102230246251565e-16, -2.3790493384824782e-17], 'false': [0.15957969486890708, 0.14572482968826944], 'false,true': [0.1941555428224471, 0.1457573027575866]}, {'': [0.24255153920518152, 0.152848466877307], 'true': [0.24255720339999234, 0.24080750964214304], 'true,false': [0.24432396693476988, 0.23287978292766626], 'true,false,true': [0.24489795918367321, 0.24173553719008248], 'true,false,false': [0.24173553719008278, 0.20408163265306126], 'false': [0.1582441634121087, 0.14543589497119705], 'false,true': [0.1920450675471067, 0.14546461520521706]}, {'': [0.24243916528391474, 0.15210224734670447], 'true': [0.23223582958227143, 0.24222014815632434], 'true,false': [0.16652353127567332, 0.24294452801711428], 'true,false,false': [0.24303785143412873, 0.24015983829282714], 'true,true': [0.24156328212233208, 0.15422781377841868], 'true,true,true': [0.002032371653656384, -3.172065784643304e-17], 'true,false,true': [0.15255434158428963, 0.1875], 'false': [0.15718742217844722, 0.14518648123682065]}, {'': [0.24123757752869626, 0.15172139279646343], 'true': [0.24127641866487487, 0.24009330399956277], 'true,false': [0.24383492993156583, 0.23276531572809334], 'true,false,true': [0.24489795918367344, 0.2417355371900828], 'true,false,false': [0.24173553719008264, 0.20408163265306123], 'false': [0.15676052186251146, 0.14484926929378006], 'false,true': [0.18968149960826874, 0.144972107468232]}, {'': [0.2411829761756486, 0.1512087769224316], 'true': [0.1536621255717913, 0.2420498361941519], 'true,false': [0.2421501844760718, 0.2398288454813002], 'true,false,false': [0.24367414723984335, 0.2327212535504342], 'true,true': [0.14346007491971732, 0.1538369586737323], 'false': [0.15603455736038288, 0.14468423368692096], 'false,true': [0.15288725898748048, 0.17566958946118744], 'false,true,true': [0.24430525592189506, 0.0006427950944011083]}, {'': [0.2410264756067128, 0.14429914792565926], 'true': [0.24108551686812027, 0.2397462665203571], 'true,false': [0.24366258337468844, 0.23273077842621148], 'true,false,true': [0.2448979591836736, 0.24173553719008262], 'true,false,false': [0.24173553719008278, 0.20408163265306123], 'false': [0.15248602992053656, 0.13324833922909932], 'false,true': [0.1752121255220861, 0.14454354815628978]}, {'': [0.1439576630837149, 0.23517346617281232], 'false': [0.2420174541976809, 0.14492094511328574], 'false,true': [0.24213251589675439, 0.2396499097378956], 'false,true,false': [0.2435909223147591, 0.23270367131083172], 'false,false': [0.15199478951178805, 0.13527402529644125], 'false,false,true': [0.1741651546532515, 0.14442387864369993], 'true': [0.13460343601268973, 0.15397551517253935], 'true,true': [0.0020706515125926694, 0.003313718846471178]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;false;haswordvenue(A, J), haswordtitle(K, J).;true;true
0;false,true;title(L, K), venue(L, B).;true;true
0;false,true,true;samebib(L, M), venue(M, A).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;false;haswordvenue(B, J), haswordtitle(K, J).;true;true
1;false,true;title(L, K), venue(L, A).;true;true
1;false,true,true;samebib(L, M), venue(M, B).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordvenue(A, D), haswordauthor(E, D).;true;true
3;true,true;author(F, E), venue(F, B).;true;true
3;true,true,true;samebib(F, G), venue(G, A).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
5;true,true;author(F, E), venue(F, A).;true;true
5;true,true,true;samebib(F, G), venue(G, B).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;false;haswordvenue(B, J), haswordtitle(K, J).;true;true
7;false,true;title(L, K), venue(L, A).;true;true
7;false,true,true;samebib(L, M), venue(M, B).;true;true
9;;samevenue(A, B) :- haswordvenue(B, C), haswordauthor(D, C).;true;true
9;true;author(E, D), venue(E, A).;true;true
9;true,true;samebib(E, F), venue(F, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.27854694504975613;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.2867203636709409;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.44905802600860323;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.44905802600860323;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.5724346493852266;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.1914822684328457;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.05814893509951237;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.05814893509951237;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.2411503606196619;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.24811816884741328;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.3851926776601658;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.3851926776601658;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.48767788391726297;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.16653882456488167;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.05092203251355405;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.05092203251355405;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.20289930723994204;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.20848477447886868;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.31518052304212246;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.31518052304212246;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.3912569620992536;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.1420942428155646;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.04434629760466855;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.04434629760466855;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.16640029396569495;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.17062637354018492;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.24804771389482108;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.24804771389482108;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.3005711547884894;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.11914890490746433;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.03842866223690456;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.03842866223690456;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.13360339271793026;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.13664585375352234;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.19020231164899937;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.19020231164899937;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.22629823971521876;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.0984134027840187;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.033154945921885746;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.033154945921885746;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.10551742939082928;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.10762034996184403;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.14379027326522745;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.14379027326522745;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.16984358676510128;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.08026654944252247;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.028495105925721097;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.028495105925721097;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.6619245029632226;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.33807549703677736;  // std dev = 1.05e-08, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.46192450296322257;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.08006052311436539;  // std dev = 0.493, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.09442290810957077;  // std dev = 3.490, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.11288591814362521;  // std dev = 2.598, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(B, M) )
%   | | then return 0.06479591611329234;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.024408230135271918;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.024408230135271918;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.06358205070660693;  // std dev = 0.492, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.06209458316513356;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.0798215479051692;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.08443584420203289;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.10104183313636735;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.05187916934404051;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.02084688910874009;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.02084688910874009;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.048871380988842465;  // std dev = 0.492, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.04756216640296153;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.05990417518779126;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.06335446712404859;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.0773681737517355;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.04126932998424623;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.017760671541598414;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.017760671541598414;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.03739848463723079;  // std dev = 0.492, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.036283341901860444;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.04501781773702543;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.04759673142973417;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.059672780337330575;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.03266374873483021;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.015098879183171418;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.015098879183171418;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */


Results
   AUC ROC   = 0.569277
   AUC PR    = 0.430645
   CLL	      = -0.641282
   Precision = 0.721212 at threshold = 0.5
   Recall    = 0.052423
   F1        = 0.097741


Total learning time: 89.23600554466248 seconds
Total inference time: 7.552 seconds
AUC ROC: 0.569277


Results scoring model
   AUC ROC   = 0.548071
   AUC PR    = 0.461521
   CLL	      = -0.668104
   Precision = 0.661017 at threshold = 0.5
   Recall    = 0.052209
   F1        = 0.096774


Total scoring time: 1.288 seconds
Refined model CLL: -0.668104


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.577309
   AUC PR    = 0.433039
   CLL	      = -0.632462
   Precision = 0.503797 at threshold = 0.5
   Recall    = 0.087665
   F1        = 0.149343


Total learning time: 192.15239337158204 seconds
Total inference time: 7.877 seconds
AUC ROC: 0.577309
Total revision time: 192.15239337158204
Best scored revision CLL: -0.659194


Dataset: 13_twitter_cora, Fold: 4, Type: Transfer (trRDN-B), Time: 00:46:28
{'AUC ROC': 0.577309, 'AUC PR': 0.433039, 'CLL': -0.632462, 'Precision': [0.503797, 0.5], 'Recall': 0.087665, 'F1': 0.149343, 'Learning time': 192.15239337158204, 'Inference time': 7.877, 'parameter': {'AUC ROC': 0.577309, 'AUC PR': 0.433039, 'CLL': -0.632462, 'Precision': [0.503797, 0.5], 'Recall': 0.087665, 'F1': 0.149343, 'Learning time': 100.28438782691956, 'Inference time': 7.877}}


Starting fold 5

Target train facts examples: 8644
Target train pos examples: 550
Target train neg examples: 500

Target test facts examples: 33914
Target test pos  examples: 2467
Target test neg examples: 4522

******************************************
Performing Parameter Learning
******************************************
Refine
0;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
0;true;follows(A, D).;false;false
0;false;follows(A, E), recursion_accounttype(E, B).;true;true
0;false,true;follows(A, F), follows(F, A).;false;true
0;false,true,false;follows(A, G), follows(G, E).;false;false
0;false,false;follows(H, A).;true;true
0;false,false,true;follows(I, H), follows(I, A).;false;false
0;false,false,false;follows(A, J), follows(J, K).;false;false
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;true;follows(A, C), tweets(A, D).;false;false
1;false;follows(A, E), recursion_accounttype(E, B).;true;true
1;false,true;tweets(A, F), tweets(E, F).;false;true
1;false,true,false;follows(G, A), follows(E, H).;false;false
1;false,false;follows(I, A).;true;true
1;false,false,true;follows(I, J), recursion_accounttype(J, B).;false;false
1;false,false,false;tweets(A, K).;false;false
2;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;true;follows(C, D), follows(D, A).;false;false
2;false;follows(E, A).;true;true
2;false,true;follows(F, E), follows(F, A).;false;true
2;false,true,false;follows(E, G), recursion_accounttype(G, B).;false;false
2;false,false;follows(A, H), follows(H, I).;true;true
2;false,false,true;recursion_accounttype(I, B).;false;false
2;false,false,false;follows(A, J).;false;false
3;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
3;true;tweets(A, D), tweets(C, D).;false;false
3;false;follows(E, A).;true;true
3;false,true;follows(F, E), recursion_accounttype(F, B).;true;false
3;false,true,true;follows(A, G), recursion_accounttype(G, B).;false;false
3;false,false;follows(A, H), recursion_accounttype(H, B).;true;true
3;false,false,true;follows(A, I), follows(I, H).;false;false
3;false,false,false;tweets(A, J), follows(A, K).;false;false
4;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
4;true;follows(A, D), follows(D, C).;true;false
4;true,true;follows(D, A).;false;true
4;true,true,false;tweets(A, E).;false;false
4;false;follows(F, A).;false;true
4;false,false;follows(A, G), recursion_accounttype(G, B).;true;true
4;false,false,true;follows(G, H), follows(H, G).;false;false
4;false,false,false;follows(A, I), follows(I, J).;false;false
5;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
5;true;follows(D, A), tweets(D, E).;true;true
5;true,true;recursion_accounttype(D, B).;false;false
5;true,false;follows(C, F), follows(F, C).;true;false
5;true,false,true;tweets(C, G), recursion_accounttype(F, B).;false;false
5;false;follows(A, H), follows(H, A).;false;true
5;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
5;false,false,false;tweets(A, J), follows(K, A).;false;false
6;;accounttype(A, B) :- follows(A, C).;true;true
6;true;follows(D, C), recursion_accounttype(D, B).;true;false
6;true,true;recursion_accounttype(C, B).;true;true
6;true,true,true;follows(E, A), follows(E, D).;false;false
6;true,true,false;follows(F, A), recursion_accounttype(F, B).;false;false
6;false;follows(G, A), recursion_accounttype(G, B).;false;true
6;false,false;follows(H, A).;false;true
6;false,false,false;tweets(A, I).;false;false
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;tweets(C, D), follows(A, C).;false;false
7;false;follows(E, A).;true;true
7;false,true;follows(E, F), recursion_accounttype(F, B).;true;false
7;false,true,true;follows(F, E), follows(A, F).;false;false
7;false,false;follows(A, G), recursion_accounttype(G, B).;true;true
7;false,false,true;tweets(A, H).;false;false
7;false,false,false;follows(A, I).;false;false
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;true;follows(C, D), recursion_accounttype(D, B).;false;true
8;true,false;follows(A, E), follows(E, A).;false;false
8;false;follows(F, A), follows(A, G).;true;true
8;false,true;follows(G, A), follows(G, F).;false;true
8;false,true,false;follows(H, F), recursion_accounttype(H, B).;false;false
8;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
8;false,false,false;follows(J, A).;false;false
9;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
9;true;follows(C, D).;true;false
9;true,true;follows(A, D).;true;true
9;true,true,true;follows(E, A), recursion_accounttype(E, B).;false;false
9;true,true,false;tweets(C, F), follows(D, C).;false;false
9;false;follows(A, G), follows(H, A).;false;true
9;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
9;false,false,false;follows(J, A).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.443242102801371;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.7291166770349955;  // std dev = 0.335, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, B) )
%   | | then if ( samebib(G, H), venue(H, A) )
%   | | | then return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.13087620782678508;  // std dev = 0.445, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( haswordtitle(K, I) )
%   | | | then return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.17522210583121967;  // std dev = 2.980, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.04458961306561406;  // std dev = 2.992, 59.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return 0.05814893509951237;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.3803254334818479;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.6157326050686436;  // std dev = 0.335, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, A) )
%   | | then if ( samebib(G, H), venue(H, B) )
%   | | | then return 0.6397480032138977;  // std dev = 0.899, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.15715819152444083;  // std dev = 0.016, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(I, F), venue(I, B) )
%   | | | then return -0.16254500754977086;  // std dev = 0.005, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.12839506992486716;  // std dev = 2.887, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, B) )
%   | | | then return 0.1912873480467316;  // std dev = 1.246, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.13093264915071987;  // std dev = 2.796, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.044790460982400505;  // std dev = 0.395, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.6805851247859591;  // std dev = 0.056, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.2449182844345499;  // std dev = 2.596, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.047462026339214695;  // std dev = 1.980, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | | else if ( haswordtitle(H, C) )
%   | | | then return 0.3226813064206765;  // std dev = 13.464, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | | else return 0.47549952672721435;  // std dev = 1.610, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, B) )
%   | | then if ( samebib(K, L), venue(L, A) )
%   | | | then return 0.5237220151460495;  // std dev = 0.897, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14642507997550142;  // std dev = 0.007, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.09573742776686722;  // std dev = 0.441, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.06248690597212621;  // std dev = 0.413, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.5216077804329589;  // std dev = 0.063, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.1792580649666844;  // std dev = 2.582, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.12537094389750977;  // std dev = 1.924, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.2565951072431471;  // std dev = 0.489, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.38767664735472884;  // std dev = 0.342, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, A) )
%   | | then if ( samebib(K, L), venue(L, B) )
%   | | | then return 0.5206537403757733;  // std dev = 0.900, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14586568119529042;  // std dev = 0.015, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.08130182524107228;  // std dev = 0.436, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.05086122354334051;  // std dev = 0.410, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.18792890768588483;  // std dev = 0.487, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else return 0.32984619477149313;  // std dev = 0.289, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, A) )
%   | | then if ( author(I, G), venue(I, B) )
%   | | | then return 0.2311837007829493;  // std dev = 0.731, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.1845692048680271;  // std dev = 0.056, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.09212514898413375;  // std dev = 0.444, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( haswordtitle(L, J) )
%   | | | then return 0.0021579440807881684;  // std dev = 0.702, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.10292929980523005;  // std dev = 2.907, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.016493564871641105;  // std dev = 2.990, 59.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return 0.03142869016161322;  // std dev = 2.967, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then return 0.14189078937011804;  // std dev = 0.487, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else return 0.26849493502857413;  // std dev = 0.285, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, B) )
%   | | then if ( samebib(H, I), venue(I, A) )
%   | | | then return 0.35836120168063024;  // std dev = 0.881, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14769364553604442;  // std dev = 0.039, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.05893878082359711;  // std dev = 0.436, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, A) )
%   | | | then return 0.10167409050434043;  // std dev = 1.106, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.07101801400631283;  // std dev = 2.780, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return 0.013990965860095473;  // std dev = 2.990, 59.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return 0.027152950104950193;  // std dev = 2.967, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(F, D) )
%   | | then if ( haswordvenue(B, D) )
%   | | | then return 0.36457074585092153;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.057950934719257545;  // std dev = 2.580, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | else return 0.10681138989333552;  // std dev = 0.488, 783.000 (wgt'ed) examples reached here.  /* #neg=323 #pos=460 */
%   | else return 0.21013027480132873;  // std dev = 0.285, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then if ( haswordtitle(I, G) )
%   | | then return 0.008907139194896968;  // std dev = 0.283, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | else if ( author(J, H), venue(J, A) )
%   | | | then return -0.18125515872658293;  // std dev = 0.003, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.0756857711285372;  // std dev = 2.961, 44.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=14 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then return 0.05068376955713318;  // std dev = 0.424, 95.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=24 */
%   | | else return 9.956459931962762E-4;  // std dev = 0.384, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordvenue(B, C) )
%   | then return 0.2518978188674382;  // std dev = 0.055, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( haswordtitle(E, C) )
%   | | then if ( author(F, D), title(F, E) )
%   | | | then return 0.22941173196283193;  // std dev = 2.017, 24.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=16 */
%   | | | else return -0.4278459230368562;  // std dev = 0.319, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( author(G, D), venue(G, A) )
%   | | | then return -0.28808240451393846;  // std dev = 1.359, 22.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
%   | | | else return 0.07173933708937526;  // std dev = 3.096, 49.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=18 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( haswordtitle(K, I) )
%   | | | then return 0.048032365550582955;  // std dev = 2.542, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   | | | else return -0.20207132176065032;  // std dev = 1.863, 23.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
%   | | else return 0.1015625968489573;  // std dev = 0.484, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   | else return 0.025601856669792294;  // std dev = 0.409, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then if ( author(F, D), venue(F, A) )
%   | | then return -0.5024360758391908;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0.1957801977632921;  // std dev = 0.380, 31.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=21 */
%   | else return -0.016633457170793457;  // std dev = 0.418, 76.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=25 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then if ( author(I, H), venue(I, B) )
%   | | then if ( samebib(I, J), venue(J, A) )
%   | | | then return 0.385902409454656;  // std dev = 1.286, 20.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=18 */
%   | | | else return -0.3572044120781588;  // std dev = 0.551, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( author(K, H), venue(K, A) )
%   | | | then return -0.2683000767645175;  // std dev = 0.813, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   | | | else return 0.06945366271833546;  // std dev = 2.891, 41.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=15 */
%   | else if ( haswordvenue(A, L), haswordvenue(B, L) )
%   | | then return 0.07638981422204671;  // std dev = 0.484, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   | | else return 0.009701978377544928;  // std dev = 0.395, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(F, D) )
%   | | then if ( author(G, F), venue(G, A) )
%   | | | then return -0.3792596783250474;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.19661004169181476;  // std dev = 1.858, 24.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=19 */
%   | | else return 0.04285794083958828;  // std dev = 0.479, 783.000 (wgt'ed) examples reached here.  /* #neg=323 #pos=460 */
%   | else return 0.16571131087306365;  // std dev = 0.285, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | then if ( title(J, I), venue(J, A) )
%   | | then if ( title(K, I), venue(K, B) )
%   | | | then return 0.6262537080943316;  // std dev = 1.802, 29.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=26 */
%   | | | else return -0.19557044722935432;  // std dev = 0.305, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | | else return -0.20241656831616472;  // std dev = 0.072, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.0570596250882749;  // std dev = 0.432, 91.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=26 */
%   | | else return -0.22877514857856107;  // std dev = 0.141, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */


Results
   AUC ROC   = 0.558769
   AUC PR    = 0.404926
   CLL	      = -0.703173
   Precision = 0.375877 at threshold = 0.5
   Recall    = 0.933522
   F1        = 0.535955


Total learning time: 56.40990900993347 seconds
Total inference time: 16.992 seconds
AUC ROC: 0.558769


Results scoring model
   AUC ROC   = 0.703671
   AUC PR    = 0.700216
   CLL	      = -0.600179
   Precision = 0.636132 at threshold = 0.5
   Recall    = 0.909091
   F1        = 0.748503


Total scoring time: 1.17 seconds
Parameter learned model CLL: -0.600179


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'false': 'haswordvenue(A, E), haswordauthor(F, E)', 'false,true': 'author(G, F), venue(G, B)', 'false,true,true': 'samebib(G, H), venue(H, A)', 'false,false': 'haswordvenue(B, I), haswordauthor(J, I)', 'false,false,true': 'haswordtitle(K, I)', 'false,false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true': [0.493, 334, 471], 'true,false': [0.335, 4, 27], 'false,true,true,true': [0.894, 1, 4], 'false,true,true,false': [0.0, 5, 0], 'false,true,false': [0.445, 32, 12], 'false,false,true,true': [0.894, 4, 1], 'false,false,true,false': [2.98, 28, 13], 'false,false,false,true': [2.992, 48, 11], 'false,false,false,false': [2.966, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'false': 'haswordvenue(B, E), haswordauthor(F, E)', 'false,true': 'author(G, F), venue(G, A)', 'false,true,true': 'samebib(G, H), venue(H, B)', 'false,true,false': 'author(I, F), venue(I, B)', 'false,false': 'haswordvenue(A, J), haswordauthor(K, J)', 'false,false,true': 'author(L, K), venue(L, B)'}, {'true,true': [0.493, 334, 471], 'true,false': [0.335, 4, 27], 'false,true,true,true': [0.899, 1, 4], 'false,true,true,false': [0.016, 5, 0], 'false,true,false,true': [0.005, 3, 0], 'false,true,false,false': [2.887, 29, 12], 'false,false,true,true': [1.246, 5, 3], 'false,false,true,false': [2.796, 27, 11], 'false,false,false': [0.395, 92, 22]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordauthor(D, C)', 'true,false': 'haswordvenue(B, E), haswordauthor(F, E)', 'true,false,true': 'haswordtitle(G, E)', 'true,false,false': 'haswordtitle(H, C)', 'false': 'haswordvenue(A, I), haswordauthor(J, I)', 'false,true': 'author(K, J), venue(K, B)', 'false,true,true': 'samebib(K, L), venue(L, A)'}, {'true,true': [0.056, 0, 10], 'true,false,true,true': [2.596, 13, 14], 'true,false,true,false': [1.98, 18, 6], 'true,false,false,true': [13.464, 304, 449], 'true,false,false,false': [1.61, 3, 19], 'false,true,true,true': [0.897, 1, 4], 'false,true,true,false': [0.007, 5, 0], 'false,true,false': [0.441, 32, 12], 'false,false': [0.413, 124, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordauthor(F, C)', 'true,true,false': 'haswordtitle(G, D)', 'true,false': 'haswordtitle(H, C)', 'false': 'haswordvenue(B, I), haswordauthor(J, I)', 'false,true': 'author(K, J), venue(K, A)', 'false,true,true': 'samebib(K, L), venue(L, B)'}, {'true,true,true': [0.063, 0, 10], 'true,true,false,true': [2.582, 13, 14], 'true,true,false,false': [1.924, 18, 6], 'true,false,true': [0.489, 304, 449], 'true,false,false': [0.342, 3, 19], 'false,true,true,true': [0.9, 1, 4], 'false,true,true,false': [0.015, 5, 0], 'false,true,false': [0.436, 32, 12], 'false,false': [0.41, 124, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordtitle(E, D)', 'false': 'haswordvenue(A, F), haswordauthor(G, F)', 'false,true': 'author(H, G), venue(H, A)', 'false,true,true': 'author(I, G), venue(I, B)', 'false,false': 'haswordvenue(B, J), haswordauthor(K, J)', 'false,false,true': 'haswordtitle(L, J)', 'false,false,false': 'haswordvenue(B, M), haswordtitle(N, M)'}, {'true,true': [0.487, 336, 479], 'true,false': [0.289, 2, 19], 'false,true,true,true': [0.731, 2, 2], 'false,true,true,false': [0.056, 4, 0], 'false,true,false': [0.444, 32, 14], 'false,false,true,true': [0.702, 4, 1], 'false,false,true,false': [2.907, 28, 13], 'false,false,false,true': [2.99, 48, 11], 'false,false,false,false': [2.967, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordtitle(E, D)', 'false': 'haswordvenue(A, F), haswordauthor(G, F)', 'false,true': 'author(H, G), venue(H, B)', 'false,true,true': 'samebib(H, I), venue(I, A)', 'false,false': 'haswordvenue(B, J), haswordauthor(K, J)', 'false,false,true': 'author(L, K), venue(L, A)', 'false,false,false': 'haswordvenue(A, M), haswordtitle(N, M)'}, {'true,true': [0.487, 336, 479], 'true,false': [0.285, 2, 19], 'false,true,true,true': [0.881, 1, 4], 'false,true,true,false': [0.039, 5, 0], 'false,true,false': [0.436, 32, 12], 'false,false,true,true': [1.106, 5, 3], 'false,false,true,false': [2.78, 27, 11], 'false,false,false,true': [2.99, 48, 11], 'false,false,false,false': [2.967, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordtitle(E, D)', 'true,true': 'haswordauthor(F, D)', 'true,true,true': 'haswordvenue(B, D)', 'false': 'haswordvenue(A, G), haswordauthor(H, G)', 'false,true': 'haswordtitle(I, G)', 'false,true,false': 'author(J, H), venue(J, A)', 'false,false': 'haswordvenue(A, K), haswordtitle(L, K)'}, {'true,true,true,true': [0.0, 0, 5], 'true,true,true,false': [2.58, 13, 14], 'true,true,false': [0.488, 323, 460], 'true,false': [0.285, 2, 19], 'false,true,true': [0.283, 5, 2], 'false,true,false,true': [0.003, 3, 0], 'false,true,false,false': [2.961, 30, 14], 'false,false,true': [0.424, 71, 24], 'false,false,false': [0.384, 53, 12]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordauthor(D, C)', 'true': 'haswordvenue(B, C)', 'true,false': 'haswordtitle(E, C)', 'true,false,true': 'author(F, D), title(F, E)', 'true,false,false': 'author(G, D), venue(G, A)', 'false': 'haswordvenue(A, H), haswordvenue(B, H)', 'false,true': 'haswordvenue(B, I), haswordauthor(J, I)', 'false,true,true': 'haswordtitle(K, I)'}, {'true,true': [0.055, 0, 10], 'true,false,true,true': [2.017, 8, 16], 'true,false,true,false': [0.319, 10, 0], 'true,false,false,true': [1.359, 20, 2], 'true,false,false,false': [3.096, 31, 18], 'false,true,true,true': [2.542, 12, 14], 'false,true,true,false': [1.863, 17, 6], 'false,true,false': [0.484, 278, 448], 'false,false': [0.409, 124, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(B, C), haswordauthor(D, C)', 'true': 'haswordtitle(E, C)', 'true,true': 'author(F, D), venue(F, A)', 'false': 'haswordvenue(A, G), haswordauthor(H, G)', 'false,true': 'author(I, H), venue(I, B)', 'false,true,true': 'samebib(I, J), venue(J, A)', 'false,true,false': 'author(K, H), venue(K, A)', 'false,false': 'haswordvenue(A, L), haswordvenue(B, L)'}, {'true,true,true': [0.0, 8, 0], 'true,true,false': [0.38, 10, 21], 'true,false': [0.418, 51, 25], 'false,true,true,true': [1.286, 2, 18], 'false,true,true,false': [0.551, 18, 0], 'false,true,false,true': [0.813, 15, 1], 'false,true,false,false': [2.891, 26, 15], 'false,false,true': [0.484, 278, 448], 'false,false,false': [0.395, 92, 22]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordtitle(E, D)', 'true,true': 'haswordauthor(F, D)', 'true,true,true': 'author(G, F), venue(G, A)', 'false': 'haswordvenue(A, H), haswordtitle(I, H)', 'false,true': 'title(J, I), venue(J, A)', 'false,true,true': 'title(K, I), venue(K, B)', 'false,false': 'haswordvenue(B, L), haswordtitle(M, L)'}, {'true,true,true,true': [0.0, 8, 0], 'true,true,true,false': [1.858, 5, 19], 'true,true,false': [0.479, 323, 460], 'true,false': [0.285, 2, 19], 'false,true,true,true': [1.802, 3, 26], 'false,true,true,false': [0.305, 69, 0], 'false,true,false': [0.072, 7, 0], 'false,false,true': [0.432, 65, 26], 'false,false,false': [0.141, 18, 0]}]]
[{'': [0.24084270048762138, 0.18394619617433927], 'true': [0.2427591528104568, 0.11238293444328941], 'false': [0.20850480109739317, 0.17437500000000122], 'false,true': [0.23999999999999985, 0.19834710743801603], 'false,true,true': [0.15999999999999986, -2.7755575615628915e-18], 'false,false': [0.21172022684309966, 0.15574022776238935], 'false,false,true': [0.16000000000000003, 0.2165377751338484], 'false,false,false': [0.15168055156564153, 0.15999999999999948]}, {'': [0.2399033482150972, 0.18089461947223093], 'true': [0.24275915281046145, 0.11238293444328855], 'false': [0.20577225212445388, 0.171572817225926], 'false,true': [0.2396663510462111, 0.19480626620471464], 'false,true,true': [0.16175462426720671, 4.833621904624108e-05], 'false,true,false': [8.015897850187822e-06, 0.2032884697594538], 'false,false': [0.204182958949685, 0.15572936782372818], 'false,false,true': [0.19406915131982383, 0.20567867036011106]}, {'': [0.23897284752961936, 0.1773600876051101], 'true': [0.0031484720128159616, 0.2402156078694832], 'true,false': [0.2303705006887006, 0.23788346814211797], 'true,false,false': [0.2407298649580488, 0.11776859504132223], 'true,false,true': [0.24965706447187935, 0.16341569201183295], 'false': [0.1956984290024281, 0.17052849037720652], 'false,true': [0.19279022523506112, 0.1947607804559289], 'false,true,true': [0.16102226313164447, 9.622788551058581e-06]}, {'': [0.236429046081018, 0.1749498712911426], 'true': [0.22228318412191325, 0.23601279887198173], 'true,false': [0.23900375125104353, 0.1169460435260032], 'true,true': [0.004027855333989594, 0.22640475593211415], 'true,true,false': [0.246882266123149, 0.1542387630040101], 'false': [0.19232613698661377, 0.16845233552020508], 'false,true': [0.19214589036109325, 0.19028273993920986], 'false,true,true': [0.16212037178436947, 4.733927210438526e-05]}, {'': [0.23395525603566844, 0.17251296253863452], 'true': [0.2373208997260608, 0.08370163278729412], 'false': [0.1845624445075219, 0.1680702673680005], 'false,true': [0.11044727577557566, 0.1967504237360118], 'false,false': [0.19533559946532114, 0.15572822242542117], 'false,false,true': [0.09844657451831146, 0.20604754441772374], 'false,false,false': [0.1515605354290799, 0.16008357164920034], 'false,true,true': [0.13369022440129893, 0.0007790878712375521]}, {'': [0.23361593360239546, 0.17123174610176256], 'true': [0.2371414537112732, 0.08116619983830169], 'false': [0.1813746567733305, 0.16756465589866404], 'false,true': [0.14186294357535706, 0.18995598126332852], 'false,false': [0.1946992025076118, 0.1557137559001468], 'false,false,true': [0.15284006971174371, 0.20334820890400643], 'false,false,false': [0.1515469177781469, 0.1600939786198633], 'false,true,true': [0.1553752194027669, 0.00030491355220118866]}, {'': [0.23341787368967304, 0.16960485863210822], 'true': [0.23707185638899322, 0.081194375593228], 'true,true': [0.22037448196402726, 0.23775421676023192], 'true,true,true': [0.0, 0.24649461675124715], 'false': [0.17647749963190465, 0.16716034342936265], 'false,true': [0.07981661540140082, 0.19054480702189347], 'false,true,false': [3.832769365867221e-06, 0.19932228124830106], 'false,false': [0.17969250356586633, 0.14737819429486404]}, {'': [0.18634989258194734, 0.2241591995490959], 'false': [0.2352557774801112, 0.16689155093300787], 'false,true': [0.2182621224093129, 0.23455554959348665], 'false,true,true': [0.24852071005917165, 0.150865982568042], 'true': [0.003022448130882782, 0.19760643294982944], 'true,false': [0.21232578502802446, 0.1886945165823886], 'true,false,true': [0.16949144301215802, 0.010195764650323392], 'true,false,false': [0.08393495199786301, 0.19561143600280032]}, {'': [0.182181784747621, 0.22085564558903048], 'false': [0.18528626497922177, 0.22439477275294734], 'false,false': [0.2345694472274655, 0.15575445190143405], 'false,true': [0.18914209383350158, 0.1813110680843967], 'false,true,true': [0.08263864838774213, 0.01684359848800512], 'true': [0.1939880213758421, 0.17449982617303153], 'true,true': [0.0, 0.1440482227140348], 'false,true,false': [0.04135927250505282, 0.20390462370683143]}, {'': [0.2240443778468573, 0.16716981773752762], 'true': [0.22734452953612458, 0.08134512225633543], 'true,true': [0.17010961453184392, 0.22967987295696712], 'true,true,true': [0.0, 0.14390633576771714], 'false': [0.16707966005286357, 0.16703831387902898], 'false,true': [0.17479367870504986, 0.0007318719281779105], 'false,true,true': [0.11194287557434818, 0.0013474650120892276], 'false,false': [0.18636897602168134, 0.0011015534252794433]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;false;haswordvenue(A, E), haswordauthor(F, E).;true;true
0;false,true;author(G, F), venue(G, B).;true;true
0;false,true,true;samebib(G, H), venue(H, A).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;false;haswordvenue(B, E), haswordauthor(F, E).;true;true
1;false,true;author(G, F), venue(G, A).;true;true
1;false,true,true;samebib(G, H), venue(H, B).;true;true
1;false,true,false;author(I, F), venue(I, B).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;false;haswordvenue(A, I), haswordauthor(J, I).;true;true
2;false,true;author(K, J), venue(K, B).;true;true
2;false,true,true;samebib(K, L), venue(L, A).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;false;haswordvenue(B, I), haswordauthor(J, I).;true;true
3;false,true;author(K, J), venue(K, A).;true;true
3;false,true,true;samebib(K, L), venue(L, B).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;false;haswordvenue(A, F), haswordauthor(G, F).;true;true
4;false,true;author(H, G), venue(H, A).;true;true
4;false,true,true;author(I, G), venue(I, B).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;false;haswordvenue(A, F), haswordauthor(G, F).;true;true
5;false,true;author(H, G), venue(H, B).;true;true
5;false,true,true;samebib(H, I), venue(I, A).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordvenue(A, D), haswordtitle(E, D).;true;true
6;true,true;haswordauthor(F, D).;true;true
6;true,true,true;haswordvenue(B, D).;true;true
6;false;haswordvenue(A, G), haswordauthor(H, G).;true;true
6;false,true;haswordtitle(I, G).;true;true
6;false,true,false;author(J, H), venue(J, A).;true;true
8;;samevenue(A, B) :- haswordvenue(B, C), haswordauthor(D, C).;true;true
8;true;haswordtitle(E, C).;true;true
8;true,true;author(F, D), venue(F, A).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordvenue(B, D), haswordtitle(E, D).;true;true
9;true,true;haswordauthor(F, D).;true;true
9;true,true,true;author(G, F), venue(G, A).;true;true
9;false;haswordvenue(A, H), haswordtitle(I, H).;true;true
9;false,true;title(J, I), venue(J, A).;true;true
9;false,true,true;title(K, I), venue(K, B).;true;true
9;false,false;haswordvenue(B, L), haswordtitle(M, L).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.443242102801371;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.7291166770349955;  // std dev = 0.335, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | then if ( haswordtitle(G, E) )
%   | | then return 0.1438632208137979;  // std dev = 0.452, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | else if ( author(H, F), venue(H, A) )
%   | | | then return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.17633075328133055;  // std dev = 3.090, 44.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=14 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( haswordtitle(K, I) )
%   | | | then return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.17522210583121967;  // std dev = 2.980, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.04458961306561406;  // std dev = 2.992, 59.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return 0.05814893509951237;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.3803254334818479;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.6157326050686436;  // std dev = 0.335, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, B) )
%   | | then if ( samebib(G, H), venue(H, A) )
%   | | | then return 0.6370678172949304;  // std dev = 0.896, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.16204854522508044;  // std dev = 0.005, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.11090510670335817;  // std dev = 0.444, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then return 0.21625389107086207;  // std dev = 1.368, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.12574084969515803;  // std dev = 2.793, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.03765285941803126;  // std dev = 2.990, 59.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return 0.05244716084236053;  // std dev = 2.967, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.6805851247859591;  // std dev = 0.056, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(F, D) )
%   | | | then return 0.2449182844345499;  // std dev = 2.596, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.047462026339214695;  // std dev = 1.980, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(I, G) )
%   | | | then return 0.2648613043775699;  // std dev = 2.542, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   | | | else return -0.037629930350312334;  // std dev = 1.967, 23.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
%   | | else return 0.3407976691556592;  // std dev = 0.485, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | then if ( author(L, K), venue(L, A) )
%   | | then return 0.21206898050083897;  // std dev = 0.490, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.09116932841249979;  // std dev = 0.441, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.06274488162156186;  // std dev = 0.413, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.24325016813796135;  // std dev = 0.489, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.3569709673470018;  // std dev = 0.395, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else return 0.4481166368918411;  // std dev = 0.289, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then if ( author(I, H), venue(I, B) )
%   | | then if ( samebib(I, J), venue(J, A) )
%   | | | then return 0.5173031898521416;  // std dev = 0.896, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.1497343099390501;  // std dev = 0.004, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.08449405663310855;  // std dev = 0.443, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | then return 0.1036905461105246;  // std dev = 0.459, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return 0.0243447688082631;  // std dev = 2.990, 59.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return 0.03751210532143089;  // std dev = 2.967, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then return 0.18746944962224127;  // std dev = 0.488, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else return 0.3482691644452001;  // std dev = 0.286, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, B) )
%   | | then return 0.1351772058445751;  // std dev = 0.389, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( author(I, G), venue(I, A) )
%   | | | then return -0.15786890546723908;  // std dev = 0.003, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.08802118924376673;  // std dev = 2.910, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | then if ( title(L, K), venue(L, A) )
%   | | | then return 0.08650489079387509;  // std dev = 4.137, 88.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=24 */
%   | | | else return -0.17251796219941487;  // std dev = 0.037, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.04962484591065565;  // std dev = 3.057, 54.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=12 */
%   | | | else return -0.1894852680825605;  // std dev = 0.073, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return -0.43024502167317624;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.34297281818538955;  // std dev = 1.917, 24.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=19 */
%   | | else return -0.07185192554619219;  // std dev = 0.395, 29.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=11 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( haswordtitle(J, H) )
%   | | | then return 0.1130982809429036;  // std dev = 2.542, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   | | | else return -0.13530514602022012;  // std dev = 1.886, 23.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
%   | | else return 0.16348523781251664;  // std dev = 0.484, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | then if ( author(M, L), venue(M, B) )
%   | | then return 0.11066444711585637;  // std dev = 0.384, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.05891574567856405;  // std dev = 0.442, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.03685227252680779;  // std dev = 0.413, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.10483585526880161;  // std dev = 0.483, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then return 0.19907242608703202;  // std dev = 0.399, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return 0.339416040405306;  // std dev = 0.148, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.3181171209752067;  // std dev = 0.133, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | then return 0.061964129041413525;  // std dev = 0.444, 54.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then if ( haswordtitle(M, N), haswordvenue(A, N) )
%   | | | then return -0.17347647380686018;  // std dev = 0.094, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0826802764716631;  // std dev = 4.050, 83.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=24 */
%   | | else if ( haswordvenue(A, P), haswordtitle(Q, P) )
%   | | | then return 0.03605222384837995;  // std dev = 2.989, 54.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=12 */
%   | | | else return -0.18504062598530122;  // std dev = 0.131, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.32290339409928787;  // std dev = 0.072, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( haswordtitle(E, C) )
%   | | then return 0.07567972261343883;  // std dev = 0.485, 799.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=465 */
%   | | else return 0.1821905785262891;  // std dev = 0.348, 27.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=23 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then if ( haswordtitle(H, F) )
%   | | then return 0.04678507314537621;  // std dev = 0.438, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | else return 0.0513657045311;  // std dev = 0.445, 47.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=14 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( haswordtitle(K, I) )
%   | | | then return -0.03564175061205482;  // std dev = 0.643, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.07010687578450993;  // std dev = 2.870, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.0027344797227318246;  // std dev = 2.964, 59.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return 0.017744645622753838;  // std dev = 2.945, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.0596045099149384;  // std dev = 0.418, 32.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=19 */
%   | | else return -0.11416505609760295;  // std dev = 0.379, 29.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=11 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.0668517236147645;  // std dev = 0.487, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.1360409310767518;  // std dev = 0.336, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, B) )
%   | | then if ( author(K, I), venue(K, A) )
%   | | | then return 0.22857326051080007;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.25450697147814194;  // std dev = 0.014, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( author(L, I), venue(L, A) )
%   | | | then return 0.10184047647453007;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.044553247722418914;  // std dev = 2.815, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else return 0.01977503301089933;  // std dev = 0.405, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.288309148686902;  // std dev = 0.051, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.04176187272194367;  // std dev = 0.484, 808.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=472 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then return 0.11030592730294689;  // std dev = 0.401, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | | then return 0.22400007988900947;  // std dev = 0.101, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.20578495664698854;  // std dev = 0.154, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(B, M) )
%   | | then return -0.15844535142178792;  // std dev = 0.099, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else return 0.05746241403679436;  // std dev = 0.438, 91.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=26 */
%   | else if ( haswordvenue(B, N), haswordtitle(P, N) )
%   | | then return 0.053429451402358503;  // std dev = 0.441, 91.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=26 */
%   | | else return -0.19134779784063152;  // std dev = 0.045, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */


Results
   AUC ROC   = 0.550146
   AUC PR    = 0.399139
   CLL	      = -0.705578
   Precision = 0.373808 at threshold = 0.5
   Recall    = 0.937171
   F1        = 0.534443


Total learning time: 49.43887138366699 seconds
Total inference time: 8.031 seconds
AUC ROC: 0.550146


Results scoring model
   AUC ROC   = 0.678044
   AUC PR    = 0.674613
   CLL	      = -0.623921
   Precision = 0.625157 at threshold = 0.5
   Recall    = 0.903636
   F1        = 0.739033


Total scoring time: 1.17 seconds
Refined model CLL: -0.623921


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.558769
   AUC PR    = 0.404926
   CLL	      = -0.703173
   Precision = 0.375877 at threshold = 0.5
   Recall    = 0.933522
   F1        = 0.535955


Total learning time: 108.18878039360047 seconds
Total inference time: 16.992 seconds
AUC ROC: 0.558769
Total revision time: 108.18878039360047
Best scored revision CLL: -0.600179


Dataset: 13_twitter_cora, Fold: 5, Type: Transfer (trRDN-B), Time: 00:48:42
{'AUC ROC': 0.558769, 'AUC PR': 0.404926, 'CLL': -0.703173, 'Precision': [0.375877, 0.5], 'Recall': 0.933522, 'F1': 0.535955, 'Learning time': 108.18878039360047, 'Inference time': 16.992, 'parameter': {'AUC ROC': 0.558769, 'AUC PR': 0.404926, 'CLL': -0.703173, 'Precision': [0.375877, 0.5], 'Recall': 0.933522, 'F1': 0.535955, 'Learning time': 56.40990900993347, 'Inference time': 16.992}}


Starting fold 1

Target train facts examples: 7463
Target train pos examples: 368
Target train neg examples: 688

Target test facts examples: 35095
Target test pos  examples: 2649
Target test neg examples: 4334

******************************************
Performing Parameter Learning
******************************************
Refine
0;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
0;true;follows(A, D).;false;false
0;false;follows(A, E), recursion_accounttype(E, B).;true;true
0;false,true;follows(A, F), follows(F, A).;false;true
0;false,true,false;follows(A, G), follows(G, E).;false;false
0;false,false;follows(H, A).;true;true
0;false,false,true;follows(I, H), follows(I, A).;false;false
0;false,false,false;follows(A, J), follows(J, K).;false;false
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;true;follows(A, C), tweets(A, D).;false;false
1;false;follows(A, E), recursion_accounttype(E, B).;true;true
1;false,true;tweets(A, F), tweets(E, F).;false;true
1;false,true,false;follows(G, A), follows(E, H).;false;false
1;false,false;follows(I, A).;true;true
1;false,false,true;follows(I, J), recursion_accounttype(J, B).;false;false
1;false,false,false;tweets(A, K).;false;false
2;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;true;follows(C, D), follows(D, A).;false;false
2;false;follows(E, A).;true;true
2;false,true;follows(F, E), follows(F, A).;false;true
2;false,true,false;follows(E, G), recursion_accounttype(G, B).;false;false
2;false,false;follows(A, H), follows(H, I).;true;true
2;false,false,true;recursion_accounttype(I, B).;false;false
2;false,false,false;follows(A, J).;false;false
3;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
3;true;tweets(A, D), tweets(C, D).;false;false
3;false;follows(E, A).;true;true
3;false,true;follows(F, E), recursion_accounttype(F, B).;true;false
3;false,true,true;follows(A, G), recursion_accounttype(G, B).;false;false
3;false,false;follows(A, H), recursion_accounttype(H, B).;true;true
3;false,false,true;follows(A, I), follows(I, H).;false;false
3;false,false,false;tweets(A, J), follows(A, K).;false;false
4;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
4;true;follows(A, D), follows(D, C).;true;false
4;true,true;follows(D, A).;false;true
4;true,true,false;tweets(A, E).;false;false
4;false;follows(F, A).;false;true
4;false,false;follows(A, G), recursion_accounttype(G, B).;true;true
4;false,false,true;follows(G, H), follows(H, G).;false;false
4;false,false,false;follows(A, I), follows(I, J).;false;false
5;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
5;true;follows(D, A), tweets(D, E).;true;true
5;true,true;recursion_accounttype(D, B).;false;false
5;true,false;follows(C, F), follows(F, C).;true;false
5;true,false,true;tweets(C, G), recursion_accounttype(F, B).;false;false
5;false;follows(A, H), follows(H, A).;false;true
5;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
5;false,false,false;tweets(A, J), follows(K, A).;false;false
6;;accounttype(A, B) :- follows(A, C).;true;true
6;true;follows(D, C), recursion_accounttype(D, B).;true;false
6;true,true;recursion_accounttype(C, B).;true;true
6;true,true,true;follows(E, A), follows(E, D).;false;false
6;true,true,false;follows(F, A), recursion_accounttype(F, B).;false;false
6;false;follows(G, A), recursion_accounttype(G, B).;false;true
6;false,false;follows(H, A).;false;true
6;false,false,false;tweets(A, I).;false;false
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;tweets(C, D), follows(A, C).;false;false
7;false;follows(E, A).;true;true
7;false,true;follows(E, F), recursion_accounttype(F, B).;true;false
7;false,true,true;follows(F, E), follows(A, F).;false;false
7;false,false;follows(A, G), recursion_accounttype(G, B).;true;true
7;false,false,true;tweets(A, H).;false;false
7;false,false,false;follows(A, I).;false;false
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;true;follows(C, D), recursion_accounttype(D, B).;false;true
8;true,false;follows(A, E), follows(E, A).;false;false
8;false;follows(F, A), follows(A, G).;true;true
8;false,true;follows(G, A), follows(G, F).;false;true
8;false,true,false;follows(H, F), recursion_accounttype(H, B).;false;false
8;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
8;false,false,false;follows(J, A).;false;false
9;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
9;true;follows(C, D).;true;false
9;true,true;follows(A, D).;true;true
9;true,true,true;follows(E, A), recursion_accounttype(E, B).;false;false
9;true,true,false;tweets(C, F), follows(D, C).;false;false
9;false;follows(A, G), follows(H, A).;false;true
9;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
9;false,false,false;follows(J, A).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.23843062524035266;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.4581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.424815601766179;  // std dev = 2.714, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, A) )
%   | | then if ( samebib(K, L), venue(L, B) )
%   | | | then return 0.14762261931003867;  // std dev = 2.796, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return -0.14185106490048768;  // std dev = 4.47e-08, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | then return 0.004815601766179008;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.20686012285620575;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.448295606241962;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.3982164798305049;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.3639794304549287;  // std dev = 2.714, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.13722572521892853;  // std dev = 0.058, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.004228390109386251;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.00519975023914478;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.1751801570305961;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.3874028246526538;  // std dev = 0.802, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.32650617096328266;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.2963235827962116;  // std dev = 2.716, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.12180522429396211;  // std dev = 0.052, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0037111125833978686;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.004568660166365278;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.14514481334590568;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.30343404142094477;  // std dev = 0.800, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.2374067708459695;  // std dev = 0.495, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | then if ( title(I, H), venue(I, B) )
%   | | then if ( samebib(I, J), venue(J, A) )
%   | | | then return 0.15066700541323133;  // std dev = 2.779, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return -0.14132800495646702;  // std dev = 0.060, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.1225777611919501;  // std dev = 0.040, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then return 0.004012232942941107;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.11804668707041945;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.230929510166299;  // std dev = 0.799, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.20182017820752143;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.1795415544100614;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.10605131715564109;  // std dev = 0.043, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.003399891976028768;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.0035220811797056916;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.09457696812283496;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.1776819303299907;  // std dev = 0.796, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.16576666836903278;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.13361034031197744;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.09642359502338226;  // std dev = 0.040, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.002983172510772256;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.003090655993583659;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.07489163449109286;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.13673218737943163;  // std dev = 0.794, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.12468817166002891;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.100256519697739;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.08835452420099443;  // std dev = 0.037, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0026167014782066435;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.002711187991890712;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.05877777591804268;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.10570185386000108;  // std dev = 0.793, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.09434222608961007;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.07485771713672437;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then return -0.03009909681003968;  // std dev = 0.328, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then if ( title(M, L), venue(M, A) )
%   | | | then return -0.002330993699334271;  // std dev = 3.001, 80.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=11 */
%   | | | else return -0.08760093906413814;  // std dev = 0.050, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(B, N), haswordtitle(P, N) )
%   | | | then return 0.006162517465917512;  // std dev = 2.847, 67.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=10 */
%   | | | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04582386394015474;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.08227846476186036;  // std dev = 0.792, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.07484305277839912;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.05525669017485226;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then return -0.029643445840088073;  // std dev = 0.328, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, M), haswordvenue(A, M) )
%   | | | then return -0.07827838303872267;  // std dev = 0.035, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0020354724990449707;  // std dev = 2.995, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | | | then return 0.006659473641474018;  // std dev = 2.848, 67.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=10 */
%   | | | else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.03554750876544446;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.06251310955052625;  // std dev = 0.793, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.057048377728735875;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.041341893277927214;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.07282100564161013;  // std dev = 0.033, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0017841238501059946;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.0024683921999462764;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.557431
   AUC PR    = 0.428428
   CLL	      = -0.655414
   Precision = 0.637427 at threshold = 0.5
   Recall    = 0.041148
   F1        = 0.077305


Total learning time: 59.713407039642334 seconds
Total inference time: 7.429 seconds
AUC ROC: 0.557431


Results scoring model
   AUC ROC   = 0.592
   AUC PR    = 0.419788
   CLL	      = -0.618793
   Precision = 0.578947 at threshold = 0.5
   Recall    = 0.059783
   F1        = 0.108374


Total scoring time: 1.011 seconds
Parameter learned model CLL: -0.618793


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'title(K, J), venue(K, A)', 'false,true,true': 'samebib(K, L), venue(L, B)', 'false,false': 'haswordvenue(B, M), haswordtitle(N, M)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.816, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.714, 13, 17], 'false,true,true,true': [2.796, 27, 11], 'false,true,true,false': [4.47e-08, 42, 0], 'false,true,false': [0.0, 7, 0], 'false,false,true': [0.354, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(A, K)', 'false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.816, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.714, 13, 17], 'false,true,true': [0.058, 12, 0], 'false,true,false': [0.354, 64, 11], 'false,false,true': [0.346, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(A, K)', 'false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.802, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.716, 13, 17], 'false,true,true': [0.052, 12, 0], 'false,true,false': [0.354, 64, 11], 'false,false,true': [0.346, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordauthor(F, E)', 'false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false,true': 'title(I, H), venue(I, B)', 'false,true,true': 'samebib(I, J), venue(J, A)', 'false,false': 'haswordvenue(A, K), haswordtitle(L, K)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.8, 1, 2], 'true,false,false': [0.495, 15, 20], 'false,true,true,true': [2.779, 27, 11], 'false,true,true,false': [0.06, 42, 0], 'false,true,false': [0.04, 7, 0], 'false,false,true': [0.346, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(A, K)', 'false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.799, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.717, 13, 17], 'false,true,true': [0.043, 12, 0], 'false,true,false': [0.346, 64, 11], 'false,false,true': [0.346, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(A, K)', 'false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.796, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.717, 13, 17], 'false,true,true': [0.04, 12, 0], 'false,true,false': [0.346, 64, 11], 'false,false,true': [0.346, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(A, K)', 'false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.794, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.717, 13, 17], 'false,true,true': [0.037, 12, 0], 'false,true,false': [0.346, 64, 11], 'false,false,true': [0.346, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordauthor(J, I)', 'false,false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false,false,true': 'title(M, L), venue(M, A)', 'false,false,false': 'haswordvenue(B, N), haswordtitle(P, N)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.793, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.717, 13, 17], 'false,true': [0.328, 7, 1], 'false,false,true,true': [3.001, 69, 11], 'false,false,true,false': [0.05, 7, 0], 'false,false,false,true': [2.847, 57, 10], 'false,false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordauthor(J, I)', 'false,false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false,false,true': 'haswordtitle(L, M), haswordvenue(A, M)', 'false,false,false': 'haswordvenue(A, N), haswordtitle(P, N)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.792, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.717, 13, 17], 'false,true': [0.328, 7, 1], 'false,false,true,true': [0.035, 12, 0], 'false,false,true,false': [2.995, 64, 11], 'false,false,false,true': [2.848, 57, 10], 'false,false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(A, K)', 'false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.793, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.717, 13, 17], 'false,true,true': [0.033, 12, 0], 'false,true,false': [0.346, 64, 11], 'false,false,true': [0.346, 64, 11], 'false,false,false': [0.0, 4, 0]}]]
[{'': [0.23762656230272572, 0.11496588764697444], 'true': [0.2356675262844691, 0.24376731301939172], 'true,false': [0.22222222222222224, 0.2448979591836734], 'true,false,false': [0.23999999999999994, 0.2455555555555551], 'false': [0.1104505218655035, 0.11985258772632539], 'false,false': [0.12515555555555502, 0.0], 'false,true': [0.11859374999999946, -7.93016446160826e-18], 'false,true,true': [0.20567867036011028, 4.7580986769649563e-17]}, {'': [0.2371606616282308, 0.11237704672357919], 'true': [0.2356675262844735, 0.24352902641532292], 'true,false': [0.2222222222222222, 0.24485729569956294], 'true,false,false': [0.23999999999999994, 0.2454993913328311], 'false': [0.11031023146367078, 0.11455237397192931], 'false,false': [0.119797633597279, 0.0], 'false,true': [0.0002775880072199005, 0.125155555555556]}, {'': [0.23670778123816982, 0.11201133580453437], 'true': [0.23566752628446727, 0.24327409495495095], 'true,false': [0.21418921718306527, 0.24517272216828254], 'true,false,false': [0.23999999999999994, 0.24590470129702524], 'false': [0.10979734463652976, 0.11437085679211725], 'false,false': [0.11977888330495867, 0.0], 'false,true': [0.00022718947614756846, 0.12515555555555488]}, {'': [0.2363669686813663, 0.11174511656261754], 'true': [0.23566752628446358, 0.24295357235292378], 'true,false': [0.2130884730597966, 0.2451692590229693], 'false': [0.10942753518020491, 0.11423459197528409], 'false,false': [0.11976238615698556, 0.0], 'false,true': [0.11782434676434073, 0.00023420369278840232], 'false,true,true': [0.2031932890966689, 8.676400385384953e-05]}, {'': [0.23616314720556203, 0.10918418535830954], 'true': [0.235667526284474, 0.24278578508929075], 'true,false': [0.21258059131790366, 0.24519134771247897], 'true,false,false': [0.24, 0.2459856670343242], 'false': [0.10464250009822537, 0.11412967439456284], 'false,false': [0.11974788098828767, 0.0], 'false,true': [0.0001556745924496649, 0.11970803808530334]}, {'': [0.2360563581938451, 0.10900192257369122], 'true': [0.23566752628446164, 0.24268268710104013], 'true,false': [0.21125255895821674, 0.24525365869218022], 'true,false,false': [0.24, 0.24598154998362268], 'false': [0.10437900193840621, 0.11404717786998077], 'false,false': [0.11973513465350441, 0.0], 'false,true': [0.00013121036977440403, 0.11969565473675425]}, {'': [0.23600356943911388, 0.10886040893068014], 'true': [0.23566752628447166, 0.24259058342349346], 'true,false': [0.21034058042671644, 0.2452689716022577], 'true,false,false': [0.24, 0.2460618613048807], 'false': [0.10417601459775644, 0.1139811612475981], 'false,false': [0.11972393956177087, 0.0], 'false,true': [0.00011195288854037981, 0.11968477979515157]}, {'': [0.23597914506728057, 0.10874844317855951], 'true': [0.23566752628446394, 0.24254062295863849], 'true,false': [0.20970261290732525, 0.2452931464348702], 'true,false,false': [0.24, 0.2461211023517579], 'false': [0.10735560379356003, 0.10878689591807071], 'false,false': [0.10405170962317976, 0.11452397866604981], 'false,false,false': [0.1210059776870343, 0.0], 'false,false,true': [0.11254024341332085, 0.0003539513545573261]}, {'': [0.23596795801230153, 0.1086682557488069], 'true': [0.23566752628446355, 0.24251246200884344], 'true,false': [0.2092242935156714, 0.2453194081666854], 'true,false,false': [0.24000000000000005, 0.24615117253731805], 'false': [0.10737440681713566, 0.10870179716861376], 'false,false': [0.10390800377101453, 0.11450342067303444], 'false,false,false': [0.121021813382394, 0.0], 'false,false,true': [0.00010288579292906316, 0.11962712397284037]}, {'': [0.23596253372603396, 0.10856943875841031], 'true': [0.23566752628447613, 0.24248992343775266], 'true,false': [0.20943161573966596, 0.2452952099549414], 'true,false,false': [0.24000000000000005, 0.2461425029968884], 'false': [0.10379460645842509, 0.11379753111803353], 'false,false': [0.11964174105270572, 0.0], 'false,true': [9.001198418179142e-05, 0.11961962773341082]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
0;false,true;title(K, J), venue(K, A).;true;true
0;false,true,true;samebib(K, L), venue(L, B).;true;true
0;false,false;haswordvenue(B, M), haswordtitle(N, M).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
1;false,true;haswordtitle(J, K), haswordvenue(A, K).;true;true
1;false,false;haswordvenue(A, L), haswordtitle(M, L).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
2;false,true;haswordtitle(J, K), haswordvenue(A, K).;true;true
2;false,false;haswordvenue(A, L), haswordtitle(M, L).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;false;haswordvenue(B, G), haswordtitle(H, G).;true;true
3;false,true;title(I, H), venue(I, B).;true;true
3;false,true,true;samebib(I, J), venue(J, A).;true;true
3;false,false;haswordvenue(A, K), haswordtitle(L, K).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
4;false,true;haswordtitle(J, K), haswordvenue(A, K).;true;true
4;false,false;haswordvenue(A, L), haswordtitle(M, L).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
5;false,true;haswordtitle(J, K), haswordvenue(A, K).;true;true
5;false,false;haswordvenue(A, L), haswordtitle(M, L).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
6;false,true;haswordtitle(J, K), haswordvenue(A, K).;true;true
6;false,false;haswordvenue(A, L), haswordtitle(M, L).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;false;haswordvenue(A, I), haswordauthor(J, I).;true;true
7;false,false;haswordvenue(A, K), haswordtitle(L, K).;true;true
7;false,false,true;title(M, L), venue(M, A).;true;true
7;false,false,false;haswordvenue(B, N), haswordtitle(P, N).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;false;haswordvenue(B, I), haswordauthor(J, I).;true;true
8;false,false;haswordvenue(B, K), haswordtitle(L, K).;true;true
8;false,false,true;haswordtitle(L, M), haswordvenue(A, M).;true;true
8;false,false,false;haswordvenue(A, N), haswordtitle(P, N).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
9;false,true;haswordtitle(J, K), haswordvenue(A, K).;true;true
9;false,false;haswordvenue(A, L), haswordtitle(M, L).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.23843062524035266;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.4581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.424815601766179;  // std dev = 2.714, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.004815601766179008;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.004815601766179008;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.20686012285620575;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.448295606241962;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.3982164798305049;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.3639794304549286;  // std dev = 2.714, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.004228390109386251;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.004228390109386251;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.1751801570305961;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.326685698020276;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.32650617096328266;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.30066026670510465;  // std dev = 2.615, 28.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=16 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.11231637819360636;  // std dev = 9.13e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0037111125833978686;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.0037111125833978686;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.14514481334590568;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.32321535398659784;  // std dev = 0.800, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.2572776609517914;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.23215911045913593;  // std dev = 2.716, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.1015963294878363;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0032558270569705674;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.0032558270569705674;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.11804668707041945;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.2321879647916115;  // std dev = 0.808, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.2030770145450486;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.17922755263830836;  // std dev = 2.714, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.09269127618926097;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0028554031467501392;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.0028554031467501392;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.09457696812283496;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.17454589141627386;  // std dev = 0.807, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.15359966123810279;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.13594818747520857;  // std dev = 2.714, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.08518475138839687;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.002503460836945874;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.002503460836945874;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C) )
%   | | then return -0.10539005564974935;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.13099084459095842;  // std dev = 0.807, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return -0.1975831771196254;  // std dev = 0.800, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( haswordtitle(I, C) )
%   | | | then return 0.07776534174052062;  // std dev = 14.115, 843.000 (wgt'ed) examples reached here.  /* #neg=520 #pos=323 */
%   | | | else return 0.10944702859533274;  // std dev = 2.838, 33.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return -0.07877675473109172;  // std dev = 3.73e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0021943081594878503;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | then return 0.0021943081594878503;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.05864476885279687;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.1837170828036215;  // std dev = 0.763, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.08804701095933969;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.07164810694446334;  // std dev = 2.719, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.07324622576333704;  // std dev = 3.73e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0019228798175884457;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.0019228798175884457;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04571919289013551;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.1387343665807899;  // std dev = 0.763, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.07443167168633695;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.05237431936131019;  // std dev = 2.718, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.06842697784420272;  // std dev = 2.63e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0016846780662751325;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.0016846780662751325;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.03546610087231664;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.055916196662999296;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return 0.10500865528533428;  // std dev = 0.764, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.039325578001030884;  // std dev = 2.718, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.06419184008202619;  // std dev = 5.89e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0014757167188846957;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.0014757167188846957;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.556684
   AUC PR    = 0.427942
   CLL	      = -0.660123
   Precision = 0.637427 at threshold = 0.5
   Recall    = 0.041148
   F1        = 0.077305


Total learning time: 54.810932874679565 seconds
Total inference time: 6.823 seconds
AUC ROC: 0.556684


Results scoring model
   AUC ROC   = 0.592277
   AUC PR    = 0.421477
   CLL	      = -0.621278
   Precision = 0.578947 at threshold = 0.5
   Recall    = 0.059783
   F1        = 0.108374


Total scoring time: 1.044 seconds
Refined model CLL: -0.621278


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.557431
   AUC PR    = 0.428428
   CLL	      = -0.655414
   Precision = 0.637427 at threshold = 0.5
   Recall    = 0.041148
   F1        = 0.077305


Total learning time: 116.57933991432189 seconds
Total inference time: 7.429 seconds
AUC ROC: 0.557431
Total revision time: 116.57933991432189
Best scored revision CLL: -0.618793


Dataset: 13_twitter_cora, Fold: 1, Type: Transfer (trRDN-B), Time: 00:50:53
{'AUC ROC': 0.557431, 'AUC PR': 0.428428, 'CLL': -0.655414, 'Precision': [0.637427, 0.5], 'Recall': 0.041148, 'F1': 0.077305, 'Learning time': 116.57933991432189, 'Inference time': 7.429, 'parameter': {'AUC ROC': 0.557431, 'AUC PR': 0.428428, 'CLL': -0.655414, 'Precision': [0.637427, 0.5], 'Recall': 0.041148, 'F1': 0.077305, 'Learning time': 59.713407039642334, 'Inference time': 7.429}}


Starting fold 2

Target train facts examples: 9016
Target train pos examples: 771
Target train neg examples: 544

Target test facts examples: 33542
Target test pos  examples: 2246
Target test neg examples: 4478

******************************************
Performing Parameter Learning
******************************************
Refine
0;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
0;true;follows(A, D).;false;false
0;false;follows(A, E), recursion_accounttype(E, B).;true;true
0;false,true;follows(A, F), follows(F, A).;false;true
0;false,true,false;follows(A, G), follows(G, E).;false;false
0;false,false;follows(H, A).;true;true
0;false,false,true;follows(I, H), follows(I, A).;false;false
0;false,false,false;follows(A, J), follows(J, K).;false;false
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;true;follows(A, C), tweets(A, D).;false;false
1;false;follows(A, E), recursion_accounttype(E, B).;true;true
1;false,true;tweets(A, F), tweets(E, F).;false;true
1;false,true,false;follows(G, A), follows(E, H).;false;false
1;false,false;follows(I, A).;true;true
1;false,false,true;follows(I, J), recursion_accounttype(J, B).;false;false
1;false,false,false;tweets(A, K).;false;false
2;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;true;follows(C, D), follows(D, A).;false;false
2;false;follows(E, A).;true;true
2;false,true;follows(F, E), follows(F, A).;false;true
2;false,true,false;follows(E, G), recursion_accounttype(G, B).;false;false
2;false,false;follows(A, H), follows(H, I).;true;true
2;false,false,true;recursion_accounttype(I, B).;false;false
2;false,false,false;follows(A, J).;false;false
3;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
3;true;tweets(A, D), tweets(C, D).;false;false
3;false;follows(E, A).;true;true
3;false,true;follows(F, E), recursion_accounttype(F, B).;true;false
3;false,true,true;follows(A, G), recursion_accounttype(G, B).;false;false
3;false,false;follows(A, H), recursion_accounttype(H, B).;true;true
3;false,false,true;follows(A, I), follows(I, H).;false;false
3;false,false,false;tweets(A, J), follows(A, K).;false;false
4;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
4;true;follows(A, D), follows(D, C).;true;false
4;true,true;follows(D, A).;false;true
4;true,true,false;tweets(A, E).;false;false
4;false;follows(F, A).;false;true
4;false,false;follows(A, G), recursion_accounttype(G, B).;true;true
4;false,false,true;follows(G, H), follows(H, G).;false;false
4;false,false,false;follows(A, I), follows(I, J).;false;false
5;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
5;true;follows(D, A), tweets(D, E).;true;true
5;true,true;recursion_accounttype(D, B).;false;false
5;true,false;follows(C, F), follows(F, C).;true;false
5;true,false,true;tweets(C, G), recursion_accounttype(F, B).;false;false
5;false;follows(A, H), follows(H, A).;false;true
5;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
5;false,false,false;tweets(A, J), follows(K, A).;false;false
6;;accounttype(A, B) :- follows(A, C).;true;true
6;true;follows(D, C), recursion_accounttype(D, B).;true;false
6;true,true;recursion_accounttype(C, B).;true;true
6;true,true,true;follows(E, A), follows(E, D).;false;false
6;true,true,false;follows(F, A), recursion_accounttype(F, B).;false;false
6;false;follows(G, A), recursion_accounttype(G, B).;false;true
6;false,false;follows(H, A).;false;true
6;false,false,false;tweets(A, I).;false;false
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;tweets(C, D), follows(A, C).;false;false
7;false;follows(E, A).;true;true
7;false,true;follows(E, F), recursion_accounttype(F, B).;true;false
7;false,true,true;follows(F, E), follows(A, F).;false;false
7;false,false;follows(A, G), recursion_accounttype(G, B).;true;true
7;false,false,true;tweets(A, H).;false;false
7;false,false,false;follows(A, I).;false;false
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;true;follows(C, D), recursion_accounttype(D, B).;false;true
8;true,false;follows(A, E), follows(E, A).;false;false
8;false;follows(F, A), follows(A, G).;true;true
8;false,true;follows(G, A), follows(G, F).;false;true
8;false,true,false;follows(H, F), recursion_accounttype(H, B).;false;false
8;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
8;false,false,false;follows(J, A).;false;false
9;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
9;true;follows(C, D).;true;false
9;true,true;follows(A, D).;true;true
9;true,true,true;follows(E, A), recursion_accounttype(E, B).;false;false
9;true,true,false;tweets(C, F), follows(D, C).;false;false
9;false;follows(A, G), follows(H, A).;false;true
9;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
9;false,false,false;follows(J, A).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.4356367001892301;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.5949910403626703;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.5640312880406888;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.37395569825543723;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.5062567560764839;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.48074388375574334;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.7194734122109543;  // std dev = 7.30e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.5791684237702857;  // std dev = 0.357, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(A, C) )
%   | | then return 0.22916842377028543;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, A) )
%   | | | then return -0.008145345695425854;  // std dev = 0.852, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.07083157622971455;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.3045453081923796;  // std dev = 0.494, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.4047531668618019;  // std dev = 1.919, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.42464571865829975;  // std dev = 1.908, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then return 0.4317030979309822;  // std dev = 0.348, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | else return 0.20848477447886868;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.5118627986468953;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( author(F, D), venue(F, B) )
%   | | then return -0.06570188218847453;  // std dev = 0.846, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( haswordvenue(B, C) )
%   | | | then return 0.18162271221626702;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.13495415790755155;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.23990098036197993;  // std dev = 0.494, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.3098169854894562;  // std dev = 1.919, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.32456036871644;  // std dev = 1.905, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then return 0.35163309306853874;  // std dev = 0.335, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | else return 0.1316730160126654;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.186130796336847;  // std dev = 0.492, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.23288770051702257;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.20738703360610133;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.3712569085691976;  // std dev = 1.05e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.36332570147106397;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.10395681007912147;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.10354034558269198;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.14105921081951767;  // std dev = 0.492, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.17498421379444495;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.15570970363466996;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.2894441187864921;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.2840857557415314;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.08081634704127262;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.08048520911847132;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.10614521363182843;  // std dev = 0.492, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.1468215107291236;  // std dev = 0.439, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.10151648926205137;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.23370108066642245;  // std dev = 7.45e-09, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.22998958852745188;  // std dev = 1.49e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.06231133890180871;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.062053704514323335;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.2822303592919295;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.03650523885744296;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, B) )
%   | | | then return -0.13936904665380662;  // std dev = 0.836, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.2043237899484712;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.0780293680200516;  // std dev = 0.493, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.11183461688104616;  // std dev = 1.915, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.1040976959692097;  // std dev = 1.893, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then return 0.14542057253131477;  // std dev = 0.318, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | else return 0.047569338903151896;  // std dev = 0.489, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.2603415722304252;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(A, C) )
%   | | then return 0.027416474536548052;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, A) )
%   | | | then return -0.15383237971285824;  // std dev = 0.834, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.22312118071877887;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.05818280183498407;  // std dev = 0.493, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.08601392360697566;  // std dev = 1.915, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.08198878886582461;  // std dev = 1.895, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then return 0.12768330370976913;  // std dev = 0.317, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | else return 0.017249550293076482;  // std dev = 0.487, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.045012875164760185;  // std dev = 0.491, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.0648417347663892;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.03730713011975576;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.1669614422973077;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.15297399457796423;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.013094701883582511;  // std dev = 0.487, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.009782989875879309;  // std dev = 0.487, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */


Results
   AUC ROC   = 0.53684
   AUC PR    = 0.345782
   CLL	      = -0.755845
   Precision = 0.353628 at threshold = 0.5
   Recall    = 0.956812
   F1        = 0.5164


Total learning time: 59.71605086326599 seconds
Total inference time: 5.548 seconds
AUC ROC: 0.53684


Results scoring model
   AUC ROC   = 0.553514
   AUC PR    = 0.660736
   CLL	      = -0.665325
   Precision = 0.594317 at threshold = 0.5
   Recall    = 0.976654
   F1        = 0.73896


Total scoring time: 1.139 seconds
Parameter learned model CLL: -0.665325


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)'}, {'true,true': [0.494, 518, 708], 'true,false,true': [0.44, 5, 14], 'true,false,false,true': [1.879, 5, 12], 'true,false,false,false': [0.0, 0, 5], 'false,true,true': [0.0, 0, 20], 'false,true,false': [0.495, 8, 6], 'false,false': [0.495, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)'}, {'true,true': [0.494, 518, 708], 'true,false,true': [0.44, 5, 14], 'true,false,false,true': [1.879, 5, 12], 'true,false,false,false': [0.0, 0, 5], 'false,true,true': [7.3e-08, 0, 20], 'false,true,false': [0.495, 8, 6], 'false,false': [0.495, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(B, C), haswordauthor(D, C)', 'true': 'haswordtitle(E, C)', 'true,false': 'haswordvenue(A, C)', 'true,false,false': 'author(F, D), venue(F, A)', 'false': 'haswordvenue(A, G), haswordvenue(B, G)', 'false,true': 'haswordtitle(H, G)', 'false,true,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,false': 'haswordvenue(B, K), haswordtitle(L, K)'}, {'true,true': [0.357, 3, 17], 'true,false,true': [1.0, 2, 2], 'true,false,false,true': [0.852, 3, 1], 'true,false,false,false': [0.894, 4, 1], 'false,true,true': [0.494, 507, 687], 'false,true,false,true': [1.919, 5, 14], 'false,true,false,false': [1.908, 5, 17], 'false,false,true': [0.348, 7, 26], 'false,false,false': [0.495, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(E, C)', 'true,false': 'author(F, D), venue(F, B)', 'true,false,false': 'haswordvenue(B, C)', 'false': 'haswordvenue(A, G), haswordvenue(B, G)', 'false,true': 'haswordtitle(H, G)', 'false,true,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,false': 'haswordvenue(A, K), haswordtitle(L, K)'}, {'true,true': [0.356, 3, 17], 'true,false,true': [0.846, 3, 1], 'true,false,false,true': [1.0, 2, 2], 'true,false,false,false': [0.894, 4, 1], 'false,true,true': [0.494, 507, 687], 'false,true,false,true': [1.919, 5, 14], 'false,true,false,false': [1.905, 5, 17], 'false,false,true': [0.335, 7, 26], 'false,false,false': [0.49, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)'}, {'true,true': [0.492, 518, 708], 'true,false,true': [0.44, 5, 14], 'true,false,false,true': [1.879, 5, 12], 'true,false,false,false': [1.05e-08, 0, 5], 'false,true,true': [0.0, 0, 20], 'false,true,false': [0.49, 8, 6], 'false,false': [0.49, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)'}, {'true,true': [0.492, 518, 708], 'true,false,true': [0.44, 5, 14], 'true,false,false,true': [1.879, 5, 12], 'true,false,false,false': [0.0, 0, 5], 'false,true,true': [0.0, 0, 20], 'false,true,false': [0.49, 8, 6], 'false,false': [0.49, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)'}, {'true,true': [0.492, 518, 708], 'true,false,true': [0.439, 5, 14], 'true,false,false,true': [1.879, 5, 12], 'true,false,false,false': [7.45e-09, 0, 5], 'false,true,true': [1.49e-08, 0, 20], 'false,true,false': [0.49, 8, 6], 'false,false': [0.49, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(E, C)', 'true,false': 'haswordvenue(B, C)', 'true,false,false': 'author(F, D), venue(F, B)', 'false': 'haswordvenue(A, G), haswordvenue(B, G)', 'false,true': 'haswordtitle(H, G)', 'false,true,false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,false': 'haswordvenue(A, K), haswordtitle(L, K)'}, {'true,true': [0.356, 3, 17], 'true,false,true': [1.0, 2, 2], 'true,false,false,true': [0.836, 3, 1], 'true,false,false,false': [0.894, 4, 1], 'false,true,true': [0.493, 507, 687], 'false,true,false,true': [1.915, 5, 14], 'false,true,false,false': [1.893, 5, 17], 'false,false,true': [0.318, 7, 26], 'false,false,false': [0.489, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(B, C), haswordauthor(D, C)', 'true': 'haswordtitle(E, C)', 'true,false': 'haswordvenue(A, C)', 'true,false,false': 'author(F, D), venue(F, A)', 'false': 'haswordvenue(A, G), haswordvenue(B, G)', 'false,true': 'haswordtitle(H, G)', 'false,true,false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,false': 'haswordvenue(B, K), haswordtitle(L, K)'}, {'true,true': [0.356, 3, 17], 'true,false,true': [1.0, 2, 2], 'true,false,false,true': [0.834, 3, 1], 'true,false,false,false': [0.894, 4, 1], 'false,true,true': [0.493, 507, 687], 'false,true,false,true': [1.915, 5, 14], 'false,true,false,false': [1.895, 5, 17], 'false,false,true': [0.317, 7, 26], 'false,false,false': [0.487, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)'}, {'true,true': [0.491, 518, 708], 'true,false,true': [0.44, 5, 14], 'true,false,false,true': [1.879, 5, 12], 'true,false,false,false': [0.0, 0, 5], 'false,true,true': [0.0, 0, 20], 'false,true,false': [0.487, 8, 6], 'false,false': [0.487, 8, 6]}]]
[{'': [0.24306651325713594, 0.22222222222222385], 'true': [0.24399564626142126, 0.1844140392623454], 'false': [0.17993079584775207, 0.24489795918367352], 'true,false': [0.19390581717451486, 0.17561983471074338], 'false,true': [-8.881784197001253e-17, 0.24489795918367352], 'true,false,false': [0.20761245674740453, 0.0]}, {'': [0.24265720194658624, 0.1968581969586748], 'true': [0.2439956462613994, 0.18151807630785113], 'false': [0.15465453537750243, 0.24489795918367324], 'true,false': [0.193905817174515, 0.17043669583228802], 'true,false,false': [0.20761245674740458, 0.0], 'false,true': [2.6645352591003756e-16, 0.24489795918367324]}, {'': [0.22952352137572604, 0.23994088079159387], 'false': [0.24253575522871798, 0.16862805083149532], 'false,true': [0.24431832529482975, 0.17873720595178558], 'true': [0.12749999999999978, 0.21079846857026777], 'true,false': [0.25, 0.17058790973374105], 'false,true,false': [0.1939058171745152, 0.16545366223293653], 'true,false,false': [0.18163970606836305, 0.16000000000000003], 'false,false': [0.12142920769740277, 0.2448979591836735]}, {'': [0.22681392071940695, 0.23867839580048367], 'false': [0.24158712821313166, 0.1604131592410316], 'false,true': [0.2435535975744991, 0.17846373208604321], 'true': [0.12673759051228345, 0.21175330992800884], 'true,false': [0.17898581250155157, 0.2247459048635539], 'true,false,false': [0.24999999999999997, 0.16], 'false,true,false': [0.1939058171745152, 0.16502665466276994], 'false,false': [0.11214733462026104, 0.2402119567889687]}, {'': [0.24036328540894686, 0.15641266086163155], 'true': [0.24234079763121574, 0.17850681904003898], 'true,false': [0.19390581717451524, 0.1651437859024073], 'true,false,false': [0.20761245674740478, 2.2204460492503132e-17], 'false': [0.115186547991475, 0.23995479322607965], 'false,true': [-4.4408920985006264e-17, 0.24016686421852354]}, {'': [0.24025604220886843, 0.14998697402439834], 'true': [0.24229795111765495, 0.1776581369530084], 'true,false': [0.19390581717451524, 0.16356874957890366], 'true,false,false': [0.2076124567474049, -1.1102230246251566e-17], 'false': [0.10882578023121686, 0.23976663203009352], 'false,true': [-1.1102230246251566e-17, 0.23998620849484845]}, {'': [0.24020968137949505, 0.14669453721450323], 'true': [0.24228116446628103, 0.17724607271101334], 'true,false': [0.19304177542057807, 0.16349637179944698], 'true,false,false': [0.20761245674740478, 1.1102230246251566e-17], 'false': [0.10557429635841457, 0.23963075719913615], 'false,true': [1.1102230246251566e-17, 0.23985589890550804]}, {'': [0.19334308815152335, 0.23779202209033343], 'false': [0.24129470453408178, 0.1444160719604116], 'false,true': [0.24347815598435735, 0.17685818697444816], 'true': [0.12671749527078116, 0.2024923539866226], 'true,false': [0.24999999999999994, 0.16755410640757232], 'false,true,false': [0.19306941064870106, 0.16282984473571782], 'true,false,false': [0.17465278459677347, 0.15999999999999998], 'false,false': [0.10121133693100794, 0.2395330277330338]}, {'': [0.19200646970984311, 0.2373547119221966], 'false': [0.24086717819898232, 0.1438276353938853], 'false,true': [0.24303682045199476, 0.17704582528031498], 'true': [0.1264282822114798, 0.20303716793530635], 'true,false': [0.25, 0.16730731364390242], 'false,true,false': [0.19309522756933106, 0.163177469739526], 'true,false,false': [0.17377426795164824, 0.15999999999999998], 'false,false': [0.10069108555317474, 0.23694376789244623]}, {'': [0.2393195565309633, 0.1430155353482596], 'true': [0.24138242548555422, 0.17721345493180815], 'true,false': [0.19322911392705439, 0.16338001917388284], 'true,false,false': [0.2076124567474048, 0.0], 'false': [0.1022904506712027, 0.23672986923754022], 'false,true': [-2.7755575615628915e-18, 0.23691012678361298]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,false;haswordvenue(A, E), haswordtitle(F, E).;true;true
0;true,false,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
0;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
0;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,false;haswordvenue(A, E), haswordtitle(F, E).;true;true
1;true,false,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
1;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,false;haswordvenue(A, E), haswordtitle(F, E).;true;true
4;true,false,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
4;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
4;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,false;haswordvenue(A, E), haswordtitle(F, E).;true;true
5;true,false,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
5;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
5;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,false;haswordvenue(B, E), haswordtitle(F, E).;true;true
6;true,false,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
6;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,false;haswordvenue(A, E), haswordtitle(F, E).;true;true
9;true,false,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
9;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
9;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.4356367001892301;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.5949910403626703;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.5640312880406888;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.37395569825543723;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.5062567560764839;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.48074388375574334;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.7194734122109543;  // std dev = 7.30e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.5791684237702857;  // std dev = 0.357, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.22916842377028543;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, B) )
%   | | | then return -0.008145345695425868;  // std dev = 0.852, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.07083157622971455;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.3045453081923796;  // std dev = 0.494, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.4047531668618019;  // std dev = 1.919, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.42464571865829975;  // std dev = 1.908, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then return 0.4317030979309822;  // std dev = 0.348, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | else return 0.20848477447886868;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.24202763793698798;  // std dev = 0.493, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.3098169854894562;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.2877826293809521;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.44960468245709945;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return 0.44785888933339724;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.17062637354018512;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.1316730160126654;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.39220223652873376;  // std dev = 0.357, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.12696337948380887;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, B) )
%   | | | then return -0.05005598060633537;  // std dev = 0.846, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.10593105372516383;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.18454925651537715;  // std dev = 0.494, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.23288770051702257;  // std dev = 1.919, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.24521343157380351;  // std dev = 1.895, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then return 0.25707323099650414;  // std dev = 0.333, 34.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=26 */
%   | | else return 0.13012195064051188;  // std dev = 0.499, 13.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.14102569602808293;  // std dev = 0.493, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.17498421379444495;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.15545019243717279;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.2896496561409294;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return 0.28612939832545614;  // std dev = 2.58e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.08082891251501072;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.07685378198121673;  // std dev = 0.488, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.25998765940543617;  // std dev = 0.357, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.06247736811790816;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.07320557369062825;  // std dev = 1.220, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(I, G) )
%   | | | then return 0.371635780661298;  // std dev = 1.589, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return -0.22046948249659648;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( haswordtitle(J, C) )
%   | | | then return 0.10279529899441671;  // std dev = 16.896, 1,167.000 (wgt'ed) examples reached here.  /* #neg=498 #pos=669 */
%   | | | else return 0.138569664246675;  // std dev = 2.696, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then return 0.16176498697990188;  // std dev = 0.328, 34.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=26 */
%   | else return 0.059223856309193135;  // std dev = 0.488, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.07968340836449225;  // std dev = 0.492, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.09986691531720149;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.08426074971766961;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.20993695074206756;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.20389077647711534;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.04539559287206656;  // std dev = 0.488, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.02398315188871308;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.059828759385958816;  // std dev = 0.492, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.09366578522906946;  // std dev = 0.439, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.04614445053541132;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.17722794702384248;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.17278126421176335;  // std dev = 2.58e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.03466662465980398;  // std dev = 0.488, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.018192719521221448;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.044954251193543224;  // std dev = 0.492, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.07247208491575644;  // std dev = 0.439, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.03586337503843927;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.15284356825350143;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.14946237106677618;  // std dev = 1.49e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.02640409154397194;  // std dev = 0.488, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.0137835958544101;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */


Results
   AUC ROC   = 0.536806
   AUC PR    = 0.343455
   CLL	      = -0.754704
   Precision = 0.353813 at threshold = 0.5
   Recall    = 0.956367
   F1        = 0.516532


Total learning time: 57.761693239212036 seconds
Total inference time: 6.039 seconds
AUC ROC: 0.536806


Results scoring model
   AUC ROC   = 0.553596
   AUC PR    = 0.66261
   CLL	      = -0.665933
   Precision = 0.594317 at threshold = 0.5
   Recall    = 0.976654
   F1        = 0.73896


Total scoring time: 1.055 seconds
Refined model CLL: -0.665933


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.53684
   AUC PR    = 0.345782
   CLL	      = -0.755845
   Precision = 0.353628 at threshold = 0.5
   Recall    = 0.956812
   F1        = 0.5164


Total learning time: 119.67174410247804 seconds
Total inference time: 5.548 seconds
AUC ROC: 0.53684
Total revision time: 119.67174410247804
Best scored revision CLL: -0.665325


Dataset: 13_twitter_cora, Fold: 2, Type: Transfer (trRDN-B), Time: 00:53:05
{'AUC ROC': 0.53684, 'AUC PR': 0.345782, 'CLL': -0.755845, 'Precision': [0.353628, 0.5], 'Recall': 0.956812, 'F1': 0.5164, 'Learning time': 119.67174410247804, 'Inference time': 5.548, 'parameter': {'AUC ROC': 0.53684, 'AUC PR': 0.345782, 'CLL': -0.755845, 'Precision': [0.353628, 0.5], 'Recall': 0.956812, 'F1': 0.5164, 'Learning time': 59.71605086326599, 'Inference time': 5.548}}


Starting fold 3

Target train facts examples: 9306
Target train pos examples: 581
Target train neg examples: 2222

Target test facts examples: 33252
Target test pos  examples: 2436
Target test neg examples: 2800

******************************************
Performing Parameter Learning
******************************************
Refine
0;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
0;true;follows(A, D).;false;false
0;false;follows(A, E), recursion_accounttype(E, B).;true;true
0;false,true;follows(A, F), follows(F, A).;false;true
0;false,true,false;follows(A, G), follows(G, E).;false;false
0;false,false;follows(H, A).;true;true
0;false,false,true;follows(I, H), follows(I, A).;false;false
0;false,false,false;follows(A, J), follows(J, K).;false;false
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;true;follows(A, C), tweets(A, D).;false;false
1;false;follows(A, E), recursion_accounttype(E, B).;true;true
1;false,true;tweets(A, F), tweets(E, F).;false;true
1;false,true,false;follows(G, A), follows(E, H).;false;false
1;false,false;follows(I, A).;true;true
1;false,false,true;follows(I, J), recursion_accounttype(J, B).;false;false
1;false,false,false;tweets(A, K).;false;false
2;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;true;follows(C, D), follows(D, A).;false;false
2;false;follows(E, A).;true;true
2;false,true;follows(F, E), follows(F, A).;false;true
2;false,true,false;follows(E, G), recursion_accounttype(G, B).;false;false
2;false,false;follows(A, H), follows(H, I).;true;true
2;false,false,true;recursion_accounttype(I, B).;false;false
2;false,false,false;follows(A, J).;false;false
3;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
3;true;tweets(A, D), tweets(C, D).;false;false
3;false;follows(E, A).;true;true
3;false,true;follows(F, E), recursion_accounttype(F, B).;true;false
3;false,true,true;follows(A, G), recursion_accounttype(G, B).;false;false
3;false,false;follows(A, H), recursion_accounttype(H, B).;true;true
3;false,false,true;follows(A, I), follows(I, H).;false;false
3;false,false,false;tweets(A, J), follows(A, K).;false;false
4;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
4;true;follows(A, D), follows(D, C).;true;false
4;true,true;follows(D, A).;false;true
4;true,true,false;tweets(A, E).;false;false
4;false;follows(F, A).;false;true
4;false,false;follows(A, G), recursion_accounttype(G, B).;true;true
4;false,false,true;follows(G, H), follows(H, G).;false;false
4;false,false,false;follows(A, I), follows(I, J).;false;false
5;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
5;true;follows(D, A), tweets(D, E).;true;true
5;true,true;recursion_accounttype(D, B).;false;false
5;true,false;follows(C, F), follows(F, C).;true;false
5;true,false,true;tweets(C, G), recursion_accounttype(F, B).;false;false
5;false;follows(A, H), follows(H, A).;false;true
5;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
5;false,false,false;tweets(A, J), follows(K, A).;false;false
6;;accounttype(A, B) :- follows(A, C).;true;true
6;true;follows(D, C), recursion_accounttype(D, B).;true;false
6;true,true;recursion_accounttype(C, B).;true;true
6;true,true,true;follows(E, A), follows(E, D).;false;false
6;true,true,false;follows(F, A), recursion_accounttype(F, B).;false;false
6;false;follows(G, A), recursion_accounttype(G, B).;false;true
6;false,false;follows(H, A).;false;true
6;false,false,false;tweets(A, I).;false;false
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;tweets(C, D), follows(A, C).;false;false
7;false;follows(E, A).;true;true
7;false,true;follows(E, F), recursion_accounttype(F, B).;true;false
7;false,true,true;follows(F, E), follows(A, F).;false;false
7;false,false;follows(A, G), recursion_accounttype(G, B).;true;true
7;false,false,true;tweets(A, H).;false;false
7;false,false,false;follows(A, I).;false;false
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;true;follows(C, D), recursion_accounttype(D, B).;false;true
8;true,false;follows(A, E), follows(E, A).;false;false
8;false;follows(F, A), follows(A, G).;true;true
8;false,true;follows(G, A), follows(G, F).;false;true
8;false,true,false;follows(H, F), recursion_accounttype(H, B).;false;false
8;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
8;false,false,false;follows(J, A).;false;false
9;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
9;true;follows(C, D).;true;false
9;true,true;follows(A, D).;true;true
9;true,true,true;follows(E, A), recursion_accounttype(E, B).;false;false
9;true,true,false;tweets(C, F), follows(D, C).;false;false
9;false;follows(A, G), follows(H, A).;false;true
9;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
9;false,false,false;follows(J, A).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2185986705492428;  // std dev = 0.480, 1,512.000 (wgt'ed) examples reached here.  /* #neg=967 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return -0.00851773156715447;  // std dev = 0.340, 15.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return -0.00851773156715447;  // std dev = 0.340, 15.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.021414241221961363;  // std dev = 3.659, 98.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=16 */
%   | | | else return 0.011995088945666216;  // std dev = 3.679, 104.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=16 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.2579743174254752;  // std dev = 0.495, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | else return 0.12485743430859184;  // std dev = 0.456, 44.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=13 */
%   | else return 0.19000275252137394;  // std dev = 0.480, 1,467.000 (wgt'ed) examples reached here.  /* #neg=938 #pos=529 */
%   else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | then if ( title(I, H), venue(I, A) )
%   | | then if ( samebib(I, J), venue(J, B) )
%   | | | then return 0.5841825108119273;  // std dev = 2.090, 22.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return -0.14285137462389366;  // std dev = 0.007, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | | else if ( title(K, H), venue(K, B) )
%   | | | then return -0.14331750143463115;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0.03850068038355068;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | else return 0.01956838586554722;  // std dev = 0.370, 110.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=18 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.15889418621578955;  // std dev = 0.479, 1,523.000 (wgt'ed) examples reached here.  /* #neg=978 #pos=545 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.5806967198830614;  // std dev = 2.090, 22.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return -0.1463147617912181;  // std dev = 0.011, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   | | else if ( title(H, E), venue(H, A) )
%   | | | then return -0.14691344962099384;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.034904732197187975;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.022489987818920483;  // std dev = 3.309, 90.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=16 */
%   | | | else return -0.05367305867683965;  // std dev = 1.341, 23.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=2 */
%   | | else return -0.14472275606692678;  // std dev = 0.003, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13590349236000515;  // std dev = 0.480, 1,508.000 (wgt'ed) examples reached here.  /* #neg=963 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.5276157076799313;  // std dev = 1.951, 21.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=16 */
%   | | | else return -0.128722609218333;  // std dev = 0.007, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | | else if ( title(H, E), venue(H, B) )
%   | | | then return -0.1207873243453698;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.08075748671216999;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return 0.03767187717790225;  // std dev = 3.240, 84.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=16 */
%   | | | else return -0.0659946899597777;  // std dev = 1.347, 26.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=2 */
%   | | else return -0.1286263391895184;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10014602552933202;  // std dev = 0.477, 1,556.000 (wgt'ed) examples reached here.  /* #neg=1,011 #pos=545 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.5583438588781385;  // std dev = 1.790, 20.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=16 */
%   | | | else return -0.13317722811995267;  // std dev = 0.010, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   | | else if ( title(H, E), venue(H, A) )
%   | | | then return -0.1221822181519494;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0.010786588916059095;  // std dev = 1.301, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then return -0.009855040643485883;  // std dev = 0.264, 15.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   | | else return 0.004638598113296395;  // std dev = 0.305, 97.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=16 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C) )
%   | | then return 0.07065219757653553;  // std dev = 0.473, 44.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=15 */
%   | | else return -0.08323251973046122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.09253115371229406;  // std dev = 0.481, 1,462.000 (wgt'ed) examples reached here.  /* #neg=933 #pos=529 */
%   else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | then if ( title(I, H), venue(I, B) )
%   | | then if ( samebib(I, J), venue(J, A) )
%   | | | then return 0.3851454633561223;  // std dev = 2.088, 22.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return -0.11483904999881019;  // std dev = 0.018, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
%   | | else return 0.07006504289128063;  // std dev = 0.416, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( title(M, L), venue(M, B) )
%   | | | then return 0.004935004898173443;  // std dev = 2.894, 85.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=16 */
%   | | | else return -0.049111905417235195;  // std dev = 1.337, 25.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=2 */
%   | | else return -0.11535755962281967;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07904000928928905;  // std dev = 0.482, 1,486.000 (wgt'ed) examples reached here.  /* #neg=941 #pos=545 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.3686706008607428;  // std dev = 2.088, 22.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return -0.1169208309403488;  // std dev = 0.044, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
%   | | else return 0.04339308643699507;  // std dev = 0.386, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return -0.10267935575040504;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return -0.017944453187406874;  // std dev = 3.033, 106.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=18 */
%   | | | else return -0.10302414791159413;  // std dev = 0.003, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05600271900513387;  // std dev = 0.480, 1,513.000 (wgt'ed) examples reached here.  /* #neg=968 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then return 0.005505254110313529;  // std dev = 0.291, 82.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=16 */
%   | | else if ( title(G, E), venue(G, B) )
%   | | | then return -0.09674487364134197;  // std dev = 3.73e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0.007663077223461529;  // std dev = 1.291, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return -0.011056251381388115;  // std dev = 2.589, 92.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=16 */
%   | | | else return -0.044049527899649325;  // std dev = 1.331, 26.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=2 */
%   | | else return -0.0942808814106776;  // std dev = 0.003, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05370998671886755;  // std dev = 0.483, 1,473.000 (wgt'ed) examples reached here.  /* #neg=928 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.2654258758408394;  // std dev = 2.206, 23.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=16 */
%   | | | else return -0.10160127866976158;  // std dev = 0.038, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
%   | | else return 0.03996901312851431;  // std dev = 0.400, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return 0.0070369433060040185;  // std dev = 0.248, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | | else return -0.01767899517254465;  // std dev = 0.272, 105.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=16 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.038309191401939356;  // std dev = 0.482, 1,488.000 (wgt'ed) examples reached here.  /* #neg=943 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.3036114264072077;  // std dev = 1.791, 20.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=16 */
%   | | | else return -0.09351169810212456;  // std dev = 0.016, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   | | else if ( title(H, E), venue(H, B) )
%   | | | then return -0.08074452984422982;  // std dev = 3.73e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.0011897264173322496;  // std dev = 1.291, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then return -0.03829972631464604;  // std dev = 0.249, 15.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   | | else return -0.014021448730957106;  // std dev = 0.281, 100.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=16 */


Results
   AUC ROC   = 0.562781
   AUC PR    = 0.506337
   CLL	      = -0.703662
   Precision = 0.55 at threshold = 0.5
   Recall    = 0.027094
   F1        = 0.051643


Total learning time: 43.659992694854736 seconds
Total inference time: 5.077 seconds
AUC ROC: 0.562781


Results scoring model
   AUC ROC   = 0.594871
   AUC PR    = 0.278655
   CLL	      = -0.513654
   Precision = 0.592593 at threshold = 0.5
   Recall    = 0.027539
   F1        = 0.052632


Total scoring time: 1.354 seconds
Parameter learned model CLL: -0.513654


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(B, F), haswordauthor(G, F)', 'false,false,false': 'haswordvenue(B, H), haswordtitle(I, H)'}, {'true': [0.48, 967, 545], 'false,true': [0.34, 13, 2], 'false,false,true': [0.34, 13, 2], 'false,false,false,true': [3.659, 82, 16], 'false,false,false,false': [3.679, 88, 16]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordauthor(F, C)', 'false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false,true': 'title(I, H), venue(I, A)', 'false,true,true': 'samebib(I, J), venue(J, B)', 'false,true,false': 'title(K, H), venue(K, B)'}, {'true,true,true': [0.495, 4, 3], 'true,true,false': [0.456, 31, 13], 'true,false': [0.48, 938, 529], 'false,true,true,true': [2.09, 6, 16], 'false,true,true,false': [0.007, 59, 0], 'false,true,false,true': [0.0, 9, 0], 'false,true,false,false': [1.279, 9, 2], 'false,false': [0.37, 92, 18]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordtitle(E, D)', 'false,true': 'title(F, E), venue(F, B)', 'false,true,true': 'samebib(F, G), venue(G, A)', 'false,true,false': 'title(H, E), venue(H, A)', 'false,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,false,true': 'title(K, J), venue(K, A)'}, {'true': [0.479, 978, 545], 'false,true,true,true': [2.09, 6, 16], 'false,true,true,false': [0.011, 62, 0], 'false,true,false,true': [0.0, 6, 0], 'false,true,false,false': [1.279, 9, 2], 'false,false,true,true': [3.309, 74, 16], 'false,false,true,false': [1.341, 21, 2], 'false,false,false': [0.003, 5, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordtitle(E, D)', 'false,true': 'title(F, E), venue(F, A)', 'false,true,true': 'samebib(F, G), venue(G, B)', 'false,true,false': 'title(H, E), venue(H, B)', 'false,false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,false,true': 'title(K, J), venue(K, B)'}, {'true': [0.48, 963, 545], 'false,true,true,true': [1.951, 5, 16], 'false,true,true,false': [0.007, 57, 0], 'false,true,false,true': [0.0, 12, 0], 'false,true,false,false': [1.247, 7, 2], 'false,false,true,true': [3.24, 68, 16], 'false,false,true,false': [1.347, 24, 2], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordtitle(E, D)', 'false,true': 'title(F, E), venue(F, B)', 'false,true,true': 'samebib(F, G), venue(G, A)', 'false,true,false': 'title(H, E), venue(H, A)', 'false,false': 'haswordvenue(B, I), haswordauthor(J, I)'}, {'true': [0.477, 1, 545], 'false,true,true,true': [1.79, 4, 16], 'false,true,true,false': [0.01, 54, 0], 'false,true,false,true': [0.0, 9, 0], 'false,true,false,false': [1.301, 11, 2], 'false,false,true': [0.264, 13, 2], 'false,false,false': [0.305, 81, 16]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordtitle(F, C)', 'false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false,true': 'title(I, H), venue(I, B)', 'false,true,true': 'samebib(I, J), venue(J, A)', 'false,false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false,false,true': 'title(M, L), venue(M, B)'}, {'true,true,true': [0.473, 29, 15], 'true,true,false': [0.894, 4, 1], 'true,false': [0.481, 933, 529], 'false,true,true,true': [2.088, 6, 16], 'false,true,true,false': [0.018, 72, 0], 'false,true,false': [0.416, 7, 2], 'false,false,true,true': [2.894, 69, 16], 'false,false,true,false': [1.337, 23, 2], 'false,false,false': [0.0, 3, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordtitle(E, D)', 'false,true': 'title(F, E), venue(F, A)', 'false,true,true': 'samebib(F, G), venue(G, B)', 'false,false': 'haswordvenue(A, H), haswordauthor(I, H)', 'false,false,false': 'haswordvenue(A, J), haswordtitle(K, J)'}, {'true': [0.482, 941, 545], 'false,true,true,true': [2.088, 6, 16], 'false,true,true,false': [0.044, 79, 0], 'false,true,false': [0.386, 9, 2], 'false,false,true': [0.0, 4, 0], 'false,false,false,true': [3.033, 88, 18], 'false,false,false,false': [0.003, 3, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordtitle(E, D)', 'false,true': 'title(F, E), venue(F, A)', 'false,true,false': 'title(G, E), venue(G, B)', 'false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false,false,true': 'title(J, I), venue(J, B)'}, {'true': [0.48, 968, 545], 'false,true,true': [0.291, 66, 16], 'false,true,false,true': [3.73e-09, 9, 0], 'false,true,false,false': [1.291, 10, 2], 'false,false,true,true': [2.589, 76, 16], 'false,false,true,false': [1.331, 24, 2], 'false,false,false': [0.003, 5, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordtitle(E, D)', 'false,true': 'title(F, E), venue(F, B)', 'false,true,true': 'samebib(F, G), venue(G, A)', 'false,false': 'haswordvenue(A, H), haswordauthor(I, H)'}, {'true': [0.483, 928, 545], 'false,true,true,true': [2.206, 7, 16], 'false,true,true,false': [0.038, 76, 0], 'false,true,false': [0.4, 8, 2], 'false,false,true': [0.248, 10, 2], 'false,false,false': [0.272, 89, 16]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordtitle(E, D)', 'false,true': 'title(F, E), venue(F, A)', 'false,true,true': 'samebib(F, G), venue(G, B)', 'false,true,false': 'title(H, E), venue(H, B)', 'false,false': 'haswordvenue(A, I), haswordauthor(J, I)'}, {'true': [0.482, 943, 545], 'false,true,true,true': [1.791, 4, 16], 'false,true,true,false': [0.016, 64, 0], 'false,true,false,true': [3.73e-09, 6, 0], 'false,true,false,false': [1.291, 10, 2], 'false,false,true': [0.249, 13, 2], 'false,false,false': [0.281, 84, 16]}]]
[{'': [0.23052572366393756, 0.1310939357907264], 'false': [0.11555555555555559, 0.1321327698613275], 'false,false': [0.11555555555555559, 0.1333202627193423], 'false,false,false': [0.13660974593919148, 0.13017751479289885]}, {'': [0.23012605866188343, 0.14150731588572152], 'true': [0.2153018069973094, 0.23056760199043203], 'true,true': [0.24489795918367335, 0.20816115702479407], 'false': [0.14644124518664764, 0.13685977797386756], 'false,true': [0.15847820655417225, 0.09000000000000008], 'false,true,true': [0.19847159764469843, 9.481056160880539e-07], 'false,true,false': [0.0, 0.14876033057851246]}, {'': [0.22975912534577497, 0.1269777071875822], 'false': [0.14644748383795275, 0.10986436241061678], 'false,true': [0.15417144765315077, 0.10380622837370247], 'false,true,true': [0.198532305509518, 1.8638210110868701e-06], 'false,false': [0.113750291279461, 1.54264078831845e-06], 'false,false,true': [0.12165490014411937, 0.07819909923166873], 'false,true,false': [0.0, 0.14876033057851246]}, {'': [0.2307658326982101, 0.11701993957033738], 'false': [0.1241930487634297, 0.11055926514208746], 'false,true': [0.13356828496015802, 0.08402190530612784], 'false,true,true': [0.18130779711589404, 8.165780110551729e-07], 'false,false': [0.11387413253134485, 0.0], 'false,false,true': [0.12496873868150842, 0.06982340580900806], 'false,true,false': [-2.3129646346357427e-18, 0.17283950617283947]}, {'': [0.22754605717630486, 0.10705182770250864], 'false': [0.12636095730538224, 0.09012050192547219], 'false,true': [0.13761711068524393, 0.08119713131855512], 'false,true,true': [0.16022072394380796, 1.7767296031049277e-06], 'false,false': [0.06953746049645054, 0.09327531269540396], 'false,true,false': [0.0, 0.13017751479289946]}, {'': [0.23057076170899632, 0.09460599368093783], 'true': [0.21953468573270904, 0.23089484241101962], 'true,true': [0.22388361274382673, 0.15999999999999998], 'false': [0.09871056637861202, 0.09070450505762956], 'false,true': [0.09121042421429244, 0.1728395061728395], 'false,true,true': [0.19822465611504853, 4.617313453456062e-06], 'false,false': [0.0928685479486034, 0.0], 'false,false,true': [0.09850337551392682, 0.07145294491973525]}, {'': [0.232177308443552, 0.08600096693518242], 'false': [0.09005978920179968, 0.08182716583228743], 'false,true': [0.0833744952277554, 0.14876033057851246], 'false,true,true': [0.19823921520087728, 2.4684858758962527e-05], 'false,false': [0.0, 0.08458969143866828], 'false,false,false': [0.08678444783863203, 2.3037883073636265e-06]}, {'': [0.23040850991833386, 0.07629043434614657], 'false': [0.0844643778213336, 0.06929403070852046], 'false,true': [0.08471680918198635, 0.08203471696600688], 'false,true,false': [1.5419764230904951e-18, 0.13888888888888887], 'false,false': [0.07199564058007896, 1.4054214312164693e-06], 'false,false,true': [0.07285282065009398, 0.06811383696250885]}, {'': [0.2331124067225463, 0.07689936411839754], 'false': [0.08144042846206814, 0.0726611717841517], 'false,true': [0.07321430694056168, 0.15999999999999998], 'false,true,true': [0.21166378284600956, 1.9108903391599968e-05], 'false,false': [0.06161890861760069, 0.07386049060312559]}, {'': [0.23208838491673572, 0.07454581368094254], 'false': [0.07171575753591845, 0.07697109338916236], 'false,false': [0.06204486260953083, 0.0791331452110075], 'false,true': [0.06679226658548938, 0.09408441978128929], 'false,true,false': [2.3129646346357427e-18, 0.13888888888888884], 'false,true,true': [0.16035687486884687, 4.094111212552681e-06]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;false;haswordvenue(A, G), haswordtitle(H, G).;true;true
1;false,true;title(I, H), venue(I, A).;true;true
1;false,true,true;samebib(I, J), venue(J, B).;true;true
1;false,true,false;title(K, H), venue(K, B).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
2;false,true;title(F, E), venue(F, B).;true;true
2;false,true,true;samebib(F, G), venue(G, A).;true;true
2;false,true,false;title(H, E), venue(H, A).;true;true
2;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;false;haswordvenue(A, D), haswordtitle(E, D).;true;true
3;false,true;title(F, E), venue(F, A).;true;true
3;false,true,true;samebib(F, G), venue(G, B).;true;true
3;false,true,false;title(H, E), venue(H, B).;true;true
3;false,false;haswordvenue(B, I), haswordtitle(J, I).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
4;false,true;title(F, E), venue(F, B).;true;true
4;false,true,true;samebib(F, G), venue(G, A).;true;true
4;false,true,false;title(H, E), venue(H, A).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;false;haswordvenue(A, G), haswordtitle(H, G).;true;true
5;false,true;title(I, H), venue(I, B).;true;true
5;false,true,true;samebib(I, J), venue(J, A).;true;true
5;false,false;haswordvenue(B, K), haswordtitle(L, K).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
6;false,true;title(F, E), venue(F, A).;true;true
6;false,true,true;samebib(F, G), venue(G, B).;true;true
6;false,false;haswordvenue(A, H), haswordauthor(I, H).;true;true
6;false,false,false;haswordvenue(A, J), haswordtitle(K, J).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;false;haswordvenue(A, D), haswordtitle(E, D).;true;true
7;false,true;title(F, E), venue(F, A).;true;true
7;false,true,false;title(G, E), venue(G, B).;true;true
7;false,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;false;haswordvenue(A, D), haswordtitle(E, D).;true;true
8;false,true;title(F, E), venue(F, B).;true;true
8;false,true,true;samebib(F, G), venue(G, A).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;false;haswordvenue(A, D), haswordtitle(E, D).;true;true
9;false,true;title(F, E), venue(F, A).;true;true
9;false,true,true;samebib(F, G), venue(G, B).;true;true
9;false,true,false;title(H, E), venue(H, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.23314893509951226;  // std dev = 0.484, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | else return 0.1604745164948612;  // std dev = 0.459, 43.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=13 */
%   | else return 0.21924108527015584;  // std dev = 0.480, 1,465.000 (wgt'ed) examples reached here.  /* #neg=936 #pos=529 */
%   else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | then if ( title(I, H), venue(I, A) )
%   | | then if ( samebib(I, J), venue(J, B) )
%   | | | then return 0.6200536970042743;  // std dev = 1.952, 21.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=16 */
%   | | | else return -0.14185106490048766;  // std dev = 6.66e-08, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | | else return -0.05489454316135737;  // std dev = 0.282, 23.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=2 */
%   | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | then return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.026373234164932945;  // std dev = 3.869, 107.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=18 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C) )
%   | | then return 0.17791871770633313;  // std dev = 0.473, 44.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=15 */
%   | | else return 0.077334239218108;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.1822139065816083;  // std dev = 0.478, 1,499.000 (wgt'ed) examples reached here.  /* #neg=970 #pos=529 */
%   else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | then return -0.027141793712416155;  // std dev = 0.290, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return 0.052438979431829;  // std dev = 3.583, 81.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=16 */
%   | | | else return -0.039828726870965475;  // std dev = 1.338, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.018978317543358207;  // std dev = 3.338, 95.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=16 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.23789831286024188;  // std dev = 0.492, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | else return 0.08456159745952976;  // std dev = 0.450, 46.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=13 */
%   | else return 0.1551497950879529;  // std dev = 0.478, 1,499.000 (wgt'ed) examples reached here.  /* #neg=970 #pos=529 */
%   else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | then if ( title(I, H), venue(I, B) )
%   | | then if ( samebib(I, J), venue(J, A) )
%   | | | then return 0.514948434142188;  // std dev = 2.309, 24.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=16 */
%   | | | else return -0.14973713912434924;  // std dev = 0.056, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | | else return -0.0568876832278066;  // std dev = 0.276, 24.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=2 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then if ( title(M, L), venue(M, A) )
%   | | | then return 0.020568186406320264;  // std dev = 3.276, 92.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=16 */
%   | | | else return -0.04662589872170224;  // std dev = 1.348, 22.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
%   | | else return -0.11377076771917259;  // std dev = 0.009, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1391540246957002;  // std dev = 0.481, 1,504.000 (wgt'ed) examples reached here.  /* #neg=959 #pos=545 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.4969055967472567;  // std dev = 2.089, 22.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return -0.13257752120214036;  // std dev = 0.036, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | | else if ( title(H, E), venue(H, A) )
%   | | | then return -0.13350201921217697;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.020344134633976878;  // std dev = 1.301, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.023707405543228404;  // std dev = 3.250, 90.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=16 */
%   | | | else return -0.041188061769388634;  // std dev = 1.348, 22.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
%   | | else return -0.1033276116749581;  // std dev = 0.008, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.11336554097242335;  // std dev = 0.480, 1,507.000 (wgt'ed) examples reached here.  /* #neg=962 #pos=545 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then return 0.015921581798323852;  // std dev = 0.320, 85.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=16 */
%   | | else if ( title(G, E), venue(G, A) )
%   | | | then return -0.1187997919726396;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0.006984133285633294;  // std dev = 1.309, 14.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return 3.541307469500215E-4;  // std dev = 3.292, 103.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=16 */
%   | | | else return -0.03220808398838634;  // std dev = 1.345, 21.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=2 */
%   | | else return -0.09364981878789899;  // std dev = 0.008, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09546024856678591;  // std dev = 0.481, 1,491.000 (wgt'ed) examples reached here.  /* #neg=946 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return -0.035442213449337415;  // std dev = 0.270, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then if ( title(H, G), venue(H, B) )
%   | | | then return 0.01289063044888414;  // std dev = 3.278, 92.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=16 */
%   | | | else return 0.09831492962824435;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.008675226743758861;  // std dev = 3.038, 94.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=16 */
%   | | | else return -0.08645283434546942;  // std dev = 0.007, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06893026277786098;  // std dev = 0.479, 1,521.000 (wgt'ed) examples reached here.  /* #neg=976 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.5517581729460496;  // std dev = 1.791, 20.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=16 */
%   | | | else return -0.1331069051627565;  // std dev = 0.016, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | | else if ( title(H, E), venue(H, B) )
%   | | | then return -0.12531342319366043;  // std dev = 5.27e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0.04683787026991342;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return -0.011684792340923908;  // std dev = 2.989, 105.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=16 */
%   | | | else return 0.044096077003393734;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | | else return -0.07913791407850798;  // std dev = 0.003, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D), haswordtitle(F, C) )
%   | | then return 0.3423762600995352;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordtitle(G, C) )
%   | | | then return 0.04368103401904614;  // std dev = 2.944, 39.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=13 */
%   | | | else return 0.030682915731583955;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return 0.05317623368186422;  // std dev = 0.479, 1,481.000 (wgt'ed) examples reached here.  /* #neg=952 #pos=529 */
%   else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | then if ( title(J, I), venue(J, A) )
%   | | then return -0.01519441617363824;  // std dev = 0.285, 111.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=16 */
%   | | else return 0.07917936273964042;  // std dev = 0.416, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then if ( title(M, L), venue(M, A) )
%   | | | then return -0.008427128768811817;  // std dev = 2.897, 94.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=16 */
%   | | | else return -0.054926066223693705;  // std dev = 1.346, 27.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=2 */
%   | | else return -0.07424034388560827;  // std dev = 0.006, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04193352226532165;  // std dev = 0.479, 1,527.000 (wgt'ed) examples reached here.  /* #neg=982 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return -0.015460665622015465;  // std dev = 0.278, 14.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then if ( title(H, G), venue(H, A) )
%   | | | then return 0.0045994801841080304;  // std dev = 2.670, 76.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=14 */
%   | | | else return -0.040511095440180285;  // std dev = 1.340, 24.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=2 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.0026140257021348844;  // std dev = 3.249, 108.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=18 */
%   | | | else return -0.06882304376738746;  // std dev = 0.003, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordtitle(D, C) )
%   then if ( title(E, D), venue(E, A) )
%   | then if ( samebib(E, F), venue(F, B) )
%   | | then if ( haswordvenue(B, C) )
%   | | | then return 0.5549812512642893;  // std dev = 6.768, 431.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=379 */
%   | | | else return 0.3861010918739297;  // std dev = 2.274, 27.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=20 */
%   | | else return -0.28874743801056446;  // std dev = 0.144, 856.000 (wgt'ed) examples reached here.  /* #neg=840 #pos=16 */
%   | else if ( title(G, D), venue(G, B) )
%   | | then return -0.23979601873699033;  // std dev = 0.194, 30.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=1 */
%   | | else if ( haswordvenue(B, C) )
%   | | | then return 0.19110701768390947;  // std dev = 7.902, 250.000 (wgt'ed) examples reached here.  /* #neg=121 #pos=129 */
%   | | | else return 0.10777833651710979;  // std dev = 1.438, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | then if ( title(J, I), venue(J, A) )
%   | | then return 0.011628227427260112;  // std dev = 0.317, 93.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=17 */
%   | | else return 0.07899619983842311;  // std dev = 0.416, 15.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=4 */
%   | else return 0.36150415767140354;  // std dev = 0.419, 19.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=12 */


Results
   AUC ROC   = 0.864869
   AUC PR    = 0.761753
   CLL	      = -0.571652
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.004926
   F1        = 0.009804


Total learning time: 86.14634776115417 seconds
Total inference time: 15.893 seconds
AUC ROC: 0.864869


Results scoring model
   AUC ROC   = 0.933479
   AUC PR    = 0.727344
   CLL	      = -0.426286
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.003442
   F1        = 0.006861


Total scoring time: 2.325 seconds
Refined model CLL: -0.426286


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.864869
   AUC PR    = 0.761753
   CLL	      = -0.571652
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.004926
   F1        = 0.009804


Total learning time: 133.48534045600888 seconds
Total inference time: 15.893 seconds
AUC ROC: 0.864869
Total revision time: 133.48534045600888
Best scored revision CLL: -0.426286


Dataset: 13_twitter_cora, Fold: 3, Type: Transfer (trRDN-B), Time: 00:55:40
{'AUC ROC': 0.864869, 'AUC PR': 0.761753, 'CLL': -0.571652, 'Precision': [1.0, 0.5], 'Recall': 0.004926, 'F1': 0.009804, 'Learning time': 133.48534045600888, 'Inference time': 15.893, 'parameter': {'AUC ROC': 0.562781, 'AUC PR': 0.506337, 'CLL': -0.703662, 'Precision': [0.55, 0.5], 'Recall': 0.027094, 'F1': 0.051643, 'Learning time': 43.659992694854736, 'Inference time': 5.077}}


Starting fold 4

Target train facts examples: 8129
Target train pos examples: 747
Target train neg examples: 1068

Target test facts examples: 34429
Target test pos  examples: 2270
Target test neg examples: 3954

******************************************
Performing Parameter Learning
******************************************
Refine
0;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
0;true;follows(A, D).;false;false
0;false;follows(A, E), recursion_accounttype(E, B).;true;true
0;false,true;follows(A, F), follows(F, A).;false;true
0;false,true,false;follows(A, G), follows(G, E).;false;false
0;false,false;follows(H, A).;true;true
0;false,false,true;follows(I, H), follows(I, A).;false;false
0;false,false,false;follows(A, J), follows(J, K).;false;false
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;true;follows(A, C), tweets(A, D).;false;false
1;false;follows(A, E), recursion_accounttype(E, B).;true;true
1;false,true;tweets(A, F), tweets(E, F).;false;true
1;false,true,false;follows(G, A), follows(E, H).;false;false
1;false,false;follows(I, A).;true;true
1;false,false,true;follows(I, J), recursion_accounttype(J, B).;false;false
1;false,false,false;tweets(A, K).;false;false
2;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;true;follows(C, D), follows(D, A).;false;false
2;false;follows(E, A).;true;true
2;false,true;follows(F, E), follows(F, A).;false;true
2;false,true,false;follows(E, G), recursion_accounttype(G, B).;false;false
2;false,false;follows(A, H), follows(H, I).;true;true
2;false,false,true;recursion_accounttype(I, B).;false;false
2;false,false,false;follows(A, J).;false;false
3;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
3;true;tweets(A, D), tweets(C, D).;false;false
3;false;follows(E, A).;true;true
3;false,true;follows(F, E), recursion_accounttype(F, B).;true;false
3;false,true,true;follows(A, G), recursion_accounttype(G, B).;false;false
3;false,false;follows(A, H), recursion_accounttype(H, B).;true;true
3;false,false,true;follows(A, I), follows(I, H).;false;false
3;false,false,false;tweets(A, J), follows(A, K).;false;false
4;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
4;true;follows(A, D), follows(D, C).;true;false
4;true,true;follows(D, A).;false;true
4;true,true,false;tweets(A, E).;false;false
4;false;follows(F, A).;false;true
4;false,false;follows(A, G), recursion_accounttype(G, B).;true;true
4;false,false,true;follows(G, H), follows(H, G).;false;false
4;false,false,false;follows(A, I), follows(I, J).;false;false
5;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
5;true;follows(D, A), tweets(D, E).;true;true
5;true,true;recursion_accounttype(D, B).;false;false
5;true,false;follows(C, F), follows(F, C).;true;false
5;true,false,true;tweets(C, G), recursion_accounttype(F, B).;false;false
5;false;follows(A, H), follows(H, A).;false;true
5;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
5;false,false,false;tweets(A, J), follows(K, A).;false;false
6;;accounttype(A, B) :- follows(A, C).;true;true
6;true;follows(D, C), recursion_accounttype(D, B).;true;false
6;true,true;recursion_accounttype(C, B).;true;true
6;true,true,true;follows(E, A), follows(E, D).;false;false
6;true,true,false;follows(F, A), recursion_accounttype(F, B).;false;false
6;false;follows(G, A), recursion_accounttype(G, B).;false;true
6;false,false;follows(H, A).;false;true
6;false,false,false;tweets(A, I).;false;false
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;tweets(C, D), follows(A, C).;false;false
7;false;follows(E, A).;true;true
7;false,true;follows(E, F), recursion_accounttype(F, B).;true;false
7;false,true,true;follows(F, E), follows(A, F).;false;false
7;false,false;follows(A, G), recursion_accounttype(G, B).;true;true
7;false,false,true;tweets(A, H).;false;false
7;false,false,false;follows(A, I).;false;false
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;true;follows(C, D), recursion_accounttype(D, B).;false;true
8;true,false;follows(A, E), follows(E, A).;false;false
8;false;follows(F, A), follows(A, G).;true;true
8;false,true;follows(G, A), follows(G, F).;false;true
8;false,true,false;follows(H, F), recursion_accounttype(H, B).;false;false
8;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
8;false,false,false;follows(J, A).;false;false
9;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
9;true;follows(C, D).;true;false
9;true,true;follows(A, D).;true;true
9;true,true,true;follows(E, A), recursion_accounttype(E, B).;false;false
9;true,true,false;tweets(C, F), follows(D, C).;false;false
9;false;follows(A, G), follows(H, A).;false;true
9;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
9;false,false,false;follows(J, A).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.27854694504975613;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.2867203636709409;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.44905802600860323;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.44905802600860323;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.5724346493852266;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.1914822684328457;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.05814893509951237;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.05814893509951237;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.2411503606196619;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.24811816884741328;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.3851926776601658;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.3851926776601658;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.48767788391726297;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.16653882456488167;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.05092203251355405;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.05092203251355405;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.20289930723994204;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.20848477447886868;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.31518052304212246;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.31518052304212246;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.3912569620992536;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.1420942428155646;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.04434629760466855;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.04434629760466855;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.16640029396569495;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.17062637354018492;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.24804771389482108;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.24804771389482108;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.3005711547884894;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.11914890490746433;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.03842866223690456;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.03842866223690456;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.13360339271793026;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.13664585375352234;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.19020231164899937;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.19020231164899937;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.22629823971521876;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.0984134027840187;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.033154945921885746;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.033154945921885746;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.10551742939082928;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.10762034996184403;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.14379027326522745;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.14379027326522745;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.16984358676510128;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.08026654944252247;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.028495105925721097;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.028495105925721097;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.08232251291348108;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.08372807955323855;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.10803450809035726;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.10803450809035726;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.12813320688246752;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.06479591611329234;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.024408230135271918;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.024408230135271918;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.06366213733661014;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.06457405393631681;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.08103386685025628;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.08103386685025628;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.09743184803714998;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.05187916934404051;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.02084688910874009;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.02084688910874009;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.048923799915716965;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.049497783225195;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.0608105509549485;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.0608105509549485;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.07468131696953094;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.04126932998424623;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.017760671541598414;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.017760671541598414;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.03743104240908369;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.03777940363354095;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.045695325992495844;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.045695325992495844;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.057651940521137104;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.03266374873483021;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.015098879183171418;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.015098879183171418;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */


Results
   AUC ROC   = 0.564202
   AUC PR    = 0.422227
   CLL	      = -0.642391
   Precision = 0.65625 at threshold = 0.5
   Recall    = 0.037004
   F1        = 0.070058


Total learning time: 92.49497413635254 seconds
Total inference time: 7.33 seconds
AUC ROC: 0.564202


Results scoring model
   AUC ROC   = 0.538289
   AUC PR    = 0.448931
   CLL	      = -0.670355
   Precision = 0.607843 at threshold = 0.5
   Recall    = 0.041499
   F1        = 0.077694


Total scoring time: 1.266 seconds
Parameter learned model CLL: -0.670355


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(B, G)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)'}, {'true,true': [0.494, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(A, G)', 'true,false,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)'}, {'true,true': [0.494, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(B, G)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)'}, {'true,true': [0.494, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(B, G)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)'}, {'true,true': [0.494, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(A, G)', 'true,false,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(A, L)'}, {'true,true': [0.494, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(B, G)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)'}, {'true,true': [0.494, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(B, G)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)'}, {'true,true': [0.494, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(B, G)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)'}, {'true,true': [0.494, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(B, G)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)'}, {'true,true': [0.494, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(B, G)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)'}, {'true,true': [0.494, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}]]
[{'': [0.24455361249545102, 0.17089843750000108], 'true': [0.24366352318011741, 0.24803717352988336], 'true,false': [0.25000000000000133, 0.2354340071343634], 'true,false,true': [0.24489795918367302, 0.2417355371900822], 'true,false,false': [0.2417355371900822, 0.20408163265306106], 'false': [0.17864514918371124, 0.15999999999999948], 'false,true': [0.22222222222222232, 0.15999999999999948]}, {'': [0.2442396583862774, 0.17036542604714275], 'true': [0.24366352318012574, 0.24554974033866322], 'true,false': [0.24813620683257942, 0.2345699639132993], 'true,false,true': [0.244897959183673, 0.2417355371900833], 'true,false,false': [0.2417355371900833, 0.20408163265306115], 'false': [0.17782577785291803, 0.1600000000000007], 'false,true': [0.22222222222222207, 0.1600000000000007]}, {'': [0.24393157221315034, 0.16990467702453835], 'true': [0.2436635231801326, 0.2431019584682026], 'true,false': [0.24631150685892014, 0.2337064665173659], 'true,false,true': [0.24489795918367316, 0.24173553719008264], 'true,false,false': [0.24173553719008264, 0.20408163265306115], 'false': [0.1771174918718374, 0.15999999999999953], 'false,true': [0.22222222222222218, 0.15999999999999953]}, {'': [0.24371075047936072, 0.16953742675793848], 'true': [0.24366352318009946, 0.24136967032829026], 'true,false': [0.24498343086187796, 0.23315182613521265], 'true,false,true': [0.24489795918367355, 0.24173553719008264], 'true,false,false': [0.24173553719008264, 0.2040816326530612], 'false': [0.17655293676131073, 0.15999999999999967], 'false,true': [0.2222222222222222, 0.15999999999999967]}, {'': [0.24358519092549574, 0.16926465814576508], 'true': [0.2436635231801065, 0.24040290855188662], 'true,false': [0.2442132411930144, 0.2328852475902263], 'true,false,true': [0.24489795918367332, 0.2417355371900829], 'true,false,false': [0.2417355371900829, 0.20408163265306128], 'false': [0.17613362348097325, 0.15999999999999995], 'false,true': [0.22222222222222218, 0.15999999999999995]}, {'': [0.2435232438971303, 0.16907391107668154], 'true': [0.2436635231801034, 0.23993332131915626], 'true,false': [0.24382884959637013, 0.23277095782172405], 'true,false,true': [0.2448979591836737, 0.24173553719008273], 'true,false,false': [0.24173553719008273, 0.2040816326530612], 'false': [0.17584039773694396, 0.1599999999999999], 'false,true': [0.22222222222222215, 0.1599999999999999]}, {'': [0.24349468828679002, 0.16894712567466702], 'true': [0.24366352318011533, 0.2397184616663662], 'true,false': [0.24365206723466534, 0.2327206345310192], 'true,false,true': [0.24489795918367374, 0.24173553719008273], 'true,false,false': [0.24173553719008273, 0.20408163265306126], 'false': [0.17564549700260335, 0.16000000000000006], 'false,true': [0.22222222222222227, 0.16000000000000006]}, {'': [0.24348173271512655, 0.16886637846587363], 'true': [0.2436635231801038, 0.23962063189587657], 'true,false': [0.24357324953519552, 0.23269590225807743], 'true,false,true': [0.24489795918367335, 0.2417355371900827], 'true,false,false': [0.2417355371900827, 0.2040816326530612], 'false': [0.1755213684354357, 0.16000000000000014], 'false,true': [0.2222222222222222, 0.16000000000000014]}, {'': [0.24347574793721724, 0.16881678838519856], 'true': [0.24366352318010848, 0.23957464981292645], 'true,false': [0.24353802746155118, 0.23268189473355322], 'true,false,true': [0.2448979591836737, 0.24173553719008273], 'true,false,false': [0.24173553719008273, 0.20408163265306123], 'false': [0.1754451361327745, 0.16000000000000014], 'false,true': [0.22222222222222213, 0.16000000000000014]}, {'': [0.2434728729946759, 0.16878728508251156], 'true': [0.24366352318011011, 0.2395518011476831], 'true,false': [0.24352193338061537, 0.23267284196553628], 'true,false,true': [0.24489795918367346, 0.24173553719008262], 'true,false,false': [0.24173553719008262, 0.2040816326530612], 'false': [0.17539978220978475, 0.16000000000000011], 'false,true': [0.22222222222222202, 0.16000000000000011]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,false;haswordvenue(A, E), haswordtitle(F, E).;true;true
0;true,false,true;haswordtitle(F, G), haswordvenue(B, G).;true;true
0;true,false,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
0;false;haswordvenue(A, J), haswordtitle(K, J).;true;true
0;false,true;haswordtitle(K, L), haswordvenue(B, L).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,false;haswordvenue(B, E), haswordtitle(F, E).;true;true
1;true,false,true;haswordtitle(F, G), haswordvenue(A, G).;true;true
1;true,false,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
1;false;haswordvenue(A, J), haswordtitle(K, J).;true;true
1;false,true;haswordtitle(K, L), haswordvenue(B, L).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,false;haswordvenue(A, E), haswordtitle(F, E).;true;true
2;true,false,true;haswordtitle(F, G), haswordvenue(B, G).;true;true
2;true,false,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
2;false;haswordvenue(A, J), haswordtitle(K, J).;true;true
2;false,true;haswordtitle(K, L), haswordvenue(B, L).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,false;haswordvenue(A, E), haswordtitle(F, E).;true;true
3;true,false,true;haswordtitle(F, G), haswordvenue(B, G).;true;true
3;true,false,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
3;false;haswordvenue(A, J), haswordtitle(K, J).;true;true
3;false,true;haswordtitle(K, L), haswordvenue(B, L).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,false;haswordvenue(B, E), haswordtitle(F, E).;true;true
4;true,false,true;haswordtitle(F, G), haswordvenue(A, G).;true;true
4;true,false,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
4;false;haswordvenue(B, J), haswordtitle(K, J).;true;true
4;false,true;haswordtitle(K, L), haswordvenue(A, L).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,false;haswordvenue(A, E), haswordtitle(F, E).;true;true
5;true,false,true;haswordtitle(F, G), haswordvenue(B, G).;true;true
5;true,false,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;false;haswordvenue(A, J), haswordtitle(K, J).;true;true
5;false,true;haswordtitle(K, L), haswordvenue(B, L).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,false;haswordvenue(A, E), haswordtitle(F, E).;true;true
6;true,false,true;haswordtitle(F, G), haswordvenue(B, G).;true;true
6;true,false,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
6;false;haswordvenue(A, J), haswordtitle(K, J).;true;true
6;false,true;haswordtitle(K, L), haswordvenue(B, L).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,false;haswordvenue(A, E), haswordtitle(F, E).;true;true
7;true,false,true;haswordtitle(F, G), haswordvenue(B, G).;true;true
7;true,false,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
7;false;haswordvenue(A, J), haswordtitle(K, J).;true;true
7;false,true;haswordtitle(K, L), haswordvenue(B, L).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,false;haswordvenue(A, E), haswordtitle(F, E).;true;true
8;true,false,true;haswordtitle(F, G), haswordvenue(B, G).;true;true
8;true,false,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
8;false;haswordvenue(A, J), haswordtitle(K, J).;true;true
8;false,true;haswordtitle(K, L), haswordvenue(B, L).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,false;haswordvenue(A, E), haswordtitle(F, E).;true;true
9;true,false,true;haswordtitle(F, G), haswordvenue(B, G).;true;true
9;true,false,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
9;false;haswordvenue(A, J), haswordtitle(K, J).;true;true
9;false,true;haswordtitle(K, L), haswordvenue(B, L).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.27854694504975613;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.2867203636709409;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.44905802600860323;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.44905802600860323;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.5724346493852266;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.1914822684328457;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.05814893509951237;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.05814893509951237;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.2411503606196619;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.24811816884741328;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.3851926776601658;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.3851926776601658;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.48767788391726297;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.16653882456488167;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.05092203251355405;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.05092203251355405;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.20289930723994204;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.20848477447886868;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.31518052304212246;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.31518052304212246;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.3912569620992536;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.1420942428155646;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.04434629760466855;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.04434629760466855;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.7460022840154411;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.25399771598455895;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.546002284015441;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.16413830416657968;  // std dev = 0.493, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.2046917632962252;  // std dev = 3.500, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.2607257858346721;  // std dev = 2.600, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(B, M) )
%   | | then return 0.11914890490746433;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.03842866223690456;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.03842866223690456;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.13348748687046993;  // std dev = 0.493, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.12955478951205684;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.18715399206068548;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.20056760106043933;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.23624775363596132;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.0984134027840187;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.033154945921885746;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.033154945921885746;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.10543933180075872;  // std dev = 0.492, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.1017133544421929;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.14140856956772122;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.15193074277694943;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.17726781428136912;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.08026654944252247;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.028495105925721097;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.028495105925721097;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.08227505633229092;  // std dev = 0.492, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.07895298131554315;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.1062244048776748;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.11423680926111243;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.1335946671161097;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.06479591611329234;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.024408230135271918;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.024408230135271918;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.06363742491621589;  // std dev = 0.492, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.06079405669607115;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.07967498712038269;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.08569474417838378;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.10146002868489164;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.05187916934404051;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.02084688910874009;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.02084688910874009;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04891479954567068;  // std dev = 0.492, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.04654826898560819;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.05979460598310749;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.06429604363362008;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.07767919373325634;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.04126932998424623;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.017760671541598414;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.017760671541598414;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.037432174186823985;  // std dev = 0.492, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.03550040957321051;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.04493591346673767;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.04830045102747285;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.05990652354731872;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.03266374873483021;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.015098879183171418;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.015098879183171418;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */


Results
   AUC ROC   = 0.569277
   AUC PR    = 0.430645
   CLL	      = -0.641285
   Precision = 0.721212 at threshold = 0.5
   Recall    = 0.052423
   F1        = 0.097741


Total learning time: 89.33808159828186 seconds
Total inference time: 7.481 seconds
AUC ROC: 0.569277


Results scoring model
   AUC ROC   = 0.548071
   AUC PR    = 0.461521
   CLL	      = -0.668107
   Precision = 0.661017 at threshold = 0.5
   Recall    = 0.052209
   F1        = 0.096774


Total scoring time: 1.264 seconds
Refined model CLL: -0.668107


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.569277
   AUC PR    = 0.430645
   CLL	      = -0.641285
   Precision = 0.721212 at threshold = 0.5
   Recall    = 0.052423
   F1        = 0.097741


Total learning time: 184.36305573463443 seconds
Total inference time: 7.481 seconds
AUC ROC: 0.569277
Total revision time: 184.36305573463443
Best scored revision CLL: -0.668107


Dataset: 13_twitter_cora, Fold: 4, Type: Transfer (trRDN-B), Time: 00:59:00
{'AUC ROC': 0.569277, 'AUC PR': 0.430645, 'CLL': -0.641285, 'Precision': [0.721212, 0.5], 'Recall': 0.052423, 'F1': 0.097741, 'Learning time': 184.36305573463443, 'Inference time': 7.481, 'parameter': {'AUC ROC': 0.564202, 'AUC PR': 0.422227, 'CLL': -0.642391, 'Precision': [0.65625, 0.5], 'Recall': 0.037004, 'F1': 0.070058, 'Learning time': 92.49497413635254, 'Inference time': 7.33}}


Starting fold 5

Target train facts examples: 8644
Target train pos examples: 550
Target train neg examples: 500

Target test facts examples: 33914
Target test pos  examples: 2467
Target test neg examples: 4522

******************************************
Performing Parameter Learning
******************************************
Refine
0;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
0;true;follows(A, D).;false;false
0;false;follows(A, E), recursion_accounttype(E, B).;true;true
0;false,true;follows(A, F), follows(F, A).;false;true
0;false,true,false;follows(A, G), follows(G, E).;false;false
0;false,false;follows(H, A).;true;true
0;false,false,true;follows(I, H), follows(I, A).;false;false
0;false,false,false;follows(A, J), follows(J, K).;false;false
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;true;follows(A, C), tweets(A, D).;false;false
1;false;follows(A, E), recursion_accounttype(E, B).;true;true
1;false,true;tweets(A, F), tweets(E, F).;false;true
1;false,true,false;follows(G, A), follows(E, H).;false;false
1;false,false;follows(I, A).;true;true
1;false,false,true;follows(I, J), recursion_accounttype(J, B).;false;false
1;false,false,false;tweets(A, K).;false;false
2;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;true;follows(C, D), follows(D, A).;false;false
2;false;follows(E, A).;true;true
2;false,true;follows(F, E), follows(F, A).;false;true
2;false,true,false;follows(E, G), recursion_accounttype(G, B).;false;false
2;false,false;follows(A, H), follows(H, I).;true;true
2;false,false,true;recursion_accounttype(I, B).;false;false
2;false,false,false;follows(A, J).;false;false
3;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
3;true;tweets(A, D), tweets(C, D).;false;false
3;false;follows(E, A).;true;true
3;false,true;follows(F, E), recursion_accounttype(F, B).;true;false
3;false,true,true;follows(A, G), recursion_accounttype(G, B).;false;false
3;false,false;follows(A, H), recursion_accounttype(H, B).;true;true
3;false,false,true;follows(A, I), follows(I, H).;false;false
3;false,false,false;tweets(A, J), follows(A, K).;false;false
4;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
4;true;follows(A, D), follows(D, C).;true;false
4;true,true;follows(D, A).;false;true
4;true,true,false;tweets(A, E).;false;false
4;false;follows(F, A).;false;true
4;false,false;follows(A, G), recursion_accounttype(G, B).;true;true
4;false,false,true;follows(G, H), follows(H, G).;false;false
4;false,false,false;follows(A, I), follows(I, J).;false;false
5;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
5;true;follows(D, A), tweets(D, E).;true;true
5;true,true;recursion_accounttype(D, B).;false;false
5;true,false;follows(C, F), follows(F, C).;true;false
5;true,false,true;tweets(C, G), recursion_accounttype(F, B).;false;false
5;false;follows(A, H), follows(H, A).;false;true
5;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
5;false,false,false;tweets(A, J), follows(K, A).;false;false
6;;accounttype(A, B) :- follows(A, C).;true;true
6;true;follows(D, C), recursion_accounttype(D, B).;true;false
6;true,true;recursion_accounttype(C, B).;true;true
6;true,true,true;follows(E, A), follows(E, D).;false;false
6;true,true,false;follows(F, A), recursion_accounttype(F, B).;false;false
6;false;follows(G, A), recursion_accounttype(G, B).;false;true
6;false,false;follows(H, A).;false;true
6;false,false,false;tweets(A, I).;false;false
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;tweets(C, D), follows(A, C).;false;false
7;false;follows(E, A).;true;true
7;false,true;follows(E, F), recursion_accounttype(F, B).;true;false
7;false,true,true;follows(F, E), follows(A, F).;false;false
7;false,false;follows(A, G), recursion_accounttype(G, B).;true;true
7;false,false,true;tweets(A, H).;false;false
7;false,false,false;follows(A, I).;false;false
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;true;follows(C, D), recursion_accounttype(D, B).;false;true
8;true,false;follows(A, E), follows(E, A).;false;false
8;false;follows(F, A), follows(A, G).;true;true
8;false,true;follows(G, A), follows(G, F).;false;true
8;false,true,false;follows(H, F), recursion_accounttype(H, B).;false;false
8;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
8;false,false,false;follows(J, A).;false;false
9;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
9;true;follows(C, D).;true;false
9;true,true;follows(A, D).;true;true
9;true,true,true;follows(E, A), recursion_accounttype(E, B).;false;false
9;true,true,false;tweets(C, F), follows(D, C).;false;false
9;false;follows(A, G), follows(H, A).;false;true
9;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
9;false,false,false;follows(J, A).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.443242102801371;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else if ( haswordauthor(E, C) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.7100007869513637;  // std dev = 0.355, 27.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=23 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, B) )
%   | | then if ( samebib(H, I), venue(I, A) )
%   | | | then return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.13087620782678508;  // std dev = 0.445, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then return 0.16249676118646889;  // std dev = 0.460, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.04458961306561406;  // std dev = 2.992, 59.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return 0.05814893509951237;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.3803254334818479;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.6156192300372834;  // std dev = 0.334, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, B) )
%   | | then if ( author(H, F), venue(H, A) )
%   | | | then return 0.33932694063810126;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.16173907151294492;  // std dev = 0.004, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.14091180784109553;  // std dev = 0.457, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then return 0.1912873480467316;  // std dev = 1.246, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.13093264915071987;  // std dev = 2.796, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.03765285941803126;  // std dev = 2.990, 59.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return 0.05244716084236053;  // std dev = 2.967, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.6681767566496382;  // std dev = 0.071, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(F, D) )
%   | | | then return 0.2449182844345499;  // std dev = 2.596, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.046512703166447865;  // std dev = 1.986, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(I, G) )
%   | | | then return 0.2648613043775699;  // std dev = 2.542, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   | | | else return -0.03663933225699043;  // std dev = 1.972, 23.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
%   | | else return 0.34090436994201984;  // std dev = 0.485, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | then if ( author(L, K), venue(L, A) )
%   | | then return 0.2096054279418011;  // std dev = 0.485, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.09197903953691408;  // std dev = 0.440, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.06266324891860893;  // std dev = 0.413, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.24324281231576908;  // std dev = 0.489, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.419025435005121;  // std dev = 0.329, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, B) )
%   | | then if ( samebib(G, H), venue(H, A) )
%   | | | then return 0.5093228391214709;  // std dev = 0.895, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.1555014446765011;  // std dev = 0.002, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(I, F), venue(I, A) )
%   | | | then return -0.18811236215489605;  // std dev = 0.005, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.10425844261649615;  // std dev = 2.904, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, B) )
%   | | | then return 0.0039503987642624805;  // std dev = 0.836, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.11763695816683746;  // std dev = 2.977, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.030708528663864747;  // std dev = 0.395, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.1875566749685239;  // std dev = 0.488, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else return 0.34545892936133893;  // std dev = 0.289, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, B) )
%   | | then if ( samebib(H, I), venue(I, A) )
%   | | | then return 0.3945441054879205;  // std dev = 0.896, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.13615633193143648;  // std dev = 0.002, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.07085017310504527;  // std dev = 0.442, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( haswordtitle(L, J) )
%   | | | then return -0.021597457520172208;  // std dev = 0.862, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.1012354643646181;  // std dev = 2.965, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return 0.020141848874282067;  // std dev = 2.990, 59.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return 0.03330103845287566;  // std dev = 2.967, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.3841206696078684;  // std dev = 0.105, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.09099917402463222;  // std dev = 2.582, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.14730334821609523;  // std dev = 1.919, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( haswordtitle(J, H) )
%   | | | then return 0.11307875837014508;  // std dev = 2.542, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   | | | else return -0.1397200534005424;  // std dev = 1.870, 23.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
%   | | else return 0.16356572309480266;  // std dev = 0.484, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | then if ( author(M, L), venue(M, B) )
%   | | then return 0.033455317978718174;  // std dev = 0.408, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0.06749984763193885;  // std dev = 0.449, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | else return 0.03781244314902915;  // std dev = 0.408, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then return 0.10510971871937103;  // std dev = 0.485, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else return 0.2611417103686106;  // std dev = 0.288, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, A) )
%   | | then return 0.0075478899384412365;  // std dev = 0.277, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( author(I, G), venue(I, B) )
%   | | | then return 0.041752630783262704;  // std dev = 0.872, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.0693799958555796;  // std dev = 2.904, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | | then return -0.1813129694090558;  // std dev = 0.067, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.08366808433964301;  // std dev = 4.086, 83.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=24 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.042990247815693765;  // std dev = 3.042, 54.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=12 */
%   | | | else return -0.20946541251506856;  // std dev = 0.112, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.27430359980774266;  // std dev = 0.095, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(F, C) )
%   | | | then return -0.07706922124693799;  // std dev = 3.067, 46.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=16 */
%   | | | else return 0.24011068843657757;  // std dev = 0.886, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then if ( author(I, H), venue(I, B) )
%   | | | then return 0.03063113803463058;  // std dev = 2.733, 36.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
%   | | | else return -0.20257836427436954;  // std dev = 1.543, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | else return 0.09623865516963699;  // std dev = 0.484, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return -0.16694710105368366;  // std dev = 0.117, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else return 0.07259045734308676;  // std dev = 0.441, 91.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=26 */
%   | else return 0.020569609427534018;  // std dev = 0.411, 109.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=26 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(A, D), haswordauthor(F, C) )
%   | | then return 0.291919901026678;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.05675857058122714;  // std dev = 0.484, 809.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=473 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then return 0.14758619788182054;  // std dev = 0.403, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else return 0.24782327497659387;  // std dev = 0.091, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.14513761122990695;  // std dev = 0.105, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else return 0.06072667231563411;  // std dev = 0.436, 91.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=26 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then if ( haswordauthor(N, L) )
%   | | | then return 0.12465447855393141;  // std dev = 1.060, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.056752903512732884;  // std dev = 4.063, 86.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=24 */
%   | | else return -0.20337940130216803;  // std dev = 0.160, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(F, D) )
%   | | then if ( author(G, F), title(G, E) )
%   | | | then return 0.24016730827722169;  // std dev = 1.886, 20.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=15 */
%   | | | else return -0.2169693702352773;  // std dev = 1.108, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | else return 0.04319079486508925;  // std dev = 0.484, 783.000 (wgt'ed) examples reached here.  /* #neg=323 #pos=460 */
%   | else return 0.16384973784960405;  // std dev = 0.287, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, A) )
%   | | then if ( samebib(J, K), venue(K, B) )
%   | | | then return 0.48908337802218166;  // std dev = 0.886, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.29213936624839065;  // std dev = 0.100, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(L, I), venue(L, B) )
%   | | | then return -0.2019022901942348;  // std dev = 0.009, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.03484315212049593;  // std dev = 2.765, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else return 0.015009902678324732;  // std dev = 0.402, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */


Results
   AUC ROC   = 0.555107
   AUC PR    = 0.404687
   CLL	      = -0.704626
   Precision = 0.37679 at threshold = 0.5
   Recall    = 0.927848
   F1        = 0.53594


Total learning time: 53.41823935508728 seconds
Total inference time: 19.696 seconds
AUC ROC: 0.555107


Results scoring model
   AUC ROC   = 0.671389
   AUC PR    = 0.664345
   CLL	      = -0.621667
   Precision = 0.629389 at threshold = 0.5
   Recall    = 0.88
   F1        = 0.733889


Total scoring time: 1.257 seconds
Parameter learned model CLL: -0.621667


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordauthor(E, C)', 'false': 'haswordvenue(A, F), haswordauthor(G, F)', 'false,true': 'author(H, G), venue(H, B)', 'false,true,true': 'samebib(H, I), venue(I, A)', 'false,false': 'haswordvenue(B, J), haswordauthor(K, J)', 'false,false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true': [0.493, 334, 471], 'true,false,true': [0.0, 0, 4], 'true,false,false': [0.355, 4, 23], 'false,true,true,true': [0.894, 1, 4], 'false,true,true,false': [0.0, 5, 0], 'false,true,false': [0.445, 32, 12], 'false,false,true': [0.46, 32, 14], 'false,false,false,true': [2.992, 48, 11], 'false,false,false,false': [2.966, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'false': 'haswordvenue(B, E), haswordauthor(F, E)', 'false,true': 'author(G, F), venue(G, B)', 'false,true,true': 'author(H, F), venue(H, A)', 'false,false': 'haswordvenue(A, I), haswordauthor(J, I)', 'false,false,true': 'author(K, J), venue(K, B)', 'false,false,false': 'haswordvenue(B, L), haswordtitle(M, L)'}, {'true,true': [0.493, 334, 471], 'true,false': [0.334, 4, 27], 'false,true,true,true': [1.0, 2, 2], 'false,true,true,false': [0.004, 4, 0], 'false,true,false': [0.457, 32, 14], 'false,false,true,true': [1.246, 5, 3], 'false,false,true,false': [2.796, 27, 11], 'false,false,false,true': [2.99, 48, 11], 'false,false,false,false': [2.967, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordvenue(A, D)', 'true,true,false': 'haswordtitle(F, D)', 'true,false': 'haswordvenue(A, G), haswordauthor(H, G)', 'true,false,true': 'haswordtitle(I, G)', 'false': 'haswordvenue(B, J), haswordauthor(K, J)', 'false,true': 'author(L, K), venue(L, A)'}, {'true,true,true': [0.071, 0, 10], 'true,true,false,true': [2.596, 13, 14], 'true,true,false,false': [1.986, 18, 6], 'true,false,true,true': [2.542, 12, 14], 'true,false,true,false': [1.972, 17, 6], 'true,false,false': [0.485, 278, 448], 'false,true,true': [0.485, 6, 4], 'false,true,false': [0.44, 32, 12], 'false,false': [0.413, 124, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'false': 'haswordvenue(A, E), haswordauthor(F, E)', 'false,true': 'author(G, F), venue(G, B)', 'false,true,true': 'samebib(G, H), venue(H, A)', 'false,true,false': 'author(I, F), venue(I, A)', 'false,false': 'haswordvenue(B, J), haswordauthor(K, J)', 'false,false,true': 'author(L, K), venue(L, B)'}, {'true,true': [0.489, 334, 471], 'true,false': [0.329, 4, 27], 'false,true,true,true': [0.895, 1, 4], 'false,true,true,false': [0.002, 5, 0], 'false,true,false,true': [0.005, 3, 0], 'false,true,false,false': [2.904, 29, 12], 'false,false,true,true': [0.836, 4, 1], 'false,false,true,false': [2.977, 28, 13], 'false,false,false': [0.395, 92, 22]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordtitle(E, D)', 'false': 'haswordvenue(A, F), haswordauthor(G, F)', 'false,true': 'author(H, G), venue(H, B)', 'false,true,true': 'samebib(H, I), venue(I, A)', 'false,false': 'haswordvenue(B, J), haswordauthor(K, J)', 'false,false,true': 'haswordtitle(L, J)', 'false,false,false': 'haswordvenue(A, M), haswordtitle(N, M)'}, {'true,true': [0.488, 336, 479], 'true,false': [0.289, 2, 19], 'false,true,true,true': [0.896, 1, 4], 'false,true,true,false': [0.002, 5, 0], 'false,true,false': [0.442, 32, 12], 'false,false,true,true': [0.862, 4, 1], 'false,false,true,false': [2.965, 28, 13], 'false,false,false,true': [2.99, 48, 11], 'false,false,false,false': [2.967, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordauthor(F, C)', 'true,true,false': 'haswordtitle(G, D)', 'true,false': 'haswordvenue(B, H), haswordauthor(I, H)', 'true,false,true': 'haswordtitle(J, H)', 'false': 'haswordvenue(B, K), haswordauthor(L, K)', 'false,true': 'author(M, L), venue(M, B)'}, {'true,true,true': [0.105, 0, 10], 'true,true,false,true': [2.582, 13, 14], 'true,true,false,false': [1.919, 18, 6], 'true,false,true,true': [2.542, 12, 14], 'true,false,true,false': [1.87, 17, 6], 'true,false,false': [0.484, 278, 448], 'false,true,true': [0.408, 6, 2], 'false,true,false': [0.449, 32, 14], 'false,false': [0.408, 124, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordtitle(E, D)', 'false': 'haswordvenue(A, F), haswordauthor(G, F)', 'false,true': 'author(H, G), venue(H, A)', 'false,true,false': 'author(I, G), venue(I, B)', 'false,false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,false,true': 'haswordtitle(K, L), haswordvenue(B, L)', 'false,false,false': 'haswordvenue(B, M), haswordtitle(N, M)'}, {'true,true': [0.485, 336, 479], 'true,false': [0.288, 2, 19], 'false,true,true': [0.277, 6, 2], 'false,true,false,true': [0.872, 3, 2], 'false,true,false,false': [2.904, 29, 12], 'false,false,true,true': [0.067, 12, 0], 'false,false,true,false': [4.086, 59, 24], 'false,false,false,true': [3.042, 42, 12], 'false,false,false,false': [0.112, 11, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordvenue(B, D)', 'true,true,false': 'haswordtitle(F, C)', 'true,false': 'haswordvenue(B, G), haswordauthor(H, G)', 'true,false,true': 'author(I, H), venue(I, B)', 'false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(A, L)'}, {'true,true,true': [0.095, 0, 10], 'true,true,false,true': [3.067, 30, 16], 'true,true,false,false': [0.886, 1, 4], 'true,false,true,true': [2.733, 20, 16], 'true,false,true,false': [1.543, 9, 4], 'true,false,false': [0.484, 278, 448], 'false,true,true': [0.117, 14, 0], 'false,true,false': [0.441, 65, 26], 'false,false': [0.411, 83, 26]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordtitle(E, D)', 'true,true': 'haswordvenue(A, D), haswordauthor(F, C)', 'true,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)', 'false,false': 'haswordvenue(B, L), haswordtitle(M, L)', 'false,false,true': 'haswordauthor(N, L)'}, {'true,true,true': [0.0, 0, 6], 'true,true,false': [0.484, 336, 473], 'true,false,true': [0.403, 2, 8], 'true,false,false': [0.091, 0, 11], 'false,true,true': [0.105, 14, 0], 'false,true,false': [0.436, 65, 26], 'false,false,true,true': [1.06, 3, 2], 'false,false,true,false': [4.063, 62, 24], 'false,false,false': [0.16, 18, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordtitle(E, D)', 'true,true': 'haswordauthor(F, D)', 'true,true,true': 'author(G, F), title(G, E)', 'false': 'haswordvenue(B, H), haswordauthor(I, H)', 'false,true': 'author(J, I), venue(J, A)', 'false,true,true': 'samebib(J, K), venue(K, B)', 'false,true,false': 'author(L, I), venue(L, B)'}, {'true,true,true,true': [1.886, 5, 15], 'true,true,true,false': [1.108, 8, 4], 'true,true,false': [0.484, 323, 460], 'true,false': [0.287, 2, 19], 'false,true,true,true': [0.886, 1, 4], 'false,true,true,false': [0.1, 5, 0], 'false,true,false,true': [0.009, 3, 0], 'false,true,false,false': [2.765, 29, 12], 'false,false': [0.402, 124, 36]}]]
[{'': [0.24084270048762138, 0.18394619617433927], 'true': [0.2427591528104568, 0.11238293444328941], 'false': [0.20850480109739317, 0.17437500000000122], 'false,true': [0.23999999999999985, 0.19834710743801603], 'false,true,true': [0.15999999999999986, -2.7755575615628915e-18], 'false,false': [0.21172022684309966, 0.15574022776238935], 'false,false,false': [0.15168055156564153, 0.15999999999999948], 'true,false': [0.0, 0.12620027434842318]}, {'': [0.2398692306698656, 0.18096645952280913], 'true': [0.24275915281046145, 0.11151424815199004], 'false': [0.20605228261609576, 0.17157281722592604], 'false,true': [0.1877707644699097, 0.2088292663036981], 'false,true,true': [0.25000454552762474, 3.4091457185372875e-06], 'false,false': [0.204182958949685, 0.15572936782372818], 'false,false,true': [0.19406915131982383, 0.20567867036011106], 'false,false,false': [0.15157277294947039, 0.16007498498138042]}, {'': [0.23893377761205825, 0.17946455925134697], 'true': [0.23671125494124493, 0.2379224535276209], 'true,false': [0.23387958908793788, 0.23520258901927504], 'true,true': [0.005084878212051525, 0.23064443346873317], 'true,false,true': [0.24852071005917167, 0.16909470604960952], 'true,true,false': [0.24965706447187935, 0.16429121271920402], 'false': [0.20331041801209693, 0.17075771830116798], 'false,true': [0.23485806342433796, 0.19357828244296907]}, {'': [0.23520756032721032, 0.1789713059410173], 'true': [0.2389387267173425, 0.10856385993556028], 'false': [0.19717929370265838, 0.17221226151082783], 'false,true': [0.19067316422374872, 0.19707049956346986], 'false,true,false': [8.068202395567861e-06, 0.20566147316618225], 'false,true,true': [0.1603494511844942, 1.2130992600722923e-06], 'false,false': [0.2091343159992252, 0.15571514050822205], 'false,false,true': [0.139777200664076, 0.21618764929741252]}, {'': [0.23444108170873687, 0.17602650078895957], 'true': [0.23770542990888177, 0.08344647104971474], 'false': [0.1877083961765769, 0.17172876010534113], 'false,true': [0.15061610311632262, 0.19550809446170242], 'false,false': [0.20873044375887811, 0.1557146228822891], 'false,false,true': [0.14851478582185645, 0.21443382464555388], 'false,false,false': [0.1515519312299781, 0.160090435640839], 'false,true,true': [0.16040975642874133, 9.726653553782106e-07]}, {'': [0.23404758974342482, 0.17421284463874948], 'true': [0.20586750586033636, 0.23542119617815288], 'true,false': [0.2191334734394169, 0.234711556720318], 'true,false,true': [0.24852071005917148, 0.15200315532521552], 'true,true': [0.01097987281141306, 0.21715637455330059], 'true,true,false': [0.24700607947780762, 0.15351117245695803], 'false': [0.1968206424204025, 0.16642946507055073], 'false,true': [0.16605845206406372, 0.20199888042128528]}, {'': [0.23166126363338735, 0.174040608795316], 'true': [0.23488520110383226, 0.08280736495500664], 'false': [0.1820891362860605, 0.17112993291892925], 'false,true': [0.07665559227085017, 0.19991268381674326], 'false,true,false': [0.1519725258880794, 0.20567608026792067], 'false,false': [0.1835504497212758, 0.15149665943985366], 'false,false,true': [0.000368705048906894, 0.20116529942528497], 'false,false,false': [0.17134056727111185, 0.0011329816986752768]}, {'': [0.23137865448243572, 0.1719760484860603], 'true': [0.19010646529096034, 0.23414075832516576], 'true,false': [0.21161358117648335, 0.23463370480137244], 'true,false,true': [0.20750136339640263, 0.18304370626817462], 'true,true': [0.00901839131097255, 0.20879799675473837], 'true,true,false': [0.20454916657785716, 0.15714718781508877], 'false': [0.1750539065532123, 0.16881325502423855], 'false,true': [0.0009716082419331172, 0.19418536635007655]}, {'': [0.2299199564517097, 0.17094419704984823], 'true': [0.23317560775198512, 0.08402236423165813], 'true,true': [0.0, 0.23449784665863807], 'false': [0.16993817196371622, 0.1717818507153088], 'false,false': [0.19398291199282602, 0.0014168874122112924], 'false,false,true': [0.2248592380800718, 0.19193444577205937], 'false,true': [0.0007819752959614243, 0.1903115217883314], 'true,false': [0.16211474225753106, 0.008244783001663687]}, {'': [0.22957593889758185, 0.1686615852656279], 'true': [0.2330124071185448, 0.08225039694840677], 'true,true': [0.19853526601609253, 0.23439580256775314], 'true,true,true': [0.1778964141021741, 0.10232463826339022], 'false': [0.18840556949050577, 0.1619119656609159], 'false,true': [0.23202403324986182, 0.17731388471972984], 'false,true,true': [0.15688972290748177, 0.0020038555094197942], 'false,true,false': [2.4451809419808363e-05, 0.18646480012769814]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,false;haswordauthor(E, C).;true;true
0;false;haswordvenue(A, F), haswordauthor(G, F).;true;true
0;false,true;author(H, G), venue(H, B).;true;true
0;false,true,true;samebib(H, I), venue(I, A).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;false;haswordvenue(B, E), haswordauthor(F, E).;true;true
1;false,true;author(G, F), venue(G, B).;true;true
1;false,true,true;author(H, F), venue(H, A).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;false;haswordvenue(A, E), haswordauthor(F, E).;true;true
3;false,true;author(G, F), venue(G, B).;true;true
3;false,true,true;samebib(G, H), venue(H, A).;true;true
3;false,true,false;author(I, F), venue(I, A).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;false;haswordvenue(A, F), haswordauthor(G, F).;true;true
4;false,true;author(H, G), venue(H, B).;true;true
4;false,true,true;samebib(H, I), venue(I, A).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;false;haswordvenue(A, F), haswordauthor(G, F).;true;true
6;false,false;haswordvenue(A, J), haswordtitle(K, J).;true;true
6;false,false,true;haswordtitle(K, L), haswordvenue(B, L).;true;true
6;false,false,false;haswordvenue(B, M), haswordtitle(N, M).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;false;haswordvenue(B, J), haswordtitle(K, J).;true;true
7;false,true;haswordtitle(K, L), haswordvenue(A, L).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordvenue(B, D), haswordtitle(E, D).;true;true
8;true,true;haswordvenue(A, D), haswordauthor(F, C).;true;true
8;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
8;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true
8;false,false;haswordvenue(B, L), haswordtitle(M, L).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;false;haswordvenue(B, H), haswordauthor(I, H).;true;true
9;false,true;author(J, I), venue(J, A).;true;true
9;false,true,true;samebib(J, K), venue(K, B).;true;true
9;false,true,false;author(L, I), venue(L, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.443242102801371;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.7291166770349955;  // std dev = 0.335, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, A) )
%   | | then if ( author(H, F), venue(H, B) )
%   | | | then return 0.3581489350995122;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.16249676118646889;  // std dev = 0.460, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( haswordtitle(K, I) )
%   | | | then return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.17522210583121967;  // std dev = 2.980, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.04458961306561406;  // std dev = 2.992, 59.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return 0.05814893509951237;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.3803254334818479;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.6157326050686436;  // std dev = 0.335, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, B) )
%   | | then if ( samebib(G, H), venue(H, A) )
%   | | | then return 0.6258134041158594;  // std dev = 0.882, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.16671450685702072;  // std dev = 0.054, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(I, F), venue(I, A) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.129877843165277;  // std dev = 2.913, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then return 0.14148224819528046;  // std dev = 0.460, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.03765285941803126;  // std dev = 2.990, 59.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return 0.05244716084236053;  // std dev = 2.967, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( haswordauthor(E, C) )
%   | | then return 0.7263997659160313;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.3088997659160284;  // std dev = 0.493, 800.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=466 */
%   | else return 0.48283090502633463;  // std dev = 0.335, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, B) )
%   | | then if ( samebib(H, I), venue(I, A) )
%   | | | then return 0.5173682729146571;  // std dev = 0.877, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.1449039260530655;  // std dev = 0.048, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.09613911016437178;  // std dev = 0.443, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, A) )
%   | | | then return 0.19644488012693542;  // std dev = 1.368, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.10543827749644069;  // std dev = 2.792, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.03904779566480573;  // std dev = 0.395, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.5664219440853223;  // std dev = 0.120, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( haswordauthor(G, D) )
%   | | | then return 0.17946898752815454;  // std dev = 2.596, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return 0.24544364357319307;  // std dev = 13.751, 781.000 (wgt'ed) examples reached here.  /* #neg=323 #pos=458 */
%   | else return 0.39784229978637214;  // std dev = 0.294, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, A) )
%   | | then if ( samebib(J, K), venue(K, B) )
%   | | | then return 0.5915294197526895;  // std dev = 0.903, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.20463215062128998;  // std dev = 0.021, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.07048084972572105;  // std dev = 0.436, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | then return 0.10097847997579024;  // std dev = 0.441, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.03389327906532621;  // std dev = 0.395, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.1884545441878224;  // std dev = 0.491, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else return 0.31391017694562756;  // std dev = 0.287, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, A) )
%   | | then if ( samebib(H, I), venue(I, B) )
%   | | | then return 0.47765912567488555;  // std dev = 0.907, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.1733435492317424;  // std dev = 0.019, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(J, G), venue(J, B) )
%   | | | then return -0.211065706945765;  // std dev = 0.005, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.07873071265196141;  // std dev = 2.849, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then return 0.014346948897263548;  // std dev = 0.378, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.10048400234156413;  // std dev = 4.052, 83.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=24 */
%   | | | else return -0.1869244558336537;  // std dev = 0.077, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.36450088139777603;  // std dev = 0.152, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(F, D) )
%   | | | then return 0.076662901660275;  // std dev = 2.596, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.23444429984548235;  // std dev = 1.873, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(I, G) )
%   | | | then return 0.11280850989548614;  // std dev = 2.542, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   | | | else return -0.22720273106034392;  // std dev = 1.859, 23.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
%   | | else return 0.17014959525485748;  // std dev = 0.484, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | then if ( author(L, K), venue(L, B) )
%   | | then return 0.10688560917063453;  // std dev = 0.377, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.0548000294577716;  // std dev = 0.430, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.036510265023168335;  // std dev = 0.408, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.28559040976971317;  // std dev = 0.136, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.057681039627338754;  // std dev = 2.596, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.17806099051716454;  // std dev = 1.871, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( haswordtitle(J, H) )
%   | | | then return 0.08502637652057302;  // std dev = 2.542, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   | | | else return -0.1725879517424593;  // std dev = 1.856, 23.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
%   | | else return 0.12799168978972297;  // std dev = 0.484, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | then if ( author(M, L), venue(M, A) )
%   | | then return 0.015476320768027046;  // std dev = 0.289, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0.05960831045912105;  // std dev = 0.439, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | else return 0.030945576089268782;  // std dev = 0.408, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.07784154308040118;  // std dev = 0.485, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.14397358910618477;  // std dev = 0.398, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.1460364290968684;  // std dev = 1.257, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.2786528198876162;  // std dev = 0.230, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.1883794875732108;  // std dev = 0.091, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( haswordauthor(L, I) )
%   | | | then return 0.10784676838197704;  // std dev = 0.738, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.07364827437154271;  // std dev = 4.062, 86.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=24 */
%   | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | then return 0.06445750363292484;  // std dev = 0.435, 91.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=26 */
%   | | else return -0.1986452954720958;  // std dev = 0.161, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then if ( author(F, D), venue(F, A) )
%   | | then return -0.4946379491528998;  // std dev = 1.49e-08, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0.19219430218762296;  // std dev = 0.387, 31.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=21 */
%   | else if ( author(G, D), venue(G, B) )
%   | | then return -0.20644133232589731;  // std dev = 0.307, 24.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=4 */
%   | | else if ( author(H, D), venue(H, A) )
%   | | | then return 0.058914633405311084;  // std dev = 0.915, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.08105376780228511;  // std dev = 2.937, 46.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=18 */
%   else if ( haswordvenue(A, I), haswordvenue(B, I) )
%   | then if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, A) )
%   | | | then return 0.015150927508717648;  // std dev = 2.736, 36.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
%   | | | else return -0.22741132119110988;  // std dev = 1.502, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | else return 0.07630294507154689;  // std dev = 0.484, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   | else return 0.019362768326183236;  // std dev = 0.403, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then return 0.043983406014299495;  // std dev = 0.481, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else return 0.17842047274870504;  // std dev = 0.287, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, A) )
%   | | then return -0.010324053804187147;  // std dev = 0.279, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( author(I, G), venue(I, B) )
%   | | | then return 0.03325203398605096;  // std dev = 0.907, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.0408946342781477;  // std dev = 2.787, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | then if ( title(L, K), venue(L, B) )
%   | | | then return -0.004179017483078047;  // std dev = 3.024, 61.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=12 */
%   | | | else return -0.15032805583686237;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return 0.061500462578244396;  // std dev = 4.036, 83.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=24 */
%   | | | else return -0.169015080987493;  // std dev = 0.148, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */


Results
   AUC ROC   = 0.554624
   AUC PR    = 0.403505
   CLL	      = -0.706459
   Precision = 0.375776 at threshold = 0.5
   Recall    = 0.931901
   F1        = 0.535585


Total learning time: 50.90265369415283 seconds
Total inference time: 11.308 seconds
AUC ROC: 0.554624


Results scoring model
   AUC ROC   = 0.6718
   AUC PR    = 0.66515
   CLL	      = -0.619832
   Precision = 0.632446 at threshold = 0.5
   Recall    = 0.907273
   F1        = 0.745332


Total scoring time: 1.258 seconds
Refined model CLL: -0.619832


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.554624
   AUC PR    = 0.403505
   CLL	      = -0.706459
   Precision = 0.375776 at threshold = 0.5
   Recall    = 0.931901
   F1        = 0.535585


Total learning time: 106.83589304924011 seconds
Total inference time: 11.308 seconds
AUC ROC: 0.554624
Total revision time: 106.83589304924011
Best scored revision CLL: -0.619832


Dataset: 13_twitter_cora, Fold: 5, Type: Transfer (trRDN-B), Time: 01:01:18
{'AUC ROC': 0.554624, 'AUC PR': 0.403505, 'CLL': -0.706459, 'Precision': [0.375776, 0.5], 'Recall': 0.931901, 'F1': 0.535585, 'Learning time': 106.83589304924011, 'Inference time': 11.308, 'parameter': {'AUC ROC': 0.555107, 'AUC PR': 0.404687, 'CLL': -0.704626, 'Precision': [0.37679, 0.5], 'Recall': 0.927848, 'F1': 0.53594, 'Learning time': 53.41823935508728, 'Inference time': 19.696}}


