Starting experiment #1 for 14_cora_twitter

Loading pre-trained trees.
Starting fold 1

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos  examples: 156
Target test neg examples: 24648

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then if ( tweets(C, D) )
%   | | then if ( follows(A, E), follows(E, C) )
%   | | | then return 0.7792015666784589;  // std dev = 1.662, 38.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=35 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.8581489350995123;  // std dev = 0.000, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.7956489350995123;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return -0.14185106490048838;  // std dev = 0.000, 193.000 (wgt'ed) examples reached here.  /* #neg=193 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.15814893509951236;  // std dev = 2.510, 30.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=9 */
%   | | | else return 0.1005731775237548;  // std dev = 2.462, 33.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=8 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(D, C) )
%   | then return 0.713148319391285;  // std dev = 0.119, 69.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=68 */
%   | else if ( follows(A, E), follows(C, E) )
%   | | then return 0.7194734122109543;  // std dev = 4.21e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.5194734122109544;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, G), follows(G, F) )
%   | | | then return 0.5528067455442878;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.7298398931850033;  // std dev = 0.020, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return -0.12544463852839163;  // std dev = 0.000, 196.000 (wgt'ed) examples reached here.  /* #neg=196 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.5194734122109544;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.062140322846224026;  // std dev = 2.497, 36.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=8 */
%   | | | else return 0.20146979319626637;  // std dev = 2.402, 25.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=9 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(A, D) )
%   | then if ( follows(D, C), recursion_accounttype(D, B) )
%   | | then return 0.5701654916075373;  // std dev = 0.058, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | else if ( follows(D, E), recursion_accounttype(D, B) )
%   | | | then return 0.32631157721366577;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.5587001898126289;  // std dev = 0.033, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | else return 0.5717764100198467;  // std dev = 0.079, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return 0.5879072311071026;  // std dev = 0.071, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return -0.09842828773926716;  // std dev = 1.167, 147.000 (wgt'ed) examples reached here.  /* #neg=144 #pos=3 */
%   | | | else return -0.016243470109473114;  // std dev = 2.185, 85.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=12 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.22980678657690767;  // std dev = 2.304, 22.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=9 */
%   | | | else return 0.131083667745482;  // std dev = 2.358, 26.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.4287921598172771;  // std dev = 0.161, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.3248928993253063;  // std dev = 0.929, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.5761785101706711;  // std dev = 0.031, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.10547097377108552;  // std dev = 0.054, 217.000 (wgt'ed) examples reached here.  /* #neg=217 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.5168940129579844;  // std dev = 1.705, 13.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=11 */
%   | | | else return -0.19979010955844326;  // std dev = 0.052, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.21484502623058577;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | | else return 0.11142104552293973;  // std dev = 1.912, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), tweets(A, D) )
%   then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | then if ( follows(A, E) )
%   | | then if ( recursion_accounttype(C, B) )
%   | | | then return 0.3119901303659216;  // std dev = 0.995, 44.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=43 */
%   | | | else return 0.15583958329867656;  // std dev = 0.877, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.35926674136734654;  // std dev = 0.053, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | else return -0.09511840524522851;  // std dev = 0.038, 164.000 (wgt'ed) examples reached here.  /* #neg=164 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return 0.3351171513638733;  // std dev = 0.123, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.38476391939029353;  // std dev = 0.121, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.09725549604235513;  // std dev = 0.020, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.08147111550360324;  // std dev = 2.266, 30.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=9 */
%   | | | else return 0.05017625113975046;  // std dev = 2.370, 33.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=9 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), follows(E, C) )
%   | | then return 0.24565323392870167;  // std dev = 0.128, 60.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=59 */
%   | | else return 0.14776594289814388;  // std dev = 0.311, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( follows(C, F), follows(F, A) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return -0.0012653134898807927;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return 0.2478117257649665;  // std dev = 0.008, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.2698858504978938;  // std dev = 0.060, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(G, A) )
%   | then return -0.049177887375368254;  // std dev = 0.131, 234.000 (wgt'ed) examples reached here.  /* #neg=211 #pos=23 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.28702694678415275;  // std dev = 0.075, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.0024335462199713107;  // std dev = 2.429, 36.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=9 */
%   | | | else return 0.10818043372985203;  // std dev = 2.229, 24.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), follows(C, D) )
%   | | then if ( tweets(A, E), tweets(C, F) )
%   | | | then return 0.18679593061753616;  // std dev = 1.389, 63.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=61 */
%   | | | else return 0.230573595697887;  // std dev = 0.090, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return -0.02473540801356114;  // std dev = 0.867, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return -0.1085674320088323;  // std dev = 0.783, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then if ( follows(A, H), follows(H, G) )
%   | | then return 0.3011418707418285;  // std dev = 0.114, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.017642893569604606;  // std dev = 0.890, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( follows(I, A) )
%   | | then return -0.053410604179326256;  // std dev = 0.113, 215.000 (wgt'ed) examples reached here.  /* #neg=200 #pos=15 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.07438378651892578;  // std dev = 2.063, 27.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=8 */
%   | | | else return 0.00851784449473092;  // std dev = 2.554, 33.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=9 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( tweets(A, E), follows(D, C) )
%   | | then if ( tweets(D, E), follows(D, A) )
%   | | | then return 0.16923258161936816;  // std dev = 0.997, 48.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=47 */
%   | | | else return -0.06680935742633301;  // std dev = 0.863, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.2015376971766399;  // std dev = 0.107, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | else return 0.062022181552572046;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(F, A) )
%   | then return -0.04615814222103653;  // std dev = 0.147, 224.000 (wgt'ed) examples reached here.  /* #neg=201 #pos=23 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.5640560426222175;  // std dev = 0.733, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.23946919025474456;  // std dev = 0.226, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.050021327487606175;  // std dev = 1.281, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | | | else return 0.09466151495133823;  // std dev = 1.837, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.16800390200689033;  // std dev = 0.136, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( tweets(A, F), follows(A, E) )
%   | | | then return -0.06062453161199574;  // std dev = 0.807, 100.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=3 */
%   | | | else return -0.07471969291589686;  // std dev = 0.000445, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | else if ( follows(D, G), recursion_accounttype(G, B) )
%   | | | then return 0.28086169235553227;  // std dev = 1.047, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | | else return -0.08080063335257225;  // std dev = 0.011, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.4465859461091099;  // std dev = 0.650, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.18594956752904912;  // std dev = 0.146, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else return 0.135341773296495;  // std dev = 0.463, 21.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=9 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.14584280747644082;  // std dev = 0.122, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.21043627475289445;  // std dev = 0.051, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.33343637191829084;  // std dev = 0.154, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(G, D), follows(A, G) )
%   | | | then return -0.06998629235815429;  // std dev = 0.279, 169.000 (wgt'ed) examples reached here.  /* #neg=168 #pos=1 */
%   | | | else return -0.0915139234016847;  // std dev = 0.687, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.3531905089479115;  // std dev = 0.546, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.1663619881543123;  // std dev = 0.162, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.0023973951609344616;  // std dev = 1.283, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
%   | | | else return 0.20647519193370414;  // std dev = 1.582, 11.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=6 */


Results
   AUC ROC   = 0.992822
   AUC PR    = 0.37392
   CLL	      = -0.137399
   Precision = 0.322196 at threshold = 0.5
   Recall    = 0.865385
   F1        = 0.469565


Total learning time: 20.90562605857849 seconds
Total inference time: 45.607 seconds
AUC ROC: 0.992822


Results scoring model
   AUC ROC   = 0.992549
   AUC PR    = 0.368685
   CLL	      = -0.124146
   Precision = 0.329609 at threshold = 0.5
   Recall    = 0.936508
   F1        = 0.487603


Total scoring time: 40.07 seconds
Parameter learned model CLL: -0.124146


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(A, C), tweets(A, D)', 'true,true': 'tweets(C, D)', 'true,true,true': 'follows(A, E), follows(E, C)', 'false': 'follows(A, F), recursion_accounttype(F, B)', 'false,false': 'follows(G, A)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true,true': [1.662, 3, 35], 'true,true,true,false': [0.0, 0, 6], 'true,true,false': [0.0, 0, 11], 'true,false': [0.0, 0, 30], 'false,true': [0.0, 0, 12], 'false,false,true,true': [0.968, 1, 15], 'false,false,true,false': [0.0, 193, 0], 'false,false,false,true': [2.51, 21, 9], 'false,false,false,false': [2.462, 25, 8]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(D, C)', 'true,false': 'follows(A, E), follows(C, E)', 'false': 'follows(F, A)', 'false,true': 'follows(F, G), recursion_accounttype(G, B)', 'false,true,true': 'follows(A, G), follows(G, F)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, I), follows(I, J)'}, {'true,true': [0.119, 1, 68], 'true,false,true': [4.21e-08, 0, 10], 'true,false,false': [0.894, 1, 4], 'false,true,true,true': [0.913, 1, 5], 'false,true,true,false': [0.02, 0, 18], 'false,true,false': [0.0, 196, 0], 'false,false,true': [0.894, 1, 4], 'false,false,false,true': [2.497, 28, 8], 'false,false,false,false': [2.402, 16, 9]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(C, D), follows(A, D)', 'true,true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true,false': 'follows(D, E), recursion_accounttype(D, B)', 'false': 'follows(A, F), recursion_accounttype(F, B)', 'false,false': 'follows(G, A)', 'false,false,true': 'follows(G, H), follows(H, A)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.058, 0, 41], 'true,true,false,true': [0.866, 1, 3], 'true,true,false,false': [0.033, 0, 24], 'true,false': [0.079, 0, 14], 'false,true': [0.071, 0, 12], 'false,false,true,true': [1.167, 144, 3], 'false,false,true,false': [2.185, 73, 12], 'false,false,false,true': [2.304, 13, 9], 'false,false,false,false': [2.358, 18, 8]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(A, F), recursion_accounttype(F, B)', 'false,false': 'follows(A, G), follows(G, H)', 'false,false,true': 'recursion_accounttype(H, B)', 'false,false,false': 'tweets(A, I)'}, {'true': [0.161, 0, 82], 'false,true,true,true': [0.929, 1, 8], 'false,true,true,false': [0.031, 0, 15], 'false,true,false': [0.054, 217, 0], 'false,false,true,true': [1.705, 2, 11], 'false,false,true,false': [0.052, 24, 0], 'false,false,false,true': [1.491, 5, 4], 'false,false,false,false': [1.912, 12, 6]}], ['accounttype(A, B)', {'': 'follows(C, A), tweets(A, D)', 'true': 'tweets(E, D), recursion_accounttype(E, B)', 'true,true': 'follows(A, E)', 'true,true,true': 'recursion_accounttype(C, B)', 'false': 'follows(A, F), recursion_accounttype(F, B)', 'false,false': 'follows(G, A), follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true,true': [0.995, 1, 43], 'true,true,true,false': [0.877, 1, 4], 'true,true,false': [0.053, 0, 38], 'true,false': [0.038, 164, 0], 'false,true': [0.123, 0, 18], 'false,false,true,true': [0.121, 0, 5], 'false,false,true,false': [0.02, 31, 0], 'false,false,false,true': [2.266, 21, 9], 'false,false,false,false': [2.37, 24, 9]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'tweets(A, D)', 'true,true': 'follows(E, A), follows(E, C)', 'true,false': 'follows(C, F), follows(F, A)', 'true,false,true': 'recursion_accounttype(F, B)', 'false': 'follows(G, A)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.128, 1, 59], 'true,true,false': [0.311, 1, 8], 'true,false,true,true': [1.225, 2, 6], 'true,false,true,false': [0.008, 0, 3], 'true,false,false': [0.06, 0, 6], 'false,true': [0.131, 211, 23], 'false,false,true': [0.075, 0, 4], 'false,false,false,true': [2.429, 27, 9], 'false,false,false,false': [2.229, 16, 8]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'tweets(D, E), follows(C, D)', 'true,true,true': 'tweets(A, E), tweets(C, F)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,true': 'follows(A, H), follows(H, G)', 'false,false': 'follows(I, A)', 'false,false,false': 'follows(A, J), follows(J, K)'}, {'true,true,true,true': [1.389, 2, 61], 'true,true,true,false': [0.09, 0, 16], 'true,true,false': [0.867, 1, 3], 'true,false': [0.783, 1, 2], 'false,true,true': [0.114, 0, 9], 'false,true,false': [0.89, 1, 3], 'false,false,true': [0.113, 200, 15], 'false,false,false,true': [2.063, 19, 8], 'false,false,false,false': [2.554, 24, 9]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(A, D)', 'true,true': 'tweets(A, E), follows(D, C)', 'true,true,true': 'tweets(D, E), follows(D, A)', 'false': 'follows(F, A)', 'false,false': 'tweets(A, G)', 'false,false,true': 'tweets(H, G), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, I), follows(I, J)'}, {'true,true,true,true': [0.997, 1, 47], 'true,true,true,false': [0.863, 1, 3], 'true,true,false': [0.107, 0, 24], 'true,false': [0.314, 1, 8], 'false,true': [0.147, 201, 23], 'false,false,true,true': [0.733, 0, 12], 'false,false,true,false': [0.226, 26, 0], 'false,false,false,true': [1.281, 8, 3], 'false,false,false,false': [1.837, 10, 6]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), follows(E, A)', 'false,true,true': 'tweets(A, F), follows(A, E)', 'false,true,false': 'follows(D, G), recursion_accounttype(G, B)', 'false,false': 'tweets(A, H)', 'false,false,true': 'tweets(I, H), recursion_accounttype(I, B)'}, {'true': [0.136, 0, 82], 'false,true,true,true': [0.807, 97, 3], 'false,true,true,false': [0.000445, 38, 0], 'false,true,false,true': [1.047, 1, 20], 'false,true,false,false': [0.011, 76, 0], 'false,false,true,true': [0.65, 0, 12], 'false,false,true,false': [0.146, 17, 0], 'false,false,false': [0.463, 12, 9]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,true': 'follows(A, F), recursion_accounttype(F, B)', 'false,true,false': 'follows(G, D), follows(A, G)', 'false,false': 'tweets(A, H)', 'false,false,true': 'tweets(I, H), recursion_accounttype(I, B)', 'false,false,false': 'follows(A, J), follows(J, K)'}, {'true': [0.122, 0, 82], 'false,true,true,true': [0.051, 0, 7], 'false,true,true,false': [0.154, 0, 15], 'false,true,false,true': [0.279, 168, 1], 'false,true,false,false': [0.687, 39, 0], 'false,false,true,true': [0.546, 0, 12], 'false,false,true,false': [0.162, 23, 0], 'false,false,false,true': [1.283, 9, 3], 'false,false,false,false': [1.582, 5, 6]}]]
[{'': [0.03404844290657402, 0.13092640349137158], 'false': [-1.4802973661668753e-16, 0.10380622837370344], 'false,false': [0.06661935395251883, 0.19702695893172031], 'false,false,false': [0.21000000000000008, 0.1836547291092747], 'false,false,true': [0.05859374999999978, -2.277970558298249e-16], 'true': [0.05157024793388442, -2.3684757858670006e-16], 'true,true': [0.06353305785124083, -1.6148698540002277e-16], 'true,true,true': [0.0727146814404449, -1.4802973661668753e-16]}, {'': [0.023249400087688207, 0.10712399372992211], 'false': [0.06835879349014952, 0.2095765308124081], 'false,false': [0.16, 0.20150497396801978], 'false,false,false': [0.17318287637434684, 0.23083211832112494], 'false,true': [0.04061472969206085, -2.945489657168783e-17], 'false,true,true': [0.13888888888888887, 2.1492785557026333e-05], 'true': [0.014126850032900692, 0.06222222222222236], 'true,false': [1.7763568394002506e-16, 0.16]}, {'': [0.011848969696750089, 0.0829127507079865], 'false': [0.00042256896751761513, 0.07094068025275033], 'false,false': [0.02800607555098151, 0.22886524503341832], 'false,false,false': [0.24124130723615275, 0.2139261592290918], 'false,false,true': [0.009258194710459342, 0.05614918897876529], 'true': [0.014097966597423777, 0.00044084126164741936], 'true,true': [8.136017782927756e-05, 0.033436941132716634], 'true,true,false': [0.1875, 4.484075974016862e-05]}, {'': [0.0003150892398969791, 0.07532043515831306], 'false': [0.03601482224361608, 0.20815259449172188], 'false,false': [0.1956940807239409, 0.22013032437254568], 'false,false,false': [0.24691358024691346, 0.20317318984022312], 'false,false,true': [0.22360026436070354, 0.00011148236016724396], 'false,true': [0.050829310925847006, 1.3613713608948053e-05], 'false,true,true': [0.09597300199371296, 6.392445340412205e-05]}, {'': [0.04794394425496952, 0.11466979980406207], 'false': [0.0008343542112688852, 0.12108143575659687], 'false,false': [0.028209063709851316, 0.170842757190778], 'false,false,false': [0.17110496271211034, 0.1701380225657109], 'true': [0.023713371499747282, 8.893631344616485e-06], 'false,false,true': [0.0029519862535218877, 1.2964094944758762e-05], 'true,true': [0.038164521296250205, 0.0028286285112148215], 'true,true,true': [0.022520546708002197, 0.15393656486929058]}, {'': [0.044765335743373824, 0.053305583741755105], 'false': [0.01725316236927185, 0.17624668982159247], 'false,false': [0.0013893616746745302, 0.1841456983011179], 'false,false,false': [0.16394219076462616, 0.20710968806965013], 'true': [0.02795211429238632, 0.10584295536566042], 'true,false': [0.14867411245657858, 0.0005964143002733698], 'true,false,true': [0.18749999999999997, 1.8869443362166487e-05], 'true,true': [0.016398600870152377, 0.09664343124179985]}, {'': [0.04371567242942079, 0.05469333038726203], 'false': [0.08358986296300278, 0.05080288417335822], 'false,true': [0.0014461479236896274, 0.19805833460039082], 'false,false': [0.012711270307428931, 0.18074250647468668], 'false,false,false': [0.15766525501135062, 0.19767164899216755], 'true': [0.03490495870370974, 0.20428018405040527], 'true,true': [0.024821497774431402, 0.18781913629654018], 'true,true,true': [0.030607722028123226, 0.0005099044657364549]}, {'': [0.03500847175113736, 0.055943541952275584], 'false': [0.021489784498653595, 0.1689078548567909], 'false,false': [0.15498547401738308, 0.18624059508143648], 'false,false,false': [0.14911493666575074, 0.21095262562352524], 'false,false,true': [0.04476305541076264, 0.001967001674454516], 'true': [0.026291202463133406, 0.09876543209876544], 'true,true': [0.03740313234913988, 0.00047305852640530666], 'true,true,true': [0.020701666221518974, 0.18639075942970995]}, {'': [0.00022718988248911863, 0.044677819803580605], 'false': [0.017544220517493037, 0.15611022379131356], 'false,false': [0.11235226743496046, 0.21448090713386878], 'false,false,true': [0.03519225172681909, 0.001259053560074758], 'false,true': [0.004753822573000392, 0.03348330818004834], 'false,true,false': [0.05217256203387254, 1.7248800693154001e-06], 'false,true,true': [0.006505565952479129, 5.21771785792111e-09]}, {'': [0.00018114531153994468, 0.036964683488027124], 'false': [0.014615071926563339, 0.11988238078102276], 'false,false': [0.0700901562120854, 0.19121825195815936], 'false,false,false': [0.13714783790338317, 0.22744184986602498], 'false,false,true': [0.024849263648118087, 0.0011450268173066602], 'false,true': [0.004472136003062197, 0.0027115543778016473], 'false,true,true': [0.00037123891837809967, 0.0015721076432384518], 'false,true,false': [0.00046034812298466875, 0.012090237377102133]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
0;true;follows(A, C), tweets(A, D).;true;true
0;true,true;tweets(C, D).;true;true
0;true,true,true;follows(A, E), follows(E, C).;true;true
0;false;follows(A, F), recursion_accounttype(F, B).;true;true
0;false,false;follows(G, A).;true;true
0;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;true;follows(D, A), follows(D, C).;true;true
1;true,false;follows(A, E), follows(C, E).;true;true
1;false;follows(F, A).;true;true
1;false,true;follows(F, G), recursion_accounttype(G, B).;true;true
1;false,true,true;follows(A, G), follows(G, F).;true;true
2;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;true;follows(C, D), follows(A, D).;true;true
2;true,true;follows(D, C), recursion_accounttype(D, B).;true;true
2;true,true,false;follows(D, E), recursion_accounttype(D, B).;true;true
2;false;follows(A, F), recursion_accounttype(F, B).;true;true
3;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
3;false,true,true;follows(A, F), recursion_accounttype(F, B).;true;true
3;false,false;follows(A, G), follows(G, H).;true;true
3;false,false,true;recursion_accounttype(H, B).;true;true
4;;accounttype(A, B) :- follows(C, A), tweets(A, D).;true;true
4;true;tweets(E, D), recursion_accounttype(E, B).;true;true
4;false;follows(A, F), recursion_accounttype(F, B).;true;true
4;false,false;follows(G, A), follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
5;true;tweets(A, D).;true;true
5;true,false;follows(C, F), follows(F, A).;true;true
5;true,false,true;recursion_accounttype(F, B).;true;true
5;false;follows(G, A).;true;true
5;false,false;follows(A, H), recursion_accounttype(H, B).;true;true
6;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
6;true;follows(D, C), recursion_accounttype(D, B).;true;true
6;true,true;tweets(D, E), follows(C, D).;true;true
6;true,true,true;tweets(A, E), tweets(C, F).;true;true
6;false;follows(A, G), recursion_accounttype(G, B).;true;true
6;false,true;follows(A, H), follows(H, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(A, D).;true;true
7;true,true;tweets(A, E), follows(D, C).;true;true
7;false;follows(F, A).;true;true
7;false,false;tweets(A, G).;true;true
7;false,false,true;tweets(H, G), recursion_accounttype(H, B).;true;true
8;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), follows(E, A).;true;true
8;false,true,true;tweets(A, F), follows(A, E).;true;true
8;false,true,false;follows(D, G), recursion_accounttype(G, B).;true;true
8;false,false;tweets(A, H).;true;true
8;false,false,true;tweets(I, H), recursion_accounttype(I, B).;true;true
9;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
9;false;follows(D, A).;true;true
9;false,true;follows(E, D), recursion_accounttype(E, B).;true;true
9;false,true,true;follows(A, F), recursion_accounttype(F, B).;true;true
9;false,true,false;follows(G, D), follows(A, G).;true;true
9;false,false;tweets(A, H).;true;true
9;false,false,true;tweets(I, H), recursion_accounttype(I, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(D, C) )
%   | then return 0.8581489350995127;  // std dev = 0.000, 68.000 (wgt'ed) examples reached here.  /* #pos=68 */
%   | else if ( tweets(A, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.7152917922423694;  // std dev = 0.350, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.8581489350995121;  // std dev = 8.43e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return -0.14185106490048843;  // std dev = 0.000, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.12481560176617904;  // std dev = 2.422, 30.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=8 */
%   | | | else return 0.09499104036267027;  // std dev = 2.621, 38.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=9 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, C) )
%   | then return 0.6587937359421426;  // std dev = 0.241, 65.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=61 */
%   | else return 0.7247897019754539;  // std dev = 0.050, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then return -0.11236951653412007;  // std dev = 0.108, 182.000 (wgt'ed) examples reached here.  /* #neg=179 #pos=3 */
%   | | else if ( follows(E, G), recursion_accounttype(G, B) )
%   | | | then return 0.6718543645919066;  // std dev = 0.976, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | | else return -0.12544463852839116;  // std dev = 2.98e-08, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, H) )
%   | | | then return 0.09135266795518789;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.5080193346218546;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.09379103075565498;  // std dev = 2.599, 36.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=9 */
%   | | | else return 0.17788697317126553;  // std dev = 2.310, 24.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( tweets(C, E), tweets(D, E) )
%   | | then return 0.574620949578177;  // std dev = 0.196, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | | else return 0.4572997112654501;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( follows(C, F) )
%   | | then return -0.09850673375506198;  // std dev = 0.815, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.6069652366265856;  // std dev = 0.093, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5619888178192395;  // std dev = 0.049, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.08964872642975279;  // std dev = 1.460, 107.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=3 */
%   | | | else return 0.00936872146420547;  // std dev = 2.132, 67.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=12 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.10987431447318727;  // std dev = 2.393, 28.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=8 */
%   | | | else return 0.16024953617706195;  // std dev = 2.450, 27.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.41701497073108995;  // std dev = 0.110, 83.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=82 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( tweets(A, F), follows(A, E) )
%   | | | then return -0.08451271276617552;  // std dev = 1.478, 127.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=3 */
%   | | | else return -0.10490550436772182;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | else if ( follows(D, G), recursion_accounttype(G, B) )
%   | | | then return 0.5180289542239536;  // std dev = 0.300, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return -0.11325385106574862;  // std dev = 0.000, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.7368428140290686;  // std dev = 0.397, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.19108104387097982;  // std dev = 0.026, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.25459187026758356;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | | else return 0.24851468729626983;  // std dev = 1.772, 12.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=6 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.3191387242004819;  // std dev = 0.111, 83.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=82 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), follows(E, A) )
%   | | then if ( tweets(A, F), follows(A, D) )
%   | | | then return -0.07110759447091247;  // std dev = 1.485, 100.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=3 */
%   | | | else return -0.10141977726953985;  // std dev = 0.259, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | | else if ( follows(D, G), recursion_accounttype(G, B) )
%   | | | then return 0.3482109152619688;  // std dev = 0.950, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | | else return -0.10236847671630127;  // std dev = 0.000, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.6293493120637655;  // std dev = 0.548, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.18079773431716373;  // std dev = 0.193, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.07802299156296762;  // std dev = 1.343, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.03824045769629987;  // std dev = 1.964, 20.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=6 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( tweets(C, D), follows(A, C) )
%   | | then return 0.21613568935454885;  // std dev = 0.210, 43.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=41 */
%   | | else return 0.2622422083526525;  // std dev = 0.058, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else if ( follows(A, E), follows(E, C) )
%   | | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | | then return 0.26352688942773655;  // std dev = 1.29e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.006218091352347188;  // std dev = 1.198, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else return 0.28603232008733226;  // std dev = 0.020, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(F, A) )
%   | then return -0.049940541682719504;  // std dev = 0.157, 232.000 (wgt'ed) examples reached here.  /* #neg=209 #pos=23 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.2867623415058072;  // std dev = 0.184, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.08323194170127993;  // std dev = 1.691, 24.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */
%   | | | else return 0.07103222110528186;  // std dev = 2.293, 28.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=9 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(D, C) )
%   | then return 0.21431225279920935;  // std dev = 0.120, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | else if ( follows(C, A), tweets(C, E) )
%   | | then return -0.27346606509829086;  // std dev = 1.006, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return 0.24679457516234596;  // std dev = 0.080, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(F, A), follows(A, G) )
%   | then if ( follows(G, F), follows(G, A) )
%   | | then return -0.06378272316551925;  // std dev = 0.149, 141.000 (wgt'ed) examples reached here.  /* #neg=134 #pos=7 */
%   | | else return -0.013667380752974544;  // std dev = 0.180, 85.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=17 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.5484325106104331;  // std dev = 0.157, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.16368283035148373;  // std dev = 0.103, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else if ( follows(J, A), recursion_accounttype(J, B) )
%   | | | then return 0.2069640647581919;  // std dev = 1.05e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.013443371002857944;  // std dev = 2.388, 46.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=9 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A), tweets(A, D) )
%   | then if ( follows(E, A), follows(E, C) )
%   | | then return 0.18836064150033827;  // std dev = 0.027, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | | else if ( follows(A, F), follows(C, F) )
%   | | | then return -0.045451424519897476;  // std dev = 0.887, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return -0.07353684950031932;  // std dev = 0.632, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.21191419564828806;  // std dev = 0.240, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H) )
%   | | then return 0.22821560099386323;  // std dev = 0.061, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.06393364812825802;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( follows(I, A) )
%   | | then return -0.04783766233271377;  // std dev = 0.143, 223.000 (wgt'ed) examples reached here.  /* #neg=208 #pos=15 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.042073079200581724;  // std dev = 1.637, 30.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=9 */
%   | | | else return -0.033481401364367225;  // std dev = 2.227, 33.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, D) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( recursion_accounttype(C, B) )
%   | | | then return 0.13834146510930678;  // std dev = 1.394, 66.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=64 */
%   | | | else return 0.013013133928826486;  // std dev = 1.224, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   | | else if ( tweets(A, F), follows(C, A) )
%   | | | then return 0.4030958218308741;  // std dev = 0.848, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.2509492472682672;  // std dev = 1.222, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | else return -0.08659243077988359;  // std dev = 0.285, 224.000 (wgt'ed) examples reached here.  /* #neg=224 */
%   else if ( follows(A, G) )
%   | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.5265984263521014;  // std dev = 0.394, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.6629208936374725;  // std dev = 0.433, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.23559369099533736;  // std dev = 0.179, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else return 0.0029293291360747253;  // std dev = 0.115, 24.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.1548061901254825;  // std dev = 0.211, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return 0.7422994957547543;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.182675447293373;  // std dev = 1.146, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | else return -0.07408895566895614;  // std dev = 0.044, 195.000 (wgt'ed) examples reached here.  /* #neg=195 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.1173294509282729;  // std dev = 0.059, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.0017425922916453642;  // std dev = 1.523, 28.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=9 */
%   | | | else return 0.049883025130974264;  // std dev = 1.699, 24.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */


Results
   AUC ROC   = 0.993325
   AUC PR    = 0.332867
   CLL	      = -0.126124
   Precision = 0.365979 at threshold = 0.5
   Recall    = 0.910256
   F1        = 0.522059


Total learning time: 13.941865921020508 seconds
Total inference time: 12.199 seconds
AUC ROC: 0.993325


Results scoring model
   AUC ROC   = 0.993592
   AUC PR    = 0.388216
   CLL	      = -0.115304
   Precision = 0.347059 at threshold = 0.5
   Recall    = 0.936508
   F1        = 0.506438


Total scoring time: 9.578 seconds
Refined model CLL: -0.115304


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.993325
   AUC PR    = 0.332867
   CLL	      = -0.126124
   Precision = 0.365979 at threshold = 0.5
   Recall    = 0.910256
   F1        = 0.522059


Total learning time: 84.495491979599 seconds
Total inference time: 12.199 seconds
AUC ROC: 0.993325
Total revision time: 84.495491979599
Best scored revision CLL: -0.115304


Dataset: 14_cora_twitter, Fold: 1, Type: Transfer (trRDN-B), Time: 00:02:22
{'AUC ROC': 0.993325, 'AUC PR': 0.332867, 'CLL': -0.126124, 'Precision': [0.365979, 0.5], 'Recall': 0.910256, 'F1': 0.522059, 'Learning time': 84.495491979599, 'Inference time': 12.199, 'parameter': {'AUC ROC': 0.992822, 'AUC PR': 0.37392, 'CLL': -0.137399, 'Precision': [0.322196, 0.5], 'Recall': 0.865385, 'F1': 0.469565, 'Learning time': 20.90562605857849, 'Inference time': 45.607}}


Starting fold 2

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos  examples: 126
Target test neg examples: 16128

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, A) )
%   | then return 0.8581489350995126;  // std dev = 0.000, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | else return 0.8146706742299468;  // std dev = 0.204, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   else if ( follows(E, A) )
%   | then if ( follows(F, E), follows(F, A) )
%   | | then if ( follows(E, F) )
%   | | | then return -0.1339145569639798;  // std dev = 0.996, 126.000 (wgt'ed) examples reached here.  /* #neg=125 #pos=1 */
%   | | | else return -0.06492798797741087;  // std dev = 0.961, 13.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=1 */
%   | | else if ( follows(E, G), recursion_accounttype(G, B) )
%   | | | then return 0.7711924133603816;  // std dev = 1.351, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   | | | else return -0.14185106490048763;  // std dev = 8.16e-08, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.7470378239884012;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.10814893509951233;  // std dev = 3.775, 76.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=19 */
%   | | | else return 0.2081489350995119;  // std dev = 3.695, 60.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=21 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, A) )
%   | then return 0.7194734122109542;  // std dev = 8.43e-08, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | else return 0.6846861293705284;  // std dev = 0.204, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then if ( follows(F, A) )
%   | | then if ( follows(E, F), follows(F, E) )
%   | | | then return 0.7366846563336449;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.44641320816960456;  // std dev = 0.874, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.7413433124639606;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.7447433276910399;  // std dev = 0.133, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.12645304733248836;  // std dev = 0.027, 190.000 (wgt'ed) examples reached here.  /* #neg=190 */
%   | | else if ( tweets(A, I), follows(A, J) )
%   | | | then return 0.09870472597134852;  // std dev = 3.345, 59.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=15 */
%   | | | else return 0.23519823542736065;  // std dev = 3.870, 62.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=25 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( follows(D, A), tweets(D, C) )
%   | then if ( tweets(E, C), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E), follows(E, D) )
%   | | | then return 0.508728160830463;  // std dev = 1.383, 41.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=39 */
%   | | | else return 0.5555606946033113;  // std dev = 1.045, 50.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=49 */
%   | | else return -0.11328140344204683;  // std dev = 0.027, 167.000 (wgt'ed) examples reached here.  /* #neg=167 */
%   | else if ( tweets(F, C), recursion_accounttype(F, B) )
%   | | then return 0.7518350515263776;  // std dev = 0.116, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return -0.17235243169863623;  // std dev = 0.052, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5649830903651087;  // std dev = 0.038, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( follows(H, A) )
%   | | then return -0.079335573018989;  // std dev = 0.152, 39.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=2 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.24394702476458777;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.09098980412783958;  // std dev = 3.846, 71.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=21 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.42752480156695494;  // std dev = 0.083, 70.000 (wgt'ed) examples reached here.  /* #pos=70 */
%   | else return 0.3570718654518099;  // std dev = 0.243, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then if ( follows(F, A) )
%   | | then return 0.49903719969853505;  // std dev = 0.230, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.42299496948516657;  // std dev = 0.054, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.4040963719717702;  // std dev = 1.042, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return -0.10279039257390417;  // std dev = 0.031, 214.000 (wgt'ed) examples reached here.  /* #neg=214 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.08810871699647953;  // std dev = 4.170, 100.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=29 */
%   | | | else return 0.19896965485402968;  // std dev = 2.370, 26.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=11 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.33117539735537405;  // std dev = 0.035, 74.000 (wgt'ed) examples reached here.  /* #pos=74 */
%   | else return 0.12632832468491367;  // std dev = 0.930, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(A, E), follows(F, A) )
%   | then if ( follows(E, G), recursion_accounttype(G, B) )
%   | | then if ( follows(E, F), follows(F, G) )
%   | | | then return 0.38714566635377107;  // std dev = 0.197, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.3469720447001705;  // std dev = 0.148, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.08963737466883492;  // std dev = 0.041, 192.000 (wgt'ed) examples reached here.  /* #neg=190 #pos=2 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.7207327832525185;  // std dev = 0.228, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return -0.1929190349238707;  // std dev = 0.316, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   | | else if ( follows(J, A), recursion_accounttype(J, B) )
%   | | | then return 0.2732843728817742;  // std dev = 0.973, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return -0.01566562276225303;  // std dev = 2.772, 74.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, C) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.2575979885528473;  // std dev = 0.049, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return 0.22488780968240363;  // std dev = 0.178, 28.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | else return 0.2741801221870289;  // std dev = 0.088, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G) )
%   | | | then return 0.2975046717353137;  // std dev = 0.324, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.12614442322343394;  // std dev = 0.721, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.08775813823889132;  // std dev = 0.044, 204.000 (wgt'ed) examples reached here.  /* #neg=204 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.26287556862295336;  // std dev = 0.043, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.016397304203277615;  // std dev = 3.173, 96.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=25 */
%   | | | else return 0.12629485921265757;  // std dev = 2.709, 38.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=15 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then if ( follows(E, A), follows(E, C) )
%   | | then if ( tweets(E, D) )
%   | | | then return 0.21488922955374418;  // std dev = 0.021, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return -0.13307475650722597;  // std dev = 0.800, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.21684947846970226;  // std dev = 0.021, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return 0.2219699337226247;  // std dev = 0.089, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   else if ( follows(F, A) )
%   | then return -0.05216452313097907;  // std dev = 0.107, 243.000 (wgt'ed) examples reached here.  /* #neg=220 #pos=23 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.41295788189030147;  // std dev = 1.967, 39.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=37 */
%   | | | else return -0.17149578955866848;  // std dev = 0.275, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.020070205325274895;  // std dev = 1.367, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
%   | | | else return -0.027666912428316766;  // std dev = 2.291, 28.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=7 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.18424171792823174;  // std dev = 0.100, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E), follows(E, D) )
%   | | | then return 0.047933740557286095;  // std dev = 0.749, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.27299701218287015;  // std dev = 0.362, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return -0.0766796947792018;  // std dev = 0.038, 209.000 (wgt'ed) examples reached here.  /* #neg=209 */
%   | else if ( tweets(A, F), follows(A, G) )
%   | | then if ( tweets(H, F), recursion_accounttype(H, B) )
%   | | | then return 0.22053667004461025;  // std dev = 1.698, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   | | | else return -0.11771806167529968;  // std dev = 0.025, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.04065291063907022;  // std dev = 1.990, 41.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=14 */
%   | | | else return 0.05480754053785782;  // std dev = 2.663, 38.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=13 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then return 0.1360317428539099;  // std dev = 0.141, 47.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=46 */
%   | else return 0.1597615868328182;  // std dev = 0.070, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   else if ( follows(E, A) )
%   | then if ( follows(F, E), follows(F, A) )
%   | | then return -0.07428683411396902;  // std dev = 0.088, 142.000 (wgt'ed) examples reached here.  /* #neg=140 #pos=2 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return -0.016314903709978592;  // std dev = 1.004, 88.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=18 */
%   | | | else return 0.050459534252386744;  // std dev = 0.541, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.28381198664119656;  // std dev = 1.810, 35.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=33 */
%   | | | else return -0.13708086897441982;  // std dev = 0.332, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.16017264960699057;  // std dev = 1.270, 11.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=6 */
%   | | | else return 0.05281474175968455;  // std dev = 2.282, 26.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=9 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, A) )
%   | then return 0.13903967223618902;  // std dev = 0.072, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | else if ( follows(A, C), tweets(A, E) )
%   | | then if ( follows(A, F), follows(F, C) )
%   | | | then return -0.14058430537258754;  // std dev = 1.196, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.13884446791159322;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.14010698532304114;  // std dev = 0.030, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(G, A) )
%   | then return -0.046497993980955436;  // std dev = 0.103, 255.000 (wgt'ed) examples reached here.  /* #neg=232 #pos=23 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.10543689462251839;  // std dev = 0.085, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.6268397441583851;  // std dev = 0.845, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.01310317559581465;  // std dev = 1.790, 68.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=19 */
%   | | | else return -0.029516566014266613;  // std dev = 3.010, 85.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=21 */


Results
   AUC ROC   = 0.994383
   AUC PR    = 0.41914
   CLL	      = -0.105859
   Precision = 0.35493 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.523909


Total learning time: 19.70720672607422 seconds
Total inference time: 26.06 seconds
AUC ROC: 0.994383


Results scoring model
   AUC ROC   = 0.994469
   AUC PR    = 0.432938
   CLL	      = -0.120181
   Precision = 0.355392 at threshold = 0.5
   Recall    = 0.929487
   F1        = 0.514184


Total scoring time: 30.372 seconds
Parameter learned model CLL: -0.120181


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(C, D), follows(D, A)', 'false': 'follows(E, A)', 'false,true': 'follows(F, E), follows(F, A)', 'false,true,true': 'follows(E, F)', 'false,true,false': 'follows(E, G), recursion_accounttype(G, B)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'tweets(A, I)'}, {'true,true': [0.0, 0, 63], 'true,false': [0.204, 1, 22], 'false,true,true,true': [0.996, 125, 1], 'false,true,true,false': [0.961, 12, 1], 'false,true,false,true': [1.351, 2, 21], 'false,true,false,false': [8.16e-08, 90, 0], 'false,false,true': [0.314, 1, 8], 'false,false,false,true': [3.775, 57, 19], 'false,false,false,false': [3.695, 39, 21]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(C, D), follows(D, A)', 'false': 'follows(A, E), recursion_accounttype(E, B)', 'false,true': 'follows(F, A)', 'false,true,true': 'follows(E, F), follows(F, E)', 'false,false': 'follows(G, A)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)', 'false,false,false': 'tweets(A, I), follows(A, J)'}, {'true,true': [8.43e-08, 0, 63], 'true,false': [0.204, 1, 22], 'false,true,true,true': [0.0, 0, 4], 'false,true,true,false': [0.874, 1, 2], 'false,true,false': [0.0, 0, 8], 'false,false,true,true': [0.133, 0, 17], 'false,false,true,false': [0.027, 190, 0], 'false,false,false,true': [3.345, 44, 15], 'false,false,false,false': [3.87, 37, 25]}], ['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'follows(D, A), tweets(D, C)', 'true,true': 'tweets(E, C), recursion_accounttype(E, B)', 'true,true,true': 'follows(A, E), follows(E, D)', 'true,false': 'tweets(F, C), recursion_accounttype(F, B)', 'false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false': 'follows(H, A)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, B)'}, {'true,true,true,true': [1.383, 2, 39], 'true,true,true,false': [1.045, 1, 49], 'true,true,false': [0.027, 167, 0], 'true,false,true': [0.116, 0, 27], 'true,false,false': [0.052, 47, 0], 'false,true': [0.038, 0, 16], 'false,false,true': [0.152, 37, 2], 'false,false,false,true': [0.816, 1, 2], 'false,false,false,false': [3.846, 50, 21]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(A, D)', 'false': 'follows(A, E), recursion_accounttype(E, B)', 'false,true': 'follows(F, A)', 'false,false': 'follows(G, A)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, I)'}, {'true,true': [0.083, 0, 70], 'true,false': [0.243, 1, 15], 'false,true,true': [0.23, 0, 6], 'false,true,false': [0.054, 0, 8], 'false,false,true,true': [1.042, 1, 17], 'false,false,true,false': [0.031, 214, 0], 'false,false,false,true': [4.17, 71, 29], 'false,false,false,false': [2.37, 15, 11]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(A, E), follows(F, A)', 'false,true': 'follows(E, G), recursion_accounttype(G, B)', 'false,true,true': 'follows(E, F), follows(F, G)', 'false,false': 'follows(A, H)', 'false,false,true': 'follows(I, H), recursion_accounttype(I, B)', 'false,false,false': 'follows(J, A), recursion_accounttype(J, B)'}, {'true,true': [0.035, 0, 74], 'true,false': [0.93, 1, 4], 'false,true,true,true': [0.197, 0, 4], 'false,true,true,false': [0.148, 0, 15], 'false,true,false': [0.041, 190, 2], 'false,false,true,true': [0.228, 0, 29], 'false,false,true,false': [0.316, 66, 0], 'false,false,false,true': [0.973, 1, 15], 'false,false,false,false': [2.772, 61, 13]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(A, D), follows(D, C)', 'true,true': 'recursion_accounttype(D, B)', 'false': 'follows(E, A)', 'false,true': 'follows(E, F), recursion_accounttype(F, B)', 'false,true,true': 'follows(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, I), follows(I, J)'}, {'true,true,true': [0.049, 0, 27], 'true,true,false': [0.178, 1, 27], 'true,false': [0.088, 0, 31], 'false,true,true,true': [0.324, 0, 21], 'false,true,true,false': [0.721, 1, 2], 'false,true,false': [0.044, 204, 0], 'false,false,true': [0.043, 0, 8], 'false,false,false,true': [3.173, 71, 25], 'false,false,false,false': [2.709, 23, 15]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(A, C), tweets(A, D)', 'true,true': 'follows(E, A), follows(E, C)', 'true,true,true': 'tweets(E, D)', 'false': 'follows(F, A)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(H, G), recursion_accounttype(H, B)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true,true': [0.021, 0, 32], 'true,true,true,false': [0.8, 1, 2], 'true,true,false': [0.021, 0, 12], 'true,false': [0.089, 0, 39], 'false,true': [0.107, 220, 23], 'false,false,true,true': [1.967, 2, 37], 'false,false,true,false': [0.275, 60, 0], 'false,false,false,true': [1.367, 10, 4], 'false,false,false,false': [2.291, 21, 7]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(A, E), follows(E, D)', 'false,false': 'tweets(A, F), follows(A, G)', 'false,false,true': 'tweets(H, F), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, I), follows(I, J)'}, {'true': [0.1, 0, 85], 'false,true,true,true': [0.749, 1, 4], 'false,true,true,false': [0.362, 0, 19], 'false,true,false': [0.038, 209, 0], 'false,false,true,true': [1.698, 2, 21], 'false,false,true,false': [0.025, 51, 0], 'false,false,false,true': [1.99, 27, 14], 'false,false,false,false': [2.663, 25, 13]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(A, C), tweets(A, D)', 'false': 'follows(E, A)', 'false,true': 'follows(F, E), follows(F, A)', 'false,true,false': 'follows(A, G), follows(G, H)', 'false,false': 'follows(A, I), follows(I, J)', 'false,false,true': 'recursion_accounttype(J, B)', 'false,false,false': 'tweets(A, K)'}, {'true,true': [0.141, 1, 46], 'true,false': [0.07, 0, 39], 'false,true,true': [0.088, 140, 2], 'false,true,false,true': [1.004, 70, 18], 'false,true,false,false': [0.541, 6, 3], 'false,false,true,true': [1.81, 2, 33], 'false,false,true,false': [0.332, 72, 0], 'false,false,false,true': [1.27, 5, 6], 'false,false,false,false': [2.282, 17, 9]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(C, D), follows(D, A)', 'true,false': 'follows(A, C), tweets(A, E)', 'true,false,true': 'follows(A, F), follows(F, C)', 'false': 'follows(G, A)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,true': 'follows(H, I), recursion_accounttype(I, B)', 'false,false,false': 'tweets(A, J)'}, {'true,true': [0.072, 0, 63], 'true,false,true,true': [1.196, 2, 5], 'true,false,true,false': [0.0, 0, 3], 'true,false,false': [0.03, 0, 14], 'false,true': [0.103, 232, 23], 'false,false,true,true': [0.085, 0, 7], 'false,false,true,false': [0.845, 3, 1], 'false,false,false,true': [1.79, 49, 19], 'false,false,false,false': [3.01, 64, 21]}]]
[{'': [0.011492698756084153, 0.14685709572422995], 'false': [0.0829396573444203, 0.22145065398335392], 'false,false': [0.09876543209876527, 0.20761245674740567], 'false,false,false': [0.18749999999999947, 0.22750000000000006], 'false,true': [0.014181460586926042, 0.15130393922781785], 'false,true,false': [0.07939508506616269, 7.401486830834377e-17], 'false,true,true': [0.007873519778281634, 0.07100591715976336], 'true': [-7.894919286223335e-16, 0.04158790170132359]}, {'': [0.01135943540142384, 0.14431119945823637], 'false': [0.06470284865297664, 0.1292726209139238], 'false,false': [0.05730171346264376, 0.2208578179779645], 'false,false,false': [0.18960068945705244, 0.24151822207481613], 'false,true': [0.12976540637856676, 0.0], 'false,true,true': [0.0, 0.25463879757708424], 'false,false,true': [0.001039074944743887, 3.7916445822090185e-06], 'true': [1.1278456123176193e-16, 0.04158790170132266]}, {'': [0.12928479352421104, 0.16382451538956966], 'false': [9.248002682421541e-05, 0.1523359333187593], 'false,false': [0.022957913583185458, 0.20976677495122387], 'false,false,false': [0.2222222222222222, 0.20829200555445387], 'true': [0.10763004698459609, 0.2028669132497551], 'true,false': [0.013423681686084153, 5.671166785066373e-05], 'true,true': [0.03355912451016549, 4.4101030553452965e-06], 'true,true,true': [0.04664307415253489, 0.021842101902288854]}, {'': [0.011788980365986374, 0.09145068155998858], 'false': [0.006881842564312425, 0.08687557164800212], 'false,false': [0.02307283807357273, 0.18463231228354704], 'false,false,false': [0.17392061326684774, 0.2160770693041531], 'false,false,true': [0.06032909364741276, 4.58494885296982e-06], 'true': [9.878028575881968e-05, 0.05889345299015694], 'false,true': [0.008833251806872036, 0.002940105299897189]}, {'': [0.014594877847625353, 0.08041146027239462], 'false': [0.01805260311867371, 0.14495935128074386], 'false,false': [0.17862908219953136, 0.10812077720617794], 'false,false,true': [0.0017885000713330098, 0.0015103969534141402], 'false,false,false': [0.0591130118604421, 0.10387401079752354], 'false,true': [0.003458881150559531, 0.0016597666024856527], 'true': [0.00124186743925619, 0.17291295194917775], 'false,true,true': [0.00968555239178559, 0.001458662880597587]}, {'': [0.01085257245056144, 0.06133350763502231], 'false': [0.015557649856853423, 0.12749114053743105], 'false,false': [0.0018795949135242823, 0.13237851694261424], 'false,false,false': [0.10488333557327977, 0.19318751008894522], 'false,true': [0.029269924076760906, 9.539255087883951e-06], 'false,true,true': [0.005011528970778178, 0.17338489689484315], 'true': [0.016431172110101307, 0.0002486664326951481], 'true,true': [8.94328465377292e-05, 0.03166402679859425]}, {'': [0.011724309353886265, 0.05939545977417399], 'false': [0.011445490597434677, 0.13691726155229123], 'false,false': [0.1214148883832741, 0.1699690102690665], 'false,false,false': [0.13338780919958598, 0.18750000000000003], 'false,false,true': [0.09924320224143071, 0.0012622654993406127], 'true': [0.020907108375436932, 0.0002048539120714759], 'true,true': [0.02780525417681261, 3.514092813936923e-05], 'true,true,true': [1.3423456527071609e-05, 0.21355070741069512]}, {'': [0.00011829438157361175, 0.049569081733035834], 'false': [0.012311407274637884, 0.1038423365537347], 'false,false': [0.06345703365209567, 0.1399277428425546], 'false,false,false': [0.09658474403294291, 0.1865885763925932], 'false,false,true': [0.12528434469137673, 1.2317035611161329e-05], 'false,true': [0.0372246813917382, 7.027567275911214e-06], 'false,true,true': [0.11229741775202498, 0.006915890590112129]}, {'': [0.011077859607557144, 0.04639730999260913], 'false': [0.011146071219770928, 0.10180681591441879], 'false,false': [0.07062943113207722, 0.18670825186219908], 'false,false,false': [0.14666066455374263, 0.20022489635972457], 'false,false,true': [0.09357590303001835, 0.001528374155620022], 'false,true': [0.007668627707830266, 0.013790400190797168], 'false,true,false': [0.011460039619705691, 0.03253102789664657], 'true': [0.019910080200904387, 0.00012615775570052492]}, {'': [0.022296907592157682, 0.0415174968758516], 'false': [0.010517093685698873, 0.08931284535482652], 'false,false': [0.1896333599172124, 0.08058565379778718], 'false,false,true': [0.0010306575204884264, 0.17845140457240638], 'false,false,false': [0.04710837389794227, 0.10656016999548092], 'true': [8.308556257520725e-05, 0.07586195403167793], 'true,false': [0.15936886240405365, 6.628467274162013e-05], 'true,false,true': [0.20424567163263174, 0.0]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
0;true;follows(C, D), follows(D, A).;true;true
0;false;follows(E, A).;true;true
0;false,true;follows(F, E), follows(F, A).;true;true
0;false,true,false;follows(E, G), recursion_accounttype(G, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;true;follows(C, D), follows(D, A).;true;true
1;false;follows(A, E), recursion_accounttype(E, B).;true;true
1;false,true;follows(F, A).;true;true
1;false,true,true;follows(E, F), follows(F, E).;true;true
1;false,false;follows(G, A).;true;true
1;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
2;;accounttype(A, B) :- tweets(A, C).;true;true
2;true;follows(D, A), tweets(D, C).;true;true
2;true,true;tweets(E, C), recursion_accounttype(E, B).;true;true
2;true,false;tweets(F, C), recursion_accounttype(F, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
3;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
3;true;follows(A, D).;true;true
3;false;follows(A, E), recursion_accounttype(E, B).;true;true
3;false,false;follows(G, A).;true;true
3;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D), recursion_accounttype(D, B).;true;true
4;false;follows(A, E), follows(F, A).;true;true
4;false,true;follows(E, G), recursion_accounttype(G, B).;true;true
4;false,true,true;follows(E, F), follows(F, G).;true;true
4;false,false;follows(A, H).;true;true
4;false,false,true;follows(I, H), recursion_accounttype(I, B).;true;true
5;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
5;true;follows(A, D), follows(D, C).;true;true
5;true,true;recursion_accounttype(D, B).;true;true
5;false;follows(E, A).;true;true
5;false,true;follows(E, F), recursion_accounttype(F, B).;true;true
5;false,false;follows(A, H), recursion_accounttype(H, B).;true;true
6;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
6;true;follows(A, C), tweets(A, D).;true;true
6;true,true;follows(E, A), follows(E, C).;true;true
6;true,true,true;tweets(E, D).;true;true
6;false;follows(F, A).;true;true
6;false,false;follows(A, G).;true;true
6;false,false,true;follows(H, G), recursion_accounttype(H, B).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;false;follows(D, A).;true;true
7;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
7;false,false;tweets(A, F), follows(A, G).;true;true
7;false,false,true;tweets(H, F), recursion_accounttype(H, B).;true;true
8;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
8;true;follows(A, C), tweets(A, D).;true;true
8;false;follows(E, A).;true;true
8;false,false;follows(A, I), follows(I, J).;true;true
8;false,false,true;recursion_accounttype(J, B).;true;true
9;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
9;true;follows(C, D), follows(D, A).;true;true
9;true,false;follows(A, C), tweets(A, E).;true;true
9;true,false,true;follows(A, F), follows(F, C).;true;true
9;false;follows(G, A).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true
9;false,false,true;follows(H, I), recursion_accounttype(I, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( recursion_accounttype(C, B) )
%   | | then return 0.8581489350995125;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | else if ( follows(D, A), tweets(D, E) )
%   | | | then return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.14185106490048824;  // std dev = 0.000, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( follows(A, G), follows(F, G) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.3581489350995122;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else if ( follows(I, A) )
%   | | | then return -0.08524729131558208;  // std dev = 1.682, 53.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=3 */
%   | | | else return 0.16822645447935636;  // std dev = 5.253, 129.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=40 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(C, D) )
%   | then return 0.7081802265293655;  // std dev = 0.122, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | else return 0.6194734122109543;  // std dev = 0.300, 20.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=18 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then if ( tweets(A, F) )
%   | | then if ( follows(G, A), follows(A, G) )
%   | | | then return 0.5528067455442879;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.7322259441501944;  // std dev = 0.083, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.4158959867358479;  // std dev = 0.744, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.6887077345190544;  // std dev = 1.024, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return -0.12720300583734362;  // std dev = 0.040, 202.000 (wgt'ed) examples reached here.  /* #neg=202 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.0931692086563138;  // std dev = 3.758, 74.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=19 */
%   | | | else return 0.21141245189955674;  // std dev = 3.623, 56.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=21 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(A, D) )
%   | then return 0.5626136389361354;  // std dev = 0.153, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return 0.4799035947890409;  // std dev = 0.300, 20.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=18 */
%   else if ( follows(E, A) )
%   | then if ( follows(F, E), follows(F, A) )
%   | | then return -0.10276908224460113;  // std dev = 0.085, 131.000 (wgt'ed) examples reached here.  /* #neg=129 #pos=2 */
%   | | else if ( follows(E, G), recursion_accounttype(G, B) )
%   | | | then return 0.6036478586302773;  // std dev = 0.327, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return -0.11419858585604617;  // std dev = 0.025, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(H, I), follows(I, H) )
%   | | | then return 0.5776565441340397;  // std dev = 0.088, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.2801871265123812;  // std dev = 0.666, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, J), tweets(A, K) )
%   | | | then return 0.05403097604050531;  // std dev = 3.397, 65.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=15 */
%   | | | else return 0.14613016317650743;  // std dev = 4.069, 74.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=25 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, A) )
%   | then return 0.4003187713403993;  // std dev = 0.172, 65.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=63 */
%   | else return 0.4318146933510748;  // std dev = 0.137, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else if ( follows(E, A) )
%   | then if ( follows(F, E), follows(F, A) )
%   | | then return -0.09318618414927274;  // std dev = 0.085, 138.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=2 */
%   | | else if ( tweets(A, G), follows(H, E) )
%   | | | then return 0.056544451414507285;  // std dev = 2.059, 66.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=19 */
%   | | | else return -0.06403576466930572;  // std dev = 0.881, 32.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=2 */
%   | else if ( tweets(A, I) )
%   | | then if ( tweets(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.6756395521197873;  // std dev = 1.421, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | | | else return -0.18693385359332307;  // std dev = 0.037, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.04969060744471701;  // std dev = 3.066, 50.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=14 */
%   | | | else return 0.08146615309206258;  // std dev = 2.510, 30.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=9 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, A) )
%   | then return 0.33667206506451264;  // std dev = 0.151, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | else return 0.2867389154166403;  // std dev = 0.208, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, E) )
%   | | | then return 0.3452619517914918;  // std dev = 1.267, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | | | else return 0.6082125266755738;  // std dev = 0.113, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.09854844873456517;  // std dev = 0.085, 219.000 (wgt'ed) examples reached here.  /* #neg=219 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(H, G) )
%   | | | then return 0.1787941199887551;  // std dev = 1.022, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.10117503827528934;  // std dev = 0.540, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.026735328791571037;  // std dev = 4.044, 106.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=25 */
%   | | | else return 0.08410884083652925;  // std dev = 3.051, 47.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=15 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.2673405396485169;  // std dev = 0.177, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(F, G) )
%   | | | then return 0.3521371060765625;  // std dev = 0.293, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.4920863810131619;  // std dev = 0.025, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.09022685058165116;  // std dev = 0.079, 227.000 (wgt'ed) examples reached here.  /* #neg=227 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.6313377461451;  // std dev = 1.118, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | | else return -0.1921890033650313;  // std dev = 0.315, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.09561730224272118;  // std dev = 1.366, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | | else return 0.031878451554314166;  // std dev = 2.245, 25.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=7 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, A) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.21900243400235428;  // std dev = 0.097, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else if ( follows(A, D) )
%   | | | then return 0.165215304746736;  // std dev = 0.936, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | | else return -0.011670035406976531;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.22146220004030495;  // std dev = 0.103, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else if ( follows(E, A) )
%   | then return -0.04779439033588289;  // std dev = 0.111, 243.000 (wgt'ed) examples reached here.  /* #neg=220 #pos=23 */
%   | else if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.45894354934361203;  // std dev = 0.881, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return -0.15102421181779654;  // std dev = 0.167, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.10082160348771241;  // std dev = 2.537, 42.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=16 */
%   | | | else return 0.1833836680199576;  // std dev = 1.984, 16.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=7 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then if ( follows(E, A), follows(E, C) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.17475769804914532;  // std dev = 2.36e-08, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | | else return 0.01887873699662516;  // std dev = 1.265, 12.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | else return 0.18159550270891753;  // std dev = 0.025, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return 0.19646016619784745;  // std dev = 0.134, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   else if ( follows(F, A) )
%   | then return -0.04617205943858236;  // std dev = 0.123, 241.000 (wgt'ed) examples reached here.  /* #neg=218 #pos=23 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.353729870774956;  // std dev = 2.014, 35.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=33 */
%   | | | else return -0.1619234534438122;  // std dev = 0.345, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.0577277364386715;  // std dev = 1.284, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return -0.03706248802134994;  // std dev = 2.504, 36.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.16255207975051153;  // std dev = 0.148, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(F, G) )
%   | | | then return 0.2967130997207943;  // std dev = 0.278, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.39425540117568514;  // std dev = 0.024, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.07647911690775892;  // std dev = 0.069, 226.000 (wgt'ed) examples reached here.  /* #neg=226 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.3677087060307697;  // std dev = 1.001, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | | else return -0.13912697416392472;  // std dev = 0.403, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.09195858050556512;  // std dev = 1.067, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.10605673959594647;  // std dev = 2.068, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(C, D) )
%   | then return 0.11924470949288411;  // std dev = 0.129, 57.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=56 */
%   | else return 0.1517499661682187;  // std dev = 0.092, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   else if ( follows(E, A) )
%   | then if ( follows(F, E), follows(F, A) )
%   | | then return -0.06191324377820125;  // std dev = 0.056, 144.000 (wgt'ed) examples reached here.  /* #neg=142 #pos=2 */
%   | | else if ( follows(E, G), recursion_accounttype(G, B) )
%   | | | then return 0.1868676078683796;  // std dev = 1.007, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return -0.07519032501636923;  // std dev = 0.033, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), follows(A, I) )
%   | | | then return -0.024129001152843693;  // std dev = 1.619, 47.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=16 */
%   | | | else return -0.009897881327490027;  // std dev = 2.108, 75.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=21 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.0034310209464730773;  // std dev = 1.149, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
%   | | | else return 0.1069341527077163;  // std dev = 2.029, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */


Results
   AUC ROC   = 0.994353
   AUC PR    = 0.430617
   CLL	      = -0.1062
   Precision = 0.339888 at threshold = 0.5
   Recall    = 0.960317
   F1        = 0.502075


Total learning time: 12.115691661834717 seconds
Total inference time: 9.406 seconds
AUC ROC: 0.994353


Results scoring model
   AUC ROC   = 0.994232
   AUC PR    = 0.413842
   CLL	      = -0.122539
   Precision = 0.347518 at threshold = 0.5
   Recall    = 0.942308
   F1        = 0.507772


Total scoring time: 11.95 seconds
Refined model CLL: -0.122539


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.994383
   AUC PR    = 0.41914
   CLL	      = -0.105859
   Precision = 0.35493 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.523909


Total learning time: 74.14489838790894 seconds
Total inference time: 26.06 seconds
AUC ROC: 0.994383
Total revision time: 74.14489838790894
Best scored revision CLL: -0.120181


Dataset: 14_cora_twitter, Fold: 2, Type: Transfer (trRDN-B), Time: 00:04:12
{'AUC ROC': 0.994383, 'AUC PR': 0.41914, 'CLL': -0.105859, 'Precision': [0.35493, 0.5], 'Recall': 1.0, 'F1': 0.523909, 'Learning time': 74.14489838790894, 'Inference time': 26.06, 'parameter': {'AUC ROC': 0.994383, 'AUC PR': 0.41914, 'CLL': -0.105859, 'Precision': [0.35493, 0.5], 'Recall': 1.0, 'F1': 0.523909, 'Learning time': 19.70720672607422, 'Inference time': 26.06}}


Starting fold 1

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos  examples: 156
Target test neg examples: 24648

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.8429974199479975;  // std dev = 0.122, 66.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=65 */
%   | else if ( follows(A, E), follows(E, C) )
%   | | then return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(F, H), follows(H, A) )
%   | | | then return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return -0.1418510649004884;  // std dev = 0.000, 203.000 (wgt'ed) examples reached here.  /* #neg=203 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.09344305274657119;  // std dev = 2.473, 34.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=8 */
%   | | | else return 0.21814893509951236;  // std dev = 2.400, 25.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=9 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7237696863633744;  // std dev = 0.071, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E), tweets(A, F) )
%   | | | then return 0.528993122216108;  // std dev = 0.852, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.7274065038819155;  // std dev = 0.075, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( follows(A, D) )
%   | | | then return -0.12544463852839155;  // std dev = 0.000, 181.000 (wgt'ed) examples reached here.  /* #neg=181 */
%   | | | else return -0.10245010181243494;  // std dev = 0.850, 30.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=1 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.3861400788776212;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.1321034567076476;  // std dev = 2.390, 28.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=8 */
%   | | | else return 0.07946651417661499;  // std dev = 2.598, 36.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=9 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(D, C) )
%   | then return 0.560251135740294;  // std dev = 0.089, 68.000 (wgt'ed) examples reached here.  /* #pos=68 */
%   | else if ( tweets(A, E), follows(A, C) )
%   | | then return 0.22471200118124637;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.5561753109603148;  // std dev = 0.006, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( follows(G, A), follows(F, G) )
%   | | then return 0.43673342847834234;  // std dev = 0.852, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.6269043702805467;  // std dev = 0.058, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.565538909089025;  // std dev = 0.094, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.11272331354845751;  // std dev = 0.013, 216.000 (wgt'ed) examples reached here.  /* #neg=216 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.1484175620717518;  // std dev = 2.332, 25.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=8 */
%   | | | else return 0.1929298541875353;  // std dev = 2.372, 24.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(C, D) )
%   | then if ( tweets(A, D) )
%   | | then if ( follows(C, E), follows(E, A) )
%   | | | then return 0.3710454047499295;  // std dev = 1.384, 40.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=38 */
%   | | | else return 0.21054825870570149;  // std dev = 0.821, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.4191752585188759;  // std dev = 0.002, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else return 0.4329019992045595;  // std dev = 0.134, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else if ( follows(F, A) )
%   | then return -0.05218524019278404;  // std dev = 0.167, 237.000 (wgt'ed) examples reached here.  /* #neg=214 #pos=23 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.6238414477707072;  // std dev = 1.279, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return -0.19910594784617228;  // std dev = 0.032, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.02056863027311246;  // std dev = 1.535, 14.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=3 */
%   | | | else return 0.12240937934229855;  // std dev = 1.891, 17.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=6 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(C, A) )
%   | | then if ( tweets(A, E) )
%   | | | then return 0.30064388945264475;  // std dev = 1.406, 54.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=52 */
%   | | | else return 0.179111981995556;  // std dev = 1.309, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   | | else return 0.4708746253118994;  // std dev = 0.090, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(C, F) )
%   | | then return -0.3076718221097696;  // std dev = 0.855, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.37877654530375227;  // std dev = 0.109, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, G), follows(G, A) )
%   | then return -0.04400186501879541;  // std dev = 0.173, 176.000 (wgt'ed) examples reached here.  /* #neg=156 #pos=20 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.3156765725962167;  // std dev = 0.001, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(I, A) )
%   | | | then return -0.0989264964071981;  // std dev = 9.13e-09, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | | else return 0.09462326592298366;  // std dev = 3.147, 55.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=17 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.2779721168971877;  // std dev = 0.106, 78.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=77 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( tweets(D, F), tweets(E, F) )
%   | | | then return -0.061826799737011155;  // std dev = 1.340, 116.000 (wgt'ed) examples reached here.  /* #neg=109 #pos=7 */
%   | | | else return -0.09311282472013131;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( follows(D, G), recursion_accounttype(G, B) )
%   | | | then return 0.42809592830111143;  // std dev = 0.106, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.09311282472013131;  // std dev = 7.45e-09, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.5830671374372334;  // std dev = 1.177, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return -0.18845572398030616;  // std dev = 0.354, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | | else if ( follows(J, A), recursion_accounttype(J, B) )
%   | | | then return 0.25147738935590325;  // std dev = 1.05e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.09045136098239516;  // std dev = 6.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then if ( follows(E, A), follows(E, C) )
%   | | then return 0.19626588621422905;  // std dev = 0.143, 48.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=47 */
%   | | else return 0.27565529206554257;  // std dev = 0.050, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.2346389239151268;  // std dev = 0.064, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( follows(G, A), tweets(A, H) )
%   | | then return 0.359638965177923;  // std dev = 0.112, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(F, I), follows(I, F) )
%   | | | then return -0.019642211640213847;  // std dev = 0.635, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.24037267924021571;  // std dev = 0.088, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(J, A) )
%   | | then return -0.0552092905477283;  // std dev = 0.116, 222.000 (wgt'ed) examples reached here.  /* #neg=207 #pos=15 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.08978116358194521;  // std dev = 1.727, 24.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */
%   | | | else return 0.009442612288660848;  // std dev = 1.984, 33.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=9 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), follows(C, D) )
%   | | then return 0.18002029558291477;  // std dev = 0.111, 78.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=77 */
%   | | else return -0.031689231749991664;  // std dev = 0.776, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return -0.14956311263342018;  // std dev = 0.809, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.26805855425453623;  // std dev = 0.280, 25.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=23 */
%   | | else return -0.0818413741209941;  // std dev = 0.042, 203.000 (wgt'ed) examples reached here.  /* #neg=203 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.4217909226975484;  // std dev = 0.498, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.165803240852906;  // std dev = 0.013, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.16823725219011282;  // std dev = 1.114, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return 0.1708004589790273;  // std dev = 1.392, 12.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.16502969467764939;  // std dev = 0.032, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return 0.11720014643619114;  // std dev = 0.249, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, F), follows(A, E) )
%   | | | then return 0.06382668707429476;  // std dev = 0.927, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.319234000563719;  // std dev = 0.271, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.07598286726680235;  // std dev = 0.035, 187.000 (wgt'ed) examples reached here.  /* #neg=187 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.330634369366076;  // std dev = 0.420, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.14304627376153936;  // std dev = 0.007, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.27951074256866515;  // std dev = 0.920, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.05878926350429363;  // std dev = 1.500, 15.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=6 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, C) )
%   | then if ( tweets(C, D) )
%   | | then return 0.1218592992919142;  // std dev = 0.134, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | | else if ( tweets(C, E) )
%   | | | then return 0.008990684866695853;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.14855037856793152;  // std dev = 0.032, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.1568856741724166;  // std dev = 0.048, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   else if ( follows(F, A) )
%   | then return -0.042690634230883824;  // std dev = 0.101, 236.000 (wgt'ed) examples reached here.  /* #neg=213 #pos=23 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( tweets(A, I), tweets(G, I) )
%   | | | then return -0.034662338807170255;  // std dev = 0.860, 27.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=7 */
%   | | | else return 0.03110131326520953;  // std dev = 1.206, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.033683182494794704;  // std dev = 0.718, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | | else return 0.06859099927632305;  // std dev = 1.460, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */


Results
   AUC ROC   = 0.993941
   AUC PR    = 0.407574
   CLL	      = -0.137586
   Precision = 0.325301 at threshold = 0.5
   Recall    = 0.865385
   F1        = 0.472855


Total learning time: 11.871211528778076 seconds
Total inference time: 11.997 seconds
AUC ROC: 0.993941


Results scoring model
   AUC ROC   = 0.99349
   AUC PR    = 0.390096
   CLL	      = -0.119549
   Precision = 0.330532 at threshold = 0.5
   Recall    = 0.936508
   F1        = 0.488613


Total scoring time: 9.359 seconds
Parameter learned model CLL: -0.119549


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(A, D), recursion_accounttype(D, B)', 'true,false': 'follows(A, E), follows(E, C)', 'false': 'follows(F, A)', 'false,true': 'follows(F, G), recursion_accounttype(G, B)', 'false,true,true': 'follows(F, H), follows(H, A)', 'false,false': 'follows(A, I), recursion_accounttype(I, B)', 'false,false,false': 'follows(A, J), follows(J, K)'}, {'true,true': [0.122, 1, 65], 'true,false,true': [0.894, 1, 4], 'true,false,false': [0.0, 0, 13], 'false,true,true,true': [0.866, 1, 3], 'false,true,true,false': [0.0, 0, 20], 'false,true,false': [0.0, 203, 0], 'false,false,true': [0.0, 0, 4], 'false,false,false,true': [2.473, 26, 8], 'false,false,false,false': [2.4, 16, 9]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,true': 'follows(A, E), tweets(A, F)', 'false,true,false': 'follows(A, D)', 'false,false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, H), follows(H, I)'}, {'true': [0.071, 0, 82], 'false,true,true,true': [0.852, 1, 4], 'false,true,true,false': [0.075, 0, 18], 'false,true,false,true': [0.0, 181, 0], 'false,true,false,false': [0.85, 29, 1], 'false,false,true': [1.155, 2, 4], 'false,false,false,true': [2.39, 20, 8], 'false,false,false,false': [2.598, 27, 9]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(D, C)', 'true,false': 'tweets(A, E), follows(A, C)', 'false': 'follows(A, F), recursion_accounttype(F, B)', 'false,true': 'follows(G, A), follows(F, G)', 'false,false': 'follows(H, A)', 'false,false,true': 'follows(H, I), recursion_accounttype(I, B)', 'false,false,false': 'follows(A, J), follows(J, K)'}, {'true,true': [0.089, 0, 68], 'true,false,true': [1.155, 2, 4], 'true,false,false': [0.006, 0, 10], 'false,true,true': [0.852, 1, 5], 'false,true,false': [0.058, 0, 7], 'false,false,true,true': [0.094, 0, 15], 'false,false,true,false': [0.013, 216, 0], 'false,false,false,true': [2.332, 17, 8], 'false,false,false,false': [2.372, 15, 9]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(A, C), tweets(C, D)', 'true,true': 'tweets(A, D)', 'true,true,true': 'follows(C, E), follows(E, A)', 'false': 'follows(F, A)', 'false,false': 'tweets(A, G)', 'false,false,true': 'tweets(H, G), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, I), follows(I, J)'}, {'true,true,true,true': [1.384, 2, 38], 'true,true,true,false': [0.821, 1, 3], 'true,true,false': [0.002, 0, 19], 'true,false': [0.134, 0, 22], 'false,true': [0.167, 214, 23], 'false,false,true,true': [1.279, 1, 12], 'false,false,true,false': [0.032, 14, 0], 'false,false,false,true': [1.535, 11, 3], 'false,false,false,false': [1.891, 11, 6]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'true,true': 'follows(C, A)', 'true,true,true': 'tweets(A, E)', 'true,false': 'follows(C, F)', 'false': 'follows(A, G), follows(G, A)', 'false,false': 'follows(H, A), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A)'}, {'true,true,true,true': [1.406, 2, 52], 'true,true,true,false': [1.309, 2, 12], 'true,true,false': [0.09, 0, 8], 'true,false,true': [0.855, 3, 1], 'true,false,false': [0.109, 0, 4], 'false,true': [0.173, 156, 20], 'false,false,true': [0.001, 0, 12], 'false,false,false,true': [9.13e-09, 25, 0], 'false,false,false,false': [3.147, 38, 17]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(D, E), follows(E, A)', 'false,true,true': 'tweets(D, F), tweets(E, F)', 'false,true,false': 'follows(D, G), recursion_accounttype(G, B)', 'false,false': 'follows(A, H)', 'false,false,true': 'follows(I, H), recursion_accounttype(I, B)', 'false,false,false': 'follows(J, A), recursion_accounttype(J, B)'}, {'true': [0.106, 1, 77], 'false,true,true,true': [1.34, 109, 7], 'false,true,true,false': [0.0, 17, 0], 'false,true,false,true': [0.106, 0, 13], 'false,true,false,false': [7.45e-09, 47, 0], 'false,false,true,true': [1.177, 1, 21], 'false,false,true,false': [0.354, 43, 0], 'false,false,false,true': [1.05e-08, 0, 8], 'false,false,false,false': [6.45e-09, 14, 0]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(A, C), tweets(A, D)', 'true,true': 'follows(E, A), follows(E, C)', 'false': 'follows(A, F), recursion_accounttype(F, B)', 'false,true': 'follows(G, A), tweets(A, H)', 'false,true,false': 'follows(F, I), follows(I, F)', 'false,false': 'follows(J, A)', 'false,false,false': 'follows(A, K), follows(K, L)'}, {'true,true,true': [0.143, 1, 47], 'true,true,false': [0.05, 0, 5], 'true,false': [0.064, 0, 30], 'false,true,true': [0.112, 0, 6], 'false,true,false,true': [0.635, 1, 2], 'false,true,false,false': [0.088, 0, 4], 'false,false,true': [0.116, 207, 15], 'false,false,false,true': [1.727, 16, 8], 'false,false,false,false': [1.984, 24, 9]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'tweets(D, E), follows(C, D)', 'false': 'follows(F, A)', 'false,true': 'follows(F, G), recursion_accounttype(G, B)', 'false,false': 'tweets(A, H)', 'false,false,true': 'tweets(I, H), recursion_accounttype(I, B)', 'false,false,false': 'follows(A, J), follows(J, K)'}, {'true,true,true': [0.111, 1, 77], 'true,true,false': [0.776, 1, 3], 'true,false': [0.809, 1, 2], 'false,true,true': [0.28, 2, 23], 'false,true,false': [0.042, 203, 0], 'false,false,true,true': [0.498, 0, 12], 'false,false,true,false': [0.013, 27, 0], 'false,false,false,true': [1.114, 4, 3], 'false,false,false,false': [1.392, 6, 6]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'tweets(A, D)', 'false': 'follows(E, A)', 'false,true': 'follows(E, F), recursion_accounttype(F, B)', 'false,true,true': 'follows(A, F), follows(A, E)', 'false,false': 'tweets(A, G)', 'false,false,true': 'tweets(H, G), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, I), follows(I, J)'}, {'true,true': [0.032, 0, 67], 'true,false': [0.249, 1, 15], 'false,true,true,true': [0.927, 1, 6], 'false,true,true,false': [0.271, 0, 17], 'false,true,false': [0.035, 187, 0], 'false,false,true,true': [0.42, 0, 12], 'false,false,true,false': [0.007, 23, 0], 'false,false,false,true': [0.92, 2, 3], 'false,false,false,false': [1.5, 9, 6]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'tweets(A, D), follows(A, C)', 'true,true': 'tweets(C, D)', 'true,true,false': 'tweets(C, E)', 'false': 'follows(F, A)', 'false,false': 'follows(A, G), follows(G, H)', 'false,false,true': 'tweets(A, I), tweets(G, I)', 'false,false,false': 'tweets(A, J)'}, {'true,true,true': [0.134, 1, 41], 'true,true,false,true': [0.935, 1, 7], 'true,true,false,false': [0.032, 0, 4], 'true,false': [0.048, 0, 30], 'false,true': [0.101, 213, 23], 'false,false,true,true': [0.86, 20, 7], 'false,false,true,false': [1.206, 6, 4], 'false,false,false,true': [0.718, 7, 4], 'false,false,false,false': [1.46, 8, 6]}]]
[{'': [0.023242630385487066, 0.12870392390011973], 'false': [0.09105552213316877, 0.22222222222222235], 'false,false': [0.0, 0.2051134731399018], 'false,false,false': [0.179930795847751, 0.23040000000000005], 'false,true': [0.039930555555556024, -2.406394733177679e-16], 'false,true,true': [0.18750000000000006, -8.881784197001253e-17], 'true': [0.01492194674012769, 0.05246913580246895], 'true,false': [0.15999999999999986, -2.7328566760003855e-16]}, {'': [6.138307914296747e-05, 0.10178831437787884], 'false': [0.06456859482637593, 0.20403723955178837], 'false,false': [0.22222222222222224, 0.19543630337281614], 'false,false,false': [0.20408163265306098, 0.18749999999999975], 'false,true': [0.038494219977934174, 0.0034866426405830075], 'false,true,true': [0.14513096350608334, 0.0003146697172995674], 'false,true,false': [-3.680297319199414e-17, 0.02406914872960714]}, {'': [0.0234131193524891, 0.08431592644285534], 'false': [0.06666824692294324, 0.07092123363857827], 'false,false': [0.027971875137322796, 0.22631145626390656], 'false,false,false': [0.21759999999999988, 0.234375], 'false,true': [0.12100529163323097, 0.003402104660835205], 'false,false,true': [0.0005887686144681936, 7.756883204522601e-07], 'true': [0.0001157850711089151, 0.10908581404378898], 'true,false': [0.22222222222222218, 3.496988093587561e-06]}, {'': [0.03301956537891099, 0.06995548741639511], 'false': [0.027934352365777702, 0.21422737572849884], 'false,false': [0.22974422240439288, 0.1939295608296862], 'false,false,true': [0.1259201588830467, 7.259963354191592e-05], 'false,false,false': [0.16836734693877542, 0.21029687533436064], 'true': [0.04340773309694605, 0.0008184270655616676], 'true,true': [0.060965508090154955, 1.6372749292009894e-07], 'true,true,true': [0.04787649298025296, 0.16843808292704623]}, {'': [0.07583538960478557, 0.06513091872822138], 'true': [0.05517104845717806, 0.2106912226184601], 'true,false': [0.18278480373282835, 0.002991960941747057], 'false': [0.030030094680333384, 0.12361590830179277], 'false,false': [1.7236260566969955e-07, 0.13181956116467353], 'false,false,false': [3.3306690738754695e-18, 0.1800308214816056], 'true,true': [0.056702601602147726, 0.00804248293086432], 'true,true,true': [0.036625731449815145, 0.12241283665946508]}, {'': [0.011160798487682784, 0.05825352642003698], 'false': [0.025346196037579306, 0.12407396448263862], 'false,false': [0.1565307644474534, 0.027054773294392466], 'false,false,true': [0.0629882910023701, 0.002921311039158649], 'false,false,false': [1.3877787807814457e-17, 2.9738116731030977e-18], 'false,true': [0.013615356642475205, 0.04629523476221407], 'false,true,false': [0.0008711056434740691, 1.1810883240693154e-18], 'false,true,true': [0.015485598895534998, -3.2653618371328133e-18]}, {'': [0.013843003370794317, 0.04134601156258251], 'false': [0.05470501183152938, 0.03746584394946403], 'false,true': [0.0021079757208281777, 0.07522369559966582], 'false,true,false': [0.13429899100537965, 0.001942476839854046], 'false,false': [0.013536852011126574, 0.12294624509376231], 'false,false,false': [0.12421804930922763, 0.11930370380546444], 'true': [0.01904847698210442, 0.004037620804982422], 'true,true': [0.02038699061877097, 0.0004906605503246064]}, {'': [0.03163875132123129, 0.041421863406265184], 'false': [0.020586714700338533, 0.11381910869809767], 'false,false': [0.07991338987332244, 0.1672892452487896], 'false,false,false': [0.17719293020264756, 0.1615096751553567], 'false,false,true': [0.020674319567750416, 5.896014362376605e-06], 'true': [0.021220385016480752, 0.21808029797374787], 'true,true': [0.012404263846113359, 0.15050021040992811], 'false,true': [0.07867602416970025, 8.52114852452134e-06]}, {'': [0.013087526402549706, 0.034445532362255026], 'false': [0.016331767239403747, 0.09703668351361386], 'false,false': [0.055599383626784446, 0.16385569997860996], 'false,false,false': [0.169158425112298, 0.14990863210395625], 'false,false,true': [0.014715150154885817, 2.281758748419279e-06], 'false,true': [0.052367786187988465, 6.734184098746567e-06], 'false,true,true': [0.12284545636354151, 0.0043213077865785435], 'true': [0.0010211746095468296, 0.06176870464546262]}, {'': [0.02185407852262518, 0.025195312427936704], 'false': [0.01021763242046482, 0.0798912700053409], 'false,false': [0.060166514504290204, 0.1061496853304712], 'false,false,false': [0.04683184767554791, 0.1522203932777462], 'false,false,true': [0.027368929180843195, 0.14556401746637498], 'true': [0.03181904306971555, 0.002324717010092847], 'true,true': [0.017837156392417768, 0.07733175029676624], 'true,true,false': [0.109375, 0.0002606454863102285]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
0;true;follows(A, D), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, E), follows(E, C).;true;true
0;false;follows(F, A).;true;true
0;false,true;follows(F, G), recursion_accounttype(G, B).;true;true
0;false,true,true;follows(F, H), follows(H, A).;true;true
0;false,false;follows(A, I), recursion_accounttype(I, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(D, A).;true;true
1;false,true;follows(E, D), recursion_accounttype(E, B).;true;true
1;false,true,true;follows(A, E), tweets(A, F).;true;true
1;false,true,false;follows(A, D).;true;true
2;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(D, C).;true;true
2;true,false;tweets(A, E), follows(A, C).;true;true
2;false;follows(A, F), recursion_accounttype(F, B).;true;true
2;false,false;follows(H, A).;true;true
2;false,false,true;follows(H, I), recursion_accounttype(I, B).;true;true
3;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
3;true;follows(A, C), tweets(C, D).;true;true
3;true,true;tweets(A, D).;true;true
3;false;follows(F, A).;true;true
3;false,false;tweets(A, G).;true;true
3;false,false,true;tweets(H, G), recursion_accounttype(H, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(A, G), follows(G, A).;true;true
4;false,false;follows(H, A), recursion_accounttype(H, B).;true;true
4;false,false,false;follows(I, A).;true;true
5;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
5;false;follows(A, D), follows(D, A).;true;true
5;false,true;follows(D, E), follows(E, A).;true;true
5;false,true,true;tweets(D, F), tweets(E, F).;true;true
5;false,true,false;follows(D, G), recursion_accounttype(G, B).;true;true
5;false,false;follows(A, H).;true;true
5;false,false,false;follows(J, A), recursion_accounttype(J, B).;true;true
6;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
6;true;follows(A, C), tweets(A, D).;true;true
6;true,true;follows(E, A), follows(E, C).;true;true
6;false;follows(A, F), recursion_accounttype(F, B).;true;true
6;false,true;follows(G, A), tweets(A, H).;true;true
6;false,true,false;follows(F, I), follows(I, F).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;false;follows(F, A).;true;true
7;false,true;follows(F, G), recursion_accounttype(G, B).;true;true
7;false,false;tweets(A, H).;true;true
7;false,false,true;tweets(I, H), recursion_accounttype(I, B).;true;true
8;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
8;true;tweets(A, D).;true;true
8;false;follows(E, A).;true;true
8;false,true;follows(E, F), recursion_accounttype(F, B).;true;true
8;false,false;tweets(A, G).;true;true
8;false,false,true;tweets(H, G), recursion_accounttype(H, B).;true;true
9;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
9;true;tweets(A, D), follows(A, C).;true;true
9;true,true;tweets(C, D).;true;true
9;true,true,false;tweets(C, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then if ( tweets(C, D) )
%   | | then return 0.8116373071925351;  // std dev = 0.211, 43.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=41 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.8581489350995123;  // std dev = 0.000, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   else if ( follows(E, A) )
%   | then if ( follows(F, E), follows(F, A) )
%   | | then return -0.12130311969500834;  // std dev = 0.142, 146.000 (wgt'ed) examples reached here.  /* #neg=143 #pos=3 */
%   | | else if ( follows(E, G), recursion_accounttype(G, B) )
%   | | | then return 0.8105298874804645;  // std dev = 0.976, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | | else return -0.14185106490048766;  // std dev = 6.99e-08, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.10139217834275562;  // std dev = 2.610, 37.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=9 */
%   | | | else return 0.2059750220560341;  // std dev = 2.284, 23.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=8 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(C, D) )
%   | then return 0.7248020682605257;  // std dev = 0.038, 68.000 (wgt'ed) examples reached here.  /* #pos=68 */
%   | else return 0.654045544215641;  // std dev = 0.250, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G), follows(E, G) )
%   | | | then return 0.7528666521208363;  // std dev = 0.227, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.562316580279539;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return -0.12693192905633846;  // std dev = 0.016, 223.000 (wgt'ed) examples reached here.  /* #neg=223 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.8071572044667856;  // std dev = 0.179, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.15957628688787392;  // std dev = 0.032, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.14336209719576298;  // std dev = 1.692, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | | else return 0.2841271571790862;  // std dev = 1.767, 13.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(C, D) )
%   | then if ( recursion_accounttype(D, B), follows(D, A) )
%   | | then return 0.5383257240958554;  // std dev = 0.154, 41.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=40 */
%   | | else return 0.5577341625307259;  // std dev = 0.028, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | else return 0.5730803219462978;  // std dev = 0.015, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(F, E), follows(A, F) )
%   | | | then return 0.42620742767157194;  // std dev = 0.727, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.6057400102517347;  // std dev = 0.310, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return -0.11355905669483256;  // std dev = 0.014, 218.000 (wgt'ed) examples reached here.  /* #neg=218 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.3836731527301175;  // std dev = 0.818, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.04906702971326357;  // std dev = 2.091, 36.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=8 */
%   | | | else return 0.05881783946010618;  // std dev = 2.598, 35.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, C) )
%   | then return 0.4098326769817663;  // std dev = 0.136, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | else if ( follows(C, E), follows(E, A) )
%   | | then if ( follows(A, E), follows(E, C) )
%   | | | then return 0.3412623636976765;  // std dev = 0.959, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return 0.155204882403379;  // std dev = 1.484, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | else return 0.41834665444277697;  // std dev = 0.017, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( follows(F, A) )
%   | then return -0.047522272222771986;  // std dev = 0.174, 226.000 (wgt'ed) examples reached here.  /* #neg=203 #pos=23 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.5230565157022274;  // std dev = 1.193, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return -0.1455819152792752;  // std dev = 0.028, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.38846967484616546;  // std dev = 1.309, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | | else return 0.11811030410392714;  // std dev = 1.911, 17.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=6 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then return 0.315083079412191;  // std dev = 0.128, 60.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=59 */
%   | else if ( follows(C, F), follows(F, A) )
%   | | then if ( recursion_accounttype(F, B), follows(A, C) )
%   | | | then return 0.3401694707994454;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.2206113213132892;  // std dev = 1.321, 13.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=11 */
%   | | else return 0.3229076016319822;  // std dev = 0.014, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.4056665796822825;  // std dev = 0.228, 25.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=23 */
%   | | else return -0.09844938737527244;  // std dev = 0.011, 202.000 (wgt'ed) examples reached here.  /* #neg=202 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.37175573927730243;  // std dev = 0.193, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.10419453769165872;  // std dev = 1.613, 24.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */
%   | | | else return 0.03575223158483684;  // std dev = 2.543, 32.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=9 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, A) )
%   | then return 0.24741549763292897;  // std dev = 0.171, 69.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=67 */
%   | else if ( tweets(A, E), tweets(C, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.015293303642456263;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return -0.07515917263491696;  // std dev = 0.808, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.2584818860851139;  // std dev = 0.018, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( follows(G, A) )
%   | then return -0.052444885975876314;  // std dev = 0.149, 246.000 (wgt'ed) examples reached here.  /* #neg=223 #pos=23 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.4614169034806762;  // std dev = 0.448, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.13858512711281878;  // std dev = 0.025, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.1450162055450192;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.04955502022366215;  // std dev = 1.944, 19.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=6 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(E, C) )
%   | then if ( recursion_accounttype(D, B), follows(C, D) )
%   | | then return 0.22119667776409357;  // std dev = 0.028, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | else return 0.18918981046767722;  // std dev = 0.195, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | else return 0.28335268172902844;  // std dev = 0.034, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.38544653175328064;  // std dev = 0.072, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return -0.08570804167443366;  // std dev = 0.011, 225.000 (wgt'ed) examples reached here.  /* #neg=225 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.3577247676901741;  // std dev = 0.388, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.12199876538558642;  // std dev = 0.015, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.11650480372831643;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.039627797063744384;  // std dev = 1.991, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.1949144699652111;  // std dev = 0.149, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return 0.12666138695775833;  // std dev = 0.238, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( tweets(A, G) )
%   | | | then return 0.2554327855988841;  // std dev = 1.034, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return 0.01218371060428233;  // std dev = 1.098, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else return -0.07925703717932586;  // std dev = 0.010, 224.000 (wgt'ed) examples reached here.  /* #neg=224 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.40880055630799345;  // std dev = 0.763, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.19211672195037688;  // std dev = 0.430, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.1056942297924221;  // std dev = 0.549, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.1704584824999114;  // std dev = 1.728, 13.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), tweets(C, E) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(A, F), follows(F, C) )
%   | | | then return 0.14279385295833516;  // std dev = 1.006, 46.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=45 */
%   | | | else return -0.03760420706830279;  // std dev = 0.852, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( tweets(G, E), follows(G, A) )
%   | | | then return -0.05919808868143439;  // std dev = 1.064, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return 0.1904658363149608;  // std dev = 0.129, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.18907272722179136;  // std dev = 0.057, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.18546530787837662;  // std dev = 0.077, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(I, A) )
%   | | then return -0.051136343376423865;  // std dev = 0.087, 229.000 (wgt'ed) examples reached here.  /* #neg=214 #pos=15 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.004380626816983612;  // std dev = 0.933, 28.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=8 */
%   | | | else return 0.0677036497540081;  // std dev = 2.231, 24.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=9 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(C, D) )
%   | | then if ( follows(E, A), follows(E, C) )
%   | | | then return 0.13252158235443742;  // std dev = 1.675, 89.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=85 */
%   | | | else return 0.2143602772806109;  // std dev = 0.371, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.4921937134909971;  // std dev = 0.405, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.6261982426605247;  // std dev = 0.314, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(C, G) )
%   | | then return -0.07311128869533676;  // std dev = 0.151, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | | else if ( tweets(A, H) )
%   | | | then return -0.22392317793470964;  // std dev = 0.314, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return -0.3165066885685867;  // std dev = 2.11e-08, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else if ( follows(I, A), recursion_accounttype(I, B) )
%   | then return 0.06078633306919672;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else return -0.0706785822301966;  // std dev = 7.45e-09, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */


Results
   AUC ROC   = 0.993585
   AUC PR    = 0.34398
   CLL	      = -0.120203
   Precision = 0.336471 at threshold = 0.5
   Recall    = 0.916667
   F1        = 0.492255


Total learning time: 14.65771746635437 seconds
Total inference time: 16.602 seconds
AUC ROC: 0.993585


Results scoring model
   AUC ROC   = 0.993475
   AUC PR    = 0.377509
   CLL	      = -0.113195
   Precision = 0.336111 at threshold = 0.5
   Recall    = 0.960317
   F1        = 0.497942


Total scoring time: 13.474 seconds
Refined model CLL: -0.113195


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.993585
   AUC PR    = 0.34398
   CLL	      = -0.120203
   Precision = 0.336471 at threshold = 0.5
   Recall    = 0.916667
   F1        = 0.492255


Total learning time: 49.361928995132445 seconds
Total inference time: 16.602 seconds
AUC ROC: 0.993585
Total revision time: 49.361928995132445
Best scored revision CLL: -0.113195


Dataset: 14_cora_twitter, Fold: 1, Type: Transfer (trRDN-B), Time: 00:05:31
{'AUC ROC': 0.993585, 'AUC PR': 0.34398, 'CLL': -0.120203, 'Precision': [0.336471, 0.5], 'Recall': 0.916667, 'F1': 0.492255, 'Learning time': 49.361928995132445, 'Inference time': 16.602, 'parameter': {'AUC ROC': 0.993941, 'AUC PR': 0.407574, 'CLL': -0.137586, 'Precision': [0.325301, 0.5], 'Recall': 0.865385, 'F1': 0.472855, 'Learning time': 11.871211528778076, 'Inference time': 11.997}}


Starting fold 2

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos  examples: 126
Target test neg examples: 16128

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.8438632208137985;  // std dev = 0.119, 70.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=69 */
%   | else return 0.7993254056877476;  // std dev = 0.235, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   else if ( follows(E, A) )
%   | then if ( follows(F, E), follows(F, A) )
%   | | then return -0.1239939220433448;  // std dev = 0.132, 112.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=2 */
%   | | else if ( follows(E, G), recursion_accounttype(G, B) )
%   | | | then return 0.7711924133603816;  // std dev = 1.351, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   | | | else return -0.14185106490048763;  // std dev = 7.88e-08, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.8196873966379734;  // std dev = 0.981, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | | | else return -0.14185106490048768;  // std dev = 4.94e-08, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.24839283753853675;  // std dev = 3.123, 41.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=16 */
%   | | | else return 0.20814893509951235;  // std dev = 2.133, 20.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7240123227794839;  // std dev = 0.032, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( follows(D, E) )
%   | | | then return 0.7505711052094608;  // std dev = 0.119, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.4423078749483797;  // std dev = 0.882, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.4001798506481804;  // std dev = 0.813, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(F, A) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.7446786851546445;  // std dev = 0.132, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.12658015635986053;  // std dev = 0.015, 231.000 (wgt'ed) examples reached here.  /* #neg=231 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.11414189215986048;  // std dev = 3.160, 67.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=19 */
%   | | | else return 0.0962132478836729;  // std dev = 3.918, 78.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=21 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(C, D), tweets(D, E) )
%   | | then return 0.5598976952344159;  // std dev = 0.035, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | | else return 0.3105108932117022;  // std dev = 0.869, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( tweets(A, F) )
%   | | then return 0.5577719422464895;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.235394412774007;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.6160739397246024;  // std dev = 0.073, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.1087330110651638;  // std dev = 0.885, 144.000 (wgt'ed) examples reached here.  /* #neg=143 #pos=1 */
%   | | | else return -0.001857938135802343;  // std dev = 2.501, 99.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=16 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.09199607427700233;  // std dev = 3.908, 91.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=25 */
%   | | | else return 0.19607092080610494;  // std dev = 2.873, 38.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=15 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, C) )
%   | then if ( follows(C, E), follows(E, A) )
%   | | then return 0.41878252688739803;  // std dev = 7.88e-08, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | else return 0.3311087052717091;  // std dev = 0.284, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else return 0.43072092198195594;  // std dev = 0.148, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, G), follows(G, F) )
%   | | | then return 0.26023568379699324;  // std dev = 0.698, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.5856316159927294;  // std dev = 0.252, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return -0.10662039203500602;  // std dev = 0.059, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.35257158368313135;  // std dev = 0.310, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.08736719633177813;  // std dev = 3.870, 87.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=25 */
%   | | | else return 0.20980794539208641;  // std dev = 2.704, 35.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=15 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, A) )
%   | then return 0.32426362350926596;  // std dev = 0.100, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | else return 0.2610523075173964;  // std dev = 0.260, 24.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=22 */
%   else if ( follows(E, A) )
%   | then if ( follows(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.24693497269708856;  // std dev = 0.848, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.4408367622137753;  // std dev = 0.235, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return -0.09576141860795635;  // std dev = 0.058, 233.000 (wgt'ed) examples reached here.  /* #neg=231 #pos=2 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( tweets(J, H), recursion_accounttype(J, B) )
%   | | | then return 0.569786831606792;  // std dev = 0.651, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return -0.1634875556578767;  // std dev = 0.055, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.12112137010930743;  // std dev = 3.094, 45.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=16 */
%   | | | else return 0.06774839710299015;  // std dev = 2.558, 34.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.24993238140218857;  // std dev = 0.120, 71.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=70 */
%   | else return 0.1461525822858596;  // std dev = 0.327, 17.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(F, E), follows(A, F) )
%   | | | then return 0.10048106666959651;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.3552031085279479;  // std dev = 0.304, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return -0.0893764030766162;  // std dev = 0.052, 209.000 (wgt'ed) examples reached here.  /* #neg=209 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.4643868056572698;  // std dev = 0.672, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return -0.1513970686151688;  // std dev = 0.158, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.07209266403854497;  // std dev = 2.979, 42.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=14 */
%   | | | else return 0.021483293217848247;  // std dev = 2.528, 31.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=9 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, A) )
%   | then if ( recursion_accounttype(D, B), follows(D, C) )
%   | | then if ( tweets(A, E), tweets(C, E) )
%   | | | then return 0.1507095667806578;  // std dev = 1.363, 31.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=29 */
%   | | | else return 0.23509783078234586;  // std dev = 0.072, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.215518216475354;  // std dev = 0.050, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | else return 0.23748586301747654;  // std dev = 0.106, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else if ( follows(F, A) )
%   | then return -0.05247199559997061;  // std dev = 0.117, 248.000 (wgt'ed) examples reached here.  /* #neg=225 #pos=23 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.3149231060572243;  // std dev = 1.283, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | | | else return -0.14080859542098695;  // std dev = 0.179, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.11579522853863725;  // std dev = 3.029, 41.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=16 */
%   | | | else return 0.23116223170554165;  // std dev = 1.871, 14.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A) )
%   | | | then return 0.19904752651463745;  // std dev = 0.342, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   | | | else return -0.022100686270870123;  // std dev = 0.938, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.27679559052246394;  // std dev = 0.076, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | else return -0.08662591619898152;  // std dev = 0.313, 237.000 (wgt'ed) examples reached here.  /* #neg=237 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then if ( follows(A, H), follows(G, H) )
%   | | then return 0.2124245874946317;  // std dev = 0.070, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return -0.2779554953587526;  // std dev = 0.621, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( follows(A, I), follows(I, A) )
%   | | then return -0.06436702491689238;  // std dev = 0.069, 23.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=1 */
%   | | else if ( follows(J, A), recursion_accounttype(J, B) )
%   | | | then return 0.23368734726309473;  // std dev = 0.056, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.029566594632357012;  // std dev = 3.755, 74.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=22 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(D, E) )
%   | | then if ( follows(A, F) )
%   | | | then return 0.16774357518294605;  // std dev = 0.829, 73.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=72 */
%   | | | else return 0.11210415488687711;  // std dev = 0.717, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else return 0.2456105937890153;  // std dev = 0.076, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else return -0.0814987685225458;  // std dev = 0.306, 224.000 (wgt'ed) examples reached here.  /* #neg=224 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.180242600913879;  // std dev = 0.189, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return -0.07627661212779165;  // std dev = 0.024, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.6659309090648564;  // std dev = 0.504, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return -0.2869490605128487;  // std dev = 0.059, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else return 0.17695177776661933;  // std dev = 0.500, 14.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.1384289285896726;  // std dev = 0.149, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), follows(E, A) )
%   | | then if ( follows(A, F) )
%   | | | then return -0.057682737065636966;  // std dev = 0.601, 119.000 (wgt'ed) examples reached here.  /* #neg=117 #pos=2 */
%   | | | else return -0.08169035398997627;  // std dev = 0.564, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | else if ( follows(D, G), recursion_accounttype(G, B) )
%   | | | then return 0.20187162539338285;  // std dev = 0.107, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return -0.0755486300723868;  // std dev = 0.311, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.32931339544434723;  // std dev = 1.070, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return -0.17336187951681767;  // std dev = 0.876, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.03182357705734588;  // std dev = 0.737, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | | else return -0.06610224189110486;  // std dev = 2.414, 32.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=9 */


Results
   AUC ROC   = 0.993305
   AUC PR    = 0.36908
   CLL	      = -0.108217
   Precision = 0.334254 at threshold = 0.5
   Recall    = 0.960317
   F1        = 0.495902


Total learning time: 18.540855407714844 seconds
Total inference time: 14.608 seconds
AUC ROC: 0.993305


Results scoring model
   AUC ROC   = 0.993907
   AUC PR    = 0.371496
   CLL	      = -0.123231
   Precision = 0.337156 at threshold = 0.5
   Recall    = 0.942308
   F1        = 0.496622


Total scoring time: 18.82 seconds
Parameter learned model CLL: -0.123231


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'tweets(A, D)', 'false': 'follows(E, A)', 'false,true': 'follows(F, E), follows(F, A)', 'false,true,false': 'follows(E, G), recursion_accounttype(G, B)', 'false,false': 'tweets(A, H)', 'false,false,true': 'tweets(I, H), recursion_accounttype(I, B)', 'false,false,false': 'follows(A, J)'}, {'true,true': [0.119, 1, 69], 'true,false': [0.235, 1, 16], 'false,true,true': [0.132, 110, 2], 'false,true,false,true': [1.351, 2, 21], 'false,true,false,false': [7.88e-08, 86, 0], 'false,false,true,true': [0.981, 1, 25], 'false,false,true,false': [4.94e-08, 46, 0], 'false,false,false,true': [3.123, 25, 16], 'false,false,false,false': [2.133, 13, 7]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), recursion_accounttype(D, B)', 'false,true': 'follows(A, E), follows(E, D)', 'false,true,true': 'follows(D, E)', 'false,false': 'follows(F, A)', 'false,false,true': 'follows(F, G), recursion_accounttype(G, B)', 'false,false,false': 'tweets(A, H)'}, {'true': [0.032, 0, 85], 'false,true,true,true': [0.119, 0, 10], 'false,true,true,false': [0.882, 1, 2], 'false,true,false': [0.813, 1, 2], 'false,false,true,true': [0.132, 0, 17], 'false,false,true,false': [0.015, 231, 0], 'false,false,false,true': [3.16, 48, 19], 'false,false,false,false': [3.918, 57, 21]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(A, D)', 'true,true': 'follows(C, D), tweets(D, E)', 'true,false': 'tweets(A, F)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A)', 'false,false,true': 'follows(H, I), follows(I, A)', 'false,false,false': 'follows(A, J), follows(J, K)'}, {'true,true,true': [0.035, 0, 67], 'true,true,false': [0.869, 1, 3], 'true,false,true': [0.0, 0, 13], 'true,false,false': [0.816, 1, 2], 'false,true': [0.073, 0, 14], 'false,false,true,true': [0.885, 143, 1], 'false,false,true,false': [2.501, 83, 16], 'false,false,false,true': [3.908, 66, 25], 'false,false,false,false': [2.873, 23, 15]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'tweets(A, D), follows(A, C)', 'true,true': 'follows(C, E), follows(E, A)', 'false': 'follows(F, A)', 'false,true': 'follows(F, G), recursion_accounttype(G, B)', 'false,true,true': 'follows(A, G), follows(G, F)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, I), follows(I, J)'}, {'true,true,true': [7.88e-08, 0, 37], 'true,true,false': [0.284, 1, 9], 'true,false': [0.148, 0, 39], 'false,true,true,true': [0.698, 1, 4], 'false,true,true,false': [0.252, 0, 19], 'false,true,false': [0.059, 206, 0], 'false,false,true': [0.31, 1, 8], 'false,false,false,true': [3.87, 62, 25], 'false,false,false,false': [2.704, 20, 15]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(C, D), follows(D, A)', 'false': 'follows(E, A)', 'false,true': 'follows(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'tweets(A, H), follows(A, I)', 'false,false,true': 'tweets(J, H), recursion_accounttype(J, B)', 'false,false,false': 'follows(A, K)'}, {'true,true': [0.1, 0, 63], 'true,false': [0.26, 2, 22], 'false,true,true,true': [0.848, 1, 5], 'false,true,true,false': [0.235, 0, 16], 'false,true,false': [0.058, 231, 2], 'false,false,true,true': [0.651, 0, 21], 'false,false,true,false': [0.055, 46, 0], 'false,false,false,true': [3.094, 29, 16], 'false,false,false,false': [2.558, 23, 11]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(A, D)', 'false': 'follows(E, A)', 'false,true': 'follows(E, F), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, E), follows(A, F)', 'false,false': 'tweets(A, G)', 'false,false,true': 'tweets(H, G), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, I), follows(I, J)'}, {'true,true': [0.12, 1, 70], 'true,false': [0.327, 2, 15], 'false,true,true,true': [0.894, 1, 4], 'false,true,true,false': [0.304, 0, 19], 'false,true,false': [0.052, 209, 0], 'false,false,true,true': [0.672, 0, 25], 'false,false,true,false': [0.158, 44, 0], 'false,false,false,true': [2.979, 28, 14], 'false,false,false,false': [2.528, 22, 9]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(C, D), follows(D, A)', 'true,true': 'recursion_accounttype(D, B), follows(D, C)', 'true,true,true': 'tweets(A, E), tweets(C, E)', 'false': 'follows(F, A)', 'false,false': 'tweets(A, G)', 'false,false,true': 'tweets(H, G), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, I)'}, {'true,true,true,true': [1.363, 2, 29], 'true,true,true,false': [0.072, 0, 4], 'true,true,false': [0.05, 0, 30], 'true,false': [0.106, 0, 22], 'false,true': [0.117, 225, 23], 'false,false,true,true': [1.283, 1, 25], 'false,false,true,false': [0.179, 49, 0], 'false,false,false,true': [3.029, 25, 16], 'false,false,false,false': [1.871, 7, 7]}], ['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), recursion_accounttype(E, B)', 'true,true,true': 'follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,true': 'follows(A, H), follows(G, H)', 'false,false': 'follows(A, I), follows(I, A)', 'false,false,false': 'follows(J, A), recursion_accounttype(J, B)'}, {'true,true,true,true': [0.342, 0, 57], 'true,true,true,false': [0.938, 1, 6], 'true,true,false': [0.076, 0, 52], 'true,false': [0.313, 237, 0], 'false,true,true': [0.07, 0, 14], 'false,true,false': [0.621, 2, 1], 'false,false,true': [0.069, 22, 1], 'false,false,false,true': [0.056, 0, 3], 'false,false,false,false': [3.755, 52, 22]}], ['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(E, A), follows(D, E)', 'true,true,true': 'follows(A, F)', 'false': 'follows(G, A)', 'false,true': 'follows(G, H), recursion_accounttype(H, B)', 'false,false': 'follows(A, I)', 'false,false,true': 'follows(J, I), recursion_accounttype(J, B)'}, {'true,true,true,true': [0.829, 1, 72], 'true,true,true,false': [0.717, 1, 14], 'true,true,false': [0.076, 0, 29], 'true,false': [0.306, 224, 0], 'false,true,true': [0.189, 0, 18], 'false,true,false': [0.024, 36, 0], 'false,false,true,true': [0.504, 0, 16], 'false,false,true,false': [0.059, 20, 0], 'false,false,false': [0.5, 7, 7]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), follows(E, A)', 'false,true,true': 'follows(A, F)', 'false,true,false': 'follows(D, G), recursion_accounttype(G, B)', 'false,false': 'follows(A, H), follows(H, I)', 'false,false,true': 'recursion_accounttype(I, B)', 'false,false,false': 'tweets(A, J)'}, {'true': [0.149, 0, 85], 'false,true,true,true': [0.601, 117, 2], 'false,true,true,false': [0.564, 35, 0], 'false,true,false,true': [0.107, 0, 21], 'false,true,false,false': [0.311, 68, 0], 'false,false,true,true': [1.07, 0, 33], 'false,false,true,false': [0.876, 60, 0], 'false,false,false,true': [0.737, 8, 6], 'false,false,false,false': [2.414, 23, 9]}]]
[{'': [0.022460034350640704, 0.16033866385776852], 'false': [0.09324133412501895, 0.23065181751370972], 'false,false': [0.2266589506172851, 0.23488309594195214], 'false,false,false': [0.2379535990481851, 0.2275000000000001], 'false,false,true': [0.03698224852071082, 5.3097622916855314e-17], 'false,true': [0.01753826530612236, 0.15554246275566072], 'false,true,false': [0.07939508506616269, 7.229359230117299e-17], 'true': [0.014081632653060134, 0.055363321799307655]}, {'': [1.1950412165450576e-05, 0.11748358580609183], 'false': [0.1163467218544792, 0.10196831036334368], 'false,true': [0.07777545964080289, 0.22012802379456212], 'false,false': [0.04853862077473134, 0.1748226276306138], 'false,false,false': [0.14907311284260774, 0.19679227485758113], 'false,true,true': [0.0014084486719773358, 0.25923507123099293], 'false,false,true': [0.0010224719486553327, 9.500847599331219e-07]}, {'': [0.022325474971627582, 0.10284863120101477], 'false': [0.005381935713337782, 0.09274847483741608], 'false,false': [0.031713196988479055, 0.1846723231229703], 'false,false,false': [0.16786433116892086, 0.21728216313989282], 'false,false,true': [0.005437649447740471, 0.06316341599183109], 'true': [0.013965988129223486, 0.05749933693558251], 'true,false': [-6.832141690000964e-17, 0.2222222222222222], 'true,true': [1.8770507026298684e-05, 0.18889198103977584]}, {'': [0.010578600498848085, 0.099792383889767], 'false': [0.0406769871276381, 0.18299518425843167], 'false,false': [0.09595008416231367, 0.1857797293040001], 'false,false,false': [0.17217478259941663, 0.20890691081798743], 'false,true': [0.04041376189069531, 1.7034005410917045e-05], 'false,true,true': [0.09746783591225498, 0.0033406750747023415], 'true': [0.0184676653429491, 0.0005597884873949646], 'true,true': [1.6803375507840208e-16, 0.08074679598679871]}, {'': [0.01959486478527807, 0.0812430889514555], 'false': [0.02522607901108422, 0.1670436658545552], 'false,false': [0.12207743814464547, 0.20471534291973292], 'false,false,false': [0.21271190668254394, 0.1925089930405377], 'false,false,true': [0.020178152748198352, 6.655970631007791e-05], 'false,true': [0.04266286363120582, 0.0033930871683862966], 'false,true,true': [0.1198541612652028, 0.0034621532063369154], 'true': [0.00015917306686086968, 0.06772013899929943]}, {'': [0.033950271135964494, 0.07296862687750105], 'false': [0.01910774589725546, 0.153840341355155], 'false,false': [0.09451684171694678, 0.20969665734343573], 'false,false,false': [0.21123804494901788, 0.206134696249811], 'false,false,true': [0.018066130738154912, 0.0005671443002948539], 'true': [0.014387959193350024, 0.10696206073821873], 'false,true': [0.04789740186573712, 1.3055442346001124e-05], 'false,true,true': [0.15999999999999998, 0.00487936010275942]}, {'': [0.022941002030392014, 0.061495915623238556], 'false': [0.013710461425651337, 0.1426008984552026], 'false,false': [0.06940560850007074, 0.23296286329326937], 'false,false,false': [0.22375742012914643, 0.2500000000000001], 'false,false,true': [0.06328698284056954, 0.000652546503110774], 'true': [0.02985777199118047, 0.0005103060411708806], 'true,true': [0.05397441024104743, 8.310311450025291e-05], 'true,true,true': [0.059957564138418316, 0.001297460332486837]}, {'': [0.02647108954902544, 0.1346018588101885], 'false': [0.061644195291704604, 0.14518848589941302], 'false,false': [0.004808013532020839, 0.1847327235697322], 'false,false,false': [0.0010616831483007312, 0.19055552416819552], 'false,true': [0.00486341717404882, 0.12858487988605385], 'true': [0.016354811698421397, 0.0004146689550553249], 'true,true': [0.02034043493135625, 0.005716475529762681], 'true,true,true': [0.002049625632679377, 0.12572250199899418]}, {'': [0.020284847173774698, 0.12663112189038578], 'false': [0.015296496659256253, 0.23689308061429937], 'false,false': [0.23133897150153324, 0.2500000000000001], 'false,false,true': [0.015862268698340287, 0.00017356200079492455], 'true': [0.013433594211024042, 0.00041711665854210587], 'false,true': [0.0019900231560870518, 1.5697857668204678e-05], 'true,true': [0.014087869344333008, 0.005709254452441472], 'true,true,true': [0.00940976539107919, 0.034286580648261795]}, {'': [0.0002619911043051867, 0.04218283498176888], 'false': [0.009039146228531877, 0.09934333872137607], 'false,false': [0.07839617628833756, 0.1405515157558524], 'false,false,false': [0.0387905603808702, 0.1821534005968823], 'false,false,true': [0.03468272073532583, 0.012777068693135973], 'false,true': [0.00451275486134377, 0.015087840127444744], 'false,true,false': [0.0005454967112163819, 0.0014192853516953833], 'false,true,true': [0.003037469845851884, 0.009083350441445447]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
0;false;follows(E, A).;true;true
0;false,true;follows(F, E), follows(F, A).;true;true
0;false,true,false;follows(E, G), recursion_accounttype(G, B).;true;true
0;false,false;tweets(A, H).;true;true
0;false,false,true;tweets(I, H), recursion_accounttype(I, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), recursion_accounttype(D, B).;true;true
1;false,true;follows(A, E), follows(E, D).;true;true
1;false,true,true;follows(D, E).;true;true
1;false,false;follows(F, A).;true;true
1;false,false,true;follows(F, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;true;follows(A, D).;true;true
2;true,true;follows(C, D), tweets(D, E).;true;true
2;true,false;tweets(A, F).;true;true
3;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
3;true;tweets(A, D), follows(A, C).;true;true
3;true,true;follows(C, E), follows(E, A).;true;true
3;false;follows(F, A).;true;true
3;false,true;follows(F, G), recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
4;true;follows(C, D), follows(D, A).;true;true
4;false;follows(E, A).;true;true
4;false,false;tweets(A, H), follows(A, I).;true;true
4;false,false,true;tweets(J, H), recursion_accounttype(J, B).;true;true
5;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
5;false;follows(E, A).;true;true
5;false,true;follows(E, F), recursion_accounttype(F, B).;true;true
5;false,false;tweets(A, G).;true;true
5;false,false,true;tweets(H, G), recursion_accounttype(H, B).;true;true
6;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
6;true;follows(C, D), follows(D, A).;true;true
6;true,true;recursion_accounttype(D, B), follows(D, C).;true;true
6;true,true,true;tweets(A, E), tweets(C, E).;true;true
6;false;follows(F, A).;true;true
6;false,false;tweets(A, G).;true;true
6;false,false,true;tweets(H, G), recursion_accounttype(H, B).;true;true
7;;accounttype(A, B) :- tweets(A, C).;true;true
7;true;tweets(D, C), recursion_accounttype(D, B).;true;true
7;true,true;follows(A, E), recursion_accounttype(E, B).;true;true
7;true,true,true;follows(F, A).;true;true
7;false;follows(A, G), recursion_accounttype(G, B).;true;true
7;false,false;follows(A, I), follows(I, A).;true;true
7;false,false,false;follows(J, A), recursion_accounttype(J, B).;true;true
8;;accounttype(A, B) :- tweets(A, C).;true;true
8;true;tweets(D, C), recursion_accounttype(D, B).;true;true
8;false;follows(G, A).;true;true
8;false,true;follows(G, H), recursion_accounttype(H, B).;true;true
8;false,false;follows(A, I).;true;true
8;false,false,true;follows(J, I), recursion_accounttype(J, B).;true;true
9;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
9;false;follows(D, A).;true;true
9;false,true;follows(E, D), follows(E, A).;true;true
9;false,true,false;follows(D, G), recursion_accounttype(G, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), follows(D, A) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.8581489350995117;  // std dev = 2.46e-07, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else return 0.7277141524908164;  // std dev = 0.337, 23.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=20 */
%   | else return 0.8581489350995121;  // std dev = 8.43e-08, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(E, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.7581489350995123;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else return -0.1418510649004885;  // std dev = 0.000, 220.000 (wgt'ed) examples reached here.  /* #neg=220 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.7470378239884012;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.15406730244644984;  // std dev = 4.519, 98.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=29 */
%   | | | else return 0.29814893509951235;  // std dev = 2.482, 25.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=11 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then if ( follows(E, A), follows(E, C) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.7194734122109544;  // std dev = 4.21e-08, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | | else return 0.654122286806426;  // std dev = 0.953, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else return 0.7194734122109544;  // std dev = 4.21e-08, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return 0.7260267366993037;  // std dev = 0.070, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return 0.7319704980698152;  // std dev = 0.040, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return -0.11863078328049312;  // std dev = 0.842, 124.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=1 */
%   | | | else return 0.018610779172926833;  // std dev = 3.130, 94.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=16 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.07148641926093116;  // std dev = 3.807, 80.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=19 */
%   | | | else return 0.17044052321183836;  // std dev = 3.726, 62.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=21 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, C) )
%   | then return 0.5442339443887371;  // std dev = 0.147, 47.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=46 */
%   | else return 0.5619431301124896;  // std dev = 0.087, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   else if ( follows(E, A) )
%   | then if ( follows(F, E), follows(F, A) )
%   | | then return -0.10129709474039529;  // std dev = 0.094, 130.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=2 */
%   | | else if ( follows(E, G), recursion_accounttype(G, B) )
%   | | | then return 0.6853206954744879;  // std dev = 0.343, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return -0.12750066788121775;  // std dev = 0.000, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.708112242655563;  // std dev = 1.747, 39.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=37 */
%   | | | else return -0.17723238623382165;  // std dev = 0.060, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.17059448905904373;  // std dev = 1.595, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | | else return 0.06030462843451463;  // std dev = 2.262, 26.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=7 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), follows(D, A) )
%   | then return 0.4310442702339535;  // std dev = 0.154, 60.000 (wgt'ed) examples reached here.  /* #pos=60 */
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.41786361997980215;  // std dev = 0.013, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.24765725017223716;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, G), follows(G, F) )
%   | | | then return 0.18332944901540255;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.5325692883725581;  // std dev = 0.836, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | else return -0.10723011552707506;  // std dev = 0.073, 199.000 (wgt'ed) examples reached here.  /* #neg=199 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.4044106578754412;  // std dev = 1.49e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.08226843159187505;  // std dev = 3.879, 104.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=29 */
%   | | | else return 0.14695018182283137;  // std dev = 2.639, 30.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=11 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.32942081729092526;  // std dev = 0.157, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), follows(E, A) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return -0.09084115737183886;  // std dev = 0.834, 129.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=1 */
%   | | | else return -0.062040029310031546;  // std dev = 0.523, 17.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=1 */
%   | | else if ( follows(D, G), recursion_accounttype(G, B) )
%   | | | then return 0.36472396206207025;  // std dev = 1.074, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return -0.10358870261614246;  // std dev = 3.49e-08, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.5777496218826961;  // std dev = 1.125, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | | | else return -0.1715679297728812;  // std dev = 0.183, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.10709102668303608;  // std dev = 2.686, 43.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=16 */
%   | | | else return 0.059106574161576296;  // std dev = 2.207, 23.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=7 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, C) )
%   | then if ( tweets(C, D) )
%   | | then if ( follows(E, A), follows(E, C) )
%   | | | then return 0.20267894768581035;  // std dev = 1.334, 32.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=30 */
%   | | | else return 0.2555665281043193;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.07632196842769626;  // std dev = 0.878, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.2600527424155592;  // std dev = 0.087, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   else if ( follows(F, A) )
%   | then return -0.04946836008865564;  // std dev = 0.141, 236.000 (wgt'ed) examples reached here.  /* #neg=213 #pos=23 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(H, G) )
%   | | | then return -0.02561452678397011;  // std dev = 1.264, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return -0.13059727165839272;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.08173240775521479;  // std dev = 3.368, 90.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=29 */
%   | | | else return 0.013461145318516358;  // std dev = 2.680, 41.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=11 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.21939763343837188;  // std dev = 0.155, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E), follows(E, F) )
%   | | | then return 0.2613182592237184;  // std dev = 0.057, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.35162619351131863;  // std dev = 0.759, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | else return -0.08613108131145801;  // std dev = 0.057, 221.000 (wgt'ed) examples reached here.  /* #neg=221 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.23327740404905292;  // std dev = 0.102, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.016265934166730243;  // std dev = 3.250, 98.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=25 */
%   | | | else return 0.05790019771278166;  // std dev = 2.880, 47.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=15 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.1841867521628248;  // std dev = 0.137, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( tweets(A, F) )
%   | | | then return -0.06706035658261637;  // std dev = 0.816, 123.000 (wgt'ed) examples reached here.  /* #neg=121 #pos=2 */
%   | | | else return -0.11697336211311728;  // std dev = 0.510, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( follows(D, G), recursion_accounttype(G, B) )
%   | | | then return 0.22053794492458917;  // std dev = 1.085, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return -0.08338957735889346;  // std dev = 0.000, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.46544448872217997;  // std dev = 1.299, 38.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=37 */
%   | | | else return -0.173238578017522;  // std dev = 0.244, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.03459926465778501;  // std dev = 1.467, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | | else return 0.1964823856860939;  // std dev = 1.932, 15.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=7 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.1581355338746566;  // std dev = 0.122, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E), follows(E, F) )
%   | | | then return 0.17952421307513122;  // std dev = 0.043, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.27457539463853603;  // std dev = 0.388, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return -0.07376506525587877;  // std dev = 0.043, 212.000 (wgt'ed) examples reached here.  /* #neg=212 */
%   | else if ( follows(A, G), tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.326947608440831;  // std dev = 0.604, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return -0.1285090164368802;  // std dev = 0.007, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.08390911459191741;  // std dev = 1.868, 34.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=14 */
%   | | | else return 0.10639651139195508;  // std dev = 2.513, 31.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=13 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(C, E), follows(C, D) )
%   | | then return 0.13772120229366835;  // std dev = 0.099, 80.000 (wgt'ed) examples reached here.  /* #pos=80 */
%   | | else return -0.09615335311072284;  // std dev = 0.859, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return -0.19360415714611726;  // std dev = 0.814, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), follows(G, A) )
%   | | then return -0.059306304997522014;  // std dev = 0.061, 143.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=2 */
%   | | else return -0.021266925204330402;  // std dev = 0.136, 93.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=21 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.3144880009347826;  // std dev = 0.771, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return -0.13767804752068555;  // std dev = 0.406, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.019981115953614136;  // std dev = 2.103, 48.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=16 */
%   | | | else return -5.198164299074783E-4;  // std dev = 2.160, 21.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=7 */


Results
   AUC ROC   = 0.993354
   AUC PR    = 0.355055
   CLL	      = -0.108152
   Precision = 0.354467 at threshold = 0.5
   Recall    = 0.97619
   F1        = 0.520085


Total learning time: 12.553362131118774 seconds
Total inference time: 9.839 seconds
AUC ROC: 0.993354


Results scoring model
   AUC ROC   = 0.993675
   AUC PR    = 0.357074
   CLL	      = -0.128291
   Precision = 0.363636 at threshold = 0.5
   Recall    = 0.923077
   F1        = 0.521739


Total scoring time: 12.332 seconds
Refined model CLL: -0.128291


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.993305
   AUC PR    = 0.36908
   CLL	      = -0.108217
   Precision = 0.334254 at threshold = 0.5
   Recall    = 0.960317
   F1        = 0.495902


Total learning time: 62.24621753883362 seconds
Total inference time: 14.608 seconds
AUC ROC: 0.993305
Total revision time: 62.24621753883362
Best scored revision CLL: -0.123231


Dataset: 14_cora_twitter, Fold: 2, Type: Transfer (trRDN-B), Time: 00:06:58
{'AUC ROC': 0.993305, 'AUC PR': 0.36908, 'CLL': -0.108217, 'Precision': [0.334254, 0.5], 'Recall': 0.960317, 'F1': 0.495902, 'Learning time': 62.24621753883362, 'Inference time': 14.608, 'parameter': {'AUC ROC': 0.993305, 'AUC PR': 0.36908, 'CLL': -0.108217, 'Precision': [0.334254, 0.5], 'Recall': 0.960317, 'F1': 0.495902, 'Learning time': 18.540855407714844, 'Inference time': 14.608}}


