Starting experiment #1 for 7_yeast_twitter

Start learning from source dataset

Source train facts examples: 15015
Source train pos examples: 369
Source train neg examples: 51477

WILL Produced-Tree #1
% FOR proteinclass(A, B):
%   if ( interaction(C, A), recursion_proteinclass(C, B) )
%   then if ( complex(A, D), complex(C, D) )
%   | then return 0.8581489350995117;  // std dev = 1.98e-07, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | else return 0.6522665821583354;  // std dev = 0.404, 34.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=27 */
%   else if ( interaction(E, A), interaction(E, E) )
%   | then if ( interaction(A, E) )
%   | | then if ( complex(A, F) )
%   | | | then return 0.05045662740720468;  // std dev = 2.842, 52.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=10 */
%   | | | else return -0.05851773156715445;  // std dev = 1.658, 36.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=3 */
%   | | else if ( complex(E, G), location(A, H) )
%   | | | then return 0.1081489350995116;  // std dev = 4.330, 100.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=25 */
%   | | | else return 0.2914822684328457;  // std dev = 2.714, 30.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else if ( interaction(A, I), recursion_proteinclass(I, B) )
%   | | then return 0.8146706742299468;  // std dev = 0.204, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | else if ( location(A, J), complex(A, K) )
%   | | | then return 0.12130682983635506;  // std dev = 7.678, 304.000 (wgt'ed) examples reached here.  /* #neg=224 #pos=80 */
%   | | | else return 0.1717584025551296;  // std dev = 10.447, 507.000 (wgt'ed) examples reached here.  /* #neg=348 #pos=159 */
WILL Produced-Tree #2
% FOR proteinclass(A, B):
%   if ( interaction(C, A), recursion_proteinclass(C, B) )
%   then if ( interaction(D, C), recursion_proteinclass(D, B) )
%   | then return 0.7366077952458202;  // std dev = 0.119, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | else if ( interaction(E, C), interaction(E, E) )
%   | | then return 0.09243000631241423;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( interaction(A, F), enzyme(F, G) )
%   | | | then return 0.3511720208254556;  // std dev = 1.081, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.6816269032058448;  // std dev = 0.954, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   else if ( interaction(A, H), recursion_proteinclass(H, B) )
%   | then if ( enzyme(H, I), interaction(H, J) )
%   | | then return 0.39483105690676007;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.7337026306017916;  // std dev = 0.114, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( interaction(A, A) )
%   | | then return -0.14321586544892315;  // std dev = 0.043, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
%   | | else if ( complex(A, K), interaction(L, A) )
%   | | | then return 0.10610783500487664;  // std dev = 7.917, 322.000 (wgt'ed) examples reached here.  /* #neg=237 #pos=85 */
%   | | | else return 0.164147646724433;  // std dev = 11.713, 624.000 (wgt'ed) examples reached here.  /* #neg=420 #pos=204 */
WILL Produced-Tree #3
% FOR proteinclass(A, B):
%   if ( interaction(A, C), recursion_proteinclass(C, B) )
%   then if ( interaction(C, D) )
%   | then return 0.5747398353897761;  // std dev = 0.172, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | else if ( interaction(E, A), interaction(A, E) )
%   | | then return -0.13032845270780144;  // std dev = 0.790, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else if ( interaction(F, A) )
%   | | | then return 0.5940959897971206;  // std dev = 0.162, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.31257684542891806;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( interaction(A, A) )
%   | then return -0.12696046377173983;  // std dev = 0.041, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   | else if ( interaction(A, G), enzyme(G, H) )
%   | | then if ( interaction(G, I), phenotype(G, J) )
%   | | | then return 0.1510304444190697;  // std dev = 4.502, 92.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=31 */
%   | | | else return 0.041193989126502;  // std dev = 3.912, 90.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=20 */
%   | | else if ( phenotype(A, K) )
%   | | | then return 0.1380939900412478;  // std dev = 9.360, 412.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=134 */
%   | | | else return 0.16679414238157686;  // std dev = 8.922, 356.000 (wgt'ed) examples reached here.  /* #neg=229 #pos=127 */
WILL Produced-Tree #4
% FOR proteinclass(A, B):
%   if ( interaction(A, C), recursion_proteinclass(C, B) )
%   then if ( interaction(D, A), interaction(D, C) )
%   | then return 0.43884729977938475;  // std dev = 0.218, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | else if ( complex(C, E) )
%   | | then return 0.4414679509475855;  // std dev = 0.053, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( interaction(A, F), interaction(F, F) )
%   | | | then return -0.20351613487067652;  // std dev = 0.844, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.4423755478201457;  // std dev = 0.091, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( interaction(A, A) )
%   | then return -0.11234400196645954;  // std dev = 0.039, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   | else if ( interaction(A, G), interaction(H, A) )
%   | | then if ( complex(H, I), complex(G, I) )
%   | | | then return 0.04070887367619976;  // std dev = 5.154, 153.000 (wgt'ed) examples reached here.  /* #neg=116 #pos=37 */
%   | | | else return 0.10926615388271642;  // std dev = 6.627, 206.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=65 */
%   | | else if ( complex(A, J), phenotype(A, K) )
%   | | | then return 0.17291543701315684;  // std dev = 5.030, 111.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=42 */
%   | | | else return 0.10099392002703535;  // std dev = 10.581, 531.000 (wgt'ed) examples reached here.  /* #neg=363 #pos=168 */
WILL Produced-Tree #5
% FOR proteinclass(A, B):
%   if ( interaction(A, C), recursion_proteinclass(C, B) )
%   then return 0.3400316480559052;  // std dev = 0.346, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   else if ( interaction(A, D), complex(D, E) )
%   | then if ( complex(A, E), location(A, F) )
%   | | then if ( interaction(D, G), interaction(G, D) )
%   | | | then return -0.023551870196965214;  // std dev = 3.158, 82.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=13 */
%   | | | else return -0.09765140328924718;  // std dev = 2.412, 62.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=7 */
%   | | else if ( enzyme(D, H), phenotype(A, I) )
%   | | | then return 0.17062187452171698;  // std dev = 3.147, 42.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=16 */
%   | | | else return 0.0597677169437942;  // std dev = 6.389, 215.000 (wgt'ed) examples reached here.  /* #neg=157 #pos=58 */
%   | else if ( interaction(J, A), interaction(K, J) )
%   | | then if ( recursion_proteinclass(K, B) )
%   | | | then return 0.5665888287763857;  // std dev = 1.508, 23.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=20 */
%   | | | else return 0.08185364216494091;  // std dev = 10.140, 496.000 (wgt'ed) examples reached here.  /* #neg=342 #pos=154 */
%   | | else if ( interaction(A, L), phenotype(L, M) )
%   | | | then return 0.07931274935901672;  // std dev = 2.355, 26.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=8 */
%   | | | else return 0.19166614327479917;  // std dev = 4.573, 86.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=36 */
WILL Produced-Tree #6
% FOR proteinclass(A, B):
%   if ( interaction(C, A), recursion_proteinclass(C, B) )
%   then if ( interaction(A, D), complex(D, E) )
%   | then if ( complex(C, F), complex(A, F) )
%   | | then return 0.2598523638903751;  // std dev = 0.185, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | else if ( interaction(C, C) )
%   | | | then return 0.28039701096028335;  // std dev = 7.45e-09, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.30288672155730123;  // std dev = 1.042, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | else return 0.3886447718075423;  // std dev = 0.203, 27.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=26 */
%   else if ( interaction(A, A) )
%   | then return -0.10343037916983151;  // std dev = 0.005, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | else if ( interaction(G, A), interaction(G, G) )
%   | | then if ( complex(G, H), location(A, I) )
%   | | | then return 0.08863442104558801;  // std dev = 4.762, 109.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=34 */
%   | | | else return 0.2178382345090758;  // std dev = 2.965, 36.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=17 */
%   | | else if ( interaction(A, J), interaction(K, A) )
%   | | | then return 0.038914491981894166;  // std dev = 7.197, 289.000 (wgt'ed) examples reached here.  /* #neg=204 #pos=85 */
%   | | | else return 0.08253125677769335;  // std dev = 10.692, 529.000 (wgt'ed) examples reached here.  /* #neg=353 #pos=176 */
WILL Produced-Tree #7
% FOR proteinclass(A, B):
%   if ( interaction(C, A), recursion_proteinclass(C, B) )
%   then return 0.2242145958994602;  // std dev = 0.239, 62.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=57 */
%   else if ( interaction(D, A), enzyme(D, E) )
%   | then if ( enzyme(A, E) )
%   | | then if ( interaction(A, F), interaction(D, F) )
%   | | | then return -0.06931745929170022;  // std dev = 1.286, 23.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=2 */
%   | | | else return -0.20023038545850563;  // std dev = 0.936, 22.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=1 */
%   | | else if ( interaction(G, D), enzyme(G, H) )
%   | | | then return 0.06728117541047021;  // std dev = 4.487, 94.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=30 */
%   | | | else return 0.005629806243839153;  // std dev = 4.860, 138.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=35 */
%   | else if ( complex(A, I), location(A, J) )
%   | | then if ( location(K, J), recursion_proteinclass(K, B) )
%   | | | then return 0.35129828964099036;  // std dev = 5.421, 139.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=89 */
%   | | | else return -0.22816658914319463;  // std dev = 0.555, 171.000 (wgt'ed) examples reached here.  /* #neg=171 */
%   | | else if ( phenotype(A, L) )
%   | | | then return 0.054046248957436156;  // std dev = 6.679, 212.000 (wgt'ed) examples reached here.  /* #neg=145 #pos=67 */
%   | | | else return 0.10145219374324915;  // std dev = 7.334, 237.000 (wgt'ed) examples reached here.  /* #neg=149 #pos=88 */
WILL Produced-Tree #8
% FOR proteinclass(A, B):
%   if ( interaction(C, A), recursion_proteinclass(C, B) )
%   then return 0.2310073853842951;  // std dev = 0.148, 58.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=57 */
%   else if ( interaction(D, A), interaction(D, D) )
%   | then if ( complex(D, E), complex(A, E) )
%   | | then if ( interaction(A, F) )
%   | | | then return -0.07625220005786112;  // std dev = 0.843, 30.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=1 */
%   | | | else return -0.22899478307072163;  // std dev = 0.095, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( enzyme(A, G), phenotype(D, H) )
%   | | | then return 0.07925195902178502;  // std dev = 2.585, 34.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=11 */
%   | | | else return -0.009236349092648097;  // std dev = 5.246, 159.000 (wgt'ed) examples reached here.  /* #neg=120 #pos=39 */
%   | else if ( complex(A, I), interaction(A, J) )
%   | | then if ( interaction(J, K), recursion_proteinclass(K, B) )
%   | | | then return 0.4168384220888188;  // std dev = 1.087, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.029633531364537658;  // std dev = 4.951, 177.000 (wgt'ed) examples reached here.  /* #neg=139 #pos=38 */
%   | | else if ( interaction(A, L), interaction(L, L) )
%   | | | then return 0.10763343578961275;  // std dev = 3.363, 47.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=19 */
%   | | | else return 0.04532264646910105;  // std dev = 10.960, 576.000 (wgt'ed) examples reached here.  /* #neg=389 #pos=187 */
WILL Produced-Tree #9
% FOR proteinclass(A, B):
%   if ( interaction(C, A), recursion_proteinclass(C, B) )
%   then return 0.14551106495926072;  // std dev = 0.230, 62.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=57 */
%   else if ( complex(A, D) )
%   | then if ( interaction(E, A), complex(E, D) )
%   | | then if ( interaction(E, E) )
%   | | | then return -0.11850624122206432;  // std dev = 1.059, 35.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=1 */
%   | | | else return -0.016000225224149126;  // std dev = 3.631, 89.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=21 */
%   | | else if ( complex(F, D), recursion_proteinclass(F, B) )
%   | | | then return 0.6215117712805445;  // std dev = 1.702, 93.000 (wgt'ed) examples reached here.  /* #pos=93 */
%   | | | else return -0.23672556741366035;  // std dev = 0.759, 221.000 (wgt'ed) examples reached here.  /* #neg=221 */
%   | else if ( interaction(G, A), phenotype(G, H) )
%   | | then if ( interaction(A, A) )
%   | | | then return -0.09455351065927921;  // std dev = 0.018, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | | else return 0.029688270253346666;  // std dev = 8.942, 382.000 (wgt'ed) examples reached here.  /* #neg=260 #pos=122 */
%   | | else if ( phenotype(A, I) )
%   | | | then return 0.11371091791352476;  // std dev = 4.423, 83.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=33 */
%   | | | else return 0.04536705469190846;  // std dev = 5.140, 124.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=42 */
WILL Produced-Tree #10
% FOR proteinclass(A, B):
%   if ( interaction(A, C), interaction(C, D) )
%   then if ( recursion_proteinclass(D, B), interaction(D, E) )
%   | then return 0.34112938837130635;  // std dev = 0.311, 85.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=78 */
%   | else return -0.036536596648568544;  // std dev = 0.355, 406.000 (wgt'ed) examples reached here.  /* #neg=314 #pos=92 */
%   else if ( phenotype(A, F) )
%   | then if ( phenotype(G, F), recursion_proteinclass(G, B) )
%   | | then if ( interaction(H, G), interaction(H, A) )
%   | | | then return 0.5663489856748098;  // std dev = 2.333, 97.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=93 */
%   | | | else return -0.16612850822932101;  // std dev = 1.406, 20.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=3 */
%   | | else return -0.26444594405504585;  // std dev = 0.060, 175.000 (wgt'ed) examples reached here.  /* #neg=175 */
%   | else if ( interaction(A, I), location(A, J) )
%   | | then if ( location(I, K) )
%   | | | then return -0.032877408982738464;  // std dev = 2.427, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | | else return -0.1710509649630173;  // std dev = 0.348, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( interaction(L, A), location(L, M) )
%   | | | then return 0.0033666013432273986;  // std dev = 7.206, 276.000 (wgt'ed) examples reached here.  /* #neg=188 #pos=88 */
%   | | | else return -0.07912134758934615;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */


Starting fold 1

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos	 examples: 126
Target test neg examples: 16128

Amount of data: 5
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
0;true;complex(A, D), complex(C, D).;false;false
0;false;interaction(E, A), interaction(E, E).;true;true
0;false,true;interaction(A, E).;true;true
0;false,true,true;complex(A, F).;false;false
0;false,true,false;complex(E, G), location(A, H).;false;false
0;false,false;interaction(A, I), recursion_proteinclass(I, B).;false;true
0;false,false,false;location(A, J), complex(A, K).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
1;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
1;true,false;interaction(E, C), interaction(E, E).;false;true
1;true,false,false;interaction(A, F), enzyme(F, G).;false;false
1;false;interaction(A, H), recursion_proteinclass(H, B).;true;true
1;false,true;enzyme(H, I), interaction(H, J).;false;false
1;false,false;interaction(A, A).;false;true
1;false,false,false;complex(A, K), interaction(L, A).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(C, D).;false;true
2;true,false;interaction(E, A), interaction(A, E).;false;true
2;true,false,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(A, G), enzyme(G, H).;true;true
2;false,false,true;interaction(G, I), phenotype(G, J).;false;false
2;false,false,false;phenotype(A, K).;false;false
3;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
3;true;interaction(D, A), interaction(D, C).;false;true
3;true,false;complex(C, E).;false;true
3;true,false,false;interaction(A, F), interaction(F, F).;false;false
3;false;interaction(A, A).;false;true
3;false,false;interaction(A, G), interaction(H, A).;true;true
3;false,false,true;complex(H, I), complex(G, I).;false;false
3;false,false,false;complex(A, J), phenotype(A, K).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
4;false;interaction(A, D), complex(D, E).;true;true
4;false,true;complex(A, E), location(A, F).;true;true
4;false,true,true;interaction(D, G), interaction(G, D).;false;false
4;false,true,false;enzyme(D, H), phenotype(A, I).;false;false
4;false,false;interaction(J, A), interaction(K, J).;true;true
4;false,false,true;recursion_proteinclass(K, B).;false;false
4;false,false,false;interaction(A, L), phenotype(L, M).;false;false
5;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
5;true;interaction(A, D), complex(D, E).;true;false
5;true,true;complex(C, F), complex(A, F).;false;true
5;true,true,false;interaction(C, C).;false;false
5;false;interaction(A, A).;false;true
5;false,false;interaction(G, A), interaction(G, G).;true;true
5;false,false,true;complex(G, H), location(A, I).;false;false
5;false,false,false;interaction(A, J), interaction(K, A).;false;false
6;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
6;false;interaction(D, A), enzyme(D, E).;true;true
6;false,true;enzyme(A, E).;true;true
6;false,true,true;interaction(A, F), interaction(D, F).;false;false
6;false,true,false;interaction(G, D), enzyme(G, H).;false;false
6;false,false;complex(A, I), location(A, J).;true;true
6;false,false,true;location(K, J), recursion_proteinclass(K, B).;false;false
6;false,false,false;phenotype(A, L).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
7;false;interaction(D, A), interaction(D, D).;true;true
7;false,true;complex(D, E), complex(A, E).;true;true
7;false,true,true;interaction(A, F).;false;false
7;false,true,false;enzyme(A, G), phenotype(D, H).;false;false
7;false,false;complex(A, I), interaction(A, J).;true;true
7;false,false,true;interaction(J, K), recursion_proteinclass(K, B).;false;false
7;false,false,false;interaction(A, L), interaction(L, L).;false;false
8;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
8;false;complex(A, D).;true;true
8;false,true;interaction(E, A), complex(E, D).;true;true
8;false,true,true;interaction(E, E).;false;false
8;false,true,false;complex(F, D), recursion_proteinclass(F, B).;false;false
8;false,false;interaction(G, A), phenotype(G, H).;true;true
8;false,false,true;interaction(A, A).;false;false
8;false,false,false;phenotype(A, I).;false;false
9;;proteinclass(A, B) :- interaction(A, C), interaction(C, D).;true;true
9;true;recursion_proteinclass(D, B), interaction(D, E).;false;false
9;false;phenotype(A, F).;true;true
9;false,true;phenotype(G, F), recursion_proteinclass(G, B).;true;false
9;false,true,true;interaction(H, G), interaction(H, A).;false;false
9;false,false;interaction(A, I), location(A, J).;true;true
9;false,false,true;location(I, K).;false;false
9;false,false,false;interaction(L, A), location(L, M).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), tweets(C, D) )
%   | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G) )
%   | | | then return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F), follows(G, A) )
%   | | | then return 0.09446743783575562;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.5553664367462845;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.04285863892836812;  // std dev = 0.883, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.22152502927633905;  // std dev = 0.334, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(D, C) )
%   | then return 0.41751358415830997;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( tweets(C, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, F), follows(F, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.41751358415830997;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G), follows(H, A) )
%   | | then if ( tweets(H, I), tweets(G, I) )
%   | | | then return 0.037120862541936375;  // std dev = 0.883, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, J) )
%   | | | then return 0.5002131558403855;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return -0.13637023346435792;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, D), tweets(D, E) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(D, F), follows(F, D) )
%   | | | then return 0.07015590677674266;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1205410847784378;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( follows(G, A), follows(H, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.37769095781541506;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12109080086507203;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), tweets(D, E) )
%   | then if ( tweets(C, F), tweets(A, F) )
%   | | then return 0.25517224256948945;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(C, C) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.25517224256948945;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.2937891549544799;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), follows(G, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, H), follows(I, A) )
%   | | | then return 0.02599256133077187;  // std dev = 0.879, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return -0.10878311281985809;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.21649405355362425;  // std dev = 0.023, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(D, A) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return -0.194464811580119;  // std dev = 3.73e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( follows(F, D) )
%   | | | then return 0.34733158933129515;  // std dev = 0.648, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09867673075523296;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.1820460919286012;  // std dev = 0.021, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(D, A), follows(D, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E), follows(A, F) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.745342448555221;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return -0.16579591573463245;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( follows(A, H), follows(H, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12012500679618095;  // std dev = 0.042, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.15650442606429654;  // std dev = 0.018, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( tweets(A, D) )
%   | then if ( follows(E, A), tweets(E, D) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03726656156936122;  // std dev = 0.628, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1353269047622523;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.08085276338619711;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, D) )
%   then if ( recursion_accounttype(D, B), follows(D, E) )
%   | then return 0.2422479543457374;  // std dev = 0.381, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return -0.1416450601867399;  // std dev = 0.025, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(G, A) )
%   | | then return 0.15111466269790108;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07504415537235162;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */


Results
   AUC ROC   = 0.91383
   AUC PR    = 0.346243
   CLL	      = -0.168315
   Precision = 0.352227 at threshold = 0.5
   Recall    = 0.690476
   F1        = 0.466488


Total learning time: 0.723 seconds
Total inference time: 8.341 seconds
AUC ROC: 0.91383


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.180767
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.8
   F1        = 0.888889


Total scoring time: 0.42 seconds
Parameter learned model CLL: -0.180767


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'tweets(A, D), tweets(C, D)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F), recursion_accounttype(F, B)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [2.11e-08, 0, 3], 'true,false': [0.0, 0, 1], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.866, 3, 1], 'false,false,false,false': [0.0, 2, 0]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, E), recursion_accounttype(E, B)', 'false,false': 'follows(A, A)', 'false,false,false': 'tweets(A, F), follows(G, A)'}, {'true,true': [0.0, 0, 4], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.866, 3, 1], 'false,false,false,false': [0.0, 2, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(A, A)', 'false,false': 'follows(A, E)', 'false,false,true': 'follows(E, F)'}, {'true,true': [1.05e-08, 0, 3], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.883, 4, 1], 'false,false,true,false': [0.0, 0, 0], 'false,false,false': [0.334, 1, 1]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(D, C)', 'true,false': 'tweets(C, E)', 'true,false,false': 'follows(A, F), follows(F, F)', 'false': 'follows(A, A)', 'false,false': 'follows(A, G), follows(H, A)', 'false,false,true': 'tweets(H, I), tweets(G, I)', 'false,false,false': 'tweets(A, J)'}, {'true,true': [0.0, 0, 2], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [0.0, 0, 1], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.883, 4, 1], 'false,false,true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 1], 'false,false,false,false': [0.0, 1, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(A, D), tweets(D, E)', 'false,true': 'tweets(A, E)', 'false,true,true': 'follows(D, F), follows(F, D)', 'false,false': 'follows(G, A), follows(H, G)', 'false,false,true': 'recursion_accounttype(H, B)', 'false,false,false': 'follows(A, I)'}, {'true': [0.0, 0, 3], 'false,true,true,true': [0.866, 3, 1], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 1, 0], 'false,false,true,true': [0.0, 0, 1], 'false,false,true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 1, 0]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(A, D), tweets(D, E)', 'true,true': 'tweets(C, F), tweets(A, F)', 'true,true,false': 'follows(C, C)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), follows(G, G)', 'false,false,false': 'follows(A, H), follows(I, A)'}, {'true,true,true': [0.0, 0, 2], 'true,true,false,true': [0.0, 0, 0], 'true,true,false,false': [0.0, 0, 1], 'true,false': [0.0, 0, 1], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.879, 4, 1], 'false,false,false,false': [0.0, 1, 0]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(A, E), follows(D, E)', 'false,true,false': 'follows(F, D)', 'false,false': 'tweets(A, G)'}, {'true': [0.023, 0, 4], 'false,true,true': [3.73e-09, 3, 0], 'false,true,false,true': [0.648, 1, 1], 'false,true,false,false': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 1, 0]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(D, A), follows(D, D)', 'false,false': 'tweets(A, E), follows(A, F)', 'false,false,true': 'follows(F, G), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, H), follows(H, H)'}, {'true': [0.021, 0, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 1], 'false,false,true,false': [0.0, 3, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.042, 2, 0]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,true': 'follows(E, A), tweets(E, D)', 'false,true,true': 'follows(E, E)', 'false,false': 'follows(F, A)', 'false,false,true': 'follows(A, A)'}, {'true': [0.018, 0, 4], 'false,true,true,true': [0.0, 0, 0], 'false,true,true,false': [0.628, 3, 1], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 1, 0], 'false,false,false': [0.0, 1, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), follows(C, D)', 'true': 'recursion_accounttype(D, B), follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,true': 'follows(G, F), follows(G, A)', 'false,false': 'follows(A, H)', 'false,false,false': 'follows(I, A)'}, {'true,true': [0.381, 0, 4], 'true,false': [0.025, 4, 0], 'false,true,true': [0.0, 0, 1], 'false,true,false': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 1, 0]}]]
[{'': [0.0, 0.13888888888888892], 'false': [nan, 0.13888888888888892], 'false,false': [nan, 0.13888888888888892], 'false,false,false': [0.18750000000000003, 0.0], 'true': [1.4802973661668753e-16, 0.0]}, {'': [0.0, 0.13574696029573122], 'false': [nan, 0.13574696029573122], 'false,false': [nan, 0.13574696029573122], 'false,false,false': [0.18749999999999997, 0.0], 'true': [0.0, nan]}, {'': [3.700743415417188e-17, 0.14980023953358115], 'false': [nan, 0.14980023953358115], 'false,false': [0.15601982148470123, 0.11145008534151415], 'false,false,true': [0.15601982148470123, nan], 'true': [3.700743415417188e-17, nan]}, {'': [-3.700743415417188e-17, 0.14459049027269713], 'false': [nan, 0.14459049027269713], 'false,false': [0.1559122128369724, 0.10130960288467863], 'false,false,true': [0.1559122128369724, nan], 'false,false,false': [0.0, 0.0], 'true': [0.0, 0.0], 'true,false': [nan, 0.0], 'true,false,false': [nan, 0.0]}, {'': [0.0, 0.13096107197561171], 'false': [0.1558184548141114, 0.062195810698099915], 'false,true': [0.18749999999999994, 0.0], 'false,true,true': [0.18749999999999994, nan], 'false,false': [0.0, 0.0], 'false,false,true': [0.0, nan], 'false,false,false': [nan, 0.0]}, {'': [0.00027961236040312254, 0.13128201598791162], 'false': [nan, 0.13128201598791162], 'false,false': [nan, 0.13128201598791162], 'false,false,false': [0.15451100546170113, 0.0], 'true': [0.0, 0.0], 'true,true': [0.0, 0.0], 'true,true,false': [nan, 0.0]}, {'': [0.00013613474576129603, 0.13072331698092585], 'false': [0.1544306168968282, 0.0], 'false,true': [4.625929269271485e-18, 0.20995053821773346], 'false,true,false': [0.20995053821773346, nan], 'false,false': [nan, 0.0]}, {'': [0.00010546512323069551, 0.11143940481705233], 'false': [nan, 0.11143940481705233], 'false,false': [0.15565745979014806, 0.0008930327239223077], 'false,false,true': [0.0, 0.0], 'false,false,false': [nan, 0.0008930327239223077]}, {'': [8.321603801129604e-05, 0.07074176584536652], 'false': [0.09869889250671925, 0.0007418580196646117], 'false,true': [0.09869889250671925, nan], 'false,true,true': [nan, 0.09869889250671925], 'false,false': [0.0, 0.0], 'false,false,true': [nan, 0.0]}, {'': [0.05507740425770967, 0.012786952747733416], 'true': [0.03631542276656161, 0.0001524624454413391], 'false': [0.0, 0.0], 'false,true': [0.0, nan], 'false,false': [nan, 0.0], 'false,false,false': [nan, 0.0]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
0;true;tweets(A, D), tweets(C, D).;true;true
0;false;tweets(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;tweets(A, F), follows(G, A).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
3;true;follows(D, A), follows(D, C).;true;true
3;false;follows(A, G), follows(H, A).;true;true
3;false,false;tweets(A, J).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(A, D), tweets(D, E).;true;true
4;false,true;tweets(A, E).;true;true
4;false,false;follows(G, A), follows(H, G).;true;true
5;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
5;true;follows(A, D), tweets(D, E).;true;true
5;true,true;tweets(C, F), tweets(A, F).;true;true
5;false;follows(A, H), follows(I, A).;true;true
6;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
6;false;follows(D, A).;true;true
6;false,true;follows(A, E), follows(D, E).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;false;tweets(A, E), follows(A, F).;true;true
7;false,true;follows(F, G), recursion_accounttype(G, B).;true;true
8;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
8;false;tweets(A, D).;true;true
8;false,false;follows(F, A).;true;true
9;;accounttype(A, B) :- follows(A, C), follows(C, D).;true;true
9;true;recursion_accounttype(D, B), follows(D, E).;true;true
9;false;recursion_accounttype(F, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), tweets(C, D) )
%   | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( tweets(A, E) )
%   | then return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return -0.14185106490048777;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( tweets(A, D), follows(E, A) )
%   | then return 0.09446743783575562;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return -0.12544463852839138;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.5553664367462845;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( tweets(A, D), follows(A, E) )
%   | then return 0.08165239320886175;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.11024456011969057;  // std dev = 0.545, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(D, C) )
%   | then return 0.41751358415830997;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else return 0.41751358415830997;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, E), follows(F, A) )
%   | then return 0.031169910998085658;  // std dev = 0.883, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( tweets(A, G) )
%   | | then return 0.5280039362276951;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return -0.12378653600317725;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, D), tweets(D, E) )
%   | then if ( tweets(A, E) )
%   | | then return 0.06526055323200708;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return -0.1272071666683084;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( follows(F, A), follows(G, F) )
%   | | then return 0.39750524195817327;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return -0.11097329582271595;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), tweets(D, E) )
%   | then if ( tweets(C, F), tweets(A, F) )
%   | | then return 0.25517224256948945;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.25517224256948945;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.3071715393003478;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, G), follows(H, A) )
%   | then return 0.021434883088670052;  // std dev = 0.879, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return -0.10048828034782298;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.2187957164447384;  // std dev = 0.031, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(D, A) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return -0.19815498142436538;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.34296282993562055;  // std dev = 0.649, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | else return -0.09176274463917722;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.1837419177478871;  // std dev = 0.028, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( tweets(A, D), follows(A, E) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then return 0.7417153085601482;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return -0.1685384884243251;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return -0.12017212796037043;  // std dev = 0.051, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.15779585105642918;  // std dev = 0.024, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( tweets(A, D) )
%   | then return 0.03475061695124887;  // std dev = 0.627, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( follows(E, A) )
%   | | then return -0.14077562113062267;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.07556188445754544;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, D) )
%   then if ( recursion_accounttype(D, B), follows(D, E) )
%   | then return 0.24100494004230608;  // std dev = 0.379, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return -0.1441072314067781;  // std dev = 0.023, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( recursion_accounttype(F, B) )
%   | then return 0.15697883062485707;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return -0.07045008822331057;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */


Results
   AUC ROC   = 0.92224
   AUC PR    = 0.313117
   CLL	      = -0.177048
   Precision = 0.339552 at threshold = 0.5
   Recall    = 0.722222
   F1        = 0.461929


Total learning time: 0.69 seconds
Total inference time: 6.713 seconds
AUC ROC: 0.92224


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.181024
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.8
   F1        = 0.888889


Total scoring time: 0.379 seconds
Refined model CLL: -0.181024


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.91383
   AUC PR    = 0.346243
   CLL	      = -0.168315
   Precision = 0.352227 at threshold = 0.5
   Recall    = 0.690476
   F1        = 0.466488


Total learning time: 2.2119999999999997 seconds
Total inference time: 8.341 seconds
AUC ROC: 0.91383
Total revision time: 2.2119999999999997
Best scored revision CLL: -0.180767


Dataset: 7_yeast_twitter, Fold: 1, Type: Transfer (trRDN-B), Time: 00:00:17
{'AUC ROC': 0.91383, 'AUC PR': 0.346243, 'CLL': -0.168315, 'Precision': [0.352227, 0.5], 'Recall': 0.690476, 'F1': 0.466488, 'Learning time': 2.2119999999999997, 'Inference time': 8.341, 'parameter_5': {'AUC ROC': 0.91383, 'AUC PR': 0.346243, 'CLL': -0.168315, 'Precision': [0.352227, 0.5], 'Recall': 0.690476, 'F1': 0.466488, 'Learning time': 0.723, 'Inference time': 8.341}}


Amount of data: 10
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
0;true;complex(A, D), complex(C, D).;false;false
0;false;interaction(E, A), interaction(E, E).;true;true
0;false,true;interaction(A, E).;true;true
0;false,true,true;complex(A, F).;false;false
0;false,true,false;complex(E, G), location(A, H).;false;false
0;false,false;interaction(A, I), recursion_proteinclass(I, B).;false;true
0;false,false,false;location(A, J), complex(A, K).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
1;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
1;true,false;interaction(E, C), interaction(E, E).;false;true
1;true,false,false;interaction(A, F), enzyme(F, G).;false;false
1;false;interaction(A, H), recursion_proteinclass(H, B).;true;true
1;false,true;enzyme(H, I), interaction(H, J).;false;false
1;false,false;interaction(A, A).;false;true
1;false,false,false;complex(A, K), interaction(L, A).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(C, D).;false;true
2;true,false;interaction(E, A), interaction(A, E).;false;true
2;true,false,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(A, G), enzyme(G, H).;true;true
2;false,false,true;interaction(G, I), phenotype(G, J).;false;false
2;false,false,false;phenotype(A, K).;false;false
3;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
3;true;interaction(D, A), interaction(D, C).;false;true
3;true,false;complex(C, E).;false;true
3;true,false,false;interaction(A, F), interaction(F, F).;false;false
3;false;interaction(A, A).;false;true
3;false,false;interaction(A, G), interaction(H, A).;true;true
3;false,false,true;complex(H, I), complex(G, I).;false;false
3;false,false,false;complex(A, J), phenotype(A, K).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
4;false;interaction(A, D), complex(D, E).;true;true
4;false,true;complex(A, E), location(A, F).;true;true
4;false,true,true;interaction(D, G), interaction(G, D).;false;false
4;false,true,false;enzyme(D, H), phenotype(A, I).;false;false
4;false,false;interaction(J, A), interaction(K, J).;true;true
4;false,false,true;recursion_proteinclass(K, B).;false;false
4;false,false,false;interaction(A, L), phenotype(L, M).;false;false
5;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
5;true;interaction(A, D), complex(D, E).;true;false
5;true,true;complex(C, F), complex(A, F).;false;true
5;true,true,false;interaction(C, C).;false;false
5;false;interaction(A, A).;false;true
5;false,false;interaction(G, A), interaction(G, G).;true;true
5;false,false,true;complex(G, H), location(A, I).;false;false
5;false,false,false;interaction(A, J), interaction(K, A).;false;false
6;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
6;false;interaction(D, A), enzyme(D, E).;true;true
6;false,true;enzyme(A, E).;true;true
6;false,true,true;interaction(A, F), interaction(D, F).;false;false
6;false,true,false;interaction(G, D), enzyme(G, H).;false;false
6;false,false;complex(A, I), location(A, J).;true;true
6;false,false,true;location(K, J), recursion_proteinclass(K, B).;false;false
6;false,false,false;phenotype(A, L).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
7;false;interaction(D, A), interaction(D, D).;true;true
7;false,true;complex(D, E), complex(A, E).;true;true
7;false,true,true;interaction(A, F).;false;false
7;false,true,false;enzyme(A, G), phenotype(D, H).;false;false
7;false,false;complex(A, I), interaction(A, J).;true;true
7;false,false,true;interaction(J, K), recursion_proteinclass(K, B).;false;false
7;false,false,false;interaction(A, L), interaction(L, L).;false;false
8;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
8;false;complex(A, D).;true;true
8;false,true;interaction(E, A), complex(E, D).;true;true
8;false,true,true;interaction(E, E).;false;false
8;false,true,false;complex(F, D), recursion_proteinclass(F, B).;false;false
8;false,false;interaction(G, A), phenotype(G, H).;true;true
8;false,false,true;interaction(A, A).;false;false
8;false,false,false;phenotype(A, I).;false;false
9;;proteinclass(A, B) :- interaction(A, C), interaction(C, D).;true;true
9;true;recursion_proteinclass(D, B), interaction(D, E).;false;false
9;false;phenotype(A, F).;true;true
9;false,true;phenotype(G, F), recursion_proteinclass(G, B).;true;false
9;false,true,true;interaction(H, G), interaction(H, A).;false;false
9;false,false;interaction(A, I), location(A, J).;true;true
9;false,false,true;location(I, K).;false;false
9;false,false,false;interaction(L, A), location(L, M).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), tweets(C, D) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, E), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.10814893509951218;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.7194734122109545;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E) )
%   | | then return 0.7194734122109545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), follows(A, H) )
%   | | | then return 0.17780077116908888;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return -0.008064994537245383;  // std dev = 0.928, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C) )
%   | then return 0.5553664367462845;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A) )
%   | | then if ( follows(F, E) )
%   | | | then return 0.13367534000311226;  // std dev = 1.287, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.12939625595981694;  // std dev = 0.415, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(C, D) )
%   | then return 0.41751358415830997;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( tweets(C, E) )
%   | | then return 0.41751358415830997;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, G) )
%   | | then if ( tweets(G, H), tweets(F, H) )
%   | | | then return 0.14824614573526568;  // std dev = 1.245, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, I) )
%   | | | then return -0.005482308585830341;  // std dev = 0.611, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.16820013791986219;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(D, A), tweets(D, E) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(F, D), follows(D, F) )
%   | | | then return 0.1691574686328909;  // std dev = 1.190, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1872476202699684;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.6674756169211333;  // std dev = 0.202, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return -0.19451540737291398;  // std dev = 0.007, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( follows(I, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.18050362489043864;  // std dev = 0.013, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(D, E) )
%   | then if ( tweets(C, F), tweets(A, F) )
%   | | then return 0.31780569088439764;  // std dev = 0.153, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(C, C) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.25517224256948945;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else return 0.3614648523379166;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G), follows(G, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(H, A), follows(A, I) )
%   | | | then return 0.05649805604731289;  // std dev = 1.154, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return 0.014591254902282644;  // std dev = 0.823, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.24469119364020628;  // std dev = 0.151, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(A, D) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then return -0.24279225440362912;  // std dev = 0.086, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( follows(D, F) )
%   | | | then return 0.27405769666676383;  // std dev = 1.083, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.25240895829582144;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return -0.17440063374298698;  // std dev = 0.036, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return -0.16544883843787933;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.20310073931698783;  // std dev = 0.134, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(A, D), follows(D, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E), follows(F, A) )
%   | | then if ( follows(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.5194913711280215;  // std dev = 0.382, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.21044700847600037;  // std dev = 0.043, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( follows(H, A), follows(H, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.05954865935979941;  // std dev = 0.741, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.17270925300064435;  // std dev = 0.120, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( tweets(A, D) )
%   | then if ( follows(A, E), tweets(E, D) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.05592726028008823;  // std dev = 0.861, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else if ( tweets(F, D), recursion_accounttype(F, B) )
%   | | | then return 0.13497068384641442;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return -0.13347609807942412;  // std dev = 0.017, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.027533702563004317;  // std dev = 0.704, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return -0.13666978887752457;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(D, C) )
%   then if ( recursion_accounttype(D, B), follows(E, D) )
%   | then return 0.2402384813127697;  // std dev = 0.500, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.1764923303737267;  // std dev = 0.079, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( recursion_accounttype(F, B) )
%   | then if ( follows(F, G), follows(A, G) )
%   | | then return 0.40200530273743684;  // std dev = 0.321, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(H, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, I) )
%   | | | then return -0.20680196393661743;  // std dev = 0.011, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return -0.11476095719675908;  // std dev = 0.009, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */


Results
   AUC ROC   = 0.979922
   AUC PR    = 0.351813
   CLL	      = -0.197046
   Precision = 0.323529 at threshold = 0.5
   Recall    = 0.785714
   F1        = 0.458333


Total learning time: 0.793 seconds
Total inference time: 8.739 seconds
AUC ROC: 0.979922


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.226442
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.9
   F1        = 0.947368


Total scoring time: 0.415 seconds
Parameter learned model CLL: -0.226442


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'tweets(A, D), tweets(C, D)', 'false': 'follows(A, E), follows(E, E)', 'false,false': 'follows(F, A), recursion_accounttype(F, B)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.0, 0, 4], 'true,false': [0.0, 0, 2], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [1.225, 6, 2], 'false,false,false,false': [0.894, 4, 1]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E)', 'false,false': 'follows(A, A)', 'false,false,false': 'tweets(A, G), follows(A, H)'}, {'true,true': [2.11e-08, 0, 6], 'true,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 1], 'false,true,false': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [1.155, 4, 2], 'false,false,false,false': [0.928, 6, 1]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A)', 'false,false,true': 'follows(F, E)'}, {'true,true': [0.0, 0, 5], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.287, 6, 3], 'false,false,true,false': [0.0, 0, 0], 'false,false,false': [0.415, 4, 2]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(A, D), follows(C, D)', 'true,false': 'tweets(C, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, G)', 'false,false,true': 'tweets(G, H), tweets(F, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true': [0.0, 0, 4], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.245, 5, 3], 'false,false,true,false': [0.0, 0, 0], 'false,false,false,true': [0.611, 3, 1], 'false,false,false,false': [0.816, 2, 1]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(D, A), tweets(D, E)', 'false,true': 'tweets(A, E)', 'false,true,true': 'follows(F, D), follows(D, F)', 'false,false': 'follows(A, G), follows(G, H)', 'false,false,true': 'recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A)'}, {'true': [0.0, 0, 5], 'false,true,true,true': [1.19, 4, 3], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 2, 0], 'false,false,true,true': [0.202, 0, 2], 'false,false,true,false': [0.007, 2, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.013, 2, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), tweets(D, E)', 'true,true': 'tweets(C, F), tweets(A, F)', 'true,true,false': 'follows(C, C)', 'false': 'follows(A, A)', 'false,false': 'follows(A, G), follows(G, G)', 'false,false,false': 'follows(H, A), follows(A, I)'}, {'true,true,true': [0.153, 0, 3], 'true,true,false,true': [0.0, 0, 0], 'true,true,false,false': [0.0, 0, 2], 'true,false': [0.0, 0, 1], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [1.154, 5, 2], 'false,false,false,false': [0.823, 5, 2]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(A, D)', 'false,true': 'follows(E, A), follows(E, D)', 'false,true,false': 'follows(D, F)', 'false,false': 'tweets(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true': [0.151, 0, 6], 'false,true,true': [0.086, 4, 0], 'false,true,false,true': [1.083, 3, 3], 'false,true,false,false': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 1], 'false,false,true,false': [0.036, 2, 0], 'false,false,false': [0.0, 1, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, D)', 'false,false': 'tweets(A, E), follows(F, A)', 'false,false,true': 'follows(G, F), recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A), follows(H, H)'}, {'true': [0.134, 0, 6], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.382, 0, 3], 'false,false,true,false': [0.043, 4, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.741, 6, 1]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,true': 'follows(A, E), tweets(E, D)', 'false,true,true': 'follows(E, E)', 'false,true,false': 'tweets(F, D), recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(A, A)'}, {'true': [0.12, 0, 6], 'false,true,true,true': [0.0, 0, 0], 'false,true,true,false': [0.861, 4, 2], 'false,true,false,true': [0.0, 0, 1], 'false,true,false,false': [0.017, 2, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.704, 3, 1], 'false,false,false': [0.0, 1, 0]}], ['accounttype(A, B)', {'': 'follows(C, A), follows(D, C)', 'true': 'recursion_accounttype(D, B), follows(E, D)', 'false': 'recursion_accounttype(F, B)', 'false,true': 'follows(F, G), follows(A, G)', 'false,false': 'follows(H, A)', 'false,false,false': 'follows(A, I)'}, {'true,true': [0.5, 0, 8], 'true,false': [0.079, 6, 0], 'false,true,true': [0.321, 0, 2], 'false,true,false': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.011, 2, 0], 'false,false,false,false': [0.009, 2, 0]}]]
[{'': [-1.4802973661668753e-16, 0.20408163265306117], 'false': [nan, 0.20408163265306117], 'false,false': [0.0, 0.1775147928994083], 'false,false,false': [0.18750000000000003, 0.16000000000000003], 'true': [0.0, 0.0]}, {'': [7.401486830834377e-17, 0.19201894170153586], 'false': [0.0, 0.17737188220702363], 'false,false': [nan, 0.1773718822070237], 'false,false,false': [0.22222222222222224, 0.12298438768644371], 'true': [7.401486830834377e-17, nan], 'false,true': [0.0, nan]}, {'': [-4.4408920985006264e-17, 0.17937597267462976], 'false': [nan, 0.1793759726746297], 'false,false': [0.1840632459131523, 0.1723340764806962], 'false,false,true': [0.1840632459131523, nan], 'true': [-4.4408920985006264e-17, nan]}, {'': [4.4408920985006264e-17, 0.17766361939627404], 'false': [nan, 0.17766361939627404], 'false,false': [0.19373407515488872, 0.1559441048324322], 'false,false,true': [0.19373407515488872, nan], 'false,false,false': [0.09330740583686, 0.22222222222222218], 'true': [0.0, 0.0], 'true,false': [0.0, nan]}, {'': [-2.2204460492503132e-17, 0.17533537320008794], 'false': [0.17932448665462875, 0.16931768979294423], 'false,true': [0.20233236818226916, 0.0], 'false,true,true': [0.20233236818226916, nan], 'false,false': [0.19597627699454234, 8.356151977660653e-05], 'false,false,true': [0.02041456842420425, 2.3722583129943964e-05], 'false,false,false': [nan, 8.356151977660653e-05]}, {'': [0.005363290459097891, 0.14396335739734353], 'false': [nan, 0.1439633573973435], 'false,false': [nan, 0.14396335739734353], 'false,false,false': [0.19024677485806837, 0.09680184994551408], 'true': [0.005649046340855446, 0.0], 'true,true': [0.007845897695632561, 0.0], 'true,true,false': [nan, 0.0]}, {'': [0.0038080143824610704, 0.14349232123873362], 'false': [0.18224632185064277, 0.03401446390943436], 'false,true': [0.0018567965128324024, 0.19565245664059602], 'false,true,false': [0.19565245664059602, nan], 'false,false': [0.04090919168491617, 0.0], 'false,false,true': [0.0, 0.0006416449085962367]}, {'': [0.003001386443420073, 0.1215882954721628], 'false': [nan, 0.1215882954721628], 'false,false': [0.15156450925230427, 0.07850103303615828], 'false,false,true': [0.048574555885772606, 0.00045981512622657317], 'false,false,false': [nan, 0.07850103303615828]}, {'': [0.002386172204985604, 0.09498196376080055], 'false': [0.08998048664810884, 0.10348323911522257], 'false,false': [0.12396149157377623, 0.0], 'false,false,true': [nan, 0.12396149157377623], 'false,true': [0.12358982763241723, 0.01610565416676981], 'false,true,true': [nan, 0.12358982763241723], 'false,true,false': [0.0, 0.0001372563413751457]}, {'': [0.06079934178709633, 0.08901434941930374], 'false': [0.05155635079192944, 0.0021670350828797633], 'true': [0.031197855219863374, 0.0010310937383291724], 'false,true': [0.05155635079192944, nan], 'false,false': [nan, 0.0021670350828797633], 'false,false,false': [5.5150022740362015e-05, 4.31466821758323e-05]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
0;true;tweets(A, D), tweets(C, D).;true;true
0;false;follows(F, A), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
1;false;follows(E, A), recursion_accounttype(E, B).;true;true
2;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
3;true;follows(A, D), follows(C, D).;true;true
4;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
4;false;follows(D, A), tweets(D, E).;true;true
4;false,true;tweets(A, E).;true;true
4;false,false;follows(A, G), follows(G, H).;true;true
4;false,false,true;recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
5;true;follows(D, A), tweets(D, E).;true;true
5;true,true;tweets(C, F), tweets(A, F).;true;true
6;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
6;false;follows(A, D).;true;true
6;false,true;follows(E, A), follows(E, D).;true;true
6;false,false;tweets(A, G).;true;true
6;false,false,true;recursion_accounttype(H, B).;true;true
7;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
7;false;tweets(A, E), follows(F, A).;true;true
7;false,true;follows(G, F), recursion_accounttype(G, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;tweets(A, D).;true;true
8;false,true;follows(A, E), tweets(E, D).;true;true
8;false,true,false;tweets(F, D), recursion_accounttype(F, B).;true;true
8;false,false;follows(A, G).;true;true
9;;accounttype(A, B) :- follows(C, A), follows(D, C).;true;true
9;true;recursion_accounttype(D, B), follows(E, D).;true;true
9;false;recursion_accounttype(F, B).;true;true
9;false,false;follows(A, I).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), tweets(C, D) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, F) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.7194734122109545;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, E) )
%   | | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.5553664367462845;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, D), tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then return 0.5553664367462845;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( follows(A, G) )
%   | | then return 0.05460432554136632;  // std dev = 0.578, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return -0.11231637819360639;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(C, D) )
%   | then return 0.41751358415830997;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.41751358415830997;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, E) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then return 0.44237991197550564;  // std dev = 0.111, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.11787683531782388;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return -0.1015963294878363;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(D, A), tweets(D, E) )
%   | then if ( tweets(A, E) )
%   | | then return 0.08217022592270719;  // std dev = 0.202, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | else return -0.10616106135086315;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( follows(A, F), follows(F, G) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.37354771600034875;  // std dev = 0.082, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return -0.09942616877006205;  // std dev = 0.010, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return -0.09269127618926096;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(D, E) )
%   | then if ( tweets(C, F), tweets(A, F) )
%   | | then return 0.2693994256192294;  // std dev = 0.035, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.25517224256948945;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else return 0.24068706047094435;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( tweets(A, G), follows(H, A) )
%   | then if ( tweets(I, G), recursion_accounttype(I, B) )
%   | | then return 0.2836266086689693;  // std dev = 0.035, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.09983689366245524;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.02881644264154787;  // std dev = 0.152, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.21308856446279026;  // std dev = 0.036, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(A, D) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then return -0.09191636015182374;  // std dev = 0.002, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.09384683072153492;  // std dev = 0.460, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else if ( tweets(A, F) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.20508008309249048;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return -0.08709099085976166;  // std dev = 0.006, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return -0.08296581236036966;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.17957315636985707;  // std dev = 0.031, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( tweets(A, D), follows(E, A) )
%   | then if ( follows(F, E), recursion_accounttype(F, B) )
%   | | then return 0.20808956520315067;  // std dev = 0.042, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.08397048025261143;  // std dev = 0.000322, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.029446244279897817;  // std dev = 0.147, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1546449818829684;  // std dev = 0.028, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( tweets(A, D) )
%   | then if ( follows(A, E), tweets(E, D) )
%   | | then return 0.010288564030271207;  // std dev = 0.313, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else if ( tweets(F, D), recursion_accounttype(F, B) )
%   | | | then return 0.14578992063898066;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return -0.07625610956798844;  // std dev = 0.002, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( follows(A, G) )
%   | | then return 0.012837421835026952;  // std dev = 0.373, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return -0.07480441946538426;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(D, C) )
%   then if ( recursion_accounttype(D, B), follows(E, D) )
%   | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0.1315495973079796;  // std dev = 0.004, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.17893988431279617;  // std dev = 0.026, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return -0.08230319424002135;  // std dev = 0.022, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( recursion_accounttype(G, B) )
%   | then return 0.2292797689892448;  // std dev = 0.146, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(A, H) )
%   | | then return -0.09485106497994644;  // std dev = 0.009, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return -0.06960857027370781;  // std dev = 0.000255, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */


Results
   AUC ROC   = 0.992454
   AUC PR    = 0.338635
   CLL	      = -0.107308
   Precision = 0.334286 at threshold = 0.5
   Recall    = 0.928571
   F1        = 0.491597


Total learning time: 1.715 seconds
Total inference time: 24.034 seconds
AUC ROC: 0.992454


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.118098
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.455 seconds
Refined model CLL: -0.118098


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.992454
   AUC PR    = 0.338635
   CLL	      = -0.107308
   Precision = 0.334286 at threshold = 0.5
   Recall    = 0.928571
   F1        = 0.491597


Total learning time: 3.378 seconds
Total inference time: 24.034 seconds
AUC ROC: 0.992454
Total revision time: 3.378
Best scored revision CLL: -0.118098


Dataset: 7_yeast_twitter, Fold: 1, Type: Transfer (trRDN-B), Time: 00:00:54
{'AUC ROC': 0.992454, 'AUC PR': 0.338635, 'CLL': -0.107308, 'Precision': [0.334286, 0.5], 'Recall': 0.928571, 'F1': 0.491597, 'Learning time': 3.378, 'Inference time': 24.034, 'parameter_10': {'AUC ROC': 0.979922, 'AUC PR': 0.351813, 'CLL': -0.197046, 'Precision': [0.323529, 0.5], 'Recall': 0.785714, 'F1': 0.458333, 'Learning time': 0.793, 'Inference time': 8.739}}


Amount of data: 15
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
0;true;complex(A, D), complex(C, D).;false;false
0;false;interaction(E, A), interaction(E, E).;true;true
0;false,true;interaction(A, E).;true;true
0;false,true,true;complex(A, F).;false;false
0;false,true,false;complex(E, G), location(A, H).;false;false
0;false,false;interaction(A, I), recursion_proteinclass(I, B).;false;true
0;false,false,false;location(A, J), complex(A, K).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
1;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
1;true,false;interaction(E, C), interaction(E, E).;false;true
1;true,false,false;interaction(A, F), enzyme(F, G).;false;false
1;false;interaction(A, H), recursion_proteinclass(H, B).;true;true
1;false,true;enzyme(H, I), interaction(H, J).;false;false
1;false,false;interaction(A, A).;false;true
1;false,false,false;complex(A, K), interaction(L, A).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(C, D).;false;true
2;true,false;interaction(E, A), interaction(A, E).;false;true
2;true,false,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(A, G), enzyme(G, H).;true;true
2;false,false,true;interaction(G, I), phenotype(G, J).;false;false
2;false,false,false;phenotype(A, K).;false;false
3;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
3;true;interaction(D, A), interaction(D, C).;false;true
3;true,false;complex(C, E).;false;true
3;true,false,false;interaction(A, F), interaction(F, F).;false;false
3;false;interaction(A, A).;false;true
3;false,false;interaction(A, G), interaction(H, A).;true;true
3;false,false,true;complex(H, I), complex(G, I).;false;false
3;false,false,false;complex(A, J), phenotype(A, K).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
4;false;interaction(A, D), complex(D, E).;true;true
4;false,true;complex(A, E), location(A, F).;true;true
4;false,true,true;interaction(D, G), interaction(G, D).;false;false
4;false,true,false;enzyme(D, H), phenotype(A, I).;false;false
4;false,false;interaction(J, A), interaction(K, J).;true;true
4;false,false,true;recursion_proteinclass(K, B).;false;false
4;false,false,false;interaction(A, L), phenotype(L, M).;false;false
5;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
5;true;interaction(A, D), complex(D, E).;true;false
5;true,true;complex(C, F), complex(A, F).;false;true
5;true,true,false;interaction(C, C).;false;false
5;false;interaction(A, A).;false;true
5;false,false;interaction(G, A), interaction(G, G).;true;true
5;false,false,true;complex(G, H), location(A, I).;false;false
5;false,false,false;interaction(A, J), interaction(K, A).;false;false
6;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
6;false;interaction(D, A), enzyme(D, E).;true;true
6;false,true;enzyme(A, E).;true;true
6;false,true,true;interaction(A, F), interaction(D, F).;false;false
6;false,true,false;interaction(G, D), enzyme(G, H).;false;false
6;false,false;complex(A, I), location(A, J).;true;true
6;false,false,true;location(K, J), recursion_proteinclass(K, B).;false;false
6;false,false,false;phenotype(A, L).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
7;false;interaction(D, A), interaction(D, D).;true;true
7;false,true;complex(D, E), complex(A, E).;true;true
7;false,true,true;interaction(A, F).;false;false
7;false,true,false;enzyme(A, G), phenotype(D, H).;false;false
7;false,false;complex(A, I), interaction(A, J).;true;true
7;false,false,true;interaction(J, K), recursion_proteinclass(K, B).;false;false
7;false,false,false;interaction(A, L), interaction(L, L).;false;false
8;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
8;false;complex(A, D).;true;true
8;false,true;interaction(E, A), complex(E, D).;true;true
8;false,true,true;interaction(E, E).;false;false
8;false,true,false;complex(F, D), recursion_proteinclass(F, B).;false;false
8;false,false;interaction(G, A), phenotype(G, H).;true;true
8;false,false,true;interaction(A, A).;false;false
8;false,false,false;phenotype(A, I).;false;false
9;;proteinclass(A, B) :- interaction(A, C), interaction(C, D).;true;true
9;true;recursion_proteinclass(D, B), interaction(D, E).;false;false
9;false;phenotype(A, F).;true;true
9;false,true;phenotype(G, F), recursion_proteinclass(G, B).;true;false
9;false,true,true;interaction(H, G), interaction(H, A).;false;false
9;false,false;interaction(A, I), location(A, J).;true;true
9;false,false,true;location(I, K).;false;false
9;false,false,false;interaction(L, A), location(L, M).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), tweets(C, D) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, E), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.088918165868743;  // std dev = 1.519, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | | | else return 0.30259337954395676;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.7194734122109546;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E) )
%   | | then return 0.7194734122109545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), follows(A, H) )
%   | | | then return 0.06919877266740183;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | | else return 0.21096865229674072;  // std dev = 1.746, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C) )
%   | then return 0.5553664367462843;  // std dev = 1.49e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A) )
%   | | then if ( follows(F, E) )
%   | | | then return 0.051847792252065865;  // std dev = 1.404, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
%   | | | else return -0.16220899692542953;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.31937689356262655;  // std dev = 0.478, 11.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=6 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(C, D) )
%   | then return 0.4175135841583099;  // std dev = 1.49e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( tweets(C, E) )
%   | | then return 0.41751358415830997;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, G) )
%   | | then if ( tweets(G, H), tweets(F, H) )
%   | | | then return 0.0695241036785076;  // std dev = 1.373, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, I) )
%   | | | then return 0.06916509071626781;  // std dev = 0.977, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0.29596189164718184;  // std dev = 1.309, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.3207118471601497;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(D, A), tweets(D, E) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(F, D), follows(D, F) )
%   | | | then return 0.08672191035426895;  // std dev = 1.338, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | | else return -0.15000422038525327;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.23774797250015461;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.6109504894750922;  // std dev = 0.176, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.2801865386515585;  // std dev = 0.082, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( follows(I, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.09801831063821728;  // std dev = 1.116, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(D, E) )
%   | then if ( tweets(C, F), tweets(A, F) )
%   | | then return 0.3172719071490301;  // std dev = 0.215, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(C, C) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.25517224256948945;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else return 0.3149420410488668;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G), follows(G, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(H, A), follows(A, I) )
%   | | | then return 0.012583279801234856;  // std dev = 1.258, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | | else return 0.09993197884729106;  // std dev = 1.487, 13.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.2420746318795958;  // std dev = 0.202, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(A, D) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then return -0.18509550913590025;  // std dev = 0.057, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( follows(D, F) )
%   | | | then return 0.24396552799270088;  // std dev = 1.299, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.47519420374206733;  // std dev = 0.337, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return -0.2506342750290082;  // std dev = 0.044, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.05053788073118104;  // std dev = 0.471, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.20165998485988418;  // std dev = 0.183, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(A, D), follows(D, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E), follows(F, A) )
%   | | then if ( follows(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.5635022337132555;  // std dev = 0.492, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.17492945743987667;  // std dev = 0.091, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( follows(H, A), follows(H, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.045334306859982125;  // std dev = 1.376, 12.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.17195143967019952;  // std dev = 0.165, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( tweets(A, D) )
%   | then if ( follows(A, E), tweets(E, D) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.019668967487230574;  // std dev = 1.016, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else if ( tweets(F, D), recursion_accounttype(F, B) )
%   | | | then return 0.3479485009231584;  // std dev = 0.352, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return -0.19239015410263147;  // std dev = 0.066, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07745974437793751;  // std dev = 0.846, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return -0.04930790814281597;  // std dev = 0.471, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(D, C) )
%   then if ( recursion_accounttype(D, B), follows(E, D) )
%   | then return 0.25031854174279317;  // std dev = 0.653, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.17002986019655011;  // std dev = 0.121, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( recursion_accounttype(F, B) )
%   | then if ( follows(F, G), follows(A, G) )
%   | | then return 0.33817019946313565;  // std dev = 0.213, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.5701106622004075;  // std dev = 0.083, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(H, A) )
%   | | then return -0.09864737806481445;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( follows(A, I) )
%   | | | then return -0.31316096549548295;  // std dev = 0.096, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return -0.3181310036123413;  // std dev = 0.130, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.987985
   AUC PR    = 0.343802
   CLL	      = -0.1954
   Precision = 0.317757 at threshold = 0.5
   Recall    = 0.809524
   F1        = 0.456376


Total learning time: 0.816 seconds
Total inference time: 8.714 seconds
AUC ROC: 0.987985


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.268073
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.866667
   F1        = 0.928571


Total scoring time: 0.433 seconds
Parameter learned model CLL: -0.268073


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'tweets(A, D), tweets(C, D)', 'false': 'follows(A, E), follows(E, E)', 'false,false': 'follows(F, A), recursion_accounttype(F, B)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.0, 0, 5], 'true,false': [0.0, 0, 2], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [1.519, 10, 3], 'false,false,false,false': [1.491, 5, 4]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E)', 'false,false': 'follows(A, A)', 'false,false,false': 'tweets(A, G), follows(A, H)'}, {'true,true': [0.0, 0, 7], 'true,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 1], 'false,true,false': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [1.247, 7, 2], 'false,false,false,false': [1.746, 8, 5]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A)', 'false,false,true': 'follows(F, E)'}, {'true,true': [1.49e-08, 0, 6], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.404, 9, 3], 'false,false,true,false': [0.0, 1, 0], 'false,false,false': [0.478, 5, 6]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(A, D), follows(C, D)', 'true,false': 'tweets(C, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, G)', 'false,false,true': 'tweets(G, H), tweets(F, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true': [1.49e-08, 0, 5], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.373, 8, 3], 'false,false,true,false': [0.0, 0, 0], 'false,false,false,true': [0.977, 4, 2], 'false,false,false,false': [1.309, 3, 4]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(D, A), tweets(D, E)', 'false,true': 'tweets(A, E)', 'false,true,true': 'follows(F, D), follows(D, F)', 'false,false': 'follows(A, G), follows(G, H)', 'false,false,true': 'recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A)'}, {'true': [0.0, 0, 6], 'false,true,true,true': [1.338, 7, 3], 'false,true,true,false': [0.0, 1, 0], 'false,true,false': [0.0, 2, 0], 'false,false,true,true': [0.176, 0, 4], 'false,false,true,false': [0.082, 2, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.116, 3, 2]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), tweets(D, E)', 'true,true': 'tweets(C, F), tweets(A, F)', 'true,true,false': 'follows(C, C)', 'false': 'follows(A, A)', 'false,false': 'follows(A, G), follows(G, G)', 'false,false,false': 'follows(H, A), follows(A, I)'}, {'true,true,true': [0.215, 0, 4], 'true,true,false,true': [0.0, 0, 0], 'true,true,false,false': [0.0, 0, 2], 'true,false': [0.0, 0, 1], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [1.258, 8, 2], 'false,false,false,false': [1.487, 7, 6]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(A, D)', 'false,true': 'follows(E, A), follows(E, D)', 'false,true,false': 'follows(D, F)', 'false,false': 'tweets(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true': [0.202, 0, 7], 'false,true,true': [0.057, 6, 0], 'false,true,false,true': [1.299, 4, 5], 'false,true,false,false': [0.0, 0, 0], 'false,false,true,true': [0.337, 0, 2], 'false,false,true,false': [0.044, 3, 0], 'false,false,false': [0.471, 2, 1]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, D)', 'false,false': 'tweets(A, E), follows(F, A)', 'false,false,true': 'follows(G, F), recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A), follows(H, H)'}, {'true': [0.183, 0, 7], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.492, 0, 3], 'false,false,true,false': [0.091, 8, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.376, 7, 5]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,true': 'follows(A, E), tweets(E, D)', 'false,true,true': 'follows(E, E)', 'false,true,false': 'tweets(F, D), recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(A, A)'}, {'true': [0.165, 0, 7], 'false,true,true,true': [0.0, 0, 0], 'false,true,true,false': [1.016, 7, 2], 'false,true,false,true': [0.352, 0, 2], 'false,true,false,false': [0.066, 3, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.846, 3, 3], 'false,false,false': [0.471, 2, 1]}], ['accounttype(A, B)', {'': 'follows(C, A), follows(D, C)', 'true': 'recursion_accounttype(D, B), follows(E, D)', 'false': 'recursion_accounttype(F, B)', 'false,true': 'follows(F, G), follows(A, G)', 'false,false': 'follows(H, A)', 'false,false,false': 'follows(A, I)'}, {'true,true': [0.653, 0, 9], 'true,false': [0.121, 9, 0], 'false,true,true': [0.213, 0, 4], 'false,true,false': [0.083, 0, 2], 'false,false,true': [0.0, 1, 0], 'false,false,false,true': [0.096, 2, 0], 'false,false,false,false': [0.13, 3, 0]}]]
[{'': [-2.5376526277146434e-16, 0.22684310018903578], 'false': [nan, 0.22684310018903578], 'false,false': [0.0, 0.21694214876033058], 'false,false,false': [0.17751479289940816, 0.2469135802469134], 'true': [0.0, 0.0]}, {'': [-6.344131569286608e-17, 0.21811802928645999], 'false': [0.0, 0.21407926854601547], 'false,false': [nan, 0.21407926854601575], 'false,false,false': [0.1728395061728395, 0.23440767831449494], 'false,true': [0.0, nan], 'true': [-6.344131569286608e-17, nan]}, {'': [3.700743415417188e-17, 0.20855849283898056], 'false': [nan, 0.20855849283898073], 'false,false': [0.15492831254577816, 0.22825248414309363], 'false,false,true': [0.16431436610462033, 0.0], 'true': [3.700743415417188e-17, nan]}, {'': [7.401486830834377e-17, 0.20040483745737955], 'false': [nan, 0.20040483745737947], 'false,false': [0.1714590645156608, 0.21810213349626084], 'false,false,false': [0.15914360436960168, 0.24489795918367352], 'false,false,true': [0.1714590645156608, nan], 'true': [4.4408920985006264e-17, 0.0], 'true,false': [0.0, nan]}, {'': [-3.700743415417188e-17, 0.19570863245132056], 'false': [0.15350446185873473, 0.22452613913868655], 'false,false': [0.18275711150951537, 0.24922698206337843], 'false,false,false': [nan, 0.24922698206337843], 'false,false,true': [0.007741539452588153, 0.0033714536911037263], 'false,true': [0.16729462650261132, 0.0], 'false,true,true': [0.17892961088242648, 0.0]}, {'': [0.007386784858912706, 0.16684289029313512], 'false': [nan, 0.16684289029313512], 'false,false': [nan, 0.16684289029313512], 'false,false,false': [0.15830967265544904, 0.17008960158883019], 'true': [0.00856970742420321, 0.0], 'true,true': [0.011569105022674386, 0.0], 'true,true,false': [nan, 0.0]}, {'': [0.005852966939653513, 0.16545829978709967], 'false': [0.1568428195066643, 0.17872979985971443], 'false,false': [0.1495809634216107, 0.22222222222222218], 'false,true': [0.0005395105115133109, 0.18740767607068332], 'false,true,false': [0.18740767607068337, nan], 'false,false,true': [0.056904354881838676, 0.0006345768767386425]}, {'': [0.0047723002400769255, 0.14498868498244302], 'false': [nan, 0.14498868498244302], 'false,false': [0.1309292726303349, 0.15770612236640735], 'false,false,false': [nan, 0.15770612236640733], 'false,false,true': [0.08076102726450096, 0.0010292657790841007]}, {'': [0.0038946256906761917, 0.1271878528597573], 'false': [0.1078789795278204, 0.157103222486855], 'false,false': [0.11918704337729714, 0.2222222222222222], 'false,false,true': [nan, 0.11918704337729714], 'false,true': [0.11460756169210636, 0.09575684956346203], 'false,true,true': [nan, 0.11460756169210636], 'false,true,false': [0.06204005329753702, 0.001448368894713568]}, {'': [0.06869081427266321, 0.1366917810006943], 'false': [0.020690291032260166, 0.010918401869167019], 'true': [0.0474008747921356, 0.0016343642467109658], 'false,true': [0.011373025771943851, 0.003460569383039569], 'false,false': [0.0, 0.0052180254929820365], 'false,false,false': [0.0046249389043895445, 0.005603536040490483]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
0;true;tweets(A, D), tweets(C, D).;true;true
0;false;follows(F, A), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
1;false;follows(E, A), recursion_accounttype(E, B).;true;true
2;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;false;follows(E, A).;true;true
2;false,true;follows(F, E).;true;true
3;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
3;true;follows(A, D), follows(C, D).;true;true
4;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
4;false;follows(D, A), tweets(D, E).;true;true
4;false,true;tweets(A, E).;true;true
4;false,true,true;follows(F, D), follows(D, F).;true;true
5;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
5;true;follows(D, A), tweets(D, E).;true;true
5;true,true;tweets(C, F), tweets(A, F).;true;true
6;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
6;false;follows(A, D).;true;true
6;false,true;follows(E, A), follows(E, D).;true;true
6;false,false;tweets(A, G).;true;true
6;false,false,true;recursion_accounttype(H, B).;true;true
7;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
7;false;tweets(A, E), follows(F, A).;true;true
7;false,true;follows(G, F), recursion_accounttype(G, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;tweets(A, D).;true;true
8;false,true;follows(A, E), tweets(E, D).;true;true
8;false,true,false;tweets(F, D), recursion_accounttype(F, B).;true;true
9;;accounttype(A, B) :- follows(C, A), follows(D, C).;true;true
9;true;recursion_accounttype(D, B), follows(E, D).;true;true
9;false;recursion_accounttype(F, B).;true;true
9;false,false;follows(H, A).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), tweets(C, D) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then if ( follows(A, G), follows(F, G) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.19148226843284552;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.4295775065280837;  // std dev = 1.309, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.7194734122109546;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(E, A) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return -0.13922792860841146;  // std dev = 0.048, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.1803221146449018;  // std dev = 1.132, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else if ( follows(A, G) )
%   | | | then return 0.40459982238161707;  // std dev = 1.076, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.21175123959409992;  // std dev = 1.103, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.5553664367462843;  // std dev = 1.49e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D) )
%   | | then if ( tweets(A, F), follows(A, G) )
%   | | | then return 0.18697238266811667;  // std dev = 1.194, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return -0.15024824944816728;  // std dev = 0.058, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.14659895297628758;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( follows(A, H) )
%   | | then return 0.37028863352350005;  // std dev = 1.090, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.17732282585287065;  // std dev = 1.104, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(C, D) )
%   | then return 0.4175135841583099;  // std dev = 1.49e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.41751358415830997;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A) )
%   | then if ( follows(F, E), recursion_accounttype(F, B) )
%   | | then return 0.6868013737491857;  // std dev = 0.218, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(E, G), follows(G, A) )
%   | | | then return -0.12499576235458033;  // std dev = 0.031, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return -0.1739995556833879;  // std dev = 0.067, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( follows(A, H) )
%   | | then return 0.28979115017633555;  // std dev = 1.084, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.14521166726175158;  // std dev = 1.105, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.3207118471601497;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(D, A), tweets(D, E) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(F, D), follows(D, F) )
%   | | | then return 0.06840998430413663;  // std dev = 1.003, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | | else return -0.11084611229154442;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.11715188643376445;  // std dev = 0.043, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( follows(A, G) )
%   | | then return 0.22139611512330978;  // std dev = 1.081, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.11675092654768486;  // std dev = 1.105, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(D, E) )
%   | then if ( tweets(C, F), tweets(A, F) )
%   | | then return 0.27323810320180997;  // std dev = 0.063, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.25517224256948945;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else return 0.34094220712793966;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.4978350697256613;  // std dev = 0.297, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, G), tweets(A, I) )
%   | | | then return -0.14738033715349536;  // std dev = 0.072, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.11196404570724594;  // std dev = 0.045, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( follows(A, J) )
%   | | then return 0.13284321496249762;  // std dev = 1.064, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.0925299317422575;  // std dev = 1.106, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.22558522872342043;  // std dev = 0.028, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(A, D) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then return -0.10453039221634924;  // std dev = 0.051, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( tweets(A, F), follows(G, A) )
%   | | | then return 0.2702650928344275;  // std dev = 0.555, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.06293642782102483;  // std dev = 1.083, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.4380230081904033;  // std dev = 0.376, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return -0.1736962315233125;  // std dev = 0.150, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.014890460419488308;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.18876602295132486;  // std dev = 0.025, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( tweets(A, D), follows(E, A) )
%   | then if ( follows(F, E), recursion_accounttype(F, B) )
%   | | then return 0.32611537759717096;  // std dev = 0.254, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, G), follows(G, A) )
%   | | | then return -0.1304639862514509;  // std dev = 0.111, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.09161430353867588;  // std dev = 0.011, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( tweets(A, H) )
%   | | then return -0.041549282480037454;  // std dev = 0.805, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.11618320727395816;  // std dev = 0.942, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return -0.011518545101836808;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.16163524800116774;  // std dev = 0.022, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( tweets(A, D) )
%   | then if ( follows(A, E), tweets(E, D) )
%   | | then return -0.04578890346274147;  // std dev = 0.241, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else if ( tweets(F, D), recursion_accounttype(F, B) )
%   | | | then return 0.35171736689969174;  // std dev = 0.372, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return -0.14350222813328686;  // std dev = 0.135, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( follows(A, G) )
%   | | then return 0.09349375980525876;  // std dev = 0.934, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return -0.00892084205610122;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(D, C) )
%   then if ( recursion_accounttype(D, B), follows(E, D) )
%   | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0.11783136172680043;  // std dev = 0.059, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.2994441494696118;  // std dev = 0.156, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( tweets(A, G), follows(A, H) )
%   | | then return -0.11209541956627263;  // std dev = 0.098, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.09643992970888475;  // std dev = 0.066, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( recursion_accounttype(I, B) )
%   | then return 0.4369138161221586;  // std dev = 0.360, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(J, A) )
%   | | then return -0.07263696124488787;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.38681630998988537;  // std dev = 0.266, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */


Results
   AUC ROC   = 0.98978
   AUC PR    = 0.347817
   CLL	      = -0.190246
   Precision = 0.34188 at threshold = 0.5
   Recall    = 0.952381
   F1        = 0.503145


Total learning time: 1.467 seconds
Total inference time: 11.328 seconds
AUC ROC: 0.98978


Results scoring model
   AUC ROC   = 0.995556
   AUC PR    = 0.995694
   CLL	      = -0.234152
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.933333
   F1        = 0.965517


Total scoring time: 0.468 seconds
Refined model CLL: -0.234152


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.98978
   AUC PR    = 0.347817
   CLL	      = -0.190246
   Precision = 0.34188 at threshold = 0.5
   Recall    = 0.952381
   F1        = 0.503145


Total learning time: 3.184 seconds
Total inference time: 11.328 seconds
AUC ROC: 0.98978
Total revision time: 3.184
Best scored revision CLL: -0.234152


Dataset: 7_yeast_twitter, Fold: 1, Type: Transfer (trRDN-B), Time: 00:01:18
{'AUC ROC': 0.98978, 'AUC PR': 0.347817, 'CLL': -0.190246, 'Precision': [0.34188, 0.5], 'Recall': 0.952381, 'F1': 0.503145, 'Learning time': 3.184, 'Inference time': 11.328, 'parameter_15': {'AUC ROC': 0.987985, 'AUC PR': 0.343802, 'CLL': -0.1954, 'Precision': [0.317757, 0.5], 'Recall': 0.809524, 'F1': 0.456376, 'Learning time': 0.816, 'Inference time': 8.714}}


Amount of data: 20
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
0;true;complex(A, D), complex(C, D).;false;false
0;false;interaction(E, A), interaction(E, E).;true;true
0;false,true;interaction(A, E).;true;true
0;false,true,true;complex(A, F).;false;false
0;false,true,false;complex(E, G), location(A, H).;false;false
0;false,false;interaction(A, I), recursion_proteinclass(I, B).;false;true
0;false,false,false;location(A, J), complex(A, K).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
1;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
1;true,false;interaction(E, C), interaction(E, E).;false;true
1;true,false,false;interaction(A, F), enzyme(F, G).;false;false
1;false;interaction(A, H), recursion_proteinclass(H, B).;true;true
1;false,true;enzyme(H, I), interaction(H, J).;false;false
1;false,false;interaction(A, A).;false;true
1;false,false,false;complex(A, K), interaction(L, A).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(C, D).;false;true
2;true,false;interaction(E, A), interaction(A, E).;false;true
2;true,false,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(A, G), enzyme(G, H).;true;true
2;false,false,true;interaction(G, I), phenotype(G, J).;false;false
2;false,false,false;phenotype(A, K).;false;false
3;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
3;true;interaction(D, A), interaction(D, C).;false;true
3;true,false;complex(C, E).;false;true
3;true,false,false;interaction(A, F), interaction(F, F).;false;false
3;false;interaction(A, A).;false;true
3;false,false;interaction(A, G), interaction(H, A).;true;true
3;false,false,true;complex(H, I), complex(G, I).;false;false
3;false,false,false;complex(A, J), phenotype(A, K).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
4;false;interaction(A, D), complex(D, E).;true;true
4;false,true;complex(A, E), location(A, F).;true;true
4;false,true,true;interaction(D, G), interaction(G, D).;false;false
4;false,true,false;enzyme(D, H), phenotype(A, I).;false;false
4;false,false;interaction(J, A), interaction(K, J).;true;true
4;false,false,true;recursion_proteinclass(K, B).;false;false
4;false,false,false;interaction(A, L), phenotype(L, M).;false;false
5;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
5;true;interaction(A, D), complex(D, E).;true;false
5;true,true;complex(C, F), complex(A, F).;false;true
5;true,true,false;interaction(C, C).;false;false
5;false;interaction(A, A).;false;true
5;false,false;interaction(G, A), interaction(G, G).;true;true
5;false,false,true;complex(G, H), location(A, I).;false;false
5;false,false,false;interaction(A, J), interaction(K, A).;false;false
6;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
6;false;interaction(D, A), enzyme(D, E).;true;true
6;false,true;enzyme(A, E).;true;true
6;false,true,true;interaction(A, F), interaction(D, F).;false;false
6;false,true,false;interaction(G, D), enzyme(G, H).;false;false
6;false,false;complex(A, I), location(A, J).;true;true
6;false,false,true;location(K, J), recursion_proteinclass(K, B).;false;false
6;false,false,false;phenotype(A, L).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
7;false;interaction(D, A), interaction(D, D).;true;true
7;false,true;complex(D, E), complex(A, E).;true;true
7;false,true,true;interaction(A, F).;false;false
7;false,true,false;enzyme(A, G), phenotype(D, H).;false;false
7;false,false;complex(A, I), interaction(A, J).;true;true
7;false,false,true;interaction(J, K), recursion_proteinclass(K, B).;false;false
7;false,false,false;interaction(A, L), interaction(L, L).;false;false
8;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
8;false;complex(A, D).;true;true
8;false,true;interaction(E, A), complex(E, D).;true;true
8;false,true,true;interaction(E, E).;false;false
8;false,true,false;complex(F, D), recursion_proteinclass(F, B).;false;false
8;false,false;interaction(G, A), phenotype(G, H).;true;true
8;false,false,true;interaction(A, A).;false;false
8;false,false,false;phenotype(A, I).;false;false
9;;proteinclass(A, B) :- interaction(A, C), interaction(C, D).;true;true
9;true;recursion_proteinclass(D, B), interaction(D, E).;false;false
9;false;phenotype(A, F).;true;true
9;false,true;phenotype(G, F), recursion_proteinclass(G, B).;true;false
9;false,true,true;interaction(H, G), interaction(H, A).;false;false
9;false,false;interaction(A, I), location(A, J).;true;true
9;false,false,true;location(I, K).;false;false
9;false,false,false;interaction(L, A), location(L, M).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), tweets(C, D) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, E), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.06867525088898598;  // std dev = 1.777, 19.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=4 */
%   | | | else return 0.40360348055405776;  // std dev = 1.651, 11.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.7194734122109544;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(C, E), follows(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, A) )
%   | | | then return 0.7194734122109544;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(H, G) )
%   | | then return 0.7194734122109545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, I), follows(A, J) )
%   | | | then return 0.08035102253059805;  // std dev = 1.519, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | | | else return 0.23030686337863776;  // std dev = 1.996, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C) )
%   | then return 0.5553664367462846;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A) )
%   | | then if ( follows(F, E) )
%   | | | then return 0.03224416948297225;  // std dev = 1.690, 18.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=4 */
%   | | | else return -0.16097739107135506;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.3762906775223633;  // std dev = 0.468, 13.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(C, D) )
%   | then return 0.41751358415830986;  // std dev = 2.58e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( tweets(C, E) )
%   | | then return 0.41751358415830997;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, G) )
%   | | then if ( tweets(G, H), tweets(F, H) )
%   | | | then return 0.09044874347063778;  // std dev = 1.614, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
%   | | | else return -0.16538015432447462;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( tweets(A, I) )
%   | | | then return 5.442005235521338E-4;  // std dev = 1.015, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return 0.3544548324153705;  // std dev = 1.414, 9.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=6 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.3207118471601497;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(D, A), tweets(D, E) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(F, D), follows(D, F) )
%   | | | then return 0.06623996473964106;  // std dev = 1.612, 15.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=4 */
%   | | | else return -0.1516777495729517;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.22159555113165075;  // std dev = 0.055, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.5707273772670703;  // std dev = 0.126, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.30570024812767527;  // std dev = 0.123, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( follows(I, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.2207532823158846;  // std dev = 1.305, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(D, E) )
%   | then if ( tweets(C, F), tweets(A, F) )
%   | | then return 0.29737027121897325;  // std dev = 0.231, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(C, C) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.25517224256948945;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else return 0.32625232141940497;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G), follows(G, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(H, A), follows(A, I) )
%   | | | then return 0.030459672173340273;  // std dev = 1.530, 14.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=3 */
%   | | | else return 0.09180674944421607;  // std dev = 1.665, 17.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=8 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.23634520888266733;  // std dev = 0.216, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(A, D) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then return -0.18990419894036586;  // std dev = 0.064, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( follows(D, F) )
%   | | | then return 0.28061592100359745;  // std dev = 1.413, 10.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=6 */
%   | | | else return -0.12182657387687316;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( tweets(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.4652870181513543;  // std dev = 0.321, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return -0.23147395658196607;  // std dev = 0.085, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.13065752235586994;  // std dev = 0.490, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1974093649486449;  // std dev = 0.196, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(A, D), follows(D, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E), follows(F, A) )
%   | | then if ( follows(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.6107809561236102;  // std dev = 0.516, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.16620718244970314;  // std dev = 0.108, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( follows(H, A), follows(H, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.05938291610886822;  // std dev = 1.539, 14.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.16870550571773876;  // std dev = 0.178, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( tweets(A, D) )
%   | then if ( follows(A, E), tweets(E, D) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.02994058273060511;  // std dev = 1.196, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | | else if ( tweets(F, D), recursion_accounttype(F, B) )
%   | | | then return 0.3337724094915772;  // std dev = 0.336, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return -0.1771838749401204;  // std dev = 0.106, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.02812690720993084;  // std dev = 0.832, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.08319225419675695;  // std dev = 0.490, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(D, C) )
%   then if ( recursion_accounttype(D, B), follows(E, D) )
%   | then return 0.2588869681717289;  // std dev = 0.753, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return -0.15905783570151485;  // std dev = 0.179, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else if ( recursion_accounttype(F, B) )
%   | then if ( follows(F, G), follows(A, G) )
%   | | then return 0.30670782231300675;  // std dev = 0.169, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.4689183042373437;  // std dev = 0.022, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(H, A) )
%   | | then return -0.10257905620415383;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( follows(A, I) )
%   | | | then return -0.3382731986043044;  // std dev = 0.130, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return -0.43786229702688395;  // std dev = 0.244, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.984069
   AUC PR    = 0.316159
   CLL	      = -0.204786
   Precision = 0.325228 at threshold = 0.5
   Recall    = 0.849206
   F1        = 0.47033


Total learning time: 0.826 seconds
Total inference time: 9.375 seconds
AUC ROC: 0.984069


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.265379
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.85
   F1        = 0.918919


Total scoring time: 0.456 seconds
Parameter learned model CLL: -0.265379


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'tweets(A, D), tweets(C, D)', 'false': 'follows(A, E), follows(E, E)', 'false,false': 'follows(F, A), recursion_accounttype(F, B)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.0, 0, 7], 'true,false': [0.0, 0, 2], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [1.777, 15, 4], 'false,false,false,false': [1.651, 5, 6]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'true,false': 'follows(C, E), follows(E, E)', 'true,false,false': 'follows(F, A)', 'false': 'follows(G, A), recursion_accounttype(G, B)', 'false,true': 'follows(H, G)', 'false,false': 'follows(A, A)', 'false,false,false': 'tweets(A, I), follows(A, J)'}, {'true,true': [0.0, 0, 8], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 1], 'false,true,false': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [1.519, 10, 3], 'false,false,false,false': [1.996, 10, 7]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A)', 'false,false,true': 'follows(F, E)'}, {'true,true': [0.0, 0, 8], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.69, 14, 4], 'false,false,true,false': [0.0, 1, 0], 'false,false,false': [0.468, 5, 8]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(A, D), follows(C, D)', 'true,false': 'tweets(C, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, G)', 'false,false,true': 'tweets(G, H), tweets(F, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true': [2.58e-08, 0, 7], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.614, 10, 4], 'false,false,true,false': [0.0, 1, 0], 'false,false,false,true': [1.015, 6, 2], 'false,false,false,false': [1.414, 3, 6]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(D, A), tweets(D, E)', 'false,true': 'tweets(A, E)', 'false,true,true': 'follows(F, D), follows(D, F)', 'false,false': 'follows(A, G), follows(G, H)', 'false,false,true': 'recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A)'}, {'true': [0.0, 0, 8], 'false,true,true,true': [1.612, 11, 4], 'false,true,true,false': [0.0, 1, 0], 'false,true,false': [0.055, 3, 0], 'false,false,true,true': [0.126, 0, 4], 'false,false,true,false': [0.123, 2, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.305, 3, 4]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), tweets(D, E)', 'true,true': 'tweets(C, F), tweets(A, F)', 'true,true,false': 'follows(C, C)', 'false': 'follows(A, A)', 'false,false': 'follows(A, G), follows(G, G)', 'false,false,false': 'follows(H, A), follows(A, I)'}, {'true,true,true': [0.231, 0, 6], 'true,true,false,true': [0.0, 0, 0], 'true,true,false,false': [0.0, 0, 2], 'true,false': [0.0, 0, 1], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [1.53, 11, 3], 'false,false,false,false': [1.665, 9, 8]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(A, D)', 'false,true': 'follows(E, A), follows(E, D)', 'false,true,false': 'follows(D, F)', 'false,false': 'tweets(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true': [0.216, 0, 9], 'false,true,true': [0.064, 8, 0], 'false,true,false,true': [1.413, 4, 6], 'false,true,false,false': [0.0, 1, 0], 'false,false,true,true': [0.321, 0, 2], 'false,false,true,false': [0.085, 5, 0], 'false,false,false': [0.49, 2, 3]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, D)', 'false,false': 'tweets(A, E), follows(F, A)', 'false,false,true': 'follows(G, F), recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A), follows(H, H)'}, {'true': [0.196, 0, 9], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.516, 0, 4], 'false,false,true,false': [0.108, 13, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.539, 7, 7]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,true': 'follows(A, E), tweets(E, D)', 'false,true,true': 'follows(E, E)', 'false,true,false': 'tweets(F, D), recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(A, A)'}, {'true': [0.178, 0, 9], 'false,true,true,true': [0.0, 0, 0], 'false,true,true,false': [1.196, 10, 3], 'false,true,false,true': [0.336, 0, 2], 'false,true,false,false': [0.106, 5, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.832, 3, 3], 'false,false,false': [0.49, 2, 3]}], ['accounttype(A, B)', {'': 'follows(C, A), follows(D, C)', 'true': 'recursion_accounttype(D, B), follows(E, D)', 'false': 'recursion_accounttype(F, B)', 'false,true': 'follows(F, G), follows(A, G)', 'false,false': 'follows(H, A)', 'false,false,false': 'follows(A, I)'}, {'true,true': [0.753, 0, 12], 'true,false': [0.179, 14, 0], 'false,true,true': [0.169, 0, 4], 'false,true,false': [0.022, 0, 4], 'false,false,true': [0.0, 1, 0], 'false,false,false,true': [0.13, 2, 0], 'false,false,false,false': [0.244, 3, 0]}]]
[{'': [-2.9605947323337506e-16, 0.22892819979188342], 'false': [nan, 0.22892819979188342], 'false,false': [0.0, 0.22222222222222215], 'false,false,false': [0.16620498614958432, 0.2479338842975207], 'true': [-2.5376526277146434e-16, 0.0]}, {'': [0.0, 0.21793580657946435], 'false': [0.0, 0.2152945478023486], 'false,false': [nan, 0.21529454780234883], 'false,false,false': [0.17751479289940827, 0.23444068845522098], 'true': [-1.1102230246251565e-16, 0.0], 'false,true': [0.0, nan], 'true,false': [nan, 0.0], 'true,false,false': [0.0, nan]}, {'': [-1.1102230246251565e-16, 0.20972476690709713], 'false': [nan, 0.20972476690709713], 'false,false': [0.15210739440891852, 0.219437542303268], 'false,false,true': [0.15859282776399033, 0.0], 'true': [-1.1102230246251565e-16, nan]}, {'': [1.1102230246251565e-16, 0.19785688270675467], 'false': [nan, 0.1978568827067547], 'false,false': [0.17771092489381318, 0.20948566973410623], 'false,false,false': [0.1288467765205879, 0.22222222222222218], 'false,false,true': [0.18604133405642428, 0.0], 'true': [9.516197353929913e-17, 0.0], 'true,false': [0.0, nan]}, {'': [-4.163336342344337e-17, 0.18902163056537943], 'false': [0.14956332686207147, 0.21302463170942743], 'false,false': [0.17587935654726738, 0.24331982889585696], 'false,false,false': [nan, 0.24331982889585696], 'false,false,true': [0.003979620528216821, 0.007595240215320029], 'false,true': [0.1651662366575361, 0.003026353223707414], 'false,true,true': [0.17320931096317027, 0.0]}, {'': [0.006385922883183366, 0.16581550286232452], 'false': [nan, 0.1658155028623246], 'false,false': [nan, 0.16581550286232452], 'false,false,false': [0.16720053575158653, 0.16297525868835253], 'true': [0.007011402386241733, 0.0], 'true,true': [0.00890336810951331, 0.0], 'true,true,false': [nan, 0.0]}, {'': [0.005195570000003986, 0.16472716560979708], 'false': [0.15895398940412953, 0.17346068687387828], 'false,false': [0.11485445713587347, 0.24], 'false,true': [0.0005173550173772634, 0.19489680228061923], 'false,true,false': [0.19966284962817055, 0.0], 'false,false,true': [0.05160540227203517, 0.0014466916781725736]}, {'': [0.004275571865366552, 0.14537646600408674], 'false': [nan, 0.14537646600408674], 'false,false': [0.12496448682478342, 0.16915932108521164], 'false,false,false': [nan, 0.16915932108521167], 'false,false,true': [0.06651919113483451, 0.0008981094391190163]}, {'': [0.0035189648496567164, 0.12452284619380467], 'false': [0.09724556637213666, 0.17283376791627478], 'false,false': [0.11548363855614945, 0.24], 'false,false,true': [nan, 0.11548363855614945], 'false,true': [0.11006713509928073, 0.0710045594394293], 'false,true,true': [nan, 0.11006713509928073], 'false,true,false': [0.05639561738656984, 0.002254900660502829]}, {'': [0.0664431431361687, 0.15021517555700223], 'false': [0.010199397199267934, 0.026858718622174777], 'true': [0.04722466241223344, 0.0022955762670686464], 'false,false': [0.0, 0.01768224814581918], 'false,false,false': [0.008447080710977134, 0.019871831025864945], 'false,true': [0.007117492405289139, 0.00012518177018397414]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
0;true;tweets(A, D), tweets(C, D).;true;true
0;false;follows(F, A), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
1;true;follows(C, D), recursion_accounttype(D, B).;true;true
1;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;false;follows(E, A).;true;true
2;false,true;follows(F, E).;true;true
3;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
3;true;follows(A, D), follows(C, D).;true;true
3;false;follows(F, A), follows(A, G).;true;true
3;false,true;tweets(G, H), tweets(F, H).;true;true
4;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
4;false;follows(D, A), tweets(D, E).;true;true
4;false,true;tweets(A, E).;true;true
4;false,true,true;follows(F, D), follows(D, F).;true;true
5;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
5;true;follows(D, A), tweets(D, E).;true;true
5;true,true;tweets(C, F), tweets(A, F).;true;true
6;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
6;false;follows(A, D).;true;true
6;false,true;follows(E, A), follows(E, D).;true;true
6;false,true,false;follows(D, F).;true;true
6;false,false;tweets(A, G).;true;true
6;false,false,true;recursion_accounttype(H, B).;true;true
7;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
7;false;tweets(A, E), follows(F, A).;true;true
7;false,true;follows(G, F), recursion_accounttype(G, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;tweets(A, D).;true;true
8;false,true;follows(A, E), tweets(E, D).;true;true
8;false,true,false;tweets(F, D), recursion_accounttype(F, B).;true;true
9;;accounttype(A, B) :- follows(C, A), follows(D, C).;true;true
9;true;recursion_accounttype(D, B), follows(E, D).;true;true
9;false;recursion_accounttype(F, B).;true;true
9;false,true;follows(F, G), follows(A, G).;true;true
9;false,false;follows(H, A).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), tweets(C, D) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.5248156017661789;  // std dev = 1.414, 9.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.7194734122109544;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.7194734122109544;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.12544463852839138;  // std dev = 7.45e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.16653882456488175;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.448295606241962;  // std dev = 1.414, 9.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=6 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.5553664367462846;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D) )
%   | | then if ( follows(A, F), tweets(A, G) )
%   | | | then return 0.11024456011969062;  // std dev = 1.090, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | | else return -0.11231637819360639;  // std dev = 3.73e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( tweets(A, H) )
%   | | then return 0.2454122912982447;  // std dev = 0.891, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.4456966796559563;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.29569667965595625;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(C, D) )
%   | then return 0.41751358415830986;  // std dev = 1.05e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.41751358415830997;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), follows(A, F) )
%   | then if ( tweets(F, G), tweets(E, G) )
%   | | then return 0.06719435745893072;  // std dev = 0.292, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
%   | | else return -0.12378653600317725;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( tweets(A, H) )
%   | | then if ( follows(I, A) )
%   | | | then return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.19949547911044188;  // std dev = 0.885, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.3441605937277661;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.22976111029912474;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.3207118471601497;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(D, A), tweets(D, E) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(F, D), follows(D, F) )
%   | | | then return 0.050356031513275404;  // std dev = 1.078, 15.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=4 */
%   | | | else return -0.10789572984618064;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.10892158517169241;  // std dev = 0.003, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( tweets(A, G) )
%   | | then return 0.1590107333581987;  // std dev = 0.881, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.2592568218271547;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.17479229983243286;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(D, E) )
%   | then if ( tweets(C, F), tweets(A, F) )
%   | | then return 0.29575114867649505;  // std dev = 0.222, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.25517224256948945;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else return 0.40575531634252393;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.4377773200510148;  // std dev = 0.211, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, G), tweets(A, I) )
%   | | | then return -0.13711034817892728;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return -0.09779647485286166;  // std dev = 0.003, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( tweets(A, J) )
%   | | then return 0.03138989065733951;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.19467118392008972;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.13161743182735544;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.24145441473146562;  // std dev = 0.073, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(A, D) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then return -0.11365850316308393;  // std dev = 0.014, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( follows(D, F) )
%   | | | then return 0.12421470879268828;  // std dev = 1.122, 10.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=6 */
%   | | | else return -0.09215884669141788;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( tweets(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.43624392645440646;  // std dev = 0.361, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return -0.13274241281551197;  // std dev = 0.197, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.09875532016531388;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.20111038690333255;  // std dev = 0.066, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( tweets(A, D), follows(E, A) )
%   | then if ( follows(F, E), recursion_accounttype(F, B) )
%   | | then return 0.3026445712737258;  // std dev = 0.205, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(G, A), follows(A, G) )
%   | | | then return -0.11369554046725806;  // std dev = 0.024, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return -0.07999213074432515;  // std dev = 0.006, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.3679291276519252;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.2871744252380493;  // std dev = 0.446, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.09728452828324474;  // std dev = 0.477, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.17146825312598246;  // std dev = 0.059, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( tweets(A, D) )
%   | then if ( follows(A, E), tweets(E, D) )
%   | | then if ( follows(A, F), follows(F, A) )
%   | | | then return 0.016655009655136038;  // std dev = 0.577, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | | else return -0.14290788038786195;  // std dev = 0.162, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( tweets(G, D), recursion_accounttype(G, B) )
%   | | | then return 0.331698299094296;  // std dev = 0.334, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return -0.11862333633840136;  // std dev = 0.204, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( follows(A, H) )
%   | | then return 0.0265858885795416;  // std dev = 0.755, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.04991390055266236;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(D, C) )
%   then if ( recursion_accounttype(D, B), follows(E, D) )
%   | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then if ( follows(A, F) )
%   | | | then return 0.1223097785497714;  // std dev = 0.004, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.10962275321339335;  // std dev = 0.045, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.29032625267531964;  // std dev = 0.005, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, G), tweets(A, H) )
%   | | then return -0.09987002224137512;  // std dev = 0.014, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return -0.06731686894059173;  // std dev = 0.013, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( recursion_accounttype(I, B) )
%   | then if ( follows(I, J), follows(A, J) )
%   | | then return 0.2607398222082923;  // std dev = 0.073, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.4495367785398101;  // std dev = 0.041, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(K, A) )
%   | | then return -0.06570185485910021;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.4437224161535685;  // std dev = 0.332, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */


Results
   AUC ROC   = 0.989608
   AUC PR    = 0.336937
   CLL	      = -0.156209
   Precision = 0.330532 at threshold = 0.5
   Recall    = 0.936508
   F1        = 0.488613


Total learning time: 2.041 seconds
Total inference time: 15.373 seconds
AUC ROC: 0.989608


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.201246
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.646 seconds
Refined model CLL: -0.201246


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.989608
   AUC PR    = 0.336937
   CLL	      = -0.156209
   Precision = 0.330532 at threshold = 0.5
   Recall    = 0.936508
   F1        = 0.488613


Total learning time: 3.969 seconds
Total inference time: 15.373 seconds
AUC ROC: 0.989608
Total revision time: 3.969
Best scored revision CLL: -0.201246


Dataset: 7_yeast_twitter, Fold: 1, Type: Transfer (trRDN-B), Time: 00:01:47
{'AUC ROC': 0.989608, 'AUC PR': 0.336937, 'CLL': -0.156209, 'Precision': [0.330532, 0.5], 'Recall': 0.936508, 'F1': 0.488613, 'Learning time': 3.969, 'Inference time': 15.373, 'parameter_20': {'AUC ROC': 0.984069, 'AUC PR': 0.316159, 'CLL': -0.204786, 'Precision': [0.325228, 0.5], 'Recall': 0.849206, 'F1': 0.47033, 'Learning time': 0.826, 'Inference time': 9.375}}


Amount of data: 25
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
0;true;complex(A, D), complex(C, D).;false;false
0;false;interaction(E, A), interaction(E, E).;true;true
0;false,true;interaction(A, E).;true;true
0;false,true,true;complex(A, F).;false;false
0;false,true,false;complex(E, G), location(A, H).;false;false
0;false,false;interaction(A, I), recursion_proteinclass(I, B).;false;true
0;false,false,false;location(A, J), complex(A, K).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
1;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
1;true,false;interaction(E, C), interaction(E, E).;false;true
1;true,false,false;interaction(A, F), enzyme(F, G).;false;false
1;false;interaction(A, H), recursion_proteinclass(H, B).;true;true
1;false,true;enzyme(H, I), interaction(H, J).;false;false
1;false,false;interaction(A, A).;false;true
1;false,false,false;complex(A, K), interaction(L, A).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(C, D).;false;true
2;true,false;interaction(E, A), interaction(A, E).;false;true
2;true,false,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(A, G), enzyme(G, H).;true;true
2;false,false,true;interaction(G, I), phenotype(G, J).;false;false
2;false,false,false;phenotype(A, K).;false;false
3;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
3;true;interaction(D, A), interaction(D, C).;false;true
3;true,false;complex(C, E).;false;true
3;true,false,false;interaction(A, F), interaction(F, F).;false;false
3;false;interaction(A, A).;false;true
3;false,false;interaction(A, G), interaction(H, A).;true;true
3;false,false,true;complex(H, I), complex(G, I).;false;false
3;false,false,false;complex(A, J), phenotype(A, K).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
4;false;interaction(A, D), complex(D, E).;true;true
4;false,true;complex(A, E), location(A, F).;true;true
4;false,true,true;interaction(D, G), interaction(G, D).;false;false
4;false,true,false;enzyme(D, H), phenotype(A, I).;false;false
4;false,false;interaction(J, A), interaction(K, J).;true;true
4;false,false,true;recursion_proteinclass(K, B).;false;false
4;false,false,false;interaction(A, L), phenotype(L, M).;false;false
5;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
5;true;interaction(A, D), complex(D, E).;true;false
5;true,true;complex(C, F), complex(A, F).;false;true
5;true,true,false;interaction(C, C).;false;false
5;false;interaction(A, A).;false;true
5;false,false;interaction(G, A), interaction(G, G).;true;true
5;false,false,true;complex(G, H), location(A, I).;false;false
5;false,false,false;interaction(A, J), interaction(K, A).;false;false
6;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
6;false;interaction(D, A), enzyme(D, E).;true;true
6;false,true;enzyme(A, E).;true;true
6;false,true,true;interaction(A, F), interaction(D, F).;false;false
6;false,true,false;interaction(G, D), enzyme(G, H).;false;false
6;false,false;complex(A, I), location(A, J).;true;true
6;false,false,true;location(K, J), recursion_proteinclass(K, B).;false;false
6;false,false,false;phenotype(A, L).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
7;false;interaction(D, A), interaction(D, D).;true;true
7;false,true;complex(D, E), complex(A, E).;true;true
7;false,true,true;interaction(A, F).;false;false
7;false,true,false;enzyme(A, G), phenotype(D, H).;false;false
7;false,false;complex(A, I), interaction(A, J).;true;true
7;false,false,true;interaction(J, K), recursion_proteinclass(K, B).;false;false
7;false,false,false;interaction(A, L), interaction(L, L).;false;false
8;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
8;false;complex(A, D).;true;true
8;false,true;interaction(E, A), complex(E, D).;true;true
8;false,true,true;interaction(E, E).;false;false
8;false,true,false;complex(F, D), recursion_proteinclass(F, B).;false;false
8;false,false;interaction(G, A), phenotype(G, H).;true;true
8;false,false,true;interaction(A, A).;false;false
8;false,false,false;phenotype(A, I).;false;false
9;;proteinclass(A, B) :- interaction(A, C), interaction(C, D).;true;true
9;true;recursion_proteinclass(D, B), interaction(D, E).;false;false
9;false;phenotype(A, F).;true;true
9;false,true;phenotype(G, F), recursion_proteinclass(G, B).;true;false
9;false,true,true;interaction(H, G), interaction(H, A).;false;false
9;false,false;interaction(A, I), location(A, J).;true;true
9;false,false,true;location(I, K).;false;false
9;false,false,false;interaction(L, A), location(L, M).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), tweets(C, D) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, E), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.08891816586874314;  // std dev = 2.148, 26.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=6 */
%   | | | else return 0.44148226843284566;  // std dev = 1.708, 12.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.7194734122109544;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(C, E), follows(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, A) )
%   | | | then return 0.7194734122109544;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(H, G) )
%   | | then return 0.7194734122109545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, I), follows(A, J) )
%   | | | then return 0.11013444518202153;  // std dev = 1.919, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | | | else return 0.23552947730726856;  // std dev = 2.108, 19.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=8 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C) )
%   | then return 0.5553664367462846;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A) )
%   | | then if ( follows(F, E) )
%   | | | then return 0.026791833620689483;  // std dev = 1.915, 23.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=5 */
%   | | | else return -0.1678492458407451;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.3890652663359544;  // std dev = 0.468, 16.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=10 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(C, D) )
%   | then return 0.41751358415830986;  // std dev = 3.33e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( tweets(C, E) )
%   | | then return 0.41751358415830997;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, G) )
%   | | then if ( tweets(G, H), tweets(F, H) )
%   | | | then return 0.08329975328257283;  // std dev = 1.834, 18.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=5 */
%   | | | else return -0.17162479115139873;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.028617910590033005;  // std dev = 1.305, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | | | else return 0.3756655542298704;  // std dev = 1.449, 10.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=7 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.3207118471601497;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( follows(D, A), tweets(D, E) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(F, D), follows(D, F) )
%   | | | then return 0.0490869784451758;  // std dev = 1.850, 20.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | | | else return -0.15636896239675263;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.2271356375314235;  // std dev = 0.056, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.5965436141451804;  // std dev = 0.223, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.2934376790858119;  // std dev = 0.144, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( follows(I, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.2520346899761189;  // std dev = 1.354, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(D, E) )
%   | then if ( tweets(C, F), tweets(A, F) )
%   | | then return 0.29240399578528287;  // std dev = 0.241, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(C, C) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.25517224256948945;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.3117717615190926;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G), follows(G, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(H, A), follows(A, I) )
%   | | | then return 0.034135015511362714;  // std dev = 1.759, 18.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=4 */
%   | | | else return 0.09689671400747965;  // std dev = 1.840, 21.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=10 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.23120007224455624;  // std dev = 0.226, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(A, D) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then return -0.11145131122812409;  // std dev = 0.958, 12.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=1 */
%   | | else if ( follows(D, F) )
%   | | | then return 0.2572762350966373;  // std dev = 1.534, 12.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=7 */
%   | | | else return 0.18827482475512491;  // std dev = 0.444, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | else if ( tweets(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.45368150851749195;  // std dev = 0.306, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return -0.23709405326178742;  // std dev = 0.102, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.1023314905292241;  // std dev = 0.490, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.19358863372301285;  // std dev = 0.206, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(A, D), follows(D, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E), follows(F, A) )
%   | | then if ( follows(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.65281804176802;  // std dev = 0.548, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.17861719674267287;  // std dev = 0.086, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( follows(H, A), follows(H, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07890667415593716;  // std dev = 1.686, 17.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.16578387878881284;  // std dev = 0.188, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( tweets(A, D) )
%   | then if ( follows(A, E), tweets(E, D) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.039403409904236575;  // std dev = 1.529, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | | else if ( tweets(F, D), recursion_accounttype(F, B) )
%   | | | then return 0.3186105742466572;  // std dev = 0.319, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return -0.1791362372013671;  // std dev = 0.128, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06926862742259907;  // std dev = 0.914, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | else return 0.057127501325132224;  // std dev = 0.490, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(D, C) )
%   then if ( recursion_accounttype(D, B), follows(E, D) )
%   | then return 0.26919865590716024;  // std dev = 0.873, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.16679635465978693;  // std dev = 0.187, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else if ( recursion_accounttype(F, B) )
%   | then if ( follows(F, G), follows(A, G) )
%   | | then return 0.34521505727047347;  // std dev = 0.277, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.4483654801759851;  // std dev = 0.019, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(H, A) )
%   | | then return -0.11320676472232535;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( follows(A, I) )
%   | | | then return -0.3329860110656871;  // std dev = 0.159, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.457988486091391;  // std dev = 0.243, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.982911
   AUC PR    = 0.309752
   CLL	      = -0.232466
   Precision = 0.325228 at threshold = 0.5
   Recall    = 0.849206
   F1        = 0.47033


Total learning time: 0.975 seconds
Total inference time: 9.027 seconds
AUC ROC: 0.982911


Results scoring model
   AUC ROC   = 0.9952
   AUC PR    = 0.995635
   CLL	      = -0.272068
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.84
   F1        = 0.913043


Total scoring time: 0.458 seconds
Parameter learned model CLL: -0.272068


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'tweets(A, D), tweets(C, D)', 'false': 'follows(A, E), follows(E, E)', 'false,false': 'follows(F, A), recursion_accounttype(F, B)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.0, 0, 8], 'true,false': [2.11e-08, 0, 3], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [2.148, 20, 6], 'false,false,false,false': [1.708, 5, 7]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'true,false': 'follows(C, E), follows(E, E)', 'true,false,false': 'follows(F, A)', 'false': 'follows(G, A), recursion_accounttype(G, B)', 'false,true': 'follows(H, G)', 'false,false': 'follows(A, A)', 'false,false,false': 'tweets(A, I), follows(A, J)'}, {'true,true': [0.0, 0, 10], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 1], 'false,true,false': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [1.919, 14, 5], 'false,false,false,false': [2.108, 11, 8]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A)', 'false,false,true': 'follows(F, E)'}, {'true,true': [0.0, 0, 10], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.915, 18, 5], 'false,false,true,false': [0.0, 1, 0], 'false,false,false': [0.468, 6, 10]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(A, D), follows(C, D)', 'true,false': 'tweets(C, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, G)', 'false,false,true': 'tweets(G, H), tweets(F, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true': [3.33e-08, 0, 9], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.834, 13, 5], 'false,false,true,false': [0.0, 1, 0], 'false,false,false,true': [1.305, 8, 3], 'false,false,false,false': [1.449, 3, 7]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(D, A), tweets(D, E)', 'false,true': 'tweets(A, E)', 'false,true,true': 'follows(F, D), follows(D, F)', 'false,false': 'follows(A, G), follows(G, H)', 'false,false,true': 'recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A)'}, {'true': [0.0, 0, 10], 'false,true,true,true': [1.85, 15, 5], 'false,true,true,false': [0.0, 1, 0], 'false,true,false': [0.056, 3, 0], 'false,false,true,true': [0.223, 0, 5], 'false,false,true,false': [0.144, 3, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.354, 3, 5]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), tweets(D, E)', 'true,true': 'tweets(C, F), tweets(A, F)', 'true,true,false': 'follows(C, C)', 'false': 'follows(A, A)', 'false,false': 'follows(A, G), follows(G, G)', 'false,false,false': 'follows(H, A), follows(A, I)'}, {'true,true,true': [0.241, 0, 7], 'true,true,false,true': [0.0, 0, 0], 'true,true,false,false': [0.0, 0, 3], 'true,false': [0.0, 0, 1], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [1.759, 14, 4], 'false,false,false,false': [1.84, 11, 10]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(A, D)', 'false,true': 'follows(E, A), follows(E, D)', 'false,true,false': 'follows(D, F)', 'false,false': 'tweets(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true': [0.226, 0, 11], 'false,true,true': [0.958, 11, 1], 'false,true,false,true': [1.534, 5, 7], 'false,true,false,false': [0.444, 1, 1], 'false,false,true,true': [0.306, 0, 2], 'false,false,true,false': [0.102, 6, 0], 'false,false,false': [0.49, 2, 3]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, D)', 'false,false': 'tweets(A, E), follows(F, A)', 'false,false,true': 'follows(G, F), recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A), follows(H, H)'}, {'true': [0.206, 0, 11], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.548, 0, 5], 'false,false,true,false': [0.086, 17, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.686, 8, 9]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,true': 'follows(A, E), tweets(E, D)', 'false,true,true': 'follows(E, E)', 'false,true,false': 'tweets(F, D), recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(A, A)'}, {'true': [0.188, 0, 11], 'false,true,true,true': [0.0, 0, 0], 'false,true,true,false': [1.529, 14, 5], 'false,true,false,true': [0.319, 0, 2], 'false,true,false,false': [0.128, 6, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.914, 3, 4], 'false,false,false': [0.49, 2, 3]}], ['accounttype(A, B)', {'': 'follows(C, A), follows(D, C)', 'true': 'recursion_accounttype(D, B), follows(E, D)', 'false': 'recursion_accounttype(F, B)', 'false,true': 'follows(F, G), follows(A, G)', 'false,false': 'follows(H, A)', 'false,false,false': 'follows(A, I)'}, {'true,true': [0.873, 0, 15], 'true,false': [0.187, 18, 0], 'false,true,true': [0.277, 0, 6], 'false,true,false': [0.019, 0, 4], 'false,false,true': [0.0, 1, 0], 'false,false,false,true': [0.159, 3, 0], 'false,false,false,false': [0.243, 3, 0]}]]
[{'': [-1.6148698540002277e-16, 0.23011176857330698], 'false': [nan, 0.23011176857330698], 'false,false': [0.0, 0.22506925207756223], 'false,false,false': [0.17751479289940844, 0.2430555555555555], 'true': [-2.220446049250313e-16, 1.4802973661668753e-16]}, {'': [-8.074349270001139e-17, 0.2196823916551535], 'false': [0.0, 0.21780153604772964], 'false,false': [nan, 0.21780153604772926], 'false,false,false': [0.19390581717451524, 0.23383529788009816], 'false,true': [0.0, nan], 'true': [-8.881784197001253e-17, 0.0], 'true,false': [nan, 0.0], 'true,false,false': [0.0, nan]}, {'': [-1.7763568394002506e-16, 0.2129281775015867], 'false': [nan, 0.212928177501587], 'false,false': [0.15423752552735406, 0.2186538031342369], 'false,false,true': [0.1593649569891956, 0.0], 'true': [-1.7763568394002506e-16, nan]}, {'': [1.3322676295501878e-16, 0.20029804330594714], 'false': [nan, 0.20029804330594692], 'false,false': [0.18020190762129296, 0.21117712999215169], 'false,false,false': [0.15489388294970938, 0.21000000000000005], 'false,false,true': [0.18679278137689803, 0.0], 'true': [1.2335811384723962e-16, 0.0], 'true,false': [0.0, nan]}, {'': [-4.4408920985006264e-17, 0.19137866348593235], 'false': [0.15243498847523965, 0.21186721587185875], 'false,false': [0.19447811472771787, 0.22919836429249058], 'false,false,false': [nan, 0.22919836429249058], 'false,false,true': [0.009966749744349145, 0.006955367428472341], 'false,true': [0.16489691531828732, 0.00308547756144865], 'false,true,true': [0.17113165900671395, 0.0]}, {'': [0.005634483919302688, 0.16715415058623956], 'false': [nan, 0.1671541505862396], 'false,false': [nan, 0.16715415058623956], 'false,false,false': [0.17196691068532355, 0.1612109134296518], 'true': [0.006113157203570941, 0.0], 'true,true': [0.008317220685130506, 0.0], 'true,true,false': [nan, 0.0]}, {'': [0.004644434848614421, 0.16595580736603716], 'false': [0.16571432939323288, 0.1619496334077905], 'false,true': [0.07643556210407511, 0.18279845389587115], 'false,true,false': [0.1961460939976897, 0.09863158931714425], 'false,false': [0.10247606035398472, 0.24], 'false,false,true': [0.046865710251871695, 0.001720124533486032]}, {'': [0.00385909967502959, 0.15042687886105743], 'false': [nan, 0.15042687886105743], 'false,false': [0.13538697441956715, 0.16723863355187363], 'false,false,false': [nan, 0.1672386335518736], 'false,false,true': [0.06005689679967867, 0.0004327532752207887]}, {'': [0.0032036428111673217, 0.12661138115021378], 'false': [0.10661435511527524, 0.16968276994073214], 'false,false': [0.11939475748170734, 0.24], 'false,false,true': [nan, 0.11939475748170734], 'false,true': [0.12311490113976462, 0.061194005781521746], 'false,true,true': [nan, 0.12311490113976462], 'false,true,false': [0.050788446366191925, 0.0027245535099629237]}, {'': [0.07130497468873154, 0.14959687790684278], 'false': [0.01025167891169454, 0.025117340645723414], 'true': [0.050851267081853946, 0.0019444359190360176], 'false,false': [0.0, 0.017920382434377602], 'false,false,false': [0.008417079335279964, 0.01961087615219929], 'false,true': [0.012772316734947442, 8.671632946366525e-05]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
0;true;tweets(A, D), tweets(C, D).;true;true
0;false;follows(F, A), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
1;true;follows(C, D), recursion_accounttype(D, B).;true;true
1;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;false;follows(E, A).;true;true
2;false,true;follows(F, E).;true;true
3;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
3;true;follows(A, D), follows(C, D).;true;true
3;false;follows(F, A), follows(A, G).;true;true
3;false,true;tweets(G, H), tweets(F, H).;true;true
4;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
4;false;follows(D, A), tweets(D, E).;true;true
4;false,true;tweets(A, E).;true;true
4;false,true,true;follows(F, D), follows(D, F).;true;true
5;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
5;true;follows(D, A), tweets(D, E).;true;true
5;true,true;tweets(C, F), tweets(A, F).;true;true
6;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
6;false;follows(A, D).;true;true
6;false,false;tweets(A, G).;true;true
6;false,false,true;recursion_accounttype(H, B).;true;true
7;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
7;false;tweets(A, E), follows(F, A).;true;true
7;false,true;follows(G, F), recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A), follows(D, C).;true;true
9;true;recursion_accounttype(D, B), follows(E, D).;true;true
9;false;recursion_accounttype(F, B).;true;true
9;false,true;follows(F, G), follows(A, G).;true;true
9;false,false;follows(H, A).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), tweets(C, D) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.2581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.5581489350995124;  // std dev = 1.449, 10.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.7194734122109544;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.7194734122109544;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.22373365448410584;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.47588605454691735;  // std dev = 1.449, 10.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=7 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.5553664367462846;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D) )
%   | | then if ( follows(A, F), tweets(A, G) )
%   | | | then return 0.09633450147510951;  // std dev = 1.238, 16.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=5 */
%   | | | else return -0.11231637819360639;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( tweets(A, H) )
%   | | then return 0.2499513412556286;  // std dev = 1.145, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.48264739880473917;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.28264739880473916;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(C, D) )
%   | then return 0.41751358415830986;  // std dev = 1.05e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.41751358415830997;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), follows(A, F) )
%   | then if ( tweets(F, G), tweets(E, G) )
%   | | then return 0.06276110429947691;  // std dev = 0.291, 18.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=5 */
%   | | else return -0.12228568173538139;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( follows(H, A) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( follows(A, I), tweets(A, J) )
%   | | | then return 0.18146275100194648;  // std dev = 0.892, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.2860789852623589;  // std dev = 1.601, 12.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.32071184716014967;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.32071184716014967;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.32071184716014967;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(F, A), tweets(F, G) )
%   | then if ( tweets(A, G) )
%   | | then if ( follows(H, F), follows(F, H) )
%   | | | then return 0.04118939107957126;  // std dev = 1.227, 20.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | | | else return -0.10746975160129377;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.10823147543684641;  // std dev = 0.002, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.5255630615180594;  // std dev = 0.205, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.36142385769161794;  // std dev = 0.171, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.1597159424842615;  // std dev = 0.493, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(D, E) )
%   | then if ( tweets(C, F), tweets(A, F) )
%   | | then return 0.2909366278198216;  // std dev = 0.088, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.25517224256948945;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.32418621120637514;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.4554527999713497;  // std dev = 0.224, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, G), tweets(A, I) )
%   | | | then return -0.1338879877447847;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return -0.09703511664821797;  // std dev = 0.003, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( follows(A, J), tweets(A, K) )
%   | | then return 0.04775580865612542;  // std dev = 0.663, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( follows(A, L) )
%   | | | then return 0.2144695414274858;  // std dev = 0.700, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.12120187474121945;  // std dev = 1.305, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then return 0.23328679668671004;  // std dev = 0.076, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.22568566876578902;  // std dev = 0.039, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, F) )
%   | then if ( follows(G, A) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.39332424627216256;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.11073693883997972;  // std dev = 0.050, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.038297610979303794;  // std dev = 0.661, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.165111965669022;  // std dev = 0.703, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( tweets(A, J) )
%   | | then if ( recursion_accounttype(K, B) )
%   | | | then return 0.40060796926865455;  // std dev = 0.314, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return -0.1362945664152779;  // std dev = 0.264, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.07909240078650007;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.16862023388068448;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.2219935166694758;  // std dev = 0.179, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.18878814574126987;  // std dev = 0.034, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( tweets(A, F), follows(G, A) )
%   | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | then return 0.2688877765718322;  // std dev = 0.159, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.09598101362897696;  // std dev = 0.014, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.35765672477754845;  // std dev = 0.243, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.22864276035728195;  // std dev = 0.347, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.09546389721959277;  // std dev = 0.450, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A) )
%   | then return 0.1472564642035046;  // std dev = 0.003, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.18730307287113054;  // std dev = 0.161, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( follows(A, D), tweets(A, F) )
%   | | | then return -0.09906859382661566;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return -0.045840173565407184;  // std dev = 0.158, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | else if ( follows(D, G), recursion_accounttype(G, B) )
%   | | | then return 0.2505704559410339;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.08728056008930792;  // std dev = 0.037, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then return 0.026927486890516817;  // std dev = 0.554, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.09601555630997813;  // std dev = 0.610, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.04464849223110268;  // std dev = 1.257, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(D, C) )
%   then if ( recursion_accounttype(D, B), follows(E, D) )
%   | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then if ( follows(A, F) )
%   | | | then return 0.12970862576764297;  // std dev = 0.003, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.1160535421364485;  // std dev = 0.014, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.22254294590453458;  // std dev = 0.072, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, G), tweets(A, H) )
%   | | then return -0.08902113950569528;  // std dev = 0.006, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return -0.06621997696867823;  // std dev = 0.003, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else if ( recursion_accounttype(I, B) )
%   | then if ( follows(I, J), follows(A, J) )
%   | | then return 0.2490243819903677;  // std dev = 0.253, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.4411678453089607;  // std dev = 0.057, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(K, A) )
%   | | then return -0.06815675357284705;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.40130172641875733;  // std dev = 0.380, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */


Results
   AUC ROC   = 0.993339
   AUC PR    = 0.413461
   CLL	      = -0.149533
   Precision = 0.33871 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.506024


Total learning time: 2.815 seconds
Total inference time: 18.636 seconds
AUC ROC: 0.993339


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.18369
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.682 seconds
Refined model CLL: -0.18369


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.993339
   AUC PR    = 0.413461
   CLL	      = -0.149533
   Precision = 0.33871 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.506024


Total learning time: 4.930000000000001 seconds
Total inference time: 18.636 seconds
AUC ROC: 0.993339
Total revision time: 4.930000000000001
Best scored revision CLL: -0.18369


Dataset: 7_yeast_twitter, Fold: 1, Type: Transfer (trRDN-B), Time: 00:02:20
{'AUC ROC': 0.993339, 'AUC PR': 0.413461, 'CLL': -0.149533, 'Precision': [0.33871, 0.5], 'Recall': 1.0, 'F1': 0.506024, 'Learning time': 4.930000000000001, 'Inference time': 18.636, 'parameter_25': {'AUC ROC': 0.982911, 'AUC PR': 0.309752, 'CLL': -0.232466, 'Precision': [0.325228, 0.5], 'Recall': 0.849206, 'F1': 0.47033, 'Learning time': 0.975, 'Inference time': 9.027}}


Starting fold 2

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos	 examples: 156
Target test neg examples: 24648

Amount of data: 5
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
0;true;complex(A, D), complex(C, D).;false;false
0;false;interaction(E, A), interaction(E, E).;true;true
0;false,true;interaction(A, E).;true;true
0;false,true,true;complex(A, F).;false;false
0;false,true,false;complex(E, G), location(A, H).;false;false
0;false,false;interaction(A, I), recursion_proteinclass(I, B).;false;true
0;false,false,false;location(A, J), complex(A, K).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
1;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
1;true,false;interaction(E, C), interaction(E, E).;false;true
1;true,false,false;interaction(A, F), enzyme(F, G).;false;false
1;false;interaction(A, H), recursion_proteinclass(H, B).;true;true
1;false,true;enzyme(H, I), interaction(H, J).;false;false
1;false,false;interaction(A, A).;false;true
1;false,false,false;complex(A, K), interaction(L, A).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(C, D).;false;true
2;true,false;interaction(E, A), interaction(A, E).;false;true
2;true,false,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(A, G), enzyme(G, H).;true;true
2;false,false,true;interaction(G, I), phenotype(G, J).;false;false
2;false,false,false;phenotype(A, K).;false;false
3;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
3;true;interaction(D, A), interaction(D, C).;false;true
3;true,false;complex(C, E).;false;true
3;true,false,false;interaction(A, F), interaction(F, F).;false;false
3;false;interaction(A, A).;false;true
3;false,false;interaction(A, G), interaction(H, A).;true;true
3;false,false,true;complex(H, I), complex(G, I).;false;false
3;false,false,false;complex(A, J), phenotype(A, K).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
4;false;interaction(A, D), complex(D, E).;true;true
4;false,true;complex(A, E), location(A, F).;true;true
4;false,true,true;interaction(D, G), interaction(G, D).;false;false
4;false,true,false;enzyme(D, H), phenotype(A, I).;false;false
4;false,false;interaction(J, A), interaction(K, J).;true;true
4;false,false,true;recursion_proteinclass(K, B).;false;false
4;false,false,false;interaction(A, L), phenotype(L, M).;false;false
5;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
5;true;interaction(A, D), complex(D, E).;true;false
5;true,true;complex(C, F), complex(A, F).;false;true
5;true,true,false;interaction(C, C).;false;false
5;false;interaction(A, A).;false;true
5;false,false;interaction(G, A), interaction(G, G).;true;true
5;false,false,true;complex(G, H), location(A, I).;false;false
5;false,false,false;interaction(A, J), interaction(K, A).;false;false
6;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
6;false;interaction(D, A), enzyme(D, E).;true;true
6;false,true;enzyme(A, E).;true;true
6;false,true,true;interaction(A, F), interaction(D, F).;false;false
6;false,true,false;interaction(G, D), enzyme(G, H).;false;false
6;false,false;complex(A, I), location(A, J).;true;true
6;false,false,true;location(K, J), recursion_proteinclass(K, B).;false;false
6;false,false,false;phenotype(A, L).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
7;false;interaction(D, A), interaction(D, D).;true;true
7;false,true;complex(D, E), complex(A, E).;true;true
7;false,true,true;interaction(A, F).;false;false
7;false,true,false;enzyme(A, G), phenotype(D, H).;false;false
7;false,false;complex(A, I), interaction(A, J).;true;true
7;false,false,true;interaction(J, K), recursion_proteinclass(K, B).;false;false
7;false,false,false;interaction(A, L), interaction(L, L).;false;false
8;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
8;false;complex(A, D).;true;true
8;false,true;interaction(E, A), complex(E, D).;true;true
8;false,true,true;interaction(E, E).;false;false
8;false,true,false;complex(F, D), recursion_proteinclass(F, B).;false;false
8;false,false;interaction(G, A), phenotype(G, H).;true;true
8;false,false,true;interaction(A, A).;false;false
8;false,false,false;phenotype(A, I).;false;false
9;;proteinclass(A, B) :- interaction(A, C), interaction(C, D).;true;true
9;true;recursion_proteinclass(D, B), interaction(D, E).;false;false
9;false;phenotype(A, F).;true;true
9;false,true;phenotype(G, F), recursion_proteinclass(G, B).;true;false
9;false,true,true;interaction(H, G), interaction(H, A).;false;false
9;false,false;interaction(A, I), location(A, J).;true;true
9;false,false,true;location(I, K).;false;false
9;false,false,false;interaction(L, A), location(L, M).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), tweets(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, E), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G) )
%   | | | then return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.3581489350995122;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F), follows(A, G) )
%   | | | then return 0.10092203251355424;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.15613476802827472;  // std dev = 0.800, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C) )
%   | then return 0.5553664367462845;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A) )
%   | | then if ( follows(F, E) )
%   | | | then return 0.1628583419229561;  // std dev = 1.252, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(C, D) )
%   | then return 0.41751358415830997;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(A, F) )
%   | | then if ( tweets(F, G), tweets(E, G) )
%   | | | then return 0.1830051877641418;  // std dev = 1.194, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, H) )
%   | | | then return -0.19421393736006656;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(D, A), tweets(D, E) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(F, D), follows(D, F) )
%   | | | then return 0.07392866467379329;  // std dev = 0.985, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.21906991611450358;  // std dev = 0.500, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(D, E) )
%   | then if ( tweets(C, F), tweets(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(C, C) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.32038350457256287;  // std dev = 0.160, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G), follows(G, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(H, A), follows(A, I) )
%   | | | then return 0.07243549425199601;  // std dev = 1.131, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return -0.17607880645904733;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.25722429767281324;  // std dev = 0.142, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, D) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then return -0.0612535049330379;  // std dev = 0.922, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else if ( follows(D, F) )
%   | | | then return 0.6566379467330097;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1519713977183873;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.21264337226449706;  // std dev = 0.126, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, D), follows(D, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E), follows(F, A) )
%   | | then if ( follows(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.7702909599480467;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return -0.2056327032671615;  // std dev = 0.083, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( follows(H, A), follows(H, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08412016162098554;  // std dev = 0.585, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.18014602312771924;  // std dev = 0.112, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( tweets(A, D) )
%   | then if ( follows(A, E), tweets(E, D) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.005529048564020186;  // std dev = 0.696, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( tweets(F, D), recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11136968572355228;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06418887937420462;  // std dev = 0.584, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(D, C) )
%   then if ( recursion_accounttype(D, B), follows(E, D) )
%   | then return 0.30696935000841724;  // std dev = 0.438, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.2105477249779558;  // std dev = 0.190, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.898381
   AUC PR    = 0.351624
   CLL	      = -0.241328
   Precision = 0.358744 at threshold = 0.5
   Recall    = 0.512821
   F1        = 0.422164


Total learning time: 0.758 seconds
Total inference time: 10.57 seconds
AUC ROC: 0.898381


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.264349
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.8
   F1        = 0.888889


Total scoring time: 0.402 seconds
Parameter learned model CLL: -0.264349


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'tweets(A, D), tweets(C, D)', 'false': 'follows(A, E), follows(E, E)', 'false,false': 'follows(F, A), recursion_accounttype(F, B)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.0, 0, 0], 'true,false': [2.11e-08, 0, 3], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.894, 4, 1], 'false,false,false,false': [0.707, 1, 1]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,false': 'follows(A, A)', 'false,false,false': 'tweets(A, F), follows(A, G)'}, {'true,true': [0.0, 0, 3], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.866, 3, 1], 'false,false,false,false': [0.8, 2, 1]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A)', 'false,false,true': 'follows(F, E)'}, {'true,true': [0.0, 0, 2], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.252, 5, 3], 'false,false,true,false': [0.0, 0, 0], 'false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(A, D), follows(C, D)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A), follows(A, F)', 'false,false,true': 'tweets(F, G), tweets(E, G)', 'false,false,false': 'tweets(A, H)'}, {'true,true': [0.0, 0, 2], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.194, 4, 3], 'false,false,true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 1, 0], 'false,false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(D, A), tweets(D, E)', 'false,true': 'tweets(A, E)', 'false,true,true': 'follows(F, D), follows(D, F)'}, {'true': [0.0, 0, 2], 'false,true,true,true': [0.985, 4, 2], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.5, 1, 1], 'false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), tweets(D, E)', 'true,true': 'tweets(C, F), tweets(A, F)', 'true,true,false': 'follows(C, C)', 'false': 'follows(A, A)', 'false,false': 'follows(A, G), follows(G, G)', 'false,false,false': 'follows(H, A), follows(A, I)'}, {'true,true,true': [0.0, 0, 0], 'true,true,false,true': [0.0, 0, 0], 'true,true,false,false': [0.16, 0, 3], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [1.131, 4, 2], 'false,false,false,false': [0.0, 1, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(A, D)', 'false,true': 'follows(E, A), follows(E, D)', 'false,true,false': 'follows(D, F)', 'false,false': 'tweets(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true': [0.142, 0, 3], 'false,true,true': [0.922, 4, 1], 'false,true,false,true': [0.0, 0, 1], 'false,true,false,false': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 1, 0], 'false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, D)', 'false,false': 'tweets(A, E), follows(F, A)', 'false,false,true': 'follows(G, F), recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A), follows(H, H)'}, {'true': [0.126, 0, 3], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 1], 'false,false,true,false': [0.083, 4, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.585, 1, 1]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,true': 'follows(A, E), tweets(E, D)', 'false,true,true': 'follows(E, E)', 'false,true,false': 'tweets(F, D), recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(A, A)'}, {'true': [0.112, 0, 3], 'false,true,true,true': [0.0, 0, 0], 'false,true,true,false': [0.696, 3, 1], 'false,true,false,true': [0.0, 0, 0], 'false,true,false,false': [0.0, 1, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.584, 1, 1], 'false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(C, A), follows(D, C)', 'true': 'recursion_accounttype(D, B), follows(E, D)'}, {'true,true': [0.438, 0, 5], 'true,false': [0.19, 5, 0], 'false': [0.0, 0, 0]}]]
[{'': [1.4802973661668753e-16, 0.20408163265306126], 'false': [nan, 0.20408163265306126], 'false,false': [nan, 0.20408163265306126], 'false,false,false': [0.16000000000000003, 0.25], 'true': [nan, 1.4802973661668753e-16]}, {'': [0.0, 0.19927973265551427], 'false': [nan, 0.19927973265551427], 'false,false': [nan, 0.19927973265551427], 'false,false,false': [0.18750000000000003, 0.21324407362685607], 'true': [0.0, nan]}, {'': [0.0, 0.1958172648268676], 'false': [nan, 0.1958172648268676], 'false,false': [0.1958172648268676, nan], 'false,false,true': [0.1958172648268676, nan], 'true': [0.0, nan]}, {'': [0.0, 0.1939069223337953], 'false': [nan, 0.1939069223337953], 'false,false': [0.20382112769368904, 0.0], 'false,false,true': [0.20382112769368904, nan], 'true': [0.0, nan], 'false,false,false': [0.0, nan]}, {'': [0.0, 0.18765649086834402], 'false': [0.18765649086834402, nan], 'false,true': [0.16160882544034813, 0.24999999999999997], 'false,true,true': [0.16160882544034813, nan]}, {'': [0.008505017384066968, 0.19044904003596572], 'false': [nan, 0.19044904003596572], 'false,false': [nan, 0.19044904003596572], 'false,false,false': [0.21336778132892684, 0.0], 'true': [0.008505017384066968, nan], 'true,true': [nan, 0.008505017384066968], 'true,true,false': [nan, 0.008505017384066968]}, {'': [0.006744594790795959, 0.18812671884273782], 'false': [0.21315916471386395, 0.0], 'false,true': [0.16989630826077246, 0.0], 'false,false': [0.0, nan], 'false,true,false': [0.0, nan], 'false,false,true': [nan, 0.0]}, {'': [0.005278812371211555, 0.16059233450344984], 'false': [nan, 0.16059233450344984], 'false,false': [0.1537795274108819, 0.17123640106606416], 'false,false,false': [nan, 0.17123640106606416], 'false,false,true': [0.0, 0.0017390099789241498]}, {'': [0.004161216132074976, 0.12078286392280232], 'false': [0.09903628778495588, 0.17034180976463675], 'false,false': [0.17034180976463675, nan], 'false,false,true': [nan, 0.17034180976463675], 'false,true': [0.12106229691558755, 0.0], 'false,true,true': [nan, 0.12106229691558755], 'false,true,false': [nan, 0.0]}, {'': [0.08978124119477529, nan], 'true': [0.03845569065077774, 0.007194830287547227]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
3;false;follows(E, A), follows(A, F).;true;true
4;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
5;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
5;false;follows(H, A), follows(A, I).;true;true
6;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
6;false;follows(A, D).;true;true
6;false,true;follows(E, A), follows(E, D).;true;true
7;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
7;false;tweets(A, E), follows(F, A).;true;true
7;false,true;follows(G, F), recursion_accounttype(G, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;tweets(A, D).;true;true
8;false,true;follows(A, E), tweets(E, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( tweets(A, D), follows(A, E) )
%   | then return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( tweets(A, D), follows(A, E) )
%   | then return 0.09446743783575562;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.16653882456488175;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.5553664367462845;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( tweets(A, D), follows(A, E) )
%   | then return 0.1763952019163463;  // std dev = 0.964, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | else return 0.1420942428155648;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.41751358415830997;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(D, A), follows(A, E) )
%   | then return 0.18644257497897146;  // std dev = 0.454, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | else return -0.21418442842586904;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( tweets(A, D), follows(A, E) )
%   | then return 0.11267908859574112;  // std dev = 0.951, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | else return 0.10840133194475121;  // std dev = 0.791, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.3157984894692925;  // std dev = 0.149, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(D, A), follows(A, E) )
%   | then return 0.08023937710112078;  // std dev = 1.149, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | else return -0.19691826357370792;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.2537507200560408;  // std dev = 0.132, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, D) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then return -0.06546500703545745;  // std dev = 0.900, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.7160194090616601;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return -0.1676204925756394;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.20997190020946324;  // std dev = 0.117, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( tweets(A, D), follows(E, A) )
%   | then if ( follows(F, E), recursion_accounttype(F, B) )
%   | | then return 0.7515866460438272;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return -0.22268917757593115;  // std dev = 0.089, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.1405736257321713;  // std dev = 0.582, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.17804727979619717;  // std dev = 0.104, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( tweets(A, D) )
%   | then if ( follows(A, E), tweets(E, D) )
%   | | then return -0.009908606890136326;  // std dev = 0.690, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return -0.1199508487591794;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0.10877408328076227;  // std dev = 0.577, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then return 0.3120467447674362;  // std dev = 0.350, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return -0.1826343755032293;  // std dev = 0.086, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return 0.09442352311655024;  // std dev = 0.575, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */


Results
   AUC ROC   = 0.942362
   AUC PR    = 0.277592
   CLL	      = -0.278829
   Precision = 0.211618 at threshold = 0.5
   Recall    = 0.653846
   F1        = 0.319749


Total learning time: 0.801 seconds
Total inference time: 8.543 seconds
AUC ROC: 0.942362


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.285967
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.8
   F1        = 0.888889


Total scoring time: 0.354 seconds
Refined model CLL: -0.285967


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.898381
   AUC PR    = 0.351624
   CLL	      = -0.241328
   Precision = 0.358744 at threshold = 0.5
   Recall    = 0.512821
   F1        = 0.422164


Total learning time: 2.3150000000000004 seconds
Total inference time: 10.57 seconds
AUC ROC: 0.898381
Total revision time: 2.3150000000000004
Best scored revision CLL: -0.264349


Dataset: 7_yeast_twitter, Fold: 2, Type: Transfer (trRDN-B), Time: 00:02:42
{'AUC ROC': 0.898381, 'AUC PR': 0.351624, 'CLL': -0.241328, 'Precision': [0.358744, 0.5], 'Recall': 0.512821, 'F1': 0.422164, 'Learning time': 2.3150000000000004, 'Inference time': 10.57, 'parameter_5': {'AUC ROC': 0.898381, 'AUC PR': 0.351624, 'CLL': -0.241328, 'Precision': [0.358744, 0.5], 'Recall': 0.512821, 'F1': 0.422164, 'Learning time': 0.758, 'Inference time': 10.57}}


Amount of data: 10
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
0;true;complex(A, D), complex(C, D).;false;false
0;false;interaction(E, A), interaction(E, E).;true;true
0;false,true;interaction(A, E).;true;true
0;false,true,true;complex(A, F).;false;false
0;false,true,false;complex(E, G), location(A, H).;false;false
0;false,false;interaction(A, I), recursion_proteinclass(I, B).;false;true
0;false,false,false;location(A, J), complex(A, K).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
1;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
1;true,false;interaction(E, C), interaction(E, E).;false;true
1;true,false,false;interaction(A, F), enzyme(F, G).;false;false
1;false;interaction(A, H), recursion_proteinclass(H, B).;true;true
1;false,true;enzyme(H, I), interaction(H, J).;false;false
1;false,false;interaction(A, A).;false;true
1;false,false,false;complex(A, K), interaction(L, A).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(C, D).;false;true
2;true,false;interaction(E, A), interaction(A, E).;false;true
2;true,false,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(A, G), enzyme(G, H).;true;true
2;false,false,true;interaction(G, I), phenotype(G, J).;false;false
2;false,false,false;phenotype(A, K).;false;false
3;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
3;true;interaction(D, A), interaction(D, C).;false;true
3;true,false;complex(C, E).;false;true
3;true,false,false;interaction(A, F), interaction(F, F).;false;false
3;false;interaction(A, A).;false;true
3;false,false;interaction(A, G), interaction(H, A).;true;true
3;false,false,true;complex(H, I), complex(G, I).;false;false
3;false,false,false;complex(A, J), phenotype(A, K).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
4;false;interaction(A, D), complex(D, E).;true;true
4;false,true;complex(A, E), location(A, F).;true;true
4;false,true,true;interaction(D, G), interaction(G, D).;false;false
4;false,true,false;enzyme(D, H), phenotype(A, I).;false;false
4;false,false;interaction(J, A), interaction(K, J).;true;true
4;false,false,true;recursion_proteinclass(K, B).;false;false
4;false,false,false;interaction(A, L), phenotype(L, M).;false;false
5;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
5;true;interaction(A, D), complex(D, E).;true;false
5;true,true;complex(C, F), complex(A, F).;false;true
5;true,true,false;interaction(C, C).;false;false
5;false;interaction(A, A).;false;true
5;false,false;interaction(G, A), interaction(G, G).;true;true
5;false,false,true;complex(G, H), location(A, I).;false;false
5;false,false,false;interaction(A, J), interaction(K, A).;false;false
6;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
6;false;interaction(D, A), enzyme(D, E).;true;true
6;false,true;enzyme(A, E).;true;true
6;false,true,true;interaction(A, F), interaction(D, F).;false;false
6;false,true,false;interaction(G, D), enzyme(G, H).;false;false
6;false,false;complex(A, I), location(A, J).;true;true
6;false,false,true;location(K, J), recursion_proteinclass(K, B).;false;false
6;false,false,false;phenotype(A, L).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
7;false;interaction(D, A), interaction(D, D).;true;true
7;false,true;complex(D, E), complex(A, E).;true;true
7;false,true,true;interaction(A, F).;false;false
7;false,true,false;enzyme(A, G), phenotype(D, H).;false;false
7;false,false;complex(A, I), interaction(A, J).;true;true
7;false,false,true;interaction(J, K), recursion_proteinclass(K, B).;false;false
7;false,false,false;interaction(A, L), interaction(L, L).;false;false
8;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
8;false;complex(A, D).;true;true
8;false,true;interaction(E, A), complex(E, D).;true;true
8;false,true,true;interaction(E, E).;false;false
8;false,true,false;complex(F, D), recursion_proteinclass(F, B).;false;false
8;false,false;interaction(G, A), phenotype(G, H).;true;true
8;false,false,true;interaction(A, A).;false;false
8;false,false,false;phenotype(A, I).;false;false
9;;proteinclass(A, B) :- interaction(A, C), interaction(C, D).;true;true
9;true;recursion_proteinclass(D, B), interaction(D, E).;false;false
9;false;phenotype(A, F).;true;true
9;false,true;phenotype(G, F), recursion_proteinclass(G, B).;true;false
9;false,true,true;interaction(H, G), interaction(H, A).;false;false
9;false,false;interaction(A, I), location(A, J).;true;true
9;false,false,true;location(I, K).;false;false
9;false,false,false;interaction(L, A), location(L, M).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), tweets(C, D) )
%   | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.15814893509951225;  // std dev = 1.449, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | | else return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then if ( follows(E, F) )
%   | | then return 0.7194734122109545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), follows(H, A) )
%   | | | then return 0.1377866547829789;  // std dev = 1.449, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | | else return 0.09446743783575562;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.5553664367462845;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.1300175807156236;  // std dev = 1.662, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.18677316151023443;  // std dev = 0.369, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(D, C) )
%   | then return 0.4175135841583099;  // std dev = 1.49e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), follows(F, A) )
%   | | then if ( tweets(F, G), tweets(E, G) )
%   | | | then return 0.11022504370309465;  // std dev = 1.662, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, H) )
%   | | | then return 0.14881543523084245;  // std dev = 0.509, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, D), tweets(D, E) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(D, F), follows(F, D) )
%   | | | then return 0.11301663861747142;  // std dev = 1.414, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.04529464281412521;  // std dev = 0.433, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( follows(G, A), follows(H, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.47172745430878327;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return -0.237130598660739;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), tweets(D, E) )
%   | then if ( tweets(C, F), tweets(A, F) )
%   | | then return 0.25517224256948945;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(C, C) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.25517224256948945;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else return 0.35779706164010416;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), follows(G, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, H), follows(I, A) )
%   | | | then return 0.08881297199027219;  // std dev = 1.670, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
%   | | | else return -0.19692796551618424;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.2238757972501741;  // std dev = 0.063, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(D, A) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return -0.11291358086412256;  // std dev = 1.010, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | | else if ( follows(F, D) )
%   | | | then return 0.5227778417504348;  // std dev = 0.798, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.18753232718872873;  // std dev = 0.056, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(D, A), follows(D, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E), follows(A, F) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.5717674068242065;  // std dev = 0.376, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.23596939083477073;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( follows(A, H), follows(H, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.041967953976601795;  // std dev = 0.795, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.16071337861267268;  // std dev = 0.050, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( tweets(A, D) )
%   | then if ( follows(E, A), tweets(E, D) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03392638433235528;  // std dev = 1.099, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.018362409942659433;  // std dev = 0.761, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, D) )
%   then if ( recursion_accounttype(D, B), follows(D, E) )
%   | then return 0.32896112738410965;  // std dev = 0.670, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.20243733941057634;  // std dev = 0.004, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(G, A) )
%   | | then return 0.18022010662741395;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A) )
%   | | | then return -0.2520331362168322;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.92973
   AUC PR    = 0.323366
   CLL	      = -0.208029
   Precision = 0.329154 at threshold = 0.5
   Recall    = 0.673077
   F1        = 0.442105


Total learning time: 0.786 seconds
Total inference time: 9.438 seconds
AUC ROC: 0.92973


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.269772
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.8
   F1        = 0.888889


Total scoring time: 0.425 seconds
Parameter learned model CLL: -0.269772


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'tweets(A, D), tweets(C, D)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F), recursion_accounttype(F, B)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [2.11e-08, 0, 3], 'true,false': [0.0, 0, 2], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [1.449, 7, 3], 'false,false,false,false': [0.866, 3, 1]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, E), recursion_accounttype(E, B)', 'false,true': 'follows(E, F)', 'false,false': 'follows(A, A)', 'false,false,false': 'tweets(A, G), follows(H, A)'}, {'true,true': [0.0, 0, 5], 'true,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 1], 'false,true,false': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [1.449, 7, 3], 'false,false,false,false': [0.866, 3, 1]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(A, A)', 'false,false': 'follows(A, E)', 'false,false,true': 'follows(E, F)'}, {'true,true': [0.0, 0, 5], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.662, 9, 4], 'false,false,true,false': [0.0, 0, 0], 'false,false,false': [0.369, 1, 1]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(D, C)', 'false': 'follows(A, A)', 'false,false': 'follows(A, E), follows(F, A)', 'false,false,true': 'tweets(F, G), tweets(E, G)', 'false,false,false': 'tweets(A, H)'}, {'true,true': [1.49e-08, 0, 5], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.662, 9, 4], 'false,false,true,false': [0.0, 0, 0], 'false,false,false,true': [0.509, 1, 1], 'false,false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(A, D), tweets(D, E)', 'false,true': 'tweets(A, E)', 'false,true,true': 'follows(D, F), follows(F, D)', 'false,false': 'follows(G, A), follows(H, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true': [0.0, 0, 5], 'false,true,true,true': [1.414, 6, 3], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.433, 3, 1], 'false,false,true,true': [0.0, 0, 1], 'false,false,true,false': [0.0, 1, 0], 'false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(A, D), tweets(D, E)', 'true,true': 'tweets(C, F), tweets(A, F)', 'true,true,false': 'follows(C, C)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), follows(G, G)', 'false,false,false': 'follows(A, H), follows(I, A)'}, {'true,true,true': [0.0, 0, 2], 'true,true,false,true': [0.0, 0, 0], 'true,true,false,false': [0.0, 0, 2], 'true,false': [0.0, 0, 1], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [1.67, 9, 5], 'false,false,false,false': [0.0, 1, 0]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(A, E), follows(D, E)', 'false,true,false': 'follows(F, D)'}, {'true': [0.063, 0, 5], 'false,true,true': [1.01, 9, 2], 'false,true,false,true': [0.798, 1, 3], 'false,true,false,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(D, A), follows(D, D)', 'false,false': 'tweets(A, E), follows(A, F)', 'false,false,true': 'follows(F, G), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, H), follows(H, H)'}, {'true': [0.056, 0, 5], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.376, 0, 4], 'false,false,true,false': [0.0, 6, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.795, 4, 1]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,true': 'follows(E, A), tweets(E, D)', 'false,true,true': 'follows(E, E)', 'false,false': 'follows(F, A)', 'false,false,true': 'follows(A, A)'}, {'true': [0.05, 0, 5], 'false,true,true,true': [0.0, 0, 0], 'false,true,true,false': [1.099, 7, 4], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.761, 3, 1], 'false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), follows(C, D)', 'true': 'recursion_accounttype(D, B), follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,true': 'follows(G, F), follows(G, A)', 'false,false': 'follows(A, H)', 'false,false,false': 'follows(I, A)'}, {'true,true': [0.67, 0, 9], 'true,false': [0.004, 9, 0], 'false,true,true': [0.0, 0, 1], 'false,true,false': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 1, 0], 'false,false,false,false': [0.0, 0, 0]}]]
[{'': [0.0, 0.22222222222222202], 'false': [nan, 0.22222222222222202], 'false,false': [0.0, 0.20408163265306106], 'false,false,false': [0.20999999999999988, 0.18750000000000003], 'true': [1.4802973661668753e-16, 0.0]}, {'': [0.0, 0.212316386186517], 'false': [0.0, 0.20395439888916753], 'false,false': [nan, 0.20395439888916753], 'false,false,false': [0.20999999999999996, 0.18749999999999997], 'true': [0.0, nan], 'false,true': [0.0, nan]}, {'': [-4.4408920985006264e-17, 0.20272138261911435], 'false': [nan, 0.2027213826191143], 'false,false': [0.21257810214404563, 0.13586100254923858], 'false,false,true': [0.21257810214404563, nan], 'true': [-4.4408920985006264e-17, nan]}, {'': [4.4408920985006264e-17, 0.20166513394563176], 'false': [nan, 0.20166513394563176], 'false,false': [0.21254412668135697, 0.12966102528758838], 'false,false,true': [0.21254412668135697, nan], 'false,false,false': [0.12966102528758838, nan], 'true': [4.4408920985006264e-17, nan]}, {'': [-2.2204460492503132e-17, 0.20100226704708363], 'false': [0.21251541818793593, 0.1256199348149355], 'false,true': [0.22222222222222227, 0.1875], 'false,true,true': [0.22222222222222227, nan], 'false,false': [0.1256199348149355, nan], 'false,false,true': [0.0, 0.0]}, {'': [0.0016850965582842047, 0.1909625038653873], 'false': [nan, 0.1909625038653873], 'false,false': [nan, 0.1909625038653873], 'false,false,false': [0.1991594904884437, 0.0], 'true': [0.0, 0.0], 'true,true': [0.0, 0.0], 'true,true,false': [nan, 0.0]}, {'': [0.0007972809142492321, 0.1894386348317773], 'false': [0.1894386348317773, nan], 'false,true': [0.09273467356451738, 0.1590318994738807], 'false,true,false': [0.1590318994738807, nan]}, {'': [0.0006233943919929319, 0.1596611869588613], 'false': [nan, 0.1596611869588613], 'false,false': [0.17073213697965367, 0.12640923657689726], 'false,false,true': [0.03536710187370656, 0.0], 'false,false,false': [nan, 0.12640923657689726]}, {'': [0.0004946263496343417, 0.11915916964988423], 'false': [0.10976597051283968, 0.14481282659096786], 'false,false': [0.14481282659096786, nan], 'false,false,true': [nan, 0.14481282659096786], 'false,true': [0.10976597051283968, nan], 'false,true,true': [nan, 0.10976597051283968]}, {'': [0.0955102222829259, 0.046710716487341715], 'true': [0.04982652018304044, 1.759126939862268e-06], 'false': [0.0, 0.0], 'false,true': [0.0, nan], 'false,false': [nan, 0.0], 'false,false,false': [0.0, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
0;true;tweets(A, D), tweets(C, D).;true;true
0;false;follows(A, F), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, E), recursion_accounttype(E, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(A, D), tweets(D, E).;true;true
4;false,false;recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
5;true;follows(A, D), tweets(D, E).;true;true
5;true,true;tweets(C, F), tweets(A, F).;true;true
5;false;follows(A, H), follows(I, A).;true;true
6;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;false;tweets(A, E), follows(A, F).;true;true
7;false,true;follows(F, G), recursion_accounttype(G, B).;true;true
8;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
9;;accounttype(A, B) :- follows(A, C), follows(C, D).;true;true
9;true;recursion_accounttype(D, B), follows(D, E).;true;true
9;false;recursion_accounttype(F, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), tweets(C, D) )
%   | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( tweets(A, F), follows(A, G) )
%   | | then if ( tweets(H, F), recursion_accounttype(H, B) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( tweets(A, E), follows(A, F) )
%   | | then if ( tweets(G, E), recursion_accounttype(G, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.050922032513554226;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.5553664367462845;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( tweets(A, D) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then return 0.5553664367462845;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.11850742450813855;  // std dev = 0.015, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0.0943462976046685;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.4175135841583099;  // std dev = 1.49e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( tweets(A, D), follows(A, E) )
%   | then if ( tweets(F, D), recursion_accounttype(F, B) )
%   | | then return 0.41751358415830997;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.10103263690443205;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.10049471132194983;  // std dev = 0.954, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, D), tweets(D, E) )
%   | then if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.32071184716014967;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.09221910147533159;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.06699029376169197;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then return 0.3932948125509884;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return -0.15330102660959072;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), tweets(D, E) )
%   | then if ( tweets(C, F), tweets(A, F) )
%   | | then return 0.25517224256948945;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.25517224256948945;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else return 0.30432671063612415;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, G), follows(H, A) )
%   | then if ( tweets(A, I) )
%   | | then if ( tweets(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.25517224256948945;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.08478387514267098;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.05676069267327954;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return -0.13444185270277675;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.21659761876587513;  // std dev = 0.031, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( tweets(A, D) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then return 0.20975771563253554;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.08430656830668648;  // std dev = 0.014, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0.047757474653790315;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.18213076044009383;  // std dev = 0.027, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( tweets(A, D), follows(A, E) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then return 0.17709649774527736;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.07255118395360895;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.009762463605276892;  // std dev = 0.876, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.15657442283895343;  // std dev = 0.024, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( tweets(A, D) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then return 0.15274385809367097;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.07411919140336524;  // std dev = 0.015, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0.03831811440131062;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, D) )
%   then if ( recursion_accounttype(D, B), follows(D, E) )
%   | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.13255737570047738;  // std dev = 0.002, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.29596858171120555;  // std dev = 0.561, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( tweets(A, G) )
%   | | then return -0.0632799646099591;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.21814676317921147;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( recursion_accounttype(H, B) )
%   | then return 0.15624883100896492;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return -0.1047667431816222;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */


Results
   AUC ROC   = 0.994597
   AUC PR    = 0.403628
   CLL	      = -0.117899
   Precision = 0.333333 at threshold = 0.5
   Recall    = 0.820513
   F1        = 0.474074


Total learning time: 2.673 seconds
Total inference time: 227.69299999999998 seconds
AUC ROC: 0.994597


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.173863
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.9
   F1        = 0.947368


Total scoring time: 0.708 seconds
Refined model CLL: -0.173863


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.994597
   AUC PR    = 0.403628
   CLL	      = -0.117899
   Precision = 0.333333 at threshold = 0.5
   Recall    = 0.820513
   F1        = 0.474074


Total learning time: 4.5920000000000005 seconds
Total inference time: 227.69299999999998 seconds
AUC ROC: 0.994597
Total revision time: 4.5920000000000005
Best scored revision CLL: -0.173863


Dataset: 7_yeast_twitter, Fold: 2, Type: Transfer (trRDN-B), Time: 00:06:44
{'AUC ROC': 0.994597, 'AUC PR': 0.403628, 'CLL': -0.117899, 'Precision': [0.333333, 0.5], 'Recall': 0.820513, 'F1': 0.474074, 'Learning time': 4.5920000000000005, 'Inference time': 227.69299999999998, 'parameter_10': {'AUC ROC': 0.92973, 'AUC PR': 0.323366, 'CLL': -0.208029, 'Precision': [0.329154, 0.5], 'Recall': 0.673077, 'F1': 0.442105, 'Learning time': 0.786, 'Inference time': 9.438}}


Amount of data: 15
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
0;true;complex(A, D), complex(C, D).;false;false
0;false;interaction(E, A), interaction(E, E).;true;true
0;false,true;interaction(A, E).;true;true
0;false,true,true;complex(A, F).;false;false
0;false,true,false;complex(E, G), location(A, H).;false;false
0;false,false;interaction(A, I), recursion_proteinclass(I, B).;false;true
0;false,false,false;location(A, J), complex(A, K).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
1;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
1;true,false;interaction(E, C), interaction(E, E).;false;true
1;true,false,false;interaction(A, F), enzyme(F, G).;false;false
1;false;interaction(A, H), recursion_proteinclass(H, B).;true;true
1;false,true;enzyme(H, I), interaction(H, J).;false;false
1;false,false;interaction(A, A).;false;true
1;false,false,false;complex(A, K), interaction(L, A).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(C, D).;false;true
2;true,false;interaction(E, A), interaction(A, E).;false;true
2;true,false,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(A, G), enzyme(G, H).;true;true
2;false,false,true;interaction(G, I), phenotype(G, J).;false;false
2;false,false,false;phenotype(A, K).;false;false
3;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
3;true;interaction(D, A), interaction(D, C).;false;true
3;true,false;complex(C, E).;false;true
3;true,false,false;interaction(A, F), interaction(F, F).;false;false
3;false;interaction(A, A).;false;true
3;false,false;interaction(A, G), interaction(H, A).;true;true
3;false,false,true;complex(H, I), complex(G, I).;false;false
3;false,false,false;complex(A, J), phenotype(A, K).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
4;false;interaction(A, D), complex(D, E).;true;true
4;false,true;complex(A, E), location(A, F).;true;true
4;false,true,true;interaction(D, G), interaction(G, D).;false;false
4;false,true,false;enzyme(D, H), phenotype(A, I).;false;false
4;false,false;interaction(J, A), interaction(K, J).;true;true
4;false,false,true;recursion_proteinclass(K, B).;false;false
4;false,false,false;interaction(A, L), phenotype(L, M).;false;false
5;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
5;true;interaction(A, D), complex(D, E).;true;false
5;true,true;complex(C, F), complex(A, F).;false;true
5;true,true,false;interaction(C, C).;false;false
5;false;interaction(A, A).;false;true
5;false,false;interaction(G, A), interaction(G, G).;true;true
5;false,false,true;complex(G, H), location(A, I).;false;false
5;false,false,false;interaction(A, J), interaction(K, A).;false;false
6;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
6;false;interaction(D, A), enzyme(D, E).;true;true
6;false,true;enzyme(A, E).;true;true
6;false,true,true;interaction(A, F), interaction(D, F).;false;false
6;false,true,false;interaction(G, D), enzyme(G, H).;false;false
6;false,false;complex(A, I), location(A, J).;true;true
6;false,false,true;location(K, J), recursion_proteinclass(K, B).;false;false
6;false,false,false;phenotype(A, L).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
7;false;interaction(D, A), interaction(D, D).;true;true
7;false,true;complex(D, E), complex(A, E).;true;true
7;false,true,true;interaction(A, F).;false;false
7;false,true,false;enzyme(A, G), phenotype(D, H).;false;false
7;false,false;complex(A, I), interaction(A, J).;true;true
7;false,false,true;interaction(J, K), recursion_proteinclass(K, B).;false;false
7;false,false,false;interaction(A, L), interaction(L, L).;false;false
8;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
8;false;complex(A, D).;true;true
8;false,true;interaction(E, A), complex(E, D).;true;true
8;false,true,true;interaction(E, E).;false;false
8;false,true,false;complex(F, D), recursion_proteinclass(F, B).;false;false
8;false,false;interaction(G, A), phenotype(G, H).;true;true
8;false,false,true;interaction(A, A).;false;false
8;false,false,false;phenotype(A, I).;false;false
9;;proteinclass(A, B) :- interaction(A, C), interaction(C, D).;true;true
9;true;recursion_proteinclass(D, B), interaction(D, E).;false;false
9;false;phenotype(A, F).;true;true
9;false,true;phenotype(G, F), recursion_proteinclass(G, B).;true;false
9;false,true,true;interaction(H, G), interaction(H, A).;false;false
9;false,false;interaction(A, I), location(A, J).;true;true
9;false,false,true;location(I, K).;false;false
9;false,false,false;interaction(L, A), location(L, M).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), tweets(C, D) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, E), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.07243464938522651;  // std dev = 1.535, 14.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=3 */
%   | | | else return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.7194734122109544;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E) )
%   | | then return 0.7194734122109545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G), follows(A, H) )
%   | | | then return 0.07986996768782947;  // std dev = 1.519, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | | | else return 0.01728514991439498;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C) )
%   | then return 0.5553664367462846;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A) )
%   | | then if ( follows(F, E) )
%   | | | then return 0.1033363956492862;  // std dev = 1.809, 18.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.08088726297528878;  // std dev = 0.336, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(C, D) )
%   | then return 0.41751358415830986;  // std dev = 2.58e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( tweets(C, E) )
%   | | then return 0.41751358415830997;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, G) )
%   | | then if ( tweets(G, H), tweets(F, H) )
%   | | | then return 0.10345610170103713;  // std dev = 1.787, 17.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, I) )
%   | | | then return 0.06520948308599477;  // std dev = 0.576, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return -0.16196512910881136;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.3207118471601497;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(D, A), tweets(D, E) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(F, D), follows(D, F) )
%   | | | then return 0.07362471908545566;  // std dev = 1.581, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.07021037098500571;  // std dev = 0.433, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.5190609849186829;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return -0.16167632633041015;  // std dev = 0.029, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(D, E) )
%   | then if ( tweets(C, F), tweets(A, F) )
%   | | then return 0.25517224256948945;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(C, C) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.31275272713939517;  // std dev = 0.199, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.391078731986892;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G), follows(G, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(H, A), follows(A, I) )
%   | | | then return 0.05011080862684758;  // std dev = 1.732, 16.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=4 */
%   | | | else return -0.053514439849385274;  // std dev = 0.359, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.23610858730028053;  // std dev = 0.204, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( follows(A, D) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then return -0.12468931320407088;  // std dev = 0.954, 12.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=1 */
%   | | else if ( follows(D, F) )
%   | | | then return 0.3164319196967273;  // std dev = 1.170, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.2654756984793488;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return -0.17922249534220688;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.19702036981508436;  // std dev = 0.183, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( follows(A, D), follows(D, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E), follows(F, A) )
%   | | then if ( follows(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.622039618843199;  // std dev = 0.472, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.1953215561186934;  // std dev = 0.085, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( follows(H, A), follows(H, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.023733774237375053;  // std dev = 0.845, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.16825640101778522;  // std dev = 0.165, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( tweets(A, D) )
%   | then if ( follows(A, E), tweets(E, D) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.01171700197510292;  // std dev = 1.220, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | | else if ( tweets(F, D), recursion_accounttype(F, B) )
%   | | | then return 0.12951936653749885;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return -0.1305427855126725;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.014655063153618203;  // std dev = 0.824, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(D, C) )
%   then if ( recursion_accounttype(D, B), follows(E, D) )
%   | then return 0.28634631290251017;  // std dev = 0.895, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return -0.16921306697166147;  // std dev = 0.086, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else if ( recursion_accounttype(F, B) )
%   | then if ( follows(F, G), follows(A, G) )
%   | | then return 0.19228289688707922;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(H, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, I) )
%   | | | then return -0.17428627958113171;  // std dev = 0.031, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.957144
   AUC PR    = 0.416629
   CLL	      = -0.172292
   Precision = 0.30625 at threshold = 0.5
   Recall    = 0.628205
   F1        = 0.411765


Total learning time: 0.837 seconds
Total inference time: 11.299 seconds
AUC ROC: 0.957144


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.245375
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.733333
   F1        = 0.846154


Total scoring time: 0.467 seconds
Parameter learned model CLL: -0.245375


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'tweets(A, D), tweets(C, D)', 'false': 'follows(A, E), follows(E, E)', 'false,false': 'follows(F, A), recursion_accounttype(F, B)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.0, 0, 6], 'true,false': [0.0, 0, 4], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [1.535, 11, 3], 'false,false,false,false': [0.894, 4, 1]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E)', 'false,false': 'follows(A, A)', 'false,false,false': 'tweets(A, G), follows(A, H)'}, {'true,true': [0.0, 0, 10], 'true,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 1], 'false,true,false': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [1.519, 10, 3], 'false,false,false,false': [0.913, 5, 1]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A)', 'false,false,true': 'follows(F, E)'}, {'true,true': [0.0, 0, 9], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.809, 13, 5], 'false,false,true,false': [0.0, 0, 0], 'false,false,false': [0.336, 2, 1]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(A, D), follows(C, D)', 'true,false': 'tweets(C, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, G)', 'false,false,true': 'tweets(G, H), tweets(F, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true': [2.58e-08, 0, 7], 'true,false,true': [0.0, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.787, 12, 5], 'false,false,true,false': [0.0, 0, 0], 'false,false,false,true': [0.576, 2, 1], 'false,false,false,false': [0.0, 1, 0]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(D, A), tweets(D, E)', 'false,true': 'tweets(A, E)', 'false,true,true': 'follows(F, D), follows(D, F)', 'false,false': 'follows(A, G), follows(G, H)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true': [0.0, 0, 9], 'false,true,true,true': [1.581, 10, 4], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.433, 3, 1], 'false,false,true,true': [0.0, 0, 1], 'false,false,true,false': [0.029, 2, 0], 'false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), tweets(D, E)', 'true,true': 'tweets(C, F), tweets(A, F)', 'true,true,false': 'follows(C, C)', 'false': 'follows(A, A)', 'false,false': 'follows(A, G), follows(G, G)', 'false,false,false': 'follows(H, A), follows(A, I)'}, {'true,true,true': [0.0, 0, 5], 'true,true,false,true': [0.0, 0, 0], 'true,true,false,false': [0.199, 0, 4], 'true,false': [0.0, 0, 1], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [1.732, 12, 4], 'false,false,false,false': [0.359, 3, 1]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(A, D)', 'false,true': 'follows(E, A), follows(E, D)', 'false,true,false': 'follows(D, F)', 'false,false': 'tweets(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true': [0.204, 0, 10], 'false,true,true': [0.954, 11, 1], 'false,true,false,true': [1.17, 3, 3], 'false,true,false,false': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 1], 'false,false,true,false': [0.0, 1, 0], 'false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, D)', 'false,false': 'tweets(A, E), follows(F, A)', 'false,false,true': 'follows(G, F), recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A), follows(H, H)'}, {'true': [0.183, 0, 10], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.472, 0, 4], 'false,false,true,false': [0.085, 10, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.845, 5, 1]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,true': 'follows(A, E), tweets(E, D)', 'false,true,true': 'follows(E, E)', 'false,true,false': 'tweets(F, D), recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(A, A)'}, {'true': [0.165, 0, 10], 'false,true,true,true': [0.0, 0, 0], 'false,true,true,false': [1.22, 10, 3], 'false,true,false,true': [0.0, 0, 1], 'false,true,false,false': [0.0, 1, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.824, 4, 1], 'false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(C, A), follows(D, C)', 'true': 'recursion_accounttype(D, B), follows(E, D)', 'false': 'recursion_accounttype(F, B)', 'false,true': 'follows(F, G), follows(A, G)', 'false,false': 'follows(H, A)', 'false,false,false': 'follows(A, I)'}, {'true,true': [0.895, 0, 14], 'true,false': [0.086, 13, 0], 'false,true,true': [0.0, 0, 1], 'false,true,false': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.031, 2, 0], 'false,false,false,false': [0.0, 0, 0]}]]
[{'': [-8.881784197001253e-17, 0.18749999999999986], 'false': [nan, 0.18749999999999986], 'false,false': [0.0, 0.16620498614958434], 'false,false,false': [0.1683673469387754, 0.16000000000000003], 'true': [-1.4802973661668753e-16, 0.0]}, {'': [-8.881784197001253e-17, 0.17853709651576383], 'false': [0.0, 0.1661955390776874], 'false,false': [nan, 0.1661955390776874], 'false,false,false': [0.1775147928994082, 0.13899053268828146], 'false,true': [0.0, nan], 'true': [-8.881784197001253e-17, nan]}, {'': [-1.4802973661668753e-16, 0.17199268947665178], 'false': [nan, 0.1719926894766518], 'false,false': [0.1818224148317391, 0.11258236858228665], 'false,false,true': [0.1818224148317391, nan], 'true': [-1.4802973661668753e-16, nan]}, {'': [1.2335811384723962e-16, 0.17108971551269658], 'false': [nan, 0.17108971551269658], 'false,false': [0.18784801350067515, 0.09255480120452059], 'false,false,true': [0.18784801350067515, nan], 'false,false,false': [0.11050432549956231, 0.0], 'true': [9.516197353929913e-17, 0.0], 'true,false': [0.0, nan]}, {'': [-3.700743415417188e-17, 0.16953625567024885], 'false': [0.18057415312055905, 0.10325897254319029], 'false,true': [0.17859274911022174, 0.18750000000000003], 'false,true,true': [0.17859274911022174, nan], 'false,false': [0.10325897254319029, nan], 'false,false,true': [0.0, 0.000420696505903935]}, {'': [0.00581064429933017, 0.15819955148137754], 'false': [nan, 0.15819955148137754], 'false,false': [nan, 0.15819955148137754], 'false,false,false': [0.18753016123627275, 0.032286558764387824], 'true': [0.005239327926210648, 0.0], 'true,true': [0.0, 0.009946536609915471], 'true,true,false': [nan, 0.009946536609915471]}, {'': [0.004142169289346564, 0.15781281454506899], 'false': [0.1698111739056787, 0.04943912089703848], 'false,true': [0.07587636304523272, 0.22795550088262398], 'false,true,false': [0.22795550088262403, nan], 'false,false': [0.04943912089703848, nan], 'false,false,true': [0.0, 0.0]}, {'': [0.0033520690377825068, 0.14340479429071923], 'false': [nan, 0.14340479429071923], 'false,false': [0.15276763981889566, 0.11887221485663747], 'false,false,true': [0.0556849964269831, 0.0007208999370648783], 'false,false,false': [nan, 0.11887221485663747]}, {'': [0.0027238727946044595, 0.11005532024431433], 'false': [0.10150227252092443, 0.13569880963626463], 'false,false': [0.13569880963626463, nan], 'false,false,true': [nan, 0.13569880963626463], 'false,true': [0.11449682471413215, 0.01690808073224161], 'false,true,true': [nan, 0.11449682471413215], 'false,true,false': [0.0, 0.0]}, {'': [0.08177726147539653, 0.030170937151297452], 'true': [0.05725917308597782, 0.0005709536907139626], 'false': [0.0, 0.0004654186814187257], 'false,false': [nan, 0.0004654186814187257], 'false,false,false': [0.0004654186814187257, nan], 'false,true': [0.0, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
0;true;tweets(A, D), tweets(C, D).;true;true
0;false;follows(F, A), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
1;false;follows(E, A), recursion_accounttype(E, B).;true;true
2;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
3;true;follows(A, D), follows(C, D).;true;true
3;false;follows(F, A), follows(A, G).;true;true
3;false,false;tweets(A, I).;true;true
4;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
4;false;follows(D, A), tweets(D, E).;true;true
4;false,false;recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
5;true;follows(D, A), tweets(D, E).;true;true
5;true,true;tweets(C, F), tweets(A, F).;true;true
6;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
6;false;follows(A, D).;true;true
6;false,false;recursion_accounttype(H, B).;true;true
7;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
7;false;tweets(A, E), follows(F, A).;true;true
7;false,true;follows(G, F), recursion_accounttype(G, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;tweets(A, D).;true;true
8;false,true;follows(A, E), tweets(E, D).;true;true
8;false,true,false;tweets(F, D), recursion_accounttype(F, B).;true;true
9;;accounttype(A, B) :- follows(C, A), follows(D, C).;true;true
9;true;recursion_accounttype(D, B), follows(E, D).;true;true
9;false;recursion_accounttype(F, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), tweets(C, D) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, F), follows(F, A) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.7194734122109544;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, E), follows(E, A) )
%   | | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.12544463852839138;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.5553664367462846;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( tweets(A, D), follows(A, E) )
%   | then if ( tweets(F, D), recursion_accounttype(F, B) )
%   | | then return 0.5553664367462845;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(E, G), follows(G, A) )
%   | | | then return -0.11231637819360639;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return -0.11231637819360639;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return -0.001035909036957915;  // std dev = 0.610, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(C, D) )
%   | then return 0.41751358415830986;  // std dev = 1.05e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.41751358415830997;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A), follows(A, F) )
%   | then if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.41751358415830997;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.10159632948783627;  // std dev = 5.27e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else return 0.05474570239296747;  // std dev = 0.578, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( tweets(A, I) )
%   | | then return 0.06790137219895578;  // std dev = 0.428, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return -0.11221313807360633;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.3207118471601497;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(D, A), tweets(D, E) )
%   | then if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.32071184716014967;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.09533792426575427;  // std dev = 0.025, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else return 0.047178931432068125;  // std dev = 0.571, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then return 0.40109848908209167;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return -0.10473751704645587;  // std dev = 0.005, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(D, E) )
%   | then if ( tweets(C, F), tweets(A, F) )
%   | | then return 0.25517224256948945;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.25517224256948945;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.309600289140165;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, G), follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.32396291450195513;  // std dev = 0.238, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.08497872888408718;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return -0.1227753366039543;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return -0.025989532242708245;  // std dev = 0.315, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then return 0.2097577156325356;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.22236340400366975;  // std dev = 0.031, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, F) )
%   | then if ( follows(A, G), follows(G, A) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return -0.08806568195162219;  // std dev = 0.046, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return 0.19334030769372418;  // std dev = 0.374, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return -0.08972567449281306;  // std dev = 0.009, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.2601431465317038;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return -0.10700000474307998;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.17987156383576272;  // std dev = 0.010, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( tweets(A, D), follows(E, A) )
%   | then if ( follows(F, E), recursion_accounttype(F, B) )
%   | | then return 0.18051019053517878;  // std dev = 0.038, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.07745703320717871;  // std dev = 0.009, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return -0.01245153176196276;  // std dev = 0.455, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then return 0.1523850739643587;  // std dev = 1.86e-09, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.16063359373002836;  // std dev = 0.024, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G), tweets(G, F) )
%   | | then return -0.02161195142178787;  // std dev = 0.092, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | | else if ( tweets(H, F), recursion_accounttype(H, B) )
%   | | | then return 0.18454122026264497;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return -0.09060956559807655;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0.004225066773531114;  // std dev = 0.449, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(D, C) )
%   then if ( recursion_accounttype(D, B), follows(E, D) )
%   | then if ( tweets(A, F) )
%   | | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.13372687044335985;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.15087216277533097;  // std dev = 0.009, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.2223189954165893;  // std dev = 0.223, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( tweets(A, H) )
%   | | then return -0.07013193804034742;  // std dev = 0.007, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else return -0.10106249190009416;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( recursion_accounttype(I, B) )
%   | then return 0.15783078338271983;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return -0.08412830378236169;  // std dev = 0.002, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */


Results
   AUC ROC   = 0.993917
   AUC PR    = 0.383761
   CLL	      = -0.100719
   Precision = 0.311295 at threshold = 0.5
   Recall    = 0.724359
   F1        = 0.435453


Total learning time: 3.742 seconds
Total inference time: 196.204 seconds
AUC ROC: 0.993917


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.113294
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.748 seconds
Refined model CLL: -0.113294


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.993917
   AUC PR    = 0.383761
   CLL	      = -0.100719
   Precision = 0.311295 at threshold = 0.5
   Recall    = 0.724359
   F1        = 0.435453


Total learning time: 5.7940000000000005 seconds
Total inference time: 196.204 seconds
AUC ROC: 0.993917
Total revision time: 5.7940000000000005
Best scored revision CLL: -0.113294


Dataset: 7_yeast_twitter, Fold: 2, Type: Transfer (trRDN-B), Time: 00:10:18
{'AUC ROC': 0.993917, 'AUC PR': 0.383761, 'CLL': -0.100719, 'Precision': [0.311295, 0.5], 'Recall': 0.724359, 'F1': 0.435453, 'Learning time': 5.7940000000000005, 'Inference time': 196.204, 'parameter_15': {'AUC ROC': 0.957144, 'AUC PR': 0.416629, 'CLL': -0.172292, 'Precision': [0.30625, 0.5], 'Recall': 0.628205, 'F1': 0.411765, 'Learning time': 0.837, 'Inference time': 11.299}}


Amount of data: 20
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
0;true;complex(A, D), complex(C, D).;false;false
0;false;interaction(E, A), interaction(E, E).;true;true
0;false,true;interaction(A, E).;true;true
0;false,true,true;complex(A, F).;false;false
0;false,true,false;complex(E, G), location(A, H).;false;false
0;false,false;interaction(A, I), recursion_proteinclass(I, B).;false;true
0;false,false,false;location(A, J), complex(A, K).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
1;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
1;true,false;interaction(E, C), interaction(E, E).;false;true
1;true,false,false;interaction(A, F), enzyme(F, G).;false;false
1;false;interaction(A, H), recursion_proteinclass(H, B).;true;true
1;false,true;enzyme(H, I), interaction(H, J).;false;false
1;false,false;interaction(A, A).;false;true
1;false,false,false;complex(A, K), interaction(L, A).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(C, D).;false;true
2;true,false;interaction(E, A), interaction(A, E).;false;true
2;true,false,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(A, G), enzyme(G, H).;true;true
2;false,false,true;interaction(G, I), phenotype(G, J).;false;false
2;false,false,false;phenotype(A, K).;false;false
3;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
3;true;interaction(D, A), interaction(D, C).;false;true
3;true,false;complex(C, E).;false;true
3;true,false,false;interaction(A, F), interaction(F, F).;false;false
3;false;interaction(A, A).;false;true
3;false,false;interaction(A, G), interaction(H, A).;true;true
3;false,false,true;complex(H, I), complex(G, I).;false;false
3;false,false,false;complex(A, J), phenotype(A, K).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
4;false;interaction(A, D), complex(D, E).;true;true
4;false,true;complex(A, E), location(A, F).;true;true
4;false,true,true;interaction(D, G), interaction(G, D).;false;false
4;false,true,false;enzyme(D, H), phenotype(A, I).;false;false
4;false,false;interaction(J, A), interaction(K, J).;true;true
4;false,false,true;recursion_proteinclass(K, B).;false;false
4;false,false,false;interaction(A, L), phenotype(L, M).;false;false
5;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
5;true;interaction(A, D), complex(D, E).;true;false
5;true,true;complex(C, F), complex(A, F).;false;true
5;true,true,false;interaction(C, C).;false;false
5;false;interaction(A, A).;false;true
5;false,false;interaction(G, A), interaction(G, G).;true;true
5;false,false,true;complex(G, H), location(A, I).;false;false
5;false,false,false;interaction(A, J), interaction(K, A).;false;false
6;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
6;false;interaction(D, A), enzyme(D, E).;true;true
6;false,true;enzyme(A, E).;true;true
6;false,true,true;interaction(A, F), interaction(D, F).;false;false
6;false,true,false;interaction(G, D), enzyme(G, H).;false;false
6;false,false;complex(A, I), location(A, J).;true;true
6;false,false,true;location(K, J), recursion_proteinclass(K, B).;false;false
6;false,false,false;phenotype(A, L).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
7;false;interaction(D, A), interaction(D, D).;true;true
7;false,true;complex(D, E), complex(A, E).;true;true
7;false,true,true;interaction(A, F).;false;false
7;false,true,false;enzyme(A, G), phenotype(D, H).;false;false
7;false,false;complex(A, I), interaction(A, J).;true;true
7;false,false,true;interaction(J, K), recursion_proteinclass(K, B).;false;false
7;false,false,false;interaction(A, L), interaction(L, L).;false;false
8;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
8;false;complex(A, D).;true;true
8;false,true;interaction(E, A), complex(E, D).;true;true
8;false,true,true;interaction(E, E).;false;false
8;false,true,false;complex(F, D), recursion_proteinclass(F, B).;false;false
8;false,false;interaction(G, A), phenotype(G, H).;true;true
8;false,false,true;interaction(A, A).;false;false
8;false,false,false;phenotype(A, I).;false;false
9;;proteinclass(A, B) :- interaction(A, C), interaction(C, D).;true;true
9;true;recursion_proteinclass(D, B), interaction(D, E).;false;false
9;false;phenotype(A, F).;true;true
9;false,true;phenotype(G, F), recursion_proteinclass(G, B).;true;false
9;false,true,true;interaction(H, G), interaction(H, A).;false;false
9;false,false;interaction(A, I), location(A, J).;true;true
9;false,false,true;location(I, K).;false;false
9;false,false,false;interaction(L, A), location(L, M).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), tweets(C, D) )
%   | then return 0.7470378239884012;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else return 0.8581489350995121;  // std dev = 4.21e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, E), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.06867525088898598;  // std dev = 1.777, 19.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=4 */
%   | | | else return 0.19148226843284552;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.6560087354435737;  // std dev = 0.953, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else if ( follows(C, E), follows(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, A) )
%   | | | then return 0.7413433124639606;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(H, G) )
%   | | then return 0.7194734122109545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, I), follows(A, J) )
%   | | | then return 0.0718040139835895;  // std dev = 1.764, 18.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=4 */
%   | | | else return 0.12125924845009393;  // std dev = 1.191, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C) )
%   | then return 0.502080549349034;  // std dev = 0.946, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A) )
%   | | then if ( follows(F, E) )
%   | | | then return 0.10530402861272305;  // std dev = 2.084, 24.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.2673654968576679;  // std dev = 0.446, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(C, D) )
%   | then return 0.3534338602364158;  // std dev = 0.934, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( tweets(C, E) )
%   | | then return 0.45213450868550614;  // std dev = 0.031, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(F, A), follows(F, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.4461501121154471;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), follows(A, H) )
%   | | then if ( tweets(H, I), tweets(G, I) )
%   | | | then return 0.10119566994064556;  // std dev = 2.061, 23.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, J) )
%   | | | then return 0.050523792007073694;  // std dev = 0.590, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.2720447164479136;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.28642310778047575;  // std dev = 0.942, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   else if ( follows(D, A), tweets(D, E) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(F, D), follows(D, F) )
%   | | | then return 0.043375666454895295;  // std dev = 1.728, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.1881557163441202;  // std dev = 0.497, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.5197557476690241;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return -0.24327982697781247;  // std dev = 0.051, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( follows(I, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.7206822418847671;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(D, E) )
%   | then if ( tweets(C, F), tweets(A, F) )
%   | | then return 0.21846020455515414;  // std dev = 0.976, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else if ( follows(C, C) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.3365164278845144;  // std dev = 0.194, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.3915761881230164;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G), follows(G, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(H, A), follows(A, I) )
%   | | | then return 0.030224232211633124;  // std dev = 1.944, 21.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=5 */
%   | | | else return 0.04453169783393102;  // std dev = 0.701, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.21561038960129789;  // std dev = 1.008, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   else if ( follows(A, D) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then return -0.09472125306257549;  // std dev = 1.330, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | | else if ( follows(D, F) )
%   | | | then return 0.28704125240229333;  // std dev = 1.210, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.5455320914503268;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( tweets(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.25677622124373967;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return -0.2032133861877158;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1744612576104931;  // std dev = 1.003, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   else if ( follows(A, D), follows(D, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E), follows(F, A) )
%   | | then if ( follows(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.66259412899016;  // std dev = 0.508, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.18994410951651083;  // std dev = 0.065, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( follows(H, A), follows(H, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.020315180310445425;  // std dev = 0.971, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.14417288600246872;  // std dev = 0.998, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   else if ( tweets(A, D) )
%   | then if ( follows(A, E), tweets(E, D) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.012139209568282574;  // std dev = 1.431, 18.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=4 */
%   | | else if ( tweets(F, D), recursion_accounttype(F, B) )
%   | | | then return 0.12108849634107288;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return -0.14685449940403072;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.017411608866793254;  // std dev = 0.947, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(D, C) )
%   then if ( recursion_accounttype(D, B), follows(E, D) )
%   | then return 0.2548336830792877;  // std dev = 1.427, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | else return -0.17616288879633638;  // std dev = 0.136, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   else if ( recursion_accounttype(F, B) )
%   | then if ( follows(F, G), follows(A, G) )
%   | | then return 0.30707244545301365;  // std dev = 0.147, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(H, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, I) )
%   | | | then return -0.25876961511531177;  // std dev = 0.054, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.984902
   AUC PR    = 0.335983
   CLL	      = -0.232814
   Precision = 0.173252 at threshold = 0.5
   Recall    = 0.730769
   F1        = 0.280098


Total learning time: 0.873 seconds
Total inference time: 11.01 seconds
AUC ROC: 0.984902


Results scoring model
   AUC ROC   = 0.97125
   AUC PR    = 0.959318
   CLL	      = -0.310362
   Precision = 0.9375 at threshold = 0.5
   Recall    = 0.75
   F1        = 0.833333


Total scoring time: 0.462 seconds
Parameter learned model CLL: -0.310362


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'tweets(A, D), tweets(C, D)', 'false': 'follows(A, E), follows(E, E)', 'false,false': 'follows(F, A), recursion_accounttype(F, B)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.943, 1, 8], 'true,false': [4.21e-08, 0, 5], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [1.777, 15, 4], 'false,false,false,false': [1.155, 4, 2]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'true,false': 'follows(C, E), follows(E, E)', 'true,false,false': 'follows(F, A)', 'false': 'follows(G, A), recursion_accounttype(G, B)', 'false,true': 'follows(H, G)', 'false,false': 'follows(A, A)', 'false,false,false': 'tweets(A, I), follows(A, J)'}, {'true,true': [0.953, 1, 12], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 1], 'false,true,false': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [1.764, 14, 4], 'false,false,false,false': [1.191, 5, 2]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A)', 'false,false,true': 'follows(F, E)'}, {'true,true': [0.946, 1, 11], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [2.084, 17, 7], 'false,false,true,false': [0.0, 0, 0], 'false,false,false': [0.446, 2, 2]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(A, D), follows(C, D)', 'true,false': 'tweets(C, E)', 'true,false,false': 'follows(F, A), follows(F, F)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), follows(A, H)', 'false,false,true': 'tweets(H, I), tweets(G, I)', 'false,false,false': 'tweets(A, J)'}, {'true,true': [0.934, 1, 8], 'true,false,true': [0.031, 0, 2], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [0.0, 0, 1], 'false,true': [0.0, 0, 0], 'false,false,true,true': [2.061, 16, 7], 'false,false,true,false': [0.0, 0, 0], 'false,false,false,true': [0.59, 2, 1], 'false,false,false,false': [0.707, 1, 1]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(D, A), tweets(D, E)', 'false,true': 'tweets(A, E)', 'false,true,true': 'follows(F, D), follows(D, F)', 'false,false': 'follows(A, G), follows(G, H)', 'false,false,true': 'recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A)'}, {'true': [0.942, 1, 11], 'false,true,true,true': [1.728, 14, 5], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.497, 3, 2], 'false,false,true,true': [0.0, 0, 1], 'false,false,true,false': [0.051, 2, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 0, 1]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), tweets(D, E)', 'true,true': 'tweets(C, F), tweets(A, F)', 'true,true,false': 'follows(C, C)', 'false': 'follows(A, A)', 'false,false': 'follows(A, G), follows(G, G)', 'false,false,false': 'follows(H, A), follows(A, I)'}, {'true,true,true': [0.976, 1, 7], 'true,true,false,true': [0.0, 0, 0], 'true,true,false,false': [0.194, 0, 5], 'true,false': [0.0, 0, 1], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [1.944, 16, 5], 'false,false,false,false': [0.701, 3, 2]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(A, D)', 'false,true': 'follows(E, A), follows(E, D)', 'false,true,false': 'follows(D, F)', 'false,false': 'tweets(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true': [1.008, 1, 13], 'false,true,true': [1.33, 15, 2], 'false,true,false,true': [1.21, 3, 3], 'false,true,false,false': [0.0, 0, 1], 'false,false,true,true': [0.0, 0, 1], 'false,false,true,false': [0.0, 1, 0], 'false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, D)', 'false,false': 'tweets(A, E), follows(F, A)', 'false,false,true': 'follows(G, F), recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A), follows(H, H)'}, {'true': [1.003, 1, 13], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.508, 0, 5], 'false,false,true,false': [0.065, 14, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.971, 5, 2]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,true': 'follows(A, E), tweets(E, D)', 'false,true,true': 'follows(E, E)', 'false,true,false': 'tweets(F, D), recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(A, A)'}, {'true': [0.998, 1, 13], 'false,true,true,true': [0.0, 0, 0], 'false,true,true,false': [1.431, 14, 4], 'false,true,false,true': [0.0, 0, 1], 'false,true,false,false': [0.0, 1, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.947, 4, 2], 'false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(C, A), follows(D, C)', 'true': 'recursion_accounttype(D, B), follows(E, D)', 'false': 'recursion_accounttype(F, B)', 'false,true': 'follows(F, G), follows(A, G)', 'false,false': 'follows(H, A)', 'false,false,false': 'follows(A, I)'}, {'true,true': [1.427, 1, 18], 'true,false': [0.136, 17, 0], 'false,true,true': [0.147, 0, 2], 'false,true,false': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.054, 2, 0], 'false,false,false,false': [0.0, 0, 0]}]]
[{'': [0.06632653061224467, 0.19674556213017763], 'false': [nan, 0.19674556213017763], 'false,false': [0.0, 0.18239999999999987], 'false,false,false': [0.16620498614958432, 0.22222222222222224], 'true': [0.09876543209876527, 3.552713678800501e-16]}, {'': [0.06532053143693022, 0.18958309761302441], 'false': [0.0, 0.18171525835541757], 'false,false': [nan, 0.1817152583554178], 'false,false,false': [0.1728395061728395, 0.20277763055499962], 'true': [0.06982504555593469, 0.0], 'false,true': [0.0, nan], 'true,false': [nan, 0.0], 'true,false,false': [0.0, nan]}, {'': [0.07453508004702365, 0.18679544064122386], 'false': [nan, 0.18679544064122391], 'false,false': [0.18099066892366567, 0.19911213995539556], 'false,false,true': [0.18099066892366567, nan], 'true': [0.07453508004702365, nan]}, {'': [0.07450136865366354, 0.1842911243608291], 'false': [nan, 0.1842911243608291], 'false,false': [0.18465074122357122, 0.18145470534554622], 'false,false,true': [0.18465074122357122, nan], 'false,false,false': [0.11612923425652728, 0.25], 'true': [0.09689074427384063, 0.00031922578409082636], 'true,false': [0.00046690100870031004, 0.0], 'true,false,false': [nan, 0.0]}, {'': [0.0738764698523286, 0.1826997274227113], 'false': [0.17924542403455743, 0.1921033520430036], 'false,false': [0.13024877458191655, 0.0], 'false,true': [0.15709661379296228, 0.24681656986626116], 'false,true,true': [0.15709661379296228, nan], 'false,false,true': [0.0, 0.0012987324806654627], 'false,false,false': [nan, 0.0]}, {'': [0.0748397858641529, 0.1642509496889402], 'false': [nan, 0.1642509496889402], 'false,false': [nan, 0.1642509496889402], 'false,false,false': [0.1798925362699862, 0.09839094854765512], 'true': [0.07943170827851262, 0.0], 'true,true': [0.11903404812143877, 0.0074911818425743345], 'true,true,false': [nan, 0.0074911818425743345]}, {'': [0.07252196390623415, 0.1640525728443025], 'false': [0.1733154573255227, 0.05289760973623613], 'false,true': [0.10405830659666684, 0.21733976673812766], 'false,true,false': [0.24401770206994564, 0.0], 'false,false': [0.05289760973623613, nan], 'false,false,true': [0.0, 0.0]}, {'': [0.0718243127668174, 0.14996568848598402], 'false': [nan, 0.14996568848598402], 'false,false': [0.15474424091756042, 0.1348069463292127], 'false,false,true': [0.05163171415797043, 0.0003013411958951995], 'false,false,false': [nan, 0.1348069463292127]}, {'': [0.07120774027131106, 0.11467893992581242], 'false': [0.10418303350247374, 0.14961879872989295], 'false,false': [0.14961879872989295, nan], 'false,false,true': [nan, 0.14961879872989295], 'false,true': [0.11370205253767038, 0.017948362242215153], 'false,true,true': [nan, 0.11370205253767038], 'false,true,false': [0.0, 0.0]}, {'': [0.10341512244270296, 0.08616486299634717], 'true': [0.10724761101057836, 0.001092784689001588], 'false': [0.010792826031229427, 0.0014482812073606799], 'false,true': [0.010792826031229427, nan], 'false,false': [nan, 0.0014482812073606799], 'false,false,false': [0.0014482812073606799, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
0;true;tweets(A, D), tweets(C, D).;true;true
0;false;follows(F, A), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
1;true;follows(C, D), recursion_accounttype(D, B).;true;true
1;false;follows(G, A), recursion_accounttype(G, B).;true;true
3;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
3;true;follows(A, D), follows(C, D).;true;true
3;true,false;tweets(C, E).;true;true
4;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
4;false;follows(D, A), tweets(D, E).;true;true
4;false,false;follows(A, G), follows(G, H).;true;true
4;false,false,true;recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
5;true;follows(D, A), tweets(D, E).;true;true
6;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
6;false;follows(A, D).;true;true
6;false,true;follows(E, A), follows(E, D).;true;true
6;false,true,false;follows(D, F).;true;true
6;false,false;recursion_accounttype(H, B).;true;true
7;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
7;false;tweets(A, E), follows(F, A).;true;true
7;false,true;follows(G, F), recursion_accounttype(G, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;tweets(A, D).;true;true
8;false,true;follows(A, E), tweets(E, D).;true;true
8;false,true,false;tweets(F, D), recursion_accounttype(F, B).;true;true
9;;accounttype(A, B) :- follows(C, A), follows(D, C).;true;true
9;true;recursion_accounttype(D, B), follows(E, D).;true;true
9;false;recursion_accounttype(F, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), tweets(C, D) )
%   | then return 0.7470378239884012;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else return 0.8581489350995121;  // std dev = 4.21e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else return 0.19148226843284552;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(F, A) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.5984861696068178;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.7267633789619565;  // std dev = 0.018, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.7413433124639606;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.12544463852839138;  // std dev = 7.45e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else return 0.16653882456488173;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A), tweets(A, D) )
%   | then return 0.4880725873096324;  // std dev = 0.311, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else return 0.5641224280645252;  // std dev = 0.027, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, E), follows(E, F) )
%   | then if ( recursion_accounttype(F, B) )
%   | | then return 0.6060453312934738;  // std dev = 0.227, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.12985475871008686;  // std dev = 0.139, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return 0.41727032267830316;  // std dev = 0.673, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(C, D) )
%   | then return 0.35675635340443607;  // std dev = 0.308, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( tweets(C, E) )
%   | | then return 0.4715160576525397;  // std dev = 0.028, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.4339642860345293;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return 0.43113039930129227;  // std dev = 0.019, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.40524260303406756;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.10407992714948304;  // std dev = 0.059, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else return 0.12427937794116946;  // std dev = 1.027, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then return 0.2754717691386678;  // std dev = 0.309, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else return 0.33345349774552924;  // std dev = 0.007, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(F, A), tweets(F, G) )
%   | then if ( tweets(A, H), follows(A, I) )
%   | | then if ( tweets(J, H), recursion_accounttype(J, B) )
%   | | | then return 0.3168198338737491;  // std dev = 0.021, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.09102111195761829;  // std dev = 6.45e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else return -0.009579663855065961;  // std dev = 0.762, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( follows(A, K), follows(K, L) )
%   | | then if ( recursion_accounttype(L, B) )
%   | | | then return 0.338708691585069;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return -0.1406996804301561;  // std dev = 0.070, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return 0.7110376966820618;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(D, E) )
%   | then return 0.22748032484559916;  // std dev = 0.259, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else return 0.26741791788238634;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, F), follows(F, G) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.33350995975429915;  // std dev = 0.379, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, H) )
%   | | | then return -0.08349870012577787;  // std dev = 0.004, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return -0.18408697676101676;  // std dev = 0.017, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.2232819809088812;  // std dev = 0.494, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then return 0.17488922947372953;  // std dev = 0.281, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0.2193361723480545;  // std dev = 0.001, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, F) )
%   | then if ( follows(G, A), follows(G, F) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.03911307457262846;  // std dev = 0.353, 14.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | | | else return -0.16229899910871942;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( follows(F, I) )
%   | | | then return 0.11368981778688514;  // std dev = 0.619, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.49152819305017625;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then return 0.2273836020438864;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return -0.17647669940576105;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then return 0.10985733001715725;  // std dev = 0.349, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.19912675468099925;  // std dev = 0.022, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.18409069702326097;  // std dev = 0.001, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( tweets(A, F), follows(G, A) )
%   | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | then return 0.18696785480443487;  // std dev = 0.023, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.08116132105297716;  // std dev = 0.020, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( follows(I, A) )
%   | | then return 0.03595340457067943;  // std dev = 0.614, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.043120327459840936;  // std dev = 0.406, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then return 0.11862798829383515;  // std dev = 0.281, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0.15802927701461256;  // std dev = 0.000918, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G), tweets(G, F) )
%   | | then return -0.0200017480125676;  // std dev = 0.096, 18.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=4 */
%   | | else if ( tweets(H, F), recursion_accounttype(H, B) )
%   | | | then return 0.16280611622726204;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return -0.14208969865340576;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0.05290947031526816;  // std dev = 0.720, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(D, C) )
%   then if ( recursion_accounttype(D, B), follows(E, D) )
%   | then if ( tweets(A, F) )
%   | | then if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.09467280004312113;  // std dev = 0.931, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.15691469607228525;  // std dev = 0.029, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.2743570614620985;  // std dev = 0.333, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then return -0.06891122700753079;  // std dev = 0.010, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else return -0.14582886171981535;  // std dev = 0.023, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( recursion_accounttype(J, B) )
%   | then return 0.2434508163840735;  // std dev = 0.150, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else return -0.1286577006115419;  // std dev = 0.063, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */


Results
   AUC ROC   = 0.991696
   AUC PR    = 0.297536
   CLL	      = -0.164686
   Precision = 0.20026 at threshold = 0.5
   Recall    = 0.987179
   F1        = 0.332973


Total learning time: 8.813 seconds
Total inference time: 544.943 seconds
AUC ROC: 0.991696


Results scoring model
   AUC ROC   = 0.98875
   AUC PR    = 0.987621
   CLL	      = -0.182161
   Precision = 0.952381 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.97561


Total scoring time: 1.065 seconds
Refined model CLL: -0.182161


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.991696
   AUC PR    = 0.297536
   CLL	      = -0.164686
   Precision = 0.20026 at threshold = 0.5
   Recall    = 0.987179
   F1        = 0.332973


Total learning time: 11.213 seconds
Total inference time: 544.943 seconds
AUC ROC: 0.991696
Total revision time: 11.213
Best scored revision CLL: -0.182161


Dataset: 7_yeast_twitter, Fold: 2, Type: Transfer (trRDN-B), Time: 00:19:46
{'AUC ROC': 0.991696, 'AUC PR': 0.297536, 'CLL': -0.164686, 'Precision': [0.20026, 0.5], 'Recall': 0.987179, 'F1': 0.332973, 'Learning time': 11.213, 'Inference time': 544.943, 'parameter_20': {'AUC ROC': 0.984902, 'AUC PR': 0.335983, 'CLL': -0.232814, 'Precision': [0.173252, 0.5], 'Recall': 0.730769, 'F1': 0.280098, 'Learning time': 0.873, 'Inference time': 11.01}}


Amount of data: 25
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
0;true;complex(A, D), complex(C, D).;false;false
0;false;interaction(E, A), interaction(E, E).;true;true
0;false,true;interaction(A, E).;true;true
0;false,true,true;complex(A, F).;false;false
0;false,true,false;complex(E, G), location(A, H).;false;false
0;false,false;interaction(A, I), recursion_proteinclass(I, B).;false;true
0;false,false,false;location(A, J), complex(A, K).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
1;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
1;true,false;interaction(E, C), interaction(E, E).;false;true
1;true,false,false;interaction(A, F), enzyme(F, G).;false;false
1;false;interaction(A, H), recursion_proteinclass(H, B).;true;true
1;false,true;enzyme(H, I), interaction(H, J).;false;false
1;false,false;interaction(A, A).;false;true
1;false,false,false;complex(A, K), interaction(L, A).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(C, D).;false;true
2;true,false;interaction(E, A), interaction(A, E).;false;true
2;true,false,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(A, G), enzyme(G, H).;true;true
2;false,false,true;interaction(G, I), phenotype(G, J).;false;false
2;false,false,false;phenotype(A, K).;false;false
3;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
3;true;interaction(D, A), interaction(D, C).;false;true
3;true,false;complex(C, E).;false;true
3;true,false,false;interaction(A, F), interaction(F, F).;false;false
3;false;interaction(A, A).;false;true
3;false,false;interaction(A, G), interaction(H, A).;true;true
3;false,false,true;complex(H, I), complex(G, I).;false;false
3;false,false,false;complex(A, J), phenotype(A, K).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
4;false;interaction(A, D), complex(D, E).;true;true
4;false,true;complex(A, E), location(A, F).;true;true
4;false,true,true;interaction(D, G), interaction(G, D).;false;false
4;false,true,false;enzyme(D, H), phenotype(A, I).;false;false
4;false,false;interaction(J, A), interaction(K, J).;true;true
4;false,false,true;recursion_proteinclass(K, B).;false;false
4;false,false,false;interaction(A, L), phenotype(L, M).;false;false
5;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
5;true;interaction(A, D), complex(D, E).;true;false
5;true,true;complex(C, F), complex(A, F).;false;true
5;true,true,false;interaction(C, C).;false;false
5;false;interaction(A, A).;false;true
5;false,false;interaction(G, A), interaction(G, G).;true;true
5;false,false,true;complex(G, H), location(A, I).;false;false
5;false,false,false;interaction(A, J), interaction(K, A).;false;false
6;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
6;false;interaction(D, A), enzyme(D, E).;true;true
6;false,true;enzyme(A, E).;true;true
6;false,true,true;interaction(A, F), interaction(D, F).;false;false
6;false,true,false;interaction(G, D), enzyme(G, H).;false;false
6;false,false;complex(A, I), location(A, J).;true;true
6;false,false,true;location(K, J), recursion_proteinclass(K, B).;false;false
6;false,false,false;phenotype(A, L).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
7;false;interaction(D, A), interaction(D, D).;true;true
7;false,true;complex(D, E), complex(A, E).;true;true
7;false,true,true;interaction(A, F).;false;false
7;false,true,false;enzyme(A, G), phenotype(D, H).;false;false
7;false,false;complex(A, I), interaction(A, J).;true;true
7;false,false,true;interaction(J, K), recursion_proteinclass(K, B).;false;false
7;false,false,false;interaction(A, L), interaction(L, L).;false;false
8;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
8;false;complex(A, D).;true;true
8;false,true;interaction(E, A), complex(E, D).;true;true
8;false,true,true;interaction(E, E).;false;false
8;false,true,false;complex(F, D), recursion_proteinclass(F, B).;false;false
8;false,false;interaction(G, A), phenotype(G, H).;true;true
8;false,false,true;interaction(A, A).;false;false
8;false,false,false;phenotype(A, I).;false;false
9;;proteinclass(A, B) :- interaction(A, C), interaction(C, D).;true;true
9;true;recursion_proteinclass(D, B), interaction(D, E).;false;false
9;false;phenotype(A, F).;true;true
9;false,true;phenotype(G, F), recursion_proteinclass(G, B).;true;false
9;false,true,true;interaction(H, G), interaction(H, A).;false;false
9;false,false;interaction(A, I), location(A, J).;true;true
9;false,false,true;location(I, K).;false;false
9;false,false,false;interaction(L, A), location(L, M).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), tweets(C, D) )
%   | then return 0.7672398441904213;  // std dev = 0.953, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0.8581489350995121;  // std dev = 4.21e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, E), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.06648226843284567;  // std dev = 1.990, 24.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=5 */
%   | | | else return 0.23314893509951226;  // std dev = 1.369, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.664791577119983;  // std dev = 0.960, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | else if ( follows(C, E), follows(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, A) )
%   | | | then return 0.7374506595744976;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(H, G) )
%   | | then return 0.7194734122109545;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, I), follows(A, J) )
%   | | | then return 0.06725312818283231;  // std dev = 1.978, 23.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=5 */
%   | | | else return 0.16317063750887448;  // std dev = 1.409, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C) )
%   | then return 0.5136497185288583;  // std dev = 0.956, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A) )
%   | | then if ( follows(F, E) )
%   | | | then return 0.0831341866466918;  // std dev = 2.115, 26.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.24070508158813947;  // std dev = 0.469, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(C, D) )
%   | then return 0.3568888351684877;  // std dev = 0.942, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else if ( tweets(C, E) )
%   | | then return 0.4456682318867695;  // std dev = 0.036, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(F, A), follows(F, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.4411268050740279;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), follows(A, H) )
%   | | then if ( tweets(H, I), tweets(G, I) )
%   | | | then return 0.08086266630390196;  // std dev = 2.095, 25.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, J) )
%   | | | then return 0.09537775979340535;  // std dev = 1.012, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0.26187293023754177;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.2935225409890434;  // std dev = 0.951, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   else if ( follows(D, A), tweets(D, E) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(F, D), follows(D, F) )
%   | | | then return 0.027825046768212573;  // std dev = 1.758, 21.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.18398963672870325;  // std dev = 0.500, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.5079707590157363;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return -0.2489766522842049;  // std dev = 0.080, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( follows(I, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.501023347715795;  // std dev = 0.823, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(D, E) )
%   | then if ( tweets(C, F), tweets(A, F) )
%   | | then return 0.22862211802999513;  // std dev = 0.990, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else if ( follows(C, C) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.33422338705489907;  // std dev = 0.210, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.3831770155194685;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G), follows(G, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(H, A), follows(A, I) )
%   | | | then return 0.017544919281947235;  // std dev = 1.968, 23.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=5 */
%   | | | else return 0.09903526940181061;  // std dev = 1.241, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.21524651839391;  // std dev = 1.021, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   else if ( follows(A, D) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then return -0.09645776007640594;  // std dev = 1.343, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | | else if ( follows(D, F) )
%   | | | then return 0.16034985691455356;  // std dev = 1.376, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.3747649787336723;  // std dev = 0.812, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( tweets(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.24425373516698934;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return -0.2201186915648653;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.17510717010836652;  // std dev = 1.015, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   else if ( follows(A, D), follows(D, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E), follows(F, A) )
%   | | then if ( follows(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.600278530118749;  // std dev = 0.691, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.1777397497140355;  // std dev = 0.039, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( follows(H, A), follows(H, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.009314461495204313;  // std dev = 1.383, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1454967066631905;  // std dev = 1.010, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   else if ( tweets(A, D) )
%   | then if ( follows(A, E), tweets(E, D) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.008682860145394603;  // std dev = 1.686, 23.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=5 */
%   | | else if ( tweets(F, D), recursion_accounttype(F, B) )
%   | | | then return 0.12195664345393886;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return -0.15938203032946774;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.042757439939945775;  // std dev = 1.137, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(D, C) )
%   then if ( recursion_accounttype(D, B), follows(E, D) )
%   | then return 0.24646549896049097;  // std dev = 1.504, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | else return -0.16882680626320284;  // std dev = 0.163, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else if ( recursion_accounttype(F, B) )
%   | then if ( follows(F, G), follows(A, G) )
%   | | then return 0.4298321014521059;  // std dev = 0.283, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(H, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, I) )
%   | | | then return -0.28956668195113716;  // std dev = 0.167, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.984305
   AUC PR    = 0.338792
   CLL	      = -0.223232
   Precision = 0.32948 at threshold = 0.5
   Recall    = 0.730769
   F1        = 0.454183


Total learning time: 0.904 seconds
Total inference time: 10.996 seconds
AUC ROC: 0.984305


Results scoring model
   AUC ROC   = 0.9776
   AUC PR    = 0.97024
   CLL	      = -0.311377
   Precision = 0.952381 at threshold = 0.5
   Recall    = 0.8
   F1        = 0.869565


Total scoring time: 0.497 seconds
Parameter learned model CLL: -0.311377


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'tweets(A, D), tweets(C, D)', 'false': 'follows(A, E), follows(E, E)', 'false,false': 'follows(F, A), recursion_accounttype(F, B)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.953, 1, 10], 'true,false': [4.21e-08, 0, 5], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 2], 'false,false,false,true': [1.99, 19, 5], 'false,false,false,false': [1.369, 5, 3]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'true,false': 'follows(C, E), follows(E, E)', 'true,false,false': 'follows(F, A)', 'false': 'follows(G, A), recursion_accounttype(G, B)', 'false,true': 'follows(H, G)', 'false,false': 'follows(A, A)', 'false,false,false': 'tweets(A, I), follows(A, J)'}, {'true,true': [0.96, 1, 14], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 2], 'false,true,false': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [1.978, 18, 5], 'false,false,false,false': [1.409, 6, 3]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A)', 'false,false,true': 'follows(F, E)'}, {'true,true': [0.956, 1, 14], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [2.115, 19, 7], 'false,false,true,false': [0.0, 0, 0], 'false,false,false': [0.469, 5, 4]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(A, D), follows(C, D)', 'true,false': 'tweets(C, E)', 'true,false,false': 'follows(F, A), follows(F, F)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), follows(A, H)', 'false,false,true': 'tweets(H, I), tweets(G, I)', 'false,false,false': 'tweets(A, J)'}, {'true,true': [0.942, 1, 9], 'true,false,true': [0.036, 0, 4], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [0.0, 0, 1], 'false,true': [0.0, 0, 0], 'false,false,true,true': [2.095, 18, 7], 'false,false,true,false': [0.0, 0, 0], 'false,false,false,true': [1.012, 4, 2], 'false,false,false,false': [1.0, 2, 2]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(D, A), tweets(D, E)', 'false,true': 'tweets(A, E)', 'false,true,true': 'follows(F, D), follows(D, F)', 'false,false': 'follows(A, G), follows(G, H)', 'false,false,true': 'recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A)'}, {'true': [0.951, 1, 14], 'false,true,true,true': [1.758, 16, 5], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.5, 3, 2], 'false,false,true,true': [0.0, 0, 1], 'false,false,true,false': [0.08, 4, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.823, 1, 3]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), tweets(D, E)', 'true,true': 'tweets(C, F), tweets(A, F)', 'true,true,false': 'follows(C, C)', 'false': 'follows(A, A)', 'false,false': 'follows(A, G), follows(G, G)', 'false,false,false': 'follows(H, A), follows(A, I)'}, {'true,true,true': [0.99, 1, 9], 'true,true,false,true': [0.0, 0, 0], 'true,true,false,false': [0.21, 0, 5], 'true,false': [0.0, 0, 1], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [1.968, 18, 5], 'false,false,false,false': [1.241, 6, 5]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(A, D)', 'false,true': 'follows(E, A), follows(E, D)', 'false,true,false': 'follows(D, F)', 'false,false': 'tweets(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true': [1.021, 1, 15], 'false,true,true': [1.343, 17, 2], 'false,true,false,true': [1.376, 5, 3], 'false,true,false,false': [0.812, 1, 3], 'false,false,true,true': [0.0, 0, 2], 'false,false,true,false': [0.0, 1, 0], 'false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, D)', 'false,false': 'tweets(A, E), follows(F, A)', 'false,false,true': 'follows(G, F), recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A), follows(H, H)'}, {'true': [1.015, 1, 15], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.691, 0, 6], 'false,false,true,false': [0.039, 16, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.383, 8, 4]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,true': 'follows(A, E), tweets(E, D)', 'false,true,true': 'follows(E, E)', 'false,true,false': 'tweets(F, D), recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(A, A)'}, {'true': [1.01, 1, 15], 'false,true,true,true': [0.0, 0, 0], 'false,true,true,false': [1.686, 18, 5], 'false,true,false,true': [0.0, 0, 2], 'false,true,false,false': [0.0, 1, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.137, 5, 3], 'false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(C, A), follows(D, C)', 'true': 'recursion_accounttype(D, B), follows(E, D)', 'false': 'recursion_accounttype(F, B)', 'false,true': 'follows(F, G), follows(A, G)', 'false,false': 'follows(H, A)', 'false,false,false': 'follows(A, I)'}, {'true,true': [1.504, 1, 21], 'true,false': [0.163, 19, 0], 'false,true,true': [0.283, 0, 4], 'false,true,false': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.167, 5, 0], 'false,false,false,false': [0.0, 0, 0]}]]
[{'': [0.05859374999999978, 0.20761245674740494], 'false': [nan, 0.20761245674740494], 'false,false': [0.0, 0.1874999999999999], 'false,false,false': [0.16493055555555544, 0.2343749999999999], 'true': [0.0826446280991734, 3.552713678800501e-16]}, {'': [0.057960947283660025, 0.1968781446234391], 'false': [0.0, 0.18618718072431978], 'false,false': [nan, 0.18618718072431975], 'false,false,false': [0.1701323251417769, 0.22060363492404925], 'true': [0.0614950515444584, 0.0], 'false,true': [0.0, nan], 'true,false': [nan, 0.0], 'true,false,false': [0.0, nan]}, {'': [0.060988290904501564, 0.18901277817307557], 'false': [nan, 0.1890127781730756], 'false,false': [0.17199251344316208, 0.2197383386873025], 'false,false,true': [0.17199251344316208, nan], 'true': [0.060988290904501564, nan]}, {'': [0.060973414900500816, 0.18645452654246447], 'false': [nan, 0.18645452654246444], 'false,false': [0.17550254287458406, 0.2091349535724209], 'false,false,false': [0.17080333257487945, 0.25], 'false,false,true': [0.17550254287458406, nan], 'true': [0.08875544381734571, 0.000261802259549615], 'true,false': [0.00032312791293781506, 0.0], 'true,false,false': [nan, 0.0]}, {'': [0.0603402142457756, 0.18459540378433692], 'false': [0.1708218078316946, 0.2152980333442258], 'false,false': [0.09294535046423666, 0.169164135861454], 'false,true': [0.1471693728200669, 0.2504645363302187], 'false,false,false': [nan, 0.169164135861454], 'false,true,true': [0.1471693728200669, nan], 'false,false,true': [0.0, 0.0015878113855593498]}, {'': [0.06711100585784655, 0.16063862759162437], 'false': [nan, 0.1606386275916244], 'false,false': [nan, 0.16063862759162437], 'false,false,false': [0.1683676573530173, 0.139985706213117], 'true': [0.070694729753869, 0.0], 'true,true': [0.09792842222155465, 0.008792926138717516], 'true,true,false': [nan, 0.008792926138717516]}, {'': [0.06513661163430945, 0.15958796928499874], 'false': [0.17008897583380717, 0.04792038904640705], 'false,true': [0.09493231518299658, 0.2230360870240847], 'false,true,false': [0.23674297676166017, 0.1649730779057955], 'false,false': [0.04792038904640705, nan], 'false,false,true': [0.0, 0.0]}, {'': [0.06439187247327699, 0.1481705509740824], 'false': [nan, 0.1481705509740824], 'false,false': [0.14181105726827845, 0.1594209098740581], 'false,false,false': [nan, 0.15942090987405808], 'false,false,true': [0.07948744346533247, 9.720051148362496e-05]}, {'': [0.06373263191121606, 0.12335832514763256], 'false': [0.11135890579661509, 0.16158190852322998], 'false,false': [0.16158190852322998, nan], 'false,false,true': [nan, 0.16158190852322998], 'false,true': [0.12354588653851241, 0.017589210970268016], 'false,true,true': [nan, 0.12354588653851241], 'false,true,false': [0.0, 0.0]}, {'': [0.09869059007489264, 0.13978261240844037], 'false': [0.020026351946785537, 0.005572238750179226], 'true': [0.10278681762366185, 0.0014039465085282409], 'false,true': [0.020026351946785537, nan], 'false,false': [nan, 0.005572238750179226], 'false,false,false': [0.005572238750179226, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
0;true;tweets(A, D), tweets(C, D).;true;true
0;false;follows(F, A), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
1;true;follows(C, D), recursion_accounttype(D, B).;true;true
1;false;follows(G, A), recursion_accounttype(G, B).;true;true
3;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
3;true;follows(A, D), follows(C, D).;true;true
3;true,false;tweets(C, E).;true;true
4;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
4;false;follows(D, A), tweets(D, E).;true;true
4;false,false;follows(A, G), follows(G, H).;true;true
4;false,false,true;recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
5;true;follows(D, A), tweets(D, E).;true;true
6;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
6;false;follows(A, D).;true;true
6;false,false;recursion_accounttype(H, B).;true;true
7;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
7;false;tweets(A, E), follows(F, A).;true;true
7;false,true;follows(G, F), recursion_accounttype(G, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;tweets(A, D).;true;true
8;false,true;follows(A, E), tweets(E, D).;true;true
8;false,true,false;tweets(F, D), recursion_accounttype(F, B).;true;true
9;;accounttype(A, B) :- follows(C, A), follows(D, C).;true;true
9;true;recursion_accounttype(D, B), follows(E, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), tweets(C, D) )
%   | then return 0.7672398441904213;  // std dev = 0.287, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0.8581489350995121;  // std dev = 4.21e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(A, F), follows(F, G) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.14185106490048774;  // std dev = 1.05e-08, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | else return 0.4581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(F, A) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.6263395484633865;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.7254658279988022;  // std dev = 0.015, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.7374506595744976;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | else return 0.3927941835770488;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A), tweets(A, D) )
%   | then if ( follows(A, E), follows(C, E) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.5912567256614852;  // std dev = 0.040, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.266895964556952;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.5852750108422851;  // std dev = 0.037, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.562531810760819;  // std dev = 0.022, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, F), follows(F, G) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.5553664367462845;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.11231637819360638;  // std dev = 1.29e-08, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else if ( follows(A, H) )
%   | | then return 0.47092546969114213;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.2772194477279037;  // std dev = 0.681, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(C, D) )
%   | then return 0.36576086376515005;  // std dev = 0.280, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else if ( tweets(C, E) )
%   | | then return 0.4708491002467005;  // std dev = 0.031, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.4102583786191064;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, F), follows(F, G) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.42168298620041683;  // std dev = 0.022, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.10159632948783635;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else return 0.2262281241192517;  // std dev = 1.071, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then return 0.2836394036665191;  // std dev = 0.269, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0.3503499905458377;  // std dev = 0.042, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(F, A), tweets(F, G) )
%   | then if ( tweets(A, H), follows(A, I) )
%   | | then if ( tweets(J, H), recursion_accounttype(J, B) )
%   | | | then return 0.321956828154731;  // std dev = 0.014, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.09269127618926094;  // std dev = 7.45e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else return -0.06973496551972633;  // std dev = 0.506, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( follows(A, K), follows(K, L) )
%   | | then if ( recursion_accounttype(L, B) )
%   | | | then return 0.33694896817807585;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.31264490923927546;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(D, E) )
%   | then return 0.2305202548060809;  // std dev = 0.232, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | else return 0.26622327875828866;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, F), follows(F, G) )
%   | then if ( follows(G, A), follows(F, A) )
%   | | then return -0.08557176545832708;  // std dev = 0.003, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( recursion_accounttype(G, B) )
%   | | | then return 0.2703477127442208;  // std dev = 0.072, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.08518475138839687;  // std dev = 3.73e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( follows(A, H) )
%   | | then return 0.23481926178235715;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.07135207034455131;  // std dev = 0.545, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.25525923333532136;  // std dev = 0.085, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.0462606019895172;  // std dev = 0.776, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.23074654306762502;  // std dev = 0.018, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.21783190281543155;  // std dev = 0.009, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, F) )
%   | then if ( follows(A, G), follows(G, H) )
%   | | then if ( follows(H, A), follows(G, A) )
%   | | | then return -0.079109017619551;  // std dev = 0.003, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return 0.03638998908636707;  // std dev = 0.529, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
%   | | else return 0.17664301905372315;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.2794094216620884;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return -0.39079011901287697;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then return 0.13073693960870228;  // std dev = 0.285, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else return 0.18195886399547237;  // std dev = 0.008, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.19380295796760436;  // std dev = 0.037, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( tweets(A, F), follows(G, A) )
%   | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | then return 0.20922645898699796;  // std dev = 0.030, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.08960250485520006;  // std dev = 0.055, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( follows(I, A) )
%   | | | then return 0.011567788759851844;  // std dev = 0.299, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.08145842130793808;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.13409474225542395;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then return 0.10790915428135833;  // std dev = 0.287, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else return 0.15642508765364163;  // std dev = 0.007, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.1653746542314927;  // std dev = 0.032, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G), tweets(G, F) )
%   | | then if ( follows(H, A), follows(A, H) )
%   | | | then return -0.016096415980075156;  // std dev = 0.420, 18.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=4 */
%   | | | else return -0.10406554907000709;  // std dev = 0.711, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else if ( tweets(I, F), recursion_accounttype(I, B) )
%   | | | then return 0.19216105931560723;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return -0.2840652983436961;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( follows(J, A) )
%   | | then return 0.010395379694464545;  // std dev = 0.298, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.13866821402502055;  // std dev = 0.428, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(D, C) )
%   then if ( recursion_accounttype(D, B), follows(E, D) )
%   | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( tweets(A, G), tweets(F, G) )
%   | | | then return 0.09544193267904333;  // std dev = 0.865, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.1403684422865063;  // std dev = 0.030, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.18279922042918986;  // std dev = 0.034, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then return -0.06796896663071529;  // std dev = 0.012, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else return -0.11472167296926528;  // std dev = 0.133, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( follows(A, J), follows(J, K) )
%   | then return -0.034773438270043686;  // std dev = 0.191, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.09946750569533633;  // std dev = 0.835, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */


Results
   AUC ROC   = 0.991205
   AUC PR    = 0.297439
   CLL	      = -0.180388
   Precision = 0.143382 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.250804


Total learning time: 10.066 seconds
Total inference time: 520.699 seconds
AUC ROC: 0.991205


Results scoring model
   AUC ROC   = 0.9936
   AUC PR    = 0.993513
   CLL	      = -0.179953
   Precision = 0.925926 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.961538


Total scoring time: 1.253 seconds
Refined model CLL: -0.179953


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.991205
   AUC PR    = 0.297439
   CLL	      = -0.180388
   Precision = 0.143382 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.250804


Total learning time: 12.72 seconds
Total inference time: 520.699 seconds
AUC ROC: 0.991205
Total revision time: 12.72
Best scored revision CLL: -0.179953


Dataset: 7_yeast_twitter, Fold: 2, Type: Transfer (trRDN-B), Time: 00:28:51
{'AUC ROC': 0.991205, 'AUC PR': 0.297439, 'CLL': -0.180388, 'Precision': [0.143382, 0.5], 'Recall': 1.0, 'F1': 0.250804, 'Learning time': 12.72, 'Inference time': 520.699, 'parameter_25': {'AUC ROC': 0.984305, 'AUC PR': 0.338792, 'CLL': -0.223232, 'Precision': [0.32948, 0.5], 'Recall': 0.730769, 'F1': 0.454183, 'Learning time': 0.904, 'Inference time': 10.996}}


Starting fold 1

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos	 examples: 126
Target test neg examples: 16128

Amount of data: 5
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
0;true;complex(A, D), complex(C, D).;false;false
0;false;interaction(E, A), interaction(E, E).;true;true
0;false,true;interaction(A, E).;true;true
0;false,true,true;complex(A, F).;false;false
0;false,true,false;complex(E, G), location(A, H).;false;false
0;false,false;interaction(A, I), recursion_proteinclass(I, B).;false;true
0;false,false,false;location(A, J), complex(A, K).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
1;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
1;true,false;interaction(E, C), interaction(E, E).;false;true
1;true,false,false;interaction(A, F), enzyme(F, G).;false;false
1;false;interaction(A, H), recursion_proteinclass(H, B).;true;true
1;false,true;enzyme(H, I), interaction(H, J).;false;false
1;false,false;interaction(A, A).;false;true
1;false,false,false;complex(A, K), interaction(L, A).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(C, D).;false;true
2;true,false;interaction(E, A), interaction(A, E).;false;true
2;true,false,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(A, G), enzyme(G, H).;true;true
2;false,false,true;interaction(G, I), phenotype(G, J).;false;false
2;false,false,false;phenotype(A, K).;false;false
3;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
3;true;interaction(D, A), interaction(D, C).;false;true
3;true,false;complex(C, E).;false;true
3;true,false,false;interaction(A, F), interaction(F, F).;false;false
3;false;interaction(A, A).;false;true
3;false,false;interaction(A, G), interaction(H, A).;true;true
3;false,false,true;complex(H, I), complex(G, I).;false;false
3;false,false,false;complex(A, J), phenotype(A, K).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
4;false;interaction(A, D), complex(D, E).;true;true
4;false,true;complex(A, E), location(A, F).;true;true
4;false,true,true;interaction(D, G), interaction(G, D).;false;false
4;false,true,false;enzyme(D, H), phenotype(A, I).;false;false
4;false,false;interaction(J, A), interaction(K, J).;true;true
4;false,false,true;recursion_proteinclass(K, B).;false;false
4;false,false,false;interaction(A, L), phenotype(L, M).;false;false
5;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
5;true;interaction(A, D), complex(D, E).;true;false
5;true,true;complex(C, F), complex(A, F).;false;true
5;true,true,false;interaction(C, C).;false;false
5;false;interaction(A, A).;false;true
5;false,false;interaction(G, A), interaction(G, G).;true;true
5;false,false,true;complex(G, H), location(A, I).;false;false
5;false,false,false;interaction(A, J), interaction(K, A).;false;false
6;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
6;false;interaction(D, A), enzyme(D, E).;true;true
6;false,true;enzyme(A, E).;true;true
6;false,true,true;interaction(A, F), interaction(D, F).;false;false
6;false,true,false;interaction(G, D), enzyme(G, H).;false;false
6;false,false;complex(A, I), location(A, J).;true;true
6;false,false,true;location(K, J), recursion_proteinclass(K, B).;false;false
6;false,false,false;phenotype(A, L).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
7;false;interaction(D, A), interaction(D, D).;true;true
7;false,true;complex(D, E), complex(A, E).;true;true
7;false,true,true;interaction(A, F).;false;false
7;false,true,false;enzyme(A, G), phenotype(D, H).;false;false
7;false,false;complex(A, I), interaction(A, J).;true;true
7;false,false,true;interaction(J, K), recursion_proteinclass(K, B).;false;false
7;false,false,false;interaction(A, L), interaction(L, L).;false;false
8;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
8;false;complex(A, D).;true;true
8;false,true;interaction(E, A), complex(E, D).;true;true
8;false,true,true;interaction(E, E).;false;false
8;false,true,false;complex(F, D), recursion_proteinclass(F, B).;false;false
8;false,false;interaction(G, A), phenotype(G, H).;true;true
8;false,false,true;interaction(A, A).;false;false
8;false,false,false;phenotype(A, I).;false;false
9;;proteinclass(A, B) :- interaction(A, C), interaction(C, D).;true;true
9;true;recursion_proteinclass(D, B), interaction(D, E).;false;false
9;false;phenotype(A, F).;true;true
9;false,true;phenotype(G, F), recursion_proteinclass(G, B).;true;false
9;false,true,true;interaction(H, G), interaction(H, A).;false;false
9;false,false;interaction(A, I), location(A, J).;true;true
9;false,false,true;location(I, K).;false;false
9;false,false,false;interaction(L, A), location(L, M).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), tweets(C, D) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G) )
%   | | | then return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F), follows(G, A) )
%   | | | then return -0.1490779674864458;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.4616886523289992;  // std dev = 1.134, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.14950773053388783;  // std dev = 1.245, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.6748409118912899;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(D, C) )
%   | then return 0.41751358415830997;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), follows(F, A) )
%   | | then if ( tweets(F, G), tweets(E, G) )
%   | | | then return -0.1491324927530796;  // std dev = 3.73e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.3587819652534881;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.2559596981084429;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | | else return 0.5987543061522322;  // std dev = 0.104, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, D), tweets(D, E) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(D, F), follows(F, D) )
%   | | | then return 0.0035798711862178425;  // std dev = 0.798, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.23664542791388077;  // std dev = 0.366, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(G, A), follows(H, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.36738938617750516;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), tweets(D, E) )
%   | then if ( tweets(C, F), tweets(A, F) )
%   | | then return 0.25517224256948945;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), follows(G, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, H), follows(I, A) )
%   | | | then return -0.1814908317843349;  // std dev = 0.173, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.3140197655837963;  // std dev = 0.745, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.20975771563253554;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(D, A) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return -0.15722271097764562;  // std dev = 0.156, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, F) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.6357801936516176;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return -0.3642198063483824;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.31670974994368956;  // std dev = 0.063, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(D, A), follows(D, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E), follows(A, F) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.48033893130315;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return -0.14427300886361683;  // std dev = 0.162, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( follows(A, H), follows(H, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.12488481544835969;  // std dev = 0.455, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( tweets(A, D) )
%   | then if ( follows(E, A), tweets(E, D) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.08549222957588028;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( tweets(F, D), recursion_accounttype(F, B) )
%   | | | then return 0.3637733687745397;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return -0.2562429987045692;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.2856471037570326;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.23090630367160594;  // std dev = 0.051, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, D) )
%   then if ( recursion_accounttype(D, B), follows(D, E) )
%   | then return 0.21670670809338563;  // std dev = 0.107, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return -0.13574162277723484;  // std dev = 0.156, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(G, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.13040950967186538;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.925781
   AUC PR    = 0.203219
   CLL	      = -0.253375
   Precision = 0.070758 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.129715


Total learning time: 0.671 seconds
Total inference time: 8.244 seconds
AUC ROC: 0.925781


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.159617
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.373 seconds
Parameter learned model CLL: -0.159617


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'tweets(A, D), tweets(C, D)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F), recursion_accounttype(F, B)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.0, 0, 1], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.894, 4, 1], 'false,false,false,false': [0.866, 1, 3]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, E), recursion_accounttype(E, B)', 'false,false': 'follows(A, A)', 'false,false,false': 'tweets(A, F), follows(G, A)'}, {'true,true': [0.0, 0, 1], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 3, 0], 'false,false,false,false': [1.134, 2, 4]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(A, A)', 'false,false': 'follows(A, E)', 'false,false,true': 'follows(E, F)'}, {'true,true': [0.0, 0, 1], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.245, 5, 3], 'false,false,true,false': [0.0, 0, 0], 'false,false,false': [0.0, 0, 1]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(D, C)', 'false': 'follows(A, A)', 'false,false': 'follows(A, E), follows(F, A)', 'false,false,true': 'tweets(F, G), tweets(E, G)', 'false,false,false': 'tweets(A, H)'}, {'true,true': [0.0, 0, 1], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [3.73e-09, 3, 0], 'false,false,true,false': [0.0, 1, 0], 'false,false,false,true': [0.707, 1, 1], 'false,false,false,false': [0.104, 0, 3]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(A, D), tweets(D, E)', 'false,true': 'tweets(A, E)', 'false,true,true': 'follows(D, F), follows(F, D)', 'false,false': 'follows(G, A), follows(H, G)', 'false,false,false': 'follows(A, I)'}, {'true': [0.0, 0, 1], 'false,true,true,true': [0.798, 4, 1], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.366, 1, 2], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 0, 1]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(A, D), tweets(D, E)', 'true,true': 'tweets(C, F), tweets(A, F)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), follows(G, G)', 'false,false,false': 'follows(A, H), follows(I, A)'}, {'true,true,true': [0.0, 0, 1], 'true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.173, 4, 0], 'false,false,false,false': [0.745, 1, 4]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(A, E), follows(D, E)', 'false,false': 'tweets(A, F)', 'false,false,true': 'recursion_accounttype(G, B)'}, {'true': [0.0, 0, 1], 'false,true,true': [0.156, 4, 0], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 1], 'false,false,true,false': [0.0, 1, 0], 'false,false,false': [0.063, 0, 3]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(D, A), follows(D, D)', 'false,false': 'tweets(A, E), follows(A, F)', 'false,false,true': 'follows(F, G), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, H), follows(H, H)'}, {'true': [0.0, 0, 1], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 1], 'false,false,true,false': [0.162, 4, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.455, 1, 3]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,true': 'follows(E, A), tweets(E, D)', 'false,true,true': 'follows(E, E)', 'false,true,false': 'tweets(F, D), recursion_accounttype(F, B)', 'false,false': 'follows(G, A)', 'false,false,true': 'follows(A, A)'}, {'true': [0.0, 0, 1], 'false,true,true,true': [0.0, 0, 0], 'false,true,true,false': [1.86e-09, 3, 0], 'false,true,false,true': [0.0, 0, 1], 'false,true,false,false': [0.0, 1, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 1, 0], 'false,false,false': [0.051, 0, 3]}], ['accounttype(A, B)', {'': 'follows(A, C), follows(C, D)', 'true': 'recursion_accounttype(D, B), follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,true': 'follows(G, F), follows(G, A)'}, {'true,true': [0.107, 0, 4], 'true,false': [0.156, 5, 0], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 0, 1], 'false,false': [0.0, 0, 0]}]]
[{'': [0.0, 0.24691358024691354], 'false': [nan, 0.24691358024691354], 'false,false': [nan, 0.24691358024691348], 'false,false,false': [0.16000000000000003, 0.18750000000000006], 'true': [0.0, nan]}, {'': [0.0, 0.225875495550843], 'false': [nan, 0.225875495550843], 'false,false': [nan, 0.225875495550843], 'false,false,false': [0.0, 0.21446795536600305], 'true': [0.0, nan]}, {'': [0.0, 0.19935760982803863], 'false': [nan, 0.19935760982803874], 'false,false': [0.19361342756375577, 0.0], 'false,false,true': [0.19361342756375577, nan], 'true': [0.0, nan]}, {'': [0.0, 0.18468309236994507], 'false': [nan, 0.18468309236994507], 'false,false': [0.008241168997443662, 0.13036575628828917], 'false,false,false': [0.25, 0.0036063364922572414], 'false,false,true': [4.625929269271485e-18, 0.0], 'true': [0.0, nan]}, {'': [0.0, 0.13421377671008936], 'false': [0.14250133767927628, 0.0], 'false,true': [0.12724087566698306, 0.13398571995011374], 'false,true,true': [0.12724087566698306, nan], 'false,false': [nan, 0.0], 'false,false,false': [nan, 0.0]}, {'': [0.0, 0.12556710576170987], 'false': [nan, 0.12556710576170985], 'false,false': [nan, 0.12556710576170987], 'false,false,false': [0.007470313191433771, 0.11091976110498751], 'true': [0.0, nan], 'true,true': [0.0, nan]}, {'': [0.0, 0.10377683063122009], 'false': [0.006081167305663528, 0.11026627404018326], 'false,false': [0.25000000000000006, 0.004016254997620317], 'false,false,true': [0.0, 0.0], 'false,true': [0.006081167305663528, nan]}, {'': [0.0, 0.06577336604953186], 'false': [nan, 0.06577336604953186], 'false,false': [0.06768026038951089, 0.051832047525399924], 'false,false,true': [0.0, 0.006572310327110042], 'false,false,false': [nan, 0.051832047525399924]}, {'': [0.0, 0.05131554760524642], 'false': [0.043096260199983534, 0.051974489660596396], 'false,false': [0.0, 0.0025924638659275876], 'false,true': [1.1564823173178713e-18, 0.09610507398549734], 'false,true,false': [0.0, 0.0], 'false,true,true': [nan, 1.1564823173178713e-18], 'false,false,true': [nan, 0.0]}, {'': [0.0346556258351063, 0.0], 'true': [0.0028832015053277954, 0.004864753772935162], 'false': [0.0, nan], 'false,true': [nan, 0.0]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;tweets(A, F), follows(G, A).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(A, E).;true;true
3;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
3;false;follows(A, E), follows(F, A).;true;true
3;false,true;tweets(F, G), tweets(E, G).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(A, D), tweets(D, E).;true;true
5;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
6;false;follows(D, A).;true;true
6;false,false;tweets(A, F).;true;true
6;false,false,true;recursion_accounttype(G, B).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;false;tweets(A, E), follows(A, F).;true;true
7;false,true;follows(F, G), recursion_accounttype(G, B).;true;true
8;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
8;false;tweets(A, D).;true;true
8;false,true;follows(E, A), tweets(E, D).;true;true
8;false,true,false;tweets(F, D), recursion_accounttype(F, B).;true;true
8;false,false;follows(G, A).;true;true
9;;accounttype(A, B) :- follows(A, C), follows(C, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(D, A) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( tweets(A, D), follows(E, A) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.4441086724301469;  // std dev = 1.091, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, D) )
%   | then if ( follows(E, A) )
%   | | then return -0.12992790349511546;  // std dev = 0.061, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.41768704160028536;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.6676870416002854;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.41751358415830997;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, D), follows(E, A) )
%   | then if ( tweets(E, F), tweets(D, F) )
%   | | then return -0.10000008733713411;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.1641497573172157;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0.35715048954204004;  // std dev = 0.882, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, D), tweets(D, E) )
%   | then if ( follows(F, A) )
%   | | then return -0.10422729710133977;  // std dev = 0.045, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.23073575606392538;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.41894758807341514;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( tweets(A, D) )
%   | then return -0.08037955844328046;  // std dev = 0.707, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.2596040631946265;  // std dev = 0.458, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.20975771563253554;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(D, A) )
%   | then return -0.09859373857912648;  // std dev = 0.074, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( tweets(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.4433810499699816;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return -0.5566189500300184;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.3304968184572424;  // std dev = 0.077, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( tweets(A, D), follows(A, E) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then return 0.3383104806511026;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return -0.1574175089612695;  // std dev = 0.301, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.15928798512225392;  // std dev = 0.363, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( tweets(A, D) )
%   | then if ( follows(E, A), tweets(E, D) )
%   | | then return -0.060776983584351074;  // std dev = 1.32e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( tweets(F, D), recursion_accounttype(F, B) )
%   | | | then return 0.2671476265856275;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return -0.38069835478194786;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( follows(G, A) )
%   | | then return -0.1713983643146897;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.23293003825081257;  // std dev = 0.061, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, D) )
%   then if ( follows(E, A) )
%   | then return -0.037319381009807515;  // std dev = 0.207, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.08850434265922003;  // std dev = 0.444, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else return 0.15079726499068435;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */


Results
   AUC ROC   = 0.929596
   AUC PR    = 0.256202
   CLL	      = -0.262278
   Precision = 0.073414 at threshold = 0.5
   Recall    = 0.81746
   F1        = 0.134729


Total learning time: 0.698 seconds
Total inference time: 6.258 seconds
AUC ROC: 0.929596


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.167186
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.365 seconds
Refined model CLL: -0.167186


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.925781
   AUC PR    = 0.203219
   CLL	      = -0.253375
   Precision = 0.070758 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.129715


Total learning time: 2.107 seconds
Total inference time: 8.244 seconds
AUC ROC: 0.925781
Total revision time: 2.107
Best scored revision CLL: -0.159617


Dataset: 7_yeast_twitter, Fold: 1, Type: Transfer (trRDN-B), Time: 00:29:08
{'AUC ROC': 0.925781, 'AUC PR': 0.203219, 'CLL': -0.253375, 'Precision': [0.070758, 0.5], 'Recall': 0.777778, 'F1': 0.129715, 'Learning time': 2.107, 'Inference time': 8.244, 'parameter_5': {'AUC ROC': 0.925781, 'AUC PR': 0.203219, 'CLL': -0.253375, 'Precision': [0.070758, 0.5], 'Recall': 0.777778, 'F1': 0.129715, 'Learning time': 0.671, 'Inference time': 8.244}}


Amount of data: 10
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
0;true;complex(A, D), complex(C, D).;false;false
0;false;interaction(E, A), interaction(E, E).;true;true
0;false,true;interaction(A, E).;true;true
0;false,true,true;complex(A, F).;false;false
0;false,true,false;complex(E, G), location(A, H).;false;false
0;false,false;interaction(A, I), recursion_proteinclass(I, B).;false;true
0;false,false,false;location(A, J), complex(A, K).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
1;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
1;true,false;interaction(E, C), interaction(E, E).;false;true
1;true,false,false;interaction(A, F), enzyme(F, G).;false;false
1;false;interaction(A, H), recursion_proteinclass(H, B).;true;true
1;false,true;enzyme(H, I), interaction(H, J).;false;false
1;false,false;interaction(A, A).;false;true
1;false,false,false;complex(A, K), interaction(L, A).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(C, D).;false;true
2;true,false;interaction(E, A), interaction(A, E).;false;true
2;true,false,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(A, G), enzyme(G, H).;true;true
2;false,false,true;interaction(G, I), phenotype(G, J).;false;false
2;false,false,false;phenotype(A, K).;false;false
3;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
3;true;interaction(D, A), interaction(D, C).;false;true
3;true,false;complex(C, E).;false;true
3;true,false,false;interaction(A, F), interaction(F, F).;false;false
3;false;interaction(A, A).;false;true
3;false,false;interaction(A, G), interaction(H, A).;true;true
3;false,false,true;complex(H, I), complex(G, I).;false;false
3;false,false,false;complex(A, J), phenotype(A, K).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
4;false;interaction(A, D), complex(D, E).;true;true
4;false,true;complex(A, E), location(A, F).;true;true
4;false,true,true;interaction(D, G), interaction(G, D).;false;false
4;false,true,false;enzyme(D, H), phenotype(A, I).;false;false
4;false,false;interaction(J, A), interaction(K, J).;true;true
4;false,false,true;recursion_proteinclass(K, B).;false;false
4;false,false,false;interaction(A, L), phenotype(L, M).;false;false
5;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
5;true;interaction(A, D), complex(D, E).;true;false
5;true,true;complex(C, F), complex(A, F).;false;true
5;true,true,false;interaction(C, C).;false;false
5;false;interaction(A, A).;false;true
5;false,false;interaction(G, A), interaction(G, G).;true;true
5;false,false,true;complex(G, H), location(A, I).;false;false
5;false,false,false;interaction(A, J), interaction(K, A).;false;false
6;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
6;false;interaction(D, A), enzyme(D, E).;true;true
6;false,true;enzyme(A, E).;true;true
6;false,true,true;interaction(A, F), interaction(D, F).;false;false
6;false,true,false;interaction(G, D), enzyme(G, H).;false;false
6;false,false;complex(A, I), location(A, J).;true;true
6;false,false,true;location(K, J), recursion_proteinclass(K, B).;false;false
6;false,false,false;phenotype(A, L).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
7;false;interaction(D, A), interaction(D, D).;true;true
7;false,true;complex(D, E), complex(A, E).;true;true
7;false,true,true;interaction(A, F).;false;false
7;false,true,false;enzyme(A, G), phenotype(D, H).;false;false
7;false,false;complex(A, I), interaction(A, J).;true;true
7;false,false,true;interaction(J, K), recursion_proteinclass(K, B).;false;false
7;false,false,false;interaction(A, L), interaction(L, L).;false;false
8;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
8;false;complex(A, D).;true;true
8;false,true;interaction(E, A), complex(E, D).;true;true
8;false,true,true;interaction(E, E).;false;false
8;false,true,false;complex(F, D), recursion_proteinclass(F, B).;false;false
8;false,false;interaction(G, A), phenotype(G, H).;true;true
8;false,false,true;interaction(A, A).;false;false
8;false,false,false;phenotype(A, I).;false;false
9;;proteinclass(A, B) :- interaction(A, C), interaction(C, D).;true;true
9;true;recursion_proteinclass(D, B), interaction(D, E).;false;false
9;false;phenotype(A, F).;true;true
9;false,true;phenotype(G, F), recursion_proteinclass(G, B).;true;false
9;false,true,true;interaction(H, G), interaction(H, A).;false;false
9;false,false;interaction(A, I), location(A, J).;true;true
9;false,false,true;location(I, K).;false;false
9;false,false,false;interaction(L, A), location(L, M).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), tweets(C, D) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G) )
%   | | | then return -0.04185106490048778;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   | | | else return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.7194734122109544;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F), follows(G, A) )
%   | | | then return -0.136832517440075;  // std dev = 5.27e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.46577046901112285;  // std dev = 1.132, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.5553664367462845;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.1018236259166283;  // std dev = 1.403, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | | else return -0.12145923874432712;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.5948924904156047;  // std dev = 0.056, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(D, C) )
%   | then return 0.41751358415830997;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( tweets(C, E) )
%   | | then return 0.41751358415830997;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F), follows(G, A) )
%   | | then if ( tweets(G, H), tweets(F, H) )
%   | | | then return -0.049893459345156946;  // std dev = 0.620, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | | else return -0.22894841538883892;  // std dev = 0.170, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.3447020440869084;  // std dev = 0.718, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.611707429795303;  // std dev = 0.097, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, D), tweets(D, E) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(D, F), follows(F, D) )
%   | | | then return 0.008670642276910357;  // std dev = 1.000, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | | else return -0.08874212473822549;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.2358379334538722;  // std dev = 0.378, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(G, A), follows(H, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.3280061386868669;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.38212950185572003;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), tweets(D, E) )
%   | then if ( tweets(C, F), tweets(A, F) )
%   | | then return 0.3264682402356437;  // std dev = 0.247, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.2601434665365605;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), follows(G, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, H), follows(I, A) )
%   | | | then return -0.14763687831692948;  // std dev = 0.219, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0.3232096180790617;  // std dev = 0.744, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.2466664681213536;  // std dev = 0.233, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(D, A) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return -0.14177177316667128;  // std dev = 0.190, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( follows(F, D) )
%   | | | then return -0.09193381981891532;  // std dev = 0.029, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.6451241263359037;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return -0.35487587366409634;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.32245167470240393;  // std dev = 0.063, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.20563246203252825;  // std dev = 0.212, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(D, A), follows(D, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E), follows(A, F) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.48813985992567277;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return -0.11577812543109421;  // std dev = 0.175, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( follows(A, H), follows(H, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.12111879111454908;  // std dev = 0.481, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.1753762422259355;  // std dev = 0.192, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( tweets(A, D) )
%   | then if ( follows(E, A), tweets(E, D) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.08980451285647277;  // std dev = 0.004, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( tweets(F, D), recursion_accounttype(F, B) )
%   | | | then return 0.36921421387570985;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return -0.15725586890782453;  // std dev = 0.139, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.31310188843491;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.23523523817205202;  // std dev = 0.050, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, D) )
%   then if ( recursion_accounttype(D, B), follows(D, E) )
%   | then return 0.20049034438727392;  // std dev = 0.206, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return -0.11733710710536778;  // std dev = 0.195, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(G, A) )
%   | | then return 0.12641429648464275;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.13416033317669152;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, H) )
%   | | then return -0.0506692495788673;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.937249
   AUC PR    = 0.21277
   CLL	      = -0.253018
   Precision = 0.072143 at threshold = 0.5
   Recall    = 0.801587
   F1        = 0.132372


Total learning time: 0.805 seconds
Total inference time: 8.629 seconds
AUC ROC: 0.937249


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.139388
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.412 seconds
Parameter learned model CLL: -0.139388


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'tweets(A, D), tweets(C, D)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F), recursion_accounttype(F, B)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.0, 0, 6], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.949, 9, 1], 'false,false,false,false': [0.866, 1, 3]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, E), recursion_accounttype(E, B)', 'false,false': 'follows(A, A)', 'false,false,false': 'tweets(A, F), follows(G, A)'}, {'true,true': [2.11e-08, 0, 6], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [5.27e-09, 8, 0], 'false,false,false,false': [1.132, 2, 4]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(A, A)', 'false,false': 'follows(A, E)', 'false,false,true': 'follows(E, F)'}, {'true,true': [1.05e-08, 0, 3], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.403, 9, 4], 'false,false,true,false': [0.0, 1, 0], 'false,false,false': [0.056, 0, 3]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(D, C)', 'true,false': 'tweets(C, E)', 'false': 'follows(A, A)', 'false,false': 'follows(A, F), follows(G, A)', 'false,false,true': 'tweets(G, H), tweets(F, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true': [0.0, 0, 2], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.62, 7, 1], 'false,false,true,false': [0.17, 2, 0], 'false,false,false,true': [0.718, 1, 3], 'false,false,false,false': [0.097, 0, 3]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(A, D), tweets(D, E)', 'false,true': 'tweets(A, E)', 'false,true,true': 'follows(D, F), follows(F, D)', 'false,false': 'follows(G, A), follows(H, G)', 'false,false,true': 'recursion_accounttype(H, B)', 'false,false,false': 'follows(A, I)'}, {'true': [0.0, 0, 3], 'false,true,true,true': [1.0, 8, 2], 'false,true,true,false': [0.0, 1, 0], 'false,true,false': [0.378, 1, 2], 'false,false,true,true': [0.0, 0, 2], 'false,false,true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 0, 1]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(A, D), tweets(D, E)', 'true,true': 'tweets(C, F), tweets(A, F)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), follows(G, G)', 'false,false,false': 'follows(A, H), follows(I, A)'}, {'true,true,true': [0.247, 0, 4], 'true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 2], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.219, 9, 0], 'false,false,false,false': [0.744, 1, 4]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(A, E), follows(D, E)', 'false,true,false': 'follows(F, D)', 'false,false': 'tweets(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true': [0.233, 0, 6], 'false,true,true': [0.19, 7, 0], 'false,true,false,true': [0.029, 2, 0], 'false,true,false,false': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 1], 'false,false,true,false': [0.0, 1, 0], 'false,false,false': [0.063, 0, 3]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(D, A), follows(D, D)', 'false,false': 'tweets(A, E), follows(A, F)', 'false,false,true': 'follows(F, G), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, H), follows(H, H)'}, {'true': [0.212, 0, 6], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 1], 'false,false,true,false': [0.175, 9, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.481, 1, 3]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,true': 'follows(E, A), tweets(E, D)', 'false,true,true': 'follows(E, E)', 'false,true,false': 'tweets(F, D), recursion_accounttype(F, B)', 'false,false': 'follows(G, A)', 'false,false,true': 'follows(A, A)'}, {'true': [0.192, 0, 6], 'false,true,true,true': [0.0, 0, 0], 'false,true,true,false': [0.004, 7, 0], 'false,true,false,true': [0.0, 0, 1], 'false,true,false,false': [0.139, 2, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 1, 0], 'false,false,false': [0.05, 0, 3]}], ['accounttype(A, B)', {'': 'follows(A, C), follows(C, D)', 'true': 'recursion_accounttype(D, B), follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,true': 'follows(G, F), follows(G, A)', 'false,false': 'follows(A, H)'}, {'true,true': [0.206, 0, 7], 'true,false': [0.195, 9, 0], 'false,true,true': [0.0, 0, 2], 'false,true,false': [0.0, 0, 1], 'false,false,true': [0.0, 1, 0], 'false,false,false': [0.0, 0, 0]}]]
[{'': [-1.4802973661668753e-16, 0.2040816326530612], 'false': [nan, 0.2040816326530612], 'false,false': [nan, 0.2040816326530611], 'false,false,false': [0.09000000000000005, 0.18750000000000006], 'true': [-1.4802973661668753e-16, nan]}, {'': [7.401486830834377e-17, 0.18047146379714754], 'false': [nan, 0.18047146379714746], 'false,false': [nan, 0.18047146379714743], 'false,false,false': [3.469446951953614e-18, 0.21359701974768563], 'true': [7.401486830834377e-17, nan]}, {'': [3.700743415417188e-17, 0.1567918573239734], 'false': [nan, 0.1567918573239734], 'false,false': [0.14399720590193804, 0.003124617837340008], 'false,false,true': [0.15151282564458365, 0.0], 'true': [3.700743415417188e-17, nan]}, {'': [-3.700743415417188e-17, 0.13731511625974166], 'false': [nan, 0.13731511625974166], 'false,false': [0.046448374891920934, 0.09250841480992635], 'false,false,false': [0.12899821552044527, 0.003117132340307638], 'false,false,true': [0.04805640014160123, 0.01436773206615586], 'true': [0.0, 0.0], 'true,false': [0.0, nan]}, {'': [0.0, 0.105139471442686], 'false': [0.11210413925784593, 0.0006509640979350251], 'false,true': [0.09176864407607432, 0.1428979496167551], 'false,true,true': [0.10008284964935947, 0.0], 'false,false': [0.0, 0.0], 'false,false,true': [0.0, nan], 'false,false,false': [nan, 0.0]}, {'': [0.011143788701143372, 0.09386498320113186], 'false': [nan, 0.09386498320113183], 'false,false': [nan, 0.09386498320113186], 'false,false,false': [0.005346106032685665, 0.11067983292466207], 'true': [0.015249357849636838, 0.0], 'true,true': [0.015249357849636838, nan]}, {'': [0.009055784917055535, 0.07570030865902173], 'false': [0.004528838958582693, 0.10989389905642359], 'false,false': [0.25, 0.003911807996836529], 'false,false,true': [0.0, 0.0], 'false,true': [0.005150294612175544, 0.00042188293131310145], 'false,true,false': [0.00042188293131310145, nan]}, {'': [0.007479636373891522, 0.04853901940208628], 'false': [nan, 0.04853901940208628], 'false,false': [0.0359027398811063, 0.05787682057331322], 'false,false,false': [nan, 0.05787682057331322], 'false,false,true': [0.0, 0.003420239897491602]}, {'': [0.006156426480585633, 0.037925694445962374], 'false': [0.02286978732229349, 0.0582841087939939], 'false,false': [0.0, 0.0025437439547636442], 'false,true': [2.0919823624569533e-06, 0.06805709493129838], 'false,true,false': [0.0, 0.009695393041580395], 'false,true,true': [nan, 2.0919823624569533e-06], 'false,false,true': [nan, 0.0]}, {'': [0.02989452146997759, 0.006062446337707358], 'true': [0.006080554501696501, 0.004222744375131133], 'false': [1.3333574318795857e-05, 0.0], 'false,true': [0.0, 0.0], 'false,false': [0.0, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;tweets(A, F), follows(G, A).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(A, E).;true;true
2;false,true;follows(E, F).;true;true
3;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
3;true;follows(D, A), follows(D, C).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(A, D), tweets(D, E).;true;true
4;false,true;tweets(A, E).;true;true
4;false,true,true;follows(D, F), follows(F, D).;true;true
4;false,false;follows(G, A), follows(H, G).;true;true
5;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
5;true;follows(A, D), tweets(D, E).;true;true
6;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
6;false;follows(D, A).;true;true
6;false,true;follows(A, E), follows(D, E).;true;true
6;false,false;tweets(A, G).;true;true
6;false,false,true;recursion_accounttype(H, B).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;false;tweets(A, E), follows(A, F).;true;true
7;false,true;follows(F, G), recursion_accounttype(G, B).;true;true
8;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
8;false;tweets(A, D).;true;true
8;false,true;follows(E, A), tweets(E, D).;true;true
8;false,true,false;tweets(F, D), recursion_accounttype(F, B).;true;true
8;false,false;follows(G, A).;true;true
9;;accounttype(A, B) :- follows(A, C), follows(C, D).;true;true
9;false;recursion_accounttype(F, B).;true;true
9;false,true;follows(G, F), follows(G, A).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(D, A) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7194734122109544;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( tweets(A, D), follows(E, A) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0.4441086724301469;  // std dev = 1.091, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.5553664367462845;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, D) )
%   | then if ( follows(D, E) )
%   | | then if ( follows(F, A) )
%   | | | then return -0.04595674333428921;  // std dev = 0.641, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | | | else return 0.41768704160028536;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0.5928066383642848;  // std dev = 0.092, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(D, C) )
%   | then return 0.41751358415830997;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else return 0.41751358415830997;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, E), follows(F, A) )
%   | then if ( follows(F, E), follows(E, G) )
%   | | then return -0.11755580512310326;  // std dev = 0.063, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.1190907386584961;  // std dev = 0.548, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( tweets(A, H) )
%   | | then return 0.23899858073140823;  // std dev = 0.784, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.5551098266134115;  // std dev = 0.035, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, D), tweets(D, E) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(D, F), follows(F, D) )
%   | | | then return -0.014415681775161487;  // std dev = 0.926, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | | else return -0.11299356739766263;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.23457989861285564;  // std dev = 0.483, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(G, A), follows(H, G) )
%   | | then return 0.35218978881657204;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.38931937954965756;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), tweets(D, E) )
%   | then return 0.3265851208078788;  // std dev = 0.247, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.2765544902996877;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( tweets(A, F) )
%   | then if ( follows(G, A), follows(H, G) )
%   | | then if ( follows(H, A) )
%   | | | then return -0.0957622355154556;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.10540724108916627;  // std dev = 0.016, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.0226777066157004;  // std dev = 0.713, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return 0.21464567024070877;  // std dev = 0.475, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.2505606349508828;  // std dev = 0.231, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(D, A) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return -0.10875912695387369;  // std dev = 0.049, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return -0.10031436495422448;  // std dev = 0.011, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( tweets(A, F) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.5195276019939228;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return -0.4804723980060773;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.30377781282195787;  // std dev = 0.056, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.20838212068568826;  // std dev = 0.209, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( tweets(A, D), follows(A, E) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then return 0.3914128010377782;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, G), follows(G, A) )
%   | | | then return -0.08250950546393675;  // std dev = 0.017, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return -0.17786861525845765;  // std dev = 0.228, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.13020338256004418;  // std dev = 0.397, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.17738188362126708;  // std dev = 0.190, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( tweets(A, D) )
%   | then if ( follows(E, A), tweets(E, D) )
%   | | then return -0.07585625532315708;  // std dev = 0.006, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( tweets(F, D), recursion_accounttype(F, B) )
%   | | | then return 0.3030554110925424;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return -0.19786125395926865;  // std dev = 0.178, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( follows(G, A) )
%   | | then return -0.23315430448979504;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.2207235886700484;  // std dev = 0.045, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, D) )
%   then if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then return 0.18005381339822857;  // std dev = 0.183, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.09712614112611051;  // std dev = 0.070, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0.06942271693074953;  // std dev = 0.323, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(H, G), follows(H, A) )
%   | | then return 0.1330222985530024;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.15331372655413322;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return -0.05980677939571894;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */


Results
   AUC ROC   = 0.938185
   AUC PR    = 0.267405
   CLL	      = -0.238715
   Precision = 0.073414 at threshold = 0.5
   Recall    = 0.81746
   F1        = 0.134729


Total learning time: 1.489 seconds
Total inference time: 82.19800000000001 seconds
AUC ROC: 0.938185


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.137313
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.614 seconds
Refined model CLL: -0.137313


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.938185
   AUC PR    = 0.267405
   CLL	      = -0.238715
   Precision = 0.073414 at threshold = 0.5
   Recall    = 0.81746
   F1        = 0.134729


Total learning time: 3.3200000000000003 seconds
Total inference time: 82.19800000000001 seconds
AUC ROC: 0.938185
Total revision time: 3.3200000000000003
Best scored revision CLL: -0.137313


Dataset: 7_yeast_twitter, Fold: 1, Type: Transfer (trRDN-B), Time: 00:30:43
{'AUC ROC': 0.938185, 'AUC PR': 0.267405, 'CLL': -0.238715, 'Precision': [0.073414, 0.5], 'Recall': 0.81746, 'F1': 0.134729, 'Learning time': 3.3200000000000003, 'Inference time': 82.19800000000001, 'parameter_10': {'AUC ROC': 0.937249, 'AUC PR': 0.21277, 'CLL': -0.253018, 'Precision': [0.072143, 0.5], 'Recall': 0.801587, 'F1': 0.132372, 'Learning time': 0.805, 'Inference time': 8.629}}


Amount of data: 15
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
0;true;complex(A, D), complex(C, D).;false;false
0;false;interaction(E, A), interaction(E, E).;true;true
0;false,true;interaction(A, E).;true;true
0;false,true,true;complex(A, F).;false;false
0;false,true,false;complex(E, G), location(A, H).;false;false
0;false,false;interaction(A, I), recursion_proteinclass(I, B).;false;true
0;false,false,false;location(A, J), complex(A, K).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
1;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
1;true,false;interaction(E, C), interaction(E, E).;false;true
1;true,false,false;interaction(A, F), enzyme(F, G).;false;false
1;false;interaction(A, H), recursion_proteinclass(H, B).;true;true
1;false,true;enzyme(H, I), interaction(H, J).;false;false
1;false,false;interaction(A, A).;false;true
1;false,false,false;complex(A, K), interaction(L, A).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(C, D).;false;true
2;true,false;interaction(E, A), interaction(A, E).;false;true
2;true,false,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(A, G), enzyme(G, H).;true;true
2;false,false,true;interaction(G, I), phenotype(G, J).;false;false
2;false,false,false;phenotype(A, K).;false;false
3;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
3;true;interaction(D, A), interaction(D, C).;false;true
3;true,false;complex(C, E).;false;true
3;true,false,false;interaction(A, F), interaction(F, F).;false;false
3;false;interaction(A, A).;false;true
3;false,false;interaction(A, G), interaction(H, A).;true;true
3;false,false,true;complex(H, I), complex(G, I).;false;false
3;false,false,false;complex(A, J), phenotype(A, K).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
4;false;interaction(A, D), complex(D, E).;true;true
4;false,true;complex(A, E), location(A, F).;true;true
4;false,true,true;interaction(D, G), interaction(G, D).;false;false
4;false,true,false;enzyme(D, H), phenotype(A, I).;false;false
4;false,false;interaction(J, A), interaction(K, J).;true;true
4;false,false,true;recursion_proteinclass(K, B).;false;false
4;false,false,false;interaction(A, L), phenotype(L, M).;false;false
5;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
5;true;interaction(A, D), complex(D, E).;true;false
5;true,true;complex(C, F), complex(A, F).;false;true
5;true,true,false;interaction(C, C).;false;false
5;false;interaction(A, A).;false;true
5;false,false;interaction(G, A), interaction(G, G).;true;true
5;false,false,true;complex(G, H), location(A, I).;false;false
5;false,false,false;interaction(A, J), interaction(K, A).;false;false
6;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
6;false;interaction(D, A), enzyme(D, E).;true;true
6;false,true;enzyme(A, E).;true;true
6;false,true,true;interaction(A, F), interaction(D, F).;false;false
6;false,true,false;interaction(G, D), enzyme(G, H).;false;false
6;false,false;complex(A, I), location(A, J).;true;true
6;false,false,true;location(K, J), recursion_proteinclass(K, B).;false;false
6;false,false,false;phenotype(A, L).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
7;false;interaction(D, A), interaction(D, D).;true;true
7;false,true;complex(D, E), complex(A, E).;true;true
7;false,true,true;interaction(A, F).;false;false
7;false,true,false;enzyme(A, G), phenotype(D, H).;false;false
7;false,false;complex(A, I), interaction(A, J).;true;true
7;false,false,true;interaction(J, K), recursion_proteinclass(K, B).;false;false
7;false,false,false;interaction(A, L), interaction(L, L).;false;false
8;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
8;false;complex(A, D).;true;true
8;false,true;interaction(E, A), complex(E, D).;true;true
8;false,true,true;interaction(E, E).;false;false
8;false,true,false;complex(F, D), recursion_proteinclass(F, B).;false;false
8;false,false;interaction(G, A), phenotype(G, H).;true;true
8;false,false,true;interaction(A, A).;false;false
8;false,false,false;phenotype(A, I).;false;false
9;;proteinclass(A, B) :- interaction(A, C), interaction(C, D).;true;true
9;true;recursion_proteinclass(D, B), interaction(D, E).;false;false
9;false;phenotype(A, F).;true;true
9;false,true;phenotype(G, F), recursion_proteinclass(G, B).;true;false
9;false,true,true;interaction(H, G), interaction(H, A).;false;false
9;false,false;interaction(A, I), location(A, J).;true;true
9;false,false,true;location(I, K).;false;false
9;false,false,false;interaction(L, A), location(L, M).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), tweets(C, D) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G) )
%   | | | then return -0.00851773156715447;  // std dev = 1.317, 15.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   | | | else return 0.5248156017661789;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.7194734122109543;  // std dev = 2.98e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F), follows(G, A) )
%   | | | then return -0.05748403338916013;  // std dev = 0.957, 12.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=1 */
%   | | | else return 0.3630357263649213;  // std dev = 1.460, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.5553664367462846;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.10382078738710394;  // std dev = 1.855, 20.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=6 */
%   | | | else return -0.13400502985091675;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.6080575065542468;  // std dev = 0.075, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(D, C) )
%   | then return 0.4175135841583099;  // std dev = 1.49e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( tweets(C, E) )
%   | | then return 0.41751358415830997;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F), follows(G, A) )
%   | | then if ( tweets(G, H), tweets(F, H) )
%   | | | then return -0.006840569263157341;  // std dev = 1.106, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | | | else return -0.21372456820277116;  // std dev = 0.134, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.2375608848530349;  // std dev = 0.872, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.46849092382238827;  // std dev = 0.874, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.3207118471601497;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(A, D), tweets(D, E) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(D, F), follows(F, D) )
%   | | | then return 0.012139104430327221;  // std dev = 1.382, 15.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=3 */
%   | | | else return -0.09852416730132622;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.21439517445204287;  // std dev = 0.455, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else if ( follows(G, A), follows(H, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.349044755282806;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.4589923791685624;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), tweets(D, E) )
%   | then if ( tweets(C, F), tweets(A, F) )
%   | | then return 0.3006909278610546;  // std dev = 0.249, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(C, C) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.25517224256948945;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.274425189237554;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), follows(G, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, H), follows(I, A) )
%   | | | then return -0.07826895526344647;  // std dev = 0.984, 13.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=1 */
%   | | | else return 0.21506755876168265;  // std dev = 1.227, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.23568193973193344;  // std dev = 0.232, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(D, A) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return -0.06074623678832502;  // std dev = 0.979, 11.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
%   | | else if ( follows(F, D) )
%   | | | then return -0.11076192477369674;  // std dev = 0.038, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.7061780998479501;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return -0.29382190015204984;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return 0.24245869269888;  // std dev = 0.388, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.19709708657775174;  // std dev = 0.212, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(D, A), follows(D, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E), follows(A, F) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.7060010277156152;  // std dev = 0.231, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return -0.14226003131923293;  // std dev = 0.154, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( follows(A, H), follows(H, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.10745197687066634;  // std dev = 0.967, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.16859593484619617;  // std dev = 0.193, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( tweets(A, D) )
%   | then if ( follows(E, A), tweets(E, D) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.034619930195375945;  // std dev = 0.840, 11.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
%   | | else if ( tweets(F, D), recursion_accounttype(F, B) )
%   | | | then return 0.3692849848704197;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return -0.16345552520575382;  // std dev = 0.119, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.3016989824881207;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.1601912493259248;  // std dev = 0.389, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, D) )
%   then if ( recursion_accounttype(D, B), follows(D, E) )
%   | then return 0.26448299437759126;  // std dev = 0.637, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return -0.16946569438524248;  // std dev = 0.516, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else if ( recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(G, A) )
%   | | then return 0.13609782100089807;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.20610562958102274;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, H) )
%   | | then return -0.05694697352756713;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.970443
   AUC PR    = 0.300669
   CLL	      = -0.228751
   Precision = 0.072524 at threshold = 0.5
   Recall    = 0.825397
   F1        = 0.133333


Total learning time: 0.752 seconds
Total inference time: 9.47 seconds
AUC ROC: 0.970443


Results scoring model
   AUC ROC   = 0.995556
   AUC PR    = 0.995694
   CLL	      = -0.218463
   Precision = 0.933333 at threshold = 0.5
   Recall    = 0.933333
   F1        = 0.933333


Total scoring time: 0.45 seconds
Parameter learned model CLL: -0.218463


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'tweets(A, D), tweets(C, D)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F), recursion_accounttype(F, B)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.0, 0, 8], 'true,false': [0.0, 0, 1], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [1.317, 13, 2], 'false,false,false,false': [1.155, 2, 4]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, E), recursion_accounttype(E, B)', 'false,false': 'follows(A, A)', 'false,false,false': 'tweets(A, F), follows(G, A)'}, {'true,true': [2.98e-08, 0, 9], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.957, 11, 1], 'false,false,false,false': [1.46, 4, 5]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(A, A)', 'false,false': 'follows(A, E)', 'false,false,true': 'follows(E, F)'}, {'true,true': [0.0, 0, 6], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.855, 14, 6], 'false,false,true,false': [0.0, 1, 0], 'false,false,false': [0.075, 0, 3]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(D, C)', 'true,false': 'tweets(C, E)', 'false': 'follows(A, A)', 'false,false': 'follows(A, F), follows(G, A)', 'false,false,true': 'tweets(G, H), tweets(F, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true': [1.49e-08, 0, 5], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.106, 10, 2], 'false,false,true,false': [0.134, 2, 0], 'false,false,false,true': [0.872, 2, 3], 'false,false,false,false': [0.874, 1, 4]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(A, D), tweets(D, E)', 'false,true': 'tweets(A, E)', 'false,true,true': 'follows(D, F), follows(F, D)', 'false,false': 'follows(G, A), follows(H, G)', 'false,false,true': 'recursion_accounttype(H, B)', 'false,false,false': 'follows(A, I)'}, {'true': [0.0, 0, 6], 'false,true,true,true': [1.382, 12, 3], 'false,true,true,false': [0.0, 1, 0], 'false,true,false': [0.455, 2, 3], 'false,false,true,true': [0.0, 0, 2], 'false,false,true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 0, 1]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(A, D), tweets(D, E)', 'true,true': 'tweets(C, F), tweets(A, F)', 'true,true,false': 'follows(C, C)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), follows(G, G)', 'false,false,false': 'follows(A, H), follows(I, A)'}, {'true,true,true': [0.249, 0, 6], 'true,true,false,true': [0.0, 0, 0], 'true,true,false,false': [0.0, 0, 1], 'true,false': [0.0, 0, 2], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.984, 12, 1], 'false,false,false,false': [1.227, 3, 5]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(A, E), follows(D, E)', 'false,true,false': 'follows(F, D)', 'false,false': 'tweets(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true': [0.232, 0, 9], 'false,true,true': [0.979, 10, 1], 'false,true,false,true': [0.038, 2, 0], 'false,true,false,false': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 1], 'false,false,true,false': [0.0, 2, 0], 'false,false,false': [0.388, 1, 4]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(D, A), follows(D, D)', 'false,false': 'tweets(A, E), follows(A, F)', 'false,false,true': 'follows(F, G), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, H), follows(H, H)'}, {'true': [0.212, 0, 9], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.231, 0, 2], 'false,false,true,false': [0.154, 13, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.967, 2, 4]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,true': 'follows(E, A), tweets(E, D)', 'false,true,true': 'follows(E, E)', 'false,true,false': 'tweets(F, D), recursion_accounttype(F, B)', 'false,false': 'follows(G, A)', 'false,false,true': 'follows(A, A)'}, {'true': [0.193, 0, 9], 'false,true,true,true': [0.0, 0, 0], 'false,true,true,false': [0.84, 10, 1], 'false,true,false,true': [0.0, 0, 1], 'false,true,false,false': [0.119, 3, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 1, 0], 'false,false,false': [0.389, 1, 4]}], ['accounttype(A, B)', {'': 'follows(A, C), follows(C, D)', 'true': 'recursion_accounttype(D, B), follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,true': 'follows(G, F), follows(G, A)', 'false,false': 'follows(A, H)'}, {'true,true': [0.637, 0, 12], 'true,false': [0.516, 14, 0], 'false,true,true': [0.0, 0, 2], 'false,true,false': [0.0, 0, 1], 'false,false,true': [0.0, 1, 0], 'false,false,false': [0.0, 0, 0]}]]
[{'': [-2.9605947323337506e-16, 0.20408163265306123], 'false': [nan, 0.20408163265306123], 'false,false': [nan, 0.20408163265306106], 'false,false,false': [0.11555555555555559, 0.22222222222222213], 'true': [-2.220446049250313e-16, 0.0]}, {'': [9.868649107779169e-17, 0.18842666029751654], 'false': [nan, 0.18842666029751662], 'false,false': [nan, 0.18842666029751662], 'false,false,false': [0.07638888888888887, 0.23676071645551705], 'true': [9.868649107779169e-17, nan]}, {'': [-7.401486830834377e-17, 0.175398417474982], 'false': [nan, 0.1753984174749821], 'false,false': [0.1664366009323851, 0.005552697675015168], 'false,false,true': [0.17206504434353137, 0.0], 'true': [-7.401486830834377e-17, nan]}, {'': [7.401486830834377e-17, 0.1606814918901441], 'false': [nan, 0.1606814918901441], 'false,false': [0.09387625465331051, 0.1657469232682422], 'false,false,false': [0.15196985425131765, 0.1528596508359731], 'false,false,true': [0.10191879068265558, 0.008934476462457673], 'true': [4.4408920985006264e-17, 0.0], 'true,false': [0.0, nan]}, {'': [-3.700743415417188e-17, 0.1425097559094126], 'false': [0.1488168380347894, 0.0026863288884719414], 'false,true': [0.12010288674580041, 0.2073657526298232], 'false,true,true': [0.12734434838029, 0.0], 'false,false': [0.0, 0.0], 'false,false,true': [0.0, nan], 'false,false,false': [nan, 0.0]}, {'': [0.007171338473601148, 0.13804103436245901], 'false': [nan, 0.13804103436245901], 'false,false': [nan, 0.13804103436245901], 'false,false,false': [0.07442379400169172, 0.18815228633035383], 'true': [0.009133497010311742, 0.0], 'true,true': [0.010359753553362846, 0.0], 'true,true,false': [nan, 0.0]}, {'': [0.005988461423406279, 0.13027614124988332], 'false': [0.07419062111728772, 0.18728799209014774], 'false,false': [0.2222222222222222, 0.15088210770626453], 'false,false,true': [0.0, 0.0], 'false,true': [0.08716375646050466, 0.0007216644610445258], 'false,true,false': [0.0007216644610445258, nan]}, {'': [0.004986346428788295, 0.1114284991881932], 'false': [nan, 0.1114284991881932], 'false,false': [0.08829507129403409, 0.15593175613454632], 'false,false,false': [nan, 0.15593175613454632], 'false,false,true': [0.02670788952483988, 0.0018304457654590518]}, {'': [0.0041414905084795435, 0.09172781268101038], 'false': [0.06222902224762518, 0.155752077833335], 'false,false': [0.0, 0.1513453956924632], 'false,true': [0.06421702833919597, 0.05674813197823993], 'false,true,true': [nan, 0.06421702833919597], 'false,true,false': [0.0, 0.0047110632019311816], 'false,false,true': [nan, 0.0]}, {'': [0.0726575462152027, 0.009595715244728919], 'true': [0.03382633254116721, 0.019028460044405886], 'false': [0.0010891318360425294, 0.0], 'false,true': [0.0, 0.0], 'false,false': [0.0, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
0;true;tweets(A, D), tweets(C, D).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(A, E).;true;true
2;false,true;follows(E, F).;true;true
3;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
3;true;follows(D, A), follows(D, C).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(A, D), tweets(D, E).;true;true
4;false,true;tweets(A, E).;true;true
4;false,true,true;follows(D, F), follows(F, D).;true;true
4;false,false;follows(G, A), follows(H, G).;true;true
5;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
5;true;follows(A, D), tweets(D, E).;true;true
5;true,true;tweets(C, F), tweets(A, F).;true;true
6;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
6;false;follows(D, A).;true;true
6;false,true;follows(A, E), follows(D, E).;true;true
6;false,false;tweets(A, G).;true;true
6;false,false,true;recursion_accounttype(H, B).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;false;tweets(A, E), follows(A, F).;true;true
7;false,true;follows(F, G), recursion_accounttype(G, B).;true;true
8;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
8;false;tweets(A, D).;true;true
8;false,true;follows(E, A), tweets(E, D).;true;true
8;false,true,false;tweets(F, D), recursion_accounttype(F, B).;true;true
8;false,false;follows(G, A).;true;true
9;;accounttype(A, B) :- follows(A, C), follows(C, D).;true;true
9;false;recursion_accounttype(F, B).;true;true
9;false,true;follows(G, F), follows(G, A).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), tweets(C, D) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( follows(A, G), follows(G, E) )
%   | | | then return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( tweets(A, H) )
%   | | then return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then return 0.7194734122109544;  // std dev = 3.65e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.7194734122109544;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( follows(A, G), follows(G, E) )
%   | | | then return 0.16653882456488175;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( tweets(A, H) )
%   | | then return 0.16653882456488175;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.5580193346218546;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.5553664367462846;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(A, D) )
%   | then if ( follows(D, E) )
%   | | then if ( follows(F, A) )
%   | | | then return -0.0022460183499598786;  // std dev = 1.072, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | | | else return 0.28486816693492256;  // std dev = 1.234, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | else return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0.5842271611723366;  // std dev = 0.071, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(D, C) )
%   | then return 0.4175135841583099;  // std dev = 1.49e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.41751358415830997;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, E), follows(F, A) )
%   | then if ( follows(E, A), follows(E, F) )
%   | | then return -0.11209264190981506;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( follows(F, E), follows(G, F) )
%   | | | then return 0.17423050074599014;  // std dev = 0.947, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return -0.1085938711024888;  // std dev = 0.009, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.6208436800268002;  // std dev = 0.162, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.30139873947729295;  // std dev = 0.152, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.44030833138406833;  // std dev = 0.073, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.3207118471601497;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(A, D), tweets(D, E) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(D, F), follows(F, D) )
%   | | | then return 0.019762673079702062;  // std dev = 1.231, 15.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=3 */
%   | | | else return -0.09210446062651373;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.15515039417023635;  // std dev = 0.743, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else if ( follows(G, A), follows(H, G) )
%   | | then return 0.30956412532149546;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.39157328957262616;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), tweets(D, E) )
%   | then if ( tweets(C, F), tweets(A, F) )
%   | | then return 0.2972530397485021;  // std dev = 0.230, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.25517224256948945;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.2475500004166703;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(G, A) )
%   | then if ( follows(A, H), follows(H, G) )
%   | | then if ( follows(H, A) )
%   | | | then return -0.10322705803406375;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.11067330922852277;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return -0.11027044891725543;  // std dev = 0.048, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( tweets(A, I) )
%   | | then return 0.08095034562982951;  // std dev = 0.668, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.21230495016452017;  // std dev = 0.677, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then return 0.2040159503581018;  // std dev = 0.006, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.28081791597231504;  // std dev = 0.187, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(E, A) )
%   | then if ( follows(A, F), follows(E, F) )
%   | | then return -0.0473736428114282;  // std dev = 0.261, 11.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
%   | | else return -0.08513727669907747;  // std dev = 0.012, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( tweets(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.6071991393978069;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return -0.20459866854253445;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return 0.1641549135217511;  // std dev = 0.681, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then return 0.17287470208582167;  // std dev = 0.006, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.2304547037678768;  // std dev = 0.167, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( tweets(A, E), follows(A, F) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.6116928458094493;  // std dev = 0.218, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(H, A), follows(I, H) )
%   | | | then return -0.11656710401369645;  // std dev = 0.186, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return -0.145470519397794;  // std dev = 0.068, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.08547538296318458;  // std dev = 0.726, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then return 0.1495343389028297;  // std dev = 0.005, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.19391038269051405;  // std dev = 0.148, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( tweets(A, E) )
%   | then if ( follows(F, A), tweets(F, E) )
%   | | then return -0.03905977244814585;  // std dev = 0.221, 11.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
%   | | else if ( tweets(G, E), recursion_accounttype(G, B) )
%   | | | then return 0.3136009290030257;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return -0.12343721192392276;  // std dev = 0.073, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( follows(H, A) )
%   | | then return -0.1403568159114216;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.11085757163548075;  // std dev = 0.690, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, D) )
%   then if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.15192888925747722;  // std dev = 0.050, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(F, A) )
%   | | then if ( follows(A, G), follows(G, F) )
%   | | | then return -0.026000931153888237;  // std dev = 0.733, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | | | else return -0.09176061959160754;  // std dev = 0.040, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( tweets(A, H) )
%   | | | then return -0.0086174601201053;  // std dev = 0.317, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.061481262239327594;  // std dev = 0.685, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( recursion_accounttype(I, B) )
%   | then if ( follows(J, I), follows(J, A) )
%   | | then return 0.11259991558691129;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.19701283198995834;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return -0.05648045372147563;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */


Results
   AUC ROC   = 0.963428
   AUC PR    = 0.310223
   CLL	      = -0.185129
   Precision = 0.155763 at threshold = 0.5
   Recall    = 0.793651
   F1        = 0.260417


Total learning time: 1.718 seconds
Total inference time: 13.1 seconds
AUC ROC: 0.963428


Results scoring model
   AUC ROC   = 0.995556
   AUC PR    = 0.995694
   CLL	      = -0.198598
   Precision = 0.933333 at threshold = 0.5
   Recall    = 0.933333
   F1        = 0.933333


Total scoring time: 0.443 seconds
Refined model CLL: -0.198598


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.963428
   AUC PR    = 0.310223
   CLL	      = -0.185129
   Precision = 0.155763 at threshold = 0.5
   Recall    = 0.793651
   F1        = 0.260417


Total learning time: 3.363 seconds
Total inference time: 13.1 seconds
AUC ROC: 0.963428
Total revision time: 3.363
Best scored revision CLL: -0.198598


Dataset: 7_yeast_twitter, Fold: 1, Type: Transfer (trRDN-B), Time: 00:31:09
{'AUC ROC': 0.963428, 'AUC PR': 0.310223, 'CLL': -0.185129, 'Precision': [0.155763, 0.5], 'Recall': 0.793651, 'F1': 0.260417, 'Learning time': 3.363, 'Inference time': 13.1, 'parameter_15': {'AUC ROC': 0.970443, 'AUC PR': 0.300669, 'CLL': -0.228751, 'Precision': [0.072524, 0.5], 'Recall': 0.825397, 'F1': 0.133333, 'Learning time': 0.752, 'Inference time': 9.47}}


Amount of data: 20
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
0;true;complex(A, D), complex(C, D).;false;false
0;false;interaction(E, A), interaction(E, E).;true;true
0;false,true;interaction(A, E).;true;true
0;false,true,true;complex(A, F).;false;false
0;false,true,false;complex(E, G), location(A, H).;false;false
0;false,false;interaction(A, I), recursion_proteinclass(I, B).;false;true
0;false,false,false;location(A, J), complex(A, K).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
1;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
1;true,false;interaction(E, C), interaction(E, E).;false;true
1;true,false,false;interaction(A, F), enzyme(F, G).;false;false
1;false;interaction(A, H), recursion_proteinclass(H, B).;true;true
1;false,true;enzyme(H, I), interaction(H, J).;false;false
1;false,false;interaction(A, A).;false;true
1;false,false,false;complex(A, K), interaction(L, A).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(C, D).;false;true
2;true,false;interaction(E, A), interaction(A, E).;false;true
2;true,false,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(A, G), enzyme(G, H).;true;true
2;false,false,true;interaction(G, I), phenotype(G, J).;false;false
2;false,false,false;phenotype(A, K).;false;false
3;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
3;true;interaction(D, A), interaction(D, C).;false;true
3;true,false;complex(C, E).;false;true
3;true,false,false;interaction(A, F), interaction(F, F).;false;false
3;false;interaction(A, A).;false;true
3;false,false;interaction(A, G), interaction(H, A).;true;true
3;false,false,true;complex(H, I), complex(G, I).;false;false
3;false,false,false;complex(A, J), phenotype(A, K).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
4;false;interaction(A, D), complex(D, E).;true;true
4;false,true;complex(A, E), location(A, F).;true;true
4;false,true,true;interaction(D, G), interaction(G, D).;false;false
4;false,true,false;enzyme(D, H), phenotype(A, I).;false;false
4;false,false;interaction(J, A), interaction(K, J).;true;true
4;false,false,true;recursion_proteinclass(K, B).;false;false
4;false,false,false;interaction(A, L), phenotype(L, M).;false;false
5;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
5;true;interaction(A, D), complex(D, E).;true;false
5;true,true;complex(C, F), complex(A, F).;false;true
5;true,true,false;interaction(C, C).;false;false
5;false;interaction(A, A).;false;true
5;false,false;interaction(G, A), interaction(G, G).;true;true
5;false,false,true;complex(G, H), location(A, I).;false;false
5;false,false,false;interaction(A, J), interaction(K, A).;false;false
6;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
6;false;interaction(D, A), enzyme(D, E).;true;true
6;false,true;enzyme(A, E).;true;true
6;false,true,true;interaction(A, F), interaction(D, F).;false;false
6;false,true,false;interaction(G, D), enzyme(G, H).;false;false
6;false,false;complex(A, I), location(A, J).;true;true
6;false,false,true;location(K, J), recursion_proteinclass(K, B).;false;false
6;false,false,false;phenotype(A, L).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
7;false;interaction(D, A), interaction(D, D).;true;true
7;false,true;complex(D, E), complex(A, E).;true;true
7;false,true,true;interaction(A, F).;false;false
7;false,true,false;enzyme(A, G), phenotype(D, H).;false;false
7;false,false;complex(A, I), interaction(A, J).;true;true
7;false,false,true;interaction(J, K), recursion_proteinclass(K, B).;false;false
7;false,false,false;interaction(A, L), interaction(L, L).;false;false
8;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
8;false;complex(A, D).;true;true
8;false,true;interaction(E, A), complex(E, D).;true;true
8;false,true,true;interaction(E, E).;false;false
8;false,true,false;complex(F, D), recursion_proteinclass(F, B).;false;false
8;false,false;interaction(G, A), phenotype(G, H).;true;true
8;false,false,true;interaction(A, A).;false;false
8;false,false,false;phenotype(A, I).;false;false
9;;proteinclass(A, B) :- interaction(A, C), interaction(C, D).;true;true
9;true;recursion_proteinclass(D, B), interaction(D, E).;false;false
9;false;phenotype(A, F).;true;true
9;false,true;phenotype(G, F), recursion_proteinclass(G, B).;true;false
9;false,true,true;interaction(H, G), interaction(H, A).;false;false
9;false,false;interaction(A, I), location(A, J).;true;true
9;false,false,true;location(I, K).;false;false
9;false,false,false;interaction(L, A), location(L, M).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), tweets(C, D) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G) )
%   | | | then return 0.04862512557570276;  // std dev = 1.799, 21.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=4 */
%   | | | else return 0.4831489350995123;  // std dev = 1.369, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.7194734122109544;  // std dev = 2.98e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F), follows(G, A) )
%   | | | then return -0.08537387008494426;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   | | | else return 0.4284530214801369;  // std dev = 1.755, 13.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=8 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.5553664367462846;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.12150270841437287;  // std dev = 2.264, 28.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=9 */
%   | | | else return 0.2089650849872143;  // std dev = 0.490, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | else return 0.5936646961526317;  // std dev = 0.066, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(D, C) )
%   | then return 0.4175135841583099;  // std dev = 1.49e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( tweets(C, E) )
%   | | then return 0.41751358415830997;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F), follows(G, A) )
%   | | then if ( tweets(G, H), tweets(F, H) )
%   | | | then return -0.031992688773833204;  // std dev = 1.287, 18.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=3 */
%   | | | else return -0.24064264694586834;  // std dev = 0.108, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.3835719894330205;  // std dev = 1.097, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return 0.49789984797629155;  // std dev = 0.898, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.3207118471601497;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(A, D), tweets(D, E) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(D, F), follows(F, D) )
%   | | | then return 0.03695841501103831;  // std dev = 1.709, 21.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=5 */
%   | | | else return 0.18881272365606944;  // std dev = 0.456, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | else return 0.17950086141155205;  // std dev = 0.450, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | else if ( follows(G, A), follows(H, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.319763464952467;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.44938236559687583;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), tweets(D, E) )
%   | then if ( tweets(C, F), tweets(A, F) )
%   | | then return 0.32343280068958064;  // std dev = 0.289, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(C, C) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.25517224256948945;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.2545250072595443;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), follows(G, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, H), follows(I, A) )
%   | | | then return -0.11711323256924132;  // std dev = 1.019, 18.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=1 */
%   | | | else return 0.3075970175765937;  // std dev = 1.416, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.24179283391081902;  // std dev = 0.273, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(D, A) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return -0.09645737656869129;  // std dev = 1.013, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   | | else if ( follows(F, D) )
%   | | | then return -0.1403995220478099;  // std dev = 0.003, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.6161625664589179;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.3838374335410821;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return 0.2508827655858459;  // std dev = 0.365, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.20165023780119926;  // std dev = 0.247, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(D, A), follows(D, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E), follows(A, F) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.5663990025102016;  // std dev = 0.354, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.14712322481440476;  // std dev = 0.227, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( follows(A, H), follows(H, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07374269019159033;  // std dev = 1.068, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.17207580493683147;  // std dev = 0.223, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( tweets(A, D) )
%   | then if ( follows(E, A), tweets(E, D) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.051177481992169975;  // std dev = 0.876, 15.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   | | else if ( tweets(F, D), recursion_accounttype(F, B) )
%   | | | then return 0.3297601975012675;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.2156164936630245;  // std dev = 0.129, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.2970614771969754;  // std dev = 0.031, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return 0.17575089163425947;  // std dev = 0.366, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, D) )
%   then if ( recursion_accounttype(D, B), follows(D, E) )
%   | then return 0.261033669638536;  // std dev = 0.659, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.16314143743709866;  // std dev = 0.570, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else if ( recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(G, A) )
%   | | then return 0.15711703291608703;  // std dev = 0.111, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.18838746429369602;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, H) )
%   | | then return -0.0911340548142506;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.966661
   AUC PR    = 0.306213
   CLL	      = -0.247828
   Precision = 0.074948 at threshold = 0.5
   Recall    = 0.857143
   F1        = 0.137843


Total learning time: 0.824 seconds
Total inference time: 8.32 seconds
AUC ROC: 0.966661


Results scoring model
   AUC ROC   = 0.9975
   AUC PR    = 0.99756
   CLL	      = -0.211252
   Precision = 0.95 at threshold = 0.5
   Recall    = 0.95
   F1        = 0.95


Total scoring time: 0.453 seconds
Parameter learned model CLL: -0.211252


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'tweets(A, D), tweets(C, D)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F), recursion_accounttype(F, B)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.0, 0, 10], 'true,false': [0.0, 0, 1], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [1.799, 17, 4], 'false,false,false,false': [1.369, 3, 5]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, E), recursion_accounttype(E, B)', 'false,false': 'follows(A, A)', 'false,false,false': 'tweets(A, F), follows(G, A)'}, {'true,true': [2.98e-08, 0, 11], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.968, 15, 1], 'false,false,false,false': [1.755, 5, 8]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(A, A)', 'false,false': 'follows(A, E)', 'false,false,true': 'follows(E, F)'}, {'true,true': [0.0, 0, 6], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [2.264, 19, 9], 'false,false,true,false': [0.49, 1, 1], 'false,false,false': [0.066, 0, 4]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(D, C)', 'true,false': 'tweets(C, E)', 'false': 'follows(A, A)', 'false,false': 'follows(A, F), follows(G, A)', 'false,false,true': 'tweets(G, H), tweets(F, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true': [1.49e-08, 0, 5], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.287, 15, 3], 'false,false,true,false': [0.108, 2, 0], 'false,false,false,true': [1.097, 2, 6], 'false,false,false,false': [0.898, 1, 5]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(A, D), tweets(D, E)', 'false,true': 'tweets(A, E)', 'false,true,true': 'follows(D, F), follows(F, D)', 'false,false': 'follows(G, A), follows(H, G)', 'false,false,true': 'recursion_accounttype(H, B)', 'false,false,false': 'follows(A, I)'}, {'true': [0.0, 0, 6], 'false,true,true,true': [1.709, 16, 5], 'false,true,true,false': [0.456, 1, 1], 'false,true,false': [0.45, 3, 4], 'false,false,true,true': [0.0, 0, 3], 'false,false,true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 0, 1]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(A, D), tweets(D, E)', 'true,true': 'tweets(C, F), tweets(A, F)', 'true,true,false': 'follows(C, C)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), follows(G, G)', 'false,false,false': 'follows(A, H), follows(I, A)'}, {'true,true,true': [0.289, 0, 7], 'true,true,false,true': [0.0, 0, 0], 'true,true,false,false': [0.0, 0, 1], 'true,false': [0.0, 0, 3], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [1.019, 17, 1], 'false,false,false,false': [1.416, 3, 8]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(A, E), follows(D, E)', 'false,true,false': 'follows(F, D)', 'false,false': 'tweets(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true': [0.273, 0, 11], 'false,true,true': [1.013, 15, 1], 'false,true,false,true': [0.003, 2, 0], 'false,true,false,false': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 3], 'false,false,true,false': [0.0, 2, 0], 'false,false,false': [0.365, 1, 5]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(D, A), follows(D, D)', 'false,false': 'tweets(A, E), follows(A, F)', 'false,false,true': 'follows(F, G), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, H), follows(H, H)'}, {'true': [0.247, 0, 11], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.354, 0, 4], 'false,false,true,false': [0.227, 17, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.068, 3, 5]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,true': 'follows(E, A), tweets(E, D)', 'false,true,true': 'follows(E, E)', 'false,true,false': 'tweets(F, D), recursion_accounttype(F, B)', 'false,false': 'follows(G, A)', 'false,false,true': 'follows(A, A)'}, {'true': [0.223, 0, 11], 'false,true,true,true': [0.0, 0, 0], 'false,true,true,false': [0.876, 14, 1], 'false,true,false,true': [0.0, 0, 3], 'false,true,false,false': [0.129, 3, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.031, 2, 0], 'false,false,false': [0.366, 1, 5]}], ['accounttype(A, B)', {'': 'follows(A, C), follows(C, D)', 'true': 'recursion_accounttype(D, B), follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,true': 'follows(G, F), follows(G, A)', 'false,false': 'follows(A, H)'}, {'true,true': [0.659, 0, 15], 'true,false': [0.57, 19, 0], 'false,true,true': [0.111, 0, 4], 'false,true,false': [0.0, 0, 1], 'false,false,true': [0.0, 1, 0], 'false,false,false': [0.0, 0, 0]}]]
[{'': [-1.6148698540002277e-16, 0.2140309155766944], 'false': [nan, 0.2140309155766944], 'false,false': [nan, 0.2140309155766945], 'false,false,false': [0.15419501133786834, 0.23437499999999983], 'true': [-8.881784197001253e-17, 0.0]}, {'': [8.074349270001139e-17, 0.2038172503328036], 'false': [nan, 0.2038172503328035], 'false,false': [nan, 0.2038172503328035], 'false,false,false': [0.05859375000000004, 0.2368887215778185], 'true': [8.074349270001139e-17, nan]}, {'': [-7.401486830834377e-17, 0.18132829615756801], 'false': [nan, 0.18132829615756788], 'false,false': [0.17933461102566206, 0.004400270020667563], 'false,false,true': [0.183063255670693, 0.1199938965005111], 'true': [-7.401486830834377e-17, nan]}, {'': [7.401486830834377e-17, 0.1688330124587388], 'false': [nan, 0.16883301245873886], 'false,false': [0.08726157357109043, 0.14675205681530218], 'false,false,false': [0.15036481235929938, 0.13446598700096857], 'false,false,true': [0.09195342992376626, 0.0058535418563352495], 'true': [4.4408920985006264e-17, 0.0], 'true,false': [0.0, nan]}, {'': [-3.700743415417188e-17, 0.14556206962858392], 'false': [0.1558574355188868, 0.0031501986382997255], 'false,true': [0.13786138227611172, 0.20216233551178406], 'false,true,true': [0.13907823567130806, 0.10402988457719119], 'false,false': [0.0, 0.0], 'false,false,true': [0.0, nan], 'false,false,false': [nan, 0.0]}, {'': [0.008668770554796616, 0.14739282290964467], 'false': [nan, 0.14739282290964476], 'false,false': [nan, 0.14739282290964467], 'false,false,false': [0.05767656985216027, 0.18224198395471414], 'true': [0.010925422885772099, 0.0], 'true,true': [0.011903759609381235, 0.0], 'true,true,false': [nan, 0.0]}, {'': [0.006794195623936642, 0.1312515632767876], 'false': [0.05718711509755112, 0.1821906181534354], 'false,false': [0.23999999999999994, 0.13346818226883758], 'false,false,true': [0.0, 0.0], 'false,true': [0.06412053066846053, 3.4241753353245197e-06], 'false,true,false': [3.4241753353245197e-06, nan]}, {'': [0.0055405870656923565, 0.10368379707625174], 'false': [nan, 0.10368379707625174], 'false,false': [0.08691066920050898, 0.1424866632340244], 'false,false,false': [nan, 0.1424866632340244], 'false,false,true': [0.03124633112912456, 0.003034071199753104]}, {'': [0.004521762220485887, 0.08462275008648715], 'false': [0.06098609006416466, 0.14228624086488825], 'false,false': [0.0004732899283104719, 0.13366934048046328], 'false,true': [0.05118690927159212, 0.07711410040828269], 'false,true,false': [0.0, 0.005510333183909598], 'false,true,true': [nan, 0.05118690927159212], 'false,false,true': [nan, 0.0004732899283104719]}, {'': [0.06667375420840187, 0.011172172558376749], 'true': [0.028945651914149478, 0.017080632773758347], 'false': [0.0026111264707599723, 0.0], 'false,true': [0.003068340112741614, 0.0], 'false,false': [0.0, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
0;true;tweets(A, D), tweets(C, D).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
3;true;follows(D, A), follows(D, C).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(A, D), tweets(D, E).;true;true
4;false,false;follows(G, A), follows(H, G).;true;true
5;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
5;true;follows(A, D), tweets(D, E).;true;true
5;true,true;tweets(C, F), tweets(A, F).;true;true
6;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
6;false;follows(D, A).;true;true
6;false,true;follows(A, E), follows(D, E).;true;true
6;false,false;tweets(A, G).;true;true
6;false,false,true;recursion_accounttype(H, B).;true;true
8;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
8;false;tweets(A, D).;true;true
8;false,true;follows(E, A), tweets(E, D).;true;true
8;false,true,false;tweets(F, D), recursion_accounttype(F, B).;true;true
8;false,false;follows(G, A).;true;true
9;;accounttype(A, B) :- follows(A, C), follows(C, D).;true;true
9;false;recursion_accounttype(F, B).;true;true
9;false,true;follows(G, F), follows(G, A).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), tweets(C, D) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then return -0.1418510649004878;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( follows(A, G), follows(G, E) )
%   | | | then return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( tweets(A, H) )
%   | | then return 0.4581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.6914822684328455;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( tweets(A, E), follows(D, A) )
%   | | then return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), follows(G, A) )
%   | | then return -0.12544463852839138;  // std dev = 1.86e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( follows(A, F), tweets(A, H) )
%   | | | then return 0.10198941874471887;  // std dev = 0.858, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.13296661943735463;  // std dev = 0.026, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( tweets(A, I) )
%   | | then return 0.3927941835770488;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.5851860008555361;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.5553664367462846;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(D, A), follows(A, E) )
%   | then if ( follows(D, E), follows(E, F) )
%   | | then if ( follows(A, D), follows(D, F) )
%   | | | then return -0.12314056161779116;  // std dev = 0.075, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return 0.20248647210372098;  // std dev = 0.769, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.21552415175158077;  // std dev = 0.680, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6677832045953022;  // std dev = 0.122, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.31007418494809785;  // std dev = 0.076, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.5735064540030689;  // std dev = 0.063, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(D, C) )
%   | then return 0.4175135841583099;  // std dev = 1.49e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.41751358415830997;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), follows(A, F) )
%   | then if ( follows(E, F), follows(F, G) )
%   | | then if ( tweets(A, H), follows(E, G) )
%   | | | then return -0.11114982661783739;  // std dev = 0.071, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return 0.1807081667945921;  // std dev = 0.759, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.17600844356621892;  // std dev = 0.652, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.5093392211521248;  // std dev = 0.139, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.248390803464412;  // std dev = 0.067, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.4316962748905541;  // std dev = 0.064, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.3207118471601497;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(A, D), tweets(D, E) )
%   | then if ( follows(F, A), follows(A, F) )
%   | | then if ( follows(F, G), follows(G, A) )
%   | | | then return -0.09099168675103567;  // std dev = 6.45e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return 0.031138473377412063;  // std dev = 0.827, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else if ( follows(H, A) )
%   | | | then return 0.09649038121795514;  // std dev = 0.660, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.20824528649919777;  // std dev = 0.868, 10.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=7 */
%   | else if ( follows(I, A), follows(J, I) )
%   | | then return 0.313711337084309;  // std dev = 7.45e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.38181041369615343;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), tweets(D, E) )
%   | then if ( tweets(C, F), tweets(A, F) )
%   | | then return 0.30625916538662057;  // std dev = 0.081, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.25517224256948945;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.25038942859515834;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(G, A) )
%   | then if ( follows(A, H), follows(H, G) )
%   | | then if ( follows(H, A) )
%   | | | then return -0.08374043183833202;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return 0.08223201615616468;  // std dev = 0.787, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return -0.16629717324374227;  // std dev = 0.045, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( tweets(A, I) )
%   | | then return 0.14985750797655636;  // std dev = 0.665, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.19828524873889655;  // std dev = 0.540, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then return 0.20280552963242895;  // std dev = 0.008, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.26814304414604334;  // std dev = 0.169, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(E, A) )
%   | then if ( follows(A, F), follows(E, F) )
%   | | then return -0.04708695553759263;  // std dev = 0.208, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   | | else return -0.15897987207913214;  // std dev = 0.016, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( tweets(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.35751449742037195;  // std dev = 7.45e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.24059520732302112;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return 0.1581012386099198;  // std dev = 0.543, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(D, A) )
%   then if ( tweets(A, E), tweets(D, E) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then if ( follows(A, D) )
%   | | | then return 0.17075598513602497;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.25793517705395375;  // std dev = 0.107, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(C, D), follows(C, A) )
%   | | | then return -0.07423359253296713;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return 0.0411149749952612;  // std dev = 0.802, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return -0.061448223270046724;  // std dev = 0.277, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else if ( follows(A, F) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( tweets(A, H) )
%   | | | then return 0.2801570274357478;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.22821418589040465;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.2574421187869854;  // std dev = 0.142, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.18139566614720048;  // std dev = 0.054, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then return 0.1527025498612071;  // std dev = 0.039, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.1854164124863566;  // std dev = 0.118, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( tweets(A, E) )
%   | then if ( follows(F, A), tweets(F, E) )
%   | | then return -0.0343180495616345;  // std dev = 0.212, 15.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   | | else if ( tweets(G, E), recursion_accounttype(G, B) )
%   | | | then return 0.22726141191089066;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.14830578338561531;  // std dev = 0.032, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( follows(H, A) )
%   | | then return -0.14001696774217745;  // std dev = 0.009, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return 0.1073632550788552;  // std dev = 0.463, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, D) )
%   then if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.1458599479998704;  // std dev = 0.032, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(F, A) )
%   | | then if ( follows(A, G), follows(G, F) )
%   | | | then return -0.024303992252531954;  // std dev = 0.818, 14.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=1 */
%   | | | else return -0.12591503820402894;  // std dev = 0.030, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.05695219599361934;  // std dev = 0.364, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.07178459151013702;  // std dev = 0.459, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( recursion_accounttype(I, B) )
%   | then if ( follows(J, I), follows(J, A) )
%   | | then return 0.1450818948603774;  // std dev = 0.083, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.18111272338291884;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return -0.10699350142856681;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */


Results
   AUC ROC   = 0.945111
   AUC PR    = 0.309177
   CLL	      = -0.155282
   Precision = 0.37751 at threshold = 0.5
   Recall    = 0.746032
   F1        = 0.501333


Total learning time: 4.978 seconds
Total inference time: 23.024 seconds
AUC ROC: 0.945111


Results scoring model
   AUC ROC   = 0.9975
   AUC PR    = 0.99756
   CLL	      = -0.1698
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.95
   F1        = 0.974359


Total scoring time: 0.525 seconds
Refined model CLL: -0.1698


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.945111
   AUC PR    = 0.309177
   CLL	      = -0.155282
   Precision = 0.37751 at threshold = 0.5
   Recall    = 0.746032
   F1        = 0.501333


Total learning time: 6.78 seconds
Total inference time: 23.024 seconds
AUC ROC: 0.945111
Total revision time: 6.78
Best scored revision CLL: -0.1698


Dataset: 7_yeast_twitter, Fold: 1, Type: Transfer (trRDN-B), Time: 00:31:48
{'AUC ROC': 0.945111, 'AUC PR': 0.309177, 'CLL': -0.155282, 'Precision': [0.37751, 0.5], 'Recall': 0.746032, 'F1': 0.501333, 'Learning time': 6.78, 'Inference time': 23.024, 'parameter_20': {'AUC ROC': 0.966661, 'AUC PR': 0.306213, 'CLL': -0.247828, 'Precision': [0.074948, 0.5], 'Recall': 0.857143, 'F1': 0.137843, 'Learning time': 0.824, 'Inference time': 8.32}}


Amount of data: 25
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
0;true;complex(A, D), complex(C, D).;false;false
0;false;interaction(E, A), interaction(E, E).;true;true
0;false,true;interaction(A, E).;true;true
0;false,true,true;complex(A, F).;false;false
0;false,true,false;complex(E, G), location(A, H).;false;false
0;false,false;interaction(A, I), recursion_proteinclass(I, B).;false;true
0;false,false,false;location(A, J), complex(A, K).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
1;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
1;true,false;interaction(E, C), interaction(E, E).;false;true
1;true,false,false;interaction(A, F), enzyme(F, G).;false;false
1;false;interaction(A, H), recursion_proteinclass(H, B).;true;true
1;false,true;enzyme(H, I), interaction(H, J).;false;false
1;false,false;interaction(A, A).;false;true
1;false,false,false;complex(A, K), interaction(L, A).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(C, D).;false;true
2;true,false;interaction(E, A), interaction(A, E).;false;true
2;true,false,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(A, G), enzyme(G, H).;true;true
2;false,false,true;interaction(G, I), phenotype(G, J).;false;false
2;false,false,false;phenotype(A, K).;false;false
3;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
3;true;interaction(D, A), interaction(D, C).;false;true
3;true,false;complex(C, E).;false;true
3;true,false,false;interaction(A, F), interaction(F, F).;false;false
3;false;interaction(A, A).;false;true
3;false,false;interaction(A, G), interaction(H, A).;true;true
3;false,false,true;complex(H, I), complex(G, I).;false;false
3;false,false,false;complex(A, J), phenotype(A, K).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
4;false;interaction(A, D), complex(D, E).;true;true
4;false,true;complex(A, E), location(A, F).;true;true
4;false,true,true;interaction(D, G), interaction(G, D).;false;false
4;false,true,false;enzyme(D, H), phenotype(A, I).;false;false
4;false,false;interaction(J, A), interaction(K, J).;true;true
4;false,false,true;recursion_proteinclass(K, B).;false;false
4;false,false,false;interaction(A, L), phenotype(L, M).;false;false
5;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
5;true;interaction(A, D), complex(D, E).;true;false
5;true,true;complex(C, F), complex(A, F).;false;true
5;true,true,false;interaction(C, C).;false;false
5;false;interaction(A, A).;false;true
5;false,false;interaction(G, A), interaction(G, G).;true;true
5;false,false,true;complex(G, H), location(A, I).;false;false
5;false,false,false;interaction(A, J), interaction(K, A).;false;false
6;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
6;false;interaction(D, A), enzyme(D, E).;true;true
6;false,true;enzyme(A, E).;true;true
6;false,true,true;interaction(A, F), interaction(D, F).;false;false
6;false,true,false;interaction(G, D), enzyme(G, H).;false;false
6;false,false;complex(A, I), location(A, J).;true;true
6;false,false,true;location(K, J), recursion_proteinclass(K, B).;false;false
6;false,false,false;phenotype(A, L).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
7;false;interaction(D, A), interaction(D, D).;true;true
7;false,true;complex(D, E), complex(A, E).;true;true
7;false,true,true;interaction(A, F).;false;false
7;false,true,false;enzyme(A, G), phenotype(D, H).;false;false
7;false,false;complex(A, I), interaction(A, J).;true;true
7;false,false,true;interaction(J, K), recursion_proteinclass(K, B).;false;false
7;false,false,false;interaction(A, L), interaction(L, L).;false;false
8;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
8;false;complex(A, D).;true;true
8;false,true;interaction(E, A), complex(E, D).;true;true
8;false,true,true;interaction(E, E).;false;false
8;false,true,false;complex(F, D), recursion_proteinclass(F, B).;false;false
8;false,false;interaction(G, A), phenotype(G, H).;true;true
8;false,false,true;interaction(A, A).;false;false
8;false,false,false;phenotype(A, I).;false;false
9;;proteinclass(A, B) :- interaction(A, C), interaction(C, D).;true;true
9;true;recursion_proteinclass(D, B), interaction(D, E).;false;false
9;false;phenotype(A, F).;true;true
9;false,true;phenotype(G, F), recursion_proteinclass(G, B).;true;false
9;false,true,true;interaction(H, G), interaction(H, A).;false;false
9;false,false;interaction(A, I), location(A, J).;true;true
9;false,false,true;location(I, K).;false;false
9;false,false,false;interaction(L, A), location(L, M).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), tweets(C, D) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G) )
%   | | | then return 0.07243464938522666;  // std dev = 2.171, 28.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=6 */
%   | | | else return 0.5248156017661789;  // std dev = 1.414, 9.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.7194734122109542;  // std dev = 4.21e-08, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(E, C), follows(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, F) )
%   | | | then return 0.7194734122109544;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, H), follows(I, A) )
%   | | | then return -0.05999017217231033;  // std dev = 1.348, 22.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
%   | | | else return 0.4752843251792834;  // std dev = 1.830, 15.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=10 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.5553664367462846;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, A) )
%   | | | then return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H) )
%   | | | then return 0.1311249686257767;  // std dev = 2.504, 33.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=11 */
%   | | | else return 0.3673156190119151;  // std dev = 0.633, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.34488450757308514;  // std dev = 0.349, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(D, C) )
%   | then return 0.4175135841583099;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( tweets(C, E) )
%   | | then return 0.41751358415830997;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, F), follows(F, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.41751358415830997;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G), follows(H, A) )
%   | | then if ( tweets(H, I), tweets(G, I) )
%   | | | then return -0.018033544004411553;  // std dev = 1.563, 22.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=4 */
%   | | | else return -0.2666975733226328;  // std dev = 0.102, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.32283536398338364;  // std dev = 1.408, 11.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=7 */
%   | | | else return 0.5034951229332759;  // std dev = 0.912, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.3207118471601497;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, D), tweets(D, E) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(D, F), follows(F, D) )
%   | | | then return 0.03906407673028263;  // std dev = 1.924, 25.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=6 */
%   | | | else return 0.33391751147671794;  // std dev = 0.620, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.19648144647647522;  // std dev = 0.433, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | else if ( follows(G, A), follows(H, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.3904687642337088;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.2460417698327381;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( follows(A, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.4878824838277792;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), tweets(D, E) )
%   | then if ( tweets(C, F), tweets(A, F) )
%   | | then return 0.2989494313036454;  // std dev = 0.263, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(C, C) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.25517224256948945;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.3024177721756063;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), follows(G, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, H), follows(I, A) )
%   | | | then return -0.0912347947715534;  // std dev = 1.400, 22.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
%   | | | else return 0.2584686249100992;  // std dev = 1.614, 15.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=10 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.23981621486972296;  // std dev = 0.241, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( follows(D, A) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return -0.06470976563429752;  // std dev = 1.387, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | | else if ( follows(F, D) )
%   | | | then return -0.19792659364290893;  // std dev = 0.098, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.6048089855804115;  // std dev = 0.062, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.37735550582149496;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return 0.2604340538858248;  // std dev = 0.342, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.19975779485436287;  // std dev = 0.218, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( follows(D, A), follows(D, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E), follows(A, F) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.5896369032176938;  // std dev = 0.467, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.15738102911888038;  // std dev = 0.205, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else if ( follows(A, H), follows(H, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0309020063174837;  // std dev = 1.177, 11.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.17034799419987312;  // std dev = 0.197, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( tweets(A, D) )
%   | then if ( follows(E, A), tweets(E, D) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.047212197304039465;  // std dev = 1.220, 21.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=2 */
%   | | else if ( tweets(F, D), recursion_accounttype(F, B) )
%   | | | then return 0.31771644214820594;  // std dev = 0.054, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.22197775619601576;  // std dev = 0.098, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.32366626052050274;  // std dev = 0.038, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return 0.19317219686386697;  // std dev = 0.343, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, D) )
%   then if ( recursion_accounttype(D, B), follows(D, E) )
%   | then return 0.27187242288645175;  // std dev = 0.836, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return -0.1493878737436953;  // std dev = 0.685, 23.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=1 */
%   else if ( recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(G, A) )
%   | | then return 0.16187779283297926;  // std dev = 0.047, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.24228520903590828;  // std dev = 0.035, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(A, H) )
%   | | then return -0.11695983106848055;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( follows(I, A) )
%   | | | then return -0.2105446420031179;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.971094
   AUC PR    = 0.312921
   CLL	      = -0.255904
   Precision = 0.074896 at threshold = 0.5
   Recall    = 0.857143
   F1        = 0.137755


Total learning time: 0.93 seconds
Total inference time: 9.575 seconds
AUC ROC: 0.971094


Results scoring model
   AUC ROC   = 0.9968
   AUC PR    = 0.996797
   CLL	      = -0.226511
   Precision = 0.958333 at threshold = 0.5
   Recall    = 0.92
   F1        = 0.938776


Total scoring time: 0.437 seconds
Parameter learned model CLL: -0.226511


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'tweets(A, D), tweets(C, D)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F), recursion_accounttype(F, B)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.0, 0, 12], 'true,false': [0.0, 0, 1], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [2.171, 22, 6], 'false,false,false,false': [1.414, 3, 6]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(E, C), follows(E, E)', 'true,false,false': 'follows(A, F)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(A, A)', 'false,false,false': 'tweets(A, H), follows(I, A)'}, {'true,true': [4.21e-08, 0, 12], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [1.348, 20, 2], 'false,false,false,false': [1.83, 5, 10]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'true,false': 'follows(E, A), follows(A, E)', 'true,false,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H)'}, {'true,true': [0.0, 0, 7], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [2.504, 22, 11], 'false,false,true,false': [0.633, 1, 2], 'false,false,false': [0.349, 2, 4]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(D, C)', 'true,false': 'tweets(C, E)', 'true,false,false': 'follows(A, F), follows(F, F)', 'false': 'follows(A, A)', 'false,false': 'follows(A, G), follows(H, A)', 'false,false,true': 'tweets(H, I), tweets(G, I)', 'false,false,false': 'tweets(A, J)'}, {'true,true': [2.11e-08, 0, 6], 'true,false,true': [0.0, 0, 1], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [0.0, 0, 1], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.563, 18, 4], 'false,false,true,false': [0.102, 2, 0], 'false,false,false,true': [1.408, 4, 7], 'false,false,false,false': [0.912, 1, 6]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(A, D), tweets(D, E)', 'false,true': 'tweets(A, E)', 'false,true,true': 'follows(D, F), follows(F, D)', 'false,false': 'follows(G, A), follows(H, G)', 'false,false,true': 'recursion_accounttype(H, B)', 'false,false,false': 'follows(A, I)'}, {'true': [0.0, 0, 8], 'false,true,true,true': [1.924, 19, 6], 'false,true,true,false': [0.62, 1, 2], 'false,true,false': [0.433, 3, 5], 'false,false,true,true': [0.0, 0, 3], 'false,false,true,false': [0.0, 2, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 0, 1]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(A, D), tweets(D, E)', 'true,true': 'tweets(C, F), tweets(A, F)', 'true,true,false': 'follows(C, C)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), follows(G, G)', 'false,false,false': 'follows(A, H), follows(I, A)'}, {'true,true,true': [0.263, 0, 9], 'true,true,false,true': [0.0, 0, 0], 'true,true,false,false': [0.0, 0, 1], 'true,false': [0.0, 0, 3], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [1.4, 20, 2], 'false,false,false,false': [1.614, 5, 10]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(A, E), follows(D, E)', 'false,true,false': 'follows(F, D)', 'false,false': 'tweets(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true': [0.241, 0, 13], 'false,true,true': [1.387, 17, 2], 'false,true,false,true': [0.098, 5, 0], 'false,true,false,false': [0.0, 0, 0], 'false,false,true,true': [0.062, 0, 4], 'false,false,true,false': [0.0, 2, 0], 'false,false,false': [0.342, 1, 6]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(D, A), follows(D, D)', 'false,false': 'tweets(A, E), follows(A, F)', 'false,false,true': 'follows(F, G), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, H), follows(H, H)'}, {'true': [0.218, 0, 13], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.467, 0, 6], 'false,false,true,false': [0.205, 20, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.177, 5, 6]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,true': 'follows(E, A), tweets(E, D)', 'false,true,true': 'follows(E, E)', 'false,true,false': 'tweets(F, D), recursion_accounttype(F, B)', 'false,false': 'follows(G, A)', 'false,false,true': 'follows(A, A)'}, {'true': [0.197, 0, 13], 'false,true,true,true': [0.0, 0, 0], 'false,true,true,false': [1.22, 19, 2], 'false,true,false,true': [0.054, 0, 4], 'false,true,false,false': [0.098, 3, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.038, 2, 0], 'false,false,false': [0.343, 1, 6]}], ['accounttype(A, B)', {'': 'follows(A, C), follows(C, D)', 'true': 'recursion_accounttype(D, B), follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,true': 'follows(G, F), follows(G, A)', 'false,false': 'follows(A, H)', 'false,false,false': 'follows(I, A)'}, {'true,true': [0.836, 0, 18], 'true,false': [0.685, 22, 1], 'false,true,true': [0.047, 0, 4], 'false,true,false': [0.035, 0, 2], 'false,false,true': [0.0, 1, 0], 'false,false,false,true': [0.0, 2, 0], 'false,false,false,false': [0.0, 0, 0]}]]
[{'': [-2.7328566760003855e-16, 0.21913805697589483], 'false': [nan, 0.21913805697589483], 'false,false': [nan, 0.21913805697589436], 'false,false,false': [0.16836734693877567, 0.22222222222222218], 'true': [-1.4802973661668753e-16, 0.0]}, {'': [1.3664283380001927e-16, 0.2087389670940718], 'false': [nan, 0.20873896709407166], 'false,false': [nan, 0.20873896709407175], 'false,false,false': [0.08264462809917363, 0.22331480864703884], 'true': [1.4802973661668753e-16, 0.0], 'true,false': [nan, 0.0], 'true,false,false': [0.0, nan]}, {'': [-1.1102230246251565e-16, 0.18440146186186285], 'false': [nan, 0.18440146186186293], 'false,false': [0.18951057615643527, 0.12146173951523798], 'false,false,true': [0.18996086593540457, 0.13342020053543188], 'true': [-6.344131569286608e-17, 0.0], 'true,false': [nan, 0.0], 'true,false,false': [0.0, nan]}, {'': [1.1102230246251565e-16, 0.1771332861154296], 'false': [nan, 0.1771332861154296], 'false,false': [0.10694669331924365, 0.16414841048318746], 'false,false,false': [0.18034332243427625, 0.11875385015691194], 'false,false,true': [0.11104406669916318, 0.005194603286419977], 'true': [7.401486830834377e-17, 0.0], 'true,false': [0.0, 0.0], 'true,false,false': [nan, 0.0]}, {'': [-4.163336342344337e-17, 0.15598971599649272], 'false': [0.16430040022317705, 0.09823977439952979], 'false,true': [0.15424640221454428, 0.18717548734594644], 'false,true,true': [0.1480499869905735, 0.12825949219248176], 'false,false': [0.09723495839461282, 0.0], 'false,false,true': [-1.850371707708594e-17, 0.0], 'false,false,false': [nan, 0.0]}, {'': [0.005444888473283189, 0.15285267947926623], 'false': [nan, 0.15285267947926626], 'false,false': [nan, 0.15285267947926623], 'false,false,false': [0.08912746111405706, 0.17360188448116964], 'true': [0.007064148710607831, 0.0], 'true,true': [0.007657409897550976, 0.0], 'true,true,false': [nan, 0.0]}, {'': [0.0044737573832430285, 0.14089224021160732], 'false': [0.08352533421065582, 0.1623907841324233], 'false,false': [0.2150022303274088, 0.11716208176852048], 'false,false,true': [0.0009543161008579992, 0.0], 'false,true': [0.10130654667307133, 0.0019072376022751247], 'false,true,false': [0.0019072376022751247, nan]}, {'': [0.0036564788021512017, 0.11413691920399885], 'false': [nan, 0.11413691920399885], 'false,false': [0.10908233973465571, 0.1259065845255169], 'false,false,false': [nan, 0.12590658452551692], 'false,false,true': [0.036421987423866486, 0.0021029551434901873]}, {'': [0.002993139827996901, 0.09165678173378235], 'false': [0.07479451176427535, 0.13769476288844187], 'false,false': [0.0007381544901445963, 0.11746477997937811], 'false,true': [0.0708892391088392, 0.0731173713783881], 'false,true,false': [0.0007210669945586085, 0.00320587566554432], 'false,true,true': [nan, 0.0708892391088392], 'false,false,true': [nan, 0.0007381544901445963]}, {'': [0.07220755221414649, 0.03208694075789986], 'true': [0.03883885593670276, 0.020412811515046682], 'false': [0.0020086007893135257, 0.0019462481861492835], 'false,true': [0.0005546515153218752, 0.0006062642836761334], 'false,false': [0.0, 0.0], 'false,false,false': [0.0, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
0;true;tweets(A, D), tweets(C, D).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;true;follows(D, C), recursion_accounttype(D, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(C, D).;true;true
3;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
3;true;follows(D, A), follows(D, C).;true;true
3;true,false;tweets(C, E).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(A, D), tweets(D, E).;true;true
4;false,false;follows(G, A), follows(H, G).;true;true
4;false,false,true;recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
5;true;follows(A, D), tweets(D, E).;true;true
5;true,true;tweets(C, F), tweets(A, F).;true;true
6;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
6;false;follows(D, A).;true;true
6;false,true;follows(A, E), follows(D, E).;true;true
6;false,false;tweets(A, G).;true;true
6;false,false,true;recursion_accounttype(H, B).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;false;tweets(A, E), follows(A, F).;true;true
7;false,true;follows(F, G), recursion_accounttype(G, B).;true;true
8;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
8;false;tweets(A, D).;true;true
8;false,true;follows(E, A), tweets(E, D).;true;true
8;false,true,false;tweets(F, D), recursion_accounttype(F, B).;true;true
8;false,false;follows(G, A).;true;true
9;;accounttype(A, B) :- follows(A, C), follows(C, D).;true;true
9;false;recursion_accounttype(F, B).;true;true
9;false,true;follows(G, F), follows(G, A).;true;true
9;false,false;follows(A, H).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), tweets(C, D) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( follows(A, E), tweets(A, G) )
%   | | | then return 0.19148226843284552;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( tweets(A, H) )
%   | | then return 0.5248156017661789;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.7152917922423694;  // std dev = 0.350, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then if ( follows(E, A) )
%   | | | then return 0.7194734122109544;  // std dev = 3.65e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.7194734122109544;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.7194734122109544;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.7194734122109544;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), follows(G, A) )
%   | | then return -0.12544463852839138;  // std dev = 1.86e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( follows(A, F), tweets(A, H) )
%   | | | then return 0.16653882456488173;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( tweets(A, I) )
%   | | then return 0.448295606241962;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.6045267906174348;  // std dev = 0.350, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.5553664367462846;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), follows(A, F) )
%   | then if ( follows(F, E), follows(F, A) )
%   | | then if ( follows(A, E), follows(E, F) )
%   | | | then return -0.11231637819360639;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return -0.11231637819360639;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( follows(E, F), tweets(A, G) )
%   | | | then return 0.2796822827469339;  // std dev = 1.110, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return -0.027343479811678627;  // std dev = 0.644, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.6355551469803826;  // std dev = 0.184, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.20830984926882506;  // std dev = 0.192, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.4749335700127619;  // std dev = 0.350, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(D, C) )
%   | then return 0.4175135841583099;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.41751358415830997;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A), follows(A, E) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then if ( follows(A, F), follows(F, E) )
%   | | | then return -0.10159632948783627;  // std dev = 5.27e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return -0.1015963294878363;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( follows(A, G), follows(G, E) )
%   | | | then return 0.04390759043073157;  // std dev = 0.836, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.1292195045268287;  // std dev = 0.775, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.44844740224622825;  // std dev = 0.148, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(I, A) )
%   | | | then return -0.10978611808448491;  // std dev = 0.041, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.3212139091415879;  // std dev = 1.324, 13.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=10 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.3207118471601497;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, D), tweets(D, E) )
%   | then if ( follows(A, F), follows(F, A) )
%   | | then if ( follows(F, G), follows(G, A) )
%   | | | then return -0.09269127618926097;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.06708808502293138;  // std dev = 1.141, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | else if ( follows(H, A) )
%   | | | then return 0.09951209817206381;  // std dev = 0.576, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.2285682554826112;  // std dev = 1.299, 12.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | else if ( follows(I, A), follows(J, I) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.2969999700324141;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.08429345918612481;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return 0.42165916279906657;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), tweets(D, E) )
%   | then if ( tweets(C, F), tweets(A, F) )
%   | | then if ( follows(A, G), follows(G, A) )
%   | | | then return 0.25517224256948945;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.32236823487354715;  // std dev = 0.144, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.25517224256948945;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.23891724385642543;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(H, A) )
%   | then if ( follows(A, I), follows(H, I) )
%   | | then if ( follows(I, A) )
%   | | | then return -0.08518475138839687;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.08224766123247833;  // std dev = 1.099, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | else return -0.14042503385982427;  // std dev = 0.145, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( tweets(A, J) )
%   | | then return 0.14723215111053936;  // std dev = 0.915, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.21804630824120513;  // std dev = 0.348, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return 0.20975771563253556;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.20247687514135604;  // std dev = 0.009, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.24553361960063397;  // std dev = 0.138, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(F, A) )
%   | then if ( follows(A, G), follows(F, G) )
%   | | then return -0.024324195888778252;  // std dev = 0.261, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | | else return -0.12482352626063506;  // std dev = 0.131, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.37620662170923413;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.4162505934112679;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return 0.16946616335857928;  // std dev = 0.348, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(D, A) )
%   | | then return 0.17730920911535794;  // std dev = 0.000951, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.17138756546704634;  // std dev = 0.007, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.20369644312988652;  // std dev = 0.122, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( tweets(A, F), follows(A, G) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.4355843384275235;  // std dev = 0.495, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(I, A), follows(J, I) )
%   | | | then return -0.11199396138264811;  // std dev = 0.272, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | | else return -0.26300965217553535;  // std dev = 0.139, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( follows(A, K), follows(K, L) )
%   | | then if ( recursion_accounttype(L, B) )
%   | | | then return 0.2825096499339841;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.3196907730289072;  // std dev = 0.487, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.10142069706169529;  // std dev = 0.326, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( tweets(A, E), recursion_accounttype(D, B) )
%   | | then return 0.15089234065616827;  // std dev = 0.003, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.2034772206999945;  // std dev = 0.072, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.136252326477308;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( tweets(A, F) )
%   | then if ( follows(G, A), tweets(G, F) )
%   | | then if ( follows(A, H), follows(H, A) )
%   | | | then return -0.02227355474850344;  // std dev = 1.004, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | | | else return -0.08430533956015256;  // std dev = 0.042, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( tweets(I, F), recursion_accounttype(I, B) )
%   | | | then return 0.21123925578063285;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.20272318938654518;  // std dev = 0.154, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( follows(J, A) )
%   | | then return -0.09074753560943502;  // std dev = 0.007, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return 0.10804315029160115;  // std dev = 0.309, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, D) )
%   then if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(A, E) )
%   | | then return 0.13345039641559242;  // std dev = 0.005, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.14228038032308335;  // std dev = 0.035, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(F, A) )
%   | | then if ( follows(F, G), follows(G, A) )
%   | | | then return -0.06800944102052274;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.01994821115123149;  // std dev = 0.995, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.04281927477333628;  // std dev = 0.469, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.03376990972198959;  // std dev = 0.790, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( recursion_accounttype(I, B) )
%   | then if ( follows(J, I), follows(J, A) )
%   | | then return 0.14542021948371522;  // std dev = 0.085, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.22522117442809475;  // std dev = 0.024, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else return -0.0625772374469352;  // std dev = 0.000915, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.964563
   AUC PR    = 0.309668
   CLL	      = -0.220885
   Precision = 0.07611 at threshold = 0.5
   Recall    = 0.857143
   F1        = 0.139806


Total learning time: 3.86 seconds
Total inference time: 27.841 seconds
AUC ROC: 0.964563


Results scoring model
   AUC ROC   = 0.9968
   AUC PR    = 0.996797
   CLL	      = -0.192917
   Precision = 0.958333 at threshold = 0.5
   Recall    = 0.92
   F1        = 0.938776


Total scoring time: 0.553 seconds
Refined model CLL: -0.192917


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.964563
   AUC PR    = 0.309668
   CLL	      = -0.220885
   Precision = 0.07611 at threshold = 0.5
   Recall    = 0.857143
   F1        = 0.139806


Total learning time: 5.78 seconds
Total inference time: 27.841 seconds
AUC ROC: 0.964563
Total revision time: 5.78
Best scored revision CLL: -0.192917


Dataset: 7_yeast_twitter, Fold: 1, Type: Transfer (trRDN-B), Time: 00:32:33
{'AUC ROC': 0.964563, 'AUC PR': 0.309668, 'CLL': -0.220885, 'Precision': [0.07611, 0.5], 'Recall': 0.857143, 'F1': 0.139806, 'Learning time': 5.78, 'Inference time': 27.841, 'parameter_25': {'AUC ROC': 0.971094, 'AUC PR': 0.312921, 'CLL': -0.255904, 'Precision': [0.074896, 0.5], 'Recall': 0.857143, 'F1': 0.137755, 'Learning time': 0.93, 'Inference time': 9.575}}


Starting fold 2

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos	 examples: 156
Target test neg examples: 24648

Amount of data: 5
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
0;true;complex(A, D), complex(C, D).;false;false
0;false;interaction(E, A), interaction(E, E).;true;true
0;false,true;interaction(A, E).;true;true
0;false,true,true;complex(A, F).;false;false
0;false,true,false;complex(E, G), location(A, H).;false;false
0;false,false;interaction(A, I), recursion_proteinclass(I, B).;false;true
0;false,false,false;location(A, J), complex(A, K).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
1;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
1;true,false;interaction(E, C), interaction(E, E).;false;true
1;true,false,false;interaction(A, F), enzyme(F, G).;false;false
1;false;interaction(A, H), recursion_proteinclass(H, B).;true;true
1;false,true;enzyme(H, I), interaction(H, J).;false;false
1;false,false;interaction(A, A).;false;true
1;false,false,false;complex(A, K), interaction(L, A).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(C, D).;false;true
2;true,false;interaction(E, A), interaction(A, E).;false;true
2;true,false,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(A, G), enzyme(G, H).;true;true
2;false,false,true;interaction(G, I), phenotype(G, J).;false;false
2;false,false,false;phenotype(A, K).;false;false
3;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
3;true;interaction(D, A), interaction(D, C).;false;true
3;true,false;complex(C, E).;false;true
3;true,false,false;interaction(A, F), interaction(F, F).;false;false
3;false;interaction(A, A).;false;true
3;false,false;interaction(A, G), interaction(H, A).;true;true
3;false,false,true;complex(H, I), complex(G, I).;false;false
3;false,false,false;complex(A, J), phenotype(A, K).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
4;false;interaction(A, D), complex(D, E).;true;true
4;false,true;complex(A, E), location(A, F).;true;true
4;false,true,true;interaction(D, G), interaction(G, D).;false;false
4;false,true,false;enzyme(D, H), phenotype(A, I).;false;false
4;false,false;interaction(J, A), interaction(K, J).;true;true
4;false,false,true;recursion_proteinclass(K, B).;false;false
4;false,false,false;interaction(A, L), phenotype(L, M).;false;false
5;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
5;true;interaction(A, D), complex(D, E).;true;false
5;true,true;complex(C, F), complex(A, F).;false;true
5;true,true,false;interaction(C, C).;false;false
5;false;interaction(A, A).;false;true
5;false,false;interaction(G, A), interaction(G, G).;true;true
5;false,false,true;complex(G, H), location(A, I).;false;false
5;false,false,false;interaction(A, J), interaction(K, A).;false;false
6;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
6;false;interaction(D, A), enzyme(D, E).;true;true
6;false,true;enzyme(A, E).;true;true
6;false,true,true;interaction(A, F), interaction(D, F).;false;false
6;false,true,false;interaction(G, D), enzyme(G, H).;false;false
6;false,false;complex(A, I), location(A, J).;true;true
6;false,false,true;location(K, J), recursion_proteinclass(K, B).;false;false
6;false,false,false;phenotype(A, L).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
7;false;interaction(D, A), interaction(D, D).;true;true
7;false,true;complex(D, E), complex(A, E).;true;true
7;false,true,true;interaction(A, F).;false;false
7;false,true,false;enzyme(A, G), phenotype(D, H).;false;false
7;false,false;complex(A, I), interaction(A, J).;true;true
7;false,false,true;interaction(J, K), recursion_proteinclass(K, B).;false;false
7;false,false,false;interaction(A, L), interaction(L, L).;false;false
8;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
8;false;complex(A, D).;true;true
8;false,true;interaction(E, A), complex(E, D).;true;true
8;false,true,true;interaction(E, E).;false;false
8;false,true,false;complex(F, D), recursion_proteinclass(F, B).;false;false
8;false,false;interaction(G, A), phenotype(G, H).;true;true
8;false,false,true;interaction(A, A).;false;false
8;false,false,false;phenotype(A, I).;false;false
9;;proteinclass(A, B) :- interaction(A, C), interaction(C, D).;true;true
9;true;recursion_proteinclass(D, B), interaction(D, E).;false;false
9;false;phenotype(A, F).;true;true
9;false,true;phenotype(G, F), recursion_proteinclass(G, B).;true;false
9;false,true,true;interaction(H, G), interaction(H, A).;false;false
9;false,false;interaction(A, I), location(A, J).;true;true
9;false,false,true;location(I, K).;false;false
9;false,false,false;interaction(L, A), location(L, M).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), tweets(C, D) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, E), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(C, E), follows(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, A) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(H, G) )
%   | | then return 0.7194734122109545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, I), follows(A, J) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.16653882456488175;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C) )
%   | then return 0.5553664367462845;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A) )
%   | | then if ( follows(F, E) )
%   | | | then return 0.0559007939823161;  // std dev = 0.840, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.8087609094822314;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(C, D) )
%   | then return 0.41751358415830997;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(A, F) )
%   | | then if ( tweets(F, G), tweets(E, G) )
%   | | | then return 0.04699176854096206;  // std dev = 0.832, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.6532187748494173;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(D, A), tweets(D, E) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(F, D), follows(D, F) )
%   | | | then return 0.040215458989670425;  // std dev = 0.565, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.03817169552746729;  // std dev = 0.348, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.49499997234708903;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(D, E) )
%   | then if ( tweets(C, F), tweets(A, F) )
%   | | then return 0.38748963985097973;  // std dev = 0.187, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(C, C) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5203171553637486;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G), follows(G, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(H, A), follows(A, I) )
%   | | | then return -0.0925059903454451;  // std dev = 0.393, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return 0.3740219667119775;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.33473109995300554;  // std dev = 0.180, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, D) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then return -0.07949336765999955;  // std dev = 0.396, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( follows(D, F) )
%   | | | then return 0.2913115456282457;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.267634527181039;  // std dev = 0.154, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, D), follows(D, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E), follows(F, A) )
%   | | then if ( follows(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.2892118711461298;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return -0.10946797347701309;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( follows(H, A), follows(H, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.04600270205498119;  // std dev = 0.344, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.2202348367524001;  // std dev = 0.133, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( tweets(A, D) )
%   | then if ( follows(A, E), tweets(E, D) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.016047753365334164;  // std dev = 0.288, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.038626525611964835;  // std dev = 0.345, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(D, C) )
%   then if ( recursion_accounttype(D, B), follows(E, D) )
%   | then return 0.19845400703237567;  // std dev = 0.123, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return -0.12829084314825695;  // std dev = 0.083, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( recursion_accounttype(F, B) )
%   | then if ( follows(F, G), follows(A, G) )
%   | | then return 0.25054550628184347;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.926933
   AUC PR    = 0.300191
   CLL	      = -0.31613
   Precision = 0.033208 at threshold = 0.5
   Recall    = 0.846154
   F1        = 0.063907


Total learning time: 0.768 seconds
Total inference time: 10.991 seconds
AUC ROC: 0.926933


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.159486
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.372 seconds
Parameter learned model CLL: -0.159486


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'tweets(A, D), tweets(C, D)', 'false': 'follows(A, E), follows(E, E)', 'false,false': 'follows(F, A), recursion_accounttype(F, B)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.0, 0, 2], 'true,false': [0.0, 0, 1], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 3, 0], 'false,false,false,false': [0.816, 2, 1]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'true,false': 'follows(C, E), follows(E, E)', 'true,false,false': 'follows(F, A)', 'false': 'follows(G, A), recursion_accounttype(G, B)', 'false,true': 'follows(H, G)', 'false,false': 'follows(A, A)', 'false,false,false': 'tweets(A, I), follows(A, J)'}, {'true,true': [0.0, 0, 2], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 1], 'false,true,false': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 3, 0], 'false,false,false,false': [0.816, 2, 1]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A)', 'false,false,true': 'follows(F, E)'}, {'true,true': [0.0, 0, 2], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.84, 5, 2], 'false,false,true,false': [0.0, 0, 0], 'false,false,false': [0.0, 0, 1]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(A, D), follows(C, D)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A), follows(A, F)', 'false,false,true': 'tweets(F, G), tweets(E, G)', 'false,false,false': 'tweets(A, H)'}, {'true,true': [0.0, 0, 2], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.832, 5, 2], 'false,false,true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 0, 1]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(D, A), tweets(D, E)', 'false,true': 'tweets(A, E)', 'false,true,true': 'follows(F, D), follows(D, F)', 'false,false': 'follows(A, G), follows(G, H)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true': [0.0, 0, 2], 'false,true,true,true': [0.565, 3, 1], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.348, 2, 1], 'false,false,true,true': [0.0, 0, 1], 'false,false,true,false': [0.0, 0, 0], 'false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), tweets(D, E)', 'true,true': 'tweets(C, F), tweets(A, F)', 'true,true,false': 'follows(C, C)', 'false': 'follows(A, A)', 'false,false': 'follows(A, G), follows(G, G)', 'false,false,false': 'follows(H, A), follows(A, I)'}, {'true,true,true': [0.187, 0, 2], 'true,true,false,true': [0.0, 0, 0], 'true,true,false,false': [0.0, 0, 1], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.393, 5, 1], 'false,false,false,false': [0.0, 0, 1]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(A, D)', 'false,true': 'follows(E, A), follows(E, D)', 'false,true,false': 'follows(D, F)'}, {'true': [0.18, 0, 3], 'false,true,true': [0.396, 5, 1], 'false,true,false,true': [0.0, 0, 1], 'false,true,false,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, D)', 'false,false': 'tweets(A, E), follows(F, A)', 'false,false,true': 'follows(G, F), recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A), follows(H, H)'}, {'true': [0.154, 0, 3], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 1], 'false,false,true,false': [0.0, 3, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.344, 2, 1]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,true': 'follows(A, E), tweets(E, D)', 'false,true,true': 'follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,true': 'follows(A, A)'}, {'true': [0.133, 0, 3], 'false,true,true,true': [0.0, 0, 0], 'false,true,true,false': [0.288, 3, 1], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.345, 2, 1], 'false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(C, A), follows(D, C)', 'true': 'recursion_accounttype(D, B), follows(E, D)', 'false': 'recursion_accounttype(F, B)', 'false,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.123, 0, 4], 'true,false': [0.083, 5, 0], 'false,true,true': [0.0, 0, 1], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [1.4802973661668753e-16, 0.20408163265306126], 'false': [nan, 0.20408163265306126], 'false,false': [0.0, 0.1388888888888889], 'false,false,false': [0.0, 0.22222222222222224], 'true': [0.0, 0.0]}, {'': [0.0, 0.17332296455485016], 'false': [0.0, 0.1324246967910963], 'false,false': [nan, 0.13242469679109634], 'false,false,false': [0.0, 0.2222222222222222], 'true': [0.0, 0.0], 'false,true': [0.0, nan], 'true,false': [nan, 0.0], 'true,false,false': [0.0, nan]}, {'': [0.0, 0.15024096399887477], 'false': [nan, 0.15024096399887477], 'false,false': [0.10085416466703864, 0.0], 'false,false,true': [0.10085416466703864, nan], 'true': [0.0, nan]}, {'': [0.0, 0.12680222168649283], 'false': [nan, 0.1268022216864928], 'false,false': [0.09897792688734927, 0.0], 'false,false,true': [0.09897792688734927, nan], 'true': [0.0, nan], 'false,false,false': [nan, 0.0]}, {'': [0.0, 0.10798975658597697], 'false': [0.09746356328850062, 0.0], 'false,true': [0.07990935442961056, 0.1208667882608744], 'false,true,true': [0.07990935442961056, nan], 'false,false': [0.0, nan], 'false,false,true': [0.0, nan]}, {'': [0.015592628832741817, 0.048659236887854056], 'false': [nan, 0.048659236887854056], 'false,false': [nan, 0.048659236887854056], 'false,false,false': [0.02567649045732891, 0.0], 'true': [0.015592628832741817, nan], 'true,true': [0.01750789362334773, 0.0], 'true,true,false': [nan, 0.0]}, {'': [0.010833678476804868, 0.039290365713163695], 'false': [0.039290365713163695, nan], 'false,true': [0.026196433753161965, 0.0], 'false,true,false': [0.0, nan]}, {'': [0.007949581857286234, 0.03427048328985859], 'false': [nan, 0.03427048328985859], 'false,false': [0.029802303470387505, 0.03947903949179108], 'false,false,false': [nan, 0.03947903949179108], 'false,false,true': [0.0, -2.3129646346357427e-18]}, {'': [0.005868852820521371, 0.02902996748802326], 'false': [0.020764754124386775, 0.03975893714077749], 'false,false': [0.03975893714077749, nan], 'false,false,true': [nan, 0.03975893714077749], 'false,true': [0.020764754124386775, nan], 'false,true,true': [nan, 0.020764754124386775]}, {'': [0.028823663706962894, 0.0], 'true': [0.0037998469295610696, 0.0013928517424114466], 'false': [0.0, nan], 'false,true': [0.0, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
0;true;tweets(A, D), tweets(C, D).;true;true
0;false;follows(F, A), recursion_accounttype(F, B).;true;true
0;false,false;tweets(A, G).;true;true
1;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
1;true;follows(C, D), recursion_accounttype(D, B).;true;true
1;false;follows(G, A), recursion_accounttype(G, B).;true;true
1;false,false;tweets(A, I), follows(A, J).;true;true
2;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;false;follows(E, A).;true;true
3;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
3;false;follows(E, A), follows(A, F).;true;true
4;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
4;false;follows(D, A), tweets(D, E).;true;true
5;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
5;true;tweets(C, F), tweets(A, F).;true;true
5;false;follows(H, A), follows(A, I).;true;true
6;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
6;false;follows(E, A), follows(E, D).;true;true
7;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
7;false;tweets(A, E), follows(F, A).;true;true
7;false,true;follows(G, F), recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A), follows(D, C).;true;true
9;true;recursion_accounttype(D, B), follows(E, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), tweets(C, D) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( tweets(A, F) )
%   | | then return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else return 0.7194734122109545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( tweets(A, F), follows(A, G) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.16653882456488175;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.5553664367462845;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(D, A) )
%   | then if ( tweets(A, E) )
%   | | then return 0.05460432554136632;  // std dev = 0.578, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.05762941857024914;  // std dev = 0.610, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return 0.8087609094822314;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.41751358415830997;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(D, A), follows(A, E) )
%   | then if ( tweets(A, F) )
%   | | then return 0.04705367932270413;  // std dev = 0.571, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.04682381003101524;  // std dev = 0.605, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return 0.6532187748494173;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(D, A), tweets(D, E) )
%   | then if ( tweets(A, F) )
%   | | then return 0.04039216844714933;  // std dev = 0.566, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.03787082690167493;  // std dev = 0.602, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return 0.49499997234708903;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), tweets(A, D) )
%   | then return 0.38762166059084896;  // std dev = 0.187, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else return 0.5200027180218671;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), follows(A, F) )
%   | then return -0.09251787771969798;  // std dev = 0.393, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | else return 0.3740219667119775;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.3347246226327245;  // std dev = 0.180, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(D, A), follows(D, E) )
%   | then return -0.07950384598602213;  // std dev = 0.397, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | else return 0.2913115456282457;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.26763200971796375;  // std dev = 0.154, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( tweets(A, D), follows(E, A) )
%   | then if ( follows(F, E), recursion_accounttype(F, B) )
%   | | then return 0.2892164688482368;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return -0.1093627135246733;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return -0.04612791090606381;  // std dev = 0.344, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.2202343186351828;  // std dev = 0.133, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( tweets(A, D) )
%   | then return -0.01598161715565761;  // std dev = 0.288, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return -0.03872814191514131;  // std dev = 0.346, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(D, C) )
%   then if ( recursion_accounttype(D, B), follows(E, D) )
%   | then return 0.19845216571793553;  // std dev = 0.123, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return -0.12830085721141787;  // std dev = 0.084, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.25058810020793265;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */


Results
   AUC ROC   = 0.9029
   AUC PR    = 0.186849
   CLL	      = -0.534395
   Precision = 0.017613 at threshold = 0.5
   Recall    = 0.891026
   F1        = 0.034543


Total learning time: 0.792 seconds
Total inference time: 8.819 seconds
AUC ROC: 0.9029


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.159497
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.352 seconds
Refined model CLL: -0.159497


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.926933
   AUC PR    = 0.300191
   CLL	      = -0.31613
   Precision = 0.033208 at threshold = 0.5
   Recall    = 0.846154
   F1        = 0.063907


Total learning time: 2.2840000000000003 seconds
Total inference time: 10.991 seconds
AUC ROC: 0.926933
Total revision time: 2.2840000000000003
Best scored revision CLL: -0.159486


Dataset: 7_yeast_twitter, Fold: 2, Type: Transfer (trRDN-B), Time: 00:32:55
{'AUC ROC': 0.926933, 'AUC PR': 0.300191, 'CLL': -0.31613, 'Precision': [0.033208, 0.5], 'Recall': 0.846154, 'F1': 0.063907, 'Learning time': 2.2840000000000003, 'Inference time': 10.991, 'parameter_5': {'AUC ROC': 0.926933, 'AUC PR': 0.300191, 'CLL': -0.31613, 'Precision': [0.033208, 0.5], 'Recall': 0.846154, 'F1': 0.063907, 'Learning time': 0.768, 'Inference time': 10.991}}


Amount of data: 10
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
0;true;complex(A, D), complex(C, D).;false;false
0;false;interaction(E, A), interaction(E, E).;true;true
0;false,true;interaction(A, E).;true;true
0;false,true,true;complex(A, F).;false;false
0;false,true,false;complex(E, G), location(A, H).;false;false
0;false,false;interaction(A, I), recursion_proteinclass(I, B).;false;true
0;false,false,false;location(A, J), complex(A, K).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
1;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
1;true,false;interaction(E, C), interaction(E, E).;false;true
1;true,false,false;interaction(A, F), enzyme(F, G).;false;false
1;false;interaction(A, H), recursion_proteinclass(H, B).;true;true
1;false,true;enzyme(H, I), interaction(H, J).;false;false
1;false,false;interaction(A, A).;false;true
1;false,false,false;complex(A, K), interaction(L, A).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(C, D).;false;true
2;true,false;interaction(E, A), interaction(A, E).;false;true
2;true,false,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(A, G), enzyme(G, H).;true;true
2;false,false,true;interaction(G, I), phenotype(G, J).;false;false
2;false,false,false;phenotype(A, K).;false;false
3;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
3;true;interaction(D, A), interaction(D, C).;false;true
3;true,false;complex(C, E).;false;true
3;true,false,false;interaction(A, F), interaction(F, F).;false;false
3;false;interaction(A, A).;false;true
3;false,false;interaction(A, G), interaction(H, A).;true;true
3;false,false,true;complex(H, I), complex(G, I).;false;false
3;false,false,false;complex(A, J), phenotype(A, K).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
4;false;interaction(A, D), complex(D, E).;true;true
4;false,true;complex(A, E), location(A, F).;true;true
4;false,true,true;interaction(D, G), interaction(G, D).;false;false
4;false,true,false;enzyme(D, H), phenotype(A, I).;false;false
4;false,false;interaction(J, A), interaction(K, J).;true;true
4;false,false,true;recursion_proteinclass(K, B).;false;false
4;false,false,false;interaction(A, L), phenotype(L, M).;false;false
5;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
5;true;interaction(A, D), complex(D, E).;true;false
5;true,true;complex(C, F), complex(A, F).;false;true
5;true,true,false;interaction(C, C).;false;false
5;false;interaction(A, A).;false;true
5;false,false;interaction(G, A), interaction(G, G).;true;true
5;false,false,true;complex(G, H), location(A, I).;false;false
5;false,false,false;interaction(A, J), interaction(K, A).;false;false
6;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
6;false;interaction(D, A), enzyme(D, E).;true;true
6;false,true;enzyme(A, E).;true;true
6;false,true,true;interaction(A, F), interaction(D, F).;false;false
6;false,true,false;interaction(G, D), enzyme(G, H).;false;false
6;false,false;complex(A, I), location(A, J).;true;true
6;false,false,true;location(K, J), recursion_proteinclass(K, B).;false;false
6;false,false,false;phenotype(A, L).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
7;false;interaction(D, A), interaction(D, D).;true;true
7;false,true;complex(D, E), complex(A, E).;true;true
7;false,true,true;interaction(A, F).;false;false
7;false,true,false;enzyme(A, G), phenotype(D, H).;false;false
7;false,false;complex(A, I), interaction(A, J).;true;true
7;false,false,true;interaction(J, K), recursion_proteinclass(K, B).;false;false
7;false,false,false;interaction(A, L), interaction(L, L).;false;false
8;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
8;false;complex(A, D).;true;true
8;false,true;interaction(E, A), complex(E, D).;true;true
8;false,true,true;interaction(E, E).;false;false
8;false,true,false;complex(F, D), recursion_proteinclass(F, B).;false;false
8;false,false;interaction(G, A), phenotype(G, H).;true;true
8;false,false,true;interaction(A, A).;false;false
8;false,false,false;phenotype(A, I).;false;false
9;;proteinclass(A, B) :- interaction(A, C), interaction(C, D).;true;true
9;true;recursion_proteinclass(D, B), interaction(D, E).;false;false
9;false;phenotype(A, F).;true;true
9;false,true;phenotype(G, F), recursion_proteinclass(G, B).;true;false
9;false,true,true;interaction(H, G), interaction(H, A).;false;false
9;false,false;interaction(A, I), location(A, J).;true;true
9;false,false,true;location(I, K).;false;false
9;false,false,false;interaction(L, A), location(L, M).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), tweets(C, D) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, E), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.0803711573217344;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | | else return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(C, E), follows(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, A) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(H, G) )
%   | | then return 0.7194734122109545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, I), follows(A, J) )
%   | | | then return 0.09808102275960012;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return 0.04519015482052453;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C) )
%   | then return 0.5553664367462845;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A) )
%   | | then if ( follows(F, E) )
%   | | | then return 0.10102128643822085;  // std dev = 1.455, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | | else return -0.16499151751033914;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.838439252054777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(C, D) )
%   | then return 0.4175135841583099;  // std dev = 1.49e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(A, F) )
%   | | then if ( tweets(F, G), tweets(E, G) )
%   | | | then return 0.08725134620160616;  // std dev = 1.444, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, H) )
%   | | | then return -0.17172975972631405;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0.6917304209978805;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(D, A), tweets(D, E) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(F, D), follows(D, F) )
%   | | | then return 0.15054147372334362;  // std dev = 1.246, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return -0.15455828040117567;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.050041065923583525;  // std dev = 0.279, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.5290899203380521;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(D, E) )
%   | then if ( tweets(C, F), tweets(A, F) )
%   | | then return 0.3091101142179058;  // std dev = 0.187, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(C, C) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.3880981801546373;  // std dev = 0.188, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G), follows(G, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(H, A), follows(A, I) )
%   | | | then return 0.0073997299278279775;  // std dev = 1.277, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
%   | | | else return 0.11477613715461318;  // std dev = 0.401, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.2685375299080002;  // std dev = 0.246, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(A, D) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then return -0.06428281148113077;  // std dev = 0.987, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | | else if ( follows(D, F) )
%   | | | then return 0.5763919239140085;  // std dev = 0.290, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.18545316609836232;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.22140650297709352;  // std dev = 0.218, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(A, D), follows(D, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E), follows(F, A) )
%   | | then if ( follows(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.575504394913633;  // std dev = 0.389, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.18496452824533963;  // std dev = 0.077, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( follows(H, A), follows(H, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06740555594223896;  // std dev = 0.365, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1870627991922261;  // std dev = 0.194, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( tweets(A, D) )
%   | then if ( follows(A, E), tweets(E, D) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04517760210817115;  // std dev = 0.959, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | else if ( tweets(F, D), recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.13584387027341538;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.057130595153648434;  // std dev = 0.368, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(D, C) )
%   then if ( recursion_accounttype(D, B), follows(E, D) )
%   | then return 0.2580659132973088;  // std dev = 0.579, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.16524728587897772;  // std dev = 0.063, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( recursion_accounttype(F, B) )
%   | then if ( follows(F, G), follows(A, G) )
%   | | then return 0.2730444774431374;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(H, A) )
%   | | then return -0.11400022452112978;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.95023
   AUC PR    = 0.327157
   CLL	      = -0.338169
   Precision = 0.051192 at threshold = 0.5
   Recall    = 0.839744
   F1        = 0.096501


Total learning time: 0.723 seconds
Total inference time: 11.996 seconds
AUC ROC: 0.95023


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.215448
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.9
   F1        = 0.947368


Total scoring time: 0.399 seconds
Parameter learned model CLL: -0.215448


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'tweets(A, D), tweets(C, D)', 'false': 'follows(A, E), follows(E, E)', 'false,false': 'follows(F, A), recursion_accounttype(F, B)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.0, 0, 4], 'true,false': [0.0, 0, 2], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [1.247, 7, 2], 'false,false,false,false': [0.866, 3, 1]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'true,false': 'follows(C, E), follows(E, E)', 'true,false,false': 'follows(F, A)', 'false': 'follows(G, A), recursion_accounttype(G, B)', 'false,true': 'follows(H, G)', 'false,false': 'follows(A, A)', 'false,false,false': 'tweets(A, I), follows(A, J)'}, {'true,true': [0.0, 0, 5], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 1], 'false,true,false': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [1.225, 6, 2], 'false,false,false,false': [0.894, 4, 1]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A)', 'false,false,true': 'follows(F, E)'}, {'true,true': [0.0, 0, 5], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.455, 9, 4], 'false,false,true,false': [0.0, 1, 0], 'false,false,false': [0.0, 0, 1]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(A, D), follows(C, D)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A), follows(A, F)', 'false,false,true': 'tweets(F, G), tweets(E, G)', 'false,false,false': 'tweets(A, H)'}, {'true,true': [1.49e-08, 0, 5], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.444, 9, 4], 'false,false,true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 1, 0], 'false,false,false,false': [0.0, 0, 1]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(D, A), tweets(D, E)', 'false,true': 'tweets(A, E)', 'false,true,true': 'follows(F, D), follows(D, F)', 'false,false': 'follows(A, G), follows(G, H)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true': [0.0, 0, 5], 'false,true,true,true': [1.246, 5, 3], 'false,true,true,false': [0.0, 1, 0], 'false,true,false': [0.279, 4, 1], 'false,false,true,true': [0.0, 0, 1], 'false,false,true,false': [0.0, 0, 0], 'false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), tweets(D, E)', 'true,true': 'tweets(C, F), tweets(A, F)', 'true,true,false': 'follows(C, C)', 'false': 'follows(A, A)', 'false,false': 'follows(A, G), follows(G, G)', 'false,false,false': 'follows(H, A), follows(A, I)'}, {'true,true,true': [0.187, 0, 4], 'true,true,false,true': [0.0, 0, 0], 'true,true,false,false': [0.188, 0, 2], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [1.277, 9, 3], 'false,false,false,false': [0.401, 1, 1]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(A, D)', 'false,true': 'follows(E, A), follows(E, D)', 'false,true,false': 'follows(D, F)', 'false,false': 'tweets(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true': [0.246, 0, 6], 'false,true,true': [0.987, 9, 2], 'false,true,false,true': [0.29, 0, 2], 'false,true,false,false': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 1, 0], 'false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, D)', 'false,false': 'tweets(A, E), follows(F, A)', 'false,false,true': 'follows(G, F), recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A), follows(H, H)'}, {'true': [0.218, 0, 6], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.389, 0, 3], 'false,false,true,false': [0.077, 7, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.365, 3, 1]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,true': 'follows(A, E), tweets(E, D)', 'false,true,true': 'follows(E, E)', 'false,true,false': 'tweets(F, D), recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(A, A)'}, {'true': [0.194, 0, 6], 'false,true,true,true': [0.0, 0, 0], 'false,true,true,false': [0.959, 6, 3], 'false,true,false,true': [0.0, 0, 0], 'false,true,false,false': [0.0, 1, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.368, 3, 1], 'false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(C, A), follows(D, C)', 'true': 'recursion_accounttype(D, B), follows(E, D)', 'false': 'recursion_accounttype(F, B)', 'false,true': 'follows(F, G), follows(A, G)', 'false,false': 'follows(H, A)'}, {'true,true': [0.579, 0, 9], 'true,false': [0.063, 9, 0], 'false,true,true': [0.0, 0, 1], 'false,true,false': [0.0, 0, 0], 'false,false,true': [0.0, 1, 0], 'false,false,false': [0.0, 0, 0]}]]
[{'': [-1.4802973661668753e-16, 0.20408163265306106], 'false': [nan, 0.20408163265306106], 'false,false': [0.0, 0.1775147928994083], 'false,false,false': [0.17283950617283952, 0.18750000000000003], 'true': [0.0, 0.0]}, {'': [7.401486830834377e-17, 0.19211288520288478], 'false': [0.0, 0.17747481016573008], 'false,false': [nan, 0.17747481016573016], 'false,false,false': [0.18750000000000008, 0.15971300248545273], 'true': [0.0, 0.0], 'false,true': [0.0, nan], 'true,false': [nan, 0.0], 'true,false,false': [0.0, nan]}, {'': [-4.4408920985006264e-17, 0.18118229159462898], 'false': [nan, 0.18118229159462895], 'false,false': [0.15597924903143578, 0.0], 'false,false,true': [0.16292316624132933, 0.0], 'true': [-4.4408920985006264e-17, nan]}, {'': [4.4408920985006264e-17, 0.16726115440570952], 'false': [nan, 0.16726115440570952], 'false,false': [0.16033915954545475, 0.1863908709240647], 'false,false,false': [0.0, 0.0], 'false,false,true': [0.16033915954545475, nan], 'true': [4.4408920985006264e-17, nan]}, {'': [-2.2204460492503132e-17, 0.1547698922139709], 'false': [0.15097400817058723, 0.0], 'false,true': [0.18159182676262695, 0.07800138447815487], 'false,true,true': [0.1939479317783062, 0.0], 'false,false': [0.0, nan], 'false,false,true': [0.0, nan]}, {'': [0.01309482619253575, 0.129314425372462], 'false': [nan, 0.129314425372462], 'false,false': [nan, 0.129314425372462], 'false,false,false': [0.13582312402745553, 0.08037963958913011], 'true': [0.01309482619253575, nan], 'true,true': [0.00872788199388308, 0.01766930488289062], 'true,true,false': [nan, 0.01766930488289062]}, {'': [0.010081604252463877, 0.1283725144110034], 'false': [0.13479848198285643, 0.0], 'false,true': [0.08849847798348845, 0.04213271303246102], 'false,true,false': [0.04213271303246102, nan], 'false,false': [0.0, nan], 'false,false,true': [nan, 0.0]}, {'': [0.007950250657087765, 0.11001082433237815], 'false': [nan, 0.11001082433237815], 'false,false': [0.13717008494556465, 0.03337816322648074], 'false,false,true': [0.05043758558038791, 0.0008472611748987621], 'false,false,false': [nan, 0.03337816322648073]}, {'': [0.006284694041950006, 0.07897822532407076], 'false': [0.0949768992976306, 0.03391678406118025], 'false,true': [0.1022530107621587, 0.0], 'false,true,true': [nan, 0.1022530107621587], 'false,false': [0.03391678406118025, nan], 'false,false,true': [nan, 0.03391678406118025], 'false,true,false': [nan, 0.0]}, {'': [0.06365371435543338, 0.0374509003296521], 'true': [0.03726984231596812, 0.0004405540964674178], 'false': [0.0, 0.0], 'false,true': [0.0, nan], 'false,false': [0.0, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
0;true;tweets(A, D), tweets(C, D).;true;true
0;false;follows(F, A), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
1;true;follows(C, D), recursion_accounttype(D, B).;true;true
1;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;false;follows(E, A).;true;true
2;false,true;follows(F, E).;true;true
3;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
3;false;follows(E, A), follows(A, F).;true;true
3;false,false;tweets(A, H).;true;true
4;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
4;false;follows(D, A), tweets(D, E).;true;true
4;false,true;tweets(A, E).;true;true
4;false,true,true;follows(F, D), follows(D, F).;true;true
6;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
6;false;follows(A, D).;true;true
7;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
7;false;tweets(A, E), follows(F, A).;true;true
7;false,true;follows(G, F), recursion_accounttype(G, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;tweets(A, D).;true;true
8;false,true;follows(A, E), tweets(E, D).;true;true
9;;accounttype(A, B) :- follows(C, A), follows(D, C).;true;true
9;true;recursion_accounttype(D, B), follows(E, D).;true;true
9;false;recursion_accounttype(F, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), tweets(C, D) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, F), follows(F, A) )
%   | | then if ( follows(F, G), follows(G, A) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.7194734122109545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, F), follows(F, A) )
%   | | then if ( follows(F, G), follows(G, A) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0.448295606241962;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.16653882456488175;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.5553664367462845;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D) )
%   | | then if ( tweets(A, F), follows(A, G) )
%   | | | then return 0.14914887036746602;  // std dev = 1.114, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.005435642329539353;  // std dev = 0.619, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return -0.19123909051776852;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0.8087609094822314;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.4175135841583099;  // std dev = 1.49e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(D, A), follows(A, E) )
%   | then if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.6149223962050475;  // std dev = 0.118, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.1687382273308268;  // std dev = 0.187, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.05386135013294893;  // std dev = 0.578, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( tweets(A, H) )
%   | | then return -0.1920812146586369;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.6532187748494173;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(D, A), tweets(D, E) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(F, D), follows(D, F) )
%   | | | then return 0.0754833575259277;  // std dev = 0.880, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return -0.14161310173754002;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.015040996545687422;  // std dev = 0.588, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.49499997234708903;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, A) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A) )
%   | | then return 0.25517224256948945;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.4272411320849539;  // std dev = 0.239, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( tweets(A, E) )
%   | | then return -0.15643213284678037;  // std dev = 0.179, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.11994430191548483;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.02471088630738366;  // std dev = 0.429, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.25047952310698723;  // std dev = 0.205, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(A, D) )
%   | then if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.33109466390920755;  // std dev = 0.149, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.13611752040798955;  // std dev = 0.163, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.011176823766968533;  // std dev = 0.412, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return -0.17822347717223516;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.20791954304136628;  // std dev = 0.185, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( tweets(A, D), follows(E, A) )
%   | then if ( follows(F, E), recursion_accounttype(F, B) )
%   | | then return 0.2642084546257178;  // std dev = 0.128, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.12601409609821648;  // std dev = 0.058, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0.009717635033993602;  // std dev = 0.411, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.17674705668349533;  // std dev = 0.166, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( tweets(A, D) )
%   | then if ( follows(A, E), tweets(E, D) )
%   | | then return -2.517990317321355E-4;  // std dev = 0.165, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | else return -0.13792076785721288;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0.008444752120845802;  // std dev = 0.410, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(D, C) )
%   then if ( recursion_accounttype(D, B), follows(E, D) )
%   | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.1531736027252613;  // std dev = 0.150, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.21731641860129772;  // std dev = 0.110, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( tweets(A, G), follows(A, H) )
%   | | then return -0.11050007419949273;  // std dev = 0.137, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.11360996394720735;  // std dev = 0.010, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( recursion_accounttype(I, B) )
%   | then return 0.36145586580715083;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return -0.10144766919719266;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */


Results
   AUC ROC   = 0.971732
   AUC PR    = 0.287589
   CLL	      = -0.328777
   Precision = 0.036862 at threshold = 0.5
   Recall    = 0.948718
   F1        = 0.070966


Total learning time: 1.479 seconds
Total inference time: 144.786 seconds
AUC ROC: 0.971732


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.144984
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.47 seconds
Refined model CLL: -0.144984


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.971732
   AUC PR    = 0.287589
   CLL	      = -0.328777
   Precision = 0.036862 at threshold = 0.5
   Recall    = 0.948718
   F1        = 0.070966


Total learning time: 3.0709999999999997 seconds
Total inference time: 144.786 seconds
AUC ROC: 0.971732
Total revision time: 3.0709999999999997
Best scored revision CLL: -0.144984


Dataset: 7_yeast_twitter, Fold: 2, Type: Transfer (trRDN-B), Time: 00:35:36
{'AUC ROC': 0.971732, 'AUC PR': 0.287589, 'CLL': -0.328777, 'Precision': [0.036862, 0.5], 'Recall': 0.948718, 'F1': 0.070966, 'Learning time': 3.0709999999999997, 'Inference time': 144.786, 'parameter_10': {'AUC ROC': 0.95023, 'AUC PR': 0.327157, 'CLL': -0.338169, 'Precision': [0.051192, 0.5], 'Recall': 0.839744, 'F1': 0.096501, 'Learning time': 0.723, 'Inference time': 11.996}}


Amount of data: 15
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
0;true;complex(A, D), complex(C, D).;false;false
0;false;interaction(E, A), interaction(E, E).;true;true
0;false,true;interaction(A, E).;true;true
0;false,true,true;complex(A, F).;false;false
0;false,true,false;complex(E, G), location(A, H).;false;false
0;false,false;interaction(A, I), recursion_proteinclass(I, B).;false;true
0;false,false,false;location(A, J), complex(A, K).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
1;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
1;true,false;interaction(E, C), interaction(E, E).;false;true
1;true,false,false;interaction(A, F), enzyme(F, G).;false;false
1;false;interaction(A, H), recursion_proteinclass(H, B).;true;true
1;false,true;enzyme(H, I), interaction(H, J).;false;false
1;false,false;interaction(A, A).;false;true
1;false,false,false;complex(A, K), interaction(L, A).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(C, D).;false;true
2;true,false;interaction(E, A), interaction(A, E).;false;true
2;true,false,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(A, G), enzyme(G, H).;true;true
2;false,false,true;interaction(G, I), phenotype(G, J).;false;false
2;false,false,false;phenotype(A, K).;false;false
3;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
3;true;interaction(D, A), interaction(D, C).;false;true
3;true,false;complex(C, E).;false;true
3;true,false,false;interaction(A, F), interaction(F, F).;false;false
3;false;interaction(A, A).;false;true
3;false,false;interaction(A, G), interaction(H, A).;true;true
3;false,false,true;complex(H, I), complex(G, I).;false;false
3;false,false,false;complex(A, J), phenotype(A, K).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
4;false;interaction(A, D), complex(D, E).;true;true
4;false,true;complex(A, E), location(A, F).;true;true
4;false,true,true;interaction(D, G), interaction(G, D).;false;false
4;false,true,false;enzyme(D, H), phenotype(A, I).;false;false
4;false,false;interaction(J, A), interaction(K, J).;true;true
4;false,false,true;recursion_proteinclass(K, B).;false;false
4;false,false,false;interaction(A, L), phenotype(L, M).;false;false
5;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
5;true;interaction(A, D), complex(D, E).;true;false
5;true,true;complex(C, F), complex(A, F).;false;true
5;true,true,false;interaction(C, C).;false;false
5;false;interaction(A, A).;false;true
5;false,false;interaction(G, A), interaction(G, G).;true;true
5;false,false,true;complex(G, H), location(A, I).;false;false
5;false,false,false;interaction(A, J), interaction(K, A).;false;false
6;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
6;false;interaction(D, A), enzyme(D, E).;true;true
6;false,true;enzyme(A, E).;true;true
6;false,true,true;interaction(A, F), interaction(D, F).;false;false
6;false,true,false;interaction(G, D), enzyme(G, H).;false;false
6;false,false;complex(A, I), location(A, J).;true;true
6;false,false,true;location(K, J), recursion_proteinclass(K, B).;false;false
6;false,false,false;phenotype(A, L).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
7;false;interaction(D, A), interaction(D, D).;true;true
7;false,true;complex(D, E), complex(A, E).;true;true
7;false,true,true;interaction(A, F).;false;false
7;false,true,false;enzyme(A, G), phenotype(D, H).;false;false
7;false,false;complex(A, I), interaction(A, J).;true;true
7;false,false,true;interaction(J, K), recursion_proteinclass(K, B).;false;false
7;false,false,false;interaction(A, L), interaction(L, L).;false;false
8;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
8;false;complex(A, D).;true;true
8;false,true;interaction(E, A), complex(E, D).;true;true
8;false,true,true;interaction(E, E).;false;false
8;false,true,false;complex(F, D), recursion_proteinclass(F, B).;false;false
8;false,false;interaction(G, A), phenotype(G, H).;true;true
8;false,false,true;interaction(A, A).;false;false
8;false,false,false;phenotype(A, I).;false;false
9;;proteinclass(A, B) :- interaction(A, C), interaction(C, D).;true;true
9;true;recursion_proteinclass(D, B), interaction(D, E).;false;false
9;false;phenotype(A, F).;true;true
9;false,true;phenotype(G, F), recursion_proteinclass(G, B).;true;false
9;false,true,true;interaction(H, G), interaction(H, A).;false;false
9;false,false;interaction(A, I), location(A, J).;true;true
9;false,false,true;location(I, K).;false;false
9;false,false,false;interaction(L, A), location(L, M).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), tweets(C, D) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, E), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.124815601766179;  // std dev = 1.713, 15.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=4 */
%   | | | else return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.7194734122109544;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(C, E), follows(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, A) )
%   | | | then return 0.7194734122109544;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(H, G) )
%   | | then return 0.7194734122109545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, I), follows(A, J) )
%   | | | then return 0.14995812028340855;  // std dev = 1.664, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | | else return -0.00869403032143248;  // std dev = 0.929, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C) )
%   | then return 0.5553664367462846;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A) )
%   | | then if ( follows(F, E) )
%   | | | then return 0.03333530630015162;  // std dev = 1.522, 17.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=4 */
%   | | | else return -0.17869321225154353;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.5866641644827928;  // std dev = 0.424, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(C, D) )
%   | then return 0.41751358415830986;  // std dev = 2.98e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(A, F) )
%   | | then if ( tweets(F, G), tweets(E, G) )
%   | | | then return 0.04045082368102186;  // std dev = 1.506, 16.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, H) )
%   | | | then return 0.2788867804966597;  // std dev = 0.880, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.2620371848185802;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.3207118471601497;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(D, A), tweets(D, E) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(F, D), follows(D, F) )
%   | | | then return 0.03536289293055195;  // std dev = 1.386, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
%   | | | else return -0.1592969190742013;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.0250551362343621;  // std dev = 0.281, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.7113282455637957;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.34323438367877057;  // std dev = 0.774, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(D, E) )
%   | then if ( tweets(C, F), tweets(A, F) )
%   | | then return 0.3006896943051956;  // std dev = 0.249, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(C, C) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.3512157981824619;  // std dev = 0.235, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G), follows(G, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(H, A), follows(A, I) )
%   | | | then return -0.019337898214910713;  // std dev = 1.322, 15.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=3 */
%   | | | else return 0.15404813435214035;  // std dev = 1.023, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.2565688221451131;  // std dev = 0.318, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(A, D) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then return -0.0753003440054502;  // std dev = 1.010, 14.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | | else if ( follows(D, F) )
%   | | | then return 0.6584297443442411;  // std dev = 0.211, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.226933829060692;  // std dev = 0.768, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( tweets(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.23464872291029681;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.21317493580102573;  // std dev = 0.287, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(A, D), follows(D, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E), follows(F, A) )
%   | | then if ( follows(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.5925896566470724;  // std dev = 0.402, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.17784850920953527;  // std dev = 0.056, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( follows(H, A), follows(H, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.062073716616840025;  // std dev = 0.912, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.18124882860045136;  // std dev = 0.259, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( tweets(A, D) )
%   | then if ( follows(A, E), tweets(E, D) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07287521816064449;  // std dev = 1.186, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
%   | | else if ( tweets(F, D), recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1687176996827392;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11717353652529691;  // std dev = 0.577, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(D, C) )
%   then if ( recursion_accounttype(D, B), follows(E, D) )
%   | then return 0.23357763315934896;  // std dev = 0.645, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return -0.15523084857781094;  // std dev = 0.046, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else if ( recursion_accounttype(F, B) )
%   | then if ( follows(F, G), follows(A, G) )
%   | | then return 0.42084853061013355;  // std dev = 0.072, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(H, A) )
%   | | then return -0.11687341534227244;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( follows(A, I) )
%   | | | then return -0.4420793841304994;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.964379
   AUC PR    = 0.330908
   CLL	      = -0.290842
   Precision = 0.352632 at threshold = 0.5
   Recall    = 0.858974
   F1        = 0.5


Total learning time: 0.778 seconds
Total inference time: 10.762 seconds
AUC ROC: 0.964379


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.223395
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.933333
   F1        = 0.965517


Total scoring time: 0.454 seconds
Parameter learned model CLL: -0.223395


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'tweets(A, D), tweets(C, D)', 'false': 'follows(A, E), follows(E, E)', 'false,false': 'follows(F, A), recursion_accounttype(F, B)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.0, 0, 6], 'true,false': [2.11e-08, 0, 3], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [1.713, 11, 4], 'false,false,false,false': [0.894, 4, 1]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'true,false': 'follows(C, E), follows(E, E)', 'true,false,false': 'follows(F, A)', 'false': 'follows(G, A), recursion_accounttype(G, B)', 'false,true': 'follows(H, G)', 'false,false': 'follows(A, A)', 'false,false,false': 'tweets(A, I), follows(A, J)'}, {'true,true': [0.0, 0, 8], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 1], 'false,true,false': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [1.664, 9, 4], 'false,false,false,false': [0.929, 6, 1]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A)', 'false,false,true': 'follows(F, E)'}, {'true,true': [0.0, 0, 8], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.522, 13, 4], 'false,false,true,false': [0.0, 1, 0], 'false,false,false': [0.424, 1, 3]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(A, D), follows(C, D)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A), follows(A, F)', 'false,false,true': 'tweets(F, G), tweets(E, G)', 'false,false,false': 'tweets(A, H)'}, {'true,true': [2.98e-08, 0, 8], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.506, 12, 4], 'false,false,true,false': [0.0, 0, 0], 'false,false,false,true': [0.88, 2, 2], 'false,false,false,false': [0.707, 1, 1]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(D, A), tweets(D, E)', 'false,true': 'tweets(A, E)', 'false,true,true': 'follows(F, D), follows(D, F)', 'false,false': 'follows(A, G), follows(G, H)', 'false,false,true': 'recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A)'}, {'true': [0.0, 0, 8], 'false,true,true,true': [1.386, 9, 3], 'false,true,true,false': [0.0, 1, 0], 'false,true,false': [0.281, 4, 1], 'false,false,true,true': [0.0, 0, 1], 'false,false,true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.774, 1, 2]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), tweets(D, E)', 'true,true': 'tweets(C, F), tweets(A, F)', 'true,true,false': 'follows(C, C)', 'false': 'follows(A, A)', 'false,false': 'follows(A, G), follows(G, G)', 'false,false,false': 'follows(H, A), follows(A, I)'}, {'true,true,true': [0.249, 0, 6], 'true,true,false,true': [0.0, 0, 0], 'true,true,false,false': [0.235, 0, 3], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [1.322, 12, 3], 'false,false,false,false': [1.023, 3, 3]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(A, D)', 'false,true': 'follows(E, A), follows(E, D)', 'false,true,false': 'follows(D, F)', 'false,false': 'tweets(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true': [0.318, 0, 9], 'false,true,true': [1.01, 12, 2], 'false,true,false,true': [0.211, 0, 2], 'false,true,false,false': [0.768, 1, 2], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 2, 0], 'false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, D)', 'false,false': 'tweets(A, E), follows(F, A)', 'false,false,true': 'follows(G, F), recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A), follows(H, H)'}, {'true': [0.287, 0, 9], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.402, 0, 3], 'false,false,true,false': [0.056, 11, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.912, 4, 3]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,true': 'follows(A, E), tweets(E, D)', 'false,true,true': 'follows(E, E)', 'false,true,false': 'tweets(F, D), recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(A, A)'}, {'true': [0.259, 0, 9], 'false,true,true,true': [0.0, 0, 0], 'false,true,true,false': [1.186, 9, 5], 'false,true,false,true': [0.0, 0, 0], 'false,true,false,false': [0.0, 2, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.577, 4, 1], 'false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(C, A), follows(D, C)', 'true': 'recursion_accounttype(D, B), follows(E, D)', 'false': 'recursion_accounttype(F, B)', 'false,true': 'follows(F, G), follows(A, G)', 'false,false': 'follows(H, A)', 'false,false,false': 'follows(A, I)'}, {'true,true': [0.645, 0, 12], 'true,false': [0.046, 13, 0], 'false,true,true': [0.072, 0, 3], 'false,true,false': [0.0, 0, 0], 'false,false,true': [0.0, 1, 0], 'false,false,false,true': [0.0, 1, 0], 'false,false,false,false': [0.0, 0, 0]}]]
[{'': [-2.9605947323337506e-16, 0.2040816326530613], 'false': [nan, 0.2040816326530613], 'false,false': [0.0, 0.18750000000000006], 'false,false,false': [0.1955555555555554, 0.16000000000000003], 'true': [-1.4802973661668753e-16, 1.4802973661668753e-16]}, {'': [2.9605947323337506e-16, 0.19609659658391476], 'false': [0.0, 0.18729764390381595], 'false,false': [nan, 0.18729764390381606], 'false,false,false': [0.21301775147929, 0.12317090165557701], 'true': [0.0, 0.0], 'false,true': [0.0, nan], 'true,false': [nan, 0.0], 'true,false,false': [0.0, nan]}, {'': [-1.1102230246251565e-16, 0.18750296836551084], 'false': [nan, 0.187502968365511], 'false,false': [0.13109444672376921, 0.1800571606529922], 'false,false,true': [0.1363083240619424, 0.0], 'true': [-1.1102230246251565e-16, nan]}, {'': [1.1102230246251565e-16, 0.17179265294545257], 'false': [nan, 0.1717926529454525], 'false,false': [0.1417751722749336, 0.21241753379669062], 'false,false,false': [0.19353166440353103, 0.25], 'false,false,true': [0.1417751722749336, nan], 'true': [1.1102230246251565e-16, nan]}, {'': [-4.163336342344337e-17, 0.1662384745667035], 'false': [0.1310321722155271, 0.1751444673622866], 'false,false': [0.0, 0.19965268369369082], 'false,false,false': [nan, 0.19965268369369082], 'false,true': [0.15041129214505086, 0.07915494506039587], 'false,true,true': [0.16003076322818516, 0.0], 'false,false,true': [0.0, nan]}, {'': [0.013623012685566217, 0.13911099117728754], 'false': [nan, 0.13911099117728756], 'false,false': [nan, 0.13911099117728754], 'false,false,false': [0.11645881761494813, 0.17426805630503447], 'true': [0.013623012685566217, nan], 'true,true': [0.010359192062561714, 0.018448729149564264], 'true,true,false': [nan, 0.018448729149564264]}, {'': [0.011203675414630299, 0.13595314960670066], 'false': [0.1425660130946185, 0.0], 'false,true': [0.07286409629212932, 0.17159858205253878], 'false,true,false': [0.022294644632986416, 0.19665905036968523], 'false,false': [0.0, nan], 'false,false,true': [nan, 0.0]}, {'': [0.009140263414453183, 0.11532473459415137], 'false': [nan, 0.11532473459415137], 'false,false': [0.11171145605109127, 0.11881843871964999], 'false,false,false': [nan, 0.11881843871965], 'false,false,true': [0.05388502129936964, 0.00028766601922121507]}, {'': [0.007433152355359666, 0.09238014487654159], 'false': [0.09433260486466331, 0.06666415299538338], 'false,true': [0.10051279902989095, 0.0], 'false,true,true': [nan, 0.10051279902989095], 'false,false': [0.06666415299538338, nan], 'false,false,true': [nan, 0.06666415299538338], 'false,true,false': [nan, 0.0]}, {'': [0.05446911905655197, 0.12932541342386122], 'false': [0.00173386545791084, 0.026439730533872316], 'true': [0.03469365798932739, 0.00016081378495054797], 'false,false': [0.0, 0.0], 'false,true': [0.00173386545791084, nan], 'false,false,false': [0.0, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
0;true;tweets(A, D), tweets(C, D).;true;true
0;false;follows(F, A), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
1;true;follows(C, D), recursion_accounttype(D, B).;true;true
1;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;false;follows(E, A).;true;true
2;false,true;follows(F, E).;true;true
3;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
4;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
4;false;follows(D, A), tweets(D, E).;true;true
4;false,true;tweets(A, E).;true;true
4;false,true,true;follows(F, D), follows(D, F).;true;true
4;false,false;follows(A, G), follows(G, H).;true;true
6;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
6;false;follows(A, D).;true;true
7;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
7;false;tweets(A, E), follows(F, A).;true;true
7;false,true;follows(G, F), recursion_accounttype(G, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;tweets(A, D).;true;true
8;false,true;follows(A, E), tweets(E, D).;true;true
9;;accounttype(A, B) :- follows(C, A), follows(D, C).;true;true
9;true;recursion_accounttype(D, B), follows(E, D).;true;true
9;false;recursion_accounttype(F, B).;true;true
9;false,false;follows(H, A).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), tweets(C, D) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then if ( follows(F, G), follows(G, A) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.3581489350995122;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.7194734122109544;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.7194734122109544;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then if ( follows(F, G), follows(G, A) )
%   | | | then return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.308741135785635;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return 0.5170719622367217;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.5553664367462846;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D) )
%   | | then if ( tweets(A, F), follows(A, G) )
%   | | | then return 0.09439899051516364;  // std dev = 1.226, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | | | else return -0.001035909036957915;  // std dev = 0.610, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return -0.24358763124141355;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0.41257245288266;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.41751358415830986;  // std dev = 1.05e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then return 0.6411939251040484;  // std dev = 0.196, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, F), follows(A, G) )
%   | | | then return -0.14638726067368998;  // std dev = 0.143, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return -0.11221313807360633;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.3151786576185065;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.3207118471601497;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(D, A), tweets(D, E) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(F, D), follows(D, F) )
%   | | | then return 0.04083692985626746;  // std dev = 0.990, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
%   | | | else return -0.17900771291766357;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.002944457301566064;  // std dev = 0.447, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then return 0.48676009386434205;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.1534267605310087;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(C, A) )
%   | then return 0.2551722425694894;  // std dev = 7.45e-09, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.339283384766727;  // std dev = 0.106, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( tweets(A, E), follows(A, F) )
%   | then if ( tweets(G, E), recursion_accounttype(G, B) )
%   | | then return 0.46576214882377487;  // std dev = 0.274, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.1299935858335514;  // std dev = 0.042, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then return 0.016130231434530375;  // std dev = 0.407, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return -0.25400370435593894;  // std dev = 0.364, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.22944980332224946;  // std dev = 0.041, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(A, D) )
%   | then if ( follows(E, A) )
%   | | then if ( follows(F, E), follows(F, A) )
%   | | | then return -0.07457397803343381;  // std dev = 0.264, 11.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
%   | | | else return 0.14724831976565153;  // std dev = 0.654, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return 0.13810766273809771;  // std dev = 0.723, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return -0.08365348280266353;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.19173566132938544;  // std dev = 0.037, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( tweets(A, D), follows(E, A) )
%   | then if ( follows(F, E), recursion_accounttype(F, B) )
%   | | then return 0.353544049733493;  // std dev = 0.203, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, G), follows(G, A) )
%   | | | then return -0.11110984891898981;  // std dev = 0.143, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return -0.10379216864478698;  // std dev = 0.064, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( follows(H, A) )
%   | | then return -0.0960475867840815;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.10655169786585292;  // std dev = 0.727, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1639765466186125;  // std dev = 0.033, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( tweets(A, D) )
%   | then if ( follows(A, E), tweets(E, D) )
%   | | then if ( follows(A, F), follows(F, A) )
%   | | | then return 0.0033885587298496237;  // std dev = 0.605, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | | | else return 0.14265722643046652;  // std dev = 0.350, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.07036100195382551;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else return -0.1006537135707554;  // std dev = 0.608, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(D, C) )
%   then if ( recursion_accounttype(D, B), follows(E, D) )
%   | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( tweets(A, G), follows(F, A) )
%   | | | then return 0.12880698961528203;  // std dev = 3.73e-09, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.1709807062031743;  // std dev = 0.065, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.28071471236022666;  // std dev = 0.173, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( tweets(A, H) )
%   | | then return -0.0941015367049732;  // std dev = 0.044, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else return -0.08027368711477312;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( recursion_accounttype(I, B) )
%   | then return 0.2822200443120243;  // std dev = 0.061, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(J, A) )
%   | | then return -0.1616539880986404;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.5240815313152293;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */


Results
   AUC ROC   = 0.973988
   AUC PR    = 0.309902
   CLL	      = -0.327182
   Precision = 0.02726 at threshold = 0.5
   Recall    = 0.974359
   F1        = 0.053036


Total learning time: 1.952 seconds
Total inference time: 20.962 seconds
AUC ROC: 0.973988


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.153452
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.495 seconds
Refined model CLL: -0.153452


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.973988
   AUC PR    = 0.309902
   CLL	      = -0.327182
   Precision = 0.02726 at threshold = 0.5
   Recall    = 0.974359
   F1        = 0.053036


Total learning time: 3.6790000000000003 seconds
Total inference time: 20.962 seconds
AUC ROC: 0.973988
Total revision time: 3.6790000000000003
Best scored revision CLL: -0.153452


Dataset: 7_yeast_twitter, Fold: 2, Type: Transfer (trRDN-B), Time: 00:36:12
{'AUC ROC': 0.973988, 'AUC PR': 0.309902, 'CLL': -0.327182, 'Precision': [0.02726, 0.5], 'Recall': 0.974359, 'F1': 0.053036, 'Learning time': 3.6790000000000003, 'Inference time': 20.962, 'parameter_15': {'AUC ROC': 0.964379, 'AUC PR': 0.330908, 'CLL': -0.290842, 'Precision': [0.352632, 0.5], 'Recall': 0.858974, 'F1': 0.5, 'Learning time': 0.778, 'Inference time': 10.762}}


Amount of data: 20
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
0;true;complex(A, D), complex(C, D).;false;false
0;false;interaction(E, A), interaction(E, E).;true;true
0;false,true;interaction(A, E).;true;true
0;false,true,true;complex(A, F).;false;false
0;false,true,false;complex(E, G), location(A, H).;false;false
0;false,false;interaction(A, I), recursion_proteinclass(I, B).;false;true
0;false,false,false;location(A, J), complex(A, K).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
1;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
1;true,false;interaction(E, C), interaction(E, E).;false;true
1;true,false,false;interaction(A, F), enzyme(F, G).;false;false
1;false;interaction(A, H), recursion_proteinclass(H, B).;true;true
1;false,true;enzyme(H, I), interaction(H, J).;false;false
1;false,false;interaction(A, A).;false;true
1;false,false,false;complex(A, K), interaction(L, A).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(C, D).;false;true
2;true,false;interaction(E, A), interaction(A, E).;false;true
2;true,false,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(A, G), enzyme(G, H).;true;true
2;false,false,true;interaction(G, I), phenotype(G, J).;false;false
2;false,false,false;phenotype(A, K).;false;false
3;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
3;true;interaction(D, A), interaction(D, C).;false;true
3;true,false;complex(C, E).;false;true
3;true,false,false;interaction(A, F), interaction(F, F).;false;false
3;false;interaction(A, A).;false;true
3;false,false;interaction(A, G), interaction(H, A).;true;true
3;false,false,true;complex(H, I), complex(G, I).;false;false
3;false,false,false;complex(A, J), phenotype(A, K).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
4;false;interaction(A, D), complex(D, E).;true;true
4;false,true;complex(A, E), location(A, F).;true;true
4;false,true,true;interaction(D, G), interaction(G, D).;false;false
4;false,true,false;enzyme(D, H), phenotype(A, I).;false;false
4;false,false;interaction(J, A), interaction(K, J).;true;true
4;false,false,true;recursion_proteinclass(K, B).;false;false
4;false,false,false;interaction(A, L), phenotype(L, M).;false;false
5;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
5;true;interaction(A, D), complex(D, E).;true;false
5;true,true;complex(C, F), complex(A, F).;false;true
5;true,true,false;interaction(C, C).;false;false
5;false;interaction(A, A).;false;true
5;false,false;interaction(G, A), interaction(G, G).;true;true
5;false,false,true;complex(G, H), location(A, I).;false;false
5;false,false,false;interaction(A, J), interaction(K, A).;false;false
6;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
6;false;interaction(D, A), enzyme(D, E).;true;true
6;false,true;enzyme(A, E).;true;true
6;false,true,true;interaction(A, F), interaction(D, F).;false;false
6;false,true,false;interaction(G, D), enzyme(G, H).;false;false
6;false,false;complex(A, I), location(A, J).;true;true
6;false,false,true;location(K, J), recursion_proteinclass(K, B).;false;false
6;false,false,false;phenotype(A, L).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
7;false;interaction(D, A), interaction(D, D).;true;true
7;false,true;complex(D, E), complex(A, E).;true;true
7;false,true,true;interaction(A, F).;false;false
7;false,true,false;enzyme(A, G), phenotype(D, H).;false;false
7;false,false;complex(A, I), interaction(A, J).;true;true
7;false,false,true;interaction(J, K), recursion_proteinclass(K, B).;false;false
7;false,false,false;interaction(A, L), interaction(L, L).;false;false
8;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
8;false;complex(A, D).;true;true
8;false,true;interaction(E, A), complex(E, D).;true;true
8;false,true,true;interaction(E, E).;false;false
8;false,true,false;complex(F, D), recursion_proteinclass(F, B).;false;false
8;false,false;interaction(G, A), phenotype(G, H).;true;true
8;false,false,true;interaction(A, A).;false;false
8;false,false,false;phenotype(A, I).;false;false
9;;proteinclass(A, B) :- interaction(A, C), interaction(C, D).;true;true
9;true;recursion_proteinclass(D, B), interaction(D, E).;false;false
9;false;phenotype(A, F).;true;true
9;false,true;phenotype(G, F), recursion_proteinclass(G, B).;true;false
9;false,true,true;interaction(H, G), interaction(H, A).;false;false
9;false,false;interaction(A, I), location(A, J).;true;true
9;false,false,true;location(I, K).;false;false
9;false,false,false;interaction(L, A), location(L, M).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), tweets(C, D) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.8581489350995121;  // std dev = 4.21e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, E), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.058148935099512286;  // std dev = 1.789, 20.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=4 */
%   | | | else return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.7194734122109544;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( follows(C, E), follows(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, A) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(H, G) )
%   | | then return 0.7194734122109545;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, I), follows(A, J) )
%   | | | then return 0.07314425473577645;  // std dev = 1.764, 18.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=4 */
%   | | | else return -0.006220824629302933;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C) )
%   | then return 0.5553664367462846;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A) )
%   | | then if ( follows(F, E) )
%   | | | then return 0.023725933805087154;  // std dev = 1.663, 23.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=5 */
%   | | | else return -0.15859667078865486;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.59655638751647;  // std dev = 0.430, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(C, D) )
%   | then return 0.4175135841583098;  // std dev = 4.21e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( tweets(C, E) )
%   | | then return 0.41751358415830997;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, G) )
%   | | then if ( tweets(G, H), tweets(F, H) )
%   | | | then return 0.02859897621689954;  // std dev = 1.650, 22.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, I) )
%   | | | then return 0.29684671397741513;  // std dev = 0.896, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.2597876207035399;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.3207118471601497;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(D, A), tweets(D, E) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(F, D), follows(D, F) )
%   | | | then return -0.009672270534733381;  // std dev = 1.445, 17.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=3 */
%   | | | else return -0.14200883786573648;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.0756754927047489;  // std dev = 0.330, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.7092466178694441;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.3595269220345037;  // std dev = 0.796, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(D, E) )
%   | then if ( tweets(C, F), tweets(A, F) )
%   | | then return 0.2913770495843061;  // std dev = 0.271, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(C, C) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.3625340715691909;  // std dev = 0.294, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G), follows(G, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(H, A), follows(A, I) )
%   | | | then return -0.042180877709201314;  // std dev = 1.371, 20.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=3 */
%   | | | else return 0.17880566792961192;  // std dev = 1.037, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.25716289027895456;  // std dev = 0.375, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( follows(A, D) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then return -0.08258320696637167;  // std dev = 1.034, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | | else if ( follows(D, F) )
%   | | | then return 0.6711296316229773;  // std dev = 0.241, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.2351249582087239;  // std dev = 0.793, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( tweets(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.22269669694904026;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return -0.22125533128032268;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.2135142540587181;  // std dev = 0.338, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( follows(A, D), follows(D, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E), follows(F, A) )
%   | | then if ( follows(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.5121686035972239;  // std dev = 0.569, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.1511140223705386;  // std dev = 0.064, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( follows(H, A), follows(H, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06048915720470971;  // std dev = 0.937, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1814373887507211;  // std dev = 0.305, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( tweets(A, D) )
%   | then if ( follows(A, E), tweets(E, D) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03983229196938727;  // std dev = 1.301, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | | else if ( tweets(F, D), recursion_accounttype(F, B) )
%   | | | then return 0.120799037099517;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return -0.16372967135819297;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12589497004522698;  // std dev = 0.580, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(D, C) )
%   then if ( recursion_accounttype(D, B), follows(E, D) )
%   | then return 0.2183372772772089;  // std dev = 0.770, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else return -0.13694919478449424;  // std dev = 0.015, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else if ( recursion_accounttype(F, B) )
%   | then if ( follows(F, G), follows(A, G) )
%   | | then return 0.4348924464316499;  // std dev = 0.099, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(H, A) )
%   | | then return -0.10185702487159622;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( follows(A, I) )
%   | | | then return -0.45420962671658244;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.967836
   AUC PR    = 0.332791
   CLL	      = -0.272325
   Precision = 0.343832 at threshold = 0.5
   Recall    = 0.839744
   F1        = 0.487896


Total learning time: 0.856 seconds
Total inference time: 10.8 seconds
AUC ROC: 0.967836


Results scoring model
   AUC ROC   = 0.9975
   AUC PR    = 0.99756
   CLL	      = -0.208101
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.9
   F1        = 0.947368


Total scoring time: 0.45 seconds
Parameter learned model CLL: -0.208101


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'tweets(A, D), tweets(C, D)', 'false': 'follows(A, E), follows(E, E)', 'false,false': 'follows(F, A), recursion_accounttype(F, B)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.0, 0, 8], 'true,false': [4.21e-08, 0, 5], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 2], 'false,false,false,true': [1.789, 16, 4], 'false,false,false,false': [0.894, 4, 1]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'true,false': 'follows(C, E), follows(E, E)', 'true,false,false': 'follows(F, A)', 'false': 'follows(G, A), recursion_accounttype(G, B)', 'false,true': 'follows(H, G)', 'false,false': 'follows(A, A)', 'false,false,false': 'tweets(A, I), follows(A, J)'}, {'true,true': [0.0, 0, 11], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 2], 'false,true,false': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [1.764, 14, 4], 'false,false,false,false': [0.926, 6, 1]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A)', 'false,false,true': 'follows(F, E)'}, {'true,true': [0.0, 0, 12], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.663, 18, 5], 'false,false,true,false': [0.0, 1, 0], 'false,false,false': [0.43, 1, 3]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(A, D), follows(C, D)', 'true,false': 'tweets(C, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, G)', 'false,false,true': 'tweets(G, H), tweets(F, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true': [4.21e-08, 0, 11], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.65, 17, 5], 'false,false,true,false': [0.0, 0, 0], 'false,false,false,true': [0.896, 2, 2], 'false,false,false,false': [0.707, 1, 1]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(D, A), tweets(D, E)', 'false,true': 'tweets(A, E)', 'false,true,true': 'follows(F, D), follows(D, F)', 'false,false': 'follows(A, G), follows(G, H)', 'false,false,true': 'recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A)'}, {'true': [0.0, 0, 12], 'false,true,true,true': [1.445, 14, 3], 'false,true,true,false': [0.0, 1, 0], 'false,true,false': [0.33, 4, 2], 'false,false,true,true': [0.0, 0, 1], 'false,false,true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.796, 1, 2]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), tweets(D, E)', 'true,true': 'tweets(C, F), tweets(A, F)', 'true,true,false': 'follows(C, C)', 'false': 'follows(A, A)', 'false,false': 'follows(A, G), follows(G, G)', 'false,false,false': 'follows(H, A), follows(A, I)'}, {'true,true,true': [0.271, 0, 8], 'true,true,false,true': [0.0, 0, 0], 'true,true,false,false': [0.294, 0, 5], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [1.371, 17, 3], 'false,false,false,false': [1.037, 3, 4]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(A, D)', 'false,true': 'follows(E, A), follows(E, D)', 'false,true,false': 'follows(D, F)', 'false,false': 'tweets(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true': [0.375, 0, 13], 'false,true,true': [1.034, 17, 2], 'false,true,false,true': [0.241, 0, 2], 'false,true,false,false': [0.793, 1, 2], 'false,false,true,true': [0.0, 0, 1], 'false,false,true,false': [0.0, 2, 0], 'false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, D)', 'false,false': 'tweets(A, E), follows(F, A)', 'false,false,true': 'follows(G, F), recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A), follows(H, H)'}, {'true': [0.338, 0, 13], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.569, 0, 4], 'false,false,true,false': [0.064, 16, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.937, 4, 3]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,true': 'follows(A, E), tweets(E, D)', 'false,true,true': 'follows(E, E)', 'false,true,false': 'tweets(F, D), recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(A, A)'}, {'true': [0.305, 0, 13], 'false,true,true,true': [0.0, 0, 0], 'false,true,true,false': [1.301, 14, 5], 'false,true,false,true': [0.0, 0, 1], 'false,true,false,false': [0.0, 2, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.58, 4, 1], 'false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(C, A), follows(D, C)', 'true': 'recursion_accounttype(D, B), follows(E, D)', 'false': 'recursion_accounttype(F, B)', 'false,true': 'follows(F, G), follows(A, G)', 'false,false': 'follows(H, A)', 'false,false,false': 'follows(A, I)'}, {'true,true': [0.77, 0, 17], 'true,false': [0.015, 18, 0], 'false,true,true': [0.099, 0, 3], 'false,true,false': [0.0, 0, 0], 'false,false,true': [0.0, 1, 0], 'false,false,false,true': [0.0, 1, 0], 'false,false,false,false': [0.0, 0, 0]}]]
[{'': [-2.7328566760003855e-16, 0.19204389574759959], 'false': [nan, 0.19204389574759959], 'false,false': [0.0, 0.16000000000000003], 'false,false,false': [0.15999999999999986, 0.16000000000000003], 'true': [-2.220446049250313e-16, 3.552713678800501e-16]}, {'': [2.7328566760003855e-16, 0.1788039058501576], 'false': [0.0, 0.15999999999999998], 'false,false': [nan, 0.15999999999999998], 'false,false,false': [0.1728395061728395, 0.12244897959183675], 'true': [0.0, -1.1102230246251565e-16], 'false,true': [0.0, nan], 'true,false': [nan, -1.1102230246251565e-16], 'true,false,false': [-1.1102230246251565e-16, nan]}, {'': [-2.590520390792032e-16, 0.1675690560746787], 'false': [nan, 0.1675690560746788], 'false,false': [0.1165442610796976, 0.18495002485733358], 'false,false,true': [0.12022633902636116, 0.0], 'true': [-2.590520390792032e-16, nan]}, {'': [1.4802973661668753e-16, 0.15482641851934748], 'false': [nan, 0.15482641851934745], 'false,false': [0.12369188562223409, 0.21753615033867205], 'false,false,false': [0.2008464333765808, 0.24999999999999994], 'false,false,true': [0.12369188562223409, nan], 'true': [1.6148698540002277e-16, 0.0], 'true,false': [0.0, nan]}, {'': [-5.551115123125783e-17, 0.14964788808541063], 'false': [0.11657959085603903, 0.1815061525546666], 'false,false': [0.0, 0.21143223699250124], 'false,false,false': [nan, 0.21143223699250124], 'false,true': [0.11697937575744535, 0.10893529719070676], 'false,true,true': [0.12288757289383036, 0.0], 'false,false,true': [0.0, nan]}, {'': [0.01349483076345881, 0.11880435936684862], 'false': [nan, 0.11880435936684862], 'false,false': [nan, 0.11880435936684862], 'false,false,false': [0.09395293087879657, 0.15363432716619024], 'true': [0.01349483076345881, nan], 'true,true': [0.009175516356860897, 0.017289843489241674], 'true,true,false': [nan, 0.017289843489241674]}, {'': [0.010827074913087653, 0.11474395831907903], 'false': [0.12264676993227142, 0.04379853408199224], 'false,true': [0.05629568378434673, 0.1830611708019208], 'false,true,false': [0.02897169389386539, 0.20974745864499647], 'false,false': [0.04379853408199224, nan], 'false,false,true': [0.0, 0.0]}, {'': [0.008807045209652552, 0.097979335723967], 'false': [nan, 0.097979335723967], 'false,false': [0.08675868152388272, 0.125421626066383], 'false,false,false': [nan, 0.12542162606638302], 'false,false,true': [0.0808290524084998, 0.00025232042059030596]}, {'': [0.007146124008940025, 0.08169843389680359], 'false': [0.0807738211202045, 0.06721226079641704], 'false,true': [0.08907520482550182, 0.017990352430358337], 'false,true,true': [nan, 0.08907520482550182], 'false,false': [0.06721226079641704, nan], 'false,false,true': [nan, 0.06721226079641704], 'false,true,false': [0.0, 0.0]}, {'': [0.048492197039567725, 0.13636752989795392], 'false': [0.00328189447730128, 0.031038089006732827], 'true': [0.034905433762333904, 1.3165480136603483e-05], 'false,false': [0.0, 0.0], 'false,true': [0.00328189447730128, nan], 'false,false,false': [0.0, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
0;true;tweets(A, D), tweets(C, D).;true;true
0;false;follows(F, A), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
1;true;follows(C, D), recursion_accounttype(D, B).;true;true
1;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;false;follows(E, A).;true;true
2;false,true;follows(F, E).;true;true
3;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
3;true;follows(A, D), follows(C, D).;true;true
4;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
4;false;follows(D, A), tweets(D, E).;true;true
4;false,true;tweets(A, E).;true;true
4;false,true,true;follows(F, D), follows(D, F).;true;true
4;false,false;follows(A, G), follows(G, H).;true;true
6;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
6;false;follows(A, D).;true;true
6;false,false;recursion_accounttype(H, B).;true;true
7;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
7;false;tweets(A, E), follows(F, A).;true;true
7;false,true;follows(G, F), recursion_accounttype(G, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;tweets(A, D).;true;true
8;false,true;follows(A, E), tweets(E, D).;true;true
8;false,true,false;tweets(F, D), recursion_accounttype(F, B).;true;true
9;;accounttype(A, B) :- follows(C, A), follows(D, C).;true;true
9;true;recursion_accounttype(D, B), follows(E, D).;true;true
9;false;recursion_accounttype(F, B).;true;true
9;false,false;follows(H, A).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), tweets(C, D) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.8581489350995121;  // std dev = 4.21e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(F, A) )
%   | | then if ( follows(F, G), follows(G, A) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return 0.1438632208137979;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | else return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.7194734122109544;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.7194734122109545;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(F, A) )
%   | | then if ( follows(F, G), follows(G, A) )
%   | | | then return -0.12544463852839138;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return 0.12543301544918353;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | else return 0.5170719622367217;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.5553664367462846;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.5553664367462844;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.03198868676147763;  // std dev = 1.278, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | | else return -0.1778907400865106;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0.41257245288266;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(C, D) )
%   | then return 0.4175135841583098;  // std dev = 1.29e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.41751358415830997;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then return 0.41751358415830997;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(F, A) )
%   | | then if ( follows(F, G), follows(G, A) )
%   | | | then return -0.10916639413877267;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return 0.11529858173311577;  // std dev = 1.191, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | else return 0.3151786576185065;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.3207118471601497;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(D, A), tweets(D, E) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(F, D), follows(D, F) )
%   | | | then return 0.011079547285414866;  // std dev = 1.286, 17.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=3 */
%   | | | else return -0.16892068896248588;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.04090783665154623;  // std dev = 0.485, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then return 0.48676009386434205;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.1534267605310087;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A) )
%   | then if ( tweets(A, D), tweets(C, D) )
%   | | then return 0.2551722425694894;  // std dev = 5.27e-09, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.25517224256948945;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.3140116054836866;  // std dev = 0.005, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(E, A) )
%   | then if ( follows(F, E), recursion_accounttype(F, B) )
%   | | then return 0.5315277483114658;  // std dev = 0.553, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(E, G), follows(G, A) )
%   | | | then return -0.10076292753496785;  // std dev = 0.005, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return -0.18299598520150803;  // std dev = 0.041, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.1784995099196248;  // std dev = 0.845, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then return 0.2097577156325356;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.20975771563253554;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.25059719541501135;  // std dev = 0.005, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, F) )
%   | then if ( tweets(A, G) )
%   | | then if ( tweets(H, G), follows(H, A) )
%   | | | then return 0.004685364563910685;  // std dev = 1.110, 16.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=3 */
%   | | | else return 0.23870332756550613;  // std dev = 0.407, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.10972354504390698;  // std dev = 0.654, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.1675987364295407;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return -0.09127760663037783;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then return 0.17709649774527736;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.17709649774527736;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.2065221078290662;  // std dev = 0.004, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( tweets(A, F), follows(G, A) )
%   | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | then return 0.4335966668703022;  // std dev = 0.555, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, I), follows(I, A) )
%   | | | then return -0.11640427280189222;  // std dev = 0.121, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return -0.09785243101505732;  // std dev = 0.034, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( follows(J, A) )
%   | | then return -0.08486347910081199;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.1204905712314136;  // std dev = 0.795, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then return 0.152743858093671;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.15274385809367097;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.17472058203131738;  // std dev = 0.004, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G), tweets(G, F) )
%   | | then if ( follows(A, H), follows(H, A) )
%   | | | then return -0.0013656012859531753;  // std dev = 0.961, 16.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=3 */
%   | | | else return 0.1763293547903343;  // std dev = 0.357, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( tweets(I, F), recursion_accounttype(I, B) )
%   | | | then return 0.09939746905943714;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return -0.07675584363039512;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else return -0.10154673860048218;  // std dev = 0.656, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(D, C) )
%   then if ( recursion_accounttype(D, B), follows(E, D) )
%   | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then if ( tweets(A, G), follows(A, F) )
%   | | | then return 0.13400703000801117;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.1133185662739465;  // std dev = 0.031, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.3365156255402445;  // std dev = 0.508, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then return -0.10494405573523181;  // std dev = 0.031, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else return -0.0714735256437167;  // std dev = 3.05e-05, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( recursion_accounttype(J, B) )
%   | then return 0.30594418677308843;  // std dev = 0.052, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(K, A) )
%   | | then return -0.1344642508143575;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.5730041257324865;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */


Results
   AUC ROC   = 0.965638
   AUC PR    = 0.268726
   CLL	      = -0.346349
   Precision = 0.023866 at threshold = 0.5
   Recall    = 0.897436
   F1        = 0.046496


Total learning time: 2.712 seconds
Total inference time: 19.771 seconds
AUC ROC: 0.965638


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.163576
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.9
   F1        = 0.947368


Total scoring time: 0.591 seconds
Refined model CLL: -0.163576


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.965638
   AUC PR    = 0.268726
   CLL	      = -0.346349
   Precision = 0.023866 at threshold = 0.5
   Recall    = 0.897436
   F1        = 0.046496


Total learning time: 4.609000000000001 seconds
Total inference time: 19.771 seconds
AUC ROC: 0.965638
Total revision time: 4.609000000000001
Best scored revision CLL: -0.163576


Dataset: 7_yeast_twitter, Fold: 2, Type: Transfer (trRDN-B), Time: 00:36:47
{'AUC ROC': 0.965638, 'AUC PR': 0.268726, 'CLL': -0.346349, 'Precision': [0.023866, 0.5], 'Recall': 0.897436, 'F1': 0.046496, 'Learning time': 4.609000000000001, 'Inference time': 19.771, 'parameter_20': {'AUC ROC': 0.967836, 'AUC PR': 0.332791, 'CLL': -0.272325, 'Precision': [0.343832, 0.5], 'Recall': 0.839744, 'F1': 0.487896, 'Learning time': 0.856, 'Inference time': 10.8}}


Amount of data: 25
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
0;true;complex(A, D), complex(C, D).;false;false
0;false;interaction(E, A), interaction(E, E).;true;true
0;false,true;interaction(A, E).;true;true
0;false,true,true;complex(A, F).;false;false
0;false,true,false;complex(E, G), location(A, H).;false;false
0;false,false;interaction(A, I), recursion_proteinclass(I, B).;false;true
0;false,false,false;location(A, J), complex(A, K).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
1;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
1;true,false;interaction(E, C), interaction(E, E).;false;true
1;true,false,false;interaction(A, F), enzyme(F, G).;false;false
1;false;interaction(A, H), recursion_proteinclass(H, B).;true;true
1;false,true;enzyme(H, I), interaction(H, J).;false;false
1;false,false;interaction(A, A).;false;true
1;false,false,false;complex(A, K), interaction(L, A).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(C, D).;false;true
2;true,false;interaction(E, A), interaction(A, E).;false;true
2;true,false,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(A, G), enzyme(G, H).;true;true
2;false,false,true;interaction(G, I), phenotype(G, J).;false;false
2;false,false,false;phenotype(A, K).;false;false
3;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
3;true;interaction(D, A), interaction(D, C).;false;true
3;true,false;complex(C, E).;false;true
3;true,false,false;interaction(A, F), interaction(F, F).;false;false
3;false;interaction(A, A).;false;true
3;false,false;interaction(A, G), interaction(H, A).;true;true
3;false,false,true;complex(H, I), complex(G, I).;false;false
3;false,false,false;complex(A, J), phenotype(A, K).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
4;false;interaction(A, D), complex(D, E).;true;true
4;false,true;complex(A, E), location(A, F).;true;true
4;false,true,true;interaction(D, G), interaction(G, D).;false;false
4;false,true,false;enzyme(D, H), phenotype(A, I).;false;false
4;false,false;interaction(J, A), interaction(K, J).;true;true
4;false,false,true;recursion_proteinclass(K, B).;false;false
4;false,false,false;interaction(A, L), phenotype(L, M).;false;false
5;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
5;true;interaction(A, D), complex(D, E).;true;false
5;true,true;complex(C, F), complex(A, F).;false;true
5;true,true,false;interaction(C, C).;false;false
5;false;interaction(A, A).;false;true
5;false,false;interaction(G, A), interaction(G, G).;true;true
5;false,false,true;complex(G, H), location(A, I).;false;false
5;false,false,false;interaction(A, J), interaction(K, A).;false;false
6;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
6;false;interaction(D, A), enzyme(D, E).;true;true
6;false,true;enzyme(A, E).;true;true
6;false,true,true;interaction(A, F), interaction(D, F).;false;false
6;false,true,false;interaction(G, D), enzyme(G, H).;false;false
6;false,false;complex(A, I), location(A, J).;true;true
6;false,false,true;location(K, J), recursion_proteinclass(K, B).;false;false
6;false,false,false;phenotype(A, L).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
7;false;interaction(D, A), interaction(D, D).;true;true
7;false,true;complex(D, E), complex(A, E).;true;true
7;false,true,true;interaction(A, F).;false;false
7;false,true,false;enzyme(A, G), phenotype(D, H).;false;false
7;false,false;complex(A, I), interaction(A, J).;true;true
7;false,false,true;interaction(J, K), recursion_proteinclass(K, B).;false;false
7;false,false,false;interaction(A, L), interaction(L, L).;false;false
8;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
8;false;complex(A, D).;true;true
8;false,true;interaction(E, A), complex(E, D).;true;true
8;false,true,true;interaction(E, E).;false;false
8;false,true,false;complex(F, D), recursion_proteinclass(F, B).;false;false
8;false,false;interaction(G, A), phenotype(G, H).;true;true
8;false,false,true;interaction(A, A).;false;false
8;false,false,false;phenotype(A, I).;false;false
9;;proteinclass(A, B) :- interaction(A, C), interaction(C, D).;true;true
9;true;recursion_proteinclass(D, B), interaction(D, E).;false;false
9;false;phenotype(A, F).;true;true
9;false,true;phenotype(G, F), recursion_proteinclass(G, B).;true;false
9;false,true,true;interaction(H, G), interaction(H, A).;false;false
9;false,false;interaction(A, I), location(A, J).;true;true
9;false,false,true;location(I, K).;false;false
9;false,false,false;interaction(L, A), location(L, M).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), tweets(C, D) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.8581489350995121;  // std dev = 4.21e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, E), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.09814893509951236;  // std dev = 2.135, 25.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=6 */
%   | | | else return 0.10814893509951218;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.7194734122109543;  // std dev = 4.21e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( follows(C, E), follows(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, A) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(H, G) )
%   | | then return 0.7194734122109545;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, I), follows(A, J) )
%   | | | then return 0.10664590524650626;  // std dev = 2.106, 23.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
%   | | | else return 0.04472921827442743;  // std dev = 1.264, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C) )
%   | then return 0.5553664367462846;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A) )
%   | | then if ( follows(F, E) )
%   | | | then return 0.0721751233676304;  // std dev = 2.202, 30.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=8 */
%   | | | else return -0.1686528272019488;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.43563987727512393;  // std dev = 0.488, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(C, D) )
%   | then return 0.4175135841583098;  // std dev = 4.21e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( tweets(C, E) )
%   | | then return 0.41751358415830997;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, G) )
%   | | then if ( tweets(G, H), tweets(F, H) )
%   | | | then return 0.06993985442249726;  // std dev = 2.182, 29.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=8 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, I) )
%   | | | then return 0.2955788347918314;  // std dev = 0.931, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.1038943947379803;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.3207118471601497;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(D, A), tweets(D, E) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(F, D), follows(D, F) )
%   | | | then return -0.015397173872066945;  // std dev = 1.694, 21.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=4 */
%   | | | else return -0.1552612622717177;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.1947396841518372;  // std dev = 0.434, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.7516790872708992;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.22758597566190852;  // std dev = 0.952, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(D, E) )
%   | then if ( tweets(C, F), tweets(A, F) )
%   | | then return 0.28204469252246567;  // std dev = 0.255, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( follows(C, C) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.3416681300842116;  // std dev = 0.237, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G), follows(G, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(H, A), follows(A, I) )
%   | | | then return 0.009087735403943467;  // std dev = 2.011, 27.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=6 */
%   | | | else return 0.14225216592807935;  // std dev = 1.169, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.24431479567242897;  // std dev = 0.325, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( follows(A, D) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then return -0.05008584091170321;  // std dev = 1.635, 24.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=4 */
%   | | else if ( follows(D, F) )
%   | | | then return 0.4905317224093803;  // std dev = 0.810, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.14879335123476978;  // std dev = 0.945, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else if ( tweets(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.22908828946702053;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return -0.23821097867919924;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.2035123058804928;  // std dev = 0.293, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( follows(A, D), follows(D, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E), follows(F, A) )
%   | | then if ( follows(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.6004635441915173;  // std dev = 0.653, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.18685360481152485;  // std dev = 0.111, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else if ( follows(H, A), follows(H, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07580457409920034;  // std dev = 1.310, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.17349048501969824;  // std dev = 0.264, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( tweets(A, D) )
%   | then if ( follows(A, E), tweets(E, D) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.053242191903020424;  // std dev = 1.689, 24.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=7 */
%   | | else if ( tweets(F, D), recursion_accounttype(F, B) )
%   | | | then return 0.11475975502669478;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return -0.16972500156795994;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06670072611293837;  // std dev = 1.031, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(D, C) )
%   then if ( recursion_accounttype(D, B), follows(E, D) )
%   | then return 0.2658468154911462;  // std dev = 1.051, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else return -0.17424579258947276;  // std dev = 0.118, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   else if ( recursion_accounttype(F, B) )
%   | then if ( follows(F, G), follows(A, G) )
%   | | then return 0.5122409504904523;  // std dev = 0.102, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(H, A) )
%   | | then return -0.11672777718068657;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( follows(A, I) )
%   | | | then return -0.3589665953741208;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.976271
   AUC PR    = 0.371064
   CLL	      = -0.261157
   Precision = 0.33687 at threshold = 0.5
   Recall    = 0.814103
   F1        = 0.476548


Total learning time: 0.843 seconds
Total inference time: 10.651 seconds
AUC ROC: 0.976271


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.254117
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.8
   F1        = 0.888889


Total scoring time: 0.482 seconds
Parameter learned model CLL: -0.254117


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'tweets(A, D), tweets(C, D)', 'false': 'follows(A, E), follows(E, E)', 'false,false': 'follows(F, A), recursion_accounttype(F, B)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.0, 0, 10], 'true,false': [4.21e-08, 0, 5], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 2], 'false,false,false,true': [2.135, 19, 6], 'false,false,false,false': [1.225, 6, 2]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'true,false': 'follows(C, E), follows(E, E)', 'true,false,false': 'follows(F, A)', 'false': 'follows(G, A), recursion_accounttype(G, B)', 'false,true': 'follows(H, G)', 'false,false': 'follows(A, A)', 'false,false,false': 'tweets(A, I), follows(A, J)'}, {'true,true': [4.21e-08, 0, 13], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 2], 'false,true,false': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [2.106, 17, 6], 'false,false,false,false': [1.264, 8, 2]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A)', 'false,false,true': 'follows(F, E)'}, {'true,true': [0.0, 0, 14], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [2.202, 22, 8], 'false,false,true,false': [0.0, 1, 0], 'false,false,false': [0.488, 2, 3]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(A, D), follows(C, D)', 'true,false': 'tweets(C, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, G)', 'false,false,true': 'tweets(G, H), tweets(F, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true': [4.21e-08, 0, 13], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [2.182, 21, 8], 'false,false,true,false': [0.0, 0, 0], 'false,false,false,true': [0.931, 2, 2], 'false,false,false,false': [0.816, 2, 1]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(D, A), tweets(D, E)', 'false,true': 'tweets(A, E)', 'false,true,true': 'follows(F, D), follows(D, F)', 'false,false': 'follows(A, G), follows(G, H)', 'false,false,true': 'recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A)'}, {'true': [0.0, 0, 14], 'false,true,true,true': [1.694, 17, 4], 'false,true,true,false': [0.0, 1, 0], 'false,true,false': [0.434, 5, 4], 'false,false,true,true': [0.0, 0, 1], 'false,false,true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.952, 2, 2]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), tweets(D, E)', 'true,true': 'tweets(C, F), tweets(A, F)', 'true,true,false': 'follows(C, C)', 'false': 'follows(A, A)', 'false,false': 'follows(A, G), follows(G, G)', 'false,false,false': 'follows(H, A), follows(A, I)'}, {'true,true,true': [0.255, 0, 10], 'true,true,false,true': [0.0, 0, 0], 'true,true,false,false': [0.237, 0, 5], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [2.011, 21, 6], 'false,false,false,false': [1.169, 4, 4]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(A, D)', 'false,true': 'follows(E, A), follows(E, D)', 'false,true,false': 'follows(D, F)', 'false,false': 'tweets(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true': [0.325, 0, 15], 'false,true,true': [1.635, 20, 4], 'false,true,false,true': [0.81, 1, 3], 'false,true,false,false': [0.945, 2, 2], 'false,false,true,true': [0.0, 0, 1], 'false,false,true,false': [0.0, 2, 0], 'false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, D)', 'false,false': 'tweets(A, E), follows(F, A)', 'false,false,true': 'follows(G, F), recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A), follows(H, H)'}, {'true': [0.293, 0, 15], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.653, 0, 6], 'false,false,true,false': [0.111, 19, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.31, 6, 4]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,true': 'follows(A, E), tweets(E, D)', 'false,true,true': 'follows(E, E)', 'false,true,false': 'tweets(F, D), recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(A, A)'}, {'true': [0.264, 0, 15], 'false,true,true,true': [0.0, 0, 0], 'false,true,true,false': [1.689, 17, 7], 'false,true,false,true': [0.0, 0, 1], 'false,true,false,false': [0.0, 2, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.031, 6, 2], 'false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(C, A), follows(D, C)', 'true': 'recursion_accounttype(D, B), follows(E, D)', 'false': 'recursion_accounttype(F, B)', 'false,true': 'follows(F, G), follows(A, G)', 'false,false': 'follows(H, A)', 'false,false,false': 'follows(A, I)'}, {'true,true': [1.051, 0, 22], 'true,false': [0.118, 22, 0], 'false,true,true': [0.102, 0, 3], 'false,true,false': [0.0, 0, 0], 'false,false,true': [0.0, 1, 0], 'false,false,false,true': [0.0, 2, 0], 'false,false,false,false': [0.0, 0, 0]}]]
[{'': [-2.3684757858670006e-16, 0.20408163265306134], 'false': [nan, 0.20408163265306134], 'false,false': [0.0, 0.1836547291092745], 'false,false,false': [0.18240000000000017, 0.18750000000000003], 'true': [-8.881784197001253e-17, 3.552713678800501e-16]}, {'': [1.1842378929335003e-16, 0.194648020807252], 'false': [0.0, 0.18365023602958397], 'false,false': [nan, 0.1836502360295839], 'false,false,false': [0.19281663516068046, 0.15989556194052354], 'true': [1.3664283380001927e-16, 0.0], 'false,true': [0.0, nan], 'true,false': [nan, 0.0], 'true,false,false': [0.0, nan]}, {'': [-2.5376526277146434e-16, 0.18570795761215875], 'false': [nan, 0.1857079576121587], 'false,false': [0.15817759402393045, 0.2377228424867129], 'false,false,true': [0.16157927398250627, 0.0], 'true': [-2.5376526277146434e-16, nan]}, {'': [1.2688263138573217e-16, 0.17978430995320327], 'false': [nan, 0.17978430995320321], 'false,false': [0.16410584255490893, 0.22815241644291642], 'false,false,false': [0.21685309444039766, 0.2222222222222222], 'false,false,true': [0.16410584255490893, nan], 'true': [1.3664283380001927e-16, 0.0], 'true,false': [0.0, nan]}, {'': [-3.172065784643304e-17, 0.1769810898788756], 'false': [0.157427898561888, 0.2251376674761692], 'false,false': [0.0, 0.22648736641801265], 'false,false,false': [nan, 0.22648736641801265], 'false,true': [0.1312197676573649, 0.18822978756609687], 'false,true,true': [0.13657914787546202, 0.0], 'false,false,true': [0.0, nan]}, {'': [0.008863530523259788, 0.15776577165956465], 'false': [nan, 0.15776577165956468], 'false,false': [nan, 0.15776577165956465], 'false,false,false': [0.14981880900177066, 0.17090720862864656], 'true': [0.008863530523259788, nan], 'true,true': [0.006499157098276975, 0.011222307835439182], 'true,true,false': [nan, 0.011222307835439182]}, {'': [0.007049856232989134, 0.15611427903567124], 'false': [0.16486573295971108, 0.048526356891109464], 'false,true': [0.11142592432464948, 0.22264976173732526], 'false,true,false': [0.1638492847348007, 0.22305768157331196], 'false,false': [0.048526356891109464, nan], 'false,false,true': [0.0, 0.0]}, {'': [0.0057286112263673266, 0.14347563386514015], 'false': [nan, 0.14347563386514015], 'false,false': [0.13062583087588386, 0.17172014554359116], 'false,false,false': [nan, 0.17172014554359116], 'false,false,true': [0.07111645115491154, 0.0006498762298165922]}, {'': [0.004660120774673792, 0.11664617837972378], 'false': [0.10929673759438659, 0.1328309055547303], 'false,false': [0.1328309055547303, nan], 'false,false,true': [nan, 0.1328309055547303], 'false,true': [0.11888633174321998, 0.017984794829937766], 'false,true,true': [nan, 0.11888633174321998], 'false,true,false': [0.0, 0.0]}, {'': [0.07383799918550402, 0.16445995938597635], 'false': [0.0034654854901477274, 0.013039921119944833], 'true': [0.0502054830768509, 0.0006297634505563805], 'false,false': [0.0, 0.0], 'false,true': [0.0034654854901477274, nan], 'false,false,false': [0.0, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
0;true;tweets(A, D), tweets(C, D).;true;true
0;false;follows(F, A), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
1;true;follows(C, D), recursion_accounttype(D, B).;true;true
1;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;false;follows(E, A).;true;true
2;false,true;follows(F, E).;true;true
3;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
3;true;follows(A, D), follows(C, D).;true;true
4;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
4;false;follows(D, A), tweets(D, E).;true;true
4;false,true;tweets(A, E).;true;true
4;false,true,true;follows(F, D), follows(D, F).;true;true
4;false,false;follows(A, G), follows(G, H).;true;true
6;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
6;false;follows(A, D).;true;true
6;false,false;recursion_accounttype(H, B).;true;true
7;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
7;false;tweets(A, E), follows(F, A).;true;true
7;false,true;follows(G, F), recursion_accounttype(G, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;tweets(A, D).;true;true
8;false,true;follows(A, E), tweets(E, D).;true;true
8;false,true,false;tweets(F, D), recursion_accounttype(F, B).;true;true
9;;accounttype(A, B) :- follows(C, A), follows(D, C).;true;true
9;true;recursion_accounttype(D, B), follows(E, D).;true;true
9;false;recursion_accounttype(F, B).;true;true
9;false,false;follows(H, A).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), tweets(C, D) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.8581489350995121;  // std dev = 4.21e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(F, A) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.14185106490048774;  // std dev = 1.49e-08, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | else return 0.4581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.7194734122109543;  // std dev = 1.05e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0.7194734122109545;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(F, A) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | else return 0.3927941835770488;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.5553664367462846;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.5553664367462845;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.011328587536003043;  // std dev = 1.348, 27.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=5 */
%   | | else return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0.32092546969114216;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(C, D) )
%   | then return 0.4175135841583098;  // std dev = 1.18e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0.41751358415830997;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then return 0.41751358415830997;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(F, A) )
%   | | then if ( follows(F, G), follows(G, A) )
%   | | | then return -0.07182469234940507;  // std dev = 0.645, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   | | | else return 0.10954308861262975;  // std dev = 1.085, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | else return 0.25206564481433;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.3207118471601497;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(D, A), tweets(D, E) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(F, D), follows(D, F) )
%   | | | then return 0.0010160112680960736;  // std dev = 1.095, 21.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=4 */
%   | | | else return -0.11204017445370502;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.126832235996028;  // std dev = 0.274, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then return 0.592923864381614;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.09292386438161404;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A) )
%   | then if ( tweets(A, D), tweets(C, D) )
%   | | then return 0.2551722425694894;  // std dev = 5.27e-09, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.25517224256948945;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.3026504603437134;  // std dev = 0.022, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( tweets(G, E), follows(G, A) )
%   | | | then return 0.4261097689023897;  // std dev = 0.314, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.5447671473635508;  // std dev = 0.063, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, H), follows(H, A) )
%   | | | then return -0.11425781134398409;  // std dev = 0.036, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | | else return -0.10480385525639353;  // std dev = 0.004, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( follows(I, A) )
%   | | then return -6.241436263347333E-4;  // std dev = 0.553, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return -0.1377901287044279;  // std dev = 0.715, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.2163751815987603;  // std dev = 0.014, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( follows(A, D) )
%   | then if ( follows(E, A) )
%   | | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | | then return 0.3900796638395028;  // std dev = 0.248, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.10666498587523206;  // std dev = 0.055, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else return 0.11151685360795023;  // std dev = 0.928, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.18282498129132707;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return -0.09695025292991995;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then return 0.1761341722173262;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.1761341722173262;  // std dev = 3.73e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.20531759342285297;  // std dev = 0.017, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( tweets(A, F), follows(G, A) )
%   | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | then return 0.26527476970885716;  // std dev = 0.220, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, I), follows(I, A) )
%   | | | then return -0.09374577876493338;  // std dev = 0.030, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | | else return -0.08707959163420016;  // std dev = 0.004, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( follows(J, A) )
%   | | then return -0.010844627617627051;  // std dev = 0.457, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.08430930026074668;  // std dev = 0.927, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then return 0.15201344475131195;  // std dev = 1.86e-09, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.15201344475131195;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.17384926678286752;  // std dev = 0.015, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G), tweets(G, F) )
%   | | then if ( follows(A, H), follows(H, A) )
%   | | | then return -0.009084325690799614;  // std dev = 0.652, 21.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=5 */
%   | | | else return 0.2326519553550949;  // std dev = 0.380, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( tweets(I, F), recursion_accounttype(I, B) )
%   | | | then return 0.12505321121186808;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return -0.08199011278144563;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( follows(J, A) )
%   | | then return -0.009459147904162201;  // std dev = 0.458, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return -0.15207131771458512;  // std dev = 0.715, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(D, C) )
%   then if ( recursion_accounttype(D, B), follows(E, D) )
%   | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then if ( tweets(A, G), follows(A, F) )
%   | | | then return 0.13343654903139734;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.11678916459926632;  // std dev = 0.021, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.15028689288200633;  // std dev = 0.013, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.2984562622537153;  // std dev = 0.131, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( tweets(A, I) )
%   | | then return -0.08433365935592044;  // std dev = 0.007, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else return -0.11097953192715683;  // std dev = 0.016, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( recursion_accounttype(J, B) )
%   | then return 0.3791176684511446;  // std dev = 0.110, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(K, A) )
%   | | then return -0.09552163275804221;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.4068079033158609;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */


Results
   AUC ROC   = 0.986677
   AUC PR    = 0.311944
   CLL	      = -0.259151
   Precision = 0.045468 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.086981


Total learning time: 2.825 seconds
Total inference time: 28.48 seconds
AUC ROC: 0.986677


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.146665
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.667 seconds
Refined model CLL: -0.146665


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.986677
   AUC PR    = 0.311944
   CLL	      = -0.259151
   Precision = 0.045468 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.086981


Total learning time: 4.817 seconds
Total inference time: 28.48 seconds
AUC ROC: 0.986677
Total revision time: 4.817
Best scored revision CLL: -0.146665


Dataset: 7_yeast_twitter, Fold: 2, Type: Transfer (trRDN-B), Time: 00:37:32
{'AUC ROC': 0.986677, 'AUC PR': 0.311944, 'CLL': -0.259151, 'Precision': [0.045468, 0.5], 'Recall': 1.0, 'F1': 0.086981, 'Learning time': 4.817, 'Inference time': 28.48, 'parameter_25': {'AUC ROC': 0.976271, 'AUC PR': 0.371064, 'CLL': -0.261157, 'Precision': [0.33687, 0.5], 'Recall': 0.814103, 'F1': 0.476548, 'Learning time': 0.843, 'Inference time': 10.651}}


